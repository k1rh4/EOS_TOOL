(data (i32.const 4) "PX\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "force to fail\00")
(data (i32.const 160) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 224) "cannot pass end iterator to modify\00")
(data (i32.const 272) "cannot create objects in table of another contract\00")
(data (i32.const 336) "write\00")
(data (i32.const 352) "object passed to modify is not in multi_index\00")
(data (i32.const 400) "cannot modify objects in table of another contract\00")
(data (i32.const 464) "updater cannot change primary key when modifying an object\00")
(data (i32.const 528) "error reading iterator\00")
(data (i32.const 560) "read\00")
(data (i32.const 576) "cannot pass end iterator to erase\00")
(data (i32.const 624) "cannot increment end iterator\00")
(data (i32.const 656) "object passed to erase is not in multi_index\00")
(data (i32.const 704) "cannot erase objects in table of another contract\00")
(data (i32.const 768) "attempt to remove object that was not in multi_index\00")
(data (i32.const 832) "get\00")
(data (i32.const 848) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 912) "invalid symbol name\00")
(data (i32.const 960) "checking runrefunding...\00")
(data (i32.const 992) " \n entering loop, checking runrefunding...\00")
(data (i32.const 1040) "active\00")
(data (i32.const 1056) "finrex lend, freed\00")
(data (i32.const 1088) " \n entering loop, checking runrenting...\00")
(data (i32.const 1136) " \nend \00")
(data (i32.const 1152) " \nlender is \00")
(data (i32.const 1168) " \nasset \00")
(data (i32.const 1184) " \nnow time is \00")
(data (i32.const 1200) "\n undelegatebw...\00")
(data (i32.const 1232) "undelegatebw\00")
(data (i32.const 1248) "\n writing to refunding table...\00")
(data (i32.const 1280) "server is not available\00")
(data (i32.const 1312) "can not find period\00")
(data (i32.const 1344) "can not find borrow order\00")
(data (i32.const 1376) "can not find lend order\00")
(data (i32.const 1408) "can not find borrow record\00")
(data (i32.const 1440) "can not find lend record\00")
(data (i32.const 1472) "frozen_asset should be eosio.token\00")
(data (i32.const 1520) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1584) "invalid price match\00")
(data (i32.const 1616) "deal quantity should be positive\00")
(data (i32.const 1664) "\n maker deal price is : \00")
(data (i32.const 1696) "\n borrow order time is : \00")
(data (i32.const 1728) "\n lend order time is : \00")
(data (i32.const 1760) "delegate cpu amount should be positive\00")
(data (i32.const 1808) "multiplication overflow\00")
(data (i32.const 1840) "multiplication underflow\00")
(data (i32.const 1872) "divide by zero\00")
(data (i32.const 1888) "signed division overflow\00")
(data (i32.const 1920) "attempt to subtract asset with different symbol\00")
(data (i32.const 1968) "subtraction underflow\00")
(data (i32.const 2000) "subtraction overflow\00")
(data (i32.const 2032) " \nlend_fee is \00")
(data (i32.const 2048) " \ntransaction fee is \00")
(data (i32.const 2080) " \nlender get is \00")
(data (i32.const 2112) "borrow order remaining quantity should be positive\00")
(data (i32.const 2176) "lend order remaining quantity should be positive\00")
(data (i32.const 2240) "\ndelegatebw to borrower\00")
(data (i32.const 2272) "delegatebw\00")
(data (i32.const 2288) "\n diff_price is :\00")
(data (i32.const 2320) "\n borrow price > lend price need to return remaining value \00")
(data (i32.const 2384) "finrex trade, remaining return\00")
(data (i32.const 2416) "finrex trade, lend\00")
(data (i32.const 2448) "frozen asset error\00")
(data (i32.const 2468) "\b0\t\00\00")
(data (i32.const 2480) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2528) "next primary key in table is at autoincrement limit\00")
(data (i32.const 2592) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 2656) "cannot decrement iterator at beginning of table\00")
(data (i32.const 2704) ".\00")
(data (i32.const 2720) " \00")
(data (i32.const 2736) ",\00")
(data (i32.const 2752) "singleton does not exist\00")
(data (i32.const 2784) "no balance found\00")
(data (i32.const 2816) "withdraw\00")
(data (i32.const 2832) "type mismatch\00")
(data (i32.const 2848) "attempt to add asset with different symbol\00")
(data (i32.const 2896) "addition underflow\00")
(data (i32.const 2928) "addition overflow\00")
(data (i32.const 2960) "liquid balance is not enough\00")
(data (i32.const 2992) "overdraw liquid\00")
(data (i32.const 3008) " \nliquid delta is:\00")
(data (i32.const 3040) "@\00")
(data (i32.const 3056) "can not find record\00")
(data (i32.const 3088) "can not find order\00")
(data (i32.const 3120) "ADMIN_CANCEL_ORDER\00")
(data (i32.const 3152) "CANCEL_ORDER\00")
(data (i32.const 3168) "minimum volume is required\00")
(data (i32.const 3200) "LEND_ORDER\00")
(data (i32.const 3216) "Invalid price symbol\00")
(data (i32.const 3248) "price must be positive\00")
(data (i32.const 3280) "price must be valid\00")
(data (i32.const 3312) "Invalid lend quantity symbol\00")
(data (i32.const 3344) "lend quantity must be positive\00")
(data (i32.const 3376) "lend quantity must be int\00")
(data (i32.const 3408) "lend quantity must be valid\00")
(data (i32.const 3440) "remark has more than 256 bytes\00")
(data (i32.const 3472) "\npay asset is \00")
(data (i32.const 3488) "BORROW_ORDER\00")
(data (i32.const 3504) "Invalid borrow quantity symbol\00")
(data (i32.const 3536) "borrow quantity must be positive\00")
(data (i32.const 3584) "borrow quantity must be int\00")
(data (i32.const 3616) "borrow quantity must be valid\00")
(data (i32.const 3648) "force fail when call deposit directly\00")
(data (i32.const 3696) "eosio.bpay\00")
(data (i32.const 3712) "eosio.names\00")
(data (i32.const 3728) "eosio.ram\00")
(data (i32.const 3744) "eosio.ramfee\00")
(data (i32.const 3760) "eosio.saving\00")
(data (i32.const 3776) "eosio.stake\00")
(data (i32.const 3792) "eosio.vpay\00")
(data (i32.const 3808) "invalid quantity\00")
(data (i32.const 3840) "cannot deposit negative balance\00")
(data (i32.const 12272) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx128_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$20 (param i32 i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$24 (param i64)))
(import "env" "printn" (func $fimport$25 (param i64)))
(import "env" "prints" (func $fimport$26 (param i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "printui" (func $fimport$28 (param i64)))
(import "env" "read_action_data" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$30 (param i64)))
(import "env" "require_auth2" (func $fimport$31 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$32 (param i64)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN6finrex6finrex7depositEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE" (func $6))
(export "_ZN6finrex6finrex11borroworderENS0_20request_borrow_orderE" (func $8))
(export "_ZN6finrex6finrex9lendorderENS0_18request_lend_orderE" (func $10))
(export "_ZN6finrex6finrex11cancelorderENS0_20request_cancel_orderE" (func $12))
(export "_ZN6finrex6finrex11admincancelENS0_20request_cancel_orderE" (func $14))
(export "_ZN6finrex6finrex8withdrawENS0_16request_withdrawE" (func $15))
(export "_ZN6finrex6finrex12executetradeENS0_21request_execute_tradeE" (func $17))
(export "_ZN6finrex6finrex10runrentingEt" (func $19))
(export "_ZN6finrex6finrex12runrefundingEt" (func $21))
(export "_ZN6finrex6finrex11logsetorderENS0_9log_orderE" (func $22))
(export "_ZN6finrex6finrex9logcancelENS0_16log_cancel_orderE" (func $24))
(export "_ZN6finrex6finrex6rexlogENS0_8log_dataE" (func $26))
(export "_ZN6finrex6finrex12updateperiodENS0_21request_update_periodE" (func $28))
(export "_ZN6finrex6finrex12deleteperiodEy" (func $30))
(export "_ZN6finrex6finrex12updateserverEv" (func $32))
(export "_ZN6finrex6finrex12updateglobalEy" (func $34))
(export "_ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy" (func $111))
(export "_ZN6finrex6finrex8assert_bEbPKc" (func $134))
(export "_ZN6finrex6finrex22validate_server_statusEv" (func $135))
(export "_ZN6finrex6finrex9get_scopeEyNS0_17order_action_typeE" (func $136))
(export "_ZN6finrex6finrex19cal_transaction_feeEN5eosio5assetENS0_9st_periodE" (func $137))
(export "round" (func $147))
(export "memcmp" (func $148))
(export "strlen" (func $149))
(export "malloc" (func $150))
(export "free" (func $153))
(table $0 17 17 anyfunc)
(elem (i32.const 0) $154 $6 $32 $21 $12 $22 $14 $34 $17 $28 $26 $8 $10 $24 $15 $19 $30)



int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [104]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2656])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4996858902428516352)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2592])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2592])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $76(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $94 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $138($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $95(($9 + [52]), $3)
	CALL $67(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $139($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $139($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $139($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $139($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $144(($9 + [8]))
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	$16 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($17 + [16]) = [0]
	*($17) = ($17 + [16])
	$2 = ($1 + [8])
	*($17 + [28]) = $2
	*($17 + [24]) = $1
	$3 = ($1 + [16])
	*($17 + [32]) = $3
	$4 = ($1 + [24])
	*($17 + [36]) = $4
	$5 = ($1 + [28])
	*($17 + [40]) = $5
	$6 = ($1 + [32])
	*($17 + [44]) = $6
	$7 = ($1 + [36])
	*($17 + [48]) = $7
	$8 = ($1 + [48])
	*($17 + [52]) = $8
	$9 = ($1 + [56])
	*($17 + [56]) = $9
	$10 = ($1 + [64])
	*($17 + [60]) = $10
	$11 = ($1 + [76])
	*($17 + [64]) = $11
	$12 = ($1 + [88])
	*($17 + [68]) = $12
	$13 = ($1 + [96])
	*($17 + [72]) = $13
	$14 = ($1 + [104])
	*($17 + [76]) = $14
	CALL $96(($17 + [24]), $17)
	$15 = *($17 + [16])
	if ( ($15 == 0) ){ goto $label$2 }
	CALL $55($0, $15)
	$16 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($17 + [4]) = $0
	*($17) = $0
	*($17 + [8]) = $16
	*($17 + [16]) = $17
	*($17 + [28]) = $2
	*($17 + [24]) = $1
	*($17 + [32]) = $3
	*($17 + [36]) = $4
	*($17 + [40]) = $5
	*($17 + [44]) = $6
	*($17 + [48]) = $7
	*($17 + [52]) = $8
	*($17 + [56]) = $9
	*($17 + [60]) = $10
	*($17 + [64]) = $11
	*($17 + [68]) = $12
	*($17 + [72]) = $13
	*($17 + [76]) = $14
	CALL $97(($17 + [24]), ($17 + [16]))
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($3) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($2)
	$2 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($3) = ($2 + $4)
	
.LABEL $label$6
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($0)
	$0 = *($0 + [52])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$1 = *($1)
	$4 = *($1)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($1) = $4
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($1) = ($0 + $4)
	
.LABEL $label$8
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $70(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $70(*($1), *($0 + [36]))
	CALL $70(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $70(*($1), *($0 + [52]))
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [400])
	$3 = *($1)
	$8 = *($2)
	*($1 + [56]) = *($8)
	*(($1 + [64])) = *(($8 + [8]))
	$7 = *($2)
	*((($8 = $9) + [12])) = *(($7 + [12]))
	*(($4 = ($8 + [8]))) = *(($7 + [8]))
	*($8) = *($7)
	*($8 + [4]) = *(($7 + [4]))
	$6 = *((*($2 + [4]) + [88]))
	$5 = *($4)
	*((($8 + [32]) + [8])) = $5
	*(($2 = (($8 + [16]) + [8]))) = $5
	$5 = *($8)
	*($8 + [32]) = $5
	*($8 + [16]) = $5
	*(($1 + [88])) = $6
	*(($1 + [80])) = *($2)
	*($1 + [72]) = *($8 + [16])
	CALL eosio_assert([1], [464])
	$2 = *($1 + [96])
	$7 = ( *(($1 + [100])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [104])
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [36]) = $7
	*($8 + [32]) = $7
	*($8 + [40]) = ($7 + $2)
	CALL $100(($8 + [32]), $1)
	CALL db_update_i64(*($1 + [120]), (int_64)0, $7, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-4996858902428516352, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $76($5, $6)
	*($9 + [36]) = [0]
	*($9 + [32]) = $5
	$4 = *(*(CALL $98(($9 + [32])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [2528])
	*($1) = *(($5 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [4]) + [8])
	*($1 + [32]) = *(*($3 + [8]) + [8])
	$5 = *($3 + [12])
	*(($9 + [12])) = *(($5 + [12]))
	*(($6 = ($9 + [8]))) = *(($5 + [8]))
	*($9) = *($5)
	*($9 + [4]) = *(($5 + [4]))
	$4 = *((*($3 + [16]) + [88]))
	$7 = *($6)
	*((($9 + [32]) + [8])) = $7
	*(($5 = (($9 + [16]) + [8]))) = $7
	$7 = *($9)
	*($9 + [32]) = $7
	*($9 + [16]) = $7
	*(($1 + [56])) = $4
	*(($1 + [48])) = *($5)
	*($1 + [40]) = *($9 + [16])
	$5 = *($3 + [20])
	*($1 + [64]) = *($5)
	*(($1 + [72])) = *(($5 + [8]))
	*($1 + [80]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [88]) = *(*($3 + [24]))
	*($1 + [96]) = *(*($3 + [28]))
	$5 = $10
	$3 = ($5 + [-96])
	*([0] + [4]) = $3
	*($9 + [20]) = $3
	*($9 + [16]) = $3
	*($9 + [24]) = $5
	CALL $99(($9 + [16]), $1)
	$4 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($2 + [8]), (int_64)-4996858902428516352, *(*($0 + [8])), $4, $3, [96])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = ($2 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($9 + [40]) = (int_64)0
	*($9 + [32]) = *(($1 + [96]))
	*($1 + [108]) = CALL db_idx128_store($4, (int_64)-4996858902428516352, $7, $8, ($9 + [32]))
	$4 = *($0)
	$7 = *($3)
	$8 = *($1)
	*($9 + [40]) = (int_64)0
	*($9 + [32]) = *(($1 + [80]))
	*(($1 + [112])) = CALL db_idx128_store($7, (int_64)-4996858902428516351, $4, $8, ($9 + [32]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $138([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2468]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $146($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $143($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $93 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	*((($3 = CALL $138([16])) + [12])) = *(($1 + [12]))
	*(($3 + [8])) = *(($1 + [8]))
	*(($3 + [4])) = *(($1 + [4]))
	*($3) = *($1)
	*($5 + [128]) = $3
	$3 = ($3 + [16])
	*($5 + [136]) = $3
	*($5 + [132]) = $3
	CALL memcpy(($5 + [8]), $2, [36])
	$4 = *($2 + [36 align=4])
	*($2 + [36]) = [0]
	$3 = ($2 + [44])
	*((($5 + [8]) + [44])) = *($3)
	*(($2 + [40])) = [0]
	*($3) = [0]
	*($5 + [44 align=4]) = $4
	*((($5 + [8]) + [56])) = *(($2 + [56]))
	*($5 + [56]) = *($2 + [48])
	$3 = ($2 + [72])
	*((($5 + [8]) + [72])) = *($3)
	*($5 + [72]) = *($2 + [64 align=4])
	*($2 + [64]) = [0]
	*(($2 + [68])) = [0]
	*($3) = [0]
	$3 = ($2 + [84])
	*((($5 + [8]) + [84])) = *($3)
	*($5 + [84 align=4]) = *($2 + [76 align=4])
	*($2 + [76]) = [0]
	*(($2 + [80])) = [0]
	*($3) = [0]
	*((($5 + [8]) + [96])) = *(($2 + [96]))
	*($5 + [96]) = *($2 + [88])
	$3 = ($2 + [112])
	*(($1 = (($5 + [8]) + [112]))) = *($3)
	*($5 + [112]) = *($2 + [104 align=4])
	*($2 + [104]) = [0]
	*(($2 + [108])) = [0]
	*($3) = [0]
	CALL $94($0, (int_64)-4991366968549310464, ($5 + [128]), ($5 + [8]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL $139(*($1))
	
.LABEL $label$1
	if ( ((*(($5 + [84])) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($5 + [92])))
	
.LABEL $label$2
	if ( ((*(($5 + [72])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($5 + [80])))
	
.LABEL $label$3
	if ( ((*(($5 + [44])) & [1]) == 0) ){ goto $label$4 }
	CALL $139(*(($5 + [52])))
	
.LABEL $label$4
	$2 = *($5 + [128])
	if ( ($2 == 0) ){ goto $label$5 }
	*($5 + [132]) = $2
	CALL $139($2)
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [144])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [3872])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $123 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $138($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $124(($9 + [52]), $3)
	CALL $67(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $139($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $139($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $139($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $139($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $144(($9 + [8]))
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	*($0 + [16]) = *($1)
	*(($0 + [20])) = *($1 + [4])
	*($5) = *($1 + [8])
	*($0 + [8]) = $3
	*($0) = $2
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$1 = *($4)
	$5 = ( *($4 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($5 + [16])
	$2 = (CASTING uint_64)(uint_32 $5)
	$5 = ($0 + [28])
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $55($5, $1)
	$5 = *(($0 + [32]))
	$1 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$1 = [0]
	
.LABEL $label$2
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = $5
	CALL $70($6, $4)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($6 + [4]), ($4 + [16]), [8])
	$1 = (*($6 + [4]) + [8])
	*($6 + [4]) = $1
	CALL eosio_assert(((int_32)(*($6 + [8]) - $1) > (int_32)[7]), [336])
	CALL memcpy(*($6 + [4]), ($4 + [24]), [8])
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $122 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*((($3 = CALL $138([16])) + [12])) = *(($1 + [12]))
	*(($3 + [8])) = *(($1 + [8]))
	*(($3 + [4])) = *(($1 + [4]))
	*($3) = *($1)
	*($5 + [96]) = $3
	$3 = ($3 + [16])
	*($5 + [104]) = $3
	*($5 + [100]) = $3
	$3 = ($2 + [8])
	*((($5 + [8]) + [8])) = *($3)
	*($5 + [8]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($3) = [0]
	CALL memcpy((($5 + [8]) + [16]), ($2 + [16]), [56])
	$4 = *($2 + [72 align=4])
	*($2 + [72]) = [0]
	$3 = ($2 + [80])
	*(($1 = (($5 + [8]) + [80]))) = *($3)
	*(($2 + [76])) = [0]
	*($3) = [0]
	*($5 + [80]) = $4
	CALL $123($0, (int_64)-8279439764272534016, ($5 + [96]), ($5 + [8]))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL $139(*($1))
	
.LABEL $label$1
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*($5 + [16]))
	
.LABEL $label$2
	$2 = *($5 + [96])
	if ( ($2 == 0) ){ goto $label$3 }
	*($5 + [100]) = $2
	CALL $139($2)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $130 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($0 + [40])
	CALL eosio_assert(((int_64)*($2) == (int_64)1397703940), [3216])
	CALL eosio_assert(((int_64)*($0 + [32]) > (int_64)0), [3248])
	$4 = [0]
	$3 = [0]
	if ( ((uint_64)((int_64)*($0 + [32]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3280])
	$2 = ($0 + [24])
	CALL eosio_assert(((int_64)*($2) == (int_64)1397703940), [3504])
	CALL eosio_assert(((int_64)*($0 + [16]) > (int_64)0), [3536])
	CALL eosio_assert((int_64)(((int_64)*($0 + [16]) % (int_64)10000) == 0), [3584])
	if ( ((uint_64)((int_64)*($0 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [3616])
	$2 = *($0 + [48])
	if ( ($2 & [1]) ){ goto $label$12 }
	$2 = uint_32($2 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$2 = *(($0 + [52]))
	
.LABEL $label$11
	CALL eosio_assert(($2 <= [257]), [3440])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($3 + [8]))
	$5 = *($3 + [12])
	*($1 + [24]) = *($5 + [32])
	*(($1 + [32])) = *(($5 + [40]))
	$5 = *($3 + [12])
	*($1 + [40]) = *($5 + [16])
	*(($1 + [48])) = *(($5 + [24]))
	$5 = *($3 + [12])
	*($1 + [56]) = *($5 + [16])
	*(($1 + [64])) = *(($5 + [24]))
	$5 = *($3 + [16])
	*($1 + [72]) = *($5)
	*(($1 + [88])) = *(($5 + [16]))
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *(*($3 + [20]))
	*($1 + [112]) = [0]
	*($1 + [108]) = $5
	CALL $141(($1 + [96]), (*($3 + [12]) + [48]))
	$3 = *($1 + [96])
	$5 = ( *(($1 + [100])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [104])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $100($6, $1)
	$4 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [560])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [560])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $145(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $145(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC _ZN6finrex6finrex8assert_bEbPKc (int_32 $0, int_32 $1)
{
	CALL eosio_assert($0, $1)
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($3 + [8]))
	$5 = *($3 + [12])
	*($1 + [24]) = *($5 + [32])
	*(($1 + [32])) = *(($5 + [40]))
	$5 = *($3 + [12])
	*($1 + [40]) = *($5 + [16])
	*(($1 + [48])) = *(($5 + [24]))
	$5 = *($3 + [12])
	*($1 + [56]) = *($5 + [16])
	*(($1 + [64])) = *(($5 + [24]))
	$5 = *($3 + [16])
	*($1 + [72]) = *($5)
	*(($1 + [88])) = *(($5 + [16]))
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *(*($3 + [20]))
	*($1 + [112]) = [0]
	*($1 + [108]) = $5
	CALL $141(($1 + [96]), (*($3 + [12]) + [48]))
	$3 = *($1 + [96])
	$5 = ( *(($1 + [100])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [104])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $100($6, $1)
	$4 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

int_64 .FUNC _ZN6finrex6finrex9get_scopeEyNS0_17order_action_typeE (int_32 $0, int_64 $1, int_32 $2)
{
	return ((int_64)(CASTING uint_64)(uint_32 $2) + (int_64)((int_64)$1 * (int_64)100))
}

void .FUNC _ZN6finrex6finrex19cal_transaction_feeEN5eosio5assetENS0_9st_periodE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	$4 = (Rounds 0)(CALL round(((float_64)((float_64)(CASTING float_64)(int_64 *($1)) * (float_64)((float_64)(CASTING float_64)(uint_32 *($2 + [16])) / (float_64)(float_64)1e8)) + (float_64)(float_64)0.5)))
	*($0) = $4
	$3 = *($1 + [8])
	*($0 + [8]) = $3
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [848])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [912])
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [120]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2656])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5003134530400288768)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2592])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2592])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $102(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [272])
	*(($4 = CALL $138([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [336])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)7235159537265672192
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $139($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $70(*($1), *($0))
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [336])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $70(*($1), *($0 + [24]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$4 = *($2)
	$2 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [16])
	*(($4 = *($1))) = (*($4) + [16])
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$1 = *($1)
	$4 = *($1)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($1) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($1) = ($2 + $4)
	
.LABEL $label$4
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [272])
	*(($4 = CALL $138([24])) + [8]) = $1
	*($4) = (int_64)0
	*($4) = *(*($3))
	CALL eosio_assert([1], [336])
	CALL memcpy(($7 + [16]), $4, [8])
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-4418113302685548544, $2, (int_64)-4418113302685548544, ($7 + [16]), [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4418113302685548544) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4418113302685548543
	
.LABEL $label$1
	*($7 + [8]) = $4
	*($7 + [16]) = (int_64)-4418113302685548544
	$5 = *($4 + [12])
	*($7 + [4]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4418113302685548544
	*($3 + [16]) = $5
	*($7 + [8]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $139($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [400])
	*($1) = *(*($3))
	CALL eosio_assert([1], [464])
	CALL eosio_assert([1], [336])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4418113302685548544) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4418113302685548543
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [160])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4418113302685548544, (int_64)-4418113302685548544)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $40($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [160])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [224])
	CALL $42($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $43($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [528])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $138([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [560])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-4418113302685548544
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-4418113302685548544
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [528])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $138([40])) + [24]) = $0
	CALL $47(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $48(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$9 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($10 + [24]) = [0]
	*($10 + [8]) = ($10 + [24])
	$2 = ($1 + [16])
	*($10 + [36]) = $2
	*($10 + [32]) = $1
	$3 = ($1 + [24])
	*($10 + [40]) = $3
	$4 = ($1 + [32])
	*($10 + [44]) = $4
	$5 = ($1 + [40])
	*($10 + [48]) = $5
	$6 = ($1 + [56])
	*($10 + [52]) = $6
	$7 = ($1 + [72])
	*($10 + [56]) = $7
	CALL $125(($10 + [32]), ($10 + [8]))
	$8 = *($10 + [24])
	if ( ($8 == 0) ){ goto $label$2 }
	CALL $55($0, $8)
	$9 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($10 + [12]) = $0
	*($10 + [8]) = $0
	*($10 + [16]) = $9
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = $2
	*($10 + [32]) = $1
	*($10 + [40]) = $3
	*($10 + [44]) = $4
	*($10 + [48]) = $5
	*($10 + [52]) = $6
	*($10 + [56]) = $7
	CALL $126(($10 + [32]), ($10 + [24]))
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $53(*($1), *($0 + [16]))
}

void .FUNC _ZN6finrex6finrex11borroworderENS0_20request_borrow_orderE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [464])
	*([0] + [4]) = $17
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	$2 = *($1)
	CALL require_auth($2)
	CALL $130($1)
	*($17 + [128]) = (int_64)0
	$3 = ($0 + [48])
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)$3), [160])
	if ( $12 ){ goto $label$1 }
	$12 = ($17 + [128])
	goto $label$1 
	
.LABEL $label$2
	$12 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $36($3, $12)
	CALL eosio_assert(((int_32)*($12 + [8]) == (int_32)$3), [160])
	goto $label$1 
	
.LABEL $label$3
	$12 = ($17 + [128])
	
.LABEL $label$1
	$4 = *($12)
	*((($17 + [376]) + [32])) = [0]
	$14 = (int_64)0
	*($17 + [400]) = (int_64)0
	$16 = *($0)
	*($17 + [376]) = $16
	*($17 + [384]) = $16
	*($17 + [392]) = (int_64)-1
	$5 = CALL $81(($17 + [376]), *($1 + [8]), [1312])
	$16 = *($1 + [32])
	$16 = *($1 + [16])
	CALL __multi3(($17 + [24]), $16, (int_64)$16 >> (int_64)63), $16, (int_64)$16 >> (int_64)63))
	$7 = *(($1 + [24]))
	$16 = *(($17 + [32]))
	$13 = *($17 + [24])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [1840])
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	$8 = ($1 + [16])
	$6 = ($1 + [32])
	$9 = ((int_64)$13 / (int_64)10000)
	$13 = (int_64)59
	$12 = [112]
	$15 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$9 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$10 = ($10 + [165])
	goto $label$7 
	
.LABEL $label$9
	$16 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$5
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$4 }
	*($17 + [360]) = $7
	*($17 + [352]) = $9
	*($17 + [368]) = $15
	CALL eosio_assert(((int_64)*(($1 + [16])) >= (int_64)*($5 + [12])), [3168])
	CALL prints([3472])
	CALL $84(($17 + [352]))
	CALL prints([3040])
	CALL printn(*($17 + [368]))
	$14 = (int_64)0
	*($17 + [328]) = (int_64))((int_64)0 - *($17 + [352]))
	*($17 + [336]) = *($17 + [360])
	$16 = *($17 + [368])
	*(($17 + [8])) = *($17 + [336])
	*($17 + [344]) = $16
	*(($17 + [16])) = *($17 + [344])
	*($17) = *($17 + [328])
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $2, $17, $2)
	$16 = ((int_64)((int_64)*(($1 + [8])) * (int_64)100) | (int_64)1)
	*($17 + [320]) = $16
	*((($17 + [280]) + [32])) = [0]
	*($17 + [288]) = $16
	*($17 + [296]) = (int_64)-1
	*($17 + [304]) = (int_64)0
	$16 = *($0)
	*($17 + [280]) = $16
	*($17 + [316]) = [0]
	*((($17 + [240]) + [32])) = [0]
	*($17 + [248]) = $2
	*($17 + [240]) = $16
	*($17 + [256]) = (int_64)-1
	*($17 + [264]) = (int_64)0
	*($17 + [232]) = ((int_64)$4 + (int_64)1)
	$12 = CALL db_lowerbound_i64($16, $2, (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	CALL $102(($17 + [240]), $12)
	*($17 + [132]) = [0]
	*($17 + [128]) = ($17 + [240])
	$14 = *(*(CALL $120(($17 + [128])) + [4]))
	$14 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($12 = (($17 + [240]) + [16]))) = $14
	CALL eosio_assert((uint_64)($14 <= (int_64)-2), [2528])
	*($17 + [224]) = *($12)
	*($17 + [216]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)*($17 + [280]) == (int_64)CALL $fimport$3()), [272])
	$12 = CALL $138([80])
	$10 = CALL $107($12)
	*($12 + [64]) = ($17 + [280])
	*($12 + [8]) = $2
	*($12) = *($17 + [232])
	*($12 + [16]) = *($17 + [224])
	*(($12 + [52])) = *(($6 + [12]))
	*(($12 + [48])) = *(($6 + [8]))
	*(($12 + [44])) = *(($6 + [4]))
	*($12 + [40]) = *($6)
	*(($12 + [32])) = *(($8 + [8]))
	*($12 + [24]) = *($8)
	*($12 + [56]) = *($17 + [216])
	*($12 + [60]) = [0]
	*($17 + [424]) = (($17 + [128]) + [64])
	*($17 + [420]) = ($17 + [128])
	*($17 + [416]) = ($17 + [128])
	CALL $89(($17 + [416]), $10)
	$14 = *($12)
	*($12 + [68]) = CALL db_store_i64(*((($17 + [280]) + [8])), (int_64)-6497942333781180416, $2, $14, ($17 + [128]), [64])
	if ( (uint_64)($14 <= *((($17 + [280]) + [16]))) ){ goto $label$11 }
	*(($17 + [296])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$14 = *($12)
	$10 = ($17 + [288])
	$16 = *($10)
	$5 = ($12 + [40])
	*($17 + [440]) = *($5)
	$11 = ($12 + [56])
	*($17 + [432]) = ((int_64)*($11) ^ (int_64)4294967295)
	*($12 + [72]) = CALL db_idx128_store($16, (int_64)-6497942333781180416, $2, $14, ($17 + [432]))
	$14 = *($12)
	$16 = *($10)
	*($17 + [432]) = *($11)
	*($17 + [440]) = (int_64))((int_64)0 - *($5))
	*($12 + [76]) = CALL db_idx128_store($16, (int_64)-6497942333781180415, $2, $14, ($17 + [432]))
	*($17 + [432]) = $12
	$14 = *($12)
	*($17 + [128]) = $14
	$5 = *(($12 + [68]))
	*($17 + [416]) = $5
	$11 = ($17 + [308])
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)*(($17 + [312]))) ){ goto $label$13 }
	*($10 + [8]) = $14
	*($10 + [16]) = $5
	*($17 + [432]) = [0]
	*($10) = $12
	*($11) = ($10 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $109(($17 + [304]), ($17 + [432]), ($17 + [128]), ($17 + [416]))
	
.LABEL $label$12
	$12 = *($17 + [432])
	*($17 + [432]) = [0]
	if ( ($12 == 0) ){ goto $label$14 }
	CALL $139($12)
	
.LABEL $label$14
	*($17 + [140]) = $1
	*($17 + [132]) = ($17 + [320])
	*($17 + [128]) = ($17 + [224])
	*($17 + [136]) = ($17 + [232])
	*($17 + [144]) = ($17 + [352])
	*($17 + [148]) = ($17 + [216])
	*($17 + [416]) = $2
	CALL eosio_assert(((int_64)*($17 + [240]) == (int_64)CALL $fimport$3()), [272])
	*($17 + [436]) = ($17 + [128])
	*($17 + [432]) = ($17 + [240])
	*($17 + [440]) = ($17 + [416])
	$12 = CALL $138([128])
	CALL $103($12)
	*($12 + [116]) = ($17 + [240])
	CALL $131(($17 + [432]), $12)
	*($17 + [456]) = $12
	$14 = *($12)
	*($17 + [432]) = $14
	$5 = *($12 + [120])
	*($17 + [452]) = $5
	$11 = ($17 + [268])
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)*(($17 + [272]))) ){ goto $label$16 }
	*($10 + [8]) = $14
	*($10 + [16]) = $5
	*($17 + [456]) = [0]
	*($10) = $12
	*($11) = ($10 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $105(($17 + [264]), ($17 + [456]), ($17 + [432]), ($17 + [452]))
	
.LABEL $label$15
	$12 = *($17 + [456])
	*($17 + [456]) = [0]
	if ( ($12 == 0) ){ goto $label$17 }
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$18 }
	CALL $139(*(($12 + [104])))
	
.LABEL $label$18
	CALL $139($12)
	
.LABEL $label$17
	*($17 + [128]) = *($17 + [232])
	CALL $35($3, ($17 + [128]), *($0))
	*(($17 + [136])) = [0]
	*($17 + [128]) = (int_64)0
	$12 = CALL strlen([3488])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$22 }
	*($17 + [128]) = ($12 << [1])
	$10 = (($17 + [128]) | [1])
	if ( $12 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$3 = (($12 + [16]) & [-16])
	$10 = CALL $138($3)
	*($17 + [128]) = ($3 | [1])
	*($17 + [136]) = $10
	*($17 + [132]) = $12
	
.LABEL $label$21
	CALL memcpy($10, [3488], $12)
	
.LABEL $label$20
	*(($10 + $12)) = [0]
	*(($17 + [180])) = *(($8 + [12]))
	*((($17 + [128]) + [48])) = *(($8 + [8]))
	*(($17 + [172])) = *(($8 + [4]))
	*($17 + [152]) = $2
	*($17 + [144]) = *($17 + [232])
	*($17 + [160]) = *(($1 + [8]))
	*($17 + [168]) = *($8)
	*(($17 + [192])) = *(($6 + [8]))
	*($17 + [184]) = *($6)
	$6 = ($17 + [200])
	CALL $145($6, ($1 + [48]))
	$2 = *($0)
	$1 = ($17 + [144])
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1040]
	$15 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$28 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$10 = ($10 + [165])
	goto $label$26 
	
.LABEL $label$28
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$24
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$23 }
	*($17 + [440]) = $15
	*($17 + [432]) = $2
	CALL $145(($17 + [40]), ($17 + [128]))
	CALL memcpy(($17 + [56]), $1, [56])
	CALL $145(($17 + [112]), $6)
	CALL $122($2, ($17 + [432]), ($17 + [40]))
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$29 }
	CALL $139(*(($17 + [120])))
	
.LABEL $label$29
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$30 }
	CALL $139(*($17 + [48]))
	
.LABEL $label$30
	if ( ((*(($17 + [200])) & [1]) == 0) ){ goto $label$31 }
	CALL $139(*(($17 + [208])))
	
.LABEL $label$31
	if ( ((*($17 + [128]) & [1]) == 0) ){ goto $label$32 }
	CALL $139(*($17 + [136]))
	
.LABEL $label$32
	$1 = *($17 + [264])
	if ( ($1 == 0) ){ goto $label$33 }
	$0 = ($17 + [268])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$35 }
	
.LOOP $label$36:
	$12 = ($12 + [-24])
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$37 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$38 }
	CALL $139(*(($10 + [104])))
	
.LABEL $label$38
	CALL $139($10)
	
.LABEL $label$37
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$36 }
	$12 = *(($17 + [264]))
	goto $label$34 
	
.LABEL $label$35
	$12 = $1
	
.LABEL $label$34
	*($0) = $1
	CALL $139($12)
	
.LABEL $label$33
	$1 = *($17 + [304])
	if ( ($1 == 0) ){ goto $label$39 }
	$0 = ($17 + [308])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$41 }
	
.LOOP $label$42:
	$12 = ($12 + [-24])
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$43 }
	CALL $139($10)
	
.LABEL $label$43
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	$12 = *(($17 + [304]))
	goto $label$40 
	
.LABEL $label$41
	$12 = $1
	
.LABEL $label$40
	*($0) = $1
	CALL $139($12)
	
.LABEL $label$39
	$1 = *($17 + [400])
	if ( ($1 == 0) ){ goto $label$44 }
	$0 = ($17 + [404])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$46 }
	
.LOOP $label$47:
	$12 = ($12 + [-24])
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$48 }
	CALL $139($10)
	
.LABEL $label$48
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$47 }
	$12 = *(($17 + [400]))
	goto $label$45 
	
.LABEL $label$46
	$12 = $1
	
.LABEL $label$45
	*($0) = $1
	CALL $139($12)
	
.LABEL $label$44
	*([0] + [4]) = ($17 + [464])
	return (unreachable)
	
.LABEL $label$19
	CALL $140(($17 + [128]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	$2 = CALL memset($2, [0], [64])
	CALL $127($2)
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [108]) = ($2 + [8])
	*($2 + [112]) = ($2 + [16])
	*($2 + [116]) = ($2 + [32])
	$3 = ($2 + [48])
	*($2 + [120]) = $3
	*($2 + [104]) = $2
	CALL $128(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [108]) = ($2 + [64])
	*($2 + [104]) = ($2 + [76])
	CALL $129(($2 + [104]), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL $139(*(($2 + [56])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [128])
	return [1]
}

void .FUNC _ZN6finrex6finrex7depositEyyN5eosio5assetENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_64)*($0 + [88]) != (int_64)0), [3648])
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$1 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [3696]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$2 > (uint_64)(int_64)9) ){ goto $label$7 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [3712]
	$8 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$13 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$9 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$8 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [3728]
	$8 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$2 > (uint_64)(int_64)8) ){ goto $label$19 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$5 = ($5 + [165])
	goto $label$17 
	
.LABEL $label$19
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$9 = (int_64)59
	$6 = [3744]
	$8 = (int_64)0
	
.LOOP $label$20:
	$7 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$21 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$9 = (int_64)59
	$6 = [3760]
	$8 = (int_64)0
	
.LOOP $label$24:
	$7 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$25 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$5 = ($5 + [165])
	goto $label$26 
	
.LABEL $label$27
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$24 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [3776]
	$8 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$33 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$5 = ($5 + [165])
	goto $label$31 
	
.LABEL $label$33
	$9 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$28 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [3792]
	$8 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$2 > (uint_64)(int_64)9) ){ goto $label$39 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$5 = ($5 + [165])
	goto $label$37 
	
.LABEL $label$39
	$9 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$35
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	$5 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$40 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	
.LOOP $label$44:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$44 }
	
.LABEL $label$43
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$5 = [0]
	
.LABEL $label$40
	CALL eosio_assert($5, [3808])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [3840])
	*(($6 = (($10 + [48]) + [8]))) = *(($3 + [8]))
	*($10 + [48]) = *($3)
	$2 = *(($0 + [88]))
	$9 = *($6)
	*((($10 + [80]) + [8])) = $9
	*(($6 = (($10 + [64]) + [8]))) = $9
	$9 = *($10 + [48])
	*($10 + [80]) = $9
	*($10 + [64]) = $9
	$9 = *($6)
	*((($10 + [24]) + [8])) = $9
	*($10 + [40]) = $2
	$7 = *($0)
	*(($10 + [16])) = $2
	*(($10 + [8])) = $9
	$2 = *($10 + [64])
	*($10 + [24]) = $2
	*($10) = $2
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $1, $10, $7)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [848])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [912])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $132(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $133(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [352])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$36 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$42 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$42
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$38
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$37 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$36 }
	*(($11 + [272])) = $0
	*(($11 + [280])) = (int_64)-1
	*(($5 = ($11 + [288]))) = (int_64)0
	*(($11 + [296])) = [0]
	*($11 + [264]) = $0
	*($11 + [256]) = $0
	*($11 + [304]) = $0
	*(($11 + [312])) = $0
	*(($11 + [320])) = (int_64)-1
	*(($6 = ($11 + [328]))) = [0]
	*(($3 = ($11 + [332]))) = [0]
	*(($11 + [336])) = [0]
	*($11 + [344]) = $1
	*($11 + [248]) = [1]
	*($11 + [252]) = [0]
	*($11) = *($11 + [248])
	CALL $7(($11 + [256]), $11)
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$33 }
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$35 }
	
.LOOP $label$43:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$44 }
	CALL $139($3)
	
.LABEL $label$44
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$43 }
	$6 = *(($11 + [328]))
	goto $label$34 
	
.LABEL $label$36
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$48 }
	*(($11 + [272])) = $1
	*(($11 + [280])) = (int_64)-1
	*(($11 + [288])) = (int_64)0
	*(($11 + [296])) = [0]
	*($11 + [264]) = $1
	*($11 + [256]) = $1
	*($11 + [304]) = $1
	*(($11 + [312])) = $1
	*(($11 + [320])) = (int_64)-1
	*(($11 + [328])) = [0]
	*(($11 + [332])) = [0]
	*(($11 + [336])) = [0]
	*($11 + [344]) = (int_64)0
	if ( ((int_64)$2 <= (int_64)-3075276115275962225) ){ goto $label$47 }
	if ( ((int_64)$2 > (int_64)4408877192802119167) ){ goto $label$46 }
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-3075276115275962224) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3075276113665141392) ){ goto $label$21 }
	*($11 + [140]) = [0]
	*($11 + [136]) = [2]
	*($11 + [112 align=4]) = *($11 + [136])
	CALL $33(($11 + [256]), ($11 + [112]))
	goto $label$21 
	
.LABEL $label$48
	CALL eosio_assert([0], [144])
	goto $label$20 
	
.LABEL $label$47
	if ( ((int_64)$2 <= (int_64)-4991366968549310465) ){ goto $label$45 }
	if ( ((int_64)$2 > (int_64)-4708665902447788033) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-4991366968549310464) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4708666039271184704) ){ goto $label$21 }
	*($11 + [188]) = [0]
	*($11 + [184]) = [3]
	*($11 + [64 align=4]) = *($11 + [184])
	CALL $20(($11 + [256]), ($11 + [64]))
	goto $label$21 
	
.LABEL $label$46
	if ( ((int_64)$2 > (int_64)5378050754042636431) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)4408877192802119168) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4730614996831743488) ){ goto $label$21 }
	*($11 + [228]) = [0]
	*($11 + [224]) = [4]
	*($11 + [24 align=4]) = *($11 + [224])
	CALL $13(($11 + [256]), ($11 + [24]))
	goto $label$21 
	
.LABEL $label$45
	if ( ((int_64)$2 == (int_64)-8455901525402189824) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-8279723548008251392) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-8279439764272534016) ){ goto $label$21 }
	*($11 + [180]) = [0]
	*($11 + [176]) = [5]
	*($11 + [72 align=4]) = *($11 + [176])
	CALL $23(($11 + [256]), ($11 + [72]))
	goto $label$21 
	
.LABEL $label$35
	$6 = $4
	
.LABEL $label$34
	*(($11 + [332])) = $4
	CALL $139($6)
	
.LABEL $label$33
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$20 }
	$5 = ($11 + [292])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$50 }
	
.LOOP $label$51:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$52 }
	CALL $139($3)
	
.LABEL $label$52
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$51 }
	$6 = *(($11 + [288]))
	goto $label$49 
	
.LABEL $label$50
	$6 = $4
	
.LABEL $label$49
	*($5) = $4
	CALL $139($6)
	goto $label$20 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)3631284076515860992) ){ goto $label$21 }
	*($11 + [220]) = [0]
	*($11 + [216]) = [6]
	*($11 + [32 align=4]) = *($11 + [216])
	CALL $13(($11 + [256]), ($11 + [32]))
	goto $label$21 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-4708665902447788032) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3075276119992054512) ){ goto $label$21 }
	*($11 + [132]) = [0]
	*($11 + [128]) = [7]
	*($11 + [120 align=4]) = *($11 + [128])
	CALL $31(($11 + [256]), ($11 + [120]))
	goto $label$21 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)5378050754042636432) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)6292810045779972768) ){ goto $label$21 }
	*($11 + [204]) = [0]
	*($11 + [200]) = [8]
	*($11 + [48 align=4]) = *($11 + [200])
	CALL $18(($11 + [256]), ($11 + [48]))
	goto $label$21 
	
.LABEL $label$29
	*($11 + [156]) = [0]
	*($11 + [152]) = [9]
	*($11 + [96 align=4]) = *($11 + [152])
	CALL $29(($11 + [256]), ($11 + [96]))
	goto $label$21 
	
.LABEL $label$28
	*($11 + [164]) = [0]
	*($11 + [160]) = [10]
	*($11 + [88 align=4]) = *($11 + [160])
	CALL $27(($11 + [256]), ($11 + [88]))
	goto $label$21 
	
.LABEL $label$27
	*($11 + [244]) = [0]
	*($11 + [240]) = [11]
	*($11 + [8 align=4]) = *($11 + [240])
	CALL $9(($11 + [256]), ($11 + [8]))
	goto $label$21 
	
.LABEL $label$26
	*($11 + [236]) = [0]
	*($11 + [232]) = [12]
	*($11 + [16 align=4]) = *($11 + [232])
	CALL $11(($11 + [256]), ($11 + [16]))
	goto $label$21 
	
.LABEL $label$25
	*($11 + [172]) = [0]
	*($11 + [168]) = [13]
	*($11 + [80 align=4]) = *($11 + [168])
	CALL $25(($11 + [256]), ($11 + [80]))
	goto $label$21 
	
.LABEL $label$24
	*($11 + [212]) = [0]
	*($11 + [208]) = [14]
	*($11 + [40 align=4]) = *($11 + [208])
	CALL $16(($11 + [256]), ($11 + [40]))
	goto $label$21 
	
.LABEL $label$23
	*($11 + [196]) = [0]
	*($11 + [192]) = [15]
	*($11 + [56 align=4]) = *($11 + [192])
	CALL $20(($11 + [256]), ($11 + [56]))
	goto $label$21 
	
.LABEL $label$22
	*($11 + [148]) = [0]
	*($11 + [144]) = [16]
	*($11 + [104 align=4]) = *($11 + [144])
	CALL $31(($11 + [256]), ($11 + [104]))
	
.LABEL $label$21
	$4 = *(($11 + [328]))
	if ( ($4 == 0) ){ goto $label$53 }
	$5 = ($11 + [332])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$55 }
	
.LOOP $label$56:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$57 }
	CALL $139($3)
	
.LABEL $label$57
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$56 }
	$6 = *(($11 + [328]))
	goto $label$54 
	
.LABEL $label$55
	$6 = $4
	
.LABEL $label$54
	*($5) = $4
	CALL $139($6)
	
.LABEL $label$53
	$4 = *(($11 + [288]))
	if ( ($4 == 0) ){ goto $label$20 }
	$5 = ($11 + [292])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$59 }
	
.LOOP $label$60:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$61 }
	CALL $139($3)
	
.LABEL $label$61
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$60 }
	$6 = *(($11 + [288]))
	goto $label$58 
	
.LABEL $label$59
	$6 = $4
	
.LABEL $label$58
	*($5) = $4
	CALL $139($6)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [352])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN6finrex6finrex11admincancelENS0_20request_cancel_orderE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [240])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	CALL require_auth(*($0))
	*($11 + [168]) = (int_64)-1
	*($11 + [176]) = [0]
	*($11 + [152]) = *($0)
	$8 = *($1)
	*($11 + [160]) = $8
	*((($11 + [152]) + [28])) = [0]
	*((($11 + [152]) + [32])) = [0]
	$4 = CALL $83(($11 + [152]), *($1 + [8]), [3056])
	*($11 + [128]) = (int_64)-1
	*($11 + [136]) = [0]
	*($11 + [112]) = *($0)
	*($11 + [120]) = *($4 + [8])
	*((($11 + [112]) + [28])) = [0]
	*((($11 + [112]) + [32])) = [0]
	*($11 + [148]) = [0]
	$3 = CALL $82(($11 + [112]), *($4 + [16]), [3088])
	*(($6 = (($11 + [88]) + [16]))) = *(($4 + [88]))
	*(($5 = (($11 + [88]) + [8]))) = *(($4 + [80]))
	*($11 + [88]) = *($4 + [72])
	$10 = *($0)
	*(($11 + [16])) = *($6)
	*(($11 + [8])) = *($5)
	*($11) = *($11 + [88])
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $8, $11, $10)
	CALL $86(($11 + [152]), $4)
	CALL $87(($11 + [112]), $3)
	*((($11 + [56]) + [8])) = [0]
	*($11 + [56]) = (int_64)0
	$3 = CALL strlen([3120])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($11 + [56]) = ($3 << [1])
	$6 = (($11 + [56]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $138($5)
	*($11 + [56]) = ($5 | [1])
	*($11 + [64]) = $6
	*($11 + [60]) = $3
	
.LABEL $label$3
	CALL memcpy($6, [3120], $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	*($11 + [72]) = *(($4 + [16]))
	*($11 + [80]) = *($1)
	$3 = (($11 + [56]) + [16])
	$2 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$0 = [1040]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$10 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$10
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	CALL $145(($11 + [24]), ($11 + [56]))
	*(($4 = (($11 + [24]) + [24]))) = *(($3 + [8]))
	*($11 + [40]) = *($3)
	*(($0 = CALL $138([16]))) = $2
	*($0 + [8]) = $9
	$3 = ($0 + [16])
	*($11 + [232]) = $3
	$1 = (($11 + [24]) + [8])
	*((($11 + [192]) + [8])) = *($1)
	*($11 + [224]) = $0
	*($11 + [228]) = $3
	*($11 + [196]) = *($11 + [28])
	*($11 + [192]) = *($11 + [24])
	*($11 + [28]) = [0]
	*($11 + [24]) = [0]
	*($1) = [0]
	*((($11 + [192]) + [24])) = *($4)
	*($11 + [208]) = *($11 + [40])
	CALL $114($2, (int_64)-8279723548008251392, ($11 + [224]), ($11 + [192]))
	if ( ((*($11 + [192]) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*($11 + [200]))
	
.LABEL $label$11
	$0 = *($11 + [224])
	if ( ($0 == 0) ){ goto $label$12 }
	*($11 + [228]) = $0
	CALL $139($0)
	
.LABEL $label$12
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*(($11 + [32])))
	
.LABEL $label$13
	if ( ((*($11 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL $139(*($11 + [64]))
	
.LABEL $label$14
	$3 = *($11 + [136])
	if ( ($3 == 0) ){ goto $label$15 }
	$1 = ($11 + [140])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $139($4)
	
.LABEL $label$19
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($11 + [136]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $3
	
.LABEL $label$16
	*($1) = $3
	CALL $139($0)
	
.LABEL $label$15
	$3 = *($11 + [176])
	if ( ($3 == 0) ){ goto $label$20 }
	$1 = ($11 + [180])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$22 }
	
.LOOP $label$23:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $139(*(($4 + [104])))
	
.LABEL $label$25
	CALL $139($4)
	
.LABEL $label$24
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$23 }
	$0 = *(($11 + [176]))
	goto $label$21 
	
.LABEL $label$22
	$0 = $3
	
.LABEL $label$21
	*($1) = $3
	CALL $139($0)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $140(($11 + [56]))
}

void .FUNC _ZN6finrex6finrex8withdrawENS0_16request_withdrawE (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	CALL require_auth($1)
	$6 = [0]
	*(($12 + [136])) = [0]
	*($12 + [112]) = $1
	*($12 + [120]) = (int_64)-1
	*($12 + [128]) = (int_64)0
	$8 = *($0)
	*($12 + [104]) = $8
	$4 = CALL db_find_i64($8, $1, (int_64)4152997947673411584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $110(($12 + [104]), $4)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($12 + [104])), [160])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($6 + [8]) > (int_64)0), [2784])
	if ( ($6 == 0) ){ goto $label$3 }
	$8 = (int_64)0
	$10 = (int_64)
	*($12 + [80]) = $10((int_64)0 - *($6 + [8])))
	*($12 + [88]) = *(($6 + [16]))
	*($12 + [96]) = *(($6 + [24]))
	*((($12 + [8]) + [8])) = *($12 + [88])
	*((($12 + [8]) + [16])) = *($12 + [96])
	*($12 + [8]) = $10
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $1, ($12 + [8]), $1)
	$2 = ($6 + [8])
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$9 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$9
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$5
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$4 }
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1040]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$15 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$15
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$10 }
	*($12 + [40]) = $1
	*(($12 + [60])) = *(($2 + [12]))
	*(($12 + [56])) = *(($2 + [8]))
	*(($12 + [52])) = *(($2 + [4]))
	*($12 + [32]) = $3
	*($12 + [48]) = *($2)
	*(($12 + [72])) = [0]
	*($12 + [64]) = (int_64)0
	$4 = ($12 + [64])
	$6 = CALL strlen([2816])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = ($12 + [48])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	*(($12 + [64])) = ($6 << [1])
	$0 = ($4 + [1])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = (($6 + [16]) & [-16])
	$0 = CALL $138($5)
	*(($12 + [64])) = ($5 | [1])
	*(($12 + [72])) = $0
	*(($12 + [68])) = $6
	
.LABEL $label$17
	CALL memcpy($0, [2816], $6)
	
.LABEL $label$16
	*(($0 + $6)) = [0]
	*(($6 = CALL $138([16]))) = $3
	*($6 + [8]) = $11
	*($12 + [192]) = $6
	$6 = ($6 + [16])
	*($12 + [200]) = $6
	*($12 + [196]) = $6
	*($12 + [144]) = *($12 + [32])
	*($12 + [152]) = *((($12 + [32]) + [8]))
	*(($12 + [168])) = *(($2 + [8]))
	*($12 + [160]) = *($2)
	*(($6 = (($12 + [144]) + [40]))) = *(($4 + [8]))
	*($12 + [176]) = *($4)
	*(($12 + [64])) = [0]
	*(($12 + [68])) = [0]
	*((($12 + [32]) + [40])) = [0]
	CALL $60($9, (int_64)-3617168760277827584, ($12 + [192]), ($12 + [144]))
	if ( ((*($12 + [176]) & [1]) == 0) ){ goto $label$19 }
	CALL $139(*($6))
	
.LABEL $label$19
	$6 = *($12 + [192])
	if ( ($6 == 0) ){ goto $label$20 }
	*($12 + [196]) = $6
	CALL $139($6)
	
.LABEL $label$20
	if ( ((*(($12 + [64])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($12 + [72])))
	
.LABEL $label$3
	$0 = *($12 + [128])
	if ( ($0 == 0) ){ goto $label$21 }
	$2 = ($12 + [132])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL $139($4)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$24 }
	$6 = *(($12 + [128]))
	goto $label$22 
	
.LABEL $label$23
	$6 = $0
	
.LABEL $label$22
	*($2) = $0
	CALL $139($6)
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $140($4)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [560])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN6finrex6finrex12executetradeENS0_21request_execute_tradeE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [896])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	$18 = *($1)
	*($22 + [824]) = $18
	*((($22 + [784]) + [32])) = [0]
	*($22 + [800]) = (int_64)-1
	$16 = (int_64)0
	*($22 + [808]) = (int_64)0
	$15 = *($0)
	*($22 + [784]) = $15
	*($22 + [792]) = $15
	$2 = CALL $81(($22 + [784]), $18, [1312])
	*((($22 + [744]) + [32])) = [0]
	$18 = ((int_64)$18 * (int_64)100)
	*($22 + [752]) = ((int_64)$18 | (int_64)1)
	*($22 + [760]) = (int_64)-1
	*($22 + [768]) = (int_64)0
	$15 = *($0)
	*($22 + [744]) = $15
	*($22 + [780]) = [0]
	*((($22 + [704]) + [32])) = [0]
	*($22 + [712]) = ((int_64)$18 | (int_64)2)
	*($22 + [704]) = $15
	*($22 + [720]) = (int_64)-1
	*($22 + [728]) = (int_64)0
	*($22 + [740]) = [0]
	$18 = *($1 + [16])
	$3 = CALL $82(($22 + [744]), *($1 + [8]), [1344])
	$4 = CALL $82(($22 + [704]), $18, [1376])
	*($22 + [680]) = (int_64)-1
	*($22 + [688]) = [0]
	$18 = *($0)
	*($22 + [664]) = $18
	*($22 + [672]) = *($3 + [8])
	*(($22 + [692])) = [0]
	*((($22 + [664]) + [32])) = [0]
	*((($22 + [624]) + [32])) = [0]
	*($22 + [648]) = (int_64)0
	*($22 + [624]) = $18
	*($22 + [640]) = (int_64)-1
	*($22 + [632]) = *($4 + [8])
	$5 = CALL $83(($22 + [664]), *($3 + [16]), [1408])
	$6 = CALL $83(($22 + [624]), *($4 + [16]), [1440])
	$19 = *(($5 + [88]))
	$15 = (int_64)59
	$1 = [112]
	$17 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$6 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$10 = ($10 + [165])
	goto $label$4 
	
.LABEL $label$6
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$19 == (int_64)$17), [1472])
	$19 = *(($6 + [88]))
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [112]
	$17 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$12 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$10 = ($10 + [165])
	goto $label$10 
	
.LABEL $label$12
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$7 }
	CALL eosio_assert(((int_64)$19 == (int_64)$17), [1472])
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)*(($4 + [48]))), [1520])
	CALL eosio_assert(((int_64)*($3 + [40]) >= (int_64)*(($4 + [40]))), [1584])
	CALL eosio_assert(((int_64)*(($5 + [64])) == (int_64)*(($6 + [64]))), [1520])
	$1 = ( $6 ? $5 : ((int_64)*($5 + [56]) > (int_64)*($6 + [56])) )
	*(($22 + [620])) = *(($1 + [68]))
	*(($10 = (($22 + [608]) + [8]))) = *(($1 + [64]))
	*($22 + [608]) = *($1 + [56])
	*($22 + [612]) = *(($1 + [60]))
	CALL eosio_assert(((int_64)*($22 + [608]) > (int_64)0), [1616])
	$21 = ($4 + [56])
	$1 = ($3 + [56])
	$11 = ( $3 ? $4 : ((uint_32)*($1) <= (uint_32)*($21)) )
	*((($22 + [592]) + [8])) = *(($11 + [48]))
	*($22 + [592]) = *($11 + [40])
	CALL prints([1664])
	CALL $84(($22 + [592]))
	$16 = *($1)
	CALL prints([1696])
	CALL printui($16)
	$16 = *($21)
	CALL prints([1728])
	CALL printui($16)
	CALL eosio_assert(((int_64)*($22 + [608]) > (int_64)0), [1760])
	$16 = *($22 + [592])
	$16 = *($22 + [608])
	CALL __multi3(($22 + [56]), $16, (int_64)$16 >> (int_64)63), $16, (int_64)$16 >> (int_64)63))
	$15 = *($10)
	$16 = *((($22 + [56]) + [8]))
	$18 = *($22 + [56])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [1840])
	*($22 + [584]) = $15
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	$18 = ((int_64)$18 / (int_64)10000)
	*($22 + [576]) = $18
	$16 = *($22 + [584])
	$12 = CALL round(((float_64)((float_64)(CASTING float_64)(int_64 $18) * (float_64)((float_64)(CASTING float_64)(uint_32 *($2 + [16])) / (float_64)(float_64)1e8)) + (float_64)(float_64)0.5))
	*($22 + [568]) = $16
	$18 = (Rounds 0)($12)
	*($22 + [560]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [848])
	$21 = ($3 + [40])
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$10 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$10 = [0]
	
.LABEL $label$13
	CALL eosio_assert($10, [912])
	$16 = *((($22 + [576]) + [8]))
	*((($22 + [544]) + [8])) = $16
	*($22 + [544]) = *($22 + [576])
	CALL eosio_assert(((int_64)$16 == (int_64)*((($22 + [560]) + [8]))), [1920])
	$16 = (int_64)
	*($22 + [544]) = $16(*($22 + [544]) - *($22 + [560])))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [2000])
	CALL prints([2032])
	CALL $84(($22 + [576]))
	CALL prints([2048])
	CALL $84(($22 + [560]))
	CALL prints([2080])
	CALL $84(($22 + [544]))
	$16 = *(($3 + [32]))
	*((($22 + [528]) + [8])) = $16
	*($22 + [528]) = *($3 + [24])
	$1 = (($22 + [608]) + [8])
	CALL eosio_assert(((int_64)$16 == (int_64)*($1)), [1920])
	$16 = (int_64)
	*($22 + [528]) = $16(*($22 + [528]) - *($22 + [608])))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [2000])
	$16 = *(($4 + [32]))
	*((($22 + [512]) + [8])) = $16
	*($22 + [512]) = *($4 + [24])
	CALL eosio_assert(((int_64)$16 == (int_64)*($1)), [1920])
	$16 = (int_64)
	*($22 + [512]) = $16(*($22 + [512]) - *($22 + [608])))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [2000])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($22 + [528]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2112])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($22 + [512]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2176])
	$8 = *($22 + [512])
	$7 = *($22 + [528])
	if ( ((int_64)*($22 + [608]) < (int_64)1) ){ goto $label$18 }
	CALL prints([2240])
	$9 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [1040]
	$17 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$24 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$10 = ($10 + [165])
	goto $label$22 
	
.LABEL $label$24
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$20
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$19 }
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [32]
	$19 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$16 > (uint_64)(int_64)4) ){ goto $label$30 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$10 = ($10 + [165])
	goto $label$28 
	
.LABEL $label$30
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$26
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$25 }
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [2272]
	$20 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$16 > (uint_64)(int_64)9) ){ goto $label$36 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$10 = ($10 + [165])
	goto $label$34 
	
.LABEL $label$36
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$32
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$20 = ((int_64)$18 | (int_64)$20)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$31 }
	CALL eosio_assert([1], [848])
	$16 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$10 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$10 = [0]
	
.LABEL $label$37
	CALL eosio_assert($10, [912])
	$16 = *(($3 + [8]))
	*((($22 + [192]) + [24])) = (int_64)1397703940
	*($22 + [192]) = *($0)
	*($22 + [208]) = (int_64)0
	*($22 + [200]) = $16
	*(($22 + [232])) = *((($22 + [608]) + [8]))
	*((($22 + [192]) + [36])) = *($22 + [612])
	*($22 + [224]) = *($22 + [608])
	*($22 + [240]) = [0]
	*($22 + [464]) = $19
	*($22 + [472]) = $20
	*($22 + [480]) = [0]
	*(($10 = ($22 + [484]))) = [0]
	*(($11 = (($22 + [464]) + [24]))) = [0]
	*(($1 = CALL $138([16]))) = $9
	*($1 + [8]) = $17
	*(($14 = ($22 + [496]))) = [0]
	$13 = ($1 + [16])
	*($11) = $13
	*($10) = $13
	*($22 + [480]) = $1
	*($22 + [492]) = [0]
	*((($22 + [464]) + [36])) = [0]
	CALL $55(($22 + [492]), [52])
	$1 = *($14)
	$10 = *($22 + [492])
	*($22 + [868]) = $10
	*($22 + [864]) = $10
	*($22 + [872]) = $1
	*($22 + [832]) = ($22 + [864])
	*($22 + [848]) = ($22 + [192])
	CALL $85(($22 + [848]), ($22 + [832]))
	CALL $67(($22 + [864]), ($22 + [464]))
	$1 = *($22 + [864])
	CALL send_inline($1, (*($22 + [868]) - $1))
	$1 = *($22 + [864])
	if ( ($1 == 0) ){ goto $label$42 }
	*($22 + [868]) = $1
	CALL $139($1)
	
.LABEL $label$42
	$1 = *($22 + [492])
	if ( ($1 == 0) ){ goto $label$43 }
	*(($22 + [496])) = $1
	CALL $139($1)
	
.LABEL $label$43
	$1 = *($22 + [480])
	if ( ($1 == 0) ){ goto $label$18 }
	*(($22 + [484])) = $1
	CALL $139($1)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)*($22 + [600])), [1520])
	if ( ((int_64)*(($3 + [40])) <= (int_64)*($22 + [592])) ){ goto $label$47 }
	$16 = *(($21 + [8]))
	*((($22 + [464]) + [8])) = $16
	*($22 + [464]) = *($21)
	CALL eosio_assert(((int_64)$16 == (int_64)*((($22 + [592]) + [8]))), [1920])
	$16 = (int_64)
	*($22 + [464]) = $16(*($22 + [464]) - *($22 + [592])))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [2000])
	CALL prints([2288])
	CALL $84(($22 + [464]))
	$16 = *($22 + [464])
	$16 = *($22 + [608])
	CALL __multi3(($22 + [40]), $16, (int_64)$16 >> (int_64)63), $16, (int_64)$16 >> (int_64)63))
	$16 = (int_64)0
	$17 = *((($22 + [608]) + [8]))
	$18 = *((($22 + [40]) + [8]))
	$15 = *($22 + [40])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$18 < (int_64)0) : (int_64)($18 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$18 > (int_64)-1) : ((int_64)$18 == (int_64)-1) ), [1840])
	*($22 + [872]) = $17
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	*($22 + [864]) = ((int_64)$15 / (int_64)10000)
	CALL prints([2320])
	CALL $84(($22 + [864]))
	if ( ((int_64)*($22 + [864]) < (int_64)1) ){ goto $label$47 }
	$15 = (int_64)59
	$1 = [112]
	$17 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$53 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$10 = ($10 + [165])
	goto $label$51 
	
.LABEL $label$53
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$49
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$48 }
	$20 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [1040]
	$19 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$59 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$10 = ($10 + [165])
	goto $label$57 
	
.LABEL $label$59
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$55
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$54 }
	*($22 + [416]) = $20
	$16 = *(($3 + [8]))
	*(($22 + [436])) = *($22 + [868])
	*($22 + [424]) = $16
	*(($22 + [440])) = *((($22 + [864]) + [8]))
	*($22 + [432]) = *($22 + [864])
	*(($22 + [456])) = [0]
	*($22 + [448]) = (int_64)0
	$10 = ($22 + [448])
	$1 = CALL strlen([2384])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$46 }
	$11 = ($22 + [432])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$62 }
	*(($22 + [448])) = ($1 << [1])
	$21 = ($10 + [1])
	if ( $1 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$14 = (($1 + [16]) & [-16])
	$21 = CALL $138($14)
	*(($22 + [448])) = ($14 | [1])
	*(($22 + [456])) = $21
	*(($22 + [452])) = $1
	
.LABEL $label$61
	CALL memcpy($21, [2384], $1)
	
.LABEL $label$60
	*(($21 + $1)) = [0]
	*(($1 = CALL $138([16]))) = $20
	*($1 + [8]) = $19
	*($22 + [848]) = $1
	$1 = ($1 + [16])
	*($22 + [856]) = $1
	*($22 + [852]) = $1
	*($22 + [192]) = *($22 + [416])
	*($22 + [200]) = *((($22 + [416]) + [8]))
	*(($22 + [216])) = *(($11 + [8]))
	*($22 + [208]) = *($11)
	*(($1 = (($22 + [192]) + [40]))) = *(($10 + [8]))
	*($22 + [224]) = *($10)
	*(($22 + [448])) = [0]
	*(($22 + [452])) = [0]
	*((($22 + [416]) + [40])) = [0]
	CALL $60($17, (int_64)-3617168760277827584, ($22 + [848]), ($22 + [192]))
	if ( ((*($22 + [224]) & [1]) == 0) ){ goto $label$63 }
	CALL $139(*($1))
	
.LABEL $label$63
	$1 = *($22 + [848])
	if ( ($1 == 0) ){ goto $label$64 }
	*($22 + [852]) = $1
	CALL $139($1)
	
.LABEL $label$64
	if ( ((*(($22 + [448])) & [1]) == 0) ){ goto $label$47 }
	CALL $139(*(($22 + [456])))
	
.LABEL $label$47
	$18 = *($22 + [544])
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$72 }
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [112]
	$17 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$78 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$10 = ($10 + [165])
	goto $label$76 
	
.LABEL $label$78
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$74
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$73 }
	$20 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [1040]
	$19 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$84 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$10 = ($10 + [165])
	goto $label$82 
	
.LABEL $label$84
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$80
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$79 }
	*($22 + [368]) = $20
	$16 = *(($4 + [8]))
	*(($22 + [388])) = *($22 + [548])
	*($22 + [376]) = $16
	*(($22 + [392])) = *((($22 + [544]) + [8]))
	*($22 + [384]) = *($22 + [544])
	*(($22 + [408])) = [0]
	*($22 + [400]) = (int_64)0
	$10 = ($22 + [400])
	$1 = CALL strlen([2416])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$65 }
	$11 = ($22 + [384])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$71 }
	*(($22 + [400])) = ($1 << [1])
	$21 = ($10 + [1])
	if ( $1 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$16 = (int_64)0
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$44 }
	$15 = (int_64)59
	$1 = [112]
	$17 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$90 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$10 = ($10 + [165])
	goto $label$88 
	
.LABEL $label$90
	$18 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$86
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$85 }
	$20 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [1040]
	$19 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$96 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$10 = ($10 + [165])
	goto $label$94 
	
.LABEL $label$96
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$92
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$18 | (int_64)$19)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$91 }
	*($22 + [320]) = $20
	$16 = *(($4 + [8]))
	*(($22 + [340])) = *($22 + [580])
	*($22 + [328]) = $16
	*(($22 + [344])) = *((($22 + [576]) + [8]))
	*($22 + [336]) = *($22 + [576])
	*(($22 + [360])) = [0]
	*($22 + [352]) = (int_64)0
	$10 = ($22 + [352])
	$1 = CALL strlen([2416])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$45 }
	$11 = ($22 + [336])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$68 }
	*(($22 + [352])) = ($1 << [1])
	$21 = ($10 + [1])
	if ( $1 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$71
	$14 = (($1 + [16]) & [-16])
	$21 = CALL $138($14)
	*(($22 + [400])) = ($14 | [1])
	*(($22 + [408])) = $21
	*(($22 + [404])) = $1
	
.LABEL $label$70
	CALL memcpy($21, [2416], $1)
	
.LABEL $label$69
	*(($21 + $1)) = [0]
	*(($1 = CALL $138([16]))) = $20
	*($1 + [8]) = $19
	*($22 + [464]) = $1
	$1 = ($1 + [16])
	*($22 + [472]) = $1
	*($22 + [468]) = $1
	*($22 + [192]) = *($22 + [368])
	*($22 + [200]) = *((($22 + [368]) + [8]))
	*(($22 + [216])) = *(($11 + [8]))
	*($22 + [208]) = *($11)
	*(($1 = (($22 + [192]) + [40]))) = *(($10 + [8]))
	*($22 + [224]) = *($10)
	*(($22 + [400])) = [0]
	*(($22 + [404])) = [0]
	*((($22 + [368]) + [40])) = [0]
	CALL $60($17, (int_64)-3617168760277827584, ($22 + [464]), ($22 + [192]))
	if ( ((*($22 + [224]) & [1]) == 0) ){ goto $label$97 }
	CALL $139(*($1))
	
.LABEL $label$97
	$1 = *($22 + [464])
	if ( ($1 == 0) ){ goto $label$98 }
	*($22 + [468]) = $1
	CALL $139($1)
	
.LABEL $label$98
	if ( ((*(($22 + [400])) & [1]) == 0) ){ goto $label$44 }
	CALL $139(*(($22 + [408])))
	goto $label$44 
	
.LABEL $label$68
	$14 = (($1 + [16]) & [-16])
	$21 = CALL $138($14)
	*(($22 + [352])) = ($14 | [1])
	*(($22 + [360])) = $21
	*(($22 + [356])) = $1
	
.LABEL $label$67
	CALL memcpy($21, [2416], $1)
	
.LABEL $label$66
	*(($21 + $1)) = [0]
	*(($1 = CALL $138([16]))) = $20
	*($1 + [8]) = $19
	*($22 + [464]) = $1
	$1 = ($1 + [16])
	*($22 + [472]) = $1
	*($22 + [468]) = $1
	*($22 + [192]) = *($22 + [320])
	*($22 + [200]) = *((($22 + [320]) + [8]))
	*(($22 + [216])) = *(($11 + [8]))
	*($22 + [208]) = *($11)
	*(($1 = (($22 + [192]) + [40]))) = *(($10 + [8]))
	*($22 + [224]) = *($10)
	*(($22 + [352])) = [0]
	*(($22 + [356])) = [0]
	*((($22 + [320]) + [40])) = [0]
	CALL $60($17, (int_64)-3617168760277827584, ($22 + [464]), ($22 + [192]))
	if ( ((*($22 + [224]) & [1]) == 0) ){ goto $label$99 }
	CALL $139(*($1))
	
.LABEL $label$99
	$1 = *($22 + [464])
	if ( ($1 == 0) ){ goto $label$100 }
	*($22 + [468]) = $1
	CALL $139($1)
	
.LABEL $label$100
	if ( ((*(($22 + [352])) & [1]) == 0) ){ goto $label$44 }
	CALL $139(*(($22 + [360])))
	goto $label$44 
	
.LABEL $label$65
	CALL $140($10)
	
.LABEL $label$46
	CALL $140($10)
	
.LABEL $label$45
	CALL $140($10)
	
.LABEL $label$44
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$102 }
	$16 = *($5 + [24])
	$16 = *($22 + [528])
	CALL __multi3(($22 + [24]), $16, (int_64)$16 >> (int_64)63), $16, (int_64)$16 >> (int_64)63))
	$10 = (($22 + [528]) + [8])
	$17 = *($10)
	$16 = *((($22 + [24]) + [8]))
	$18 = *($22 + [24])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [1840])
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	$16 = *($3 + [24])
	$15 = *($5 + [24])
	$19 = *(($3 + [32]))
	CALL eosio_assert(((int_64)*((($22 + [608]) + [8])) == (int_64)$19), [1920])
	$16 = (int_64)
	CALL __multi3(($22 + [8]), $16($16 - *($22 + [608]))), (int_64)$16 >> (int_64)63), $15, (int_64)$15 >> (int_64)63))
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [2000])
	$16 = *((($22 + [8]) + [8]))
	$15 = *($22 + [8])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [1840])
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	CALL eosio_assert(((int_64)$17 == (int_64)$19), [1520])
	CALL eosio_assert(((int_64)((int_64)$18 / (int_64)10000) == (int_64)((int_64)$15 / (int_64)10000)), [2448])
	*($22 + [196]) = $5
	*($22 + [192]) = ($22 + [528])
	CALL $88(($22 + [664]), $5, ($22 + [192]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)($22 + [744])), [352])
	CALL eosio_assert(((int_64)*($22 + [744]) == (int_64)CALL $fimport$3()), [400])
	$21 = ($3 + [40])
	$16 = *($21)
	*(($22 + [488])) = (int_64))((int_64)0 - $16)
	*((($1 = ($3 + [24])) + [12])) = *((($22 + [528]) + [12]))
	*($22 + [472]) = $16
	$11 = ($3 + [56])
	$16 = *($11)
	*($22 + [464]) = ((int_64)$16 ^ (int_64)4294967295)
	*($22 + [480]) = $16
	$16 = *($3)
	*(($1 + [8])) = *($10)
	*($1) = *($22 + [528])
	CALL eosio_assert([1], [464])
	*($22 + [840]) = (($22 + [192]) + [64])
	*($22 + [836]) = ($22 + [192])
	*($22 + [832]) = ($22 + [192])
	CALL $89(($22 + [832]), $3)
	CALL db_update_i64(*($3 + [68]), (int_64)0, ($22 + [192]), [64])
	$1 = (($22 + [744]) + [16])
	if ( (uint_64)($16 <= *($1)) ){ goto $label$103 }
	*($1) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$103
	$1 = (($22 + [464]) + [16])
	*($22 + [872]) = *($21)
	*($22 + [864]) = ((int_64)*($11) ^ (int_64)4294967295)
	if ( (CALL memcmp(($22 + [464]), ($22 + [864]), [16]) == 0) ){ goto $label$104 }
	$21 = ($3 + [72])
	$10 = *($21)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$105 }
	$10 = CALL db_idx128_find_primary(*($22 + [744]), *(($22 + [752])), (int_64)-6497942333781180416, ($22 + [848]), $16)
	*($21) = $10
	
.LABEL $label$105
	CALL db_idx128_update($10, (int_64)0, ($22 + [864]))
	
.LABEL $label$104
	*($22 + [864]) = *(($3 + [56]))
	*($22 + [872]) = (int_64))((int_64)0 - *(($3 + [40])))
	if ( (CALL memcmp($1, ($22 + [864]), [16]) == 0) ){ goto $label$101 }
	$10 = ($3 + [76])
	$1 = *($10)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$106 }
	$1 = CALL db_idx128_find_primary(*($22 + [744]), *(($22 + [752])), (int_64)-6497942333781180415, ($22 + [848]), $16)
	*($10) = $1
	
.LABEL $label$106
	CALL db_idx128_update($1, (int_64)0, ($22 + [864]))
	goto $label$101 
	
.LABEL $label$102
	CALL $86(($22 + [664]), $5)
	CALL $87(($22 + [744]), $3)
	
.LABEL $label$101
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$108 }
	*($22 + [196]) = $6
	*($22 + [192]) = ($22 + [512])
	CALL $90(($22 + [624]), $6, ($22 + [192]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($22 + [704])), [352])
	CALL eosio_assert(((int_64)*($22 + [704]) == (int_64)CALL $fimport$3()), [400])
	$10 = ($4 + [40])
	$16 = *($10)
	*(($22 + [488])) = (int_64))((int_64)0 - $16)
	*((($1 = ($4 + [24])) + [12])) = *((($22 + [512]) + [12]))
	*($22 + [472]) = $16
	$21 = ($4 + [56])
	$16 = *($21)
	*($22 + [464]) = ((int_64)$16 ^ (int_64)4294967295)
	*($22 + [480]) = $16
	$16 = *($4)
	*(($1 + [8])) = *((($22 + [512]) + [8]))
	*($1) = *($22 + [512])
	CALL eosio_assert([1], [464])
	*($22 + [840]) = (($22 + [192]) + [64])
	*($22 + [836]) = ($22 + [192])
	*($22 + [832]) = ($22 + [192])
	CALL $89(($22 + [832]), $4)
	CALL db_update_i64(*($4 + [68]), (int_64)0, ($22 + [192]), [64])
	$1 = (($22 + [704]) + [16])
	if ( (uint_64)($16 <= *($1)) ){ goto $label$109 }
	*($1) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$109
	$1 = (($22 + [464]) + [16])
	*($22 + [872]) = *($10)
	*($22 + [864]) = ((int_64)*($21) ^ (int_64)4294967295)
	if ( (CALL memcmp(($22 + [464]), ($22 + [864]), [16]) == 0) ){ goto $label$110 }
	$21 = ($4 + [72])
	$10 = *($21)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$111 }
	$10 = CALL db_idx128_find_primary(*($22 + [704]), *(($22 + [712])), (int_64)-6497942333781180416, ($22 + [848]), $16)
	*($21) = $10
	
.LABEL $label$111
	CALL db_idx128_update($10, (int_64)0, ($22 + [864]))
	
.LABEL $label$110
	*($22 + [864]) = *(($4 + [56]))
	*($22 + [872]) = (int_64))((int_64)0 - *(($4 + [40])))
	if ( (CALL memcmp($1, ($22 + [864]), [16]) == 0) ){ goto $label$107 }
	$10 = ($4 + [76])
	$1 = *($10)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$112 }
	$1 = CALL db_idx128_find_primary(*($22 + [704]), *(($22 + [712])), (int_64)-6497942333781180415, ($22 + [848]), $16)
	*($10) = $1
	
.LABEL $label$112
	CALL db_idx128_update($1, (int_64)0, ($22 + [864]))
	goto $label$107 
	
.LABEL $label$108
	CALL $86(($22 + [624]), $6)
	CALL $87(($22 + [704]), $4)
	
.LABEL $label$107
	$16 = CALL current_time()
	*($22 + [312]) = ((CASTING uint_32)(uint_64 ((int_64)((int_64)*($22 + [824]) * (int_64)86400000000) / (int_64)1000000)) + (CASTING uint_32)(uint_64 ((uint_64)$16 / (uint_64)(int_64)1000000)))
	*(($21 = ($22 + [496]))) = [0]
	*($22 + [480]) = (int_64)-1
	*($22 + [488]) = (int_64)0
	$16 = *($0)
	*($22 + [464]) = $16
	*($22 + [472]) = $16
	*($22 + [500]) = [0]
	*($22 + [196]) = $3
	*($22 + [200]) = $4
	*($22 + [208]) = $6
	*($22 + [192]) = ($22 + [464])
	*($22 + [204]) = ($22 + [608])
	*($22 + [212]) = ($22 + [592])
	*($22 + [216]) = ($22 + [824])
	*($22 + [220]) = ($22 + [312])
	*($22 + [848]) = $16
	CALL eosio_assert(((int_64)$16 == (int_64)CALL $fimport$3()), [272])
	*($22 + [868]) = ($22 + [192])
	*($22 + [864]) = ($22 + [464])
	*($22 + [872]) = ($22 + [848])
	$1 = CALL $138([120])
	CALL $77($1)
	*($1 + [100]) = ($22 + [464])
	CALL $91(($22 + [864]), $1)
	*($22 + [832]) = $1
	$16 = *($1)
	*($22 + [864]) = $16
	$11 = *($1 + [104])
	*($22 + [892]) = $11
	$14 = ($22 + [492])
	$10 = *($14)
	if ( ((uint_32)$10 >= (uint_32)*($21)) ){ goto $label$114 }
	*($10 + [8]) = $16
	*($10 + [16]) = $11
	*($22 + [832]) = [0]
	*($10) = $1
	*($14) = ($10 + [24])
	goto $label$113 
	
.LABEL $label$114
	CALL $79(($22 + [488]), ($22 + [832]), ($22 + [864]), ($22 + [892]))
	
.LABEL $label$113
	$1 = *($22 + [832])
	*($22 + [832]) = [0]
	if ( ($1 == 0) ){ goto $label$115 }
	CALL $139($1)
	
.LABEL $label$115
	*($22 + [192]) = *($22 + [824])
	*($22 + [200]) = *($22 + [608])
	*($22 + [208]) = *($22 + [592])
	*($22 + [216]) = *($2 + [8])
	*($22 + [220]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$16 = CALL current_time()
	*($22 + [224]) = ((CASTING uint_32)(uint_64 ((int_64)((int_64)*($22 + [824]) * (int_64)86400000000) / (int_64)1000000)) + (CASTING uint_32)(uint_64 ((uint_64)$16 / (uint_64)(int_64)1000000)))
	*($22 + [864]) = *(($3 + [8]))
	$2 = ($22 + [228])
	CALL $92($2, ($22 + [864]))
	*($22 + [240]) = *(($3 + [40]))
	*($22 + [248]) = *($3)
	$21 = ($22 + [256])
	CALL $145($21, ($5 + [96]))
	*($22 + [848]) = *(($4 + [8]))
	$5 = ($22 + [268])
	CALL $92($5, ($22 + [848]))
	*($22 + [280]) = *(($4 + [40]))
	*($22 + [288]) = *($4)
	$11 = ($22 + [296])
	CALL $145($11, ($6 + [96]))
	$19 = *($0)
	$3 = ($22 + [280])
	$4 = ($22 + [240])
	$16 = (int_64)0
	$15 = (int_64)59
	$1 = [1040]
	$17 = (int_64)0
	
.LOOP $label$116:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$121 }
	$10 = *($1)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$10 = ($10 + [165])
	goto $label$119 
	
.LABEL $label$121
	$18 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$120
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$118
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$117
	$1 = ($1 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$116 }
	*($22 + [872]) = $17
	*($22 + [864]) = $19
	CALL memcpy(($22 + [72]), ($22 + [192]), [36])
	CALL $145((($22 + [72]) + [36]), $2)
	*(($22 + [128])) = *(($4 + [8]))
	*($22 + [120]) = *($4)
	CALL $145(($22 + [136]), $21)
	$1 = ($22 + [148])
	CALL $145($1, $5)
	*(($22 + [168])) = *(($3 + [8]))
	*($22 + [160]) = *($3)
	CALL $145(($22 + [176]), $11)
	CALL $93($19, ($22 + [864]), ($22 + [72]))
	if ( ((*($22 + [176]) & [1]) == 0) ){ goto $label$122 }
	CALL $139(*(($22 + [184])))
	
.LABEL $label$122
	if ( ((*($1) & [1]) == 0) ){ goto $label$123 }
	CALL $139(*(($22 + [156])))
	
.LABEL $label$123
	if ( ((*(($22 + [136])) & [1]) == 0) ){ goto $label$124 }
	CALL $139(*(($22 + [144])))
	
.LABEL $label$124
	if ( ((*(($22 + [108])) & [1]) == 0) ){ goto $label$125 }
	CALL $139(*(($22 + [116])))
	
.LABEL $label$125
	if ( ((*(($22 + [296])) & [1]) == 0) ){ goto $label$126 }
	CALL $139(*(($22 + [304])))
	
.LABEL $label$126
	if ( ((*(($22 + [268])) & [1]) == 0) ){ goto $label$127 }
	CALL $139(*(($22 + [276])))
	
.LABEL $label$127
	if ( ((*(($22 + [256])) & [1]) == 0) ){ goto $label$128 }
	CALL $139(*(($22 + [264])))
	
.LABEL $label$128
	if ( ((*(($22 + [228])) & [1]) == 0) ){ goto $label$129 }
	CALL $139(*(($22 + [236])))
	
.LABEL $label$129
	$3 = *($22 + [488])
	if ( ($3 == 0) ){ goto $label$130 }
	$4 = ($22 + [492])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$132 }
	
.LOOP $label$133:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$134 }
	CALL $139($10)
	
.LABEL $label$134
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$133 }
	$1 = *(($22 + [488]))
	goto $label$131 
	
.LABEL $label$132
	$1 = $3
	
.LABEL $label$131
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$130
	$3 = *($22 + [648])
	if ( ($3 == 0) ){ goto $label$135 }
	$4 = ($22 + [652])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$137 }
	
.LOOP $label$138:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$139 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$140 }
	CALL $139(*(($10 + [104])))
	
.LABEL $label$140
	CALL $139($10)
	
.LABEL $label$139
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$138 }
	$1 = *(($22 + [648]))
	goto $label$136 
	
.LABEL $label$137
	$1 = $3
	
.LABEL $label$136
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$135
	$3 = *($22 + [688])
	if ( ($3 == 0) ){ goto $label$141 }
	$4 = ($22 + [692])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$143 }
	
.LOOP $label$144:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$145 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$146 }
	CALL $139(*(($10 + [104])))
	
.LABEL $label$146
	CALL $139($10)
	
.LABEL $label$145
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$144 }
	$1 = *(($22 + [688]))
	goto $label$142 
	
.LABEL $label$143
	$1 = $3
	
.LABEL $label$142
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$141
	$3 = *($22 + [728])
	if ( ($3 == 0) ){ goto $label$147 }
	$4 = ($22 + [732])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$149 }
	
.LOOP $label$150:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$151 }
	CALL $139($10)
	
.LABEL $label$151
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$150 }
	$1 = *(($22 + [728]))
	goto $label$148 
	
.LABEL $label$149
	$1 = $3
	
.LABEL $label$148
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$147
	$3 = *($22 + [768])
	if ( ($3 == 0) ){ goto $label$152 }
	$4 = ($22 + [772])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$154 }
	
.LOOP $label$155:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$156 }
	CALL $139($10)
	
.LABEL $label$156
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$155 }
	$1 = *(($22 + [768]))
	goto $label$153 
	
.LABEL $label$154
	$1 = $3
	
.LABEL $label$153
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$152
	$3 = *($22 + [808])
	if ( ($3 == 0) ){ goto $label$157 }
	$4 = ($22 + [812])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$159 }
	
.LOOP $label$160:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$161 }
	CALL $139($10)
	
.LABEL $label$161
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$160 }
	$1 = *(($22 + [808]))
	goto $label$158 
	
.LABEL $label$159
	$1 = $3
	
.LABEL $label$158
	*($4) = $3
	CALL $139($1)
	
.LABEL $label$157
	*([0] + [4]) = ($22 + [896])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN6finrex6finrex9lendorderENS0_18request_lend_orderE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [464])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	$2 = *($1)
	CALL require_auth($2)
	CALL $119($1)
	*($14 + [112]) = (int_64)0
	$3 = ($0 + [48])
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$3), [160])
	if ( $9 ){ goto $label$1 }
	$9 = ($14 + [112])
	goto $label$1 
	
.LABEL $label$2
	$9 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $36($3, $9)
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$3), [160])
	goto $label$1 
	
.LABEL $label$3
	$9 = ($14 + [112])
	
.LABEL $label$1
	$4 = *($9)
	*(($14 + [408])) = [0]
	*($14 + [392]) = (int_64)-1
	$11 = (int_64)0
	*($14 + [400]) = (int_64)0
	$13 = *($0)
	*($14 + [376]) = $13
	*($14 + [384]) = $13
	$5 = CALL $81(($14 + [376]), *($1 + [8]), [1312])
	*(($14 + [344])) = *(($1 + [24]))
	*($14 + [336]) = *($1 + [16])
	$6 = ($1 + [16])
	$10 = (int_64)59
	$9 = [112]
	$12 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$9 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ($7 + [165])
	goto $label$7 
	
.LABEL $label$9
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$5
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$4 }
	$11 = *((($14 + [336]) + [8]))
	*((($14 + [112]) + [8])) = $11
	*(($9 = (($14 + [352]) + [8]))) = $11
	$11 = *($14 + [336])
	*($14 + [112]) = $11
	*($14 + [352]) = $11
	*($14 + [368]) = $12
	CALL eosio_assert(((int_64)*($14 + [352]) >= (int_64)*($5 + [12])), [3168])
	$11 = (int_64)0
	*($14 + [312]) = (int_64))((int_64)0 - *($14 + [352]))
	*($14 + [320]) = *($9)
	$13 = *($14 + [368])
	*(($14 + [8])) = *($14 + [320])
	*($14 + [328]) = $13
	*(($14 + [16])) = *($14 + [328])
	*($14) = *($14 + [312])
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $2, $14, $2)
	$13 = ((int_64)((int_64)*(($1 + [8])) * (int_64)100) | (int_64)2)
	*($14 + [304]) = $13
	*((($14 + [264]) + [32])) = [0]
	*($14 + [272]) = $13
	*($14 + [280]) = (int_64)-1
	*($14 + [288]) = (int_64)0
	$13 = *($0)
	*($14 + [264]) = $13
	*($14 + [300]) = [0]
	*((($14 + [224]) + [32])) = [0]
	*($14 + [232]) = $2
	*($14 + [224]) = $13
	*($14 + [240]) = (int_64)-1
	*($14 + [248]) = (int_64)0
	*($14 + [216]) = ((int_64)$4 + (int_64)1)
	$9 = CALL db_lowerbound_i64($13, $2, (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	CALL $102(($14 + [224]), $9)
	*($14 + [116]) = [0]
	*($14 + [112]) = ($14 + [224])
	$11 = *(*(CALL $120(($14 + [112])) + [4]))
	$11 = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($9 = (($14 + [224]) + [16]))) = $11
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [2528])
	*($14 + [208]) = *($9)
	*($14 + [200]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)*($14 + [264]) == (int_64)CALL $fimport$3()), [272])
	$9 = CALL $138([80])
	$7 = CALL $107($9)
	*($9 + [64]) = ($14 + [264])
	*($9 + [8]) = $2
	*($9) = *($14 + [216])
	*($9 + [16]) = *($14 + [208])
	*(($9 + [52])) = *(($1 + [44]))
	*(($9 + [48])) = *(($1 + [40]))
	*(($9 + [44])) = *(($1 + [36]))
	*($9 + [40]) = *($1 + [32])
	*(($9 + [32])) = *(($6 + [8]))
	*($9 + [24]) = *($6)
	*($9 + [56]) = *($14 + [200])
	*($9 + [60]) = [0]
	*($14 + [424]) = (($14 + [112]) + [64])
	*($14 + [420]) = ($14 + [112])
	*($14 + [416]) = ($14 + [112])
	CALL $89(($14 + [416]), $7)
	$11 = *($9)
	*($9 + [68]) = CALL db_store_i64(*((($14 + [264]) + [8])), (int_64)-6497942333781180416, $2, $11, ($14 + [112]), [64])
	if ( (uint_64)($11 <= *((($14 + [264]) + [16]))) ){ goto $label$11 }
	*(($14 + [280])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$11 = *($9)
	$7 = ($14 + [272])
	$13 = *($7)
	$5 = ($9 + [40])
	*($14 + [440]) = *($5)
	$8 = ($9 + [56])
	*($14 + [432]) = ((int_64)*($8) ^ (int_64)4294967295)
	*($9 + [72]) = CALL db_idx128_store($13, (int_64)-6497942333781180416, $2, $11, ($14 + [432]))
	$11 = *($9)
	$13 = *($7)
	*($14 + [432]) = *($8)
	*($14 + [440]) = (int_64))((int_64)0 - *($5))
	*($9 + [76]) = CALL db_idx128_store($13, (int_64)-6497942333781180415, $2, $11, ($14 + [432]))
	*($14 + [432]) = $9
	$11 = *($9)
	*($14 + [112]) = $11
	$5 = *(($9 + [68]))
	*($14 + [416]) = $5
	$8 = ($14 + [292])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($14 + [296]))) ){ goto $label$13 }
	*($7 + [8]) = $11
	*($7 + [16]) = $5
	*($14 + [432]) = [0]
	*($7) = $9
	*($8) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $109(($14 + [288]), ($14 + [432]), ($14 + [112]), ($14 + [416]))
	
.LABEL $label$12
	$9 = *($14 + [432])
	*($14 + [432]) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $139($9)
	
.LABEL $label$14
	*($14 + [124]) = $1
	*($14 + [116]) = ($14 + [304])
	*($14 + [112]) = ($14 + [208])
	*($14 + [120]) = ($14 + [216])
	*($14 + [128]) = ($14 + [352])
	*($14 + [132]) = ($14 + [200])
	*($14 + [416]) = $2
	CALL eosio_assert(((int_64)*($14 + [224]) == (int_64)CALL $fimport$3()), [272])
	*($14 + [436]) = ($14 + [112])
	*($14 + [432]) = ($14 + [224])
	*($14 + [440]) = ($14 + [416])
	$9 = CALL $138([128])
	CALL $103($9)
	*($9 + [116]) = ($14 + [224])
	CALL $121(($14 + [432]), $9)
	*($14 + [456]) = $9
	$11 = *($9)
	*($14 + [432]) = $11
	$5 = *($9 + [120])
	*($14 + [452]) = $5
	$8 = ($14 + [252])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($14 + [256]))) ){ goto $label$16 }
	*($7 + [8]) = $11
	*($7 + [16]) = $5
	*($14 + [456]) = [0]
	*($7) = $9
	*($8) = ($7 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $105(($14 + [248]), ($14 + [456]), ($14 + [432]), ($14 + [452]))
	
.LABEL $label$15
	$9 = *($14 + [456])
	*($14 + [456]) = [0]
	if ( ($9 == 0) ){ goto $label$17 }
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$18 }
	CALL $139(*(($9 + [104])))
	
.LABEL $label$18
	CALL $139($9)
	
.LABEL $label$17
	*($14 + [112]) = *($14 + [216])
	CALL $35($3, ($14 + [112]), *($0))
	*(($14 + [120])) = [0]
	*($14 + [112]) = (int_64)0
	$9 = CALL strlen([3200])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$19 }
	$3 = ($1 + [32])
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$22 }
	*($14 + [112]) = ($9 << [1])
	$7 = (($14 + [112]) | [1])
	if ( $9 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$5 = (($9 + [16]) & [-16])
	$7 = CALL $138($5)
	*($14 + [112]) = ($5 | [1])
	*($14 + [120]) = $7
	*($14 + [116]) = $9
	
.LABEL $label$21
	CALL memcpy($7, [3200], $9)
	
.LABEL $label$20
	*(($7 + $9)) = [0]
	*(($14 + [164])) = *(($6 + [12]))
	*((($14 + [112]) + [48])) = *(($6 + [8]))
	*(($14 + [156])) = *(($6 + [4]))
	*($14 + [136]) = $2
	*($14 + [128]) = *($14 + [216])
	*($14 + [144]) = *(($1 + [8]))
	*($14 + [152]) = *($6)
	*(($14 + [176])) = *(($3 + [8]))
	*($14 + [168]) = *($3)
	$6 = ($14 + [184])
	CALL $145($6, ($1 + [48]))
	$2 = *($0)
	$1 = ($14 + [128])
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1040]
	$12 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$28 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$7 = ($7 + [165])
	goto $label$26 
	
.LABEL $label$28
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	*($14 + [440]) = $12
	*($14 + [432]) = $2
	CALL $145(($14 + [24]), ($14 + [112]))
	CALL memcpy(($14 + [40]), $1, [56])
	CALL $145(($14 + [96]), $6)
	CALL $122($2, ($14 + [432]), ($14 + [24]))
	if ( ((*($14 + [96]) & [1]) == 0) ){ goto $label$29 }
	CALL $139(*(($14 + [104])))
	
.LABEL $label$29
	if ( ((*($14 + [24]) & [1]) == 0) ){ goto $label$30 }
	CALL $139(*($14 + [32]))
	
.LABEL $label$30
	if ( ((*(($14 + [184])) & [1]) == 0) ){ goto $label$31 }
	CALL $139(*(($14 + [192])))
	
.LABEL $label$31
	if ( ((*($14 + [112]) & [1]) == 0) ){ goto $label$32 }
	CALL $139(*($14 + [120]))
	
.LABEL $label$32
	$1 = *($14 + [248])
	if ( ($1 == 0) ){ goto $label$33 }
	$0 = ($14 + [252])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$35 }
	
.LOOP $label$36:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$37 }
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$38 }
	CALL $139(*(($7 + [104])))
	
.LABEL $label$38
	CALL $139($7)
	
.LABEL $label$37
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$36 }
	$9 = *(($14 + [248]))
	goto $label$34 
	
.LABEL $label$35
	$9 = $1
	
.LABEL $label$34
	*($0) = $1
	CALL $139($9)
	
.LABEL $label$33
	$1 = *($14 + [288])
	if ( ($1 == 0) ){ goto $label$39 }
	$0 = ($14 + [292])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$41 }
	
.LOOP $label$42:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	CALL $139($7)
	
.LABEL $label$43
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$42 }
	$9 = *(($14 + [288]))
	goto $label$40 
	
.LABEL $label$41
	$9 = $1
	
.LABEL $label$40
	*($0) = $1
	CALL $139($9)
	
.LABEL $label$39
	$1 = *($14 + [400])
	if ( ($1 == 0) ){ goto $label$44 }
	$0 = ($14 + [404])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$46 }
	
.LOOP $label$47:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$48 }
	CALL $139($7)
	
.LABEL $label$48
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$47 }
	$9 = *(($14 + [400]))
	goto $label$45 
	
.LABEL $label$46
	$9 = $1
	
.LABEL $label$45
	*($0) = $1
	CALL $139($9)
	
.LABEL $label$44
	*([0] + [4]) = ($14 + [464])
	return (unreachable)
	
.LABEL $label$19
	CALL $140(($14 + [112]))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	$2 = CALL memset($2, [0], [64])
	CALL $116($2)
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [108]) = ($2 + [8])
	*($2 + [112]) = ($2 + [16])
	*($2 + [116]) = ($2 + [32])
	$3 = ($2 + [48])
	*($2 + [120]) = $3
	*($2 + [104]) = $2
	CALL $117(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [108]) = ($2 + [64])
	*($2 + [104]) = ($2 + [76])
	CALL $118(($2 + [104]), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL $139(*(($2 + [56])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [128])
	return [1]
}

void .FUNC _ZN6finrex6finrex11cancelorderENS0_20request_cancel_orderE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [240])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
	$8 = *($1)
	CALL require_auth($8)
	*((($11 + [152]) + [32])) = [0]
	*($11 + [160]) = $8
	*($11 + [168]) = (int_64)-1
	*($11 + [176]) = (int_64)0
	*($11 + [152]) = *($0)
	$6 = CALL $83(($11 + [152]), *($1 + [8]), [3056])
	*($11 + [128]) = (int_64)-1
	*($11 + [136]) = [0]
	*($11 + [112]) = *($0)
	*($11 + [120]) = *($6 + [8])
	*(($11 + [140])) = [0]
	*((($11 + [112]) + [32])) = [0]
	*($11 + [148]) = [0]
	$3 = CALL $82(($11 + [112]), *($6 + [16]), [3088])
	$7 = *(($6 + [88]))
	*((($11 + [88]) + [16])) = $7
	$9 = *(($6 + [80]))
	*((($11 + [88]) + [8])) = $9
	$10 = *($6 + [72])
	*(($11 + [16])) = $7
	*(($11 + [8])) = $9
	*($11 + [88]) = $10
	*($11) = $10
	CALL _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy($0, $8, $11, $8)
	CALL $86(($11 + [152]), $6)
	CALL $87(($11 + [112]), $3)
	*((($11 + [56]) + [8])) = [0]
	*($11 + [56]) = (int_64)0
	$3 = CALL strlen([3152])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($11 + [56]) = ($3 << [1])
	$5 = (($11 + [56]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $138($4)
	*($11 + [56]) = ($4 | [1])
	*($11 + [64]) = $5
	*($11 + [60]) = $3
	
.LABEL $label$3
	CALL memcpy($5, [3152], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($11 + [72]) = *(($6 + [16]))
	*($11 + [80]) = *($1)
	$3 = (($11 + [56]) + [16])
	$2 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1040]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$10 }
	$0 = *($6)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$0 = ($0 + [165])
	goto $label$8 
	
.LABEL $label$10
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	CALL $145(($11 + [24]), ($11 + [56]))
	*(($0 = (($11 + [24]) + [24]))) = *(($3 + [8]))
	*($11 + [40]) = *($3)
	*(($6 = CALL $138([16]))) = $2
	*($6 + [8]) = $9
	$3 = ($6 + [16])
	*($11 + [232]) = $3
	$1 = (($11 + [24]) + [8])
	*((($11 + [192]) + [8])) = *($1)
	*($11 + [224]) = $6
	*($11 + [228]) = $3
	*($11 + [196]) = *($11 + [28])
	*($11 + [192]) = *($11 + [24])
	*($11 + [28]) = [0]
	*($11 + [24]) = [0]
	*($1) = [0]
	*((($11 + [192]) + [24])) = *($0)
	*($11 + [208]) = *($11 + [40])
	CALL $114($2, (int_64)-8279723548008251392, ($11 + [224]), ($11 + [192]))
	if ( ((*($11 + [192]) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*($11 + [200]))
	
.LABEL $label$11
	$6 = *($11 + [224])
	if ( ($6 == 0) ){ goto $label$12 }
	*($11 + [228]) = $6
	CALL $139($6)
	
.LABEL $label$12
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*(($11 + [32])))
	
.LABEL $label$13
	if ( ((*($11 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL $139(*($11 + [64]))
	
.LABEL $label$14
	$3 = *($11 + [136])
	if ( ($3 == 0) ){ goto $label$15 }
	$1 = ($11 + [140])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL $139($0)
	
.LABEL $label$19
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($11 + [136]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $3
	
.LABEL $label$16
	*($1) = $3
	CALL $139($6)
	
.LABEL $label$15
	$3 = *($11 + [176])
	if ( ($3 == 0) ){ goto $label$20 }
	$1 = ($11 + [180])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	if ( ((*($0 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $139(*(($0 + [104])))
	
.LABEL $label$25
	CALL $139($0)
	
.LABEL $label$24
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($11 + [176]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $3
	
.LABEL $label$21
	*($1) = $3
	CALL $139($6)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $140(($11 + [56]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [80])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = (($7 + [16]) + [8]))) = (int_64)0
	*($7 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [560])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [560])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [32]) + [8]))) = *($3)
	*($7 + [32]) = *($7 + [16])
	*((($7 + [48]) + [8])) = *($1)
	*($7 + [48]) = *($7 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	$4 = *((($7 + [48]) + [8]))
	*((($7 + [64]) + [8])) = $4
	*(($7 + [8])) = $4
	$4 = *($7 + [48])
	*($7 + [64]) = $4
	*($7) = $4
	CALL void $1((int_32 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [80])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [104]))
	$7 = *($1 + [108])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4996858902428516352, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx128_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [112]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4996858902428516351, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx128_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [128])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*(($3 = (($10 + [32]) + [16]))) = (int_64)0
	*(($4 = (($10 + [32]) + [8]))) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [560])
	CALL memcpy(($10 + [32]), $8, [8])
	$5 = ($1 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [560])
	CALL memcpy($4, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [560])
	CALL memcpy($3, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	*(($1 = (($10 + [56]) + [16]))) = *($3)
	*(($8 = (($10 + [56]) + [8]))) = *($4)
	*($10 + [56]) = *($10 + [32])
	*((($10 + [80]) + [16])) = *($1)
	*((($10 + [80]) + [8])) = *($8)
	*($10 + [80]) = *($10 + [56])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	$6 = *((($10 + [80]) + [16]))
	*((($10 + [104]) + [16])) = $6
	$7 = *((($10 + [80]) + [8]))
	*((($10 + [104]) + [8])) = $7
	*((($10 + [8]) + [16])) = $6
	*((($10 + [8]) + [8])) = $7
	$6 = *($10 + [80])
	*($10 + [104]) = $6
	*($10 + [8]) = $6
	CALL void $1((int_32 ($10 + [8])), (int_32 $9))
	*([0] + [4]) = ($10 + [128])
	return [1]
}

void .FUNC _ZN6finrex6finrex10runrentingEt (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [240])
	*([0] + [4]) = $27
	*((($27 + [168]) + [32])) = [0]
	*($27 + [184]) = (int_64)-1
	*($27 + [192]) = (int_64)0
	$21 = *($0)
	*($27 + [168]) = $21
	*($27 + [176]) = $21
	*($27 + [204]) = [0]
	*(($13 = (($27 + [128]) + [32]))) = [0]
	*($27 + [136]) = $21
	*($27 + [128]) = $21
	*($27 + [144]) = (int_64)-1
	*($27 + [152]) = (int_64)0
	*($27 + [164]) = [0]
	*($27 + [120]) = ($27 + [168])
	$21 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $21)
	$6 = ($2 + [259200])
	$3 = ((int_64)$21 & (int_64)4294967295)
	$8 = (($27 + [128]) + [24])
	$7 = ($27 + [48])
	$5 = (($27 + [64]) + [28])
	$4 = ($27 + [32])
	$14 = (($27 + [64]) + [20])
	$15 = ($27 + [100])
	$18 = [0]
	
.LOOP $label$2:
	*($27 + [8]) = (int_64)0
	*($27) = (int_64)0
	CALL $71(($27 + [112]), ($27 + [120]), $27)
	CALL prints([1088])
	$19 = *($27 + [116])
	CALL prints([1136])
	CALL printui(*($19 + [96]))
	$21 = *(*($27 + [116]) + [32])
	CALL prints([1152])
	CALL printn($21)
	$19 = *($27 + [116])
	CALL prints([1168])
	CALL printi(*($19 + [40]))
	CALL prints([1184])
	CALL printui($3)
	$19 = *($27 + [116])
	if ( ($19 == 0) ){ goto $label$1 }
	if ( ((uint_32)*($19 + [96]) > (uint_32)$2) ){ goto $label$1 }
	CALL prints([1200])
	$9 = *($0)
	$21 = (int_64)0
	$20 = (int_64)59
	$19 = [1040]
	$22 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$8 }
	$10 = *($19)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$10 = ($10 + [165])
	goto $label$6 
	
.LABEL $label$8
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$4
	$19 = ($19 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$3 }
	$21 = (int_64)0
	$20 = (int_64)59
	$19 = [32]
	$24 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$21 > (uint_64)(int_64)4) ){ goto $label$14 }
	$10 = *($19)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$10 = ($10 + [165])
	goto $label$12 
	
.LABEL $label$14
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$10
	$19 = ($19 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$24 = ((int_64)$23 | (int_64)$24)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$9 }
	$21 = (int_64)0
	$23 = (int_64)59
	$19 = [1232]
	$25 = (int_64)0
	
.LOOP $label$15:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$16 }
	$10 = *($19)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$10 = ($10 + [165])
	goto $label$17 
	
.LABEL $label$18
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$16
	$19 = ($19 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$25 = ((int_64)$20 | (int_64)$25)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$15 }
	$26 = *($27 + [116])
	CALL eosio_assert([1], [848])
	$21 = (int_64)5459781
	$19 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$10 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [912])
	$21 = *(($26 + [24]))
	*(($27 + [16])) = (int_64)0
	*(($27 + [24])) = (int_64)1397703940
	*(($27 + [8])) = $21
	*($27) = *($0)
	$19 = *($27 + [116])
	*(($4 + [8])) = *(($19 + [48]))
	*($4) = *($19 + [40])
	*(($4 + [16])) = *(($19 + [56]))
	*($27 + [64]) = $24
	*((($27 + [64]) + [8])) = $25
	*(($10 = (($27 + [64]) + [16]))) = [0]
	*($14) = [0]
	*(($12 = (($27 + [64]) + [24]))) = [0]
	$19 = CALL $138([16])
	*($10) = $19
	*($19) = $9
	*($19 + [8]) = $22
	*($5) = [0]
	*(($26 = (($27 + [64]) + [32]))) = [0]
	$19 = ($19 + [16])
	*($12) = $19
	*($14) = $19
	*($15) = [0]
	CALL $55($5, [56])
	$19 = *($5)
	*(($16 = (($27 + [224]) + [8]))) = *($26)
	*($27 + [228]) = $19
	*($27 + [224]) = $19
	*($27 + [208]) = ($27 + [224])
	*($27 + [216]) = $27
	CALL $72(($27 + [216]), ($27 + [208]))
	CALL $67(($27 + [224]), ($27 + [64]))
	$19 = *($27 + [224])
	CALL send_inline($19, (*($27 + [228]) - $19))
	$19 = *($27 + [224])
	if ( ($19 == 0) ){ goto $label$24 }
	*($27 + [228]) = $19
	CALL $139($19)
	
.LABEL $label$24
	$19 = *($5)
	if ( ($19 == 0) ){ goto $label$25 }
	*($26) = $19
	CALL $139($19)
	
.LABEL $label$25
	$19 = *($10)
	if ( ($19 == 0) ){ goto $label$26 }
	*($14) = $19
	CALL $139($19)
	
.LABEL $label$26
	CALL prints([1248])
	$21 = *(*($27 + [116]))
	$11 = *($8)
	$17 = (($27 + [128]) + [28])
	$26 = *($17)
	if ( ((int_32)$26 == (int_32)$11) ){ goto $label$27 }
	$19 = ($26 + [-24])
	$12 = ([0] - $11)
	
.LOOP $label$28:
	if ( ((int_64)*(*($19)) == (int_64)$21) ){ goto $label$27 }
	$26 = $19
	$10 = ($19 + [-24])
	$19 = $10
	if ( ((int_32)($10 + $12) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	if ( ((int_32)$26 == (int_32)$11) ){ goto $label$31 }
	$19 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [48]) == (int_32)($27 + [128])), [160])
	if ( $19 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$31
	$19 = CALL db_find_i64(*($27 + [128]), *((($27 + [128]) + [8])), (int_64)-5001342331490664448, $21)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*(CALL $63(($27 + [128]), $19) + [48]) == (int_32)($27 + [128])), [160])
	goto $label$29 
	
.LABEL $label$30
	$23 = *($0)
	CALL eosio_assert(((int_64)*($27 + [128]) == (int_64)CALL $fimport$3()), [272])
	*(($10 = CALL $138([64])) + [24]) = (int_64)1397703940
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [848])
	$26 = ($10 + [16])
	$21 = (int_64)5459781
	$19 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	
.LOOP $label$36:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$36 }
	
.LABEL $label$35
	$12 = [1]
	$19 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[7]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$12 = [0]
	
.LABEL $label$32
	CALL eosio_assert($12, [912])
	*($10 + [40 align=4]) = (int_64)0
	*($10 + [48]) = ($27 + [128])
	$19 = *($27 + [116])
	*($10 + [8]) = *($19 + [32])
	*($10) = *($19)
	*(($26 + [16])) = *(($19 + [56]))
	*(($26 + [12])) = *(($19 + [52]))
	*(($26 + [8])) = *(($19 + [48]))
	*(($26 + [4])) = *(($19 + [44]))
	*($26) = *($19 + [40])
	*(($26 + [20])) = *(($19 + [60]))
	*($10 + [40]) = $2
	*($10 + [44]) = $6
	*($16) = $7
	*($27 + [228]) = $27
	*($27 + [224]) = $27
	CALL $73(($27 + [224]), $10)
	$21 = *($10)
	$19 = (($27 + [128]) + [8])
	*($10 + [52]) = CALL db_store_i64(*($19), (int_64)-5001342331490664448, $23, $21, $27, [48])
	$26 = (($27 + [128]) + [16])
	if ( (uint_64)($21 <= *($26)) ){ goto $label$37 }
	*($26) = ( (int_64)-2 ? ((int_64)$21 + (int_64)1) : ((uint_64)$21 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	$21 = *($10)
	$20 = *($19)
	*($27 + [72]) = (int_64)0
	*($27 + [64]) = *(($10 + [44]))
	*($10 + [56]) = CALL db_idx128_store($20, (int_64)-5001342331490664448, $23, $21, ($27 + [64]))
	$21 = *($10)
	$20 = *($19)
	*($27 + [72]) = (int_64)0
	*($27 + [64]) = *(($10 + [40]))
	*($10 + [60]) = CALL db_idx128_store($20, (int_64)-5001342331490664447, $23, $21, ($27 + [64]))
	*($27 + [64]) = $10
	$21 = *($10)
	*($27) = $21
	$26 = *(($10 + [52]))
	*($27 + [224]) = $26
	$19 = *($17)
	if ( ((uint_32)$19 >= (uint_32)*($13)) ){ goto $label$39 }
	*($19 + [8]) = $21
	*($19 + [16]) = $26
	*($27 + [64]) = [0]
	*($19) = $10
	*($17) = ($19 + [24])
	goto $label$38 
	
.LABEL $label$39
	CALL $65($8, ($27 + [64]), $27, ($27 + [224]))
	
.LABEL $label$38
	$19 = *($27 + [64])
	*($27 + [64]) = [0]
	if ( ($19 == 0) ){ goto $label$40 }
	CALL $139($19)
	
.LABEL $label$40
	$21 = *($27 + [112])
	*($27) = $21
	$19 = (CASTING uint_32)(uint_64 (uint_64)$21 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$19) != (int_32)[0]), [576])
	CALL $74($27)
	CALL $75(*($27 + [120]), $19)
	
.LABEL $label$29
	$18 = ($18 + [1])
	if ( (($18 & [65535]) <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$26 = *($27 + [152])
	if ( ($26 == 0) ){ goto $label$41 }
	$12 = ($27 + [156])
	$19 = *($12)
	if ( ((int_32)$19 == (int_32)$26) ){ goto $label$43 }
	
.LOOP $label$44:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$45 }
	CALL $139($10)
	
.LABEL $label$45
	if ( ((int_32)$26 != (int_32)$19) ){ goto $label$44 }
	$19 = *(($27 + [152]))
	goto $label$42 
	
.LABEL $label$43
	$19 = $26
	
.LABEL $label$42
	*($12) = $26
	CALL $139($19)
	
.LABEL $label$41
	$26 = *($27 + [192])
	if ( ($26 == 0) ){ goto $label$46 }
	$12 = ($27 + [196])
	$19 = *($12)
	if ( ((int_32)$19 == (int_32)$26) ){ goto $label$48 }
	
.LOOP $label$49:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$50 }
	CALL $139($10)
	
.LABEL $label$50
	if ( ((int_32)$26 != (int_32)$19) ){ goto $label$49 }
	$19 = *(($27 + [192]))
	goto $label$47 
	
.LABEL $label$48
	$19 = $26
	
.LABEL $label$47
	*($12) = $26
	CALL $139($19)
	
.LABEL $label$46
	*([0] + [4]) = ($27 + [240])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $53(*($1), *($0))
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $53(*($1), *($0 + [24]))
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)-5001342331490664448, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [160])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $63($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)-5001342331490664448, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [160])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [560])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $53(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $53(*($1), *($0 + [36]))
	CALL $53(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $53(*($1), *($0 + [52]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	CALL memcpy(($3 + [8]), $1, [36])
	CALL $145((($3 + [8]) + [36]), ($1 + [36]))
	*((($3 + [8]) + [56])) = *(($1 + [56]))
	*($3 + [56]) = *($1 + [48])
	CALL $145((($3 + [8]) + [64]), ($1 + [64]))
	$2 = (($3 + [8]) + [76])
	CALL $145($2, ($1 + [76]))
	*((($3 + [8]) + [96])) = *(($1 + [96]))
	*($3 + [96]) = *($1 + [88])
	CALL $145((($3 + [8]) + [104]), ($1 + [104]))
	CALL $52($0, ($3 + [8]))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL $139(*(($3 + [120])))
	
.LABEL $label$1
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($3 + [92])))
	
.LABEL $label$2
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($3 + [80])))
	
.LABEL $label$3
	if ( ((*(($3 + [44])) & [1]) == 0) ){ goto $label$4 }
	CALL $139(*(($3 + [52])))
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [128])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [128])
	*([0] + [4]) = $4
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$2 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($2) + $0))
	
.LABEL $label$1
	CALL memcpy(($4 + [8]), $1, [36])
	CALL $145((($4 + [8]) + [36]), ($1 + [36]))
	*((($4 + [8]) + [56])) = *(($1 + [56]))
	*($4 + [56]) = *($1 + [48])
	CALL $145((($4 + [8]) + [64]), ($1 + [64]))
	$3 = (($4 + [8]) + [76])
	CALL $145($3, ($1 + [76]))
	*((($4 + [8]) + [96])) = *(($1 + [96]))
	*($4 + [96]) = *($1 + [88])
	CALL $145((($4 + [8]) + [104]), ($1 + [104]))
	CALL void $2((int_32 ($4 + [8])), (int_32 $0))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($4 + [120])))
	
.LABEL $label$2
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($4 + [92])))
	
.LABEL $label$3
	if ( ((*(($4 + [72])) & [1]) == 0) ){ goto $label$4 }
	CALL $139(*(($4 + [80])))
	
.LABEL $label$4
	if ( ((*(($4 + [44])) & [1]) == 0) ){ goto $label$5 }
	CALL $139(*(($4 + [52])))
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [128])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $54($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $143($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $138($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $143($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $139($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $140($7)
	return (unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [832])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $55($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [560])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC _ZN6finrex6finrex12updateglobalEy (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	CALL require_auth(*($0))
	*($2 + [8]) = $1
	CALL $35(($0 + [48]), ($2 + [8]), *($0))
	*([0] + [4]) = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	CALL $145($4, $1)
	*(($4 + [24])) = *(($1 + [24]))
	*($4 + [16]) = *($1 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$2 = (*(*($0)) + int_32($3 >> [1]))
	$1 = ($4 + [16])
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($2) + $0))
	
.LABEL $label$1
	CALL $145(($4 + [32]), $4)
	*(($4 + [56])) = *(($1 + [8]))
	*($4 + [48]) = *($1)
	CALL void $2((int_32 ($4 + [32])), (int_32 $0))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*($4 + [40]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [64])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [912])
	*(($3 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [912])
	*(($0 + [80])) = [0]
	*($0 + [72 align=4]) = (int_64)0
	$4 = ($0 + [72])
	$3 = CALL strlen([944])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $138($1)
	*(($0 + [72])) = ($1 | [1])
	*(($0 + [80])) = $4
	*(($0 + [76])) = $3
	
.LABEL $label$13
	CALL memcpy($4, [944], $3)
	
.LABEL $label$12
	*(($4 + $3)) = [0]
	return $0
	
.LABEL $label$11
	CALL $140($4)
	return (unreachable)
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	*($0 + [16]) = (int_64)0
	*(($3 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [912])
	*(($3 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [912])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	$4 = ($0 + [48])
	$3 = CALL strlen([944])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $138($1)
	*(($0 + [48])) = ($1 | [1])
	*(($0 + [56])) = $4
	*(($0 + [52])) = $3
	
.LABEL $label$13
	CALL memcpy($4, [944], $3)
	
.LABEL $label$12
	*(($4 + $3)) = [0]
	return $0
	
.LABEL $label$11
	CALL $140($4)
	return (unreachable)
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [560])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $53(*($1), *($0 + [16]))
}

void .FUNC $114 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	$5 = (*($2 + [4]) - *($2))
	$4 = int_32($5 >> [4])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = CALL $138($5)
	*(($6 + [16])) = ($5 + ($4 << [4]))
	*($6 + [8]) = $5
	*($6 + [12]) = $5
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $4, $2)
	*($6 + [12]) = ($5 + $2)
	
.LABEL $label$2
	$2 = CALL $115(($6 + [24]), ($6 + [8]), $0, $1, $3)
	CALL $67(($6 + [64]), $2)
	$5 = *($6 + [64])
	CALL send_inline($5, (*($6 + [68]) - $5))
	$5 = *($6 + [64])
	if ( ($5 == 0) ){ goto $label$3 }
	*($6 + [68]) = $5
	CALL $139($5)
	
.LABEL $label$3
	$5 = *($2 + [28])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($2 + [32])) = $5
	CALL $139($5)
	
.LABEL $label$4
	$5 = *($2 + [16])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($2 + [20])) = $5
	CALL $139($5)
	
.LABEL $label$5
	$2 = *($6 + [8])
	if ( ($2 == 0) ){ goto $label$6 }
	*($6 + [12]) = $2
	CALL $139($2)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $144(($6 + [8]))
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [160])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $36($0, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$0), [160])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [224])
	CALL $37($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $38($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [24])
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [528])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$8 = CALL malloc($4)
	CALL db_get_i64($1, $8, $4)
	CALL free($8)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $8
	CALL db_get_i64($1, $8, $4)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $138([48])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [848])
	$11 = ($5 + [16])
	$6 = ($5 + [8])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [912])
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [560])
	CALL memcpy($5, $8, [8])
	$7 = ($4 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [560])
	CALL memcpy($6, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [560])
	CALL memcpy($11, ($8 + [16]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[24]), [560])
	CALL memcpy(($5 + [24]), ($8 + [24]), [8])
	*($5 + [36]) = $1
	*($10 + [24]) = $5
	$9 = *($5)
	*($10 + [16]) = $9
	$8 = *($5 + [36])
	*($10 + [12]) = $8
	$1 = ($0 + [28])
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($7 + [8]) = $9
	*($7 + [16]) = $8
	*($10 + [24]) = [0]
	*($7) = $5
	*($1) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $112($2, ($10 + [24]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$12
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $139($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return $5
}

void .FUNC _ZN6finrex6finrex14adjust_balanceEyN5eosio14extended_assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [16]) = $1
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($0)
	*($10 + [8]) = $7
	$0 = CALL db_find_i64($7, $1, (int_64)4152997947673411584, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $110(($10 + [8]), $0)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($10 + [8])), [160])
	$0 = ($9 + [24])
	CALL eosio_assert(((int_64)*($0) == (int_64)*($2 + [16])), [2832])
	$7 = *($9 + [8])
	$8 = ($9 + [16])
	$1 = *($8)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$1), [2848])
	$7 = ((int_64)$7 + (int_64)*($2))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [2896])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [2928])
	$4 = *($0)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [2960])
	if ( (int_64)($7 == 0) ){ goto $label$6 }
	CALL eosio_assert([1], [224])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)($10 + [8])), [352])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$3()), [400])
	*($9 + [8]) = $7
	*($8) = $1
	*($0) = $4
	$7 = *($9)
	CALL eosio_assert([1], [464])
	CALL eosio_assert([1], [336])
	CALL memcpy(($10 + [64]), $9, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) | [8]), ($9 + [8]), [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) + [16]), $8, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) + [24]), $0, [8])
	CALL db_update_i64(*($9 + [36]), $3, ($10 + [64]), [32])
	if ( (uint_64)($7 <= *((($10 + [8]) + [16]))) ){ goto $label$3 }
	*(($10 + [24])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$0 = *($10 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [2992])
	CALL prints([3008])
	CALL $84($2)
	CALL prints([3040])
	CALL printn(*($2 + [16]))
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$3()), [272])
	*(($0 = CALL $138([48])) + [16]) = (int_64)1397703940
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [848])
	$6 = ($0 + [16])
	$5 = ($0 + [8])
	$7 = (int_64)5459781
	
.LOOP $label$9:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($8, [912])
	*($0 + [32]) = ($10 + [8])
	*($0) = $1
	*(($5 + [20])) = *(($2 + [20]))
	*(($5 + [16])) = *(($2 + [16]))
	*(($5 + [12])) = *(($2 + [12]))
	*(($5 + [8])) = *(($2 + [8]))
	*(($5 + [4])) = *(($2 + [4]))
	*($5) = *($2)
	CALL eosio_assert([1], [336])
	CALL memcpy(($10 + [64]), $0, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) | [8]), $5, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) + [16]), $6, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($10 + [64]) + [24]), ($0 + [24]), [8])
	$7 = *($0)
	$2 = CALL db_store_i64(*((($10 + [8]) + [8])), (int_64)4152997947673411584, $3, $7, ($10 + [64]), [32])
	*($0 + [36]) = $2
	$9 = (($10 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$12 }
	*($9) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($10 + [56]) = $0
	$7 = *($0)
	*($10 + [64]) = $7
	*($10 + [52]) = $2
	$8 = ($10 + [36])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*((($10 + [8]) + [32]))) ){ goto $label$5 }
	*($9 + [8]) = $7
	*($9 + [16]) = $2
	*($10 + [56]) = [0]
	*($9) = $0
	*($8) = ($9 + [24])
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([1], [576])
	CALL eosio_assert([1], [624])
	$2 = CALL db_next_i64(*($9 + [36]), ($10 + [64]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	CALL $110(($10 + [8]), $2)
	
.LABEL $label$13
	CALL $113(($10 + [8]), $9)
	$0 = *($10 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $112(($10 + [32]), ($10 + [56]), ($10 + [64]), ($10 + [52]))
	
.LABEL $label$4
	$9 = *($10 + [56])
	*($10 + [56]) = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	CALL $139($9)
	
.LABEL $label$3
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($10 + [36])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $139($2)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$16 }
	$9 = *(($10 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$9 = $0
	
.LABEL $label$14
	*($8) = $0
	CALL $139($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $139 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	$2 = CALL memcpy($2, $1, [48])
	$3 = ($2 + [48])
	CALL $145($3, ($1 + [48]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$1 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL memcpy(($2 + [64]), $2, [48])
	CALL $145((($2 + [64]) + [48]), $3)
	CALL void $1((int_32 ($2 + [64])), (int_32 $0))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($2 + [120])))
	
.LABEL $label$2
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($2 + [56])))
	
.LABEL $label$3
	*([0] + [4]) = ($2 + [128])
}

void .FUNC $119 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($0 + [40])
	CALL eosio_assert(((int_64)*($2) == (int_64)1397703940), [3216])
	CALL eosio_assert(((int_64)*($0 + [32]) > (int_64)0), [3248])
	$4 = [0]
	$3 = [0]
	if ( ((uint_64)((int_64)*($0 + [32]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3280])
	$2 = ($0 + [24])
	CALL eosio_assert(((int_64)*($2) == (int_64)1397703940), [3312])
	CALL eosio_assert(((int_64)*($0 + [16]) > (int_64)0), [3344])
	CALL eosio_assert((int_64)(((int_64)*($0 + [16]) % (int_64)10000) == 0), [3376])
	if ( ((uint_64)((int_64)*($0 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [3408])
	$2 = *($0 + [48])
	if ( ($2 & [1]) ){ goto $label$12 }
	$2 = uint_32($2 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$2 = *(($0 + [52]))
	
.LABEL $label$11
	CALL eosio_assert(($2 <= [257]), [3440])
}

int_32 .FUNC $152 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12358]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12360])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12358]) = [1]
	$7 = ($7 << [16])
	*([0] + [12360]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12360])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12360]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12358]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12358]) = [1]
	$3 = ($3 << [16])
	*([0] + [12360]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12360])
	
.LABEL $label$8
	*([0] + [12360]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12260])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12068]
	$1 = (((int_32)$2 * (int_32)[12]) + [12068])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $151([3876], $0)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $152($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12272])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $154 ()
{
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = (*([0] + [4]) - [128])
	$9 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($4 = (($9 + [32]) + [16]))) = (int_64)0
	*(($5 = (($9 + [32]) + [8]))) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $1
	*($9 + [80]) = $1
	*($9 + [88]) = ($1 + $3)
	*($9 + [56]) = ($9 + [80])
	*($9 + [108]) = $5
	*($9 + [112]) = ($9 + [44])
	*($9 + [116]) = $4
	*($9 + [104]) = ($9 + [32])
	CALL $49(($9 + [104]), ($9 + [56]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*(($1 = (($9 + [56]) + [16]))) = *($4)
	*(($3 = (($9 + [56]) + [8]))) = *($5)
	*($9 + [56]) = *($9 + [32])
	*((($9 + [80]) + [16])) = *($1)
	*((($9 + [80]) + [8])) = *($3)
	*($9 + [80]) = *($9 + [56])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	$6 = *((($9 + [80]) + [16]))
	*((($9 + [104]) + [16])) = $6
	$7 = *((($9 + [80]) + [8]))
	*((($9 + [104]) + [8])) = $7
	*((($9 + [8]) + [16])) = $6
	*((($9 + [8]) + [8])) = $7
	$6 = *($9 + [80])
	*($9 + [104]) = $6
	*($9 + [8]) = $6
	CALL void $1((int_32 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [128])
	return [1]
}

void .FUNC _ZN6finrex6finrex12updateperiodENS0_21request_update_periodE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$2 = *($1)
	$3 = CALL db_find_i64($4, $4, (int_64)-6147718988089524224, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $45(($7 + [8]), $3)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($7 + [8])), [160])
	CALL eosio_assert([1], [224])
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($7 + [8])), [352])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [400])
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	$4 = *($0)
	CALL eosio_assert([1], [464])
	CALL eosio_assert([1], [336])
	CALL memcpy(($7 + [64]), $0, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) | [8]), ($0 + [8]), [4])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) | [12]), ($0 + [12]), [4])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) + [16]), ($0 + [16]), [4])
	CALL db_update_i64(*($0 + [28]), (int_64)0, ($7 + [64]), [20])
	$0 = (($7 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$3 = *($7 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [272])
	*(($0 = CALL $138([40])) + [24]) = ($7 + [8])
	*($0) = $2
	*($0 + [8]) = *($1 + [8])
	*($0 + [12]) = *($1 + [12])
	*($0 + [16]) = *($1 + [16])
	CALL eosio_assert([1], [336])
	CALL memcpy(($7 + [64]), $0, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) | [8]), ($0 + [8]), [4])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) | [12]), ($0 + [12]), [4])
	CALL eosio_assert([1], [336])
	CALL memcpy((($7 + [64]) + [16]), ($0 + [16]), [4])
	$4 = *($0)
	$3 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-6147718988089524224, $5, $4, ($7 + [64]), [20])
	*($0 + [28]) = $3
	$1 = (($7 + [8]) + [16])
	if ( (uint_64)($4 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [56]) = $0
	$4 = *($0)
	*($7 + [64]) = $4
	*($7 + [52]) = $3
	$6 = ($7 + [36])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($1 + [8]) = $4
	*($1 + [16]) = $3
	*($7 + [56]) = [0]
	*($1) = $0
	*($6) = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $48(($7 + [32]), ($7 + [56]), ($7 + [64]), ($7 + [52]))
	
.LABEL $label$6
	$0 = *($7 + [56])
	*($7 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $139($0)
	
.LABEL $label$3
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $139($1)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $139($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $138($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $144($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $139($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [912])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [912])
	*($0 + [56 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [528])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $138([80])
	$4 = CALL $107($6)
	*($6 + [64]) = $0
	CALL $108(($8 + [32]), $4)
	*($6 + [72]) = [-1]
	*($6 + [68]) = $1
	*($6 + [76]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $109(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN6finrex6finrex12runrefundingEt (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	$25 = (*([0] + [4]) - [176])
	*([0] + [4]) = $25
	CALL prints([960])
	*((($25 + [72]) + [32])) = [0]
	*($25 + [88]) = (int_64)-1
	*($25 + [96]) = (int_64)0
	$22 = *($0)
	*($25 + [72]) = $22
	*($25 + [80]) = $22
	*($25 + [108]) = [0]
	*($25 + [64]) = ($25 + [72])
	$22 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($1 == 0) ){ goto $label$2 }
	$2 = (CASTING uint_32)(uint_64 $22)
	$7 = (($25 + [112]) + [32])
	$6 = (($25 + [112]) + [16])
	$5 = ($25 + [41])
	$4 = (($25 + [8]) + [32])
	$3 = (($25 + [8]) + [16])
	$14 = ($3 + [12])
	$16 = ($3 + [4])
	$18 = ($25 + [44])
	$19 = (($25 + [8]) + [40])
	$8 = [0]
	
.LOOP $label$3:
	CALL prints([992])
	*($25 + [120]) = (int_64)0
	*($25 + [112]) = (int_64)0
	CALL $59(($25 + [56]), ($25 + [64]), ($25 + [112]))
	$9 = *($25 + [60])
	if ( ($9 == 0) ){ goto $label$2 }
	if ( ((uint_32)*($9 + [44]) > (uint_32)$2) ){ goto $label$2 }
	$10 = *(($9 + [32]))
	$11 = *($0)
	$22 = (int_64)0
	$21 = (int_64)59
	$20 = [1040]
	$23 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$9 }
	$12 = *($20)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$12 = ($12 + [165])
	goto $label$7 
	
.LABEL $label$9
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$5
	$20 = ($20 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$4 }
	*(($13 = (($25 + [8]) + [8]))) = *($9 + [8])
	*($3) = *($9 + [16])
	*($14) = *(($9 + [28]))
	*(($15 = ($3 + [8]))) = *(($9 + [24]))
	*($16) = *(($9 + [20]))
	*($25 + [8]) = $11
	*($4) = (int_64)0
	*(($9 = ($4 + [8]))) = [0]
	$20 = CALL strlen([1056])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$12 }
	*($4) = ($20 << [1])
	$12 = $5
	if ( $20 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$17 = (($20 + [16]) & [-16])
	$12 = CALL $138($17)
	*($4) = ($17 | [1])
	*($19) = $12
	*($18) = $20
	
.LABEL $label$11
	CALL memcpy($12, [1056], $20)
	
.LABEL $label$10
	*(($12 + $20)) = [0]
	$20 = CALL $138([16])
	$12 = ($20 + [16])
	*((($25 + [160]) + [8])) = $12
	*($20) = $11
	*($20 + [8]) = $23
	*($25 + [160]) = $20
	*($25 + [164]) = $12
	*($25 + [112]) = *($25 + [8])
	*((($25 + [112]) + [8])) = *($13)
	*(($6 + [8])) = *($15)
	*($6) = *($3)
	*(($7 + [8])) = *($9)
	*($7) = *($4)
	*($4) = [0]
	*($18) = [0]
	*($19) = [0]
	CALL $60($10, (int_64)-3617168760277827584, ($25 + [160]), ($25 + [112]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*((($25 + [112]) + [40])))
	
.LABEL $label$13
	$20 = *($25 + [160])
	if ( ($20 == 0) ){ goto $label$14 }
	*($25 + [164]) = $20
	CALL $139($20)
	
.LABEL $label$14
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*($19))
	
.LABEL $label$15
	$22 = *($25 + [56])
	*($25 + [112]) = $22
	$20 = (CASTING uint_32)(uint_64 (uint_64)$22 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$20) != (int_32)[0]), [576])
	CALL $61(($25 + [112]))
	CALL $62(*($25 + [64]), $20)
	$8 = ($8 + [1])
	if ( ($8 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = *($25 + [96])
	if ( ($9 == 0) ){ goto $label$16 }
	$4 = ($25 + [100])
	$20 = *($4)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$20 = ($20 + [-24])
	$12 = *($20)
	*($20) = [0]
	if ( ($12 == 0) ){ goto $label$20 }
	CALL $139($12)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$19 }
	$20 = *(($25 + [96]))
	goto $label$17 
	
.LABEL $label$18
	$20 = $9
	
.LABEL $label$17
	*($4) = $9
	CALL $139($20)
	
.LABEL $label$16
	*([0] + [4]) = ($25 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $140($4)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[1]), [560])
	CALL memcpy(($5 + [8]), $3, [2])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [65535])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	$1 = CALL memset($6, [0], [88])
	CALL $57($1)
	*($1 + [100]) = $4
	*($1 + [96]) = $4
	*($1 + [104]) = ($4 + $3)
	*($1 + [88]) = ($1 + [96])
	$7 = ($1 + [16])
	*($1 + [188]) = $7
	*($1 + [192]) = ($1 + [24])
	*($1 + [196]) = ($1 + [32])
	*($1 + [200]) = ($1 + [40])
	*($1 + [204]) = ($1 + [56])
	$6 = ($1 + [72])
	*($1 + [208]) = $6
	*($1 + [184]) = $1
	CALL $58(($1 + [184]), ($1 + [88]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	CALL $145(($1 + [96]), $1)
	$3 = CALL memcpy((($1 + [96]) + [16]), $7, [56])
	$7 = (($1 + [96]) + [72])
	CALL $145($7, $6)
	$4 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($4) + $5))
	
.LABEL $label$5
	CALL $145(($1 + [184]), ($1 + [96]))
	CALL memcpy(($1 + [200]), $3, [56])
	CALL $145(($1 + [256]), $7)
	CALL void $4((int_32 ($1 + [184])), (int_32 $5))
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*(($1 + [264])))
	
.LABEL $label$6
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*($1 + [192]))
	
.LABEL $label$7
	if ( ((*(($1 + [168])) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*(($1 + [176])))
	
.LABEL $label$8
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$9 }
	CALL $139(*($1 + [104]))
	
.LABEL $label$9
	if ( ((*(($1 + [72])) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($1 + [80])))
	
.LABEL $label$10
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*($1 + [8]))
	
.LABEL $label$11
	*([0] + [4]) = ($1 + [272])
	return [1]
}

void .FUNC _ZN6finrex6finrex11logsetorderENS0_9log_orderE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($4 = $5) + [44]) = $0
	*($4 + [32]) = *($1)
	*($4 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($5 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($5 = ($4 + [8]))) = (int_64)0
	*(($2 = ($4 + [24]))) = (int_64)0
	*(($3 = ($4 + [16]))) = (int_64)0
	*($5) = [0]
	*($4) = (int_64)0
	*($4 + [52]) = $1
	*($4 + [48]) = $1
	*($4 + [56]) = ($1 + $0)
	CALL $53(($4 + [48]), $4)
	CALL eosio_assert(((uint_32)(*($4 + [56]) - *($4 + [52])) > (uint_32)[7]), [560])
	CALL memcpy($3, *($4 + [52]), [8])
	$5 = (*($4 + [52]) + [8])
	*($4 + [52]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [56]) - $5) > (uint_32)[7]), [560])
	CALL memcpy($2, *($4 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [52]) = ($4 + [32])
	*($4 + [48]) = ($4 + [44])
	CALL $56(($4 + [48]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $139(*(($4 + [8])))
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [64])
	return [1]
}

void .FUNC _ZN6finrex6finrex9logcancelENS0_16log_cancel_orderE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [224])
	*([0] + [4]) = $3
	*(($2 = $3) + [140]) = $0
	*($2 + [128]) = *($1)
	*($2 + [132]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	CALL memset(($2 + [8]), [0], [120])
	*(($2 + [52])) = [0]
	*(($2 + [76])) = [0]
	*(($2 + [80])) = [0]
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [44 align=4]) = (int_64)0
	*($2 + [72]) = [0]
	*($2 + [84]) = [0]
	*(($2 + [88])) = [0]
	*(($2 + [92])) = [0]
	*($2 + [112]) = [0]
	*(($2 + [116])) = [0]
	*(($2 + [120])) = [0]
	*($2 + [148]) = $1
	*($2 + [144]) = $1
	*($2 + [152]) = ($1 + $0)
	*($2 + [160]) = ($2 + [144])
	*($2 + [172]) = ($2 + [16])
	*($2 + [176]) = ($2 + [24])
	*($2 + [180]) = ($2 + [32])
	*($2 + [184]) = ($2 + [36])
	*($2 + [188]) = ($2 + [40])
	*($2 + [192]) = ($2 + [44])
	*($2 + [168]) = ($2 + [8])
	*($2 + [196]) = ($2 + [56])
	*($2 + [200]) = ($2 + [64])
	*($2 + [204]) = ($2 + [72])
	*($2 + [208]) = ($2 + [84])
	*($2 + [212]) = ($2 + [96])
	*($2 + [216]) = ($2 + [104])
	$3 = ($2 + [112])
	*($2 + [220]) = $3
	CALL $50(($2 + [168]), ($2 + [160]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [172]) = ($2 + [128])
	*($2 + [168]) = ($2 + [140])
	CALL $51(($2 + [168]), ($2 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL $139(*(($2 + [120])))
	
.LABEL $label$5
	if ( ((*(($2 + [84])) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*(($2 + [92])))
	
.LABEL $label$6
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*(($2 + [80])))
	
.LABEL $label$7
	if ( ((*(($2 + [44])) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*(($2 + [52])))
	
.LABEL $label$8
	*([0] + [4]) = ($2 + [224])
	return [1]
}

void .FUNC _ZN6finrex6finrex6rexlogENS0_8log_dataE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	CALL require_auth(*($0))
	if ( (*($1 + [36]) & [1]) ){ goto $label$2 }
	$0 = (($1 + [36]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$0 = *(($1 + [44]))
	
.LABEL $label$1
	$5 = [-1]
	
.LOOP $label$3:
	$4 = ($0 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$3 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$3) ){ goto $label$5 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [165])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$9 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$8
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$4 }
	CALL require_recipient($8)
	if ( (*($1 + [76]) & [1]) ){ goto $label$11 }
	$0 = (($1 + [76]) + [1])
	goto $label$10 
	
.LABEL $label$11
	$0 = *(($1 + [84]))
	
.LABEL $label$10
	$5 = [-1]
	
.LOOP $label$12:
	$4 = ($0 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$12 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$3) ){ goto $label$14 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$18 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$17 
	
.LABEL $label$18
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$17
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	CALL require_recipient($8)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6finrex6finrex22validate_server_statusEv (int_32 $0)
{
	CALL eosio_assert(((int_64)CALL $80(($0 + [8])) == (int_64)1), [1280])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [336])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [336])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [336])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [336])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $55($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [336])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [336])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $69(CALL $68($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $70(*($1), ($0 + [32]))
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [624])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx128_find_primary(*($7), *($7 + [8]), (int_64)-5001342331490664448, $9, *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9) = (int_64)0
	$1 = CALL db_idx128_next($7, $9)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9)
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [160])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $63($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-5001342331490664448, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [160])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $60 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $138($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $55($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $66(($9 + [72]), ($9 + [64]))
	CALL $67(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $139($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $139($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $139($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $139($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $144(($9 + [8]))
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [528])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $138([64])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [848])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [912])
	*($4 + [48]) = $0
	*($4 + [40 align=4]) = (int_64)0
	CALL $64(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($4 + [60]) = [-1]
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $65($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $139($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-5001342331490664448, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx128_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [60]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-5001342331490664447, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx128_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2736])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $70($0, ($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [108]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $103 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [912])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [912])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [912])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [912])
	*($0 + [96 align=4]) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*($0 + [112]) = [0]
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [528])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $138([128])
	$4 = CALL $103($6)
	*($6 + [116]) = $0
	CALL $104(($8 + [32]), $4)
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $105(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($4 + [104])))
	
.LABEL $label$10
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*(($1 + [104])))
	
.LABEL $label$11
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $139($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $53($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [108]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [400])
	$9 = *($2)
	*($1 + [56]) = *($9)
	*(($1 + [68])) = *(($9 + [12]))
	*(($1 + [64])) = *(($9 + [8]))
	*(($1 + [60])) = *(($9 + [4]))
	$3 = *($1)
	$7 = *(*($2 + [4]) + [24])
	$4 = *($2)
	$7 = *($4)
	$9 = $8
	CALL __multi3($9, $7, (int_64)$7 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$6 = *($4 + [8])
	$7 = *(($9 + [8]))
	$5 = *($9)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [1808])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [1840])
	CALL eosio_assert([1], [1872])
	CALL eosio_assert([1], [1888])
	$7 = *((*($2 + [4]) + [88]))
	*(($1 + [80])) = $6
	*($1 + [72]) = ((int_64)$5 / (int_64)10000)
	*(($1 + [88])) = $7
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [464])
	$2 = *($1 + [96])
	$4 = ( *(($1 + [100])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($4 + [104])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [20]) = $8
	*($9 + [16]) = $8
	*($9 + [24]) = ($8 + $2)
	CALL $100(($9 + [16]), $1)
	CALL db_update_i64(*($1 + [120]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$7 = *(($1 + [72]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx128_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [76]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180415, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx128_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*(($4 + [104])))
	
.LABEL $label$7
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($4 + [104])))
	
.LABEL $label$10
	CALL $139($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [120]))
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([2704])
	CALL prints_l($2, $3)
	CALL prints([2720])
	CALL $101($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $83 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5003134530400288768, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $102($0, $5)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $82 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6497942333781180416, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $106($0, $5)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $81 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6147718988089524224, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $45($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_64 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [160])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$1 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4418113302685548544, (int_64)-4418113302685548544)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $40($0, $1)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$0), [160])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2752])
	return *($2)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $138($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $144 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC round (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$3 = ( !(float_64)$0 ? $0 : ((int_64)$1 < (int_64)0) )
	if ( ((uint_32)$2 > (uint_32)[1021]) ){ goto $label$2 }
	*($4 + [8]) = ((float_64)$3 + (float_64)(float_64)4503599627370496)
	return ((float_64)$0 * (float_64)(float_64)0)
	
.LABEL $label$2
	$2 = ((float_64)$0 != (float_64)$0)
	$0 = (float_64)
	if ( (((float_64)$0(((float_64)((float_64)$3 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) - $3)) <= (float_64)(float_64)0.5) | $2) ){ goto $label$4 }
	$3 = ((float_64)((float_64)$3 + (float_64)$0) + (float_64)(float_64)-1)
	goto $label$3 
	
.LABEL $label$4
	$3 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$0 > (float_64)(float_64)-0.5) | $2) ){ goto $label$3 }
	$3 = ((float_64)$3 + (float_64)(float_64)1)
	
.LABEL $label$3
	$0 = ( !(float_64)$3 ? $3 : ((int_64)$1 < (int_64)0) )
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $138($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $142($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $140 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $138(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $139($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $138($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $139($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [336])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)-4996858902428516352, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [160])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-4996858902428516352, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $76($4, $8)
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [160])
	
.LABEL $label$4
	*($2 + [108]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [528])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $138([120])
	$4 = CALL $77($6)
	*($6 + [100]) = $0
	CALL $78(($8 + [32]), $4)
	*($6 + [108]) = [-1]
	*($6 + [104]) = $1
	*($6 + [112]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [104])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $79(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $77 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [40]) = (int_64)0
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [912])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [848])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [912])
	*($0 + [96]) = [0]
	*($0 + [80]) = [0]
	return $0
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [624])
	$8 = *($0 + [4])
	$6 = *($8 + [108])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)-4996858902428516352, $9, *($8))
	*(*(($0 + [4])) + [108]) = $6
	
.LABEL $label$1
	*($9) = (int_64)0
	$1 = CALL db_idx128_next($6, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9)
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$2), [160])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $76($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-4996858902428516352, $3))
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$2), [160])
	
.LABEL $label$5
	*($7 + [108]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [528])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $138([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [560])
	CALL memcpy($5, $6, [8])
	*($5 + [12]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [12])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [400])
	*($1) = *(*($3))
	CALL eosio_assert([1], [464])
	CALL eosio_assert([1], [336])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [560])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [560])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [560])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $144($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6finrex6finrex12updateserverEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	*($3 + [8]) = (int_64)0
	$1 = ($0 + [8])
	$2 = *(($0 + [36]))
	if ( ((int_32)$2 == (int_32)*(($0 + [32]))) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$1), [160])
	if ( $2 ){ goto $label$1 }
	$2 = ($3 + [8])
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($1), *(($0 + [16])), (int_64)-4418113302685548544, (int_64)-4418113302685548544)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $40($1, $2)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$1), [160])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 + [8])
	
.LABEL $label$1
	if ( ((int_64)*($2) == (int_64)0) ){ goto $label$5 }
	*($3 + [8]) = (int_64)0
	CALL $41($1, ($3 + [8]), *($0))
	goto $label$4 
	
.LABEL $label$5
	*($3 + [8]) = (int_64)1
	CALL $41($1, ($3 + [8]), *($0))
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN6finrex6finrex12deleteperiodEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-6147718988089524224, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $45($6, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$6), [160])
	CALL eosio_assert([1], [576])
	CALL eosio_assert([1], [624])
	$3 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $45($6, $3)
	
.LABEL $label$2
	CALL $46($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $139($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $139($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [560])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	$2 = CALL memcpy($2, $1, [48])
	$3 = ($2 + [48])
	CALL $145($3, ($1 + [48]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$1 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL memcpy(($2 + [64]), $2, [48])
	CALL $145((($2 + [64]) + [48]), $3)
	CALL void $1((int_32 ($2 + [64])), (int_32 $0))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($2 + [120])))
	
.LABEL $label$2
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($2 + [56])))
	
.LABEL $label$3
	*([0] + [4]) = ($2 + [128])
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	*($0 + [16]) = (int_64)0
	*(($3 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [912])
	*(($3 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [848])
	$2 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [912])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	$4 = ($0 + [48])
	$3 = CALL strlen([944])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($4) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = (($3 + [16]) & [-16])
	$4 = CALL $138($1)
	*(($0 + [48])) = ($1 | [1])
	*(($0 + [56])) = $4
	*(($0 + [52])) = $3
	
.LABEL $label$13
	CALL memcpy($4, [944], $3)
	
.LABEL $label$12
	*(($4 + $3)) = [0]
	return $0
	
.LABEL $label$11
	CALL $140($4)
	return (unreachable)
}