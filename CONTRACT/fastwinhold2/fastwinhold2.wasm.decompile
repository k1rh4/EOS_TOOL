(data (i32.const 4) "\10m\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "fastecoadmin\00")
(data (i32.const 48) "transfer\00")
(data (i32.const 64) "fastshieldio\00")
(data (i32.const 80) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 144) "invalid symbol name\00")
(data (i32.const 176) "read\00")
(data (i32.const 192) "get\00")
(data (i32.const 208) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 272) "no config found.\00")
(data (i32.const 304) "burn\00")
(data (i32.const 320) "can\'t burn during the dividend.\00")
(data (i32.const 352) "only FAST can get burnt right now.\00")
(data (i32.const 400) "burn staked\00")
(data (i32.const 416) "you don\'t have much staked token to burn.\00")
(data (i32.const 464) "cannot pass end iterator to modify\00")
(data (i32.const 512) "you don\'t have enough FAST to burn, please check your FAST stake status. (www.fastwin.io)\00")
(data (i32.const 608) "unable to find key\00")
(data (i32.const 640) "error reading iterator\00")
(data (i32.const 672) "object passed to modify is not in multi_index\00")
(data (i32.const 720) "cannot modify objects in table of another contract\00")
(data (i32.const 784) "updater cannot change primary key when modifying an object\00")
(data (i32.const 848) "write\00")
(data (i32.const 864) "active\00")
(data (i32.const 880) "distribute\00")
(data (i32.const 896) "no account record.\00")
(data (i32.const 928) "you should wait 24 hours after your unstake before you can release your token.\00")
(data (i32.const 1008) "can\'t withdraw during the dividend.\00")
(data (i32.const 1056) "FASTWIN DIVIDEND!!\00")
(data (i32.const 1088) "\nafter inline action send.\00")
(data (i32.const 1120) "\nafter modify table.\00")
(data (i32.const 1152) "you haven\'t staked any FAST before you can withdraw your dividend.\00")
(data (i32.const 1232) "you don\'t have any more remain dividend could withdraw.\00")
(data (i32.const 1296) "before inline action send.\00")
(data (i32.const 1328) "you are not allowed to transfer CURSE\00")
(data (i32.const 1376) "shouldn\'t transfer to self\00")
(data (i32.const 1408) "only accept recipient to self\00")
(data (i32.const 1440) "fastbigbosss\00")
(data (i32.const 1456) "fastwinsales\00")
(data (i32.const 1472) "fastwintoken\00")
(data (i32.const 1488) "fastwintest1\00")
(data (i32.const 1504) "fastwinpool1\00")
(data (i32.const 1520) "fastwinpool2\00")
(data (i32.const 1536) "fastwindivid\00")
(data (i32.const 1552) "fastwincosts\00")
(data (i32.const 1568) "fastwinpool3\00")
(data (i32.const 1584) "fastwinpool4\00")
(data (i32.const 1600) "fastwinpool5\00")
(data (i32.const 1616) "fastwinrepay\00")
(data (i32.const 1632) "fastwindice1\00")
(data (i32.const 1648) "sadness12345\00")
(data (i32.const 1664) "fastwintest2\00")
(data (i32.const 1680) "fastwinsafe1\00")
(data (i32.const 1696) "fastwincpuem\00")
(data (i32.const 1712) "fastwindice3\00")
(data (i32.const 1728) "fastwincrash\00")
(data (i32.const 1744) "fastwinairdp\00")
(data (i32.const 1760) "fastecoairdp\00")
(data (i32.const 1776) "fastwinteam1\00")
(data (i32.const 1792) "fastwincards\00")
(data (i32.const 1808) "fastwinboss1\00")
(data (i32.const 1824) "fastwinfans1\00")
(data (i32.const 1840) "dexeoswallet\00")
(data (i32.const 1856) "Can not transfer to this account.\00")
(data (i32.const 1904) "btexexchange\00")
(data (i32.const 1920) "findexfindex\00")
(data (i32.const 1936) "transfer FAST has been locked down by the team.\00")
(data (i32.const 1984) "fast balance: \00")
(data (i32.const 2000) "\tfrozen balance: \00")
(data (i32.const 2032) "you don\'t have enough FAST to transfer, please check your FAST stake status. (www.fastwin.io)\00")
(data (i32.const 2128) "cannot create objects in table of another contract\00")
(data (i32.const 2192) "distribute only available when locked.\00")
(data (i32.const 2240) "should be less than the maximum distributing amount.\00")
(data (i32.const 2304) "\nremain_amount: \00")
(data (i32.const 2336) "\nwithdrawn_amount \00")
(data (i32.const 2368) "\ntotal_amount: \00")
(data (i32.const 2384) "check amount status before writting to the table.\00")
(data (i32.const 2448) "\ndistributing: \00")
(data (i32.const 2464) " adding \00")
(data (i32.const 2480) "can\'t unstake during the dividend.\00")
(data (i32.const 2528) "you should have positive balance of FAST\00")
(data (i32.const 2576) "you haven\'t stake any FAST\00")
(data (i32.const 2608) "accept only fastwinadmin produced FAST to stake.\00")
(data (i32.const 2672) "you don\'t have enough staked amount to unstake.\00")
(data (i32.const 2720) "you have to operate on FAST.\00")
(data (i32.const 2752) "can\'t stake during the dividend.\00")
(data (i32.const 2800) "you don\'t have enough free amount.\00")
(data (i32.const 2848) "aceept only FAST to stake.\00")
(data (i32.const 2880) "you don\'t have enough FAST to stake.\00")
(data (i32.const 2928) "you should lock first.\00")
(data (i32.const 2960) "there is someone not distributed.\00")
(data (i32.const 3008) "contract already locked.\00")
(data (i32.const 11440) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$7 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$8 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$9 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "has_auth" (func $fimport$13 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$15 (param i64)))
(import "env" "prints" (func $fimport$16 (param i32)))
(import "env" "printui" (func $fimport$17 (param i64)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$19 (param i64)))
(import "env" "require_auth2" (func $fimport$20 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$21 (param i64)))
(import "env" "send_inline" (func $fimport$22 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $67))
(export "free" (func $70))
(export "memcmp" (func $78))
(export "strlen" (func $79))
(table $0 12 12 anyfunc)
(elem (i32.const 0) $80 $20 $11 $13 $19 $16 $6 $9 $14 $12 $8 $18)



int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	if ( (CALL has_auth($1) == 0) ){ goto $label$2 }
	$6 = (int_64)0
	$5 = (int_64)59
	$9 = [864]
	$7 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$8 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$8
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$3 }
	CALL require_auth2($1, $7)
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$9 = [880]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$14 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$9 = ($9 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	CALL require_auth2($2, $7)
	
.LABEL $label$1
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$6 = *($0)
	*($10 + [8]) = $6
	*($10 + [16]) = $6
	*($10 + [44]) = [0]
	$9 = [0]
	$3 = CALL db_find_i64($6, $6, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	$9 = CALL $27(($10 + [8]), $3)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)($10 + [8])), [208])
	
.LABEL $label$15
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [896])
	CALL eosio_assert((uint_64)(((int_64)*($9 + [56]) + (int_64)86400000000) <= CALL $fimport$3()), [928])
	$6 = *($0)
	CALL eosio_assert($3, [464])
	CALL $42(($10 + [8]), $9, $6, $10)
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$16 }
	$4 = ($10 + [36])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = ($9 + [-24])
	$3 = *($9)
	*($9) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	CALL $72($3)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$19 }
	$9 = *(($10 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$9 = $0
	
.LABEL $label$17
	*($4) = $0
	CALL $72($9)
	
.LABEL $label$16
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [2128])
	*(($4 = CALL $71([80])) + [64]) = $1
	*($4) = *(*($3))
	*($4 + [40]) = *(*($3 + [4]))
	*($4 + [8]) = *(*(*($3 + [8]) + [4]) + [8])
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($9 + [80]) = ($9 + [64])
	*($9 + [76]) = $9
	*($9 + [72]) = $9
	CALL $36(($9 + [72]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)-5003134530400288768, $2, $5, $9, [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$7 = *($4)
	*($9 + [88]) = *(($4 + [8]))
	*($4 + [72]) = CALL db_idx64_store($5, (int_64)-5003134530400288768, $2, $7, ($9 + [88]))
	*($9 + [72]) = $4
	$2 = *($4)
	*($9) = $2
	$6 = *($4 + [68])
	*($9 + [88]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($9 + [72]) = [0]
	*($3) = $4
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $38(($1 + [24]), ($9 + [72]), $9, ($9 + [88]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [72])
	*($9 + [72]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $72($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [56]) = $1
	CALL require_auth(*($0))
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $1
	$3 = [0]
	$2 = CALL db_find_i64($1, $1, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $26(($5 + [16]), $2)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)($5 + [16])), [208])
	
.LABEL $label$1
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [272])
	$1 = *($0)
	*($5 + [8]) = ($5 + [56])
	CALL eosio_assert($2, [464])
	CALL $41(($5 + [16]), $3, $1, ($5 + [8]))
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $72($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $72($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $71($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1) = [1]
	$4 = *($1 + [40])
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = $4
	CALL eosio_assert([1], [784])
	*($5 + [88]) = ($5 + [72])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [4])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [8])
	*($5 + [116]) = ($1 + [16])
	*($5 + [120]) = ($1 + [24])
	*($5 + [124]) = ($1 + [32])
	*($5 + [128]) = ($1 + [40])
	*($5 + [132]) = ($1 + [48])
	*($5 + [136]) = ($1 + [56])
	*($5 + [140]) = ($1 + [64])
	CALL $35(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $5, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [24]) = (int_64)0
	*($1) = [0]
	*($1 + [48]) = (int_64)0
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [176])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [176])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $73 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $68([3036], $0)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [64]) = (int_64))(*($1 + [64]) - *(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	*($5 + [88]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [784])
	*($5 + [80]) = ($5 + [64])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $36(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [144])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	$1 = ($0 + $2)
	*($5 + [72]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [176])
	CALL memcpy(($5 + [8]), $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [176])
	CALL memcpy((($5 + [8]) + [8]), $4, [8])
	$4 = ($0 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [176])
	CALL memcpy((($5 + [8]) + [16]), $4, [8])
	*($5 + [68]) = ($0 + [24])
	CALL $22(($5 + [64]), (($5 + [8]) + [24]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $23(($5 + [64]), ($5 + [8]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $72(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	*(($14 + [88])) = [0]
	*($14 + [72]) = (int_64)-1
	$10 = (int_64)0
	*($14 + [80]) = (int_64)0
	$9 = *($0)
	*($14 + [56]) = $9
	*($14 + [64]) = $9
	$7 = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $26(($14 + [56]), $8)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($14 + [56])), [208])
	
.LABEL $label$1
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [272])
	$9 = (int_64)59
	$8 = [32]
	$11 = (int_64)0
	
.LOOP $label$2:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$3 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$2 }
	if ( (CALL has_auth($11) == 0) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [32]
	$11 = (int_64)0
	
.LOOP $label$8:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [304]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)3) ){ goto $label$17 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$17
	$9 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$12 }
	CALL require_auth2($11, $13)
	goto $label$6 
	
.LABEL $label$7
	CALL require_auth($1)
	CALL eosio_assert((*($7) == 0), [320])
	
.LABEL $label$6
	$13 = *($0 + [8])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [32]
	$11 = (int_64)0
	
.LOOP $label$18:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$19 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	CALL eosio_assert(((int_64)$13 == (int_64)$11), [352])
	if ( ((int_64)*($2 + [8]) != (int_64)362174039556) ){ goto $label$22 }
	*(($14 + [48])) = [0]
	*($14 + [32]) = (int_64)-1
	*($14 + [40]) = (int_64)0
	$10 = *($0)
	*($14 + [16]) = $10
	*($14 + [24]) = $10
	*($14 + [52]) = [0]
	$8 = CALL db_find_i64($10, $10, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$25 }
	$8 = CALL $27(($14 + [16]), $8)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)($14 + [16])), [208])
	$5 = *($3)
	$6 = CALL strlen([400])
	if ( ((int_32)$6 != (int_32)( *($3 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$26 }
	if ( (CALL $75($3, [0], [-1], [400], $6) == 0) ){ goto $label$24 }
	
.LABEL $label$26
	$10 = CALL $30($0, $1)
	CALL eosio_assert(((uint_64)((int_64)*($8 + [48]) + (int_64)*($8 + [40])) <= (uint_64)$10), [512])
	
.LABEL $label$25
	$0 = *($14 + [40])
	if ( ($0 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert(((uint_64)*($8 + [40]) >= (uint_64)*($2)), [416])
	$10 = *($0)
	*($14 + [8]) = $2
	CALL eosio_assert([1], [464])
	CALL $28(($14 + [16]), $8, $10, ($14 + [8]))
	$10 = *($0)
	*($14 + [8]) = $2
	CALL eosio_assert($4, [464])
	CALL $29(($14 + [56]), $7, $10, ($14 + [8]))
	$0 = *($14 + [40])
	if ( ($0 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$7 = ($14 + [44])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$30 }
	CALL $72($5)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$29 }
	$8 = *(($14 + [40]))
	goto $label$27 
	
.LABEL $label$28
	$8 = $0
	
.LABEL $label$27
	*($7) = $0
	CALL $72($8)
	
.LABEL $label$22
	$0 = *($14 + [80])
	if ( ($0 == 0) ){ goto $label$31 }
	$7 = ($14 + [84])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$35 }
	CALL $72($5)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$34 }
	$8 = *(($14 + [80]))
	goto $label$32 
	
.LABEL $label$33
	$8 = $0
	
.LABEL $label$32
	*($7) = $0
	CALL $72($8)
	
.LABEL $label$31
	*([0] + [4]) = ($14 + [96])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*((($4 + [32]) + [12])) = *(($1 + [20]))
	*(($3 = (($4 + [32]) + [8]))) = *(($1 + [16]))
	*($4 + [32]) = *($1 + [8])
	*($4 + [36]) = *(($1 + [12]))
	$2 = *($1)
	CALL $77(($4 + [16]), ($1 + [24]))
	*((($4 + [48]) + [8])) = *($3)
	*($4 + [48]) = *($4 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [8]))) = *((($4 + [48]) + [8]))
	*($4 + [80]) = *($4 + [48])
	CALL $77(($4 + [64]), ($4 + [16]))
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [80])
	CALL void $0((int_32 $2), (int_64 $4), (int_32 ($4 + [64])), (int_32 $1))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $72(*($4 + [72]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $72(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [96])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $24($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $74($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $71($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $74($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $72($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $73($7)
	return (unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $71($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $76($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $72($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [192])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $25($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [176])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $71([80])) + [64]) = $0
	CALL $37(($8 + [32]), $6)
	*($6 + [72]) = [-1]
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [640])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $71([88])) + [72]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [4])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [8])
	*($7 + [52]) = ($5 + [16])
	*($7 + [56]) = ($5 + [24])
	*($7 + [60]) = ($5 + [32])
	*($7 + [64]) = ($5 + [40])
	*($7 + [68]) = ($5 + [48])
	*($7 + [72]) = ($5 + [56])
	*($7 + [76]) = ($5 + [64])
	CALL $39(($7 + [40]), ($7 + [32]))
	*($5 + [76]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)1
	$6 = *($5 + [76])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [80])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $71(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $72($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [848])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [848])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [848])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [848])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11526]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11528])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11526]) = [1]
	$7 = ($7 << [16])
	*([0] + [11528]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11528])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11528]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11526]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11526]) = [1]
	$3 = ($3 << [16])
	*([0] + [11528]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11528])
	
.LABEL $label$8
	*([0] + [11528]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $69($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11440])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $80 ()
{
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	*($6 + [44]) = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $27(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)($6 + [8])), [208])
	if ( ((uint_64)((int_64)*($3 + [56]) + (int_64)86400000000) >= (uint_64)CALL current_time()) ){ goto $label$1 }
	$4 = *($0)
	CALL eosio_assert([1], [464])
	CALL $50(($6 + [8]), $3, $4, $6)
	
.LABEL $label$1
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $72($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $72($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($6 + [88]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [784])
	*($6 + [80]) = ($6 + [64])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $36(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [88]), ($6 + [104]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [72])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($6 + [96]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [4]) = *(*($3))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [848])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [848])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [848])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*(*($3) + [4]) + [24]))
	*($5 + [88]) = *($1 + [8])
	$4 = *($1)
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [784])
	*($5 + [80]) = ($5 + [64])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $36(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [848])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [848])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $48(CALL $47($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), ($0 + [40]))
}

void .FUNC $72 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $22(*($1), ($0 + [32]))
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11420])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11228]
	$1 = (((int_32)$2 * (int_32)[12]) + [11228])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	*($5 + [88]) = *($1 + [8])
	$4 = *($1)
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	*($1 + [56]) = CALL current_time()
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [784])
	*($5 + [80]) = ($5 + [64])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $36(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11532])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $7)
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$6 = *($0)
	*($9 + [8]) = $6
	*($9 + [16]) = $6
	$4 = [0]
	$2 = CALL db_find_i64($6, $6, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $26(($9 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($9 + [8])), [208])
	
.LABEL $label$7
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [272])
	CALL eosio_assert(((int_32)*($4) == (int_32)[1]), [2928])
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)*($4 + [16])), [2960])
	$6 = *($0)
	CALL eosio_assert($2, [464])
	CALL $65(($9 + [8]), $4, $6, $9)
	$0 = *($9 + [32])
	if ( ($0 == 0) ){ goto $label$8 }
	$3 = ($9 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $72($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($9 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $0
	
.LABEL $label$9
	*($3) = $0
	CALL $72($4)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	*($11 + [120]) = $1
	CALL require_auth($1)
	$6 = [0]
	*(($11 + [112])) = [0]
	*($11 + [96]) = (int_64)-1
	*($11 + [104]) = (int_64)0
	$8 = *($0)
	*($11 + [80]) = $8
	*($11 + [88]) = $8
	$5 = CALL db_find_i64($8, $8, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $26(($11 + [80]), $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)($11 + [80])), [208])
	*($11 + [76]) = $6
	*($11 + [72]) = ($11 + [80])
	$5 = [1]
	$1 = *($11 + [120])
	goto $label$1 
	
.LABEL $label$2
	*($11 + [76]) = [0]
	*($11 + [72]) = ($11 + [80])
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	CALL eosio_assert((*($6) == 0), [2752])
	$8 = (int_64)0
	$3 = CALL $30($0, $1)
	CALL eosio_assert(((int_64)$3 != (int_64)0), [2528])
	$4 = *($2 + [16])
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$3:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$4 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$4 == (int_64)$9), [2608])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)362174039556), [2848])
	CALL eosio_assert(((uint_64)*($2) <= (uint_64)$3), [2880])
	CALL $43($0, $1)
	*(($11 + [64])) = [0]
	*($11 + [48]) = (int_64)-1
	*($11 + [56]) = (int_64)0
	$8 = *($0)
	*($11 + [32]) = $8
	*($11 + [40]) = $8
	*($11 + [68]) = [0]
	$6 = CALL db_find_i64($8, $8, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $27(($11 + [32]), $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($11 + [32])), [208])
	CALL eosio_assert(((uint_64)(int_64))((int_64))($3 - *($6 + [40])) - *($6 + [48])) >= (uint_64)*($2)), [2800])
	$8 = *($0)
	*($11 + [12]) = $2
	*($11 + [8]) = $0
	*($11 + [16]) = ($11 + [80])
	*($11 + [20]) = ($11 + [72])
	CALL eosio_assert([1], [464])
	CALL $61(($11 + [32]), $6, $8, ($11 + [8]))
	$0 = *($11 + [56])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = *($0)
	*($11 + [12]) = $2
	*($11 + [8]) = ($11 + [120])
	*($11 + [16]) = ($11 + [72])
	CALL $62(($11 + [24]), ($11 + [32]), $8, ($11 + [8]))
	$8 = *($0)
	$6 = *($11 + [76])
	*($11 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL $63(($11 + [80]), $6, $8, ($11 + [8]))
	$0 = *($11 + [56])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = ($11 + [60])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	CALL $72($5)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($11 + [56]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $0
	
.LABEL $label$10
	*($2) = $0
	CALL $72($6)
	
.LABEL $label$7
	$0 = *($11 + [104])
	if ( ($0 == 0) ){ goto $label$14 }
	$2 = ($11 + [108])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL $72($5)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($11 + [104]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $0
	
.LABEL $label$15
	*($2) = $0
	CALL $72($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [128])
}

void .FUNC $6 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [880]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $7)
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$6 = *($0)
	*($9 + [8]) = $6
	*($9 + [16]) = $6
	$4 = [0]
	$2 = CALL db_find_i64($6, $6, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $26(($9 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($9 + [8])), [208])
	
.LABEL $label$7
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [272])
	CALL eosio_assert((*($4) == 0), [3008])
	$6 = *($0)
	CALL eosio_assert($2, [464])
	CALL $66(($9 + [8]), $4, $6, $9)
	$0 = *($9 + [32])
	if ( ($0 == 0) ){ goto $label$8 }
	$3 = ($9 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $72($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($9 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $0
	
.LABEL $label$9
	*($3) = $0
	CALL $72($4)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$11 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$13
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$12 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$11 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$18:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$19
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$10 }
	
.LABEL $label$11
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$28 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$28 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$35:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$36 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$28
	*($9 + [184]) = $1
	*($9 + [176]) = $0
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$41 }
	if ( ((int_64)$2 > (int_64)5454311842506244095) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4222381386624925696) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4516881727834030080) ){ goto $label$1 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [80 align=4]) = *($9 + [88])
	CALL $21(($9 + [176]), ($9 + [80]))
	goto $label$1 
	
.LABEL $label$41
	if ( ((int_64)$2 <= (int_64)-4157661019037266673) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)-4157661019037266672) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3102536759469805056) ){ goto $label$1 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [2]
	*($9 + [24 align=4]) = *($9 + [144])
	CALL $10(($9 + [176]), ($9 + [24]))
	goto $label$1 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)5454311842506244096) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)6111947644295184384) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($9 + [132]) = [0]
	*($9 + [128]) = [3]
	*($9 + [40 align=4]) = *($9 + [128])
	CALL $7(($9 + [176]), ($9 + [40]))
	goto $label$1 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)-4998252997916748496) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4417015721773847040) ){ goto $label$1 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [72 align=4]) = *($9 + [96])
	CALL $17(($9 + [176]), ($9 + [72]))
	goto $label$1 
	
.LABEL $label$10
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$42:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$43 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$42 }
	CALL require_recipient($7)
	goto $label$1 
	
.LABEL $label$9
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$46:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$47 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$3 = ($3 + [165])
	goto $label$48 
	
.LABEL $label$49
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$47
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$46 }
	CALL require_recipient($7)
	goto $label$1 
	
.LABEL $label$8
	*($9 + [116]) = [0]
	*($9 + [112]) = [5]
	*($9 + [56 align=4]) = *($9 + [112])
	CALL $17(($9 + [176]), ($9 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($9 + [172]) = [0]
	*($9 + [168]) = [6]
	*($9) = *($9 + [168])
	CALL $7(($9 + [176]), $9)
	goto $label$1 
	
.LABEL $label$6
	*($9 + [156]) = [0]
	*($9 + [152]) = [7]
	*($9 + [16 align=4]) = *($9 + [152])
	CALL $10(($9 + [176]), ($9 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($9 + [124]) = [0]
	*($9 + [120]) = [8]
	*($9 + [48 align=4]) = *($9 + [120])
	CALL $15(($9 + [176]), ($9 + [48]))
	goto $label$1 
	
.LABEL $label$4
	*($9 + [140]) = [0]
	*($9 + [136]) = [9]
	*($9 + [32 align=4]) = *($9 + [136])
	CALL $7(($9 + [176]), ($9 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($9 + [164]) = [0]
	*($9 + [160]) = [10]
	*($9 + [8 align=4]) = *($9 + [160])
	CALL $7(($9 + [176]), ($9 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($9 + [108]) = [0]
	*($9 + [104]) = [11]
	*($9 + [64 align=4]) = *($9 + [104])
	CALL $17(($9 + [176]), ($9 + [64]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [192])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$8 = *($0 + [8])
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [32]
	$7 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$5 }
	if ( ((int_64)*($3 + [8]) != (int_64)76224165921536) ){ goto $label$5 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [32]
	$7 = (int_64)0
	
.LOOP $label$6:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$7 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [1328])
	$8 = *(($0 + [8]))
	
.LABEL $label$5
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [16]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$15 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$5 = ($5 + [165])
	goto $label$13 
	
.LABEL $label$15
	$11 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$7 = ((int_64)$11 | (int_64)$7)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$10 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$17 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$17 }
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [16]
	$7 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$23 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [165])
	goto $label$21 
	
.LABEL $label$23
	$11 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$7 = ((int_64)$11 | (int_64)$7)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$18 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$29 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$29 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$28 }
	
.LABEL $label$29
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [16]
	$7 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$35 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$5 = ($5 + [165])
	goto $label$33 
	
.LABEL $label$35
	$11 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$7 = ((int_64)$11 | (int_64)$7)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$30 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$36 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$36 }
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [1376])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [1408])
	*(($12 + [72])) = [0]
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$10 = *($0)
	*($12 + [40]) = $10
	*($12 + [48]) = $10
	$6 = CALL db_find_i64($10, $10, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$27 }
	$6 = CALL $26(($12 + [40]), $6)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)($12 + [40])), [208])
	$10 = *($0)
	*($12) = $3
	CALL eosio_assert([1], [464])
	CALL $53(($12 + [40]), $6, $10, $12)
	$3 = *($12 + [64])
	if ( $3 ){ goto $label$26 }
	goto $label$16 
	
.LABEL $label$36
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [32]
	$7 = (int_64)0
	
.LOOP $label$37:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$38 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$5 = ($5 + [165])
	goto $label$39 
	
.LABEL $label$40
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$38
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$37 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$41 }
	if ( ((int_64)*($3 + [8]) != (int_64)362174039556) ){ goto $label$41 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1440]
	$7 = (int_64)0
	
.LOOP $label$42:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$43 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$5 = ($5 + [165])
	goto $label$44 
	
.LABEL $label$45
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$43
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$42 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [32]
	$7 = (int_64)0
	
.LOOP $label$46:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$47 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$5 = ($5 + [165])
	goto $label$48 
	
.LABEL $label$49
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$47
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$46 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1456]
	$7 = (int_64)0
	
.LOOP $label$50:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$51 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$5 = ($5 + [165])
	goto $label$52 
	
.LABEL $label$53
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$51
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$50 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1472]
	$7 = (int_64)0
	
.LOOP $label$54:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$55 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$5 = ($5 + [165])
	goto $label$56 
	
.LABEL $label$57
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$55
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$54 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1488]
	$7 = (int_64)0
	
.LOOP $label$58:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$59 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$5 = ($5 + [165])
	goto $label$60 
	
.LABEL $label$61
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$59
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$58 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1504]
	$7 = (int_64)0
	
.LOOP $label$62:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$63 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$5 = ($5 + [165])
	goto $label$64 
	
.LABEL $label$65
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$63
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$62 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1520]
	$7 = (int_64)0
	
.LOOP $label$66:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$67 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$5 = ($5 + [165])
	goto $label$68 
	
.LABEL $label$69
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$67
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$66 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1536]
	$7 = (int_64)0
	
.LOOP $label$70:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$71 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$5 = ($5 + [165])
	goto $label$72 
	
.LABEL $label$73
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$71
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$70 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1552]
	$7 = (int_64)0
	
.LOOP $label$74:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$75 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$5 = ($5 + [165])
	goto $label$76 
	
.LABEL $label$77
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$75
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$74 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1568]
	$7 = (int_64)0
	
.LOOP $label$78:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$79 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$5 = ($5 + [165])
	goto $label$80 
	
.LABEL $label$81
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$79
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$78 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1584]
	$7 = (int_64)0
	
.LOOP $label$82:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$83 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$5 = ($5 + [165])
	goto $label$84 
	
.LABEL $label$85
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$83
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$82 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1600]
	$7 = (int_64)0
	
.LOOP $label$86:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$87 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$5 = ($5 + [165])
	goto $label$88 
	
.LABEL $label$89
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$87
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$86 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1616]
	$7 = (int_64)0
	
.LOOP $label$90:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$91 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$5 = ($5 + [165])
	goto $label$92 
	
.LABEL $label$93
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$91
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$90 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1632]
	$7 = (int_64)0
	
.LOOP $label$94:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$95 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$5 = ($5 + [165])
	goto $label$96 
	
.LABEL $label$97
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$95
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$94 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1648]
	$7 = (int_64)0
	
.LOOP $label$98:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$99 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$5 = ($5 + [165])
	goto $label$100 
	
.LABEL $label$101
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$99
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$98 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1664]
	$7 = (int_64)0
	
.LOOP $label$102:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$103 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$5 = ($5 + [165])
	goto $label$104 
	
.LABEL $label$105
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$103
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$102 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1680]
	$7 = (int_64)0
	
.LOOP $label$106:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$107 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$5 = ($5 + [165])
	goto $label$108 
	
.LABEL $label$109
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$107
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$106 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1696]
	$7 = (int_64)0
	
.LOOP $label$110:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$111 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$5 = ($5 + [165])
	goto $label$112 
	
.LABEL $label$113
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$111
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$110 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1712]
	$7 = (int_64)0
	
.LOOP $label$114:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$115 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$5 = ($5 + [165])
	goto $label$116 
	
.LABEL $label$117
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$115
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$114 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1728]
	$7 = (int_64)0
	
.LOOP $label$118:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$119 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$121 }
	$5 = ($5 + [165])
	goto $label$120 
	
.LABEL $label$121
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$120
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$119
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$118 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1744]
	$7 = (int_64)0
	
.LOOP $label$122:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$123 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$5 = ($5 + [165])
	goto $label$124 
	
.LABEL $label$125
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$123
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$122 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1760]
	$7 = (int_64)0
	
.LOOP $label$126:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$127 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$5 = ($5 + [165])
	goto $label$128 
	
.LABEL $label$129
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$127
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$126 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1776]
	$7 = (int_64)0
	
.LOOP $label$130:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$131 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$133 }
	$5 = ($5 + [165])
	goto $label$132 
	
.LABEL $label$133
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$132
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$131
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$130 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1792]
	$7 = (int_64)0
	
.LOOP $label$134:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$135 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$137 }
	$5 = ($5 + [165])
	goto $label$136 
	
.LABEL $label$137
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$136
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$135
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$134 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1808]
	$7 = (int_64)0
	
.LOOP $label$138:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$139 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$141 }
	$5 = ($5 + [165])
	goto $label$140 
	
.LABEL $label$141
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$140
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$139
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$138 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1824]
	$7 = (int_64)0
	
.LOOP $label$142:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$143 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$145 }
	$5 = ($5 + [165])
	goto $label$144 
	
.LABEL $label$145
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$144
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$143
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$142 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$16 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1840]
	$7 = (int_64)0
	
.LOOP $label$146:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$147 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$149 }
	$5 = ($5 + [165])
	goto $label$148 
	
.LABEL $label$149
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$148
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$147
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$146 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$150 }
	CALL eosio_assert([0], [1856])
	
.LABEL $label$150
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1904]
	$7 = (int_64)0
	
.LOOP $label$151:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$152 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$5 = ($5 + [165])
	goto $label$153 
	
.LABEL $label$154
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$153
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$152
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$151 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$155 }
	CALL eosio_assert([0], [1856])
	
.LABEL $label$155
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [1920]
	$7 = (int_64)0
	
.LOOP $label$156:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$157 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$159 }
	$5 = ($5 + [165])
	goto $label$158 
	
.LABEL $label$159
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$158
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$157
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$156 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$160 }
	CALL eosio_assert([0], [1856])
	
.LABEL $label$160
	*(($12 + [72])) = [0]
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$10 = *($0)
	*($12 + [40]) = $10
	*($12 + [48]) = $10
	$6 = CALL db_find_i64($10, $10, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$25 }
	$6 = CALL $26(($12 + [40]), $6)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)($12 + [40])), [208])
	CALL eosio_assert((*($6 + [4]) == 0), [1936])
	goto $label$24 
	
.LABEL $label$41
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [64]
	$7 = (int_64)0
	
.LOOP $label$161:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$162 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$164 }
	$5 = ($5 + [165])
	goto $label$163 
	
.LABEL $label$164
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$163
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$162
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$161 }
	CALL require_recipient($7)
	goto $label$16 
	
.LABEL $label$28
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [64]
	$7 = (int_64)0
	
.LOOP $label$165:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$166 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$168 }
	$5 = ($5 + [165])
	goto $label$167 
	
.LABEL $label$168
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$167
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$166
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$165 }
	CALL require_recipient($7)
	goto $label$16 
	
.LABEL $label$27
	CALL eosio_assert([0], [272])
	$3 = *($12 + [64])
	if ( ($3 == 0) ){ goto $label$16 }
	
.LABEL $label$26
	$0 = ($12 + [68])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$170 }
	
.LOOP $label$171:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$172 }
	CALL $72($5)
	
.LABEL $label$172
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$171 }
	$6 = *(($12 + [64]))
	goto $label$169 
	
.LABEL $label$170
	$6 = $3
	
.LABEL $label$169
	*($0) = $3
	CALL $72($6)
	goto $label$16 
	
.LABEL $label$25
	CALL eosio_assert([0], [272])
	
.LABEL $label$24
	CALL $43($0, $1)
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$10 = *($0)
	*($12) = $10
	*($12 + [8]) = $10
	*($12 + [36]) = [0]
	$6 = CALL db_find_i64($10, $10, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$173 }
	$6 = CALL $27($12, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$12), [208])
	$10 = CALL $30($0, $1)
	$11 = *($6 + [48])
	$9 = *($6 + [40])
	CALL prints([1984])
	CALL printui($10)
	CALL prints([2000])
	$11 = ((int_64)$11 + (int_64)$9)
	CALL printui($11)
	CALL eosio_assert(((uint_64)$11 <= (uint_64)$10), [2032])
	
.LABEL $label$173
	$3 = *($12 + [24])
	if ( ($3 == 0) ){ goto $label$174 }
	$0 = ($12 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$176 }
	
.LOOP $label$177:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$178 }
	CALL $72($5)
	
.LABEL $label$178
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$177 }
	$6 = *(($12 + [24]))
	goto $label$175 
	
.LABEL $label$176
	$6 = $3
	
.LABEL $label$175
	*($0) = $3
	CALL $72($6)
	
.LABEL $label$174
	$3 = *($12 + [64])
	if ( ($3 == 0) ){ goto $label$16 }
	$0 = ($12 + [68])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$180 }
	
.LOOP $label$181:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$182 }
	CALL $72($5)
	
.LABEL $label$182
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$181 }
	$6 = *(($12 + [64]))
	goto $label$179 
	
.LABEL $label$180
	$6 = $3
	
.LABEL $label$179
	*($0) = $3
	CALL $72($6)
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [144])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $51(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $52(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $72(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [240])
	*([0] + [4]) = $14
	CALL require_auth($1)
	*((($14 + [168]) + [32])) = [0]
	*($14 + [184]) = (int_64)-1
	*($14 + [192]) = (int_64)0
	$7 = *($0)
	*($14 + [168]) = $7
	*($14 + [176]) = $7
	$5 = [0]
	$2 = CALL db_find_i64($7, $7, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $26(($14 + [168]), $2)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($14 + [168])), [208])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [272])
	CALL eosio_assert((*($5) == 0), [1008])
	CALL $43($0, $1)
	*((($14 + [128]) + [32])) = [0]
	*($14 + [144]) = (int_64)-1
	*($14 + [152]) = (int_64)0
	$7 = *($0)
	*($14 + [128]) = $7
	*($14 + [136]) = $7
	*($14 + [164]) = [0]
	$5 = CALL db_find_i64($7, $7, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$13 = CALL $27(($14 + [128]), $5)
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)($14 + [128])), [208])
	*($14 + [124]) = $13
	*($14 + [120]) = ($14 + [128])
	goto $label$2 
	
.LABEL $label$3
	$13 = [0]
	*($14 + [124]) = [0]
	*($14 + [120]) = ($14 + [128])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1152])
	CALL eosio_assert(((int_64)*($13 + [24]) != (int_64)0), [1232])
	CALL prints([1296])
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$2 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [144])
	$4 = *(($13 + [24]))
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$8 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$14 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$9 }
	$3 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [864]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$20 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$16
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$15 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$11 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$26 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$22
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$11 = ((int_64)$9 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$21 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [48]
	$12 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$32 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$2 = ($2 + [165])
	goto $label$30 
	
.LABEL $label$32
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$28
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$27 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$5 = CALL strlen([1056])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$36 }
	*($14 + [8]) = ($5 << [1])
	$2 = (($14 + [8]) | [1])
	if ( $5 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$13 = (($5 + [16]) & [-16])
	$2 = CALL $71($13)
	*($14 + [8]) = ($13 | [1])
	*($14 + [16]) = $2
	*($14 + [12]) = $5
	
.LABEL $label$35
	CALL memcpy($2, [1056], $5)
	
.LABEL $label$34
	*(($2 + $5)) = [0]
	*((($14 + [24]) + [24])) = (int_64)1397703940
	*((($14 + [24]) + [32])) = $8
	*($14 + [32]) = $1
	$5 = ($14 + [16])
	*(($14 + [72])) = *($5)
	*($14 + [24]) = *($0)
	*($14 + [40]) = $4
	*($14 + [64]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($5) = [0]
	*($14 + [80]) = $11
	*($14 + [88]) = $12
	*(($5 = CALL $71([16]))) = $3
	*($5 + [8]) = $10
	*((($14 + [80]) + [32])) = [0]
	$2 = ($5 + [16])
	*((($14 + [80]) + [24])) = $2
	*(($14 + [100])) = $2
	*($14 + [96]) = $5
	*($14 + [108]) = [0]
	*(($14 + [116])) = [0]
	$5 = *($14 + [64])
	$2 = ( *(($14 + [68])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($2 + [40])
	$7 = (CASTING uint_64)(uint_32 $2)
	$2 = ($14 + [108])
	
.LOOP $label$37:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$37 }
	if ( ($5 == 0) ){ goto $label$39 }
	CALL $25($2, $5)
	$2 = *(($14 + [112]))
	$5 = *(($14 + [108]))
	goto $label$38 
	
.LABEL $label$39
	$2 = [0]
	$5 = [0]
	
.LABEL $label$38
	*($14 + [228]) = $5
	*($14 + [224]) = $5
	*($14 + [232]) = $2
	*($14 + [208]) = ($14 + [224])
	*($14 + [216]) = ($14 + [24])
	CALL $44(($14 + [216]), ($14 + [208]))
	CALL $45(($14 + [224]), ($14 + [80]))
	$5 = *($14 + [224])
	CALL send_inline($5, (*($14 + [228]) - $5))
	$5 = *($14 + [224])
	if ( ($5 == 0) ){ goto $label$40 }
	*($14 + [228]) = $5
	CALL $72($5)
	
.LABEL $label$40
	$5 = *($14 + [108])
	if ( ($5 == 0) ){ goto $label$41 }
	*(($14 + [112])) = $5
	CALL $72($5)
	
.LABEL $label$41
	$5 = *($14 + [96])
	if ( ($5 == 0) ){ goto $label$42 }
	*(($14 + [100])) = $5
	CALL $72($5)
	
.LABEL $label$42
	if ( ((*(($14 + [64])) & [1]) == 0) ){ goto $label$43 }
	CALL $72(*(($14 + [72])))
	
.LABEL $label$43
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$44 }
	CALL $72(*(($14 + [16])))
	
.LABEL $label$44
	CALL prints([1088])
	$5 = *($14 + [124])
	$7 = *($0)
	*($14 + [24]) = ($14 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [464])
	CALL $46(($14 + [128]), $5, $7, ($14 + [24]))
	CALL prints([1120])
	$0 = *($14 + [152])
	if ( ($0 == 0) ){ goto $label$45 }
	$13 = ($14 + [156])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$47 }
	
.LOOP $label$48:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$49 }
	CALL $72($2)
	
.LABEL $label$49
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$48 }
	$5 = *(($14 + [152]))
	goto $label$46 
	
.LABEL $label$47
	$5 = $0
	
.LABEL $label$46
	*($13) = $0
	CALL $72($5)
	
.LABEL $label$45
	$0 = *($14 + [192])
	if ( ($0 == 0) ){ goto $label$50 }
	$13 = ($14 + [196])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$52 }
	
.LOOP $label$53:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$54 }
	CALL $72($2)
	
.LABEL $label$54
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$53 }
	$5 = *(($14 + [192]))
	goto $label$51 
	
.LABEL $label$52
	$5 = $0
	
.LABEL $label$51
	*($13) = $0
	CALL $72($5)
	
.LABEL $label$50
	*([0] + [4]) = ($14 + [240])
	return (unreachable)
	
.LABEL $label$33
	CALL $73(($14 + [8]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [176])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [128])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($4 = (($11 + [24]) + [24]))) = (int_64)0
	*(($11 + [40])) = (int_64)1397703940
	*($11 + [24]) = (int_64)0
	*($11 + [32]) = (int_64)0
	CALL eosio_assert([1], [80])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [144])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [176])
	CALL memcpy(($11 + [24]), $7, [8])
	$9 = ($3 & [-8])
	CALL eosio_assert(((int_32)$9 != (int_32)[8]), [176])
	$1 = (($11 + [24]) + [8])
	CALL memcpy($1, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[16]), [176])
	CALL memcpy((($11 + [24]) + [16]), ($7 + [16]), [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[24]), [176])
	CALL memcpy($4, ($7 + [24]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($9 = (($11 + [56]) + [16]))) = *(($1 + [16]))
	*(($7 = (($11 + [56]) + [8]))) = *(($1 + [8]))
	$8 = *($11 + [24])
	*($11 + [56]) = *($1)
	*((($11 + [80]) + [16])) = *($9)
	*((($11 + [80]) + [8])) = *($7)
	*($11 + [80]) = *($11 + [56])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$5 = *((($11 + [80]) + [16]))
	*((($11 + [104]) + [16])) = $5
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [104]) + [8])) = $6
	*(($11 + [16])) = $5
	*(($11 + [8])) = $6
	$5 = *($11 + [80])
	*($11 + [104]) = $5
	*($11) = $5
	CALL void $1((int_32 $8), (int_64 $11), (int_32 $10))
	*([0] + [4]) = ($11 + [128])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$12 = [0]
	*((($13 + [56]) + [32])) = [0]
	*($13 + [72]) = (int_64)-1
	*($13 + [80]) = (int_64)0
	$9 = *($0)
	*($13 + [56]) = $9
	*($13 + [64]) = $9
	$7 = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $26(($13 + [56]), $8)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)($13 + [56])), [208])
	
.LABEL $label$1
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [272])
	CALL eosio_assert((*($7) == 0), [2480])
	CALL $43($0, $1)
	*((($13 + [16]) + [32])) = [0]
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	$9 = *($0)
	*($13 + [16]) = $9
	*($13 + [24]) = $9
	*($13 + [52]) = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $27(($13 + [16]), $8)
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)($13 + [16])), [208])
	
.LABEL $label$2
	$9 = (int_64)0
	CALL eosio_assert(((int_64)CALL $30($0, $1) != (int_64)0), [2528])
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [2576])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)362174039556), [2720])
	$6 = *($2 + [16])
	$1 = (int_64)59
	$8 = [32]
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$4 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$6 == (int_64)$10), [2608])
	CALL eosio_assert(((uint_64)*($12 + [40]) >= (uint_64)*($2)), [2672])
	$9 = *($0)
	*($13 + [8]) = $2
	CALL eosio_assert($3, [464])
	CALL $59(($13 + [56]), $7, $9, ($13 + [8]))
	$9 = *($0)
	*($13 + [8]) = $2
	CALL eosio_assert($5, [464])
	CALL $60(($13 + [16]), $12, $9, ($13 + [8]))
	$0 = *($13 + [40])
	if ( ($0 == 0) ){ goto $label$7 }
	$2 = ($13 + [44])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $72($4)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($13 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $0
	
.LABEL $label$8
	*($2) = $0
	CALL $72($8)
	
.LABEL $label$7
	$0 = *($13 + [80])
	if ( ($0 == 0) ){ goto $label$12 }
	$2 = ($13 + [84])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $72($4)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($13 + [80]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $0
	
.LABEL $label$13
	*($2) = $0
	CALL $72($8)
	
.LABEL $label$12
	*([0] + [4]) = ($13 + [96])
}

void .FUNC $12 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	$1 = *($0)
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [880]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$6 }
	$8 = *($3)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($1, $6)
	$8 = [0]
	*(($9 + [112])) = [0]
	*($9 + [96]) = (int_64)-1
	*($9 + [104]) = (int_64)0
	$5 = *($0)
	*($9 + [80]) = $5
	*($9 + [88]) = $5
	$3 = CALL db_find_i64($5, $5, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$8 }
	$8 = CALL $26(($9 + [80]), $3)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($9 + [80])), [208])
	*($9 + [76]) = $8
	*($9 + [72]) = ($9 + [80])
	$3 = [1]
	goto $label$7 
	
.LABEL $label$8
	*($9 + [76]) = [0]
	*($9 + [72]) = ($9 + [80])
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [272])
	CALL eosio_assert(((int_32)*($8) == (int_32)[1]), [2192])
	$3 = [0]
	*($9 + [68]) = [0]
	*(($9 + [56])) = [0]
	*($9 + [40]) = (int_64)-1
	*($9 + [48]) = (int_64)0
	$5 = *($0)
	*($9 + [24]) = $5
	*($9 + [32]) = $5
	*($9 + [60]) = [0]
	*($9 + [16]) = ($9 + [24])
	$2 = ($8 + [8])
	CALL $55(($9 + [120]), ($9 + [16]), $2)
	$8 = *($9 + [124])
	if ( ($8 == 0) ){ goto $label$9 }
	$3 = ( $8 ? [0] : ((int_64)*($2) == (int_64)*($8 + [8])) )
	
.LABEL $label$9
	
.LOOP $label$14:
	if ( ($3 == 0) ){ goto $label$12 }
	$8 = *($9 + [76])
	if ( ((int_64)*($3 + [8]) != (int_64)*($8 + [8])) ){ goto $label$15 }
	if ( ((uint_64)*($9 + [68]) >= (uint_64)*($8 + [32])) ){ goto $label$13 }
	$5 = *($8 + [48])
	$7 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $5) * (float_64)(CASTING float_64)(uint_64 *($3 + [40]))) / (float_64)(CASTING float_64)(uint_64 *($8 + [64]))))
	*($9 + [120]) = $7
	CALL eosio_assert(((uint_64)$7 <= (uint_64)$5), [2240])
	CALL prints([2304])
	CALL printui(*($3 + [24]))
	CALL prints([2336])
	CALL printui(*($3 + [32]))
	CALL prints([2368])
	CALL printui(*($3 + [16]))
	CALL eosio_assert(((int_64)((int_64)*($3 + [32]) + (int_64)*($3 + [24])) == (int_64)*($3 + [16])), [2384])
	$5 = *($3)
	CALL prints([2448])
	CALL printn($5)
	CALL prints([2464])
	CALL printui(*($9 + [120]))
	$5 = *($0)
	*($9 + [12]) = ($9 + [120])
	*($9 + [8]) = ($9 + [72])
	CALL eosio_assert([1], [464])
	CALL $57(*($9 + [16]), $3, $5, ($9 + [8]))
	*($9 + [68]) = (*($9 + [68]) + [1])
	$8 = *($9 + [76])
	
.LABEL $label$15
	$3 = ($8 + [8])
	CALL $55(($9 + [120]), ($9 + [16]), $3)
	$5 = (int_64)0
	$8 = *($9 + [124])
	if ( ($8 == 0) ){ goto $label$16 }
	if ( ((int_64)*($3) != (int_64)*($8 + [8])) ){ goto $label$16 }
	$5 = *($9 + [124])
	
.LABEL $label$16
	$3 = (CASTING uint_32)(uint_64 $5)
	if ( $3 ){ goto $label$14 }
	$3 = *($9 + [76])
	$5 = *($0)
	*($9 + [120]) = ($9 + [68])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [464])
	CALL $58(($9 + [80]), $3, $5, ($9 + [120]))
	$0 = *($9 + [48])
	if ( $0 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = *($9 + [76])
	$5 = *($0)
	*($9 + [120]) = ($9 + [68])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [464])
	CALL $56(($9 + [80]), $3, $5, ($9 + [120]))
	
.LABEL $label$12
	$0 = *($9 + [48])
	if ( ($0 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = ($9 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $72($8)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($9 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $0
	
.LABEL $label$17
	*($2) = $0
	CALL $72($3)
	
.LABEL $label$10
	$0 = *($9 + [104])
	if ( ($0 == 0) ){ goto $label$21 }
	$2 = ($9 + [108])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL $72($8)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($9 + [104]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $0
	
.LABEL $label$22
	*($2) = $0
	CALL $72($3)
	
.LABEL $label$21
	*([0] + [4]) = ($9 + [128])
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = *($0)
	*($5 + [24]) = $3
	*($5 + [32]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $26(($5 + [24]), $2) + [72]) == (int_32)($5 + [24])), [208])
	$1 = *($5 + [48])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $54(($5 + [8]), ($5 + [24]), *($0), ($5 + [16]))
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $72($2)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $72($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [176])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [848])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [848])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [848])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [640])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $71([32])
	$6 = CALL $33($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [144])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [176])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [176])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_64 .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [32]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*(($10 + [40])) = [0]
	*($10 + [16]) = $1
	*($10 + [8]) = $8
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *(CALL $31(($10 + [8]), (int_64)1414742342, [608]))
	$3 = *($10 + [32])
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($10 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $72($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($10 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	
.LABEL $label$6
	*($4) = $3
	CALL $72($5)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
	return $7
}

int_32 .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [208])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $32($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [208])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [64]) = (int_64))(*($1 + [64]) - *(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($8 + [88]) = *($1 + [8])
	$4 = *($1)
	$5 = *($3 + [8])
	$6 = *(*($3))
	$7 = *(*($3 + [12]) + [4])
	*($8 + [72]) = *($3 + [4])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [464])
	CALL $64($5, $7, $6, ($8 + [72]))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [784])
	*($8 + [80]) = ($8 + [64])
	*($8 + [76]) = $8
	*($8 + [72]) = $8
	CALL $36(($8 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $8, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($8 + [88]), ($8 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($8 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($8 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	$3 = *($3)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*($3))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($6 + [88]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [784])
	*($6 + [80]) = ($6 + [64])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $36(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [104]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [88]), ($6 + [104]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [72])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($6 + [96]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $71(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $77(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $77(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $72(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $72(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [2128])
	*(($4 = CALL $71([88])) + [72]) = $1
	*($4 + [8]) = (int_64)0
	*($4 + [32]) = (int_64)100
	*($4 + [16]) = (int_64)0
	*($4) = (int_64)0
	*($8 + [88]) = ($8 + [72])
	*($8 + [84]) = $8
	*($8 + [80]) = $8
	*($8 + [96]) = ($8 + [80])
	*($8 + [108]) = ($4 + [4])
	*($8 + [104]) = $4
	*($8 + [112]) = ($4 + [8])
	*($8 + [116]) = ($4 + [16])
	*($8 + [120]) = ($4 + [24])
	*($8 + [124]) = ($4 + [32])
	*($8 + [128]) = ($4 + [40])
	*($8 + [132]) = ($4 + [48])
	*($8 + [136]) = ($4 + [56])
	*($8 + [140]) = ($4 + [64])
	CALL $35(($8 + [104]), ($8 + [96]))
	*($4 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550573565312, $2, (int_64)1, $8, [72])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($8 + [104]) = $4
	*($8) = (int_64)1
	$5 = *($4 + [76])
	*($8 + [80]) = $5
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = (int_64)1
	*($6 + [16]) = $5
	*($8 + [104]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $40(($1 + [24]), ($8 + [104]), $8, ($8 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [104])
	*($8 + [104]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $72($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [144])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5003134530400288768, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [208])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $27($4, CALL $fimport$4(*($4), *($4 + [8]), (int_64)-5003134530400288768, $5))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [208])
	
.LABEL $label$4
	*(($2 + [72])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [784])
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [4])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [8])
	*($4 + [116]) = ($1 + [16])
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $35(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*(($1 + [76])), $2, $4, [72])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [672])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [720])
	$4 = *($1 + [8])
	*($1 + [8]) = ((int_64)*(*(*($3) + [4]) + [8]) + (int_64)1)
	*(($5 = $6) + [24]) = $4
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	if ( ((uint_64)((int_64)*($1 + [56]) + (int_64)86400000000) >= (uint_64)CALL current_time()) ){ goto $label$1 }
	*($1 + [48]) = (int_64)0
	*(($1 + [56])) = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [784])
	$6 = $6
	$3 = ($6 + [-64])
	*([0] + [4]) = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $6
	CALL $36(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$3 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($5 + [32]), $4)
	*($3) = $1
	
.LABEL $label$4
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}