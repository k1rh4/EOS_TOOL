(data (i32.const 4) " j\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 208) "invalid symbol name\00")
(data (i32.const 240) "read\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "Red envelopes has exist.\00")
(data (i32.const 352) "Red envelope amount not supported\00")
(data (i32.const 400) "cannot create objects in table of another contract\00")
(data (i32.const 464) "invalid token type\00")
(data (i32.const 496) "token amount is invalid\00")
(data (i32.const 528) "write\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "get\00")
(data (i32.const 592) "Red envelopes don\'t exist.\00")
(data (i32.const 624) "user info not exist\00")
(data (i32.const 656) "Users are not eligible to rob packets\00")
(data (i32.const 704) "The user didn\'t steal the package\00")
(data (i32.const 752) "The user has been awarded an award\00")
(data (i32.const 800) "Your bonus\00")
(data (i32.const 816) "Half Due To the Last Number 8\00")
(data (i32.const 848) "Out Due To the Last Number 0\00")
(data (i32.const 880) "active\00")
(data (i32.const 896) "faireosgiver\00")
(data (i32.const 912) "Dividend pool\00")
(data (i32.const 928) "faireosthank\00")
(data (i32.const 944) "Team award\00")
(data (i32.const 976) "The pool of prizes is empty\00")
(data (i32.const 1008) "Extra Reward Due To Quadruple Number\00")
(data (i32.const 1056) "Extra Reward Due To Double Pair Number\00")
(data (i32.const 1104) "Extra Reward Due To Triple Number\00")
(data (i32.const 1152) "Extra Reward Due To Min Number\00")
(data (i32.const 1184) "Extra Reward Due To Integral Number\00")
(data (i32.const 1232) "Extra Reward Due To Straight Number\00")
(data (i32.const 1280) "Extra Reward Due To MAX Number\00")
(data (i32.const 1312) "cannot pass end iterator to modify\00")
(data (i32.const 1360) "object passed to modify is not in multi_index\00")
(data (i32.const 1408) "cannot modify objects in table of another contract\00")
(data (i32.const 1472) "attempt to subtract asset with different symbol\00")
(data (i32.const 1520) "subtraction underflow\00")
(data (i32.const 1552) "subtraction overflow\00")
(data (i32.const 1584) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1648) "cannot increment end iterator\00")
(data (i32.const 1680) "cannot pass end iterator to erase\00")
(data (i32.const 1728) "object passed to erase is not in multi_index\00")
(data (i32.const 1776) "cannot erase objects in table of another contract\00")
(data (i32.const 1840) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1904) "attempt to add asset with different symbol\00")
(data (i32.const 1952) "addition underflow\00")
(data (i32.const 1984) "addition overflow\00")
(data (i32.const 2016) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2080) "Red envelopes are gone\00")
(data (i32.const 2112) "Waiting prize\00")
(data (i32.const 2128) "red:\00")
(data (i32.const 2144) "The game has not yet been activated\00")
(data (i32.const 2192) "ticket\00")
(data (i32.const 2208) "bonus\00")
(data (i32.const 2224) "invalid oper type\00")
(data (i32.const 2256) "Purchased eos ticket\00")
(data (i32.const 10688) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN3red8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN3red8activateEb" (func $8))
(export "_ZN3red4grabEyy" (func $10))
(export "_ZN3red6rewardEyyN5eosio5assetE" (func $12))
(export "_ZN3red4sendEyN5eosio5assetE" (func $14))
(export "_ZN3red9iscontainEyN5eosio5assetE" (func $27))
(export "malloc" (func $61))
(export "free" (func $64))
(export "memcmp" (func $75))
(export "strlen" (func $76))
(export "memchr" (func $77))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $78 $6 $14 $10 $8 $12)



void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [36])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [40])) = $6
	CALL $66($6)
	
.LABEL $label$11
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $66($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10688])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [528])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [528])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [528])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [528])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [528])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $20(*($1), *($0 + [24]))
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $66 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10780])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $65($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [528])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [528])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $43(CALL $42($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $65([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $41($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $44(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($0 + [44])) = [0]
	*($0 + [36 align=4]) = (int_64)0
	*($0 + [48]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [28])
	*($6 + [32]) = ($0 + [32])
	*($6 + [36]) = ($0 + [33])
	*($6 + [40]) = ($0 + [36])
	CALL $22(($6 + [16]), ($6 + [8]))
	*($0 + [52]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [48])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	CALL memcpy(*($3), ($6 + [8]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [576])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $24($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [240])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [240])
	CALL memcpy(($7 + [8]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [240])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [240])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [240])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [240])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [240])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	CALL $23(*($1), *($0 + [24]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $65(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $72($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $66($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZN3red9iscontainEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = [0]
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	$5 = *($0)
	*($9 + [8]) = $5
	*($9 + [16]) = $1
	*($9 + [32]) = (int_64)0
	$6 = [0]
	$0 = CALL db_lowerbound_i64($5, $1, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $26(($9 + [8]), $0)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [624])
	$3 = *(($6 + [28]))
	$0 = *($6 + [24])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	$5 = *($2)
	$4 = *($2 + [8])
	$8 = [0]
	
.LOOP $label$3:
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)$4), [2016])
	$6 = ((int_64)$1 == (int_64)$5)
	$8 = ($8 | $6)
	if ( $6 ){ goto $label$2 }
	$0 = ($0 + [16])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = *($9 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$7 = (($9 + [8]) + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	$3 = *($6 + [24])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($6 + [28])) = $3
	CALL $66($3)
	
.LABEL $label$9
	CALL $66($6)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($9 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($7) = $2
	CALL $66($0)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [48])
	return ($8 & [1])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $65([48])
	$6 = CALL $46($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [28])) = $7
	CALL $66($7)
	
.LABEL $label$10
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $65($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $65(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [144])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [208])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $72($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [144])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [208])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $66($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [576])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $49($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [240])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [240])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $70($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $65(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $66($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $65($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $66($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [24])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $6
	CALL $66($6)
	
.LABEL $label$11
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $66($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*(($0 + [32])) = [0]
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $48($4, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [528])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [528])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $45(*($1), ($0 + [32]))
}

void .FUNC $72 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $65(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $66($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $78 ()
{
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $65($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $66($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $65(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $72($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $66($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN3red8activateEb (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	*($6 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL $53(($6 + [8]), $3)
	CALL eosio_assert([1], [1312])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($6 + [8])), [1360])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [1408])
	*($0 + [8]) = $1
	$2 = *($0)
	CALL eosio_assert([1], [1584])
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 + [64]), $0, [8])
	*($6 + [56]) = *($0 + [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($6 + [64]), [9])
	$0 = ($6 + [24])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$3 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$3 = *($6 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [400])
	*(($0 = CALL $65([32])) + [16]) = ($6 + [8])
	*($0 + [8]) = $1
	CALL eosio_assert([1], [528])
	CALL memcpy(($6 + [64]), $0, [8])
	*($6 + [56]) = *($0 + [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	$2 = *($0)
	$3 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)7235159550150574080, $4, $2, ($6 + [64]), [9])
	*($0 + [20]) = $3
	$1 = ($6 + [24])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [56]) = $0
	$2 = *($0)
	*($6 + [64]) = $2
	*($6 + [52]) = $3
	$5 = ($6 + [36])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($6 + [40]))) ){ goto $label$7 }
	*($1 + [8]) = $2
	*($1 + [16]) = $3
	*($6 + [56]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $52(($6 + [32]), ($6 + [56]), ($6 + [64]), ($6 + [52]))
	
.LABEL $label$6
	$0 = *($6 + [56])
	*($6 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $66($0)
	
.LABEL $label$3
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $66($1)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $66($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [240])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN3red8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [208])
	*([0] + [4]) = $11
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$3 }
	$6 = uint_32($10 >> [1])
	$8 = ($4 + [1])
	goto $label$2 
	
.LABEL $label$3
	$6 = *($4 + [4])
	$8 = *($4 + [8])
	
.LABEL $label$2
	$10 = CALL strlen([2128])
	if ( ($10 == 0) ){ goto $label$4 }
	if ( ((int_32)$6 < (int_32)$10) ){ goto $label$1 }
	$5 = ($8 + $6)
	$9 = $8
	
.LOOP $label$5:
	$6 = (($6 - $10) + [1])
	if ( ($6 == 0) ){ goto $label$1 }
	$6 = CALL memchr($9, [114], $6)
	if ( ($6 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($6, [2128], $10) == 0) ){ goto $label$6 }
	$9 = ($6 + [1])
	$6 = ($5 - $9)
	if ( ((int_32)$6 >= (int_32)$10) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$1 }
	if ( ((int_32)($6 - $8) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [464])
	*(($11 + [144])) = [0]
	*($11 + [128]) = (int_64)-1
	$2 = *($0)
	*($11 + [112]) = $2
	*($11 + [120]) = $2
	*($11 + [136]) = (int_64)0
	$10 = [0]
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $53(($11 + [112]), $6)
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2144])
	CALL eosio_assert(*($10 + [8]), [2144])
	$10 = [1]
	$2 = *($3)
	if ( ((int_64)$2 > (int_64)99999) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)1000) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)10000) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)50000) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)100000) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)500000) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)1000000) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = [0]
	
.LABEL $label$8
	CALL eosio_assert($10, [352])
	*(($11 + [104])) = [0]
	*($11 + [96]) = (int_64)0
	$10 = CALL strlen([2128])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$15 }
	*($11 + [96]) = ($10 << [1])
	$6 = (($11 + [96]) | [1])
	if ( $10 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = (($10 + [16]) & [-16])
	$6 = CALL $65($9)
	*($11 + [96]) = ($9 | [1])
	*($11 + [104]) = $6
	*($11 + [100]) = $10
	
.LABEL $label$14
	CALL memcpy($6, [2128], $10)
	
.LABEL $label$13
	$9 = [0]
	*(($6 + $10)) = [0]
	$10 = *($11 + [96])
	CALL $74(($11 + [80]), $4, ( *($11 + [100]) ? uint_32($10 >> [1]) : ($10 & [1]) ), [-1], $4)
	$10 = *($11 + [80])
	$6 = CALL strlen([2192])
	if ( ((int_32)$6 != (int_32)( *($11 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$18 }
	if ( (CALL $71(($11 + [80]), [0], [-1], [2192], $6) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = *($11 + [80])
	$6 = CALL strlen([2208])
	if ( ((int_32)$6 != (int_32)( *($11 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$16 }
	$9 = (CALL $71(($11 + [80]), [0], [-1], [2208], $6) == 0)
	goto $label$16 
	
.LABEL $label$17
	$9 = [1]
	
.LABEL $label$16
	CALL eosio_assert($9, [2224])
	$10 = *($11 + [80])
	$6 = CALL strlen([2192])
	if ( ((int_32)$6 != (int_32)( *($11 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$26 }
	if ( (CALL $71(($11 + [80]), [0], [-1], [2192], $6) == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$10 = [0]
	*(($11 + [72])) = [0]
	*($11 + [56]) = (int_64)-1
	$1 = *($0)
	*($11 + [40]) = $1
	*($11 + [48]) = $1
	*($11 + [64]) = (int_64)0
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-5969209044777304064, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$27 }
	$10 = CALL $30(($11 + [40]), $6)
	CALL eosio_assert([1], [1312])
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($11 + [40])), [1360])
	CALL eosio_assert(((int_64)*($11 + [40]) == (int_64)CALL $fimport$2()), [1408])
	$1 = *($10)
	$6 = ($10 + [16])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($6)), [1904])
	$2 = ((int_64)*($10 + [8]) + (int_64)*($3))
	*($10 + [8]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1952])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [1984])
	CALL eosio_assert(((int_64)$1 == (int_64)*($10)), [1584])
	CALL eosio_assert([1], [528])
	CALL memcpy(($11 + [176]), $10, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($11 + [176]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($11 + [176]) + [16]), $6, [8])
	CALL db_update_i64(*($10 + [28]), (int_64)0, ($11 + [176]), [24])
	$10 = (($11 + [40]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$22 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$4 = *($11 + [64])
	if ( $4 ){ goto $label$21 }
	goto $label$11 
	
.LABEL $label$27
	$2 = *($0)
	CALL eosio_assert(((int_64)*($11 + [40]) == (int_64)CALL $fimport$2()), [400])
	*(($6 = CALL $65([40])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$0 = ($6 + [16])
	$9 = ($6 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$29:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$4 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	CALL eosio_assert($4, [208])
	*($6 + [24]) = ($11 + [40])
	*(($9 + [8])) = *(($3 + [8]))
	*($9) = *($3)
	CALL eosio_assert([1], [528])
	CALL memcpy(($11 + [176]), $6, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($11 + [176]) | [8]), $9, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($11 + [176]) + [16]), $0, [8])
	$1 = *($6)
	$4 = CALL db_store_i64(*((($11 + [40]) + [8])), (int_64)-5969209044777304064, $2, $1, ($11 + [176]), [24])
	*($6 + [28]) = $4
	$10 = (($11 + [40]) + [16])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$32 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	*($11 + [160]) = $6
	$1 = *($6)
	*($11 + [176]) = $1
	*($11 + [168]) = $4
	$9 = ($11 + [68])
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [72]))) ){ goto $label$24 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($11 + [160]) = [0]
	*($10) = $6
	*($9) = ($10 + [24])
	goto $label$23 
	
.LABEL $label$25
	*(($11 + [72])) = [0]
	*($11 + [56]) = (int_64)-1
	$2 = *($0)
	*($11 + [40]) = $2
	*($11 + [48]) = $1
	*($11 + [64]) = (int_64)0
	$10 = CALL db_lowerbound_i64($2, $1, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$20 }
	$10 = CALL $26(($11 + [40]), $10)
	*(($6 = (($11 + [24]) + [8]))) = *(($3 + [8]))
	$2 = *($3)
	*(($11 + [12])) = *((($11 + [24]) + [12]))
	*(($11 + [8])) = *($6)
	*($11 + [24]) = $2
	*($11 + [4]) = *($11 + [28])
	*($11) = *($11 + [24])
	CALL eosio_assert(((int_32)CALL $27($0, $1, $11) ^ (int_32)[1]), [2256])
	*($11 + [176]) = $3
	CALL eosio_assert([1], [1312])
	CALL $58(($11 + [40]), $10, ($11 + [176]))
	$9 = *($11 + [64])
	if ( $9 ){ goto $label$19 }
	goto $label$11 
	
.LABEL $label$24
	CALL $40(($11 + [64]), ($11 + [160]), ($11 + [176]), ($11 + [168]))
	
.LABEL $label$23
	$10 = *($11 + [160])
	*($11 + [160]) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL $66($10)
	
.LABEL $label$22
	$4 = *($11 + [64])
	if ( ($4 == 0) ){ goto $label$11 }
	
.LABEL $label$21
	$9 = ($11 + [68])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	CALL $66($6)
	
.LABEL $label$36
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$35 }
	$10 = *(($11 + [64]))
	goto $label$33 
	
.LABEL $label$34
	$10 = $4
	
.LABEL $label$33
	*($9) = $4
	CALL $66($10)
	goto $label$11 
	
.LABEL $label$20
	$1 = *($0)
	*($11 + [16]) = $3
	*($11 + [160]) = $1
	CALL eosio_assert(((int_64)*($11 + [40]) == (int_64)CALL $fimport$2()), [400])
	*($11 + [180]) = ($11 + [16])
	*($11 + [176]) = ($11 + [40])
	*($11 + [184]) = ($11 + [160])
	*(($6 = CALL $65([48])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (int_64)5462355
	$10 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$4 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$4 = [0]
	
.LABEL $label$37
	CALL eosio_assert($4, [208])
	*($6 + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [36]) = ($11 + [40])
	CALL $59(($11 + [176]), $6)
	*($11 + [168]) = $6
	$1 = *($6)
	*($11 + [176]) = $1
	$4 = *($6 + [40])
	*($11 + [156]) = $4
	$9 = ($11 + [68])
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)*(($11 + [72]))) ){ goto $label$43 }
	*($10 + [8]) = $1
	*($10 + [16]) = $4
	*($11 + [168]) = [0]
	*($10) = $6
	*($9) = ($10 + [24])
	goto $label$42 
	
.LABEL $label$43
	CALL $47(($11 + [64]), ($11 + [168]), ($11 + [176]), ($11 + [156]))
	
.LABEL $label$42
	$10 = *($11 + [168])
	*($11 + [168]) = [0]
	if ( ($10 == 0) ){ goto $label$44 }
	$6 = *($10 + [24])
	if ( ($6 == 0) ){ goto $label$45 }
	*(($10 + [28])) = $6
	CALL $66($6)
	
.LABEL $label$45
	CALL $66($10)
	
.LABEL $label$44
	$9 = *($11 + [64])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$19
	$0 = (($11 + [40]) + [28])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$47 }
	
.LOOP $label$48:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	$4 = *($6 + [24])
	if ( ($4 == 0) ){ goto $label$50 }
	*(($6 + [28])) = $4
	CALL $66($4)
	
.LABEL $label$50
	CALL $66($6)
	
.LABEL $label$49
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$48 }
	$10 = *(($11 + [64]))
	goto $label$46 
	
.LABEL $label$47
	$10 = $9
	
.LABEL $label$46
	*($0) = $9
	CALL $66($10)
	goto $label$11 
	
.LABEL $label$12
	CALL $67(($11 + [96]))
	
.LABEL $label$11
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$51 }
	CALL $66(*($11 + [88]))
	
.LABEL $label$51
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$52 }
	CALL $66(*($11 + [104]))
	
.LABEL $label$52
	$4 = *($11 + [136])
	if ( ($4 == 0) ){ goto $label$1 }
	$9 = ($11 + [140])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$54 }
	
.LOOP $label$55:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$56 }
	CALL $66($6)
	
.LABEL $label$56
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$55 }
	$10 = *(($11 + [136]))
	goto $label$53 
	
.LABEL $label$54
	$10 = $4
	
.LABEL $label$53
	*($9) = $4
	CALL $66($10)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [208])
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [208])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $54(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $55(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $66(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [88]) = $0
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)7335361038382006272) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)3617214701412286464) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $7(($9 + [88]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)-4992121834821386240) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)-4420687654543163392) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $15(($9 + [88]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$37
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $11(($9 + [88]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$36
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $9(($9 + [88]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$35
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $13(($9 + [88]), ($9 + [32]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN3red4sendEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [48]) = $1
	CALL require_auth(*($0))
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$6 = *($0)
	*($7 + [8]) = $6
	*($7 + [16]) = $6
	$4 = [1]
	$5 = [1]
	$3 = CALL db_find_i64($6, $6, (int_64)-5002514023590133760, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $16(($7 + [8]), $3) + [48]) == (int_32)($7 + [8])), [256])
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [320])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [464])
	$6 = *($2)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [496])
	if ( ((int_64)$6 > (int_64)99999) ){ goto $label$4 }
	if ( ((int_64)$6 == (int_64)1000) ){ goto $label$2 }
	if ( ((int_64)$6 == (int_64)10000) ){ goto $label$2 }
	if ( ((int_64)$6 == (int_64)50000) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$6 == (int_64)100000) ){ goto $label$2 }
	if ( ((int_64)$6 == (int_64)500000) ){ goto $label$2 }
	if ( ((int_64)$6 == (int_64)1000000) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [352])
	$6 = *($0)
	*($7 + [4]) = $2
	*($7) = ($7 + [48])
	*($7 + [88]) = $6
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [400])
	*($7 + [68]) = $7
	*($7 + [64]) = ($7 + [8])
	*($7 + [72]) = ($7 + [88])
	*(($0 = CALL $65([64])) + [16]) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [144])
	$6 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [208])
	*($0 + [44]) = [0]
	*($0 + [36 align=4]) = (int_64)0
	*($0 + [48]) = ($7 + [8])
	CALL $17(($7 + [64]), $0)
	*($7 + [80]) = $0
	$6 = *($0)
	*($7 + [64]) = $6
	$5 = *($0 + [52])
	*($7 + [60]) = $5
	$4 = ($7 + [36])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($7 + [40]))) ){ goto $label$11 }
	*($2 + [8]) = $6
	*($2 + [16]) = $5
	*($7 + [80]) = [0]
	*($2) = $0
	*($4) = ($2 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $18(($7 + [32]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$10
	$2 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	$0 = *($2 + [36])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($2 + [40])) = $0
	CALL $66($0)
	
.LABEL $label$13
	CALL $66($2)
	
.LABEL $label$12
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$14 }
	$3 = ($7 + [36])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	$5 = *($0 + [36])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($0 + [40])) = $5
	CALL $66($5)
	
.LABEL $label$19
	CALL $66($0)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($7 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $4
	
.LABEL $label$15
	*($3) = $4
	CALL $66($2)
	
.LABEL $label$14
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [144])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [208])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [240])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [240])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [240])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $65([64])
	$6 = CALL $21($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [52])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $18(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [36])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $7
	CALL $66($7)
	
.LABEL $label$10
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$14 = (*([0] + [4]) - [64])
	$15 = $14
	*([0] + [4]) = $14
	$12 = *($0 + [4])
	*($1) = *(*($12))
	$2 = *($0)
	$12 = *($12 + [4])
	*($1 + [8]) = *($12)
	*(($1 + [16])) = *(($12 + [8]))
	$13 = CALL current_time()
	*($1 + [28]) = [0]
	*($1 + [32]) = [0]
	*($1 + [24]) = ((uint_64)$13 / (uint_64)(int_64)1000000)
	$8 = ($1 + [36])
	$7 = ($1 + [32])
	$6 = ($1 + [33])
	$5 = ($1 + [28])
	$4 = ($1 + [24])
	$3 = ($1 + [8])
	$10 = *($1 + [36])
	$9 = *(($1 + [40]))
	$11 = ($9 - $10)
	$13 = (CASTING uint_64)(uint_32 int_32($11 >> [4]))
	$12 = [34]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$12 = ((((int_32)uint_32(($11 + [-16]) >> [4]) * (int_32)[9]) + $12) + [9])
	
.LABEL $label$2
	if ( ($12 <= [513]) ){ goto $label$4 }
	$14 = CALL malloc($12)
	goto $label$3 
	
.LABEL $label$4
	$14 = ($14 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$3
	*($15 + [12]) = $14
	*($15 + [8]) = $14
	*($15 + [16]) = ($14 + $12)
	*($15 + [24]) = ($15 + [8])
	*($15 + [36]) = $3
	*($15 + [32]) = $1
	*($15 + [40]) = $4
	*($15 + [44]) = $5
	*($15 + [48]) = $7
	*($15 + [52]) = $6
	*($15 + [56]) = $8
	CALL $19(($15 + [32]), ($15 + [24]))
	$13 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002514023590133760, *(*($0 + [8])), $13, $14, $12)
	if ( ($12 <= [513]) ){ goto $label$5 }
	CALL free($14)
	
.LABEL $label$5
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($15 + [64])
}

void .FUNC _ZN3red4grabEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [88]) = $1
	CALL require_auth($1)
	*(($8 + [80])) = [0]
	*($8 + [64]) = (int_64)-1
	*($8 + [72]) = (int_64)0
	$6 = *($0)
	*($8 + [48]) = $6
	*($8 + [56]) = $6
	$5 = [0]
	$4 = CALL db_find_i64($6, $6, (int_64)-5002514023590133760, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $16(($8 + [48]), $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($8 + [48])), [256])
	$1 = *($8 + [88])
	
.LABEL $label$1
	$3 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($3, [592])
	CALL eosio_assert((*($5 + [32]) <= [10]), [2080])
	*(($4 = (($8 + [32]) + [8]))) = *(($5 + [16]))
	$6 = *($5 + [8])
	*((($8 + [8]) + [12])) = *((($8 + [32]) + [12]))
	*((($8 + [8]) + [8])) = *($4)
	*($8 + [32]) = $6
	*($8 + [12]) = *($8 + [36])
	*($8 + [8]) = *($8 + [32])
	CALL eosio_assert(CALL $27($0, $1, ($8 + [8])), [656])
	$4 = *(($5 + [40]))
	$0 = *($5 + [36])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	$4 = ($4 + [-16])
	
.LOOP $label$3:
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$4 }
	CALL eosio_assert(*(($0 + [8])), [2112])
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$2 }
	$0 = ($0 + [16])
	$1 = *($8 + [88])
	goto $label$3 
	
.LABEL $label$2
	*($8 + [24]) = ($8 + [88])
	CALL eosio_assert($3, [1312])
	CALL $50(($8 + [48]), $5, ($8 + [24]))
	$3 = *($8 + [72])
	if ( ($3 == 0) ){ goto $label$5 }
	$7 = ($8 + [76])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$5 = *($4 + [36])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $5
	CALL $66($5)
	
.LABEL $label$10
	CALL $66($4)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($7) = $3
	CALL $66($0)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [240])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN3red6rewardEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	int_32 $23
	int_32 $24
	$23 = (*([0] + [4]) - [384])
	*([0] + [4]) = $23
	*($23 + [360]) = $2
	CALL require_auth(*($0))
	$21 = [0]
	*(($23 + [352])) = [0]
	*($23 + [336]) = (int_64)-1
	*($23 + [344]) = (int_64)0
	$2 = *($0)
	*($23 + [320]) = $2
	*($23 + [328]) = $2
	$20 = CALL db_find_i64($2, $2, (int_64)-5002514023590133760, $1)
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$2 }
	$21 = CALL $16(($23 + [320]), $20)
	CALL eosio_assert(((int_32)*($21 + [48]) == (int_32)($23 + [320])), [256])
	*($23 + [316]) = $21
	*($23 + [312]) = ($23 + [320])
	$10 = (($23 + [312]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($23 + [316]) = [0]
	*($23 + [312]) = ($23 + [320])
	$10 = (($23 + [312]) | [4])
	
.LABEL $label$1
	$14 = [0]
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [592])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [464])
	$21 = [0]
	$1 = *($3)
	if ( ((int_64)$1 <= (int_64)0) ){ goto $label$3 }
	$21 = ((int_64)$1 <= (int_64)*(*($10) + [8]))
	
.LABEL $label$3
	CALL eosio_assert($21, [496])
	*($23 + [288]) = (int_64)-1
	*($23 + [296]) = [0]
	$2 = *($23 + [360])
	$15 = *($0)
	*($23 + [272]) = $15
	*($23 + [280]) = $2
	*(($23 + [300])) = [0]
	*(($23 + [304])) = [0]
	$21 = CALL db_lowerbound_i64($15, $2, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$4 }
	$14 = CALL $26(($23 + [272]), $21)
	
.LABEL $label$4
	$4 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($4, [624])
	$21 = *($10)
	*((($23 + [256]) + [12])) = *(($21 + [20]))
	*(($20 = (($23 + [256]) + [8]))) = *(($21 + [16]))
	$2 = *($23 + [360])
	*($23 + [256]) = *($21 + [8])
	*($23 + [260]) = *(($21 + [12]))
	*((($23 + [8]) + [8])) = *($20)
	*($23 + [8]) = *($23 + [256])
	CALL eosio_assert(CALL $27($0, $2, ($23 + [8])), [656])
	$19 = [0]
	$20 = [0]
	$11 = *(($11 + [40]))
	$11 = *($10)
	$21 = *($11 + [36])
	if ( ((int_32)$21 == (int_32)$11) ){ goto $label$5 }
	$20 = [0]
	$2 = *($23 + [360])
	$19 = [0]
	
.LOOP $label$6:
	if ( ((int_64)*($21) != (int_64)$2) ){ goto $label$7 }
	$20 = ($20 | (*(($21 + [8])) == 0))
	$19 = [1]
	
.LABEL $label$7
	$21 = ($21 + [16])
	if ( ((int_32)$11 != (int_32)$21) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert(($19 & [1]), [704])
	CALL eosio_assert(($20 & [1]), [752])
	*($23 + [255]) = [0]
	*((($23 + [240]) + [8])) = [0]
	*($23 + [240]) = (int_64)0
	$2 = ((int_64)$1 % (int_64)10)
	$21 = CALL strlen([800])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$14 }
	$11 = (CASTING uint_32)(uint_64 $2)
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$17 }
	*($23 + [240]) = ($21 << [1])
	$20 = (($23 + [240]) | [1])
	if ( $21 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$19 = (($21 + [16]) & [-16])
	$20 = CALL $65($19)
	*($23 + [240]) = ($19 | [1])
	*($23 + [248]) = $20
	*($23 + [244]) = $21
	
.LABEL $label$16
	CALL memcpy($20, [800], $21)
	
.LABEL $label$15
	*(($20 + $21)) = [0]
	$22 = (float_64)1
	if ( (($11 & [255]) == 0) ){ goto $label$19 }
	if ( ((int_32)int_32(($11 << [24]) >> [24]) != (int_32)[8]) ){ goto $label$18 }
	CALL $69(($23 + [240]), [816])
	$22 = (float_64)0.5
	goto $label$18 
	
.LABEL $label$19
	CALL $69(($23 + [240]), [848])
	*($23 + [255]) = [1]
	
.LABEL $label$18
	*($23 + [232]) = (int_64)1397703940
	*($23 + [224]) = (int_64)0
	CALL eosio_assert([1], [144])
	$2 = (uint_64)*($23 + [232]) >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$20 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$20 = [0]
	
.LABEL $label$20
	CALL eosio_assert($20, [208])
	$9 = *($3)
	$5 = (CASTING float_64)(int_64 $9)
	*($23 + [224]) = (Rounds 0)(((float_64)$22 * (float_64)$5))
	$18 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [880]
	$16 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$30 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$20 = ($20 + [165])
	goto $label$28 
	
.LABEL $label$30
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$26
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$25 }
	*($23 + [80]) = $16
	*($23 + [72]) = $18
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$36 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$20 = ($20 + [165])
	goto $label$34 
	
.LABEL $label$36
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$32
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$31 }
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [112]
	$17 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$42 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$20 = ($20 + [165])
	goto $label$40 
	
.LABEL $label$42
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$38
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$37 }
	*(($23 + [148])) = *($23 + [228])
	*($23 + [128]) = $18
	*($23 + [136]) = *($23 + [360])
	*(($23 + [156])) = *(($23 + [236]))
	*(($23 + [152])) = *(($23 + [232]))
	*($23 + [144]) = *($23 + [224])
	CALL $73(($23 + [160]), ($23 + [240]))
	$21 = CALL $28(($23 + [184]), ($23 + [72]), $16, $17, ($23 + [128]))
	CALL $29(($23 + [112]), $21)
	$20 = *($23 + [112])
	CALL send_inline($20, (*($23 + [116]) - $20))
	$20 = *($23 + [112])
	if ( ($20 == 0) ){ goto $label$43 }
	*($23 + [116]) = $20
	CALL $66($20)
	
.LABEL $label$43
	$20 = *($21 + [28])
	if ( ($20 == 0) ){ goto $label$44 }
	*(($21 + [32])) = $20
	CALL $66($20)
	
.LABEL $label$44
	$20 = *($21 + [16])
	if ( ($20 == 0) ){ goto $label$45 }
	*(($21 + [20])) = $20
	CALL $66($20)
	
.LABEL $label$45
	if ( ((*($23 + [160]) & [1]) == 0) ){ goto $label$46 }
	CALL $66(*(($23 + [168])))
	
.LABEL $label$46
	if ( ((int_32)(CASTING int_32)(float_64 ((float_64)$22 * (float_64)(float_64)10)) > (int_32)[9]) ){ goto $label$47 }
	$6 = *(($3 + [8]))
	$22 = (float_64)
	$7 = (Rounds 0)(((float_64)((float_64)$22((float_64)1 - $22)) * (float_64)$5) * (float_64)(float_64)0.8)
	if ( ((int_64)$7) < (int_64)1) ){ goto $label$48 }
	$17 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [880]
	$16 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$54 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$20 = ($20 + [165])
	goto $label$52 
	
.LABEL $label$54
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$50
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$49 }
	*($23 + [80]) = $16
	*($23 + [72]) = $17
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$60 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$20 = ($20 + [165])
	goto $label$58 
	
.LABEL $label$60
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$56
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$55 }
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [112]
	$17 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$66 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$20 = ($20 + [165])
	goto $label$64 
	
.LABEL $label$66
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$62
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$61 }
	$2 = (int_64)0
	$1 = (int_64)59
	$21 = [896]
	$18 = (int_64)0
	
.LOOP $label$67:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$68 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$20 = ($20 + [165])
	goto $label$69 
	
.LABEL $label$70
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($20 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$68
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$67 }
	*(($23 + [64])) = [0]
	*($23 + [56]) = (int_64)0
	$21 = CALL strlen([912])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$73 }
	*($23 + [56]) = ($21 << [1])
	$20 = (($23 + [56]) | [1])
	if ( $21 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$11 = (($21 + [16]) & [-16])
	$20 = CALL $65($11)
	*($23 + [56]) = ($11 | [1])
	*($23 + [64]) = $20
	*($23 + [60]) = $21
	
.LABEL $label$72
	CALL memcpy($20, [912], $21)
	
.LABEL $label$71
	*(($20 + $21)) = [0]
	*(($23 + [152])) = $6
	*(($23 + [164])) = *($23 + [60])
	*($23 + [136]) = $18
	$21 = ($23 + [64])
	*(($23 + [168])) = *($21)
	*($23 + [128]) = *($0)
	*($23 + [144]) = $7
	*($23 + [160]) = *($23 + [56])
	*($23 + [56]) = [0]
	*($23 + [60]) = [0]
	*($21) = [0]
	$21 = CALL $28(($23 + [184]), ($23 + [72]), $16, $17, ($23 + [128]))
	CALL $29(($23 + [112]), $21)
	$20 = *($23 + [112])
	CALL send_inline($20, (*($23 + [116]) - $20))
	$20 = *($23 + [112])
	if ( ($20 == 0) ){ goto $label$74 }
	*($23 + [116]) = $20
	CALL $66($20)
	
.LABEL $label$74
	$20 = *($21 + [28])
	if ( ($20 == 0) ){ goto $label$75 }
	*(($21 + [32])) = $20
	CALL $66($20)
	
.LABEL $label$75
	$20 = *($21 + [16])
	if ( ($20 == 0) ){ goto $label$76 }
	*(($21 + [20])) = $20
	CALL $66($20)
	
.LABEL $label$76
	if ( ((*(($23 + [160])) & [1]) == 0) ){ goto $label$77 }
	CALL $66(*(($23 + [168])))
	
.LABEL $label$77
	if ( ((*($23 + [56]) & [1]) == 0) ){ goto $label$78 }
	CALL $66(*(($23 + [64])))
	
.LABEL $label$78
	$9 = *($3)
	
.LABEL $label$48
	$9 = (Rounds 0)(((float_64)((float_64)$22 * (float_64)(CASTING float_64)(int_64 $9)) * (float_64)(float_64)0.2))
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$47 }
	$17 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [880]
	$16 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$84 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$20 = ($20 + [165])
	goto $label$82 
	
.LABEL $label$84
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$80
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$79 }
	*($23 + [80]) = $16
	*($23 + [72]) = $17
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$90 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$20 = ($20 + [165])
	goto $label$88 
	
.LABEL $label$90
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$86
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$85 }
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [112]
	$17 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$96 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$20 = ($20 + [165])
	goto $label$94 
	
.LABEL $label$96
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$92
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$91 }
	$2 = (int_64)0
	$1 = (int_64)59
	$21 = [928]
	$18 = (int_64)0
	
.LOOP $label$97:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$98 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$20 = ($20 + [165])
	goto $label$99 
	
.LABEL $label$100
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($20 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$98
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$97 }
	*(($23 + [64])) = [0]
	*($23 + [56]) = (int_64)0
	$21 = CALL strlen([944])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$103 }
	*($23 + [56]) = ($21 << [1])
	$20 = (($23 + [56]) | [1])
	if ( $21 ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$103
	$11 = (($21 + [16]) & [-16])
	$20 = CALL $65($11)
	*($23 + [56]) = ($11 | [1])
	*($23 + [64]) = $20
	*($23 + [60]) = $21
	
.LABEL $label$102
	CALL memcpy($20, [944], $21)
	
.LABEL $label$101
	*(($20 + $21)) = [0]
	*(($23 + [152])) = $6
	*(($23 + [164])) = *($23 + [60])
	*($23 + [136]) = $18
	$21 = ($23 + [64])
	*(($23 + [168])) = *($21)
	*($23 + [128]) = *($0)
	*($23 + [144]) = $9
	*($23 + [160]) = *($23 + [56])
	*($23 + [56]) = [0]
	*($23 + [60]) = [0]
	*($21) = [0]
	$21 = CALL $28(($23 + [184]), ($23 + [72]), $16, $17, ($23 + [128]))
	CALL $29(($23 + [112]), $21)
	$20 = *($23 + [112])
	CALL send_inline($20, (*($23 + [116]) - $20))
	$20 = *($23 + [112])
	if ( ($20 == 0) ){ goto $label$104 }
	*($23 + [116]) = $20
	CALL $66($20)
	
.LABEL $label$104
	$20 = *($21 + [28])
	if ( ($20 == 0) ){ goto $label$105 }
	*(($21 + [32])) = $20
	CALL $66($20)
	
.LABEL $label$105
	$20 = *($21 + [16])
	if ( ($20 == 0) ){ goto $label$106 }
	*(($21 + [20])) = $20
	CALL $66($20)
	
.LABEL $label$106
	if ( ((*(($23 + [160])) & [1]) == 0) ){ goto $label$107 }
	CALL $66(*(($23 + [168])))
	
.LABEL $label$107
	if ( ((*($23 + [56]) & [1]) == 0) ){ goto $label$47 }
	CALL $66(*(($23 + [64])))
	
.LABEL $label$47
	$21 = [0]
	*(($23 + [216])) = [0]
	*($23 + [200]) = (int_64)-1
	$2 = *($0)
	*($23 + [184]) = $2
	*($23 + [192]) = $2
	*($23 + [208]) = (int_64)0
	$11 = [0]
	$20 = CALL db_lowerbound_i64($2, $2, (int_64)-5969209044777304064, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$108 }
	$11 = CALL $30(($23 + [184]), $20)
	
.LABEL $label$108
	$18 = *($3)
	*($23 + [120]) = (int_64)1397703940
	*($23 + [112]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = ((int_64)((int_64)$18 / (int_64)10) % (int_64)10)
	$2 = (uint_64)*($23 + [120]) >> (uint_64)(int_64)8)
	$15 = ((int_64)$18 % (int_64)10)
	$12 = (CASTING uint_32)(uint_64 $15)
	$19 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$18 / (int_64)1000) % (int_64)10))
	$16 = ((int_64)((int_64)$18 / (int_64)100) % (int_64)10)
	$13 = (CASTING uint_32)(uint_64 $16)
	
.LOOP $label$110:
	$20 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$111 }
	
.LOOP $label$112:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$109 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$112 }
	
.LABEL $label$111
	$20 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$110 }
	
.LABEL $label$109
	CALL eosio_assert($20, [208])
	CALL $69(($23 + [240]), [960])
	$21 = ((CASTING uint_32)(uint_64 $1) & [255])
	$19 = ($13 & [255])
	$20 = ($19 & [255])
	$13 = ((int_32)$20 != (int_32)$19)
	if ( $13 ){ goto $label$122 }
	$8 = ($12 & [255])
	if ( ($20 == 0) ){ goto $label$123 }
	if ( ((int_32)$21 != (int_32)$8) ){ goto $label$123 }
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$123 }
	if ( ($11 == 0) ){ goto $label$121 }
	$21 = ((int_64)*(($11 + [8])) > (int_64)0)
	goto $label$120 
	
.LABEL $label$123
	if ( ($21 == 0) ){ goto $label$122 }
	if ( ((int_32)$21 != (int_32)$8) ){ goto $label$122 }
	if ( ($20 == 0) ){ goto $label$122 }
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(*($10) + [8])) * (float_64)(float_64)0.001))
	CALL $69(($23 + [240]), [1056])
	goto $label$113 
	
.LABEL $label$122
	$8 = ((int_32)$19 != (int_32)$21)
	if ( $8 ){ goto $label$124 }
	if ( ((int_32)$19 != (int_32)($12 & [255])) ){ goto $label$125 }
	if ( ($19 == 0) ){ goto $label$125 }
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(*($10) + [8])) * (float_64)(float_64)0.003))
	CALL $69(($23 + [240]), [1104])
	goto $label$113 
	
.LABEL $label$125
	if ( ((int_64)((int_64)$15 & (int_64)255) != (int_64)1) ){ goto $label$124 }
	if ( $21 ){ goto $label$124 }
	if ( $13 ){ goto $label$124 }
	if ( $8 ){ goto $label$124 }
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(*($10) + [8])) * (float_64)(float_64)0.01))
	CALL $69(($23 + [240]), [1152])
	goto $label$113 
	
.LABEL $label$124
	if ( ($20 == 0) ){ goto $label$126 }
	if ( ((int_64)((int_64)((int_64)((int_64)$1 | (int_64)$15) | (int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$126 }
	if ( ($11 == 0) ){ goto $label$119 }
	$21 = ((int_64)*(($11 + [8])) > (int_64)0)
	goto $label$118 
	
.LABEL $label$126
	if ( ((int_32)($20 + [1]) != (int_32)$19) ){ goto $label$127 }
	if ( ((int_32)($19 + [1]) != (int_32)$21) ){ goto $label$127 }
	if ( ((int_32)($21 + [1]) != (int_32)($12 & [255])) ){ goto $label$127 }
	if ( ($20 == 0) ){ goto $label$127 }
	if ( ($11 == 0) ){ goto $label$115 }
	$21 = ((int_64)*(($11 + [8])) > (int_64)0)
	goto $label$114 
	
.LABEL $label$127
	if ( ((int_64)((int_64)$18 % (int_64)10000) != (int_64)9991) ){ goto $label$113 }
	if ( ($11 == 0) ){ goto $label$117 }
	$21 = ((int_64)*(($11 + [8])) > (int_64)0)
	goto $label$116 
	
.LABEL $label$121
	$21 = [0]
	
.LABEL $label$120
	CALL eosio_assert($21, [976])
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(($11 + [8]))) * (float_64)(float_64)0.01))
	CALL $69(($23 + [240]), [1008])
	goto $label$113 
	
.LABEL $label$119
	$21 = [0]
	
.LABEL $label$118
	CALL eosio_assert($21, [976])
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(($11 + [8]))) * (float_64)(float_64)0.01))
	CALL $69(($23 + [240]), [1184])
	goto $label$113 
	
.LABEL $label$117
	$21 = [0]
	
.LABEL $label$116
	CALL eosio_assert($21, [976])
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(($11 + [8]))) * (float_64)(float_64)0.05))
	CALL $69(($23 + [240]), [1280])
	goto $label$113 
	
.LABEL $label$115
	$21 = [0]
	
.LABEL $label$114
	CALL eosio_assert($21, [976])
	*($23 + [112]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(($11 + [8]))) * (float_64)(float_64)0.01))
	CALL $69(($23 + [240]), [1232])
	
.LABEL $label$113
	if ( ((int_64)*($23 + [112]) < (int_64)1) ){ goto $label$128 }
	$9 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [880]
	$16 = (int_64)0
	
.LOOP $label$129:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$134 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$133 }
	$20 = ($20 + [165])
	goto $label$132 
	
.LABEL $label$134
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$133
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$132
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$131
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$130
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$129 }
	*($23 + [64]) = $16
	*($23 + [56]) = $9
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	
.LOOP $label$135:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$140 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$20 = ($20 + [165])
	goto $label$138 
	
.LABEL $label$140
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$139
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$137
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$136
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$135 }
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [112]
	$17 = (int_64)0
	
.LOOP $label$141:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$146 }
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$145 }
	$20 = ($20 + [165])
	goto $label$144 
	
.LABEL $label$146
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$143 }
	goto $label$142 
	
.LABEL $label$145
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$144
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	
.LABEL $label$143
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$142
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$141 }
	*(($23 + [148])) = *($23 + [116])
	*($23 + [128]) = $9
	*($23 + [136]) = *($23 + [360])
	*(($23 + [156])) = *(($23 + [124]))
	*(($23 + [152])) = *(($23 + [120]))
	*($23 + [144]) = *($23 + [112])
	CALL $73(($23 + [160]), ($23 + [240]))
	$21 = CALL $28(($23 + [72]), ($23 + [56]), $16, $17, ($23 + [128]))
	CALL $29(($23 + [40]), $21)
	$20 = *($23 + [40])
	CALL send_inline($20, (*($23 + [44]) - $20))
	$20 = *($23 + [40])
	if ( ($20 == 0) ){ goto $label$147 }
	*($23 + [44]) = $20
	CALL $66($20)
	
.LABEL $label$147
	$20 = *($21 + [28])
	if ( ($20 == 0) ){ goto $label$148 }
	*(($21 + [32])) = $20
	CALL $66($20)
	
.LABEL $label$148
	$20 = *($21 + [16])
	if ( ($20 == 0) ){ goto $label$149 }
	*(($21 + [20])) = $20
	CALL $66($20)
	
.LABEL $label$149
	if ( ((*($23 + [160]) & [1]) == 0) ){ goto $label$150 }
	CALL $66(*(($23 + [168])))
	
.LABEL $label$150
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1312])
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($23 + [184])), [1360])
	CALL eosio_assert(((int_64)*($23 + [184]) == (int_64)CALL $fimport$2()), [1408])
	$2 = *($11)
	$21 = ($11 + [16])
	CALL eosio_assert(((int_64)*((($23 + [112]) + [8])) == (int_64)*($21)), [1472])
	$1 = (int_64)
	*($11 + [8]) = $1(*($11 + [8]) - *($23 + [112])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1520])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [1552])
	CALL eosio_assert(((int_64)$2 == (int_64)*($11)), [1584])
	CALL eosio_assert([1], [528])
	CALL memcpy(($23 + [128]), $11, [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($23 + [128]) | [8]), ($11 + [8]), [8])
	CALL eosio_assert([1], [528])
	CALL memcpy((($23 + [128]) + [16]), $21, [8])
	CALL db_update_i64(*($11 + [28]), (int_64)0, ($23 + [128]), [24])
	$21 = (($23 + [184]) + [16])
	if ( (uint_64)($2 <= *($21)) ){ goto $label$128 }
	*($21) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$128
	*($23 + [132]) = ($23 + [112])
	*($23 + [128]) = ($23 + [224])
	*($23 + [136]) = ($23 + [255])
	*($23 + [140]) = ($23 + [312])
	CALL eosio_assert($4, [1312])
	CALL $31(($23 + [272]), $14, ($23 + [128]))
	$21 = *($23 + [316])
	*($23 + [128]) = ($23 + [360])
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [1312])
	CALL $32(($23 + [320]), $21, ($23 + [128]))
	$14 = (($23 + [320]) + [8])
	$21 = CALL db_lowerbound_i64(*($23 + [320]), *($14), (int_64)-5002514023590133760, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$9 }
	$19 = CALL $16(($23 + [320]), $21)
	if ( *($19 + [33]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$14
	CALL $67(($23 + [240]))
	
.LABEL $label$13
	CALL $67(($23 + [56]))
	
.LABEL $label$12
	CALL $67(($23 + [56]))
	
.LABEL $label$11
	$24 = [8]
	goto $label$8 
	
.LABEL $label$10
	$24 = [0]
	goto $label$8 
	
.LABEL $label$9
	$24 = [11]
	
.LABEL $label$8
	
.LOOP $label$151:
	goto $label$316 
	
.LABEL $label$321
	$19 = CALL $16(($23 + [320]), $21)
	if ( *($19 + [33]) ){ goto $label$214 }
	$24 = [8]
	goto $label$151 
	
.LABEL $label$320
	CALL eosio_assert([1], [1648])
	$21 = *($19 + [52])
	$19 = [0]
	$21 = CALL db_next_i64($21, ($23 + [128]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$209 }
	$24 = [9]
	goto $label$151 
	
.LABEL $label$319
	$19 = CALL $16(($23 + [320]), $21)
	$24 = [10]
	goto $label$151 
	
.LABEL $label$318
	if ( ($19 == 0) ){ goto $label$210 }
	$24 = [7]
	goto $label$151 
	
.LABEL $label$317
	if ( (*($19 + [33]) == 0) ){ goto $label$217 }
	$24 = [0]
	goto $label$151 
	
.LABEL $label$316
	$20 = [0]
	$11 = *(($19 + [40]))
	$10 = *($19 + [36])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$215 }
	$24 = [1]
	goto $label$151 
	
.LABEL $label$315
	$21 = $10
	$24 = [2]
	goto $label$151 
	
.LABEL $label$314
	$20 = (((int_32)*(($21 + [8])) != (int_32)[0]) + $20)
	$21 = ($21 + [16])
	if ( ((int_32)$11 != (int_32)$21) ){ goto $label$213 }
	$24 = [3]
	goto $label$151 
	
.LABEL $label$313
	if ( ((int_32)int_32(($11 - $10) >> [4]) != (int_32)($20 & [255])) ){ goto $label$212 }
	$24 = [100]
	goto $label$151 
	
.LABEL $label$312
	$21 = ((int_32)$19 != (int_32)[0])
	CALL eosio_assert($21, [1680])
	CALL eosio_assert($21, [1648])
	$21 = CALL db_next_i64(*($19 + [52]), ($23 + [128]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$152 }
	$24 = [101]
	goto $label$151 
	
.LABEL $label$311
	CALL $16(($23 + [320]), $21)
	$24 = [102]
	goto $label$151 
	
.LABEL $label$310
	CALL $33(($23 + [320]), $19)
	$21 = CALL db_lowerbound_i64(*($23 + [320]), *($14), (int_64)-5002514023590133760, (int_64)0)
	if ( ((int_32)$21 >= (int_32)[0]) ){ goto $label$207 }
	goto $label$208 
	
.LABEL $label$309
	CALL eosio_assert([1], [1648])
	$21 = *($19 + [52])
	$19 = [0]
	$21 = CALL db_next_i64($21, ($23 + [128]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$211 }
	$24 = [5]
	goto $label$151 
	
.LABEL $label$308
	$19 = CALL $16(($23 + [320]), $21)
	$24 = [6]
	goto $label$151 
	
.LABEL $label$307
	if ( $19 ){ goto $label$216 }
	$24 = [11]
	goto $label$151 
	
.LABEL $label$306
	if ( ((int_64)*($23 + [360]) != (int_64)6138623107630568640) ){ goto $label$206 }
	$24 = [46]
	goto $label$151 
	
.LABEL $label$305
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	$24 = [47]
	goto $label$151 
	
.LABEL $label$304
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$183 }
	$24 = [96]
	goto $label$151 
	
.LABEL $label$303
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$24 = [99]
	goto $label$151 
	
.LABEL $label$302
	$20 = ($20 + [165])
	goto $label$153 
	
.LABEL $label$301
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$182 }
	goto $label$181 
	
.LABEL $label$300
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [98]
	goto $label$151 
	
.LABEL $label$299
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	$24 = [95]
	goto $label$151 
	
.LABEL $label$298
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	$24 = [49]
	goto $label$151 
	
.LABEL $label$297
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$184 }
	$24 = [50]
	goto $label$151 
	
.LABEL $label$296
	*($23 + [128]) = $16
	CALL $34(($23 + [56]), ($23 + [128]), *($0), (int_64)1397703940)
	$2 = *($23 + [56])
	if ( ((int_64)$2 <= (int_64)0) ){ goto $label$203 }
	$24 = [51]
	goto $label$151 
	
.LABEL $label$295
	$18 = ((int_64)$18 * (int_64)5000)
	if ( ((int_64)$2 < (int_64)$18) ){ goto $label$204 }
	$24 = [52]
	goto $label$151 
	
.LABEL $label$294
	$9 = *(($3 + [8]))
	$17 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [880]
	$16 = (int_64)0
	$24 = [53]
	goto $label$151 
	
.LABEL $label$293
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$179 }
	$24 = [91]
	goto $label$151 
	
.LABEL $label$292
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$156 }
	$24 = [94]
	goto $label$151 
	
.LABEL $label$291
	$20 = ($20 + [165])
	goto $label$155 
	
.LABEL $label$290
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$178 }
	goto $label$177 
	
.LABEL $label$289
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [93]
	goto $label$151 
	
.LABEL $label$288
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	$24 = [90]
	goto $label$151 
	
.LABEL $label$287
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	$24 = [55]
	goto $label$151 
	
.LABEL $label$286
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$180 }
	$24 = [56]
	goto $label$151 
	
.LABEL $label$285
	*($23 + [48]) = $16
	*($23 + [40]) = $17
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [128]
	$16 = (int_64)0
	$24 = [57]
	goto $label$151 
	
.LABEL $label$284
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$175 }
	$24 = [86]
	goto $label$151 
	
.LABEL $label$283
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$158 }
	$24 = [89]
	goto $label$151 
	
.LABEL $label$282
	$20 = ($20 + [165])
	goto $label$157 
	
.LABEL $label$281
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$174 }
	goto $label$173 
	
.LABEL $label$280
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [88]
	goto $label$151 
	
.LABEL $label$279
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	$24 = [85]
	goto $label$151 
	
.LABEL $label$278
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	$24 = [59]
	goto $label$151 
	
.LABEL $label$277
	$21 = ($21 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$176 }
	$24 = [60]
	goto $label$151 
	
.LABEL $label$276
	$2 = (int_64)0
	$15 = (int_64)59
	$21 = [112]
	$17 = (int_64)0
	$24 = [61]
	goto $label$151 
	
.LABEL $label$275
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$171 }
	$24 = [81]
	goto $label$151 
	
.LABEL $label$274
	$20 = *($21)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$160 }
	$24 = [84]
	goto $label$151 
	
.LABEL $label$273
	$20 = ($20 + [165])
	goto $label$159 
	
.LABEL $label$272
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$170 }
	goto $label$169 
	
.LABEL $label$271
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	$24 = [83]
	goto $label$151 
	
.LABEL $label$270
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $20) << (int_64)56) >> (int_64)56)
	$24 = [80]
	goto $label$151 
	
.LABEL $label$269
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	$24 = [63]
	goto $label$151 
	
.LABEL $label$268
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$172 }
	$24 = [64]
	goto $label$151 
	
.LABEL $label$267
	*(($23 + [32])) = [0]
	*($23 + [24]) = (int_64)0
	$21 = CALL strlen([800])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$168 }
	$24 = [65]
	goto $label$151 
	
.LABEL $label$266
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$167 }
	$24 = [78]
	goto $label$151 
	
.LABEL $label$265
	*($23 + [24]) = ($21 << [1])
	$20 = (($23 + [24]) | [1])
	if ( $21 ){ goto $label$165 }
	goto $label$166 
	
.LABEL $label$264
	$11 = (($21 + [16]) & [-16])
	$20 = CALL $65($11)
	*($23 + [24]) = ($11 | [1])
	*($23 + [32]) = $20
	*($23 + [28]) = $21
	$24 = [67]
	goto $label$151 
	
.LABEL $label$263
	CALL memcpy($20, [800], $21)
	$24 = [68]
	goto $label$151 
	
.LABEL $label$262
	*(($20 + $21)) = [0]
	*(($23 + [152])) = $9
	*(($23 + [164])) = *($23 + [28])
	*($23 + [136]) = (int_64)6138623107630568640
	$21 = ($23 + [32])
	*(($23 + [168])) = *($21)
	*($23 + [128]) = *($0)
	*($23 + [144]) = $18
	*($23 + [160]) = *($23 + [24])
	*($23 + [24]) = [0]
	*($23 + [28]) = [0]
	*($21) = [0]
	$21 = CALL $28(($23 + [72]), ($23 + [40]), $16, $17, ($23 + [128]))
	CALL $29(($23 + [368]), $21)
	$20 = *($23 + [368])
	CALL send_inline($20, (*($23 + [372]) - $20))
	$20 = *($23 + [368])
	if ( ($20 == 0) ){ goto $label$164 }
	$24 = [69]
	goto $label$151 
	
.LABEL $label$261
	*($23 + [372]) = $20
	CALL $66($20)
	$24 = [70]
	goto $label$151 
	
.LABEL $label$260
	$20 = *($21 + [28])
	if ( ($20 == 0) ){ goto $label$163 }
	$24 = [71]
	goto $label$151 
	
.LABEL $label$259
	*(($21 + [32])) = $20
	CALL $66($20)
	$24 = [72]
	goto $label$151 
	
.LABEL $label$258
	$20 = *($21 + [16])
	if ( ($20 == 0) ){ goto $label$162 }
	$24 = [73]
	goto $label$151 
	
.LABEL $label$257
	*(($21 + [20])) = $20
	CALL $66($20)
	$24 = [74]
	goto $label$151 
	
.LABEL $label$256
	if ( ((*(($23 + [160])) & [1]) == 0) ){ goto $label$161 }
	$24 = [75]
	goto $label$151 
	
.LABEL $label$255
	CALL $66(*(($23 + [168])))
	$24 = [76]
	goto $label$151 
	
.LABEL $label$254
	if ( ((*($23 + [24]) & [1]) == 0) ){ goto $label$205 }
	$24 = [77]
	goto $label$151 
	
.LABEL $label$253
	CALL $66(*(($23 + [32])))
	$24 = [12]
	goto $label$151 
	
.LABEL $label$252
	$11 = *($23 + [208])
	if ( ($11 == 0) ){ goto $label$202 }
	$24 = [13]
	goto $label$151 
	
.LABEL $label$251
	$19 = ($23 + [212])
	$21 = *($19)
	if ( ((int_32)$21 == (int_32)$11) ){ goto $label$201 }
	$24 = [14]
	goto $label$151 
	
.LABEL $label$250
	$24 = [15]
	goto $label$151 
	
.LABEL $label$249
	$21 = ($21 + [-24])
	$20 = *($21)
	*($21) = [0]
	if ( ($20 == 0) ){ goto $label$199 }
	$24 = [16]
	goto $label$151 
	
.LABEL $label$248
	CALL $66($20)
	$24 = [17]
	goto $label$151 
	
.LABEL $label$247
	if ( ((int_32)$11 != (int_32)$21) ){ goto $label$200 }
	$24 = [18]
	goto $label$151 
	
.LABEL $label$246
	$21 = *(($23 + [208]))
	goto $label$198 
	
.LABEL $label$245
	$21 = $11
	$24 = [19]
	goto $label$151 
	
.LABEL $label$244
	*($19) = $11
	CALL $66($21)
	$24 = [20]
	goto $label$151 
	
.LABEL $label$243
	if ( ((*($23 + [240]) & [1]) == 0) ){ goto $label$197 }
	$24 = [21]
	goto $label$151 
	
.LABEL $label$242
	CALL $66(*($23 + [248]))
	$24 = [22]
	goto $label$151 
	
.LABEL $label$241
	$19 = *($23 + [296])
	if ( ($19 == 0) ){ goto $label$196 }
	$24 = [23]
	goto $label$151 
	
.LABEL $label$240
	$10 = (($23 + [272]) + [28])
	$21 = *($10)
	if ( ((int_32)$21 == (int_32)$19) ){ goto $label$195 }
	$24 = [24]
	goto $label$151 
	
.LABEL $label$239
	$24 = [25]
	goto $label$151 
	
.LABEL $label$238
	$21 = ($21 + [-24])
	$20 = *($21)
	*($21) = [0]
	if ( ($20 == 0) ){ goto $label$193 }
	$24 = [26]
	goto $label$151 
	
.LABEL $label$237
	$11 = *($20 + [24])
	if ( ($11 == 0) ){ goto $label$192 }
	$24 = [27]
	goto $label$151 
	
.LABEL $label$236
	*(($20 + [28])) = $11
	CALL $66($11)
	$24 = [28]
	goto $label$151 
	
.LABEL $label$235
	CALL $66($20)
	$24 = [29]
	goto $label$151 
	
.LABEL $label$234
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$194 }
	$24 = [30]
	goto $label$151 
	
.LABEL $label$233
	$21 = *(($23 + [296]))
	goto $label$191 
	
.LABEL $label$232
	$21 = $19
	$24 = [31]
	goto $label$151 
	
.LABEL $label$231
	*($10) = $19
	CALL $66($21)
	$24 = [32]
	goto $label$151 
	
.LABEL $label$230
	$19 = *($23 + [344])
	if ( ($19 == 0) ){ goto $label$190 }
	$24 = [33]
	goto $label$151 
	
.LABEL $label$229
	$10 = ($23 + [348])
	$21 = *($10)
	if ( ((int_32)$21 == (int_32)$19) ){ goto $label$189 }
	$24 = [34]
	goto $label$151 
	
.LABEL $label$228
	$24 = [35]
	goto $label$151 
	
.LABEL $label$227
	$21 = ($21 + [-24])
	$20 = *($21)
	*($21) = [0]
	if ( ($20 == 0) ){ goto $label$187 }
	$24 = [36]
	goto $label$151 
	
.LABEL $label$226
	$11 = *($20 + [36])
	if ( ($11 == 0) ){ goto $label$186 }
	$24 = [37]
	goto $label$151 
	
.LABEL $label$225
	*(($20 + [40])) = $11
	CALL $66($11)
	$24 = [38]
	goto $label$151 
	
.LABEL $label$224
	CALL $66($20)
	$24 = [39]
	goto $label$151 
	
.LABEL $label$223
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$188 }
	$24 = [40]
	goto $label$151 
	
.LABEL $label$222
	$21 = *(($23 + [344]))
	goto $label$185 
	
.LABEL $label$221
	$21 = $19
	$24 = [41]
	goto $label$151 
	
.LABEL $label$220
	*($10) = $19
	CALL $66($21)
	$24 = [42]
	goto $label$151 
	
.LABEL $label$219
	*([0] + [4]) = ($23 + [384])
	return (unreachable)
	
.LABEL $label$218
	CALL $67(($23 + [24]))
	
.LABEL $label$217
	$24 = [8]
	goto $label$151 
	
.LABEL $label$216
	$24 = [7]
	goto $label$151 
	
.LABEL $label$215
	$24 = [3]
	goto $label$151 
	
.LABEL $label$214
	$24 = [0]
	goto $label$151 
	
.LABEL $label$213
	$24 = [2]
	goto $label$151 
	
.LABEL $label$212
	$24 = [4]
	goto $label$151 
	
.LABEL $label$211
	$24 = [6]
	goto $label$151 
	
.LABEL $label$210
	$24 = [11]
	goto $label$151 
	
.LABEL $label$209
	$24 = [10]
	goto $label$151 
	
.LABEL $label$208
	$24 = [11]
	goto $label$151 
	
.LABEL $label$207
	$24 = [103]
	goto $label$151 
	
.LABEL $label$206
	$24 = [12]
	goto $label$151 
	
.LABEL $label$205
	$24 = [12]
	goto $label$151 
	
.LABEL $label$204
	$24 = [12]
	goto $label$151 
	
.LABEL $label$203
	$24 = [12]
	goto $label$151 
	
.LABEL $label$202
	$24 = [20]
	goto $label$151 
	
.LABEL $label$201
	$24 = [45]
	goto $label$151 
	
.LABEL $label$200
	$24 = [15]
	goto $label$151 
	
.LABEL $label$199
	$24 = [17]
	goto $label$151 
	
.LABEL $label$198
	$24 = [19]
	goto $label$151 
	
.LABEL $label$197
	$24 = [22]
	goto $label$151 
	
.LABEL $label$196
	$24 = [32]
	goto $label$151 
	
.LABEL $label$195
	$24 = [44]
	goto $label$151 
	
.LABEL $label$194
	$24 = [25]
	goto $label$151 
	
.LABEL $label$193
	$24 = [29]
	goto $label$151 
	
.LABEL $label$192
	$24 = [28]
	goto $label$151 
	
.LABEL $label$191
	$24 = [31]
	goto $label$151 
	
.LABEL $label$190
	$24 = [42]
	goto $label$151 
	
.LABEL $label$189
	$24 = [43]
	goto $label$151 
	
.LABEL $label$188
	$24 = [35]
	goto $label$151 
	
.LABEL $label$187
	$24 = [39]
	goto $label$151 
	
.LABEL $label$186
	$24 = [38]
	goto $label$151 
	
.LABEL $label$185
	$24 = [41]
	goto $label$151 
	
.LABEL $label$184
	$24 = [47]
	goto $label$151 
	
.LABEL $label$183
	$24 = [48]
	goto $label$151 
	
.LABEL $label$182
	$24 = [95]
	goto $label$151 
	
.LABEL $label$181
	$24 = [49]
	goto $label$151 
	
.LABEL $label$180
	$24 = [53]
	goto $label$151 
	
.LABEL $label$179
	$24 = [54]
	goto $label$151 
	
.LABEL $label$178
	$24 = [90]
	goto $label$151 
	
.LABEL $label$177
	$24 = [55]
	goto $label$151 
	
.LABEL $label$176
	$24 = [57]
	goto $label$151 
	
.LABEL $label$175
	$24 = [58]
	goto $label$151 
	
.LABEL $label$174
	$24 = [85]
	goto $label$151 
	
.LABEL $label$173
	$24 = [59]
	goto $label$151 
	
.LABEL $label$172
	$24 = [61]
	goto $label$151 
	
.LABEL $label$171
	$24 = [62]
	goto $label$151 
	
.LABEL $label$170
	$24 = [80]
	goto $label$151 
	
.LABEL $label$169
	$24 = [63]
	goto $label$151 
	
.LABEL $label$168
	$24 = [79]
	goto $label$151 
	
.LABEL $label$167
	$24 = [66]
	goto $label$151 
	
.LABEL $label$166
	$24 = [68]
	goto $label$151 
	
.LABEL $label$165
	$24 = [67]
	goto $label$151 
	
.LABEL $label$164
	$24 = [70]
	goto $label$151 
	
.LABEL $label$163
	$24 = [72]
	goto $label$151 
	
.LABEL $label$162
	$24 = [74]
	goto $label$151 
	
.LABEL $label$161
	$24 = [76]
	goto $label$151 
	
.LABEL $label$160
	$24 = [82]
	goto $label$151 
	
.LABEL $label$159
	$24 = [83]
	goto $label$151 
	
.LABEL $label$158
	$24 = [87]
	goto $label$151 
	
.LABEL $label$157
	$24 = [88]
	goto $label$151 
	
.LABEL $label$156
	$24 = [92]
	goto $label$151 
	
.LABEL $label$155
	$24 = [93]
	goto $label$151 
	
.LABEL $label$154
	$24 = [97]
	goto $label$151 
	
.LABEL $label$153
	$24 = [98]
	goto $label$151 
	
.LABEL $label$152
	$24 = [102]
	goto $label$151 
	(unreachable)
	(unreachable)
	(unreachable)
	$24
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [144])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [208])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $25(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $35(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [256])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [256])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [208])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $35(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [256])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $66($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $66($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $65([32])
	$6 = CALL $36($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $37(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1408])
	$4 = ($1 + [36])
	$3 = *($1)
	$9 = *($1 + [36])
	$6 = ($1 + [40])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$5 = int_32(($8 - $9) >> [4])
	$8 = [0]
	
.LOOP $label$2:
	if ( ((int_64)*($9) != (int_64)*(*($2))) ){ goto $label$3 }
	$7 = ($9 + [8])
	if ( *($7) ){ goto $label$3 }
	*($7) = [1]
	
.LABEL $label$3
	$9 = ($9 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [1584])
	$2 = *($4)
	$8 = *($6)
	$5 = ($8 - $2)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$9 = [34]
	
.LOOP $label$4:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$5 }
	$9 = ((((int_32)uint_32(($5 + [-16]) >> [4]) * (int_32)[9]) + $9) + [9])
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($9)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($11 + [12]) = $8
	*($11 + [8]) = $8
	*($11 + [16]) = ($8 + $9)
	*($11 + [24]) = ($11 + [8])
	*($11 + [56]) = $4
	*($11 + [32]) = $1
	*($11 + [36]) = ($1 + [8])
	*($11 + [40]) = ($1 + [24])
	*($11 + [44]) = ($1 + [28])
	*($11 + [48]) = ($1 + [32])
	*($11 + [52]) = ($1 + [33])
	CALL $19(($11 + [32]), ($11 + [24]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $8, $9)
	if ( ($9 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1728])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1776])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1840])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [40])) = $6
	CALL $66($6)
	
.LABEL $label$7
	CALL $66($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $6
	CALL $66($6)
	
.LABEL $label$10
	CALL $66($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $65([40])
	$6 = CALL $39($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1408])
	$3 = *($1)
	$5 = ($1 + [16])
	$6 = *($2)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*($5)), [1904])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($6))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1952])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1984])
	$6 = *($2 + [4])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*($5)), [1904])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($6))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1952])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1984])
	if ( (*(*($2 + [8])) == 0) ){ goto $label$2 }
	$7 = ($1 + [28])
	$6 = (*($1 + [24]) + [-16])
	$4 = ($2 + [12])
	
.LOOP $label$3:
	$2 = ($6 + [16])
	if ( ((int_32)$2 == (int_32)*($7)) ){ goto $label$1 }
	$5 = *(*($4) + [4])
	CALL eosio_assert(((int_64)*(($6 + [24])) == (int_64)*(($5 + [16]))), [2016])
	$6 = $2
	if ( ((int_64)*($2) != (int_64)*($5 + [8])) ){ goto $label$3 }
	$5 = ($2 + [16])
	$4 = (*($7) - $5)
	$6 = int_32($4 >> [4])
	if ( ($6 == 0) ){ goto $label$4 }
	CALL memmove($2, $5, $4)
	
.LABEL $label$4
	*($7) = ($2 + ($6 << [4]))
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [28])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1584])
	$2 = [24]
	$4 = ($1 + [24])
	$5 = *($1 + [24])
	$6 = *($7)
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$6
	if ( ($2 <= [513]) ){ goto $label$8 }
	$6 = CALL malloc($2)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($10 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$7
	*($9) = $6
	$5 = ($6 + $2)
	*($9 + [8]) = $5
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [528])
	CALL memcpy($6, $1, [8])
	$7 = ($6 + [8])
	CALL eosio_assert(((int_32)($5 - $7) > (int_32)[7]), [528])
	CALL memcpy($7, ($1 + [8]), [8])
	$7 = ($6 + [16])
	CALL eosio_assert(((int_32)($5 - $7) > (int_32)[7]), [528])
	CALL memcpy($7, ($1 + [16]), [8])
	*($9 + [4]) = ($6 + [24])
	CALL $38($9, $4)
	CALL db_update_i64(*($1 + [40]), (int_64)0, $6, $2)
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1408])
	$2 = *($2)
	$3 = *($1)
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	*($6) = *($2)
	*(($6 + [8])) = *(($2 + [8]))
	*($7) = (*($7) + [16])
	$7 = ($1 + [24])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [24])
	CALL $60($7, $2)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1584])
	$4 = *($7)
	$6 = *(($1 + [28]))
	$5 = ($6 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$2 = [24]
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	$2 = (($5 & [-16]) + $2)
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($2)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	$6 = ($9 + $2)
	*($10 + [8]) = $6
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [528])
	CALL memcpy($9, $1, [8])
	$4 = ($9 + [8])
	CALL eosio_assert(((int_32)($6 - $4) > (int_32)[7]), [528])
	CALL memcpy($4, ($1 + [8]), [8])
	$4 = ($9 + [16])
	CALL eosio_assert(((int_32)($6 - $4) > (int_32)[7]), [528])
	CALL memcpy($4, ($1 + [16]), [8])
	*($10 + [4]) = ($9 + [24])
	CALL $38($10, $7)
	CALL db_update_i64(*($1 + [40]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$5 = *($0 + [4])
	$2 = *($0)
	CALL eosio_assert([1], [144])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [208])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	$6 = *($5)
	$4 = ($1 + [28])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)*(($1 + [32]))) ){ goto $label$7 }
	*($8) = *($6)
	*(($8 + [8])) = *(($6 + [8]))
	$8 = (*($4) + [16])
	*($4) = $8
	$5 = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	$5 = ($1 + [24])
	CALL $60($5, $6)
	$8 = *($4)
	
.LABEL $label$6
	$4 = *($5)
	$3 = ($8 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$6 = [24]
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$9 }
	$6 = (($3 & [-16]) + $6)
	
.LABEL $label$9
	if ( ($6 <= [513]) ){ goto $label$11 }
	$8 = CALL malloc($6)
	goto $label$10 
	
.LABEL $label$11
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$10
	*($9) = $8
	$4 = ($8 + $6)
	*($9 + [8]) = $4
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [528])
	CALL memcpy($8, $1, [8])
	$10 = ($8 + [8])
	CALL eosio_assert(((int_32)($4 - $10) > (int_32)[7]), [528])
	CALL memcpy($10, ($1 + [8]), [8])
	$10 = ($8 + [16])
	CALL eosio_assert(((int_32)($4 - $10) > (int_32)[7]), [528])
	CALL memcpy($10, ($1 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $38($9, $5)
	$7 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$12 }
	CALL free($8)
	
.LABEL $label$12
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$13 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $62([2280], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10774]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10776])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10774]) = [1]
	$7 = ($7 << [16])
	*([0] + [10776]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10776])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10776]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10774]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10774]) = [1]
	$3 = ($3 << [16])
	*([0] + [10776]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10776])
	
.LABEL $label$8
	*([0] + [10776]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10664])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10472]
	$1 = (((int_32)$2 * (int_32)[12]) + [10472])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1360])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1408])
	$3 = *($1)
	*($1 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [32]) = (*($1 + [32]) + [1])
	*(($12 = $11) + [40]) = [0]
	*($12 + [32]) = *(*($2))
	$4 = ($1 + [32])
	$2 = ($1 + [40])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)*(($1 + [44]))) ){ goto $label$2 }
	*($5) = *($12 + [32])
	*(($5 + [8])) = *((($12 + [32]) + [8]))
	*($2) = (*($2) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [36]), ($12 + [32]))
	
.LABEL $label$1
	if ( ((int_32)*($4) != (int_32)[10]) ){ goto $label$3 }
	*($1 + [33]) = [1]
	
.LABEL $label$3
	$5 = ($1 + [28])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1584])
	$6 = ($1 + [36])
	$8 = *($1 + [36])
	$7 = *(($1 + [40]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [4]))
	$2 = [34]
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$5 }
	$2 = ((((int_32)uint_32(($9 + [-16]) >> [4]) * (int_32)[9]) + $2) + [9])
	
.LABEL $label$5
	if ( ($2 <= [513]) ){ goto $label$7 }
	$11 = CALL malloc($2)
	goto $label$6 
	
.LABEL $label$7
	$11 = ($11 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$6
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $2)
	*($12 + [24]) = ($12 + [8])
	*($12 + [44]) = $5
	*($12 + [48]) = $4
	*($12 + [56]) = $6
	*($12 + [32]) = $1
	*($12 + [36]) = ($1 + [8])
	*($12 + [40]) = ($1 + [24])
	*($12 + [52]) = ($1 + [33])
	CALL $19(($12 + [32]), ($12 + [24]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $11, $2)
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($11)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [528])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $65(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $72($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $66($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $66($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [544])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $65([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [240])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [240])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $66($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $73(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $73(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $66(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $66(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $57($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $68($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $65($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $68($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $66($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $67($7)
	return (unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [576])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $41($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [240])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}