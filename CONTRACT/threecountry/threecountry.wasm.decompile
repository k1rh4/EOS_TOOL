(data (i32.const 4) "\b0\83\00\00")
(data (i32.const 16) "Invalid hex character\00")
(data (i32.const 48) "0123456789abcdef\00")
(data (i32.const 80) "invalid sha256\00")
(data (i32.const 96) "invalid sha1\00")
(data (i32.const 112) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 368) "carry == 0\00")
(data (i32.const 384) "./utils.hpp\00")
(data (i32.const 400) "DecodeBase58\00")
(data (i32.const 416) "SIG_K1_\00")
(data (i32.const 432) "EOS\00")
(data (i32.const 448) "invalid first pos\00")
(data (i32.const 480) "parse memo error\00")
(data (i32.const 528) "eosio.token\00")
(data (i32.const 544) "transfer\00")
(data (i32.const 560) "it is not my action.\00")
(data (i32.const 592) "read\00")
(data (i32.const 608) "get\00")
(data (i32.const 624) "threecountry\00")
(data (i32.const 640) "cannot create objects in table of another contract\00")
(data (i32.const 704) "write\00")
(data (i32.const 720) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 784) "[SGHK 10003]item not found\00")
(data (i32.const 816) "[SGHK 10037]not lvl up bc selling\00")
(data (i32.const 864) "[SGHK 10005]item do not belong to you\00")
(data (i32.const 912) "[SGHK 10029]card max exp\00")
(data (i32.const 944) "[SGHK 10038]not enought exp\00")
(data (i32.const 976) "cannot pass end iterator to modify\00")
(data (i32.const 1024) "active\00")
(data (i32.const 1040) "sanguohuanka\00")
(data (i32.const 1056) "ccsellitem\00")
(data (i32.const 1072) "object passed to modify is not in multi_index\00")
(data (i32.const 1120) "cannot modify objects in table of another contract\00")
(data (i32.const 1184) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1248) "error reading iterator\00")
(data (i32.const 1280) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1344) "oplog\00")
(data (i32.const 1360) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1424) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1472) "cannot pass end iterator to erase\00")
(data (i32.const 1520) "cannot increment end iterator\00")
(data (i32.const 1552) "object passed to erase is not in multi_index\00")
(data (i32.const 1600) "cannot erase objects in table of another contract\00")
(data (i32.const 1664) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1728) "[SGHK 10002]user not exist\00")
(data (i32.const 1760) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1824) "invalid symbol name\00")
(data (i32.const 1856) "[SGHK 10035]invalid type\00")
(data (i32.const 1888) "[SGHK 10026]invalid item status\00")
(data (i32.const 1920) "sellitem\00")
(data (i32.const 1936) "[SGHK 10041]item is selling\00")
(data (i32.const 1968) "[SGHK 10039]card count error\00")
(data (i32.const 2000) "[SGHK 10016]invalid token\00")
(data (i32.const 2032) "[SGHK 10015]only EOS token allowed\00")
(data (i32.const 2080) "[SGHK 10032]piece count not enought\00")
(data (i32.const 2128) "[SGHK 10000]system data error\00")
(data (i32.const 2160) "destroy:merge\00")
(data (i32.const 2176) "piecemerge\00")
(data (i32.const 2192) "[SGHK 10036]not enought bag grid\00")
(data (i32.const 2240) "destroy:updatecount\00")
(data (i32.const 2272) "delitem\00")
(data (i32.const 2288) "[SGHK 10042]assist card too much\00")
(data (i32.const 2336) "cardmerge\00")
(data (i32.const 2352) "[SGHK 10040]must be different card\00")
(data (i32.const 2400) "d\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00")
(data (i32.const 2432) "[SGHK 10044]can not speedup\00")
(data (i32.const 2464) "[SGHK 10006]box can not open(locking)\00")
(data (i32.const 2512) "[SGHK 10009]box is opening\00")
(data (i32.const 2544) "[SGHK 10048]task id exist\00")
(data (i32.const 2576) "[SGHK 10021]reveal error:card\00")
(data (i32.const 2608) "EOS6pEDTpcmx31sqZTuJ1Ppxp4C9L38jQwP8Lk28rQxAqAax4VdVh\00")
(data (i32.const 2672) "[SGHK 10045]no any invitee\00")
(data (i32.const 2704) "\9a\99\99\99\99\99\a9?\9a\99\99\99\99\99\b9?333333\c3?\9a\99\99\99\99\99\c9?333333\d3?")
(data (i32.const 2752) "Invitation reward from https://sanguohuanka.com\00")
(data (i32.const 2800) "mctgametoken\00")
(data (i32.const 2816) "award\00")
(data (i32.const 2832) "invitereward\00")
(data (i32.const 2848) "[SGHK 10008]reveal data not found\00")
(data (i32.const 2896) "opengiftbag\00")
(data (i32.const 2912) "Gift from https://sanguohuanka.com\00")
(data (i32.const 2960) "openbox\00")
(data (i32.const 2976) "destroy:reveal\00")
(data (i32.const 2992) "inviteaward\00")
(data (i32.const 3008) "rate level =\00")
(data (i32.const 3024) "\n\00")
(data (i32.const 3040) "min_rate=\00")
(data (i32.const 3056) "max_rate=\00")
(data (i32.const 3072) "piece_count=\00")
(data (i32.const 3088) "[SGHK 10034]battle fund data error\00")
(data (i32.const 3136) "Cancel The Game https://sanguohuanka.com\00")
(data (i32.const 3184) "Cancel The Game(time out) https://sanguohuanka.com\00")
(data (i32.const 3248) "[SGHK 10013]game id exist\00")
(data (i32.const 3280) "[SGHK 10014]invalid scene\00")
(data (i32.const 3312) "battle\00")
(data (i32.const 3320) "\01\00\00\00\n\00\00\002\00\00\00d\00\00\00\c8\00\00\00,\01\00\00\f4\01\00\00\e8\03\00\00\dc\05\00\00\b8\0b\00\00\a0\0f\00\00\88\13\00\00@\1f\00\00(#\00\00\10\'\00\00")
(data (i32.const 3392) "[SGHK 10022]not enought box grid\00")
(data (i32.const 3440) "[SGHK 10007]box rate data not found\00")
(data (i32.const 3488) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 3552) "Tie Game Return EOS https://sanguohuanka.com\00")
(data (i32.const 3600) "Congratulation! You Win https://sanguohuanka.com\00")
(data (i32.const 3664) "attempt to add asset with different symbol\00")
(data (i32.const 3712) "addition underflow\00")
(data (i32.const 3744) "addition overflow\00")
(data (i32.const 3776) "[SGHK 10011]no permission\00")
(data (i32.const 3808) "[SGHK 10010]init task is complete\00")
(data (i32.const 3856) "inittask\00")
(data (i32.const 3872) "[SGHK 10001]invalid account\00")
(data (i32.const 3904) "[SGHK 10043]invite exist\00")
(data (i32.const 3936) "inviteref\00")
(data (i32.const 3952) ",\00")
(data (i32.const 3968) "[SGHK 10047]inviter not exist\00")
(data (i32.const 4000) "speedup\00")
(data (i32.const 4016) "[SGHK 10023]invalid MC memo\00")
(data (i32.const 4048) "[SGHK 10024]invalid box id\00")
(data (i32.const 4080) "[SGHK 10017]invalid amount\00")
(data (i32.const 4112) "[SGHK 10025]invalid MC\00")
(data (i32.const 4144) "extbag\00")
(data (i32.const 4160) "extcardgroup\00")
(data (i32.const 4176) "buygiftbag\00")
(data (i32.const 4192) "battlefund\00")
(data (i32.const 4208) "orderdeal\00")
(data (i32.const 4224) "[SGHK 10004]invalid id\00")
(data (i32.const 4256) "attempt to subtract asset with different symbol\00")
(data (i32.const 4304) "subtraction underflow\00")
(data (i32.const 4336) "subtraction overflow\00")
(data (i32.const 4368) "Income at https://sanguohuanka.com\00")
(data (i32.const 4416) "carddeal\00")
(data (i32.const 4432) "unable to find key\00")
(data (i32.const 4464) "[SGHK 10033]battle fund exist\00")
(data (i32.const 4496) "buygifgbag\00")
(data (i32.const 4512) "extgroup\00")
(data (i32.const 12928) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 13024) "stoi\00")
(data (i32.const 13040) ": no conversion\00")
(data (i32.const 13056) ": out of range\00")
(data (i32.const 13072) "stoll\00")
(data (i32.const 13088) "\f0A\00\00")
(data (i32.const 13104) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 13140) "h3\00\00")
(data (i32.const 13160) "\05\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\14\00\00\00\084\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 14352) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 14816) "0123456789ABCDEF")
(data (i32.const 14832) "-+   0X0x\00")
(data (i32.const 14848) "(null)\00")
(data (i32.const 14864) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 14896) "inf\00")
(data (i32.const 14912) "INF\00")
(data (i32.const 14928) "nan\00")
(data (i32.const 14944) "NAN\00")
(data (i32.const 14960) ".\00")
(data (i32.const 14976) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 15072) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 16880) "\05\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\14\00\00\00\88B\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 17040) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 17312) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "assert_recover_key" (func $fimport$13 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$30 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$31 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$32 (param i32)))
(import "env" "is_account" (func $fimport$33 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$37 (param i32)))
(import "env" "prints_l" (func $fimport$38 (param i32 i32)))
(import "env" "printui" (func $fimport$39 (param i64)))
(import "env" "read_action_data" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$41 (param i64)))
(import "env" "require_auth2" (func $fimport$42 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$43 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$44 (param i32 i32)))
(import "env" "sha256" (func $fimport$45 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z8from_hexc" (func $7))
(export "_Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj" (func $8))
(export "_Z6to_hexPKcm" (func $9))
(export "_Z13sha256_to_hexRK11checksum256" (func $10))
(export "_Z11sha1_to_hexRK11checksum160" (func $11))
(export "_Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $12))
(export "_Z11uint64_hashRK11checksum256" (func $13))
(export "_Z13str_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $14))
(export "_Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $15))
(export "_Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $16))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $17))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $20))
(export "_Z10str_to_sigNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $21))
(export "_Z10str_to_pubNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $22))
(export "_Z7all_numNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $23))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $24))
(export "_Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c" (func $25))
(export "_Z15drop_rare_levelRKyRKNSt3__15arrayIyLj4EEE" (func $28))
(export "apply" (func $29))
(export "_ZN4sghk8transferERKyS1_RKN5eosio5assetERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE" (func $31))
(export "_ZN4sghk10tptransferERKyN5eosio8currency8transferE" (func $34))
(export "_ZN4sghk6signinERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $35))
(export "_ZN4sghk8inittaskERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_" (func $37))
(export "_ZN4sghk6battleERKyS1_S1_S1_S1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_" (func $39))
(export "_ZN4sghk9cancelbtlERyS0_" (func $41))
(export "_ZN4sghk6revealERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_" (func $43))
(export "_ZN4sghk11inviteawardERKyRKN5eosio5assetE" (func $45))
(export "_ZN4sghk6dotaskERKyS1_S1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_" (func $47))
(export "_ZN4sghk7openboxERKyS1_" (func $49))
(export "_ZN4sghk7speedupERKyS1_" (func $51))
(export "_ZN4sghk9cardmergeERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $52))
(export "_ZN4sghk10piecemergeERKyS1_" (func $54))
(export "_ZN4sghk8sellitemERKyS1_S1_RKN5eosio5assetE" (func $55))
(export "_ZN4sghk10ccsellitemERKyS1_S1_" (func $57))
(export "_ZN4sghk9cardlvlupERKyS1_" (func $59))
(export "_ZN4sghk4initEv" (func $60))
(export "_ZN4sghk6appendERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_S1_S1_" (func $62))
(export "malloc" (func $471))
(export "free" (func $474))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $487))
(export "_ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $490))
(export "isspace" (func $494))
(export "__errno_location" (func $495))
(export "__assert_fail" (func $496))
(export "fprintf" (func $497))
(export "fflush" (func $498))
(export "__ofl_lock" (func $499))
(export "__lockfile" (func $500))
(export "__unlockfile" (func $501))
(export "__ofl_unlock" (func $502))
(export "__unlock" (func $503))
(export "__lock" (func $504))
(export "__stdio_close" (func $505))
(export "__stdout_write" (func $506))
(export "__stdio_seek" (func $507))
(export "__stdio_write" (func $508))
(export "vfprintf" (func $509))
(export "__fwritex" (func $511))
(export "strerror" (func $513))
(export "strnlen" (func $514))
(export "wctomb" (func $515))
(export "__signbitl" (func $516))
(export "__fpclassifyl" (func $517))
(export "frexpl" (func $518))
(export "wcrtomb" (func $519))
(export "memchr" (func $520))
(export "__lctrans" (func $521))
(export "__lctrans_impl" (func $522))
(export "__mo_lookup" (func $523))
(export "strcmp" (func $524))
(export "__towrite" (func $525))
(export "strtoll" (func $526))
(export "__shlim" (func $527))
(export "__intscan" (func $528))
(export "__shgetc" (func $529))
(export "__uflow" (func $530))
(export "__toread" (func $531))
(export "strtol" (func $532))
(export "memcmp" (func $533))
(export "strlen" (func $534))
(table $0 22 22 anyfunc)
(elem (i32.const 0) $535 $31 $54 $59 $51 $60 $55 $57 $39 $45 $49 $41 $35 $47 $43 $52 $62 $37 $505 $506 $507 $508)



int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $468 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $469 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($19 = $20) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($19 + [32]) = *($1 + [8])
	*($19 + [40]) = *($1 + [12])
	*($19 + [24]) = *($1)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	*(($18 = ($1 + [20]))) = ((int_64)*($18) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1184])
	*($19 + [56]) = [0]
	*($19 + [8]) = ($19 + [56])
	$4 = ($1 + [8])
	*($19 + [68]) = $4
	*($19 + [64]) = $1
	$5 = ($1 + [12])
	*($19 + [72]) = $5
	$6 = ($1 + [16])
	*($19 + [76]) = $6
	$7 = ($1 + [24])
	*($19 + [80]) = $7
	$8 = ($1 + [32])
	*($19 + [84]) = $8
	$9 = ($1 + [36])
	*($19 + [88]) = $9
	$10 = ($1 + [40])
	*($19 + [92]) = $10
	$11 = ($1 + [44])
	*($19 + [96]) = $11
	$12 = ($1 + [48])
	*($19 + [100]) = $12
	$13 = ($1 + [56])
	*($19 + [104]) = $13
	$14 = ($1 + [64])
	*($19 + [108]) = $14
	$15 = ($1 + [80])
	*($19 + [112]) = $15
	$16 = ($1 + [92])
	*($19 + [116]) = $16
	$17 = ($1 + [104])
	*($19 + [120]) = $17
	CALL $129(($19 + [64]), ($19 + [8]))
	$18 = *($19 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($20 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	*($19 + [12]) = $3
	*($19 + [8]) = $3
	*($19 + [16]) = ($3 + $18)
	*($19 + [56]) = ($19 + [8])
	*($19 + [68]) = $4
	*($19 + [72]) = $5
	*($19 + [76]) = $6
	*($19 + [80]) = $7
	*($19 + [84]) = $8
	*($19 + [88]) = $9
	*($19 + [64]) = $1
	*($19 + [92]) = $10
	*($19 + [96]) = $11
	*($19 + [100]) = $12
	*($19 + [104]) = $13
	*($19 + [108]) = $14
	*($19 + [112]) = $15
	*($19 + [116]) = $16
	*($19 + [120]) = $17
	CALL $130(($19 + [64]), ($19 + [56]))
	CALL db_update_i64(*($1 + [116]), *($19 + [48]), $3, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($3)
	
.LABEL $label$3
	$3 = ($0 + [36])
	$2 = *($19 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($19 + [68]) = $1
	*($19 + [64]) = $0
	*($19 + [76]) = $1
	*($19 + [72]) = ($19 + [32])
	*($19 + [80]) = ($19 + [24])
	*($19 + [84]) = ($19 + [48])
	*($19 + [56]) = ($19 + [64])
	CALL $470(($19 + [56]), $3, ($3 + [1]))
	*([0] + [4]) = ($19 + [128])
}

void .FUNC $466 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $467 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [32])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [24])
	*($9 + [44]) = ($4 + [28])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $468(($9 + [32]), ($9 + [24]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $476($4)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
	(unreachable)
}

void .FUNC $464 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $467(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $465 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$18 = (*([0] + [4]) - [128])
	*([0] + [4]) = $18
	*(($19 = $18) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($19 + [32]) = *($1 + [8])
	*($19 + [40]) = *($1 + [12])
	*($19 + [24]) = *($1)
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1184])
	*($19 + [56]) = [0]
	*($19 + [8]) = ($19 + [56])
	$4 = ($1 + [8])
	*($19 + [68]) = $4
	*($19 + [64]) = $1
	$5 = ($1 + [12])
	*($19 + [72]) = $5
	$7 = ($1 + [16])
	*($19 + [76]) = $7
	$8 = ($1 + [24])
	*($19 + [80]) = $8
	$6 = ($1 + [32])
	*($19 + [84]) = $6
	$9 = ($1 + [36])
	*($19 + [88]) = $9
	$10 = ($1 + [40])
	*($19 + [92]) = $10
	$11 = ($1 + [44])
	*($19 + [96]) = $11
	$12 = ($1 + [48])
	*($19 + [100]) = $12
	$13 = ($1 + [56])
	*($19 + [104]) = $13
	$14 = ($1 + [64])
	*($19 + [108]) = $14
	$15 = ($1 + [80])
	*($19 + [112]) = $15
	$16 = ($1 + [92])
	*($19 + [116]) = $16
	$17 = ($1 + [104])
	*($19 + [120]) = $17
	CALL $129(($19 + [64]), ($19 + [8]))
	$3 = *($19 + [56])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$18 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$18 = ($18 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$1
	*($19 + [12]) = $18
	*($19 + [8]) = $18
	*($19 + [16]) = ($18 + $3)
	*($19 + [56]) = ($19 + [8])
	*($19 + [68]) = $4
	*($19 + [72]) = $5
	*($19 + [76]) = $7
	*($19 + [80]) = $8
	*($19 + [84]) = $6
	*($19 + [88]) = $9
	*($19 + [64]) = $1
	*($19 + [92]) = $10
	*($19 + [96]) = $11
	*($19 + [100]) = $12
	*($19 + [104]) = $13
	*($19 + [108]) = $14
	*($19 + [112]) = $15
	*($19 + [116]) = $16
	*($19 + [120]) = $17
	CALL $130(($19 + [64]), ($19 + [56]))
	CALL db_update_i64(*($1 + [116]), *($19 + [48]), $18, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($18)
	
.LABEL $label$3
	$18 = ($0 + [36])
	$2 = *($19 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($19 + [68]) = $1
	*($19 + [64]) = $0
	*($19 + [76]) = $1
	*($19 + [72]) = ($19 + [32])
	*($19 + [80]) = ($19 + [24])
	*($19 + [84]) = ($19 + [48])
	*($19 + [56]) = ($19 + [64])
	CALL $466(($19 + [56]), $18, ($18 + [1]))
	*([0] + [4]) = ($19 + [128])
}

int_32 .FUNC $462 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $475([40])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [592])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $68(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*((($8 + [32]) + [8])) - *($8 + [36])) > (uint_32)[3]), [592])
	CALL memcpy(($6 + [20]), *($8 + [36]), [4])
	*($6 + [28]) = $1
	*($6 + [32]) = [-1]
	*($8 + [24]) = $6
	*($8 + [36]) = (*($8 + [36]) + [4])
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $463(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [16])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $463 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [16])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $460 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	*($4 + [56]) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [24])
	*($4 + [24]) = ($3 + [32])
	CALL $285(($4 + [8]), ($4 + [56]))
	$3 = *($0 + [16])
	*($4 + [56]) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [18])
	*($4 + [24]) = ($3 + [24])
	*($4 + [28]) = ($3 + [32])
	*($4 + [32]) = ($3 + [44])
	*($4 + [36]) = ($3 + [48])
	*($4 + [40]) = ($3 + [56])
	*($4 + [44]) = ($3 + [64])
	*($4 + [48]) = ($3 + [68])
	*($4 + [52]) = ($3 + [72])
	CALL $114(($4 + [8]), ($4 + [56]))
	CALL $68(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($4 + [64])
}

void .FUNC $461 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	$2 = *($0)
	CALL memcpy($1, *(*($0 + [4])), [40])
	*($8 + [56]) = ($8 + [36])
	*($8 + [52]) = $8
	*($8 + [48]) = $8
	*($8 + [64]) = ($8 + [48])
	$4 = ($1 + [8])
	*($8 + [76]) = $4
	*($8 + [72]) = $1
	$5 = ($1 + [16])
	*($8 + [80]) = $5
	*($8 + [84]) = ($1 + [24])
	*($8 + [88]) = ($1 + [32])
	CALL $276(($8 + [72]), ($8 + [64]))
	$3 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)7176366818724937728, *(*($0 + [8])), $3, $8, [36])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = ($2 + [8])
	$3 = *($2)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($8 + [72]) = *($4)
	*($1 + [48]) = CALL db_idx64_store($3, (int_64)7176366818724937728, $6, $7, ($8 + [72]))
	$3 = *($0)
	$6 = *($2)
	$7 = *($1)
	*($8 + [72]) = *($5)
	*(($1 + [52])) = CALL db_idx64_store($6, (int_64)7176366818724937729, $3, $7, ($8 + [72]))
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $535 ()
{
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $475([112])) + [56]) = (int_64)1398362884
	*($4 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1824])
	*($4 + [80]) = $1
	CALL $136(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [84])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $137(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $476($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6497942746098040830, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $132($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [96])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $473 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13014]) == 0) ){ goto $label$2 }
	$7 = *([0] + [13016])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [13014]) = [1]
	$7 = ($7 << [16])
	*([0] + [13016]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13016])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [13016]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [13014]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [13014]) = [1]
	$3 = ($3 << [16])
	*([0] + [13016]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13016])
	
.LABEL $label$8
	*([0] + [13016]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $364 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([80])) + [64]) = $1
	CALL $375(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [68])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $215(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $476($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([13144])
}

void .FUNC $450 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7846189069162774528, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $462($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-7846189069162774528, $5))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [32])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $127(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $190(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *($5 + [72])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($6)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)8526756653867991040, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *(($5 + [76]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($6)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)8526756653867991041, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *(($5 + [80]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = *($6)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)8526756653867991042, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($7)
	
.LABEL $label$5
	$7 = *($0)
	$6 = *($7 + [4])
	$0 = *(($6 + [84]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)8526756653867991043, ($8 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN4sghk7openboxERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [192])
	*([0] + [4]) = $13
	CALL require_auth(*($1))
	CALL $78($0, $1)
	$3 = *($2)
	$4 = *(($0 + [328]))
	$12 = *(($0 + [332]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$1 }
	$11 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$3) ){ goto $label$1 }
	$12 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [304])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$4 }
	$11 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$6 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $208($5, $6)
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$5), [720])
	
.LABEL $label$3
	$4 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($4, [784])
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)*($1)), [864])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($11 + [40])), [2464])
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)[1]), [2512])
	CALL $216(($13 + [80]), $0, $1)
	CALL eosio_assert(((int_32)*(($13 + [100])) != (int_32)[0]), [2192])
	if ( ((*($13 + [172]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($13 + [180])))
	
.LABEL $label$5
	if ( ((*($13 + [160]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($13 + [168])))
	
.LABEL $label$6
	*($13 + [80]) = (int_64)0
	CALL $80($0, $1, ($13 + [80]), [6])
	$3 = CALL $217($0)
	$7 = *(($11 + [16]))
	$8 = *($2)
	$9 = CALL current_time()
	$10 = *($0)
	CALL eosio_assert(((int_64)*($0 + [640]) == (int_64)CALL $fimport$14()), [640])
	*(($6 = CALL $475([56])) + [40]) = ($0 + [640])
	*($6 + [8]) = (int_64)1
	*($6) = ( (int_64)1 ? $3 : (int_64)($3 == 0) )
	*($6 + [16]) = $8
	*($6 + [24]) = $7
	*($6 + [32]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($13 + [24]) = (($13 + [80]) + [40])
	*($13 + [20]) = ($13 + [80])
	*($13 + [16]) = ($13 + [80])
	*($13) = ($13 + [16])
	*($13 + [44]) = ($6 + [8])
	*($13 + [40]) = $6
	*($13 + [48]) = ($6 + [16])
	*($13 + [52]) = ($6 + [24])
	*($13 + [56]) = ($6 + [32])
	CALL $218(($13 + [40]), $13)
	$3 = *($6)
	$1 = CALL db_store_i64(*(($0 + [648])), (int_64)-4992623612187470848, $10, $3, ($13 + [80]), [40])
	*($6 + [44]) = $1
	$12 = ($0 + [656])
	if ( (uint_64)($3 <= *($12)) ){ goto $label$7 }
	*($12) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($13 + [40]) = $6
	$3 = *($6)
	*($13 + [80]) = $3
	*($13 + [16]) = $1
	$2 = ($0 + [668])
	$12 = *($2)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [672]))) ){ goto $label$9 }
	*($12 + [8]) = $3
	*($12 + [16]) = $1
	*($13 + [40]) = [0]
	*($12) = $6
	*($2) = ($12 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $219(($0 + [664]), ($13 + [40]), ($13 + [80]), ($13 + [16]))
	
.LABEL $label$8
	$6 = *($13 + [40])
	*($13 + [40]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $476($6)
	
.LABEL $label$10
	$7 = *($0)
	CALL eosio_assert($4, [976])
	CALL eosio_assert(((int_32)*($11 + [64]) == (int_32)$5), [1072])
	CALL eosio_assert(((int_64)*(($0 + [304])) == (int_64)CALL $fimport$14()), [1120])
	*($11 + [32]) = [2]
	$6 = ($11 + [8])
	*($13 + [16]) = *($6)
	$12 = ($11 + [16])
	*($13 + [24]) = *($12)
	$3 = *($11)
	CALL eosio_assert([1], [1184])
	*($13 + [8]) = (($13 + [80]) + [56])
	*($13 + [4]) = ($13 + [80])
	*($13) = ($13 + [80])
	*($13 + [32]) = $13
	*($13 + [44]) = $6
	*($13 + [40]) = $11
	*($13 + [48]) = $12
	*($13 + [52]) = ($11 + [24])
	*($13 + [56]) = ($11 + [28])
	*($13 + [60]) = ($11 + [32])
	*($13 + [64]) = ($11 + [40])
	*($13 + [68]) = ($11 + [48])
	*($13 + [72]) = ($11 + [56])
	CALL $212(($13 + [40]), ($13 + [32]))
	CALL db_update_i64(*($11 + [68]), $7, ($13 + [80]), [56])
	$5 = ($0 + [320])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$11 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$5 = (($13 + [16]) + [8])
	*($13 + [40]) = *($6)
	if ( (CALL memcmp(($13 + [16]), ($13 + [40]), [8]) == 0) ){ goto $label$12 }
	$1 = ($11 + [72])
	$6 = *($1)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, ($13 + [32]), $3)
	*($1) = $6
	
.LABEL $label$13
	CALL db_idx64_update($6, $7, ($13 + [40]))
	
.LABEL $label$12
	*($13 + [40]) = *($12)
	if ( (CALL memcmp($5, ($13 + [40]), [8]) == 0) ){ goto $label$14 }
	$6 = ($11 + [76])
	$11 = *($6)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$15 }
	$11 = CALL db_idx64_find_primary(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822145, ($13 + [32]), $3)
	*($6) = $11
	
.LABEL $label$15
	CALL db_idx64_update($11, $7, ($13 + [40]))
	
.LABEL $label$14
	*([0] + [4]) = ($13 + [192])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*(($2 + [44])) = [0]
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = $2
	CALL $220(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $221(($2 + [64]), $2)
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($2 + [44])))
	
.LABEL $label$5
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($2 + [32])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $264 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [384])
	*([0] + [4]) = $14
	$11 = *($2 + [16])
	$4 = *(($0 + [408]))
	$8 = *(($0 + [412]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [384])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [720])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [384])), *(($0 + [392])), (int_64)7176366818724937728, $11)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $265($7, $8)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [720])
	
.LABEL $label$3
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [784])
	CALL $216(($14 + [16]), $0, $1)
	CALL eosio_assert(((int_32)*(($14 + [36])) != (int_32)[0]), [2192])
	if ( ((*($14 + [108]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($14 + [116])))
	
.LABEL $label$5
	if ( ((*($14 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($14 + [104])))
	
.LABEL $label$6
	*($14 + [16]) = (int_64)2
	CALL $266(($14 + [336]), ($0 + [8]), ($14 + [16]), ($9 + [24]))
	CALL $226(($14 + [312]), ($14 + [328]), $3, [2])
	$5 = *($14 + [312])
	*($14 + [264]) = (int_64)1000
	*($14 + [16]) = *($14 + [356])
	*($14 + [184]) = *($14 + [360])
	*($14) = *($14 + [364])
	*($14 + [376]) = *($14 + [368])
	CALL $267(($14 + [272]), ($14 + [304]), ($14 + [16]), ($14 + [184]), $14, ($14 + [376]), $5, ($5 + [32]), ($14 + [264]))
	*($14 + [16]) = [101]
	$5 = (($14 + [272]) + [8])
	*($14 + [184]) = CALL $154($0, ($14 + [272]), ($14 + [16]), $5, [400])
	*($14 + [200]) = *($14 + [292])
	*($14 + [192]) = *($14 + [272])
	*($14 + [208]) = *($1)
	$4 = (($14 + [184]) + [32])
	CALL $492($4, $5)
	*($14 + [228]) = [1]
	*($14 + [240]) = (int_64)10000
	*($14 + [248]) = [1]
	*($14 + [252]) = [400]
	*($14 + [232]) = *($14 + [296])
	*($14 + [256]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$11 = *($0)
	*($14) = ($14 + [184])
	CALL $155(($14 + [16]), ($0 + [136]), $11, $14)
	CALL $156($0, $1)
	CALL $268($0, $2)
	CALL eosio_assert($8, [1472])
	CALL eosio_assert($8, [1520])
	$8 = ($14 + [228])
	$5 = CALL db_next_i64(*($9 + [44]), ($14 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL $265($7, $5)
	
.LABEL $label$7
	CALL $269($7, $9)
	*(($14 + [120])) = [0]
	$11 = (int_64)0
	*(($7 = ($14 + [112]))) = (int_64)0
	*(($14 + [164])) = [0]
	*(($14 + [168])) = [0]
	*($14 + [160]) = [0]
	*($14 + [16]) = *($2)
	*($14 + [24]) = *($1)
	*($14 + [32]) = *($9)
	CALL memcpy((($14 + [16]) + [24]), $9, [40])
	*(($14 + [104])) = *((($14 + [184]) + [24]))
	*(($14 + [96])) = *(($14 + [200]))
	*(($14 + [88])) = *((($14 + [184]) + [8]))
	*($14 + [80]) = *($14 + [184])
	CALL $478($7, $4)
	CALL memcpy(($14 + [124]), $8, [36])
	CALL $478(($14 + [160]), $3)
	*($14 + [176]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($0)
	*($14 + [376]) = ($14 + [16])
	CALL $270($14, ($0 + [920]), $13, ($14 + [376]))
	$6 = *($0)
	$10 = (int_64)59
	$9 = [1024]
	$12 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$13 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$7 = ($7 + [165])
	goto $label$11 
	
.LABEL $label$13
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$9
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$8 }
	*($14 + [8]) = $12
	*($14) = $6
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [1040]
	$12 = (int_64)0
	
.LOOP $label$14:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$15 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$7 = ($7 + [165])
	goto $label$16 
	
.LABEL $label$17
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$15
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$14 }
	*($14 + [376]) = $12
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [2896]
	$12 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$23 }
	$7 = *($9)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$7 = ($7 + [165])
	goto $label$21 
	
.LABEL $label$23
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$19
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$18 }
	*($14 + [264]) = $12
	CALL $271($0, $14, ($14 + [376]), ($14 + [264]), ($14 + [16]))
	if ( ((*(($14 + [160])) & [1]) == 0) ){ goto $label$24 }
	CALL $476(*(($14 + [168])))
	
.LABEL $label$24
	if ( ((*(($14 + [112])) & [1]) == 0) ){ goto $label$25 }
	CALL $476(*(($14 + [120])))
	
.LABEL $label$25
	if ( ((*(($14 + [216])) & [1]) == 0) ){ goto $label$26 }
	CALL $476(*(($14 + [224])))
	
.LABEL $label$26
	if ( ((*(($14 + [280])) & [1]) == 0) ){ goto $label$27 }
	CALL $476(*(($14 + [288])))
	
.LABEL $label$27
	$9 = *($14 + [312])
	if ( ($9 == 0) ){ goto $label$28 }
	*($14 + [316]) = $9
	CALL $476($9)
	
.LABEL $label$28
	*([0] + [4]) = ($14 + [384])
}

int_32 .FUNC $265 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([56])) + [40]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	CALL $285(($8 + [40]), ($8 + [32]))
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($6 + [52]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $286(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $266 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [624]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [624]
	$10 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$5 }
	*(($11 + [56])) = [0]
	*($11 + [32]) = $10
	*($11 + [24]) = $8
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	*($11 + [60]) = [0]
	*($11 + [16]) = ($11 + [24])
	CALL $280(($11 + [8]), ($11 + [16]), $2)
	$5 = *($11 + [12])
	if ( ($5 == 0) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_64)*($5 + [8]) != (int_64)*($2)) ){ goto $label$11 }
	if ( ((int_32)*($5 + [16]) == (int_32)*($3)) ){ goto $label$13 }
	CALL $281(($11 + [8]))
	$5 = *($11 + [12])
	if ( ($5 == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	CALL memcpy($0, $5, [40])
	$2 = *($11 + [48])
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [2576])
	CALL memset($0, [0], [40])
	$2 = *($11 + [48])
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = ($11 + [52])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL $476($4)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($11 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $2
	
.LABEL $label$14
	*($3) = $2
	CALL $476($5)
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $267 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$11 = (int_64)0
	$9 = [0]
	
.LOOP $label$1:
	$11 = ((int_64)*(($6 + $9)) + (int_64)$11)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$1 }
	$10 = (int_64)4
	$13 = *($5)
	$11 = ((int_64)((uint_64)$11 % (uint_64)*($8)) + (int_64)1)
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (int_64)3
	$13 = ((int_64)$13 + (int_64)*($4))
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (int_64)2
	$13 = ((int_64)$13 + (int_64)*($3))
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (CASTING uint_64)(uint_32 ((uint_64)$11 <= (uint_64)((int_64)$13 + (int_64)*($2))))
	
.LABEL $label$2
	*($15 + [72]) = $10
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [624]
	$12 = (int_64)0
	
.LOOP $label$3:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$4 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$3 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [624]
	$14 = (int_64)0
	
.LOOP $label$7:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$8 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$9 = [0]
	*((($15 + [32]) + [32])) = [0]
	*(($15 + [70])) = [0]
	*($15 + [40]) = $14
	*($15 + [32]) = $12
	*($15 + [48]) = (int_64)-1
	*($15 + [56]) = (int_64)0
	*($15 + [68]) = [0]
	*($15 + [24]) = ($15 + [32])
	CALL $228(($15 + [16]), ($15 + [24]), ($15 + [72]))
	$10 = CALL $227($1, ($15 + [72]))
	*($15 + [8]) = [0]
	*($15) = (int_64)0
	
.LOOP $label$11:
	$6 = *(($7 + $9))
	CALL $483($15, *((uint_32($6 >> [4]) + [48])))
	CALL $483($15, *((($6 & [15]) + [48])))
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$11 }
	$11 = (int_64)0
	$9 = [0]
	
.LOOP $label$12:
	$11 = ((int_64)*(($7 + $9)) + (int_64)$11)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$12 }
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	$11 = ((uint_64)$11 % (uint_64)$10)
	$9 = *($15 + [20])
	if ( ($9 == 0) ){ goto $label$13 }
	$11 = ((int_64)$11 + (int_64)1)
	
.LOOP $label$14:
	if ( ((int_64)*($9 + [24]) != (int_64)*($15 + [72])) ){ goto $label$13 }
	$11 = ((int_64)$11 + (int_64)-1)
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$15 }
	CALL $229(($15 + [16]))
	$9 = *($15 + [20])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	*($0) = *($9)
	CALL $478(($0 + [8]), ($9 + [8]))
	*($0 + [20 align=4]) = *($9 + [20 align=4])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($0) != (int_64)0), [2576])
	if ( ((*($15) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($15 + [8])))
	
.LABEL $label$16
	$6 = *($15 + [56])
	if ( ($6 == 0) ){ goto $label$17 }
	$0 = ($15 + [60])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($7 + [16])))
	
.LABEL $label$22
	CALL $476($7)
	
.LABEL $label$21
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$20 }
	$9 = *(($15 + [56]))
	goto $label$18 
	
.LABEL $label$19
	$9 = $6
	
.LABEL $label$18
	*($0) = $6
	CALL $476($9)
	
.LABEL $label$17
	*([0] + [4]) = ($15 + [80])
}

void .FUNC _ZN4sghk6revealERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [624]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$9 = *($1)
	$5 = *(($0 + [664]))
	$1 = *(($0 + [668]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$5 }
	$7 = ($1 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$9) ){ goto $label$5 }
	$1 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [640])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$8 }
	$7 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$4), [720])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$1 = CALL db_find_i64(*(($0 + [640])), *(($0 + [648])), (int_64)-4992623612187470848, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $262($4, $1)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$4), [720])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2848])
	CALL $222($0, $2, $3)
	$9 = *($7 + [8])
	if ( ((int_64)$9 == (int_64)2) ){ goto $label$10 }
	if ( ((int_64)$9 != (int_64)1) ){ goto $label$9 }
	*($12 + [8]) = (int_64)0
	$4 = ($7 + [24])
	CALL $80($0, $4, ($12 + [8]), [4])
	CALL $263($0, $4, $7, $2)
	goto $label$9 
	
.LABEL $label$10
	*($12 + [8]) = (int_64)0
	$4 = ($7 + [24])
	CALL $80($0, $4, ($12 + [8]), [5])
	CALL $264($0, $4, $7, $2)
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [592])
	$3 = ($7 + [8])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$4 = *($3)
	*($7 + [24]) = *($7)
	*($7 + [16]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 ($7 + [16])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC _ZN4sghk9cancelbtlERyS0_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [160])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [624]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$9 = *($1)
	$4 = *(($0 + [1024]))
	$1 = *(($0 + [1028]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$5 }
	$7 = ($1 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$9) ){ goto $label$5 }
	$1 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [1000])
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	$7 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [720])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$3 = CALL db_find_i64(*(($0 + [1000])), *(($0 + [1008])), (int_64)4157834734666924032, $9)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $325($5, $3)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [720])
	
.LABEL $label$7
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [3088])
	CALL eosio_assert(((int_64)*($7 + [8]) > (int_64)0), [3088])
	*(($12 + [24])) = [0]
	*($12 + [16]) = (int_64)0
	$3 = CALL strlen([3136])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*($12 + [16]) = ($3 << [1])
	$1 = (($12 + [16]) | [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($3 + [16]) & [-16])
	$1 = CALL $475($6)
	*($12 + [16]) = ($6 | [1])
	*($12 + [24]) = $1
	*($12 + [20]) = $3
	
.LABEL $label$11
	CALL memcpy($1, [3136], $3)
	
.LABEL $label$10
	*(($1 + $3)) = [0]
	if ( ((int_64)*($2) != (int_64)102) ){ goto $label$13 }
	CALL $481(($12 + [16]), [3184])
	
.LABEL $label$13
	CALL $492($12, ($12 + [16]))
	$3 = ($7 + [8])
	CALL $326($0, $7, $3, $12)
	if ( ((*($12) & [1]) == 0) ){ goto $label$14 }
	CALL $476(*($12 + [8]))
	
.LABEL $label$14
	$8 = *($0)
	CALL eosio_assert($4, [976])
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [1072])
	CALL eosio_assert(((int_64)*(($0 + [1000])) == (int_64)CALL $fimport$14()), [1120])
	*(($7 + [20])) = *(($0 + [1300]))
	*(($7 + [16])) = *(($0 + [1296]))
	*(($7 + [12])) = *(($0 + [1292]))
	*($7 + [8]) = *($0 + [1288])
	$9 = *($7)
	*($7 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [1184])
	*($12 + [120]) = (($12 + [32]) + [80])
	*($12 + [116]) = ($12 + [32])
	*($12 + [112]) = ($12 + [32])
	*($12 + [128]) = ($12 + [112])
	*($12 + [140]) = $3
	*($12 + [136]) = $7
	*($12 + [144]) = ($7 + [24])
	*($12 + [148]) = ($7 + [40])
	*($12 + [152]) = ($7 + [56])
	*($12 + [156]) = ($7 + [72])
	CALL $327(($12 + [136]), ($12 + [128]))
	CALL db_update_i64(*($7 + [84]), $8, ($12 + [32]), [80])
	$7 = ($0 + [1016])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$15 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*($12 + [24]))
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [160])
	return (unreachable)
	
.LABEL $label$9
	CALL $477(($12 + [16]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [60])) = [0]
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = $2
	CALL $332(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $333(($2 + [80]), $2)
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($2 + [60])))
	
.LABEL $label$5
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($2 + [48])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [112])
	return [1]
}

void .FUNC _ZN4sghk6dotaskERKyS1_S1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [624]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	CALL $222($0, $4, $5)
	CALL $223($0, $1, $2, $3, $4)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [64])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [16])) = (int_64)1398362884
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert([1], [1760])
	$5 = (int_64)5462355
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [1824])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [592])
	CALL memcpy($8, $4, [8])
	$6 = ($3 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [592])
	$1 = ($8 + [8])
	CALL memcpy($1, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [592])
	CALL memcpy(($8 + [16]), ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($6 = (($8 + [24]) + [8]))) = *(($1 + [8]))
	$5 = *($8)
	*($8 + [24]) = *($1)
	*((($8 + [40]) + [8])) = *($6)
	*($8 + [40]) = *($8 + [24])
	*($8 + [56]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 ($8 + [56])), (int_32 ($8 + [40])), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC _ZN4sghk11inviteawardERKyRKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)4410628), [2000])
	$3 = *($1)
	$4 = *(($0 + [1152]))
	$7 = *(($0 + [1156]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$3) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [1128])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $249($6, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [784])
	$6 = ($8 + [36])
	$7 = [1]
	$8 = *($8 + [36])
	$5 = CALL strlen([512])
	if ( ((int_32)$5 != (int_32)( *(($8 + [40])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$5 }
	$7 = ((int_32)CALL $486($6, [0], [-1], [512], $5) != (int_32)[0])
	
.LABEL $label$5
	CALL eosio_assert($7, [2672])
	*($9 + [40]) = [0]
	*($9 + [32]) = (int_64)0
	CALL $492(($9 + [16]), $6)
	CALL _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c(($9 + [32]), ($9 + [16]), [44])
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($9 + [24]))
	
.LABEL $label$6
	*($9 + [12]) = [1]
	CALL $250($0, $1, ($9 + [32]), $2, ($9 + [12]))
	$7 = *($9 + [32])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = *($9 + [36])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$9 }
	$6 = ([0] - $7)
	$8 = ($8 + [-12])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $6) != (int_32)[-12]) ){ goto $label$10 }
	$8 = *($9 + [32])
	goto $label$8 
	
.LABEL $label$9
	$8 = $7
	
.LABEL $label$8
	*($9 + [36]) = $7
	CALL $476($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [592])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $68(($2 + [48]), ($2 + [8]))
	CALL $68(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $261(($2 + [48]), $2)
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $363 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7932580570217840640, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $376($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-7932580570217840640, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $510([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $510($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $510($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $362 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$4 = [0]
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($2 + $4))
	CALL $483(($6 + [32]), *((uint_32($3 >> [4]) + [48])))
	CALL $483(($6 + [32]), *((($3 & [15]) + [48])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_64)*(($2 + $4)) + (int_64)$5)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	CALL $379(($6 + [8]), $0, $1)
	$4 = [5]
	$2 = *($6 + [24])
	$5 = ((int_64)((uint_64)$5 % (uint_64)(int_64)100) + (int_64)1)
	if ( ((uint_64)$5 <= (uint_64)(CASTING uint_64)(uint_32 $2)) ){ goto $label$3 }
	$4 = [4]
	$2 = (*($6 + [20]) + $2)
	if ( ((uint_64)$5 <= (uint_64)(CASTING uint_64)(uint_32 $2)) ){ goto $label$3 }
	$4 = [3]
	$2 = (*($6 + [16]) + $2)
	if ( ((uint_64)$5 <= (uint_64)(CASTING uint_64)(uint_32 $2)) ){ goto $label$3 }
	$4 = [2]
	$2 = (*($6 + [12]) + $2)
	if ( ((uint_64)$5 <= (uint_64)(CASTING uint_64)(uint_32 $2)) ){ goto $label$3 }
	$4 = ((uint_64)$5 <= (uint_64)(CASTING uint_64)(uint_32 (*($6 + [8]) + $2)))
	
.LABEL $label$3
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($6 + [40])))
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
	return $4
}

void .FUNC $457 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [100])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [8])
	*($9 + [40]) = ($4 + [24])
	*($9 + [44]) = ($4 + [64])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $458(($9 + [32]), ($9 + [24]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $476($4)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
	(unreachable)
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	$2 = *($0)
	$13 = *(*($0 + [4]))
	*($1) = *($13)
	*(($8 = ($1 + [16]))) = *(($13 + [16]))
	*(($7 = ($1 + [8]))) = *(($13 + [8]))
	$3 = ($1 + [24])
	CALL $478($3, ($13 + [24]))
	*($1 + [36 align=4]) = *($13 + [36 align=4])
	$5 = ($1 + [44])
	CALL $478($5, ($13 + [44]))
	*($1 + [56]) = *($13 + [56])
	*(($13 = $12) + [56]) = [0]
	*($13 + [8]) = ($13 + [56])
	*($13 + [28]) = $7
	*($13 + [24]) = $1
	*($13 + [32]) = $8
	*($13 + [36]) = $3
	$4 = ($1 + [36])
	*($13 + [40]) = $4
	$9 = ($1 + [40])
	*($13 + [44]) = $9
	*($13 + [48]) = $5
	$6 = ($1 + [56])
	*($13 + [52]) = $6
	CALL $169(($13 + [24]), ($13 + [8]))
	$10 = *($13 + [56])
	if ( ($10 <= [513]) ){ goto $label$2 }
	$12 = CALL malloc($10)
	goto $label$1 
	
.LABEL $label$2
	$12 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$1
	*($13 + [12]) = $12
	*($13 + [8]) = $12
	*($13 + [16]) = ($12 + $10)
	*($13 + [56]) = ($13 + [8])
	*($13 + [28]) = $7
	*($13 + [24]) = $1
	*($13 + [32]) = $8
	*($13 + [36]) = $3
	*($13 + [40]) = $4
	*($13 + [44]) = $9
	*($13 + [48]) = $5
	*($13 + [52]) = $6
	CALL $170(($13 + [24]), ($13 + [56]))
	$11 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)8526756653867991040, *(*($0 + [8])), $11, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$3 }
	CALL free($12)
	
.LABEL $label$3
	if ( (uint_64)($11 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($13 + [28]) = $1
	*($13 + [36]) = $1
	*($13 + [32]) = *(($0 + [8]))
	*($13 + [24]) = $2
	*($13 + [56]) = ($13 + [24])
	CALL $171(($13 + [56]), ($2 + [36]), ($2 + [37]), ($2 + [38]), ($2 + [39]))
	*([0] + [4]) = ($13 + [64])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([88])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [44]) = [0]
	*($3 + [48]) = [0]
	*($3 + [52]) = [0]
	*($3 + [64]) = $1
	CALL $167(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [68])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $168(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [52])))
	
.LABEL $label$4
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($3 + [32])))
	
.LABEL $label$5
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC $165 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*($4 + [40]) = (int_64)100001
	*($4 + [32]) = (int_64)100001
	*($4 + [48]) = (int_64)1
	*($4 + [56]) = (int_64)1
	$1 = ($0 + [1248])
	$3 = *(($0 + [1276]))
	if ( ((int_32)$3 == (int_32)*(($0 + [1272]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$1), [720])
	if ( $3 ){ goto $label$1 }
	$3 = ($4 + [32])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($1), *(($0 + [1256])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $93($1, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$1), [720])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($4 + [32])
	
.LABEL $label$1
	*(($4 + [24])) = *(($3 + [24]))
	*(($4 + [16])) = *(($3 + [16]))
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*($4) = ((int_64)*($4) + (int_64)1)
	CALL $94($1, $4, *($0))
	$2 = *($4)
	*([0] + [4]) = ($4 + [64])
	return $2
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [8])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903040, $11, $10, ($13 + [8]))
	*(*($8 + [4]) + [88]) = $9
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [24])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903041, $11, $10, ($13 + [8]))
	*((*($8 + [4]) + [92])) = $9
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [18])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903042, $11, $10, ($13 + [8]))
	*((*($8 + [4]) + [96])) = $9
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [64])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903043, $11, $10, ($13 + [8]))
	*((*($8 + [4]) + [100])) = $9
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [44])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903044, $11, $10, ($13 + [8]))
	*((*($8 + [4]) + [104])) = $9
	$8 = *($0)
	$9 = *($8 + [12])
	$10 = *($9)
	$11 = *(*($8 + [8]))
	$12 = *(*($8) + [8])
	*($13 + [8]) = *($9 + [48])
	$9 = CALL db_idx64_store($12, (int_64)4732891782226903045, $11, $10, ($13 + [8]))
	*((*($8 + [4]) + [108])) = $9
	$0 = *($0)
	$8 = *($0 + [12])
	$10 = *($8)
	$11 = *(*($0 + [8]))
	$12 = *(*($0) + [8])
	*($13 + [8]) = *($8 + [68])
	$8 = CALL db_idx64_store($12, (int_64)4732891782226903046, $11, $10, ($13 + [8]))
	*((*($0 + [4]) + [112])) = $8
	*([0] + [4]) = ($13 + [16])
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$3 = *($0)
	$17 = *(*($0 + [4]))
	*($1) = *($17)
	*(($8 = ($1 + [24]))) = *(($17 + [24]))
	*(($6 = ($1 + [16]))) = *(($17 + [16]))
	*(($5 = ($1 + [8]))) = *(($17 + [8]))
	$4 = ($1 + [32])
	CALL $478($4, ($17 + [32]))
	$2 = CALL memcpy(($1 + [44]), ($17 + [44]), [36])
	*(($17 = $16) + [24]) = [0]
	*($17 + [8]) = ($17 + [24])
	*($17 + [36]) = $5
	*($17 + [32]) = $1
	*($17 + [40]) = $6
	$7 = ($1 + [18])
	*($17 + [44]) = $7
	*($17 + [48]) = $8
	*($17 + [52]) = $4
	*($17 + [56]) = $2
	$9 = ($1 + [48])
	*($17 + [60]) = $9
	$10 = ($1 + [56])
	*($17 + [64]) = $10
	$11 = ($1 + [64])
	*($17 + [68]) = $11
	$12 = ($1 + [68])
	*($17 + [72]) = $12
	$13 = ($1 + [72])
	*($17 + [76]) = $13
	CALL $101(($17 + [32]), ($17 + [8]))
	$14 = *($17 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($16 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($17 + [12]) = $16
	*($17 + [8]) = $16
	*($17 + [16]) = ($16 + $14)
	*($17 + [24]) = ($17 + [8])
	*($17 + [36]) = $5
	*($17 + [32]) = $1
	*($17 + [40]) = $6
	*($17 + [44]) = $7
	*($17 + [48]) = $8
	*($17 + [52]) = $4
	*($17 + [56]) = $2
	*($17 + [60]) = $9
	*($17 + [64]) = $10
	*($17 + [68]) = $11
	*($17 + [72]) = $12
	*($17 + [76]) = $13
	CALL $102(($17 + [32]), ($17 + [24]))
	$15 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($3 + [8]), (int_64)4732891782226903040, *(*($0 + [8])), $15, $16, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($15 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($17 + [36]) = $1
	*($17 + [44]) = $1
	*($17 + [40]) = *(($0 + [8]))
	*($17 + [32]) = $3
	*($17 + [24]) = ($17 + [32])
	CALL $164(($17 + [24]), ($3 + [36]), ($3 + [37]), ($3 + [38]), ($3 + [39]), ($3 + [40]), ($3 + [41]), ($3 + [42]))
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*(($18 = ($1 + [20]))) = (*($18) + [-1])
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$6 = ($1 + [16])
	*($20 + [76]) = $6
	$7 = ($1 + [24])
	*($20 + [80]) = $7
	$8 = ($1 + [32])
	*($20 + [84]) = $8
	$9 = ($1 + [36])
	*($20 + [88]) = $9
	$10 = ($1 + [40])
	*($20 + [92]) = $10
	$11 = ($1 + [44])
	*($20 + [96]) = $11
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $6
	*($20 + [80]) = $7
	*($20 + [84]) = $8
	*($20 + [88]) = $9
	*($20 + [64]) = $1
	*($20 + [92]) = $10
	*($20 + [96]) = $11
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $162(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $68(*($1), ($0 + [8]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [32]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [8])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($1 + [32])))
	
.LABEL $label$12
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $476($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($2 + [208])))
	
.LABEL $label$6
	$5 = ($2 + [184])
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($2 + [188])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$9 }
	$4 = ([0] - $3)
	$8 = ($8 + [-48])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-80])
	if ( ((int_32)($8 + $4) != (int_32)[-48]) ){ goto $label$10 }
	$8 = *($5)
	goto $label$8 
	
.LABEL $label$9
	$8 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $476($8)
	
.LABEL $label$7
	if ( ((*(($2 + [136])) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($2 + [144])))
	
.LABEL $label$12
	CALL $476($2)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $476($8)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $456 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $457(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC _ZN4sghk4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [624]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($5)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($9 + [16])) = [0]
	*($9) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [52]) = $1
	*($9 + [48]) = $1
	*($9 + [56]) = ($1 + $3)
	*($9 + [80]) = ($9 + [48])
	*($9 + [88]) = $9
	CALL $67(($9 + [88]), ($9 + [80]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$4 = *($9)
	CALL $492(($9 + [48]), ($9 + [8]))
	$5 = *(($9 + [40]))
	$6 = *(($9 + [32]))
	$7 = *(($9 + [24]))
	*($9 + [88]) = $4
	*($9 + [80]) = $7
	*($9 + [72]) = $6
	*($9 + [64]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$8 = *((*($1) + $8))
	
.LABEL $label$5
	CALL void $1((int_32 ($9 + [88])), (int_32 ($9 + [48])), (int_32 ($9 + [80])), (int_32 ($9 + [72])), (int_32 ($9 + [64])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($9 + [56]))
	
.LABEL $label$6
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($9 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $416 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [56])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)8428183958969122816, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [56]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [20])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [60]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)8428183958969122817, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [60])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $241 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [164]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3733857468820750336)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $240(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_64 .FUNC $398 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	$12 = ( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) )
	$11 = [-1]
	
.LOOP $label$1:
	$10 = ($12 + $11)
	$5 = ($11 + [1])
	$11 = $5
	if ( *(($10 + [1])) ){ goto $label$1 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$14 = (int_64)0
	$13 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$2:
	$15 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$6) ){ goto $label$3 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$11 = ($11 + [165])
	goto $label$4 
	
.LABEL $label$5
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$7 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$6 
	
.LABEL $label$7
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$6
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$7 = ((int_64)$15 | (int_64)$7)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$2 }
	$14 = (int_64)0
	if ( ((int_64)$7 == (int_64)*($3)) ){ goto $label$14 }
	$8 = *(($0 + [1152]))
	$10 = *(($0 + [1156]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	$12 = ($10 + [-24])
	$5 = ([0] - $8)
	
.LOOP $label$16:
	if ( ((int_64)*(*($12)) == (int_64)$7) ){ goto $label$15 }
	$10 = $12
	$11 = ($12 + [-24])
	$12 = $11
	if ( ((int_32)($11 + $5) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$3 = ($0 + [1128])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$18 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	if ( $12 ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$18
	$12 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $7)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $249($3, $12)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	
.LABEL $label$17
	*($16 + [136]) = (CASTING uint_64)(uint_32 (*(*($12 + [24])) + [1]))
	*($16 + [128]) = *($12 + [16])
	$11 = ($12 + [36])
	$10 = *($12 + [36])
	$5 = ($12 + [40])
	$8 = CALL strlen([512])
	if ( ((int_32)$8 != (int_32)( *($5) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$21 }
	if ( (CALL $486($11, [0], [-1], [512], $8) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $411($16, $4, [3952])
	$10 = *($11)
	$4 = ($10 & [1])
	$10 = CALL $482($16, ( *(($12 + [44])) ? ($11 + [1]) : $4 ), ( *($5) ? uint_32($10 >> [1]) : $4 ))
	$5 = ($10 + [8])
	*((($16 + [80]) + [8])) = *($5)
	*($16 + [80]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($5) = [0]
	CALL $478($2, ($16 + [80]))
	if ( ((*($16 + [80]) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*($16 + [88]))
	
.LABEL $label$22
	if ( ((*($16) & [1]) == 0) ){ goto $label$19 }
	CALL $476(*($16 + [8]))
	goto $label$19 
	
.LABEL $label$20
	CALL $492(($16 + [80]), $4)
	CALL $478($2, ($16 + [80]))
	if ( ((*($16 + [80]) & [1]) == 0) ){ goto $label$19 }
	CALL $476(*($16 + [88]))
	
.LABEL $label$19
	$14 = (int_64)5
	$13 = *($16 + [136])
	if ( ((uint_64)$13 >= (uint_64)*(($0 + [1384]))) ){ goto $label$23 }
	$14 = (int_64)4294967295
	if ( (uint_64)($13 <= *($0 + [1344])) ){ goto $label$23 }
	$14 = (int_64)0
	if ( (uint_64)($13 <= *(($0 + [1352]))) ){ goto $label$23 }
	$14 = (int_64)1
	if ( (uint_64)($13 <= *(($0 + [1360]))) ){ goto $label$23 }
	$14 = (int_64)2
	if ( (uint_64)($13 <= *(($0 + [1368]))) ){ goto $label$23 }
	$14 = ( (int_64)3 ? (int_64)4 : (uint_64)($13 <= *(($0 + [1376]))) )
	
.LABEL $label$23
	*($16 + [128]) = $14
	$14 = *($0)
	*($16 + [84]) = ($16 + [128])
	*($16 + [80]) = ($16 + [136])
	CALL eosio_assert([1], [976])
	CALL $412($3, $12, $14, ($16 + [80]))
	*((($16 + [80]) + [16])) = *(($12 + [16]))
	*((($16 + [80]) + [8])) = *(($12 + [8]))
	$14 = *($12)
	*(($16 + [112])) = [0]
	*($16 + [80]) = $14
	*($16 + [104]) = (int_64)0
	$10 = (*(($12 + [28])) - *(($12 + [24])))
	$5 = int_32($10 >> [2])
	if ( ($5 == 0) ){ goto $label$24 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$13 }
	$10 = CALL $475($10)
	*((($16 + [80]) + [24])) = $10
	*(($16 + [112])) = ($10 + ($5 << [2]))
	*(($5 = (($16 + [80]) + [28]))) = $10
	$4 = *(($12 + [24]))
	$12 = (*(($12 + [28])) - $4)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$24 }
	CALL memcpy($10, $4, $12)
	*($5) = (*($5) + $12)
	
.LABEL $label$24
	$10 = ($16 + [116])
	CALL $492($10, $11)
	$12 = *($1 + [4])
	if ( ((uint_32)$12 >= (uint_32)*($1 + [8])) ){ goto $label$26 }
	*($12) = *($16 + [80])
	*(($12 + [16])) = *((($16 + [80]) + [16]))
	*(($12 + [8])) = *((($16 + [80]) + [8]))
	*($12 + [24]) = [0]
	*(($12 + [28])) = [0]
	*(($12 + [32])) = [0]
	$5 = (*((($16 + [80]) + [28])) - *((($16 + [80]) + [24])))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$27 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$12 }
	$5 = CALL $475($5)
	*(($12 + [24])) = $5
	*(($12 + [32])) = ($5 + ($4 << [2]))
	*(($4 = ($12 + [28]))) = $5
	$8 = *((($16 + [80]) + [24]))
	$2 = (*((($16 + [80]) + [28])) - $8)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$27 }
	CALL memcpy($5, $8, $2)
	*($4) = (*($4) + $2)
	
.LABEL $label$27
	CALL $492(($12 + [36]), $10)
	*(($12 = ($1 + [4]))) = (*($12) + [48])
	goto $label$25 
	
.LABEL $label$26
	CALL $413($1, ($16 + [80]))
	
.LABEL $label$25
	*($16 + [72]) = [0]
	*($16 + [64]) = (int_64)0
	CALL $492(($16 + [48]), $11)
	CALL _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c(($16 + [64]), ($16 + [48]), [44])
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$28 }
	CALL $476(*($16 + [56]))
	
.LABEL $label$28
	$10 = *($16 + [64])
	$12 = *($16 + [68])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$30 }
	$11 = $12
	goto $label$29 
	
.LABEL $label$30
	if ( (*($10) & [1]) ){ goto $label$32 }
	$12 = ($10 + [1])
	goto $label$31 
	
.LABEL $label$32
	$12 = *($10 + [8])
	
.LABEL $label$31
	$11 = [-1]
	
.LOOP $label$33:
	$10 = ($12 + $11)
	$5 = ($11 + [1])
	$11 = $5
	if ( *(($10 + [1])) ){ goto $label$33 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$14 = (int_64)0
	$13 = (int_64)59
	$6 = (int_64)0
	
.LOOP $label$34:
	$15 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$9) ){ goto $label$35 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$11 = ($11 + [165])
	goto $label$36 
	
.LABEL $label$37
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$39 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$38 
	
.LABEL $label$39
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$38
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$6 = ((int_64)$15 | (int_64)$6)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$34 }
	$4 = *(($0 + [1152]))
	$10 = *(($0 + [1156]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$40 }
	$12 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$41:
	if ( ((int_64)*(*($12)) == (int_64)$6) ){ goto $label$40 }
	$10 = $12
	$11 = ($12 + [-24])
	$12 = $11
	if ( ((int_32)($11 + $5) != (int_32)[-24]) ){ goto $label$41 }
	
.LABEL $label$40
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$43 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	goto $label$42 
	
.LABEL $label$43
	$12 = [0]
	$11 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $6)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$42 }
	$12 = CALL $249($3, $11)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	
.LABEL $label$42
	$11 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($11, [3968])
	$14 = *($0)
	CALL eosio_assert($11, [976])
	CALL $414($3, $12, $14, $16)
	*(($16 + [16])) = *(($12 + [16]))
	*(($16 + [8])) = *(($12 + [8]))
	$14 = *($12)
	*(($16 + [32])) = [0]
	*($16) = $14
	*($16 + [24]) = (int_64)0
	$11 = (*(($12 + [28])) - *($12 + [24]))
	$10 = int_32($11 >> [2])
	if ( ($10 == 0) ){ goto $label$44 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$11 }
	$11 = CALL $475($11)
	*(($16 + [24])) = $11
	*(($16 + [32])) = ($11 + ($10 << [2]))
	*(($10 = ($16 + [28]))) = $11
	$4 = *(($12 + [24]))
	$5 = (*(($12 + [28])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$44 }
	CALL memcpy($11, $4, $5)
	*($10) = (*($10) + $5)
	
.LABEL $label$44
	$11 = ($16 + [36])
	CALL $492($11, ($12 + [36]))
	$12 = *(($1 + [4]))
	if ( ((uint_32)$12 >= (uint_32)*(($1 + [8]))) ){ goto $label$46 }
	*($12) = *($16)
	*(($12 + [16])) = *(($16 + [16]))
	*(($12 + [8])) = *(($16 + [8]))
	*($12 + [24]) = [0]
	*(($12 + [28])) = [0]
	*(($12 + [32])) = [0]
	$10 = (*(($16 + [28])) - *(($16 + [24])))
	$5 = int_32($10 >> [2])
	if ( ($5 == 0) ){ goto $label$47 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$9 }
	$10 = CALL $475($10)
	*(($12 + [24])) = $10
	*(($12 + [32])) = ($10 + ($5 << [2]))
	*(($5 = ($12 + [28]))) = $10
	$2 = *(($16 + [24]))
	$4 = (*(($16 + [28])) - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$47 }
	CALL memcpy($10, $2, $4)
	*($5) = (*($5) + $4)
	
.LABEL $label$47
	CALL $492(($12 + [36]), $11)
	*(($12 = ($1 + [4]))) = (*($12) + [48])
	goto $label$45 
	
.LABEL $label$46
	CALL $413($1, $16)
	
.LABEL $label$45
	if ( ((*(($16 + [36])) & [1]) == 0) ){ goto $label$48 }
	CALL $476(*(($16 + [44])))
	
.LABEL $label$48
	$12 = *($16 + [24])
	if ( ($12 == 0) ){ goto $label$49 }
	*(($16 + [28])) = $12
	CALL $476($12)
	
.LABEL $label$49
	$11 = *($16 + [68])
	$10 = *($16 + [64])
	$12 = $10
	
.LABEL $label$29
	if ( (((int_32)($11 - $12) / (int_32)[12]) <= [2]) ){ goto $label$50 }
	if ( (*($10 + [12]) & [1]) ){ goto $label$52 }
	$12 = (($10 + [12]) + [1])
	goto $label$51 
	
.LABEL $label$52
	$12 = *(($10 + [20]))
	
.LABEL $label$51
	$11 = [-1]
	
.LOOP $label$53:
	$10 = ($12 + $11)
	$5 = ($11 + [1])
	$11 = $5
	if ( *(($10 + [1])) ){ goto $label$53 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$14 = (int_64)0
	$13 = (int_64)59
	$6 = (int_64)0
	
.LOOP $label$54:
	$15 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$9) ){ goto $label$55 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$11 = ($11 + [165])
	goto $label$56 
	
.LABEL $label$57
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$59 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$58 
	
.LABEL $label$59
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$58
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$6 = ((int_64)$15 | (int_64)$6)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$54 }
	$4 = *(($0 + [1152]))
	$10 = *(($0 + [1156]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$60 }
	$12 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$61:
	if ( ((int_64)*(*($12)) == (int_64)$6) ){ goto $label$60 }
	$10 = $12
	$11 = ($12 + [-24])
	$12 = $11
	if ( ((int_32)($11 + $5) != (int_32)[-24]) ){ goto $label$61 }
	
.LABEL $label$60
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$63 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	goto $label$62 
	
.LABEL $label$63
	$12 = [0]
	$11 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $6)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$62 }
	$12 = CALL $249($3, $11)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$3), [720])
	
.LABEL $label$62
	$11 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($11, [3968])
	$14 = *($0)
	CALL eosio_assert($11, [976])
	CALL $415($3, $12, $14, $16)
	*(($16 + [16])) = *(($12 + [16]))
	*(($16 + [8])) = *(($12 + [8]))
	$14 = *($12)
	*(($16 + [32])) = [0]
	*($16) = $14
	*($16 + [24]) = (int_64)0
	$11 = (*(($12 + [28])) - *($12 + [24]))
	$10 = int_32($11 >> [2])
	if ( ($10 == 0) ){ goto $label$64 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$10 }
	$11 = CALL $475($11)
	*(($16 + [24])) = $11
	*(($16 + [32])) = ($11 + ($10 << [2]))
	*(($10 = ($16 + [28]))) = $11
	$0 = *(($12 + [24]))
	$5 = (*(($12 + [28])) - $0)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$64 }
	CALL memcpy($11, $0, $5)
	*($10) = (*($10) + $5)
	
.LABEL $label$64
	$11 = ($16 + [36])
	CALL $492($11, ($12 + [36]))
	$12 = *(($1 + [4]))
	if ( ((uint_32)$12 >= (uint_32)*(($1 + [8]))) ){ goto $label$66 }
	*($12) = *($16)
	*(($12 + [16])) = *(($16 + [16]))
	*(($12 + [8])) = *(($16 + [8]))
	*($12 + [24]) = [0]
	*(($12 + [28])) = [0]
	*(($12 + [32])) = [0]
	$10 = (*(($16 + [28])) - *(($16 + [24])))
	$5 = int_32($10 >> [2])
	if ( ($5 == 0) ){ goto $label$67 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$8 }
	$10 = CALL $475($10)
	*(($12 + [24])) = $10
	*(($12 + [32])) = ($10 + ($5 << [2]))
	*(($5 = ($12 + [28]))) = $10
	$4 = *(($16 + [24]))
	$0 = (*(($16 + [28])) - $4)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$67 }
	CALL memcpy($10, $4, $0)
	*($5) = (*($5) + $0)
	
.LABEL $label$67
	CALL $492(($12 + [36]), $11)
	*(($12 = ($1 + [4]))) = (*($12) + [48])
	goto $label$65 
	
.LABEL $label$66
	CALL $413($1, $16)
	
.LABEL $label$65
	if ( ((*(($16 + [36])) & [1]) == 0) ){ goto $label$68 }
	CALL $476(*(($16 + [44])))
	
.LABEL $label$68
	$12 = *($16 + [24])
	if ( ($12 == 0) ){ goto $label$69 }
	*(($16 + [28])) = $12
	CALL $476($12)
	
.LABEL $label$69
	$10 = *($16 + [64])
	
.LABEL $label$50
	if ( ($10 == 0) ){ goto $label$70 }
	$12 = *($16 + [68])
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$72 }
	$11 = ([0] - $10)
	$12 = ($12 + [-12])
	
.LOOP $label$73:
	if ( ((*($12) & [1]) == 0) ){ goto $label$74 }
	CALL $476(*(($12 + [8])))
	
.LABEL $label$74
	$12 = ($12 + [-12])
	if ( ((int_32)($12 + $11) != (int_32)[-12]) ){ goto $label$73 }
	$12 = *($16 + [64])
	goto $label$71 
	
.LABEL $label$72
	$12 = $10
	
.LABEL $label$71
	*($16 + [68]) = $10
	CALL $476($12)
	
.LABEL $label$70
	if ( ((*(($16 + [116])) & [1]) == 0) ){ goto $label$75 }
	CALL $476(*(($16 + [124])))
	
.LABEL $label$75
	$12 = *($16 + [104])
	if ( ($12 == 0) ){ goto $label$76 }
	*(($16 + [108])) = $12
	CALL $476($12)
	
.LABEL $label$76
	$14 = $7
	
.LABEL $label$14
	*([0] + [4]) = ($16 + [144])
	return $14
	
.LABEL $label$13
	CALL $491((($16 + [80]) + [24]))
	
.LABEL $label$12
	CALL $491(($12 + [24]))
	
.LABEL $label$11
	CALL $491(($16 + [24]))
	
.LABEL $label$10
	CALL $491(($16 + [24]))
	
.LABEL $label$9
	CALL $491(($12 + [24]))
	
.LABEL $label$8
	CALL $491(($12 + [24]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $399 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $475(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $476($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $390 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	*([0] + [4]) = $16
	$10 = (int_64)0
	$9 = [0]
	
.LOOP $label$1:
	$10 = ((int_64)*(($3 + $9)) + (int_64)$10)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$1 }
	$11 = (int_64)4
	$12 = *($2 + [32])
	$10 = ((int_64)((uint_64)$10 % (uint_64)*($5)) + (int_64)1)
	if ( ((uint_64)$10 <= (uint_64)$12) ){ goto $label$2 }
	$11 = (int_64)3
	$12 = ((int_64)*($2 + [28]) + (int_64)$12)
	if ( ((uint_64)$10 <= (uint_64)$12) ){ goto $label$2 }
	$11 = (int_64)2
	$12 = ((int_64)$12 + (int_64)*($2 + [24]))
	if ( ((uint_64)$10 <= (uint_64)$12) ){ goto $label$2 }
	$11 = (CASTING uint_64)(uint_32 ((uint_64)$10 <= (uint_64)((int_64)$12 + (int_64)*($2 + [20]))))
	
.LABEL $label$2
	$3 = *($6)
	$2 = *($6 + [4])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	$10 = (int_64)0
	$12 = (int_64)59
	$9 = [624]
	$13 = (int_64)0
	
.LOOP $label$4:
	$14 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$5 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$5
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$4 }
	$10 = (int_64)0
	$12 = (int_64)59
	$9 = [624]
	$15 = (int_64)0
	
.LOOP $label$8:
	$14 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$3 = *($9)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$9
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$8 }
	*((($16 + [16]) + [32])) = [0]
	*(($16 + [54])) = [0]
	*($16 + [32]) = (int_64)-1
	*($16 + [52]) = [0]
	*($16 + [24]) = $15
	*($16 + [16]) = $13
	*($16 + [40]) = (int_64)0
	$9 = CALL db_lowerbound_i64($13, $15, (int_64)-7922548076370198528, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $193(($16 + [16]), $9)
	$5 = ($6 + [8])
	$2 = ($6 + [4])
	
.LOOP $label$13:
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)*($5)) ){ goto $label$15 }
	*($3) = *($9)
	CALL $492(($3 + [8]), ($9 + [8]))
	*($3 + [20 align=4]) = *($9 + [20 align=4])
	*($2) = (*($2) + [32])
	goto $label$14 
	
.LABEL $label$15
	CALL $391($6, $9)
	
.LABEL $label$14
	CALL eosio_assert([1], [1520])
	$9 = CALL db_next_i64(*($9 + [32]), ($16 + [56]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $193(($16 + [16]), $9)
	goto $label$13 
	
.LABEL $label$12
	$2 = *($16 + [40])
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = ($16 + [44])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = ($9 + [-24])
	$3 = *($9)
	*($9) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*(($3 + [16])))
	
.LABEL $label$21
	CALL $476($3)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$19 }
	$9 = *(($16 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$9 = $2
	
.LABEL $label$17
	*($5) = $2
	CALL $476($9)
	
.LABEL $label$16
	$2 = *(($6 + [4]))
	$3 = *($6)
	
.LABEL $label$3
	$9 = [0]
	*($16 + [24]) = [0]
	*($16 + [16]) = (int_64)0
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$23 }
	$9 = [0]
	$5 = [0]
	goto $label$22 
	
.LABEL $label$23
	$7 = (($16 + [16]) + [8])
	$8 = ($6 + [4])
	$5 = [0]
	
.LOOP $label$24:
	$3 = ($3 + $9)
	if ( ((int_64)*(($3 + [24])) != (int_64)$11) ){ goto $label$25 }
	$2 = *($16 + [20])
	if ( ((uint_32)$2 >= (uint_32)*($7)) ){ goto $label$26 }
	*($2) = *($3)
	CALL $492(($2 + [8]), ($3 + [8]))
	*($2 + [20 align=4]) = *(($3 + [20]))
	*($16 + [20]) = (*($16 + [20]) + [32])
	goto $label$25 
	
.LABEL $label$26
	CALL $392(($16 + [16]), $3)
	
.LABEL $label$25
	$9 = ($9 + [32])
	$3 = *($6)
	$2 = *($8)
	$5 = ($5 + [1])
	if ( ($5 <= int_32(($2 - $3) >> [5])) ){ goto $label$24 }
	$9 = *($16 + [16])
	$5 = *($16 + [20])
	
.LABEL $label$22
	$5 = int_32(($5 - $9) >> [5])
	$10 = (int_64)0
	$9 = [0]
	
.LOOP $label$27:
	$10 = ((int_64)*(($4 + $9)) + (int_64)$10)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$27 }
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	$4 = *($16 + [16])
	$9 = ($4 + [-32])
	$13 = ((int_64)((uint_64)$10 % (uint_64)(CASTING uint_64)(uint_32 $5)) + (int_64)1)
	$14 = (CASTING uint_64)(uint_32 int_32((*($16 + [20]) - $4) >> [5]))
	$10 = (int_64)1
	
.LOOP $label$29:
	if ( ((uint_64)((int_64)$10 + (int_64)-1) >= (uint_64)$14) ){ goto $label$28 }
	$9 = ($9 + [32])
	$12 = ((int_64)$10 & (int_64)4294967295)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$12 != (int_64)$13) ){ goto $label$29 }
	*($0) = *($9)
	CALL $478(($0 + [8]), ($9 + [8]))
	*($0 + [20 align=4]) = *(($9 + [20]))
	$2 = *(($6 + [4]))
	$3 = *($6)
	
.LABEL $label$28
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$32 }
	$8 = ([0] - $2)
	$4 = ($3 + [-32])
	$10 = *($0)
	$5 = *($16 + [8])
	
.LOOP $label$34:
	$9 = ($4 + [32])
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$33 }
	$4 = $9
	$5 = $3
	$3 = ($3 + [32])
	if ( ((int_32)($9 + $8) != (int_32)[-32]) ){ goto $label$34 }
	*($16 + [8]) = $9
	$2 = *($16 + [16])
	if ( $2 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	*($16 + [8]) = $5
	$9 = ($4 + [32])
	if ( ((int_32)($4 - $2) == (int_32)[-64]) ){ goto $label$37 }
	$5 = ($2 + [-32])
	
.LOOP $label$38:
	$4 = ($9 + [32])
	*($9) = *($4)
	$3 = ($9 + [8])
	if ( (*($3) & [1]) ){ goto $label$40 }
	*($3) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*(($9 + [16]))) = [0]
	*(($9 + [12])) = [0]
	
.LABEL $label$39
	CALL $480($3, [0])
	$2 = ($9 + [40])
	$10 = *($2)
	*(($9 + [44])) = [0]
	*($2) = [0]
	$2 = ($9 + [48])
	*(($3 + [8])) = *($2)
	*($3) = $10
	*($2) = [0]
	*(($9 + [20])) = *(($9 + [52]))
	$9 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$38 }
	$2 = *(($6 + [4]))
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$4 = $9
	
.LABEL $label$36
	
.LOOP $label$41:
	$9 = ($2 + [-32])
	if ( ((*(($2 + [-24])) & [1]) == 0) ){ goto $label$42 }
	CALL $476(*(($2 + [-16])))
	
.LABEL $label$42
	$2 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$41 }
	
.LABEL $label$35
	*(($6 + [4])) = $4
	
.LABEL $label$32
	$2 = *($16 + [16])
	if ( ($2 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$9 = *($16 + [20])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$44 }
	$3 = ([0] - $2)
	$9 = ($9 + [-24])
	
.LOOP $label$45:
	if ( ((*($9) & [1]) == 0) ){ goto $label$46 }
	CALL $476(*(($9 + [8])))
	
.LABEL $label$46
	$9 = ($9 + [-32])
	if ( ((int_32)($9 + $3) != (int_32)[-24]) ){ goto $label$45 }
	$9 = *($16 + [16])
	goto $label$43 
	
.LABEL $label$44
	$9 = $2
	
.LABEL $label$43
	*($16 + [20]) = $2
	CALL $476($9)
	
.LABEL $label$30
	*([0] + [4]) = ($16 + [64])
}

void .FUNC $391 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = int_32((*($0 + [4]) - $7) >> [5])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$7 = (*($0 + [8]) - $7)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$7 = int_32($7 >> [4])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL $475(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($4 << [5])))) = *($1)
	CALL $492(($7 + [8]), ($1 + [8]))
	*($7 + [20 align=4]) = *($1 + [20 align=4])
	$2 = ($6 + ($5 << [5]))
	$3 = ($7 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-16])
	
.LOOP $label$8:
	*(($7 + [-32])) = *(($1 + [-16]))
	$5 = ($1 + [-4])
	*(($7 + [-20])) = *($5)
	$6 = ($1 + [-8])
	*(($7 + [-24])) = *($6)
	*($6) = [0]
	*($5) = [0]
	*($1) = [0]
	*(($7 + [-12])) = *(($1 + [4]))
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$7 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $476($5)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $392 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = int_32((*($0 + [4]) - $7) >> [5])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$7 = (*($0 + [8]) - $7)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$7 = int_32($7 >> [4])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL $475(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($4 << [5])))) = *($1)
	CALL $492(($7 + [8]), ($1 + [8]))
	*($7 + [20 align=4]) = *($1 + [20 align=4])
	$2 = ($6 + ($5 << [5]))
	$3 = ($7 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-16])
	
.LOOP $label$8:
	*(($7 + [-32])) = *(($1 + [-16]))
	$5 = ($1 + [-4])
	*(($7 + [-20])) = *($5)
	$6 = ($1 + [-8])
	*(($7 + [-24])) = *($6)
	*($6) = [0]
	*($5) = [0]
	*($1) = [0]
	*(($7 + [-12])) = *(($1 + [4]))
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$7 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $476($5)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $393 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $394(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $394 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($10) = [0]
	$9 = *($1)
	$2 = *($1 + [4])
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $9) / (int_32)[80]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($10) = $3
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$3 }
	$3 = ($10 + [28])
	$4 = ($10 + [36])
	$5 = ($10 + [44])
	$6 = ($10 + [52])
	$7 = ($10 + [56])
	
.LOOP $label$4:
	*($10 + [8]) = $10
	*($10 + [16]) = $9
	*((($10 + [16]) + [8])) = ($9 + [16])
	*($3) = ($9 + [18])
	*((($10 + [16]) + [16])) = ($9 + [24])
	*($4) = ($9 + [32])
	*((($10 + [16]) + [24])) = ($9 + [44])
	*($10 + [20]) = ($9 + [8])
	*($5) = ($9 + [48])
	*((($10 + [16]) + [32])) = ($9 + [56])
	*($6) = ($9 + [64])
	*($7) = ($9 + [68])
	*((($10 + [16]) + [44])) = ($9 + [72])
	CALL $101(($10 + [16]), ($10 + [8]))
	$9 = ($9 + [80])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [4]))
	$9 = *($0)
	$3 = *($10)
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$2 = [0]
	
.LABEL $label$2
	$2 = ($2 - $9)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$6 }
	CALL $70($0, ($3 - $2))
	$9 = *($0)
	goto $label$5 
	
.LABEL $label$6
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$5 }
	*(($0 + [4])) = ($9 + $3)
	
.LABEL $label$5
	*($10 + [16]) = $9
	*($10 + [20]) = $9
	*($10 + [24]) = *(($0 + [4]))
	CALL $206(($10 + [16]), $1)
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $395 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $396 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	*($5 + [24]) = (int_64)4294967296
	*($5 + [32]) = (int_64)85899345940
	*($5 + [40]) = (int_64)17179869188
	*($5 + [48]) = [1]
	*($5 + [16]) = *($1)
	$1 = [0]
	*($5 + [52]) = [0]
	*($5 + [56]) = [1]
	*($5 + [60]) = [5]
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*(($5 + [88])) = (int_64)1397703940
	CALL eosio_assert([1], [1760])
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1824])
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$4 = ($5 + [96])
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*(($5 + [96])) = ($1 << [1])
	$4 = ($4 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = (($1 + [16]) & [-16])
	$4 = CALL $475($2)
	*(($5 + [96])) = ($2 | [1])
	*(($5 + [104])) = $4
	*(($5 + [100])) = $1
	
.LABEL $label$9
	CALL memcpy($4, [512], $1)
	
.LABEL $label$8
	*(($4 + $1)) = [0]
	*(($5 + [116])) = [0]
	*($5 + [108 align=4]) = (int_64)0
	$4 = ($5 + [108])
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*(($5 + [108])) = ($1 << [1])
	$4 = ($4 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$2 = (($1 + [16]) & [-16])
	$4 = CALL $475($2)
	*(($5 + [108])) = ($2 | [1])
	*(($5 + [116])) = $4
	*(($5 + [112])) = $1
	
.LABEL $label$12
	CALL memcpy($4, [512], $1)
	
.LABEL $label$11
	*(($4 + $1)) = [0]
	*($5 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($0)
	*($5 + [8]) = ($5 + [16])
	CALL $419($5, ($0 + [16]), $3, ($5 + [8]))
	if ( ((*(($5 + [108])) & [1]) == 0) ){ goto $label$14 }
	CALL $476(*(($5 + [116])))
	
.LABEL $label$14
	if ( ((*(($5 + [96])) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($5 + [104])))
	
.LABEL $label$15
	*([0] + [4]) = ($5 + [128])
	return (unreachable)
	
.LABEL $label$7
	CALL $477($4)
	
.LABEL $label$6
	CALL $477($4)
	(unreachable)
}

void .FUNC $397 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	*($13 + [168]) = [0]
	*($13 + [160]) = (int_64)0
	$10 = *($1)
	$3 = *(($0 + [1152]))
	$7 = *(($0 + [1156]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [1128])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [720])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $249($4, $6)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [720])
	
.LABEL $label$3
	CALL eosio_assert(($8 == 0), [3904])
	*(($13 + [152])) = [0]
	*($13 + [144]) = (int_64)0
	$8 = CALL strlen([512])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$9 }
	*($13 + [144]) = ($8 << [1])
	$6 = (($13 + [144]) | [1])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $475($7)
	*($13 + [144]) = ($7 | [1])
	*($13 + [152]) = $6
	*($13 + [148]) = $8
	
.LABEL $label$8
	CALL memcpy($6, [512], $8)
	
.LABEL $label$7
	*(($6 + $8)) = [0]
	$8 = *($2)
	$6 = CALL strlen([512])
	if ( ((int_32)$6 != (int_32)( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$11 }
	if ( (CALL $486($2, [0], [-1], [512], $6) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$10 = CALL $398($0, ($13 + [160]), ($13 + [144]), $1, $2)
	goto $label$5 
	
.LABEL $label$10
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	CALL $477(($13 + [144]))
	
.LABEL $label$5
	*(($13 + [128])) = (int_64)0
	*(($13 + [136])) = (int_64)0
	*($13 + [120]) = (int_64)0
	*($13 + [104]) = $10
	*($13 + [96]) = *($1)
	*($13 + [112]) = [0]
	*($13 + [116]) = [0]
	*($13 + [40]) = [0]
	*($13 + [32]) = (int_64)0
	*($13 + [16]) = [0]
	CALL $399(($13 + [32]), ($13 + [16]))
	*($13 + [16]) = [0]
	$6 = *($13 + [40])
	$8 = *($13 + [36])
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$13 }
	*($8) = [0]
	$8 = ($8 + [4])
	*($13 + [36]) = $8
	goto $label$12 
	
.LABEL $label$13
	CALL $399(($13 + [32]), ($13 + [16]))
	$6 = *(($13 + [40]))
	$8 = *($13 + [36])
	
.LABEL $label$12
	*($13 + [16]) = [0]
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$16 }
	*($8) = [0]
	*($13 + [36]) = ($8 + [4])
	$8 = *($13 + [120])
	if ( $8 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $399(($13 + [32]), ($13 + [16]))
	$8 = *($13 + [120])
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*(($13 + [124])) = $8
	CALL $476($8)
	*(($13 + [128])) = [0]
	*(($13 + [120])) = (int_64)0
	
.LABEL $label$14
	*(($8 = (($13 + [96]) + [24]))) = *($13 + [32])
	$6 = (($13 + [32]) + [8])
	*((($13 + [96]) + [32])) = *($6)
	$7 = (($13 + [96]) + [36])
	CALL $478($7, ($13 + [144]))
	$10 = *($0)
	*($13 + [16]) = ($13 + [96])
	CALL $400(($13 + [32]), $4, $10, ($13 + [16]))
	$10 = (int_64)0
	*((($13 + [32]) + [32])) = (int_64)0
	*(($13 + [72])) = (int_64)0
	*(($13 + [88])) = [0]
	*((($13 + [32]) + [16])) = *((($13 + [96]) + [16]))
	*($6) = *((($13 + [96]) + [8]))
	*($13 + [56]) = (int_64)0
	*($13 + [80]) = (int_64)0
	*($13 + [32]) = *($13 + [96])
	CALL $401((($13 + [32]) + [24]), *($8), *(($13 + [124])))
	CALL $478((($13 + [32]) + [36]), $7)
	CALL $402(($13 + [80]), *($13 + [160]), *($13 + [164]))
	$5 = *($0)
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$22 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$17 }
	*($13 + [24]) = $11
	*($13 + [16]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1040]
	$11 = (int_64)0
	
.LOOP $label$23:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$24 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$24
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$23 }
	*($13 + [8]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [3936]
	$11 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$10 > (uint_64)(int_64)8) ){ goto $label$32 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$32
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$28
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$27 }
	*($13) = $11
	CALL $403($0, ($13 + [16]), ($13 + [8]), $13, ($13 + [32]))
	$4 = *($13 + [80])
	if ( ($4 == 0) ){ goto $label$33 }
	$0 = ($13 + [84])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$35 }
	$7 = ([0] - $4)
	$8 = ($8 + [-24])
	
.LOOP $label$36:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$37 }
	CALL $476(*(($8 + [20])))
	
.LABEL $label$37
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$38 }
	*(($8 + [4])) = $6
	CALL $476($6)
	
.LABEL $label$38
	$8 = ($8 + [-48])
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$36 }
	$8 = *(($13 + [80]))
	goto $label$34 
	
.LABEL $label$35
	$8 = $4
	
.LABEL $label$34
	*($0) = $4
	CALL $476($8)
	
.LABEL $label$33
	if ( ((*(($13 + [68])) & [1]) == 0) ){ goto $label$39 }
	CALL $476(*(($13 + [76])))
	
.LABEL $label$39
	$8 = *(($13 + [56]))
	if ( ($8 == 0) ){ goto $label$40 }
	*(($13 + [60])) = $8
	CALL $476($8)
	
.LABEL $label$40
	if ( ((*(($13 + [132])) & [1]) == 0) ){ goto $label$41 }
	CALL $476(*(($13 + [140])))
	
.LABEL $label$41
	$8 = *(($13 + [120]))
	if ( ($8 == 0) ){ goto $label$42 }
	*(($13 + [124])) = $8
	CALL $476($8)
	
.LABEL $label$42
	if ( ((*($13 + [144]) & [1]) == 0) ){ goto $label$43 }
	CALL $476(*($13 + [152]))
	
.LABEL $label$43
	$4 = *($13 + [160])
	if ( ($4 == 0) ){ goto $label$44 }
	$8 = *($13 + [164])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$46 }
	$7 = ([0] - $4)
	$8 = ($8 + [-24])
	
.LOOP $label$47:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$48 }
	CALL $476(*(($8 + [20])))
	
.LABEL $label$48
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$49 }
	*(($8 + [4])) = $6
	CALL $476($6)
	
.LABEL $label$49
	$8 = ($8 + [-48])
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$47 }
	$8 = *($13 + [160])
	goto $label$45 
	
.LABEL $label$46
	$8 = $4
	
.LABEL $label$45
	*($13 + [164]) = $4
	CALL $476($8)
	
.LABEL $label$44
	*([0] + [4]) = ($13 + [176])
	(unreachable)
}

void .FUNC $442 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($1 + [20])) = *(($3 + [12]))
	*(($1 + [16])) = *(($3 + [8]))
	*(($1 + [12])) = *(($3 + [4]))
	$4 = *($1)
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1184])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [24])
	*($5 + [116]) = ($1 + [40])
	*($5 + [120]) = ($1 + [56])
	*($5 + [124]) = ($1 + [72])
	CALL $327(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $485 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $486 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([13024])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [13024], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $488($6)
	
.LABEL $label$1
	CALL $489($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $480 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $475(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $476($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $481 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $479($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $454 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$6 = *($0 + [4])
	$7 = *(($6 + [180]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)7056767238358958081, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [180])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [168]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $459($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)7056767238358958080, $3))
	CALL eosio_assert(((int_32)*($7 + [168]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [180])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $483 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $484($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $488 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $411($1, $0, [13056])
	CALL abort()
	(unreachable)
}

void .FUNC $489 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $411($1, $0, [13040])
	CALL abort()
	(unreachable)
}

void .FUNC $365 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*(($18 = ($1 + [28]))) = (*($18) + [-1])
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$6 = ($1 + [16])
	*($20 + [76]) = $6
	$7 = ($1 + [24])
	*($20 + [80]) = $7
	$8 = ($1 + [32])
	*($20 + [84]) = $8
	$9 = ($1 + [36])
	*($20 + [88]) = $9
	$10 = ($1 + [40])
	*($20 + [92]) = $10
	$11 = ($1 + [44])
	*($20 + [96]) = $11
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $6
	*($20 + [80]) = $7
	*($20 + [84]) = $8
	*($20 + [88]) = $9
	*($20 + [64]) = $1
	*($20 + [92]) = $10
	*($20 + [96]) = $11
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $374(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $367 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $369(*($0 + [4]), $1)
	$6 = *($1 + [24])
	$3 = ( *(($1 + [28])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($3 + [36])
	$7 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	*($9 + [16]) = $9
	*($9 + [28]) = ($1 + [8])
	*($9 + [24]) = $1
	*($9 + [32]) = ($1 + [16])
	*($9 + [36]) = $3
	*($9 + [40]) = ($1 + [36])
	*($9 + [44]) = ($1 + [40])
	CALL $370(($9 + [24]), ($9 + [16]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)4412005227943313408, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($9 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($7, (int_64)4412005227943313408, $4, $5, ($9 + [24]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $366 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([64])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $367(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $368(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [32])))
	
.LABEL $label$4
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $70($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [592])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $69($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $480($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $475($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $480($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $476($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $477($7)
	return (unreachable)
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$9 = ([0] - $3)
	$11 = ($10 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$10 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)$3), [1664])
	$9 = ($10 + [-24])
	$7 = *($4)
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = *($10)
	*($10) = [0]
	$3 = *($9)
	*($9) = $11
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($3 + [144])))
	
.LABEL $label$7
	$8 = ($3 + [120])
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$8 }
	$6 = ($3 + [124])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$5 = ([0] - $4)
	$11 = ($11 + [-48])
	
.LOOP $label$11:
	if ( ((*($11) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($11 + [8])))
	
.LABEL $label$12
	$11 = ($11 + [-80])
	if ( ((int_32)($11 + $5) != (int_32)[-48]) ){ goto $label$11 }
	$11 = *($8)
	goto $label$9 
	
.LABEL $label$10
	$11 = $4
	
.LABEL $label$9
	*($6) = $4
	CALL $476($11)
	
.LABEL $label$8
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$13 }
	CALL $476(*(($3 + [80])))
	
.LABEL $label$13
	CALL $476($3)
	
.LABEL $label$6
	*($9 + [8]) = *($10 + [8])
	*(($9 + [16])) = *(($10 + [16]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$5 }
	$10 = *(($0 + [28]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($3 + [144])))
	
.LABEL $label$16
	$7 = ($3 + [120])
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$17 }
	$8 = ($3 + [124])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$19 }
	$5 = ([0] - $4)
	$11 = ($11 + [-48])
	
.LOOP $label$20:
	if ( ((*($11) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*(($11 + [8])))
	
.LABEL $label$21
	$11 = ($11 + [-80])
	if ( ((int_32)($11 + $5) != (int_32)[-48]) ){ goto $label$20 }
	$11 = *($7)
	goto $label$18 
	
.LABEL $label$19
	$11 = $4
	
.LABEL $label$18
	*($8) = $4
	CALL $476($11)
	
.LABEL $label$17
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($3 + [80])))
	
.LABEL $label$22
	CALL $476($3)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [164]))
	$11 = *(($1 + [168]))
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$24 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3733857468820750336, ($12 + [8]), *($1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$23 }
	
.LABEL $label$24
	CALL db_idx64_remove($11)
	
.LABEL $label$23
	$11 = *(($1 + [172]))
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$26 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3733857468820750335, ($12 + [8]), *($1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$25 }
	
.LABEL $label$26
	CALL db_idx64_remove($11)
	
.LABEL $label$25
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([64])) + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [20])
	*($8 + [56]) = ($6 + [24])
	*($8 + [60]) = ($6 + [36])
	CALL $257(($8 + [40]), ($8 + [32]))
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($6 + [60]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $258(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [44])))
	
.LABEL $label$10
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [28])) = $7
	CALL $476($7)
	
.LABEL $label$11
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[80]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = ((int_32)($6 - $5) / (int_32)[80])
	$3 = ($4 + $1)
	if ( ((uint_32)$3 >= (uint_32)[53687092]) ){ goto $label$3 }
	$6 = [53687091]
	$2 = ((int_32)($2 - $5) / (int_32)[80])
	if ( ((uint_32)$2 > (uint_32)[26843544]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $475(((int_32)$6 * (int_32)[80]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*((($6 = CALL memset($6, [0], [80])) + [40])) = [0]
	*($6 + [32 align=4]) = (int_64)0
	$6 = (*($2) + [80])
	*($2) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	$3 = ($2 + ((int_32)$6 * (int_32)[80]))
	$6 = ($2 + ((int_32)$4 * (int_32)[80]))
	$2 = $6
	
.LOOP $label$8:
	*((($2 = CALL memset($2, [0], [80])) + [40])) = [0]
	*($2 + [32 align=4]) = (int_64)0
	$2 = ($2 + [80])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$4 = ([0] - $1)
	$1 = ($5 + [-40])
	
.LOOP $label$11:
	*(($6 + [-56])) = *(($1 + [-16]))
	*(($6 + [-64])) = *(($1 + [-24]))
	*(($6 + [-72])) = *(($1 + [-32]))
	*(($6 + [-80])) = *(($1 + [-40]))
	*(($6 + [-40])) = *($1)
	$5 = ($1 + [-8])
	*(($6 + [-48])) = *($5)
	*($5) = [0]
	*(($1 + [-4])) = [0]
	*($1) = [0]
	CALL memcpy(($6 + [-36]), ($1 + [4]), [36])
	$6 = ($6 + [-80])
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $4) != (int_32)[-40]) ){ goto $label$11 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $1
	
.LABEL $label$9
	*($0) = $6
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	$6 = ([0] - $5)
	$1 = ($1 + [-48])
	
.LOOP $label$13:
	if ( ((*($1) & [1]) == 0) ){ goto $label$14 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$14
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-48]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $476($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $475(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $476($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($4) = $2
	*($4 + [12]) = ($3 + [16])
	*($4 + [8]) = ($3 + [8])
	*($4 + [16]) = ($3 + [24])
	*($4 + [20]) = ($3 + [26])
	*($4 + [24]) = ($3 + [32])
	*($4 + [28]) = ($3 + [40])
	*($4 + [32]) = ($3 + [56])
	*($4 + [36]) = ($3 + [64])
	*($4 + [40]) = ($3 + [72])
	CALL $196(($4 + [8]), $4)
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $245($3, ($2 + [8]))
	*([0] + [4]) = ($4 + [48])
}

int_32 .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$8 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($8 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[80])
	$8 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$8 <= (uint_32)$7) ){ goto $label$3 }
	CALL $246($1, ($8 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$2 }
	$8 = ((int_32)$8 * (int_32)[80])
	$2 = ($3 + $8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $8)
	$8 = ($5 + [-48])
	
.LOOP $label$5:
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$6
	$8 = ($8 + [-80])
	if ( ((int_32)($8 + $7) != (int_32)[-48]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$7 }
	$7 = ($9 + [28])
	$3 = ($9 + [36])
	$2 = ($9 + [44])
	$1 = ($9 + [52])
	$4 = ($9 + [56])
	
.LOOP $label$8:
	*($9 + [8]) = $0
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [16])
	*($7) = ($8 + [18])
	*((($9 + [16]) + [16])) = ($8 + [24])
	*($3) = ($8 + [32])
	*((($9 + [16]) + [24])) = ($8 + [44])
	*($9 + [20]) = ($8 + [8])
	*($2) = ($8 + [48])
	*((($9 + [16]) + [32])) = ($8 + [56])
	*($1) = ($8 + [64])
	*($4) = ($8 + [68])
	*((($9 + [16]) + [44])) = ($8 + [72])
	CALL $114(($9 + [16]), ($9 + [8]))
	$8 = ($8 + [80])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
	return $0
}

int_32 .FUNC $242 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [64])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($5 = ($0 + [72]))) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*(($0 + [72])) = ($4 | [1])
	*(($0 + [80])) = $5
	*(($0 + [76])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [512], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*(($0 + [96])) = [0]
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	*($0 + [136]) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*($0 + [160]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [24])
	*($6 + [24]) = ($0 + [136])
	*($6 + [28]) = ($0 + [152])
	CALL $243(($6 + [8]), $6)
	$3 = *(*($2 + [8]))
	*($0 + [168]) = [-1]
	*($0 + [164]) = $3
	*(($0 + [172])) = [-1]
	*([0] + [4]) = ($6 + [32])
	return $0
	
.LABEL $label$1
	CALL $477($5)
	return (unreachable)
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	*($4 + [8]) = *($1)
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + [88])
	CALL $244(($4 + [16]), ($4 + [8]))
	CALL $68(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$1 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $475([176])
	$1 = CALL $242($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$7 = *($6 + [164])
	*($8 + [4]) = $7
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $233(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$7 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	if ( ((*($7 + [136]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($7 + [144])))
	
.LABEL $label$10
	$3 = *(($7 + [120]))
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($7 + [124])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$13 }
	$4 = ([0] - $3)
	$6 = ($6 + [-48])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $4) != (int_32)[-48]) ){ goto $label$14 }
	$6 = *(($7 + [120]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $476($6)
	
.LABEL $label$11
	if ( ((*(($7 + [72])) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($7 + [80])))
	
.LABEL $label$16
	CALL $476($7)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $1
}

void .FUNC _ZN4sghk6appendERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_S1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [624]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$11 = *($0)
	*($14 + [12]) = $2
	*($14 + [8]) = $1
	*($14 + [16]) = $3
	*($14 + [20]) = $4
	*($14 + [24]) = $5
	*($14 + [56]) = $11
	CALL eosio_assert(((int_64)*($0 + [56]) == (int_64)CALL $fimport$14()), [640])
	$6 = ($0 + [56])
	*($14 + [32]) = $6
	*($14 + [36]) = ($14 + [8])
	*($14 + [40]) = ($14 + [56])
	*(($9 = CALL $475([48])) + [16]) = [0]
	*($9 + [8 align=4]) = (int_64)0
	*($9 + [28]) = $6
	CALL $71(($14 + [32]), $9)
	*($14 + [48]) = $9
	$11 = *($9)
	*($14 + [32]) = $11
	$7 = *($9 + [32])
	*($14 + [28]) = $7
	$8 = ($0 + [84])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [88]))) ){ goto $label$6 }
	*($6 + [8]) = $11
	*($6 + [16]) = $7
	*($14 + [48]) = [0]
	*($6) = $9
	*($8) = ($6 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $72(($0 + [80]), ($14 + [48]), ($14 + [32]), ($14 + [28]))
	
.LABEL $label$5
	$9 = *($14 + [48])
	*($14 + [48]) = [0]
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($9 + [16])))
	
.LABEL $label$8
	CALL $476($9)
	
.LABEL $label$7
	$11 = *($0)
	*($14 + [12]) = $2
	*($14 + [8]) = $1
	*($14 + [16]) = $3
	*($14 + [20]) = $4
	*($14 + [24]) = $5
	*($14 + [56]) = $11
	CALL eosio_assert(((int_64)*($0 + [184]) == (int_64)CALL $fimport$14()), [640])
	$6 = ($0 + [184])
	*($14 + [32]) = $6
	*($14 + [36]) = ($14 + [8])
	*($14 + [40]) = ($14 + [56])
	*(($9 = CALL $475([48])) + [16]) = [0]
	*($9 + [8 align=4]) = (int_64)0
	*($9 + [28]) = $6
	CALL $73(($14 + [32]), $9)
	*($14 + [48]) = $9
	$11 = *($9)
	*($14 + [32]) = $11
	$1 = *($9 + [32])
	*($14 + [28]) = $1
	$2 = ($0 + [212])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [216]))) ){ goto $label$10 }
	*($6 + [8]) = $11
	*($6 + [16]) = $1
	*($14 + [48]) = [0]
	*($6) = $9
	*($2) = ($6 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $74(($0 + [208]), ($14 + [48]), ($14 + [32]), ($14 + [28]))
	
.LABEL $label$9
	$9 = *($14 + [48])
	*($14 + [48]) = [0]
	if ( ($9 == 0) ){ goto $label$11 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($9 + [16])))
	
.LABEL $label$12
	CALL $476($9)
	
.LABEL $label$11
	*([0] + [4]) = ($14 + [64])
}

int_64 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [40]) = (int_64)100001
	*($5 + [32]) = (int_64)100001
	*($5 + [48]) = (int_64)1
	*($5 + [56]) = (int_64)1
	$1 = ($0 + [1248])
	$4 = *(($0 + [1276]))
	if ( ((int_32)$4 == (int_32)*(($0 + [1272]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	if ( $4 ){ goto $label$1 }
	$4 = ($5 + [32])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($1), *(($0 + [1256])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $93($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($5 + [32])
	
.LABEL $label$1
	*(($2 = ($5 + [24]))) = *(($4 + [24]))
	*(($5 + [16])) = *(($4 + [16]))
	*(($5 + [8])) = *(($4 + [8]))
	*($5) = *($4)
	*($2) = ((int_64)*($2) + (int_64)1)
	CALL $94($1, $5, *($0))
	$3 = *($2)
	*([0] + [4]) = ($5 + [64])
	return $3
}

void .FUNC $199 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$10 = ($1 + [68])
	$11 = *($10)
	$9 = ($1 + [48])
	$16 = *($9)
	$8 = ($1 + [44])
	$17 = *($8)
	$7 = ($1 + [64])
	$18 = *($7)
	$6 = ($1 + [18])
	$19 = *($6)
	$5 = ($1 + [24])
	$20 = *($5)
	$4 = ($1 + [8])
	*(($22 = $21) + [16]) = *($4)
	*($22 + [24]) = $20
	*($22 + [32]) = $19
	*($22 + [40]) = $18
	*($22 + [48]) = $17
	*($22 + [56]) = $16
	*($22 + [64]) = $11
	$11 = *($1)
	*($1 + [56]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [56]))))
	CALL eosio_assert([1], [1184])
	*($22 + [72]) = [0]
	*($22) = ($22 + [72])
	*($22 + [84]) = $4
	*($22 + [80]) = $1
	$13 = ($1 + [16])
	*($22 + [88]) = $13
	*($22 + [92]) = $6
	*($22 + [96]) = $5
	$14 = ($1 + [32])
	*($22 + [100]) = $14
	*($22 + [104]) = $8
	*($22 + [108]) = $9
	$12 = ($1 + [56])
	*($22 + [112]) = $12
	*($22 + [116]) = $7
	*($22 + [120]) = $10
	$15 = ($1 + [72])
	*($22 + [124]) = $15
	CALL $101(($22 + [80]), $22)
	$3 = *($22 + [72])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $3)
	*($22 + [72]) = $22
	*($22 + [84]) = $4
	*($22 + [88]) = $13
	*($22 + [92]) = $6
	*($22 + [96]) = $5
	*($22 + [100]) = $14
	*($22 + [104]) = $8
	*($22 + [80]) = $1
	*($22 + [108]) = $9
	*($22 + [112]) = $12
	*($22 + [116]) = $7
	*($22 + [120]) = $10
	*($22 + [124]) = $15
	CALL $102(($22 + [80]), ($22 + [72]))
	CALL db_update_i64(*($1 + [84]), $2, $21, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$21 = (($22 + [16]) + [8])
	*($22 + [80]) = *($4)
	if ( (CALL memcmp(($22 + [16]), ($22 + [80]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [88])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903040, ($22 + [72]), $11)
	*($4) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($22 + [80]))
	
.LABEL $label$5
	$3 = (($22 + [16]) + [16])
	*($22 + [80]) = *($5)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$7 }
	$5 = ($1 + [92])
	$21 = *($5)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$8 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903041, ($22 + [72]), $11)
	*($5) = $21
	
.LABEL $label$8
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$7
	$21 = (($22 + [16]) + [24])
	*($22 + [80]) = *($6)
	if ( (CALL memcmp($3, ($22 + [80]), [8]) == 0) ){ goto $label$9 }
	$6 = ($1 + [96])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903042, ($22 + [72]), $11)
	*($6) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($22 + [80]))
	
.LABEL $label$9
	$3 = (($22 + [16]) + [32])
	*($22 + [80]) = *($7)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$11 }
	$7 = ($1 + [100])
	$21 = *($7)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$12 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903043, ($22 + [72]), $11)
	*($7) = $21
	
.LABEL $label$12
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$11
	$21 = ($22 + [56])
	*($22 + [80]) = *($8)
	if ( (CALL memcmp($3, ($22 + [80]), [8]) == 0) ){ goto $label$13 }
	$8 = ($1 + [104])
	$3 = *($8)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903044, ($22 + [72]), $11)
	*($8) = $3
	
.LABEL $label$14
	CALL db_idx64_update($3, $2, ($22 + [80]))
	
.LABEL $label$13
	$3 = (($22 + [16]) + [48])
	*($22 + [80]) = *($9)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$15 }
	$9 = ($1 + [108])
	$21 = *($9)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$16 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903045, ($22 + [72]), $11)
	*($9) = $21
	
.LABEL $label$16
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$15
	*($22 + [80]) = *($10)
	if ( (CALL memcmp($3, ($22 + [80]), [8]) == 0) ){ goto $label$17 }
	$21 = ($1 + [112])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$18 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903046, ($22 + [72]), $11)
	*($21) = $1
	
.LABEL $label$18
	CALL db_idx64_update($1, $2, ($22 + [80]))
	
.LABEL $label$17
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $100(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $83(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $492 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $475($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $475([96])
	$6 = CALL $195($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [76])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $176(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [128])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$9 = ($1 + [68])
	$10 = *($9)
	$8 = ($1 + [48])
	$16 = *($8)
	$7 = ($1 + [44])
	$20 = *($7)
	$6 = ($1 + [64])
	$17 = *($6)
	$5 = ($1 + [18])
	$18 = *($5)
	$4 = ($1 + [24])
	$19 = *($4)
	$3 = ($1 + [8])
	*(($21 = $22) + [16]) = *($3)
	*($21 + [24]) = $19
	*($21 + [32]) = $18
	*($21 + [40]) = $17
	*($21 + [48]) = (CASTING uint_64)(uint_32 $20)
	*($21 + [56]) = $16
	*($21 + [64]) = $10
	$10 = *($1)
	*($7) = ($20 + [1])
	CALL eosio_assert([1], [1184])
	*($21 + [72]) = [0]
	*($21) = ($21 + [72])
	*($21 + [84]) = $3
	*($21 + [80]) = $1
	$11 = ($1 + [16])
	*($21 + [88]) = $11
	*($21 + [92]) = $5
	*($21 + [96]) = $4
	$12 = ($1 + [32])
	*($21 + [100]) = $12
	*($21 + [104]) = $7
	*($21 + [108]) = $8
	$13 = ($1 + [56])
	*($21 + [112]) = $13
	*($21 + [116]) = $6
	*($21 + [120]) = $9
	$14 = ($1 + [72])
	*($21 + [124]) = $14
	CALL $101(($21 + [80]), $21)
	$15 = *($21 + [72])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$20 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$20 = ($22 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $20
	
.LABEL $label$1
	*($21 + [4]) = $20
	*($21) = $20
	*($21 + [8]) = ($20 + $15)
	*($21 + [72]) = $21
	*($21 + [84]) = $3
	*($21 + [88]) = $11
	*($21 + [92]) = $5
	*($21 + [96]) = $4
	*($21 + [100]) = $12
	*($21 + [104]) = $7
	*($21 + [80]) = $1
	*($21 + [108]) = $8
	*($21 + [112]) = $13
	*($21 + [116]) = $6
	*($21 + [120]) = $9
	*($21 + [124]) = $14
	CALL $102(($21 + [80]), ($21 + [72]))
	CALL db_update_i64(*($1 + [84]), $2, $20, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($20)
	
.LABEL $label$3
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$20 = (($21 + [16]) + [8])
	*($21 + [80]) = *($3)
	if ( (CALL memcmp(($21 + [16]), ($21 + [80]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [88])
	$15 = *($3)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$6 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903040, ($21 + [72]), $10)
	*($3) = $15
	
.LABEL $label$6
	CALL db_idx64_update($15, $2, ($21 + [80]))
	
.LABEL $label$5
	$15 = (($21 + [16]) + [16])
	*($21 + [80]) = *($4)
	if ( (CALL memcmp($20, ($21 + [80]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [92])
	$20 = *($4)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$8 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903041, ($21 + [72]), $10)
	*($4) = $20
	
.LABEL $label$8
	CALL db_idx64_update($20, $2, ($21 + [80]))
	
.LABEL $label$7
	$20 = (($21 + [16]) + [24])
	*($21 + [80]) = *($5)
	if ( (CALL memcmp($15, ($21 + [80]), [8]) == 0) ){ goto $label$9 }
	$5 = ($1 + [96])
	$15 = *($5)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$10 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903042, ($21 + [72]), $10)
	*($5) = $15
	
.LABEL $label$10
	CALL db_idx64_update($15, $2, ($21 + [80]))
	
.LABEL $label$9
	$15 = (($21 + [16]) + [32])
	*($21 + [80]) = *($6)
	if ( (CALL memcmp($20, ($21 + [80]), [8]) == 0) ){ goto $label$11 }
	$6 = ($1 + [100])
	$20 = *($6)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$12 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903043, ($21 + [72]), $10)
	*($6) = $20
	
.LABEL $label$12
	CALL db_idx64_update($20, $2, ($21 + [80]))
	
.LABEL $label$11
	$20 = ($21 + [56])
	*($21 + [80]) = *($7)
	if ( (CALL memcmp($15, ($21 + [80]), [8]) == 0) ){ goto $label$13 }
	$15 = ($1 + [104])
	$7 = *($15)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903044, ($21 + [72]), $10)
	*($15) = $7
	
.LABEL $label$14
	CALL db_idx64_update($7, $2, ($21 + [80]))
	
.LABEL $label$13
	$7 = (($21 + [16]) + [48])
	*($21 + [80]) = *($8)
	if ( (CALL memcmp($20, ($21 + [80]), [8]) == 0) ){ goto $label$15 }
	$15 = ($1 + [108])
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$16 }
	$20 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903045, ($21 + [72]), $10)
	*($15) = $20
	
.LABEL $label$16
	CALL db_idx64_update($20, $2, ($21 + [80]))
	
.LABEL $label$15
	*($21 + [80]) = *($9)
	if ( (CALL memcmp($7, ($21 + [80]), [8]) == 0) ){ goto $label$17 }
	$20 = ($1 + [112])
	$1 = *($20)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$18 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903046, ($21 + [72]), $10)
	*($20) = $1
	
.LABEL $label$18
	CALL db_idx64_update($1, $2, ($21 + [80]))
	
.LABEL $label$17
	*([0] + [4]) = ($21 + [128])
}

void .FUNC $419 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $475([128])) + [72]) = (int_64)1398362884
	*($4 + [64]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1824])
	*($4 + [80 align=4]) = (int_64)0
	*($4 + [88 align=4]) = (int_64)0
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [112]) = $1
	CALL $420(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [116])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $118(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($3 + [100])))
	
.LABEL $label$9
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($3 + [88])))
	
.LABEL $label$10
	CALL $476($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $418 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [56])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)8428183958969122816, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [56]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [20])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [60]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)8428183958969122817, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [60])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$9 = ($1 + [68])
	$10 = *($9)
	$8 = ($1 + [48])
	$16 = *($8)
	$7 = ($1 + [44])
	$17 = *($7)
	$6 = ($1 + [64])
	$18 = *($6)
	$5 = ($1 + [18])
	$19 = *($5)
	$4 = ($1 + [24])
	$20 = *($4)
	$3 = ($1 + [8])
	*(($22 = $21) + [16]) = *($3)
	*($22 + [24]) = $20
	*($22 + [32]) = $19
	*($22 + [40]) = $18
	*($22 + [48]) = $17
	*($22 + [56]) = $16
	*($22 + [64]) = $10
	$10 = *($1)
	*($6) = [2]
	CALL eosio_assert([1], [1184])
	*($22 + [72]) = [0]
	*($22) = ($22 + [72])
	*($22 + [84]) = $3
	*($22 + [80]) = $1
	$11 = ($1 + [16])
	*($22 + [88]) = $11
	*($22 + [92]) = $5
	*($22 + [96]) = $4
	$12 = ($1 + [32])
	*($22 + [100]) = $12
	*($22 + [104]) = $7
	*($22 + [108]) = $8
	$13 = ($1 + [56])
	*($22 + [112]) = $13
	*($22 + [116]) = $6
	*($22 + [120]) = $9
	$14 = ($1 + [72])
	*($22 + [124]) = $14
	CALL $101(($22 + [80]), $22)
	$15 = *($22 + [72])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $15)
	*($22 + [72]) = $22
	*($22 + [84]) = $3
	*($22 + [88]) = $11
	*($22 + [92]) = $5
	*($22 + [96]) = $4
	*($22 + [100]) = $12
	*($22 + [104]) = $7
	*($22 + [80]) = $1
	*($22 + [108]) = $8
	*($22 + [112]) = $13
	*($22 + [116]) = $6
	*($22 + [120]) = $9
	*($22 + [124]) = $14
	CALL $102(($22 + [80]), ($22 + [72]))
	CALL db_update_i64(*($1 + [84]), $2, $21, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$21 = (($22 + [16]) + [8])
	*($22 + [80]) = *($3)
	if ( (CALL memcmp(($22 + [16]), ($22 + [80]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [88])
	$15 = *($3)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$6 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903040, ($22 + [72]), $10)
	*($3) = $15
	
.LABEL $label$6
	CALL db_idx64_update($15, $2, ($22 + [80]))
	
.LABEL $label$5
	$15 = (($22 + [16]) + [16])
	*($22 + [80]) = *($4)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [92])
	$21 = *($4)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$8 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903041, ($22 + [72]), $10)
	*($4) = $21
	
.LABEL $label$8
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$7
	$21 = (($22 + [16]) + [24])
	*($22 + [80]) = *($5)
	if ( (CALL memcmp($15, ($22 + [80]), [8]) == 0) ){ goto $label$9 }
	$5 = ($1 + [96])
	$15 = *($5)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$10 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903042, ($22 + [72]), $10)
	*($5) = $15
	
.LABEL $label$10
	CALL db_idx64_update($15, $2, ($22 + [80]))
	
.LABEL $label$9
	$15 = (($22 + [16]) + [32])
	*($22 + [80]) = *($6)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$11 }
	$6 = ($1 + [100])
	$21 = *($6)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$12 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903043, ($22 + [72]), $10)
	*($6) = $21
	
.LABEL $label$12
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$11
	$21 = ($22 + [56])
	*($22 + [80]) = *($7)
	if ( (CALL memcmp($15, ($22 + [80]), [8]) == 0) ){ goto $label$13 }
	$15 = ($1 + [104])
	$6 = *($15)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$14 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903044, ($22 + [72]), $10)
	*($15) = $6
	
.LABEL $label$14
	CALL db_idx64_update($6, $2, ($22 + [80]))
	
.LABEL $label$13
	$6 = (($22 + [16]) + [48])
	*($22 + [80]) = *($8)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$15 }
	$15 = ($1 + [108])
	$21 = *($15)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$16 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903045, ($22 + [72]), $10)
	*($15) = $21
	
.LABEL $label$16
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$15
	*($22 + [80]) = *($9)
	if ( (CALL memcmp($6, ($22 + [80]), [8]) == 0) ){ goto $label$17 }
	$21 = ($1 + [112])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$18 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903046, ($22 + [72]), $10)
	*($21) = $1
	
.LABEL $label$18
	CALL db_idx64_update($1, $2, ($22 + [80]))
	
.LABEL $label$17
	*([0] + [4]) = ($22 + [128])
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [1272]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [1276])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $476($5)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [1272]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$1
	$3 = *(($0 + [1232]))
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($0 + [1236])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($5 + [32])))
	
.LABEL $label$11
	CALL $476($5)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($0 + [1232]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $3
	
.LABEL $label$7
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$6
	$3 = *(($0 + [1192]))
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($0 + [1196])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL $476($5)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($0 + [1192]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$12
	$1 = *(($0 + [1152]))
	if ( ($1 == 0) ){ goto $label$17 }
	$4 = ($0 + [1156])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($2 + [44])))
	
.LABEL $label$22
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$23 }
	*(($2 + [28])) = $3
	CALL $476($3)
	
.LABEL $label$23
	CALL $476($2)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$20 }
	$2 = *(($0 + [1152]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $1
	
.LABEL $label$18
	*($4) = $1
	CALL $476($2)
	
.LABEL $label$17
	$3 = *(($0 + [1112]))
	if ( ($3 == 0) ){ goto $label$24 }
	$1 = ($0 + [1116])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$26 }
	
.LOOP $label$27:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	CALL $476($5)
	
.LABEL $label$28
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$27 }
	$2 = *(($0 + [1112]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $3
	
.LABEL $label$25
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$24
	$3 = *(($0 + [1064]))
	if ( ($3 == 0) ){ goto $label$29 }
	$1 = ($0 + [1068])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$33 }
	CALL $476($5)
	
.LABEL $label$33
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($0 + [1064]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $3
	
.LABEL $label$30
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$29
	$3 = *(($0 + [1024]))
	if ( ($3 == 0) ){ goto $label$34 }
	$1 = ($0 + [1028])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$36 }
	
.LOOP $label$37:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$38 }
	CALL $476($5)
	
.LABEL $label$38
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$37 }
	$2 = *(($0 + [1024]))
	goto $label$35 
	
.LABEL $label$36
	$2 = $3
	
.LABEL $label$35
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$34
	$3 = *(($0 + [984]))
	if ( ($3 == 0) ){ goto $label$39 }
	$1 = ($0 + [988])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$41 }
	
.LOOP $label$42:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$43 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$44 }
	CALL $476(*(($5 + [32])))
	
.LABEL $label$44
	CALL $476($5)
	
.LABEL $label$43
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$42 }
	$2 = *(($0 + [984]))
	goto $label$40 
	
.LABEL $label$41
	$2 = $3
	
.LABEL $label$40
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$39
	$3 = *(($0 + [944]))
	if ( ($3 == 0) ){ goto $label$45 }
	$1 = ($0 + [948])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$47 }
	
.LOOP $label$48:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$49 }
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$50 }
	CALL $476(*(($2 + [152])))
	
.LABEL $label$50
	if ( ((*(($2 + [96])) & [1]) == 0) ){ goto $label$51 }
	CALL $476(*(($2 + [104])))
	
.LABEL $label$51
	CALL $476($2)
	
.LABEL $label$49
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$48 }
	$2 = *(($0 + [944]))
	goto $label$46 
	
.LABEL $label$47
	$2 = $3
	
.LABEL $label$46
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$45
	CALL $65(($0 + [904]))
	CALL $66(($0 + [864]))
	$3 = *(($0 + [824]))
	if ( ($3 == 0) ){ goto $label$52 }
	$1 = ($0 + [828])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$54 }
	
.LOOP $label$55:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$56 }
	CALL $476($5)
	
.LABEL $label$56
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$55 }
	$2 = *(($0 + [824]))
	goto $label$53 
	
.LABEL $label$54
	$2 = $3
	
.LABEL $label$53
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$52
	$3 = *(($0 + [784]))
	if ( ($3 == 0) ){ goto $label$57 }
	$1 = ($0 + [788])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$59 }
	
.LOOP $label$60:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$61 }
	CALL $476($5)
	
.LABEL $label$61
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$60 }
	$2 = *(($0 + [784]))
	goto $label$58 
	
.LABEL $label$59
	$2 = $3
	
.LABEL $label$58
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$57
	$3 = *(($0 + [744]))
	if ( ($3 == 0) ){ goto $label$62 }
	$1 = ($0 + [748])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$66 }
	CALL $476($5)
	
.LABEL $label$66
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$65 }
	$2 = *(($0 + [744]))
	goto $label$63 
	
.LABEL $label$64
	$2 = $3
	
.LABEL $label$63
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$62
	$3 = *(($0 + [704]))
	if ( ($3 == 0) ){ goto $label$67 }
	$1 = ($0 + [708])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$69 }
	
.LOOP $label$70:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$71 }
	CALL $476($5)
	
.LABEL $label$71
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$70 }
	$2 = *(($0 + [704]))
	goto $label$68 
	
.LABEL $label$69
	$2 = $3
	
.LABEL $label$68
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$67
	$3 = *(($0 + [664]))
	if ( ($3 == 0) ){ goto $label$72 }
	$1 = ($0 + [668])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$74 }
	
.LOOP $label$75:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$76 }
	CALL $476($5)
	
.LABEL $label$76
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$75 }
	$2 = *(($0 + [664]))
	goto $label$73 
	
.LABEL $label$74
	$2 = $3
	
.LABEL $label$73
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$72
	$3 = *(($0 + [624]))
	if ( ($3 == 0) ){ goto $label$77 }
	$1 = ($0 + [628])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$79 }
	
.LOOP $label$80:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$81 }
	CALL $476($5)
	
.LABEL $label$81
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$80 }
	$2 = *(($0 + [624]))
	goto $label$78 
	
.LABEL $label$79
	$2 = $3
	
.LABEL $label$78
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$77
	$3 = *(($0 + [584]))
	if ( ($3 == 0) ){ goto $label$82 }
	$1 = ($0 + [588])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$84 }
	
.LOOP $label$85:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$86 }
	CALL $476($5)
	
.LABEL $label$86
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$85 }
	$2 = *(($0 + [584]))
	goto $label$83 
	
.LABEL $label$84
	$2 = $3
	
.LABEL $label$83
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$82
	$3 = *(($0 + [536]))
	if ( ($3 == 0) ){ goto $label$87 }
	$1 = ($0 + [540])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$89 }
	
.LOOP $label$90:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$91 }
	CALL $476($5)
	
.LABEL $label$91
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$90 }
	$2 = *(($0 + [536]))
	goto $label$88 
	
.LABEL $label$89
	$2 = $3
	
.LABEL $label$88
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$87
	$3 = *(($0 + [488]))
	if ( ($3 == 0) ){ goto $label$92 }
	$1 = ($0 + [492])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$94 }
	
.LOOP $label$95:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$96 }
	CALL $476($5)
	
.LABEL $label$96
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$95 }
	$2 = *(($0 + [488]))
	goto $label$93 
	
.LABEL $label$94
	$2 = $3
	
.LABEL $label$93
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$92
	$3 = *(($0 + [448]))
	if ( ($3 == 0) ){ goto $label$97 }
	$1 = ($0 + [452])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$99 }
	
.LOOP $label$100:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$101 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$102 }
	CALL $476(*(($2 + [52])))
	
.LABEL $label$102
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$103 }
	CALL $476(*(($2 + [32])))
	
.LABEL $label$103
	CALL $476($2)
	
.LABEL $label$101
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$100 }
	$2 = *(($0 + [448]))
	goto $label$98 
	
.LABEL $label$99
	$2 = $3
	
.LABEL $label$98
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$97
	$3 = *(($0 + [408]))
	if ( ($3 == 0) ){ goto $label$104 }
	$1 = ($0 + [412])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$106 }
	
.LOOP $label$107:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$108 }
	CALL $476($5)
	
.LABEL $label$108
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$107 }
	$2 = *(($0 + [408]))
	goto $label$105 
	
.LABEL $label$106
	$2 = $3
	
.LABEL $label$105
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$104
	$3 = *(($0 + [368]))
	if ( ($3 == 0) ){ goto $label$109 }
	$1 = ($0 + [372])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$111 }
	
.LOOP $label$112:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$113 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$114 }
	CALL $476(*(($5 + [16])))
	
.LABEL $label$114
	CALL $476($5)
	
.LABEL $label$113
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$112 }
	$2 = *(($0 + [368]))
	goto $label$110 
	
.LABEL $label$111
	$2 = $3
	
.LABEL $label$110
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$109
	$3 = *(($0 + [328]))
	if ( ($3 == 0) ){ goto $label$115 }
	$1 = ($0 + [332])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$117 }
	
.LOOP $label$118:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$119 }
	CALL $476($5)
	
.LABEL $label$119
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$118 }
	$2 = *(($0 + [328]))
	goto $label$116 
	
.LABEL $label$117
	$2 = $3
	
.LABEL $label$116
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$115
	$3 = *(($0 + [288]))
	if ( ($3 == 0) ){ goto $label$120 }
	$1 = ($0 + [292])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$122 }
	
.LOOP $label$123:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$124 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$125 }
	CALL $476(*(($5 + [16])))
	
.LABEL $label$125
	CALL $476($5)
	
.LABEL $label$124
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$123 }
	$2 = *(($0 + [288]))
	goto $label$121 
	
.LABEL $label$122
	$2 = $3
	
.LABEL $label$121
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$120
	$3 = *(($0 + [248]))
	if ( ($3 == 0) ){ goto $label$126 }
	$1 = ($0 + [252])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$128 }
	
.LOOP $label$129:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$130 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$131 }
	CALL $476(*(($5 + [40])))
	
.LABEL $label$131
	CALL $476($5)
	
.LABEL $label$130
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$129 }
	$2 = *(($0 + [248]))
	goto $label$127 
	
.LABEL $label$128
	$2 = $3
	
.LABEL $label$127
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$126
	$3 = *(($0 + [208]))
	if ( ($3 == 0) ){ goto $label$132 }
	$1 = ($0 + [212])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$134 }
	
.LOOP $label$135:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$136 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$137 }
	CALL $476(*(($5 + [16])))
	
.LABEL $label$137
	CALL $476($5)
	
.LABEL $label$136
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$135 }
	$2 = *(($0 + [208]))
	goto $label$133 
	
.LABEL $label$134
	$2 = $3
	
.LABEL $label$133
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$132
	$3 = *(($0 + [160]))
	if ( ($3 == 0) ){ goto $label$138 }
	$1 = ($0 + [164])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$140 }
	
.LOOP $label$141:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$142 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$143 }
	CALL $476(*(($5 + [40])))
	
.LABEL $label$143
	CALL $476($5)
	
.LABEL $label$142
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$141 }
	$2 = *(($0 + [160]))
	goto $label$139 
	
.LABEL $label$140
	$2 = $3
	
.LABEL $label$139
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$138
	$3 = *(($0 + [120]))
	if ( ($3 == 0) ){ goto $label$144 }
	$1 = ($0 + [124])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$146 }
	
.LOOP $label$147:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$148 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$149 }
	CALL $476(*(($5 + [40])))
	
.LABEL $label$149
	CALL $476($5)
	
.LABEL $label$148
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$147 }
	$2 = *(($0 + [120]))
	goto $label$145 
	
.LABEL $label$146
	$2 = $3
	
.LABEL $label$145
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$144
	$3 = *(($0 + [80]))
	if ( ($3 == 0) ){ goto $label$150 }
	$1 = ($0 + [84])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$152 }
	
.LOOP $label$153:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$154 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$155 }
	CALL $476(*(($5 + [16])))
	
.LABEL $label$155
	CALL $476($5)
	
.LABEL $label$154
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$153 }
	$2 = *(($0 + [80]))
	goto $label$151 
	
.LABEL $label$152
	$2 = $3
	
.LABEL $label$151
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$150
	$3 = *(($0 + [40]))
	if ( ($3 == 0) ){ goto $label$156 }
	$1 = ($0 + [44])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$158 }
	
.LOOP $label$159:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$160 }
	if ( ((*($2 + [92]) & [1]) == 0) ){ goto $label$161 }
	CALL $476(*(($2 + [100])))
	
.LABEL $label$161
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$162 }
	CALL $476(*(($2 + [88])))
	
.LABEL $label$162
	CALL $476($2)
	
.LABEL $label$160
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$159 }
	$2 = *(($0 + [40]))
	goto $label$157 
	
.LABEL $label$158
	$2 = $3
	
.LABEL $label$157
	*($1) = $3
	CALL $476($2)
	
.LABEL $label$156
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = ($6 - $5)
	if ( ((int_32)$3 <= (int_32)[-3]) ){ goto $label$2 }
	$3 = (*($0 + [8]) - $5)
	$2 = int_32($3 >> [1])
	$4 = ($2 + [1])
	$3 = ( ( $4 ? $3 : ($3 <= $4) ) ? [2147483647] : (int_32($3 >> [1]) <= [1073741823]) )
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$7 = CALL $475(($3 << [1]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	*(($4 = ($7 + ($2 << [1])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($4 - $6)
	$3 = ($7 + ($3 << [1]))
	$4 = ($4 + [2])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $476($5)
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4732891782226903041, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $79($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)4732891782226903040, $5))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [92])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1397703940), [2032])
	$3 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [2000])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [112])
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($1 + [36]) = (*($1 + [36]) + [1])
	$3 = ($1 + [8])
	*(($20 = $19) + [24]) = *($3)
	$4 = ($1 + [12])
	*($20 + [32]) = *($4)
	$5 = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [40]) = [0]
	*($20 + [8]) = ($20 + [40])
	*($20 + [52]) = $3
	*($20 + [48]) = $1
	*($20 + [56]) = $4
	$7 = ($1 + [16])
	*($20 + [60]) = $7
	$8 = ($1 + [24])
	*($20 + [64]) = $8
	$9 = ($1 + [32])
	*($20 + [68]) = $9
	$6 = ($1 + [36])
	*($20 + [72]) = $6
	$10 = ($1 + [40])
	*($20 + [76]) = $10
	$11 = ($1 + [44])
	*($20 + [80]) = $11
	$12 = ($1 + [48])
	*($20 + [84]) = $12
	$13 = ($1 + [56])
	*($20 + [88]) = $13
	$14 = ($1 + [64])
	*($20 + [92]) = $14
	$15 = ($1 + [80])
	*($20 + [96]) = $15
	$16 = ($1 + [92])
	*($20 + [100]) = $16
	$17 = ($1 + [104])
	*($20 + [104]) = $17
	CALL $129(($20 + [48]), ($20 + [8]))
	$18 = *($20 + [40])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [40]) = ($20 + [8])
	*($20 + [52]) = $3
	*($20 + [56]) = $4
	*($20 + [60]) = $7
	*($20 + [64]) = $8
	*($20 + [68]) = $9
	*($20 + [72]) = $6
	*($20 + [48]) = $1
	*($20 + [76]) = $10
	*($20 + [80]) = $11
	*($20 + [84]) = $12
	*($20 + [88]) = $13
	*($20 + [92]) = $14
	*($20 + [96]) = $15
	*($20 + [100]) = $16
	*($20 + [104]) = $17
	CALL $130(($20 + [48]), ($20 + [40]))
	CALL db_update_i64(*($1 + [116]), $2, $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = (($20 + [24]) + [8])
	*($20 + [48]) = *($3)
	if ( (CALL memcmp(($20 + [24]), ($20 + [48]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [120])
	$18 = *($3)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$6 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($20 + [40]), $5)
	*($3) = $18
	
.LABEL $label$6
	CALL db_idx64_update($18, $2, ($20 + [48]))
	
.LABEL $label$5
	*($20 + [48]) = *($4)
	if ( (CALL memcmp($19, ($20 + [48]), [8]) == 0) ){ goto $label$7 }
	$19 = ($1 + [124])
	$1 = *($19)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738623, ($20 + [40]), $5)
	*($19) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($20 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($20 + [112])
}

int_64 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [40]) = (int_64)100001
	*($5 + [32]) = (int_64)100001
	*($5 + [48]) = (int_64)1
	*($5 + [56]) = (int_64)1
	$1 = ($0 + [1248])
	$4 = *(($0 + [1276]))
	if ( ((int_32)$4 == (int_32)*(($0 + [1272]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	if ( $4 ){ goto $label$1 }
	$4 = ($5 + [32])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($1), *(($0 + [1256])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $93($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($5 + [32])
	
.LABEL $label$1
	*(($5 + [24])) = *(($4 + [24]))
	*(($5 + [16])) = *(($4 + [16]))
	*(($2 = ($5 + [8]))) = *(($4 + [8]))
	*($5) = *($4)
	*($2) = ((int_64)*($2) + (int_64)1)
	CALL $94($1, $5, *($0))
	$3 = *($2)
	*([0] + [4]) = ($5 + [64])
	return $3
}

void .FUNC $278 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [144]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [152])))
	
.LABEL $label$11
	if ( ((*(($1 + [96])) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($1 + [104])))
	
.LABEL $label$12
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $476($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $493 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $475($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $412 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*(($15 = $13) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($15 + [24]) = *($1 + [8])
	$10 = *($1 + [20])
	*($15 + [32]) = (CASTING uint_64)(uint_32 $10)
	*($1 + [20]) = ($10 + [1])
	$14 = *($1)
	*($15 + [16]) = $14
	*(*($1 + [24])) = *(*($3))
	*($1 + [16]) = *(*($3 + [4]))
	CALL eosio_assert([1], [1184])
	$3 = [24]
	$7 = ($1 + [24])
	$6 = ($1 + [16])
	$5 = ($1 + [20])
	$4 = ($1 + [8])
	$8 = *($1 + [24])
	$9 = *(($1 + [28]))
	$11 = ($9 - $8)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	$10 = ($1 + [36])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	$9 = ($0 + [36])
	$8 = *($10)
	$8 = ( *(($1 + [40])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$12 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$13 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($13 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$4
	*($15 + [4]) = $13
	*($15) = $13
	*($15 + [8]) = ($13 + $3)
	*($15 + [48]) = $15
	*($15 + [60]) = $4
	*($15 + [64]) = $6
	*($15 + [68]) = $5
	*($15 + [72]) = $7
	*($15 + [76]) = $10
	*($15 + [56]) = $1
	CALL $406(($15 + [56]), ($15 + [48]))
	CALL db_update_i64(*($1 + [52]), $2, $13, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($13)
	$14 = *($15 + [16])
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($15 + [60]) = $1
	*($15 + [56]) = $0
	*($15 + [68]) = $1
	*($15 + [64]) = ($15 + [24])
	*($15 + [72]) = ($15 + [16])
	*($15 + [76]) = ($15 + [40])
	*($15 + [48]) = ($15 + [56])
	CALL $418(($15 + [48]), $9, ($9 + [1]))
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC __errno_location ()
{
	return [13080]
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$6 = *($0 + [4])
	$7 = *(($6 + [92]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4732891782226903041, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [92])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $79($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)4732891782226903040, $3))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [92])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $440 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [720])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5918709575225180160, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $446($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($4) = $2
	*($4 + [12]) = ($3 + [16])
	*($4 + [8]) = ($3 + [8])
	*($4 + [16]) = ($3 + [24])
	*($4 + [20]) = ($3 + [26])
	*($4 + [24]) = ($3 + [32])
	*($4 + [28]) = ($3 + [40])
	*($4 + [32]) = ($3 + [56])
	*($4 + [36]) = ($3 + [64])
	*($4 + [40]) = ($3 + [72])
	CALL $160(($4 + [8]), $4)
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $206($3, ($2 + [8]))
	*([0] + [4]) = ($4 + [48])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	*($4 + [8]) = *($1)
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + [88])
	CALL $239(($4 + [16]), ($4 + [8]))
	CALL $76(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [720])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $93($0, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [720])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [976])
	CALL $95($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $96($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = ($4 + [896])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($4 + [880])
	$3 = CALL db_lowerbound_i64(*($2), *(($4 + [888])), (int_64)-3733857468820750336, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $240($2, $3)
	*($7 + [12]) = [0]
	*($7 + [8]) = $2
	$6 = *(*(CALL $241(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [896])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1280])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$4 = *($0 + [12])
	*($1 + [24]) = *($4)
	*(($1 + [32])) = *($4 + [8])
	*(($1 + [64])) = *(($4 + [40]))
	*(($1 + [56])) = *(($4 + [32]))
	*(($1 + [48])) = *(($4 + [24]))
	*(($1 + [40])) = *(($4 + [16]))
	CALL $478(($1 + [72]), ($4 + [48]))
	*(($1 + [104])) = *(($4 + [80]))
	*(($1 + [96])) = *(($4 + [72]))
	*(($1 + [88])) = *(($4 + [64]))
	*(($1 + [112])) = *($4 + [88])
	if ( ((int_32)$4 == (int_32)($1 + [24])) ){ goto $label$3 }
	CALL $197(($1 + [120]), *(($4 + [96])), *(($4 + [100])))
	
.LABEL $label$3
	CALL $478(($1 + [136]), *($0 + [16]))
	*($1 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*(($4 = CALL $475([48])) + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [28])) = *(($3 + [28]))
	*(($5 = ($4 + [24]))) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($6 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($7 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($8 + [48]) = ($8 + [32])
	*($8 + [44]) = $8
	*($8 + [40]) = $8
	*($8 + [56]) = ($8 + [40])
	*($8 + [68]) = $7
	*($8 + [64]) = $4
	*($8 + [72]) = $6
	*($8 + [76]) = $5
	CALL $97(($8 + [64]), ($8 + [56]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $8, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($8 + [64]) = $4
	*($8) = (int_64)7235159537265672192
	$5 = *($4 + [36])
	*($8 + [40]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($8 + [64]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $98(($1 + [24]), ($8 + [64]), $8, ($8 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $476($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
}

int_32 .FUNC $234 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$8 = ($8 + [-24])
	*($5) = $8
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($2 + [144])))
	
.LABEL $label$4
	$6 = ($2 + [120])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$5 }
	$7 = ($2 + [124])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$4 = ([0] - $3)
	$8 = ($8 + [-48])
	
.LOOP $label$8:
	if ( ((*($8) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$9
	$8 = ($8 + [-80])
	if ( ((int_32)($8 + $4) != (int_32)[-48]) ){ goto $label$8 }
	$8 = *($6)
	goto $label$6 
	
.LABEL $label$7
	$8 = $3
	
.LABEL $label$6
	*($7) = $3
	CALL $476($8)
	
.LABEL $label$5
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($2 + [80])))
	
.LABEL $label$10
	CALL $476($2)
	
.LABEL $label$3
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$11 }
	CALL $476($8)
	
.LABEL $label$11
	return $0
}

void .FUNC $233 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $475(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $234(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [704])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[80])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[53687092]) ){ goto $label$2 }
	$5 = [53687091]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[80])
	if ( ((uint_32)$6 > (uint_32)[26843544]) ){ goto $label$4 }
	$6 = ($6 << [1])
	$5 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $475(((int_32)$5 * (int_32)[80]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($6 = ($4 + ((int_32)$2 * (int_32)[80])))) = *($1)
	*(($6 + [24])) = *(($1 + [24]))
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $492(($6 + [32]), ($1 + [32]))
	CALL memcpy(($6 + [44]), ($1 + [44]), [36])
	$2 = ($4 + ((int_32)$5 * (int_32)[80]))
	$3 = ($6 + [80])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	$4 = ([0] - $1)
	$1 = ($5 + [-40])
	
.LOOP $label$7:
	*(($6 + [-56])) = *(($1 + [-16]))
	*(($6 + [-64])) = *(($1 + [-24]))
	*(($6 + [-72])) = *(($1 + [-32]))
	*(($6 + [-80])) = *(($1 + [-40]))
	*(($6 + [-40])) = *($1)
	$5 = ($1 + [-8])
	*(($6 + [-48])) = *($5)
	*($5) = [0]
	*(($1 + [-4])) = [0]
	*($1) = [0]
	CALL memcpy(($6 + [-36]), ($1 + [4]), [36])
	$6 = ($6 + [-80])
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $4) != (int_32)[-40]) ){ goto $label$7 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$8 }
	$6 = ([0] - $5)
	$1 = ($1 + [-48])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-48]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $476($5)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $411 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $475($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $482($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $477($0)
}

void .FUNC $417 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [56])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)8428183958969122816, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [56]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [20])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [60]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)8428183958969122817, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [60])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $443 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $444(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [24]) = ($0 + [136])
	$2 = ($1 + [24])
	CALL $146(($9 + [16]), ($9 + [24]), $2)
	$0 = [0]
	*($9 + [8]) = [0]
	*($9) = (int_64)0
	$8 = [0]
	$7 = *($9 + [20])
	if ( ($7 == 0) ){ goto $label$1 }
	$6 = ($9 + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($7 + [24]) != (int_64)*($2)) ){ goto $label$2 }
	$0 = *($9)
	$3 = *($9 + [4])
	$4 = int_32(($3 - $0) >> [1])
	if ( ((int_32)$4 == (int_32)[5]) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$5 }
	$5 = *($7 + [16])
	$8 = [0]
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)($5 & [65535])) ){ goto $label$4 }
	$0 = ($0 + [2])
	$8 = ($8 + [1])
	if ( ($8 <= $4) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_64)*($7) == (int_64)*($1)) ){ goto $label$4 }
	if ( ((int_32)*($7 + [64]) != (int_32)[1]) ){ goto $label$4 }
	$0 = ($7 + [16])
	if ( ((uint_32)$3 >= (uint_32)*($6)) ){ goto $label$7 }
	*($3) = *($0)
	*($9 + [4]) = ($3 + [2])
	goto $label$4 
	
.LABEL $label$7
	CALL $147($9, $0)
	
.LABEL $label$4
	CALL $148(($9 + [16]))
	$7 = *($9 + [20])
	if ( $7 ){ goto $label$3 }
	
.LABEL $label$2
	$0 = *($9)
	$8 = *($9 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((uint_32)int_32(($8 - $0) >> [1]) > (uint_32)[4]), [1968])
	$0 = *($9)
	if ( ($0 == 0) ){ goto $label$8 }
	*($9 + [4]) = $0
	CALL $476($0)
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $409 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	$0 = *($7)
	
.LOOP $label$3:
	*($0) = *($1)
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
	*($0 + [24 align=4]) = (int_64)0
	*(($8 = ($0 + [32]))) = [0]
	$9 = ($1 + [24])
	$10 = ($1 + [28])
	$6 = (*($10) - *($9))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [24])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $475($6)
	*($4) = $6
	*($8) = ($6 + ($5 << [2]))
	*(($5 = ($0 + [28]))) = $6
	$10 = *($9)
	$8 = (*($10) - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $10, $8)
	*($5) = (*($5) + $8)
	
.LABEL $label$4
	CALL $492(($0 + [36]), ($1 + [36]))
	$0 = (*($7) + [48])
	*($7) = $0
	$1 = ($1 + [48])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $491($4)
}

void .FUNC $444 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [704])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [704])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [704])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $476($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $415 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*(($15 = $13) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($15 + [24]) = *($1 + [8])
	*($15 + [32]) = *($1 + [20])
	*(($12 = *($1 + [24])) + [8]) = (*($12 + [8]) + [1])
	$14 = *($1)
	*($15 + [16]) = $14
	CALL eosio_assert([1], [1184])
	$12 = [24]
	$6 = ($1 + [24])
	$5 = ($1 + [20])
	$4 = ($1 + [8])
	$7 = *($1 + [24])
	$8 = *(($1 + [28]))
	$10 = ($8 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [2]))
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [36])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	$12 = (($10 & [-4]) + $12)
	
.LABEL $label$2
	$8 = ($0 + [36])
	$7 = *($9)
	$7 = ( *(($1 + [40])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$12 = ($7 + $12)
	$11 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ($12 <= [513]) ){ goto $label$5 }
	$13 = CALL malloc($12)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($13 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$4
	*($15 + [4]) = $13
	*($15) = $13
	*($15 + [8]) = ($13 + $12)
	*($15 + [48]) = $15
	*($15 + [60]) = $4
	*($15 + [68]) = $5
	*($15 + [72]) = $6
	*($15 + [76]) = $9
	*($15 + [56]) = $1
	*($15 + [64]) = ($1 + [16])
	CALL $406(($15 + [56]), ($15 + [48]))
	CALL db_update_i64(*($1 + [52]), $2, $13, $12)
	if ( ($12 <= [513]) ){ goto $label$6 }
	CALL free($13)
	$14 = *($15 + [16])
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($15 + [60]) = $1
	*($15 + [56]) = $0
	*($15 + [68]) = $1
	*($15 + [64]) = ($15 + [24])
	*($15 + [72]) = ($15 + [16])
	*($15 + [76]) = ($15 + [40])
	*($15 + [48]) = ($15 + [56])
	CALL $416(($15 + [48]), $8, ($8 + [1]))
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $445 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL $329($0)
	*($0 + [80]) = $1
	$4 = *($2 + [4])
	*($0) = *(*($4))
	$1 = *($2)
	$4 = *($4 + [4])
	*($0 + [8]) = *($4)
	*(($0 + [16])) = *(($4 + [8]))
	*($0 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($0 + [8])
	*($5 + [104]) = $0
	*($5 + [112]) = ($0 + [24])
	*($5 + [116]) = ($0 + [40])
	*($5 + [120]) = ($0 + [56])
	*($5 + [124]) = ($0 + [72])
	CALL $327(($5 + [104]), ($5 + [96]))
	$3 = *($0)
	*($0 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)4157834734666924032, *(*($2 + [8])), $3, $5, [80])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
	return $0
}

void .FUNC $192 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *($4 + [80])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-6083090961624203264, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *(($4 + [84]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-6083090961624203263, ($7 + [8]), *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($6)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$0 = *(($5 + [88]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6083090961624203262, ($7 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $475(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $476($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC $414 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*(($15 = $13) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($15 + [24]) = *($1 + [8])
	*($15 + [32]) = *($1 + [20])
	*(($12 = *($1 + [24])) + [4]) = (*($12 + [4]) + [1])
	$14 = *($1)
	*($15 + [16]) = $14
	CALL eosio_assert([1], [1184])
	$12 = [24]
	$6 = ($1 + [24])
	$5 = ($1 + [20])
	$4 = ($1 + [8])
	$7 = *($1 + [24])
	$8 = *(($1 + [28]))
	$10 = ($8 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [2]))
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [36])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	$12 = (($10 & [-4]) + $12)
	
.LABEL $label$2
	$8 = ($0 + [36])
	$7 = *($9)
	$7 = ( *(($1 + [40])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$12 = ($7 + $12)
	$11 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ($12 <= [513]) ){ goto $label$5 }
	$13 = CALL malloc($12)
	goto $label$4 
	
.LABEL $label$5
	$13 = ($13 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$4
	*($15 + [4]) = $13
	*($15) = $13
	*($15 + [8]) = ($13 + $12)
	*($15 + [48]) = $15
	*($15 + [60]) = $4
	*($15 + [68]) = $5
	*($15 + [72]) = $6
	*($15 + [76]) = $9
	*($15 + [56]) = $1
	*($15 + [64]) = ($1 + [16])
	CALL $406(($15 + [56]), ($15 + [48]))
	CALL db_update_i64(*($1 + [52]), $2, $13, $12)
	if ( ($12 <= [513]) ){ goto $label$6 }
	CALL free($13)
	$14 = *($15 + [16])
	
.LABEL $label$6
	if ( (uint_64)($14 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($15 + [60]) = $1
	*($15 + [56]) = $0
	*($15 + [68]) = $1
	*($15 + [64]) = ($15 + [24])
	*($15 + [72]) = ($15 + [16])
	*($15 + [76]) = ($15 + [40])
	*($15 + [48]) = ($15 + [56])
	CALL $417(($15 + [48]), $8, ($8 + [1]))
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $446 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $475([40])
	$6 = CALL $447($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $448(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $261 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $492(($4 + [24]), ($1 + [8]))
	CALL $492(($4 + [8]), ($1 + [20]))
	*($4 + [40]) = $2
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($4 + [40])), (int_32 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $1))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*($4 + [16]))
	
.LABEL $label$2
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL $476(*($4 + [32]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [48])
}

void .FUNC $413 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $9) / (int_32)[48])
	$8 = ($6 + [1])
	if ( ((uint_32)$8 >= (uint_32)[89478486]) ){ goto $label$2 }
	$7 = [89478485]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[48])
	if ( ((uint_32)$9 > (uint_32)[44739241]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $475(((int_32)$7 * (int_32)[48]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$6 * (int_32)[48])))) = *($1)
	*(($9 + [16])) = *(($1 + [16]))
	*(($9 + [8])) = *(($1 + [8]))
	*($9 + [24]) = [0]
	*(($6 = ($9 + [28]))) = [0]
	*(($3 = ($9 + [32]))) = [0]
	$5 = (*(($1 + [28])) - *($1 + [24]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$6 }
	$2 = ($9 + [24])
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$5 }
	$5 = CALL $475($5)
	*($2) = $5
	*($6) = $5
	*($3) = ($5 + ($4 << [2]))
	$3 = *(($1 + [24]))
	$4 = (*(($1 + [28])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($5, $3, $4)
	*($6) = (*($6) + $4)
	
.LABEL $label$6
	$5 = ($8 + ((int_32)$7 * (int_32)[48]))
	CALL $492(($9 + [36]), ($1 + [36]))
	$4 = ($9 + [48])
	$1 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$6 = ([0] - $1)
	$1 = ($7 + [-24])
	
.LOOP $label$9:
	*(($9 + [-32])) = *(($1 + [-8]))
	*(($9 + [-40])) = *(($1 + [-16]))
	*(($9 + [-48])) = *(($1 + [-24]))
	*(($7 = ($9 + [-24]))) = (int_64)0
	*(($8 = ($9 + [-16]))) = [0]
	*($7) = *($1)
	*(($9 + [-20])) = *(($1 + [4]))
	$7 = ($1 + [8])
	*($8) = *($7)
	*($7) = [0]
	*($1) = (int_64)0
	$7 = ($1 + [20])
	*(($9 + [-4])) = *($7)
	$8 = ($1 + [12])
	*(($9 + [-12])) = *($8)
	*($8) = [0]
	*(($1 + [16])) = [0]
	*($7) = [0]
	$9 = ($9 + [-48])
	$1 = ($1 + [-48])
	if ( ((int_32)($1 + $6) != (int_32)[-24]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$8 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$8 = $1
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $5
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$10 }
	$7 = ([0] - $8)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($1 + [20])))
	
.LABEL $label$12
	$9 = *($1)
	if ( ($9 == 0) ){ goto $label$13 }
	*(($1 + [4])) = $9
	CALL $476($9)
	
.LABEL $label$13
	$1 = ($1 + [-48])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $476($8)
	
.LABEL $label$14
	return (unreachable)
	
.LABEL $label$5
	CALL $491($2)
	(unreachable)
}

int_32 .FUNC $447 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [1760])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1824])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $262 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([56])) + [40]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	CALL $324(($8 + [40]), ($8 + [32]))
	*($6 + [44]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $219(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $410 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	$12 = $13
	*([0] + [4]) = $13
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	$11 = [24]
	$4 = ($1 + [24])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $401($4, *($3 + [24]), *(($3 + [28])))
	
.LABEL $label$1
	$5 = ($1 + [36])
	CALL $478($5, ($3 + [36]))
	$6 = *($4)
	$3 = *(($1 + [28]))
	$7 = ($3 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$2:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	$11 = (($7 & [-4]) + $11)
	
.LABEL $label$3
	$3 = *(($1 + [36]))
	$3 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$11 = ($3 + $11)
	$10 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$4:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ($11 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($11)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $11)
	*($12 + [16]) = $12
	*($12 + [28]) = ($1 + [8])
	*($12 + [24]) = $1
	*($12 + [32]) = ($1 + [16])
	*($12 + [36]) = ($1 + [20])
	*($12 + [40]) = $4
	*($12 + [44]) = $5
	CALL $406(($12 + [24]), ($12 + [16]))
	$10 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)8428183958969122816, *(*($0 + [8])), $10, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$11 = ($2 + [8])
	$10 = *($11)
	$3 = *(($0 + [8]))
	$8 = *($3)
	$9 = *($1)
	*($12 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($10, (int_64)8428183958969122816, $8, $9, ($12 + [24]))
	$10 = *($3)
	$8 = *($11)
	$9 = *($1)
	*($12 + [24]) = *(($1 + [20]))
	*(($1 + [60])) = CALL db_idx64_store($8, (int_64)8428183958969122817, $10, $9, ($12 + [24]))
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $386 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $492(($5 + [16]), ($1 + [16]))
	CALL $492($5, ($1 + [28]))
	*($5 + [40]) = $3
	*($5 + [32]) = $2
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($5 + [40])), (int_32 ($5 + [32])), (int_32 ($5 + [16])), (int_32 $5), (int_32 $1))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*($5 + [8]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $476(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $303 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0 + [88]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [128])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($5 = ($0 + [136]))) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*(($0 + [136])) = ($4 | [1])
	*(($0 + [144])) = $5
	*(($0 + [140])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [512], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*(($0 + [160])) = [0]
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($0 + [188])) = [0]
	*(($0 + [192])) = [0]
	*($0 + [200]) = [0]
	*(($0 + [204])) = [0]
	*(($0 + [208])) = [0]
	*($0 + [224]) = $1
	CALL $306($2, $0)
	return $0
	
.LABEL $label$1
	CALL $477($5)
	return (unreachable)
}

void .FUNC $302 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $301 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*(($18 = ($1 + [28]))) = (*($18) + [1])
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$6 = ($1 + [16])
	*($20 + [76]) = $6
	$7 = ($1 + [24])
	*($20 + [80]) = $7
	$8 = ($1 + [32])
	*($20 + [84]) = $8
	$9 = ($1 + [36])
	*($20 + [88]) = $9
	$10 = ($1 + [40])
	*($20 + [92]) = $10
	$11 = ($1 + [44])
	*($20 + [96]) = $11
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $6
	*($20 + [80]) = $7
	*($20 + [84]) = $8
	*($20 + [88]) = $9
	*($20 + [64]) = $1
	*($20 + [92]) = $10
	*($20 + [96]) = $11
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $302(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $263 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	$31 = (*([0] + [4]) - [1248])
	*([0] + [4]) = $31
	CALL $216(($31 + [1136]), $0, $1)
	$28 = *(($31 + [1156]))
	*($31 + [1128]) = $28
	CALL eosio_assert(((int_64)$28 != (int_64)0), [2192])
	$28 = *($2 + [16])
	$9 = *(($0 + [328]))
	$14 = *(($0 + [332]))
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$1 }
	$15 = ($14 + [-24])
	$7 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($15)) == (int_64)$28) ){ goto $label$1 }
	$14 = $15
	$10 = ($15 + [-24])
	$15 = $10
	if ( ((int_32)($10 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$15 = ($0 + [304])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$4 }
	$26 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($26 + [64]) == (int_32)$15), [720])
	goto $label$3 
	
.LABEL $label$4
	$26 = [0]
	$10 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, $28)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$26 = CALL $208($15, $10)
	CALL eosio_assert(((int_32)*($26 + [64]) == (int_32)$15), [720])
	
.LABEL $label$3
	$15 = [0]
	CALL memset(($31 + [400]), [0], [720])
	$4 = CALL $287(($31 + [400]))
	CALL $288($4, $26, $3, ($31 + [1128]))
	$5 = CALL $289(($31 + [176]), $4)
	*($31 + [168]) = *($4 + [224])
	$30 = *($4 + [264])
	*($31 + [136]) = *(($4 + [232]))
	$6 = ($4 + [240])
	CALL $492((($31 + [136]) + [8]), $6)
	*($31 + [156 align=4]) = *(($4 + [252]))
	*($31 + [104]) = *(($4 + [272]))
	$8 = ($4 + [280])
	$7 = (($31 + [104]) + [8])
	CALL $492($7, $8)
	*($31 + [124 align=4]) = *(($4 + [292]))
	$28 = *($5 + [88])
	if ( (int_64)($28 == 0) ){ goto $label$6 }
	*($31 + [16]) = (int_64)4410628
	$28 = ((int_64)$28 * (int_64)10000)
	*($31 + [8]) = $28
	CALL eosio_assert((uint_64)(((int_64)$28 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1760])
	$28 = (uint_64)*($31 + [16]) >> (uint_64)(int_64)8)
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $28) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$10 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [1824])
	*(($31 + [96])) = [0]
	*($31 + [88]) = (int_64)0
	$15 = CALL strlen([2912])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$14 }
	*($31 + [88]) = ($15 << [1])
	$10 = (($31 + [88]) | [1])
	if ( $15 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$14 = (($15 + [16]) & [-16])
	$10 = CALL $475($14)
	*($31 + [88]) = ($14 | [1])
	*($31 + [96]) = $10
	*($31 + [92]) = $15
	
.LABEL $label$13
	CALL memcpy($10, [2912], $15)
	
.LABEL $label$12
	*(($10 + $15)) = [0]
	CALL $290($0, $1, ($31 + [8]), ($31 + [88]))
	if ( ((*($31 + [88]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($31 + [96]))
	
.LABEL $label$6
	if ( (int_64)($30 == 0) ){ goto $label$15 }
	*(($5 + [176])) = $30
	$13 = ($5 + [184])
	$12 = ($0 + [136])
	$9 = ($26 + [16])
	$11 = (($31 + [8]) + [44])
	$10 = ($31 + [40])
	$18 = ($31 + [124])
	$19 = (($31 + [8]) + [8])
	$21 = ($31 + [64])
	$22 = ($31 + [72])
	$23 = ($31 + [76])
	$24 = ($31 + [80])
	$25 = ($5 + [192])
	$3 = ($5 + [188])
	$15 = [1]
	
.LOOP $label$16:
	$14 = $15
	$15 = *(($26 + [48]))
	*($31 + [88]) = [101]
	$28 = CALL $154($0, ($31 + [104]), ($31 + [88]), $7, $15)
	*(($17 = (($31 + [8]) + [16]))) = *($18)
	*($31 + [8]) = $28
	*($19) = *($31 + [104])
	*(($20 = (($31 + [8]) + [24]))) = *($9)
	CALL $492($10, $7)
	*($11) = [1]
	*($21) = (int_64)10000
	*($22) = [1]
	*($23) = $15
	*((($31 + [8]) + [48])) = *((($31 + [104]) + [24]))
	*($24) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$28 = *($0)
	*($31) = ($31 + [8])
	CALL $155(($31 + [88]), $12, $28, $31)
	CALL $156($0, $9)
	$15 = *($3)
	if ( ((uint_32)$15 >= (uint_32)*($25)) ){ goto $label$18 }
	*($15) = *($31 + [8])
	*(($15 + [24])) = *($20)
	*(($15 + [16])) = *($17)
	*(($15 + [8])) = *($19)
	*(($15 + [40])) = *(($10 + [8]))
	*($15 + [32 align=4]) = *($10)
	*($10) = [0]
	*((($31 + [8]) + [36])) = [0]
	*((($31 + [8]) + [40])) = [0]
	CALL memcpy(($15 + [44]), $11, [36])
	*($3) = (*($3) + [80])
	goto $label$17 
	
.LABEL $label$18
	CALL $291($13, ($31 + [8]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$17 }
	CALL $476(*((($31 + [8]) + [40])))
	
.LABEL $label$17
	$15 = ($14 + [1])
	if ( (uint_64)((CASTING uint_64)(uint_32 $14) <= $30) ){ goto $label$16 }
	
.LABEL $label$15
	$28 = *($31 + [168])
	if ( (int_64)($28 == 0) ){ goto $label$19 }
	*(($5 + [96])) = $28
	CALL $153(($31 + [8]), $0, ($31 + [136]), ($26 + [16]), ($31 + [168]), ($26 + [48]))
	*(($5 + [128])) = *(($31 + [32]))
	*(($5 + [120])) = *((($31 + [8]) + [16]))
	*(($5 + [112])) = *(($31 + [16]))
	*(($5 + [104])) = *($31 + [8])
	$10 = ($31 + [40])
	$15 = ($5 + [136])
	if ( (*($15) & [1]) ){ goto $label$21 }
	*($15) = [0]
	goto $label$20 
	
.LABEL $label$21
	*(*(($5 + [144]))) = [0]
	*(($5 + [140])) = [0]
	
.LABEL $label$20
	CALL $480($15, [0])
	$14 = *(($10 + [8]))
	$28 = *($10)
	*(($31 + [40])) = [0]
	*(($15 + [8])) = $14
	*($15) = $28
	*(($31 + [44])) = [0]
	*(($31 + [48])) = [0]
	*(($5 + [168])) = *(($31 + [72]))
	*(($5 + [160])) = *(($31 + [64]))
	*(($5 + [152])) = *($31 + [56])
	
.LABEL $label$19
	*($5) = *($2)
	*($5 + [8]) = *($1)
	*($5 + [16]) = *($26)
	CALL $292($0)
	$28 = *($0)
	*($31 + [88]) = $5
	CALL $293(($31 + [8]), ($0 + [840]), $28, ($31 + [88]))
	CALL $268($0, $2)
	CALL $294($0, $26)
	$16 = *($0)
	$28 = (int_64)0
	$27 = (int_64)59
	$15 = [1024]
	$29 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$28 > (uint_64)(int_64)5) ){ goto $label$27 }
	$10 = *($15)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$10 = ($10 + [165])
	goto $label$25 
	
.LABEL $label$27
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$23
	$15 = ($15 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$29 = ((int_64)$30 | (int_64)$29)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$22 }
	*($31 + [16]) = $29
	*($31 + [8]) = $16
	$28 = (int_64)0
	$30 = (int_64)59
	$15 = [1040]
	$29 = (int_64)0
	
.LOOP $label$28:
	$27 = (int_64)0
	if ( ((uint_64)$28 > (uint_64)(int_64)11) ){ goto $label$29 }
	$10 = *($15)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$10 = ($10 + [165])
	goto $label$30 
	
.LABEL $label$31
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$27 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$29
	$15 = ($15 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$29 = ((int_64)$27 | (int_64)$29)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$28 }
	*($31 + [88]) = $29
	$28 = (int_64)0
	$27 = (int_64)59
	$15 = [2960]
	$29 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$28 > (uint_64)(int_64)6) ){ goto $label$37 }
	$10 = *($15)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$10 = ($10 + [165])
	goto $label$35 
	
.LABEL $label$37
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$33
	$15 = ($15 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$29 = ((int_64)$30 | (int_64)$29)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$32 }
	*($31) = $29
	CALL $295($0, ($31 + [8]), ($31 + [88]), $31, $5)
	if ( ((*((($31 + [104]) + [8])) & [1]) == 0) ){ goto $label$38 }
	CALL $476(*(($31 + [120])))
	
.LABEL $label$38
	if ( ((*((($31 + [136]) + [8])) & [1]) == 0) ){ goto $label$39 }
	CALL $476(*(($31 + [152])))
	
.LABEL $label$39
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$40 }
	CALL $476(*(($5 + [208])))
	
.LABEL $label$40
	$10 = *(($5 + [184]))
	if ( ($10 == 0) ){ goto $label$41 }
	$14 = ($5 + [188])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$43 }
	$0 = ([0] - $10)
	$15 = ($15 + [-48])
	
.LOOP $label$44:
	if ( ((*($15) & [1]) == 0) ){ goto $label$45 }
	CALL $476(*(($15 + [8])))
	
.LABEL $label$45
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $0) != (int_32)[-48]) ){ goto $label$44 }
	$15 = *(($5 + [184]))
	goto $label$42 
	
.LABEL $label$43
	$15 = $10
	
.LABEL $label$42
	*($14) = $10
	CALL $476($15)
	
.LABEL $label$41
	if ( ((*(($5 + [136])) & [1]) == 0) ){ goto $label$46 }
	CALL $476(*(($5 + [144])))
	
.LABEL $label$46
	if ( ((*($8) & [1]) == 0) ){ goto $label$47 }
	CALL $476(*(($4 + [288])))
	
.LABEL $label$47
	if ( ((*($6) & [1]) == 0) ){ goto $label$48 }
	CALL $476(*(($4 + [248])))
	
.LABEL $label$48
	if ( ((*($4 + [200]) & [1]) == 0) ){ goto $label$49 }
	CALL $476(*(($4 + [208])))
	
.LABEL $label$49
	$10 = *(($4 + [184]))
	if ( ($10 == 0) ){ goto $label$50 }
	$14 = ($4 + [188])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$52 }
	$0 = ([0] - $10)
	$15 = ($15 + [-48])
	
.LOOP $label$53:
	if ( ((*($15) & [1]) == 0) ){ goto $label$54 }
	CALL $476(*(($15 + [8])))
	
.LABEL $label$54
	$15 = ($15 + [-80])
	if ( ((int_32)($15 + $0) != (int_32)[-48]) ){ goto $label$53 }
	$15 = *(($4 + [184]))
	goto $label$51 
	
.LABEL $label$52
	$15 = $10
	
.LABEL $label$51
	*($14) = $10
	CALL $476($15)
	
.LABEL $label$50
	if ( ((*(($4 + [136])) & [1]) == 0) ){ goto $label$55 }
	CALL $476(*(($4 + [144])))
	
.LABEL $label$55
	if ( ((*($31 + [1228]) & [1]) == 0) ){ goto $label$56 }
	CALL $476(*(($31 + [1236])))
	
.LABEL $label$56
	if ( ((*($31 + [1216]) & [1]) == 0) ){ goto $label$57 }
	CALL $476(*(($31 + [1224])))
	
.LABEL $label$57
	*([0] + [4]) = ($31 + [1248])
	return (unreachable)
	
.LABEL $label$5
	CALL $477(($31 + [88]))
}

int_32 .FUNC $307 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$1 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $475([240])
	$1 = CALL $310($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$7 = *($6 + [228])
	*($8 + [4]) = $7
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $304(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$7 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	if ( ((*($7 + [200]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($7 + [208])))
	
.LABEL $label$10
	$3 = *(($7 + [184]))
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($7 + [188])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$13 }
	$4 = ([0] - $3)
	$6 = ($6 + [-48])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-80])
	if ( ((int_32)($6 + $4) != (int_32)[-48]) ){ goto $label$14 }
	$6 = *(($7 + [184]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $476($6)
	
.LABEL $label$11
	if ( ((*(($7 + [136])) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($7 + [144])))
	
.LABEL $label$16
	CALL $476($7)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $1
}

void .FUNC $306 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [64])
	$11 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	*(($4 = (($1 = CALL memcpy($1, ($8 = *(*($0 + [4]))), [88])) + [96]))) = *(($8 + [96]))
	*($1 + [88]) = *($8 + [88])
	*(($1 + [128])) = *(($8 + [128]))
	*(($1 + [120])) = *(($8 + [120]))
	*(($1 + [112])) = *(($8 + [112]))
	*(($1 + [104])) = *(($8 + [104]))
	CALL $478(($1 + [136]), ($8 + [136]))
	*(($1 + [168])) = *(($8 + [168]))
	*(($1 + [160])) = *(($8 + [160]))
	*(($1 + [152])) = *(($8 + [152]))
	*(($5 = ($1 + [176]))) = *(($8 + [176]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	CALL $197(($1 + [184]), *(($8 + [184])), *(($8 + [188])))
	
.LABEL $label$1
	$3 = ($1 + [200])
	CALL $478($3, ($8 + [200]))
	*($1 + [216]) = *($8 + [216])
	*($11 + [24]) = [80]
	*($11 + [8]) = ($11 + [24])
	*($11 + [36]) = $4
	$4 = ($1 + [88])
	*($11 + [32]) = $4
	*($11 + [40]) = $5
	CALL $237(($11 + [32]), ($11 + [8]))
	$8 = *($1 + [200])
	$5 = ( *(($1 + [204])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = (($5 + *($11 + [24])) + [8])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [216])
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($8 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($8)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [12]) = $10
	*($11 + [8]) = $10
	*($11 + [16]) = ($10 + $8)
	*($11 + [24]) = ($11 + [8])
	*($11 + [36]) = ($1 + [8])
	*($11 + [32]) = $1
	*($11 + [40]) = ($1 + [16])
	*($11 + [44]) = ($1 + [24])
	*($11 + [48]) = $4
	*($11 + [52]) = $3
	*($11 + [56]) = $5
	CALL $298(($11 + [32]), ($11 + [24]))
	$9 = *($1)
	*($1 + [228]) = CALL db_store_i64(*($2 + [8]), (int_64)-6778290816923205632, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$8 = ($2 + [8])
	$9 = *($8)
	$10 = *(($0 + [8]))
	$6 = *($10)
	$7 = *($1)
	*($11 + [32]) = *(($1 + [16]))
	*($1 + [232]) = CALL db_idx64_store($9, (int_64)-6778290816923205632, $6, $7, ($11 + [32]))
	$9 = *($10)
	$6 = *($8)
	$7 = *($1)
	*($11 + [32]) = *(($1 + [8]))
	*(($1 + [236])) = CALL db_idx64_store($6, (int_64)-6778290816923205631, $9, $7, ($11 + [32]))
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $305 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$8 = ($8 + [-24])
	*($5) = $8
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($2 + [208])))
	
.LABEL $label$4
	$6 = ($2 + [184])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$5 }
	$7 = ($2 + [188])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$4 = ([0] - $3)
	$8 = ($8 + [-48])
	
.LOOP $label$8:
	if ( ((*($8) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$9
	$8 = ($8 + [-80])
	if ( ((int_32)($8 + $4) != (int_32)[-48]) ){ goto $label$8 }
	$8 = *($6)
	goto $label$6 
	
.LABEL $label$7
	$8 = $3
	
.LABEL $label$6
	*($7) = $3
	CALL $476($8)
	
.LABEL $label$5
	if ( ((*(($2 + [136])) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($2 + [144])))
	
.LABEL $label$10
	CALL $476($2)
	
.LABEL $label$3
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$11 }
	CALL $476($8)
	
.LABEL $label$11
	return $0
}

void .FUNC $304 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $475(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $305(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $309 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [224]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$9 = ([0] - $3)
	$11 = ($10 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$10 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)$3), [1664])
	$9 = ($10 + [-24])
	$7 = *($4)
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = *($10)
	*($10) = [0]
	$3 = *($9)
	*($9) = $11
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((*($3 + [200]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($3 + [208])))
	
.LABEL $label$7
	$8 = ($3 + [184])
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$8 }
	$6 = ($3 + [188])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$5 = ([0] - $4)
	$11 = ($11 + [-48])
	
.LOOP $label$11:
	if ( ((*($11) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($11 + [8])))
	
.LABEL $label$12
	$11 = ($11 + [-80])
	if ( ((int_32)($11 + $5) != (int_32)[-48]) ){ goto $label$11 }
	$11 = *($8)
	goto $label$9 
	
.LABEL $label$10
	$11 = $4
	
.LABEL $label$9
	*($6) = $4
	CALL $476($11)
	
.LABEL $label$8
	if ( ((*(($3 + [136])) & [1]) == 0) ){ goto $label$13 }
	CALL $476(*(($3 + [144])))
	
.LABEL $label$13
	CALL $476($3)
	
.LABEL $label$6
	*($9 + [8]) = *($10 + [8])
	*(($9 + [16])) = *(($10 + [16]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$5 }
	$10 = *(($0 + [28]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	if ( ((*($3 + [200]) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($3 + [208])))
	
.LABEL $label$16
	$7 = ($3 + [184])
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$17 }
	$8 = ($3 + [188])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$19 }
	$5 = ([0] - $4)
	$11 = ($11 + [-48])
	
.LOOP $label$20:
	if ( ((*($11) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*(($11 + [8])))
	
.LABEL $label$21
	$11 = ($11 + [-80])
	if ( ((int_32)($11 + $5) != (int_32)[-48]) ){ goto $label$20 }
	$11 = *($7)
	goto $label$18 
	
.LABEL $label$19
	$11 = $4
	
.LABEL $label$18
	*($8) = $4
	CALL $476($11)
	
.LABEL $label$17
	if ( ((*(($3 + [136])) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($3 + [144])))
	
.LABEL $label$22
	CALL $476($3)
	
.LABEL $label$15
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [228]))
	$11 = *(($1 + [232]))
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$24 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6778290816923205632, ($12 + [8]), *($1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$23 }
	
.LABEL $label$24
	CALL db_idx64_remove($11)
	
.LABEL $label$23
	$11 = *(($1 + [236]))
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$26 }
	$11 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6778290816923205631, ($12 + [8]), *($1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$25 }
	
.LABEL $label$26
	CALL db_idx64_remove($11)
	
.LABEL $label$25
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $308 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [228]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6778290816923205632)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $307(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $423 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*($4 + [104]) = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($4 + [88]) = *($1 + [8])
	*($4 + [96]) = *($1 + [16])
	$2 = *($1)
	*($4 + [80]) = $2
	*($1 + [40]) = *(*($3))
	CALL eosio_assert([1], [1184])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [112]) = ($4 + [64])
	*($4 + [124]) = ($1 + [8])
	*($4 + [120]) = $1
	*($4 + [128]) = ($1 + [16])
	*($4 + [132]) = ($1 + [24])
	*($4 + [136]) = ($1 + [28])
	*($4 + [140]) = ($1 + [32])
	*($4 + [144]) = ($1 + [40])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	CALL $212(($4 + [120]), ($4 + [112]))
	CALL db_update_i64(*($1 + [68]), *($4 + [104]), $4, [56])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [124]) = $1
	*($4 + [120]) = $0
	*($4 + [132]) = $1
	*($4 + [128]) = ($4 + [88])
	*($4 + [136]) = ($4 + [80])
	*($4 + [140]) = ($4 + [104])
	*($4 + [112]) = ($4 + [120])
	CALL $426(($4 + [112]), $3, ($3 + [1]))
	*([0] + [4]) = ($4 + [160])
}

void .FUNC $435 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*(($21 = $4) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$2 = *($1 + [68])
	$16 = *($1 + [48])
	$17 = *($1 + [44])
	$18 = *($1 + [64])
	$19 = *($1 + [18])
	$20 = *($1 + [24])
	*($21 + [24]) = *($1 + [8])
	*($21 + [32]) = $20
	*($21 + [40]) = $19
	*($21 + [48]) = $18
	*($21 + [56]) = $17
	*($21 + [64]) = $16
	*($21 + [72]) = $2
	$3 = *($3)
	*($1 + [64]) = (int_64)2576980377601
	*($21 + [16]) = *($1)
	*($1 + [24]) = *($3)
	CALL eosio_assert([1], [1184])
	*($21 + [88]) = [0]
	*($21) = ($21 + [88])
	$5 = ($1 + [8])
	*($21 + [100]) = $5
	*($21 + [96]) = $1
	$12 = ($1 + [16])
	*($21 + [104]) = $12
	$7 = ($1 + [18])
	*($21 + [108]) = $7
	$6 = ($1 + [24])
	*($21 + [112]) = $6
	$13 = ($1 + [32])
	*($21 + [116]) = $13
	$9 = ($1 + [44])
	*($21 + [120]) = $9
	$10 = ($1 + [48])
	*($21 + [124]) = $10
	$14 = ($1 + [56])
	*($21 + [128]) = $14
	$8 = ($1 + [64])
	*($21 + [132]) = $8
	$11 = ($1 + [68])
	*($21 + [136]) = $11
	$15 = ($1 + [72])
	*($21 + [140]) = $15
	CALL $101(($21 + [96]), $21)
	$3 = *($21 + [88])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$1
	*($21 + [4]) = $4
	*($21) = $4
	*($21 + [8]) = ($4 + $3)
	*($21 + [88]) = $21
	*($21 + [100]) = $5
	*($21 + [104]) = $12
	*($21 + [108]) = $7
	*($21 + [112]) = $6
	*($21 + [116]) = $13
	*($21 + [120]) = $9
	*($21 + [96]) = $1
	*($21 + [124]) = $10
	*($21 + [128]) = $14
	*($21 + [132]) = $8
	*($21 + [136]) = $11
	*($21 + [140]) = $15
	CALL $102(($21 + [96]), ($21 + [88]))
	CALL db_update_i64(*($1 + [84]), *($21 + [80]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($21 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($21 + [100]) = $1
	*($21 + [96]) = $0
	*($21 + [108]) = $1
	*($21 + [104]) = ($21 + [24])
	*($21 + [112]) = ($21 + [16])
	*($21 + [116]) = ($21 + [80])
	*($21 + [88]) = ($21 + [96])
	CALL $436(($21 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($4 + [4]), ($4 + [5]), ($4 + [6]))
	*([0] + [4]) = ($21 + [144])
}

void .FUNC $434 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $437(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $437 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $438(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $436 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [8])
	if ( (CALL memcmp(*($8 + [8]), ($11 + [8]), [8]) == 0) ){ goto $label$1 }
	$10 = *(*($8 + [12]) + [88])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$2 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903040, $11, *(*($8 + [16])))
	*(*(($8 + [12])) + [88]) = $10
	
.LABEL $label$2
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$1
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [24])
	if ( (CALL memcmp((*($8 + [8]) + [8]), ($11 + [8]), [8]) == 0) ){ goto $label$3 }
	$10 = *((*($8 + [12]) + [92]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$4 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903041, $11, *(*($8 + [16])))
	*((*(($8 + [12])) + [92])) = $10
	
.LABEL $label$4
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$3
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [18])
	if ( (CALL memcmp((*($8 + [8]) + [16]), ($11 + [8]), [8]) == 0) ){ goto $label$5 }
	$10 = *((*($8 + [12]) + [96]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$6 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903042, $11, *(*($8 + [16])))
	*((*(($8 + [12])) + [96])) = $10
	
.LABEL $label$6
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$5
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [64])
	if ( (CALL memcmp((*($8 + [8]) + [24]), ($11 + [8]), [8]) == 0) ){ goto $label$7 }
	$10 = *((*($8 + [12]) + [100]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$8 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903043, $11, *(*($8 + [16])))
	*((*(($8 + [12])) + [100])) = $10
	
.LABEL $label$8
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$7
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [44])
	if ( (CALL memcmp((*($8 + [8]) + [32]), ($11 + [8]), [8]) == 0) ){ goto $label$9 }
	$10 = *((*($8 + [12]) + [104]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$10 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903044, $11, *(*($8 + [16])))
	*((*(($8 + [12])) + [104])) = $10
	
.LABEL $label$10
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$9
	$8 = *($0)
	$9 = *($8)
	*($11 + [8]) = *(*($8 + [4]) + [48])
	if ( (CALL memcmp((*($8 + [8]) + [40]), ($11 + [8]), [8]) == 0) ){ goto $label$11 }
	$10 = *((*($8 + [12]) + [108]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$12 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)4732891782226903045, $11, *(*($8 + [16])))
	*((*(($8 + [12])) + [108])) = $10
	
.LABEL $label$12
	CALL db_idx64_update($10, *(*($8 + [20])), ($11 + [8]))
	
.LABEL $label$11
	$0 = *($0)
	$10 = *($0)
	*($11 + [8]) = *(*($0 + [4]) + [68])
	if ( (CALL memcmp((*($0 + [8]) + [48]), ($11 + [8]), [8]) == 0) ){ goto $label$13 }
	$8 = *((*($0 + [12]) + [112]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$14 }
	$8 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903046, $11, *(*($0 + [16])))
	*((*(($0 + [12])) + [112])) = $8
	
.LABEL $label$14
	CALL db_idx64_update($8, *(*($0 + [20])), ($11 + [8]))
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $431 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [272])
	*([0] + [4]) = $12
	CALL $216(($12 + [160]), $0, $1)
	CALL eosio_assert(((int_32)*(($12 + [180])) != (int_32)[0]), [2192])
	if ( ((*($12 + [252]) & [1]) == 0) ){ goto $label$1 }
	CALL $476(*(($12 + [260])))
	
.LABEL $label$1
	if ( ((*($12 + [240]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*(($12 + [248])))
	
.LABEL $label$2
	$5 = [0]
	$8 = CALL $449($0, $2)
	$6 = (CASTING uint_32)(uint_64 $8)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [4080])
	*($12 + [56]) = ($0 + [344])
	*($12 + [96]) = ((int_64)$8 & (int_64)4294967295)
	CALL $450(($12 + [160]), ($12 + [56]), ($12 + [96]))
	CALL eosio_assert(((int_32)*(*($12 + [164]) + [20]) == (int_32)$6), [2128])
	$11 = *($12 + [164])
	*($12 + [136]) = *($11)
	$4 = (($12 + [136]) + [8])
	CALL $492($4, ($11 + [8]))
	*($12 + [156]) = *($11 + [20])
	*($12 + [160]) = [104]
	$10 = CALL $154($0, ($12 + [136]), ($12 + [160]), $4, [600])
	*($12 + [96]) = $10
	*($12 + [120]) = $6
	*($12 + [112]) = *($1)
	*($12 + [104]) = *($12 + [136])
	*($12 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($0)
	*($12 + [56]) = ($12 + [96])
	CALL $451(($12 + [160]), ($0 + [384]), $8, ($12 + [56]))
	$8 = CALL $217($0)
	*($12 + [64]) = (int_64)2
	*($12 + [72]) = $10
	*($12 + [56]) = ( (int_64)1 ? $8 : (int_64)($8 == 0) )
	*($12 + [80]) = *($1)
	*($12 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($0)
	*($12 + [24]) = ($12 + [56])
	CALL $452(($12 + [160]), ($0 + [640]), $8, ($12 + [24]))
	*($12 + [48]) = ($0 + [920])
	CALL $453(($12 + [40]), ($12 + [48]), $1)
	$6 = *($12 + [44])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($6 + [8]) != (int_64)*($1)) ){ goto $label$3 }
	$8 = *($12 + [40])
	*($12 + [160]) = $8
	$6 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [1472])
	CALL $454(($12 + [160]))
	CALL $455(*($12 + [48]), $6)
	$8 = *($12 + [160])
	*($12 + [40]) = $8
	$6 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$4 }
	
.LABEL $label$3
	*(($12 + [176])) = (int_64)1398362884
	*($12 + [168]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$8 = (int_64)5462355
	
.LOOP $label$7:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$11 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	
.LABEL $label$5
	CALL eosio_assert($11, [1824])
	*(($12 + [180])) = *(($2 + [12]))
	*(($12 + [176])) = *(($2 + [8]))
	*((($12 + [160]) + [12])) = *(($2 + [4]))
	*($12 + [160]) = *($1)
	*($12 + [168]) = *($2)
	CALL memcpy((($12 + [160]) + [24]), ($12 + [96]), [40])
	CALL memcpy(($12 + [224]), ($12 + [56]), [40])
	*($12 + [32]) = (int_64)4410628
	$8 = ((int_64)*($2) * (int_64)50)
	*($12 + [24]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1760])
	$8 = (uint_64)*($12 + [32]) >> (uint_64)(int_64)8)
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [1824])
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([2912])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	*($12 + [8]) = ($6 << [1])
	$5 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = (($6 + [16]) & [-16])
	$5 = CALL $475($2)
	*($12 + [8]) = ($2 | [1])
	*($12 + [16]) = $5
	*($12 + [12]) = $6
	
.LABEL $label$17
	CALL memcpy($5, [2912], $6)
	
.LABEL $label$16
	*(($5 + $6)) = [0]
	CALL $290($0, $1, ($12 + [24]), ($12 + [8]))
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL $476(*($12 + [16]))
	
.LABEL $label$19
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1024]
	$9 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$25 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$5 = ($5 + [165])
	goto $label$23 
	
.LABEL $label$25
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$20 }
	*($12 + [32]) = $9
	*($12 + [24]) = $3
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [1040]
	$9 = (int_64)0
	
.LOOP $label$26:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$27 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$5 = ($5 + [165])
	goto $label$28 
	
.LABEL $label$29
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$27
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$26 }
	*($12 + [8]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [4496]
	$9 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$35 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$5 = ($5 + [165])
	goto $label$33 
	
.LABEL $label$35
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$31
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$30 }
	*($12) = $9
	CALL $456($0, ($12 + [24]), ($12 + [8]), $12, ($12 + [160]))
	if ( ((*(($12 + [144])) & [1]) == 0) ){ goto $label$36 }
	CALL $476(*(($12 + [152])))
	
.LABEL $label$36
	*([0] + [4]) = ($12 + [272])
	return (unreachable)
	
.LABEL $label$15
	CALL $477(($12 + [8]))
}

void .FUNC $430 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$8 = CALL $440(($0 + [1088]), (int_64)200, [4432])
	$12 = *(($8 + [16]))
	$9 = *($8 + [8])
	CALL eosio_assert((int_64)(((int_64)*($2) % (int_64)$9) == 0), [4080])
	$10 = *($1)
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$8), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $116($8, $6)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$8), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$12), [3488])
	*($13 + [72]) = ((int_64)*($2) / (int_64)$9)
	$10 = *($0)
	*($13 + [40]) = ($13 + [72])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [976])
	CALL $465($8, $7, $10, ($13 + [40]))
	*(($13 + [56])) = (int_64)1398362884
	*($13 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$10 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [1824])
	*(($13 + [60])) = *(($2 + [12]))
	*(($13 + [56])) = *(($2 + [8]))
	*((($13 + [40]) + [12])) = *(($2 + [4]))
	*($13 + [40]) = *($1)
	*($13 + [48]) = *($2)
	$10 = *($13 + [72])
	*($13 + [64]) = $10
	*($13 + [68]) = ((int_64)$10 + (int_64)*($7 + [32]))
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$15 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$10 }
	*($13 + [32]) = $11
	*($13 + [24]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1040]
	$11 = (int_64)0
	
.LOOP $label$16:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$17
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$16 }
	*($13 + [16]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [4512]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$25 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$25
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*($13 + [8]) = $11
	CALL $464($0, ($13 + [24]), ($13 + [16]), ($13 + [8]), ($13 + [40]))
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $433 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [288])
	*([0] + [4]) = $16
	CALL $216(($16 + [24]), $0, $1)
	CALL eosio_assert(((int_32)*(($16 + [44])) != (int_32)[0]), [2192])
	if ( ((*($16 + [116]) & [1]) == 0) ){ goto $label$1 }
	CALL $476(*(($16 + [124])))
	
.LABEL $label$1
	if ( ((*($16 + [104]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*(($16 + [112])))
	
.LABEL $label$2
	CALL $492(($16 + [264]), (*($3) + [12]))
	$11 = ($11 & [1])
	$11 = *($16 + [264])
	$10 = uint_32($11 >> [1])
	$9 = *($16 + [268])
	if ( (( $9 ? $10 : $11 ) == 0) ){ goto $label$4 }
	if ( $11 ){ goto $label$5 }
	$4 = [1]
	$9 = (($16 + [264]) | [1])
	$11 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$3 }
	$8 = ($9 + $11)
	$11 = ($11 + [1])
	if ( (((*($8) + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	$10 = *($16 + [272])
	$4 = [1]
	
.LOOP $label$7:
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$3 }
	$8 = ($10 + $11)
	$11 = ($11 + [1])
	if ( (((*($8) + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [4224])
	if ( ((*($16 + [264]) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*($16 + [272]))
	
.LABEL $label$8
	$11 = *($3)
	$8 = *($11 + [12])
	if ( ($8 & [1]) ){ goto $label$10 }
	$11 = uint_32($8 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$11 = *(($11 + [16]))
	
.LABEL $label$9
	CALL eosio_assert(($11 <= [18]), [4224])
	$13 = CALL _ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($3) + [12]), [0], [10])
	$3 = *(($0 + [488]))
	$9 = *(($0 + [492]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$11 }
	$11 = ($9 + [-24])
	$10 = ([0] - $3)
	
.LOOP $label$12:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$11 }
	$9 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $10) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = ($0 + [464])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$14 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$4), [720])
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$11 = CALL db_find_i64(*(($0 + [464])), *(($0 + [472])), (int_64)-6497942746098040832, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $132($4, $11)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$4), [720])
	
.LABEL $label$13
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [784])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)[1]), [1888])
	CALL eosio_assert(((int_64)*(($9 + [56])) == (int_64)*($2 + [8])), [3488])
	CALL eosio_assert(((int_64)*($9 + [48]) == (int_64)*($2)), [4080])
	$13 = *($9 + [24])
	$6 = *(($0 + [160]))
	$10 = *(($0 + [164]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	$11 = ($10 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$16:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$15 }
	$10 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$11 = ($0 + [136])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$18 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$11), [720])
	goto $label$17 
	
.LABEL $label$18
	$8 = [0]
	$10 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	$8 = CALL $79($11, $10)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$11), [720])
	
.LABEL $label$17
	$3 = ($9 + [48])
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [784])
	CALL eosio_assert(((int_64)*($8 + [24]) == (int_64)*($9 + [8])), [2128])
	$13 = *($0)
	*($16 + [24]) = $1
	CALL eosio_assert($10, [976])
	CALL $435($11, $8, $13, ($16 + [24]))
	$6 = ($9 + [8])
	CALL $182($0, $6)
	CALL $156($0, $1)
	$15 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($9 + [48])) * (float_64)(float_64)0.03))
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1760])
	$13 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [1824])
	$13 = *(($3 + [8]))
	*((($16 + [248]) + [8])) = $13
	*($16 + [248]) = *($3)
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [4256])
	$13 = (int_64)
	*($16 + [248]) = $13(*($16 + [248]) - $15))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [4304])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [4336])
	*((($16 + [232]) + [8])) = [0]
	*($16 + [232]) = (int_64)0
	$11 = CALL strlen([4368])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$27 }
	*($16 + [232]) = ($11 << [1])
	$10 = (($16 + [232]) | [1])
	if ( $11 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$3 = (($11 + [16]) & [-16])
	$10 = CALL $475($3)
	*($16 + [232]) = ($3 | [1])
	*($16 + [240]) = $10
	*($16 + [236]) = $11
	
.LABEL $label$26
	CALL memcpy($10, [4368], $11)
	
.LABEL $label$25
	*(($10 + $11)) = [0]
	CALL $326($0, $6, ($16 + [248]), ($16 + [232]))
	if ( ((*($16 + [232]) & [1]) == 0) ){ goto $label$28 }
	CALL $476(*($16 + [240]))
	
.LABEL $label$28
	CALL memcpy(($16 + [152]), $9, [80])
	*($16 + [168]) = *($1)
	*($16 + [280]) = (int_64)2
	$13 = *($0)
	*($16 + [28]) = ($16 + [280])
	*($16 + [24]) = ($16 + [152])
	CALL $121(($16 + [8]), ($0 + [512]), $13, ($16 + [24]))
	CALL eosio_assert($5, [1472])
	CALL eosio_assert($5, [1520])
	$11 = CALL db_next_i64(*($9 + [84]), ($16 + [24]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$29 }
	CALL $132($4, $11)
	
.LABEL $label$29
	CALL $123($4, $9)
	$13 = *(($9 + [8]))
	*(($16 + [52])) = *(($2 + [12]))
	*((($16 + [24]) + [24])) = *(($2 + [8]))
	*(($16 + [44])) = *(($2 + [4]))
	*($16 + [24]) = $13
	*($16 + [32]) = *($1)
	*($16 + [40]) = *($2)
	*($16 + [56]) = $15
	*(($16 + [64])) = (int_64)1397703940
	*(($16 + [96])) = *(($8 + [24]))
	*(($16 + [88])) = *(($8 + [16]))
	*(($16 + [80])) = *(($8 + [8]))
	*($16 + [72]) = *($8)
	CALL $492((($16 + [24]) + [80]), ($8 + [32]))
	CALL memcpy(($16 + [116]), ($8 + [44]), [36])
	$7 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1024]
	$14 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$35 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$8 = ($8 + [165])
	goto $label$33 
	
.LABEL $label$35
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$31
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$30 }
	*($16 + [16]) = $14
	*($16 + [8]) = $7
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [1040]
	$14 = (int_64)0
	
.LOOP $label$36:
	$12 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$37 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$8 = ($8 + [165])
	goto $label$38 
	
.LABEL $label$39
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$37
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$36 }
	*($16 + [280]) = $14
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [4416]
	$14 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$45 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$8 = ($8 + [165])
	goto $label$43 
	
.LABEL $label$45
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$41
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$40 }
	*($16) = $14
	CALL $434($0, ($16 + [8]), ($16 + [280]), $16, ($16 + [24]))
	if ( ((*(($16 + [104])) & [1]) == 0) ){ goto $label$46 }
	CALL $476(*(($16 + [112])))
	
.LABEL $label$46
	*([0] + [4]) = ($16 + [288])
	return (unreachable)
	
.LABEL $label$24
	CALL $477(($16 + [232]))
}

void .FUNC $432 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$8 = CALL $440(($0 + [1088]), (int_64)401, [4432])
	$10 = *(($8 + [16]))
	*(($13 + [72])) = $10
	*($13 + [64]) = *($8 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)*($2 + [8])), [3488])
	CALL eosio_assert(((int_64)*($13 + [64]) == (int_64)*($2)), [4080])
	$10 = *($1)
	$3 = *(($0 + [1024]))
	$7 = *(($0 + [1028]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [1000])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$8), [720])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [1000])), *(($0 + [1008])), (int_64)4157834734666924032, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $325($8, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$8), [720])
	
.LABEL $label$5
	CALL eosio_assert((int_64)(*($6 + [8]) == 0), [4464])
	$10 = *($0)
	*($13 + [40]) = ($13 + [64])
	CALL eosio_assert([1], [976])
	CALL $442($8, $6, $10, ($13 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$10 = *($0)
	*($13 + [40]) = $1
	*($13 + [44]) = ($13 + [64])
	CALL $441(($13 + [24]), $8, $10, ($13 + [40]))
	
.LABEL $label$3
	*(($13 + [56])) = (int_64)1398362884
	*($13 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$10 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [1824])
	*(($13 + [60])) = *(($2 + [12]))
	*(($13 + [56])) = *(($2 + [8]))
	*((($13 + [40]) + [12])) = *(($2 + [4]))
	*($13 + [40]) = *($1)
	*($13 + [48]) = *($2)
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	*($13 + [32]) = $11
	*($13 + [24]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1040]
	$11 = (int_64)0
	
.LOOP $label$18:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$19 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$18 }
	*($13 + [16]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [4192]
	$11 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$10 > (uint_64)(int_64)9) ){ goto $label$27 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$22 }
	*($13 + [8]) = $11
	CALL $443($0, ($13 + [24]), ($13 + [16]), ($13 + [8]), ($13 + [40]))
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $439 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$2 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$2 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), $2, [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$2 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), $2, [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [704])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [16])
	*($5 + [8]) = *($1)
	*($5 + [20]) = ($4 + [8])
	*($5 + [16]) = $4
	*($5 + [24]) = ($4 + [16])
	*($5 + [28]) = ($4 + [18])
	*($5 + [32]) = ($4 + [24])
	*($5 + [36]) = ($4 + [32])
	*($5 + [40]) = ($4 + [44])
	*($5 + [44]) = ($4 + [48])
	*($5 + [48]) = ($4 + [56])
	*($5 + [52]) = ($4 + [64])
	*($5 + [56]) = ($4 + [68])
	*($5 + [60]) = ($4 + [72])
	CALL $102(($5 + [16]), ($5 + [8]))
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $438 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($5 + [24]) = [48]
	*($5 + [8]) = ($5 + [24])
	*($5 + [36]) = ($1 + [56])
	$2 = ($1 + [48])
	*($5 + [32]) = $2
	*($5 + [40]) = ($1 + [64])
	*($5 + [44]) = ($1 + [66])
	*($5 + [48]) = ($1 + [72])
	*($5 + [52]) = ($1 + [80])
	*($5 + [56]) = ($1 + [92])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [112])
	*($5 + [72]) = ($1 + [116])
	*($5 + [76]) = ($1 + [120])
	CALL $101(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 == 0) ){ goto $label$2 }
	CALL $70($0, $3)
	$4 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($5 + [12]) = $0
	*($5 + [8]) = $0
	*($5 + [16]) = $4
	*($5 + [24]) = ($5 + [8])
	*($5 + [48]) = $2
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	CALL $439(($5 + [32]), ($5 + [24]))
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([56])) + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [20])
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [28])
	*($8 + [56]) = ($6 + [32])
	CALL $283(($8 + [32]), ($8 + [24]))
	*($6 + [48]) = [-1]
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $284(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [664]))
	$6 = *(($0 + [668]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [640])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [720])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*(($0 + [640])), *(($0 + [648])), (int_64)-4992623612187470848, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $262($1, $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [720])
	
.LABEL $label$4
	CALL eosio_assert([1], [1472])
	CALL eosio_assert([1], [1520])
	$6 = CALL db_next_i64(*($5 + [44]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $262($1, $6)
	
.LABEL $label$6
	CALL $279($1, $5)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [16])
	$4 = *($2)
	$2 = *($0 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($2)
	$2 = *($0 + [52])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [8])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $286 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $287 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	*($0 + [88]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [128])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($3 = ($0 + [136]))) = (int_64)0
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($1 << [1])
	$3 = ($3 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $475($2)
	*(($0 + [136])) = ($2 | [1])
	*(($0 + [144])) = $3
	*(($0 + [140])) = $1
	
.LABEL $label$3
	CALL memcpy($3, [512], $1)
	
.LABEL $label$2
	*(($3 + $1)) = [0]
	*(($0 + [160])) = [0]
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($0 + [188])) = [0]
	*(($0 + [192])) = [0]
	*($0 + [200]) = [0]
	*(($0 + [204])) = [0]
	*(($0 + [208])) = [0]
	*($0 + [224]) = (int_64)0
	*(($0 + [240])) = [0]
	*(($0 + [244])) = [0]
	*(($0 + [248])) = [0]
	*($0 + [264]) = (int_64)0
	*(($0 + [280])) = [0]
	*(($0 + [284])) = [0]
	*(($0 + [288])) = [0]
	return $0
	
.LABEL $label$1
	CALL $477($3)
	return (unreachable)
}

void .FUNC $284 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $476($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $131(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]), ($0 + [41]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$6 = *($0 + [4])
	$7 = *(($6 + [96]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040830, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [96])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $132($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-6497942746098040832, $3))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [96])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $288 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL $314($0, $1, $2)
	$5 = *(($0 + [392]))
	$4 = *(($0 + [384]))
	$7 = (int_64)0
	$1 = [432]
	
.LOOP $label$1:
	$7 = ((int_64)*(($0 + $1)) + (int_64)$7)
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[464]) ){ goto $label$1 }
	$7 = ((int_64)((uint_64)$7 % (uint_64)$5) + (int_64)1)
	*($0 + [88]) = ( $4 ? $7 : (uint_64)($7 <= $4) )
	CALL $315($0)
	$7 = *($3)
	if ( ((uint_64)*($0 + [264]) >= (uint_64)$7) ){ goto $label$4 }
	CALL $316($0)
	goto $label$3 
	
.LABEL $label$4
	*($0 + [224]) = (int_64)0
	*(($0 + [264])) = $7
	*(($0 + [232])) = (int_64)0
	$1 = ($0 + [240])
	if ( (*($1) & [1]) ){ goto $label$6 }
	*($1) = [0]
	$3 = ($0 + [248])
	goto $label$5 
	
.LABEL $label$6
	*(*(($3 = ($0 + [248])))) = [0]
	*(($0 + [244])) = [0]
	
.LABEL $label$5
	CALL $480($1, [0])
	*($3) = [0]
	*(($0 + [240])) = (int_64)0
	*(($0 + [252])) = (int_64)0
	*($9) = (int_64)0
	$1 = CALL memset(($9 + [8]), [0], [72])
	*(($9 + [16])) = (int_64)0
	*(($9 + [24])) = [0]
	*(($9 + [32])) = (int_64)0
	*(($9 + [44])) = (int_64)0
	*(($2 = ($9 + [40]))) = [0]
	*($9 + [8]) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*(($9 + [40])) = ($3 << [1])
	$8 = ($2 + [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = (($3 + [16]) & [-16])
	$8 = CALL $475($6)
	*(($9 + [40])) = ($6 | [1])
	*(($9 + [48])) = $8
	*(($9 + [44])) = $3
	
.LABEL $label$8
	CALL memcpy($8, [512], $3)
	
.LABEL $label$7
	*(($8 + $3)) = [0]
	*(($9 + [64])) = [0]
	*(($3 = ($9 + [56]))) = (int_64)0
	*(($9 + [72])) = (int_64)0
	*(($0 + [96])) = *($9)
	*(($0 + [104])) = *($1)
	*(($0 + [132])) = *(($1 + [28]))
	*(($0 + [128])) = *(($1 + [24]))
	*(($0 + [124])) = *(($1 + [20]))
	*(($0 + [120])) = *(($1 + [16]))
	*(($0 + [116])) = *(($1 + [12]))
	*(($0 + [112])) = *(($1 + [8]))
	$1 = ($0 + [136])
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($0 + [144]))) = [0]
	*(($0 + [140])) = [0]
	
.LABEL $label$10
	CALL $480($1, [0])
	$8 = *(($2 + [8]))
	$7 = *($2)
	*(($9 + [40])) = [0]
	*(($1 + [8])) = $8
	*($1) = $7
	*(($9 + [44])) = [0]
	*(($9 + [48])) = [0]
	*(($0 + [168])) = *(($3 + [16]))
	*(($0 + [160])) = *(($3 + [8]))
	*(($0 + [152])) = *($3)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $477($2)
}

int_32 .FUNC $289 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*((($2 = CALL memcpy($0, $1, [88])) + [96])) = *(($1 + [96]))
	*($2 + [88]) = *($1 + [88])
	*(($2 + [128])) = *(($1 + [128]))
	*(($2 + [120])) = *(($1 + [120]))
	*(($2 + [112])) = *(($1 + [112]))
	*(($2 + [104])) = *(($1 + [104]))
	CALL $492(($2 + [136]), ($1 + [136]))
	*(($2 + [168])) = *(($1 + [168]))
	*(($2 + [160])) = *(($1 + [160]))
	*(($2 + [152])) = *(($1 + [152]))
	*(($2 + [176])) = *(($1 + [176]))
	*(($5 = ($2 + [184]))) = [0]
	*(($2 + [188])) = [0]
	*(($2 + [192])) = [0]
	$0 = (*(($1 + [188])) - *(($1 + [184])))
	$3 = ((int_32)$0 / (int_32)[80])
	if ( ($0 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[53687092]) ){ goto $label$1 }
	$5 = CALL $475($0)
	*(($4 = ($2 + [188]))) = $5
	*(($2 + [192])) = ($5 + ((int_32)$3 * (int_32)[80]))
	*(($2 + [184])) = $5
	$3 = *(($1 + [188]))
	$0 = *(($1 + [184]))
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	*($5) = *($0)
	*(($5 + [24])) = *(($0 + [24]))
	*(($5 + [16])) = *(($0 + [16]))
	*(($5 + [8])) = *(($0 + [8]))
	CALL $492(($5 + [32]), ($0 + [32]))
	CALL memcpy(($5 + [44]), ($0 + [44]), [36])
	$5 = (*($4) + [80])
	*($4) = $5
	$0 = ($0 + [80])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $492(($2 + [200]), ($1 + [200]))
	*($2 + [216]) = *($1 + [216])
	return $2
	
.LABEL $label$1
	CALL $491($5)
	return (unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [76])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	*($9 + [28]) = ($4 + [8])
	*($9 + [32]) = ($4 + [16])
	*($9 + [36]) = ($4 + [24])
	*($9 + [40]) = ($4 + [32])
	*($9 + [44]) = ($4 + [40])
	*($9 + [48]) = ($4 + [48])
	*($9 + [52]) = ($4 + [64])
	*($9 + [56]) = ($4 + [72])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $128(($9 + [24]), ($9 + [16]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $476($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $476($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $476($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*(($18 = ($1 + [20]))) = (*($18) + [1])
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$6 = ($1 + [16])
	*($20 + [76]) = $6
	$7 = ($1 + [24])
	*($20 + [80]) = $7
	$8 = ($1 + [32])
	*($20 + [84]) = $8
	$9 = ($1 + [36])
	*($20 + [88]) = $9
	$10 = ($1 + [40])
	*($20 + [92]) = $10
	$11 = ($1 + [44])
	*($20 + [96]) = $11
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $6
	*($20 + [80]) = $7
	*($20 + [84]) = $8
	*($20 + [88]) = $9
	*($20 + [64]) = $1
	*($20 + [92]) = $10
	*($20 + [96]) = $11
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $184(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$9 = ($1 + [68])
	$10 = *($9)
	$8 = ($1 + [48])
	$16 = *($8)
	$7 = ($1 + [44])
	$17 = *($7)
	$6 = ($1 + [64])
	$18 = *($6)
	$5 = ($1 + [18])
	$19 = *($5)
	$4 = ($1 + [24])
	$20 = *($4)
	$3 = ($1 + [8])
	*(($22 = $21) + [16]) = *($3)
	*($22 + [24]) = $20
	*($22 + [32]) = $19
	*($22 + [40]) = $18
	*($22 + [48]) = $17
	*($22 + [56]) = $16
	*($22 + [64]) = $10
	$10 = *($1)
	*($6) = [1]
	CALL eosio_assert([1], [1184])
	*($22 + [72]) = [0]
	*($22) = ($22 + [72])
	*($22 + [84]) = $3
	*($22 + [80]) = $1
	$11 = ($1 + [16])
	*($22 + [88]) = $11
	*($22 + [92]) = $5
	*($22 + [96]) = $4
	$12 = ($1 + [32])
	*($22 + [100]) = $12
	*($22 + [104]) = $7
	*($22 + [108]) = $8
	$13 = ($1 + [56])
	*($22 + [112]) = $13
	*($22 + [116]) = $6
	*($22 + [120]) = $9
	$14 = ($1 + [72])
	*($22 + [124]) = $14
	CALL $101(($22 + [80]), $22)
	$15 = *($22 + [72])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $15)
	*($22 + [72]) = $22
	*($22 + [84]) = $3
	*($22 + [88]) = $11
	*($22 + [92]) = $5
	*($22 + [96]) = $4
	*($22 + [100]) = $12
	*($22 + [104]) = $7
	*($22 + [80]) = $1
	*($22 + [108]) = $8
	*($22 + [112]) = $13
	*($22 + [116]) = $6
	*($22 + [120]) = $9
	*($22 + [124]) = $14
	CALL $102(($22 + [80]), ($22 + [72]))
	CALL db_update_i64(*($1 + [84]), $2, $21, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$21 = (($22 + [16]) + [8])
	*($22 + [80]) = *($3)
	if ( (CALL memcmp(($22 + [16]), ($22 + [80]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [88])
	$15 = *($3)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$6 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903040, ($22 + [72]), $10)
	*($3) = $15
	
.LABEL $label$6
	CALL db_idx64_update($15, $2, ($22 + [80]))
	
.LABEL $label$5
	$15 = (($22 + [16]) + [16])
	*($22 + [80]) = *($4)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [92])
	$21 = *($4)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$8 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903041, ($22 + [72]), $10)
	*($4) = $21
	
.LABEL $label$8
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$7
	$21 = (($22 + [16]) + [24])
	*($22 + [80]) = *($5)
	if ( (CALL memcmp($15, ($22 + [80]), [8]) == 0) ){ goto $label$9 }
	$5 = ($1 + [96])
	$15 = *($5)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$10 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903042, ($22 + [72]), $10)
	*($5) = $15
	
.LABEL $label$10
	CALL db_idx64_update($15, $2, ($22 + [80]))
	
.LABEL $label$9
	$15 = (($22 + [16]) + [32])
	*($22 + [80]) = *($6)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$11 }
	$6 = ($1 + [100])
	$21 = *($6)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$12 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903043, ($22 + [72]), $10)
	*($6) = $21
	
.LABEL $label$12
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$11
	$21 = ($22 + [56])
	*($22 + [80]) = *($7)
	if ( (CALL memcmp($15, ($22 + [80]), [8]) == 0) ){ goto $label$13 }
	$15 = ($1 + [104])
	$6 = *($15)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$14 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903044, ($22 + [72]), $10)
	*($15) = $6
	
.LABEL $label$14
	CALL db_idx64_update($6, $2, ($22 + [80]))
	
.LABEL $label$13
	$6 = (($22 + [16]) + [48])
	*($22 + [80]) = *($8)
	if ( (CALL memcmp($21, ($22 + [80]), [8]) == 0) ){ goto $label$15 }
	$15 = ($1 + [108])
	$21 = *($15)
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$16 }
	$21 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903045, ($22 + [72]), $10)
	*($15) = $21
	
.LABEL $label$16
	CALL db_idx64_update($21, $2, ($22 + [80]))
	
.LABEL $label$15
	*($22 + [80]) = *($9)
	if ( (CALL memcmp($6, ($22 + [80]), [8]) == 0) ){ goto $label$17 }
	$21 = ($1 + [112])
	$1 = *($21)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$18 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903046, ($22 + [72]), $10)
	*($21) = $1
	
.LABEL $label$18
	CALL db_idx64_update($1, $2, ($22 + [80]))
	
.LABEL $label$17
	*([0] + [4]) = ($22 + [128])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [112])
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($1 + [36]) = (*($1 + [36]) + [-1])
	$3 = ($1 + [8])
	*(($20 = $19) + [24]) = *($3)
	$4 = ($1 + [12])
	*($20 + [32]) = *($4)
	$5 = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [40]) = [0]
	*($20 + [8]) = ($20 + [40])
	*($20 + [52]) = $3
	*($20 + [48]) = $1
	*($20 + [56]) = $4
	$7 = ($1 + [16])
	*($20 + [60]) = $7
	$8 = ($1 + [24])
	*($20 + [64]) = $8
	$9 = ($1 + [32])
	*($20 + [68]) = $9
	$6 = ($1 + [36])
	*($20 + [72]) = $6
	$10 = ($1 + [40])
	*($20 + [76]) = $10
	$11 = ($1 + [44])
	*($20 + [80]) = $11
	$12 = ($1 + [48])
	*($20 + [84]) = $12
	$13 = ($1 + [56])
	*($20 + [88]) = $13
	$14 = ($1 + [64])
	*($20 + [92]) = $14
	$15 = ($1 + [80])
	*($20 + [96]) = $15
	$16 = ($1 + [92])
	*($20 + [100]) = $16
	$17 = ($1 + [104])
	*($20 + [104]) = $17
	CALL $129(($20 + [48]), ($20 + [8]))
	$18 = *($20 + [40])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [40]) = ($20 + [8])
	*($20 + [52]) = $3
	*($20 + [56]) = $4
	*($20 + [60]) = $7
	*($20 + [64]) = $8
	*($20 + [68]) = $9
	*($20 + [72]) = $6
	*($20 + [48]) = $1
	*($20 + [76]) = $10
	*($20 + [80]) = $11
	*($20 + [84]) = $12
	*($20 + [88]) = $13
	*($20 + [92]) = $14
	*($20 + [96]) = $15
	*($20 + [100]) = $16
	*($20 + [104]) = $17
	CALL $130(($20 + [48]), ($20 + [40]))
	CALL db_update_i64(*($1 + [116]), $2, $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$19 = (($20 + [24]) + [8])
	*($20 + [48]) = *($3)
	if ( (CALL memcmp(($20 + [24]), ($20 + [48]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [120])
	$18 = *($3)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$6 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($20 + [40]), $5)
	*($3) = $18
	
.LABEL $label$6
	CALL db_idx64_update($18, $2, ($20 + [48]))
	
.LABEL $label$5
	*($20 + [48]) = *($4)
	if ( (CALL memcmp($19, ($20 + [48]), [8]) == 0) ){ goto $label$7 }
	$19 = ($1 + [124])
	$1 = *($19)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738623, ($20 + [40]), $5)
	*($19) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($20 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($20 + [112])
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $116($5, $6)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	
.LABEL $label$3
	$2 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [976])
	CALL $183($5, $1, $2, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $491 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([88])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [44]) = [0]
	*($6 + [48]) = [0]
	*($6 + [52]) = [0]
	*($6 + [64]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [36])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [44])
	*($8 + [60]) = ($6 + [56])
	CALL $191(($8 + [32]), ($8 + [24]))
	*($6 + [72]) = [-1]
	*($6 + [68]) = $1
	*($6 + [76]) = [-1]
	*($6 + [80]) = [-1]
	*($6 + [84]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [68])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $168(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [52])))
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$11
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_64 .FUNC _ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([13072])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $475($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [13072], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoll($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $488($7)
	
.LABEL $label$1
	CALL $489($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($4 + [52])))
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$8
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($4 + [52])))
	
.LABEL $label$11
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$12
	CALL $476($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $188(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $189(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $358 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [128])
	*([0] + [4]) = $21
	*(($20 = $21) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [40]) = *($1 + [12])
	$19 = *($1 + [8])
	*($20 + [32]) = (CASTING uint_64)(uint_32 $19)
	*($20 + [24]) = *($1)
	$4 = ($1 + [8])
	if ( ($19 == 0) ){ goto $label$2 }
	$18 = ($19 + [-1])
	*($4) = $18
	goto $label$1 
	
.LABEL $label$2
	$18 = [0]
	
.LABEL $label$1
	if ( ((int_64)*(*($3)) != (int_64)4) ){ goto $label$3 }
	$6 = *($1 + [48])
	if ( (int_64)($6 == 0) ){ goto $label$3 }
	*(($1 + [48])) = ((int_64)$6 + (int_64)-1)
	
.LABEL $label$3
	$5 = ($1 + [12])
	$19 = [1]
	if ( ($18 == 0) ){ goto $label$4 }
	$19 = [16]
	$3 = [3376]
	
.LOOP $label$6:
	if ( ((uint_32)($19 + [-2]) > (uint_32)[14]) ){ goto $label$5 }
	$19 = ($19 + [-1])
	$17 = *($3)
	$3 = ($3 + [-4])
	if ( ($18 <= $17) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$19 = [0]
	
.LABEL $label$4
	*(($1 + [12])) = $19
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	*($20 + [72]) = $5
	$17 = ($1 + [16])
	*($20 + [76]) = $17
	$18 = ($1 + [24])
	*($20 + [80]) = $18
	$7 = ($1 + [32])
	*($20 + [84]) = $7
	$8 = ($1 + [36])
	*($20 + [88]) = $8
	$9 = ($1 + [40])
	*($20 + [92]) = $9
	$10 = ($1 + [44])
	*($20 + [96]) = $10
	$11 = ($1 + [48])
	*($20 + [100]) = $11
	$12 = ($1 + [56])
	*($20 + [104]) = $12
	$13 = ($1 + [64])
	*($20 + [108]) = $13
	$14 = ($1 + [80])
	*($20 + [112]) = $14
	$15 = ($1 + [92])
	*($20 + [116]) = $15
	$16 = ($1 + [104])
	*($20 + [120]) = $16
	CALL $129(($20 + [64]), ($20 + [8]))
	$3 = *($20 + [56])
	if ( ($3 <= [513]) ){ goto $label$8 }
	$19 = CALL malloc($3)
	$2 = *($20 + [48])
	goto $label$7 
	
.LABEL $label$8
	$19 = ($21 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$7
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $3)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $17
	*($20 + [80]) = $18
	*($20 + [84]) = $7
	*($20 + [88]) = $8
	*($20 + [64]) = $1
	*($20 + [92]) = $9
	*($20 + [96]) = $10
	*($20 + [100]) = $11
	*($20 + [104]) = $12
	*($20 + [108]) = $13
	*($20 + [112]) = $14
	*($20 + [116]) = $15
	*($20 + [120]) = $16
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), $2, $19, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($19)
	
.LABEL $label$9
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $359(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $359 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $478 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $479($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $354 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $355 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $356 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [196]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4157834741199929344)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $334(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $357 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $476($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [196]))
}

void .FUNC $350 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [192])
	*([0] + [4]) = $6
	*($6 + [136]) = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($6 + [96]) = *($1 + [8])
	$2 = *($1 + [64])
	$4 = *($1 + [56])
	$5 = *($1 + [40])
	*($6 + [104]) = *($1 + [24])
	*($6 + [112]) = $5
	*($6 + [120]) = $4
	*($6 + [128]) = $2
	$2 = *($1)
	*($6 + [88]) = $2
	CALL $351($3, $1)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [1184])
	*($6 + [80]) = ($6 + [72])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	*($6 + [144]) = ($6 + [72])
	*($6 + [156]) = ($1 + [8])
	*($6 + [152]) = $1
	*($6 + [160]) = ($1 + [16])
	*($6 + [164]) = ($1 + [24])
	*($6 + [168]) = ($1 + [32])
	*($6 + [172]) = ($1 + [40])
	*($6 + [176]) = ($1 + [48])
	*($6 + [180]) = ($1 + [56])
	*($6 + [184]) = ($1 + [64])
	CALL $347(($6 + [152]), ($6 + [144]))
	CALL db_update_i64(*($1 + [76]), *($6 + [136]), $6, [72])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [156]) = $1
	*($6 + [152]) = $0
	*($6 + [164]) = $1
	*($6 + [160]) = ($6 + [96])
	*($6 + [168]) = ($6 + [88])
	*($6 + [172]) = ($6 + [136])
	*($6 + [144]) = ($6 + [152])
	CALL $352(($6 + [144]), $3, ($3 + [1]), ($3 + [2]), ($3 + [3]), ($3 + [4]))
	*([0] + [4]) = ($6 + [192])
}

void .FUNC $351 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	$2 = [0]
	if ( (*(*($0)) == 0) ){ goto $label$1 }
	$2 = ((int_64)*(*($0 + [4])) == (int_64)2)
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)(CASTING uint_64)(uint_32 $2))
	if ( *(*($0)) ){ goto $label$2 }
	$3 = ((int_64)*(*($0 + [4])) == (int_64)2)
	
.LABEL $label$2
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)(CASTING uint_64)(uint_32 $3))
	$3 = [0]
	$2 = [0]
	if ( (*(*($0)) == 0) ){ goto $label$3 }
	$2 = ((int_64)*(*($0 + [4])) == (int_64)4)
	
.LABEL $label$3
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)(CASTING uint_64)(uint_32 $2))
	if ( *(*($0)) ){ goto $label$4 }
	$3 = ((int_64)*(*($0 + [4])) == (int_64)4)
	
.LABEL $label$4
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)(CASTING uint_64)(uint_32 $3))
	$3 = [0]
	$2 = [0]
	if ( (*(*($0)) == 0) ){ goto $label$5 }
	$2 = ((int_64)*(*($0 + [4])) == (int_64)6)
	
.LABEL $label$5
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)(CASTING uint_64)(uint_32 $2))
	if ( *(*($0)) ){ goto $label$6 }
	$3 = ((int_64)*(*($0 + [4])) == (int_64)6)
	
.LABEL $label$6
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)(CASTING uint_64)(uint_32 $3))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
}

void .FUNC $352 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = *($0)
	$7 = *($6)
	*($9 + [8]) = *(*($6 + [4]) + [8])
	if ( (CALL memcmp(*($6 + [8]), ($9 + [8]), [8]) == 0) ){ goto $label$1 }
	$8 = *(*($6 + [12]) + [80])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4157834741345014784, $9, *(*($6 + [16])))
	*(*(($6 + [12])) + [80]) = $8
	
.LABEL $label$2
	CALL db_idx64_update($8, *(*($6 + [20])), ($9 + [8]))
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6)
	*($9 + [8]) = *(*($6 + [4]) + [24])
	if ( (CALL memcmp((*($6 + [8]) + [8]), ($9 + [8]), [8]) == 0) ){ goto $label$3 }
	$8 = *((*($6 + [12]) + [84]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4157834741345014785, $9, *(*($6 + [16])))
	*((*(($6 + [12])) + [84])) = $8
	
.LABEL $label$4
	CALL db_idx64_update($8, *(*($6 + [20])), ($9 + [8]))
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6)
	*($9 + [8]) = *(*($6 + [4]) + [40])
	if ( (CALL memcmp((*($6 + [8]) + [16]), ($9 + [8]), [8]) == 0) ){ goto $label$5 }
	$8 = *((*($6 + [12]) + [88]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4157834741345014786, $9, *(*($6 + [16])))
	*((*(($6 + [12])) + [88])) = $8
	
.LABEL $label$6
	CALL db_idx64_update($8, *(*($6 + [20])), ($9 + [8]))
	
.LABEL $label$5
	$6 = *($0)
	$7 = *($6)
	*($9 + [8]) = *(*($6 + [4]) + [56])
	if ( (CALL memcmp((*($6 + [8]) + [24]), ($9 + [8]), [8]) == 0) ){ goto $label$7 }
	$8 = *((*($6 + [12]) + [92]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4157834741345014787, $9, *(*($6 + [16])))
	*((*(($6 + [12])) + [92])) = $8
	
.LABEL $label$8
	CALL db_idx64_update($8, *(*($6 + [20])), ($9 + [8]))
	
.LABEL $label$7
	$0 = *($0)
	$8 = *($0)
	*($9 + [8]) = *(*($0 + [4]) + [64])
	if ( (CALL memcmp((*($0 + [8]) + [32]), ($9 + [8]), [8]) == 0) ){ goto $label$9 }
	$6 = *((*($0 + [12]) + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$10 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4157834741345014788, $9, *(*($0 + [16])))
	*((*(($0 + [12])) + [96])) = $6
	
.LABEL $label$10
	CALL db_idx64_update($6, *(*($0 + [20])), ($9 + [8]))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $353 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$6 = *($0)
	$7 = *($6 + [12])
	$8 = *($7)
	$9 = *(*($6 + [8]))
	$10 = *(*($6) + [8])
	*($11 + [8]) = *($7 + [8])
	$7 = CALL db_idx64_store($10, (int_64)4157834741345014784, $9, $8, ($11 + [8]))
	*(*($6 + [4]) + [80]) = $7
	$6 = *($0)
	$7 = *($6 + [12])
	$8 = *($7)
	$9 = *(*($6 + [8]))
	$10 = *(*($6) + [8])
	*($11 + [8]) = *($7 + [24])
	$7 = CALL db_idx64_store($10, (int_64)4157834741345014785, $9, $8, ($11 + [8]))
	*((*($6 + [4]) + [84])) = $7
	$6 = *($0)
	$7 = *($6 + [12])
	$8 = *($7)
	$9 = *(*($6 + [8]))
	$10 = *(*($6) + [8])
	*($11 + [8]) = *($7 + [40])
	$7 = CALL db_idx64_store($10, (int_64)4157834741345014786, $9, $8, ($11 + [8]))
	*((*($6 + [4]) + [88])) = $7
	$6 = *($0)
	$7 = *($6 + [12])
	$8 = *($7)
	$9 = *(*($6 + [8]))
	$10 = *(*($6) + [8])
	*($11 + [8]) = *($7 + [56])
	$7 = CALL db_idx64_store($10, (int_64)4157834741345014787, $9, $8, ($11 + [8]))
	*((*($6 + [4]) + [92])) = $7
	$0 = *($0)
	$6 = *($0 + [12])
	$8 = *($6)
	$9 = *(*($0 + [8]))
	$10 = *(*($0) + [8])
	*($11 + [8]) = *($6 + [64])
	$6 = CALL db_idx64_store($10, (int_64)4157834741345014788, $9, $8, ($11 + [8]))
	*((*($0 + [4]) + [96])) = $6
	*([0] + [4]) = ($11 + [16])
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC strtoll (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [1776])
	*([0] + [4]) = $10
	*($10 + [1768]) = $1
	$3 = CALL $30(($10 + [376]), $0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [528]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$9 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [544]
	$8 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$15 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$15
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$10 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$9 }
	*($10 + [372]) = [0]
	*($10 + [368]) = [1]
	*($10 + [8 align=4]) = *($10 + [368])
	CALL $32($3, ($10 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [544]
	$8 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$21 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$17
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$22 }
	CALL $33(($10 + [320]))
	*((($10 + [272]) + [24])) = *((($10 + [320]) + [24]))
	*((($10 + [272]) + [16])) = *((($10 + [320]) + [16]))
	*((($10 + [272]) + [8])) = *((($10 + [320]) + [8]))
	*($10 + [272]) = *($10 + [320])
	$5 = (($10 + [320]) + [32])
	CALL $492((($10 + [272]) + [32]), $5)
	CALL _ZN4sghk10tptransferERKyN5eosio8currency8transferE($3, ($10 + [1768]), ($10 + [272]))
	if ( ((*($10 + [304]) & [1]) == 0) ){ goto $label$23 }
	CALL $476(*(($10 + [312])))
	
.LABEL $label$23
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($10 + [360])))
	goto $label$8 
	
.LABEL $label$22
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $64($3)
	*([0] + [4]) = ($10 + [1776])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 > (int_64)4730614989889994751) ){ goto $label$40 }
	if ( ((int_64)$2 > (int_64)-4352386765319831553) ){ goto $label$39 }
	if ( ((int_64)$2 > (int_64)-4992623624440512513) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-6533258700415565824) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-6083090646625517568) ){ goto $label$25 }
	*($10 + [188]) = [0]
	*($10 + [184]) = [2]
	*($10 + [96 align=4]) = *($10 + [184])
	CALL $50($3, ($10 + [96]))
	goto $label$24 
	
.LABEL $label$40
	if ( ((int_64)$2 > (int_64)5562627511889690623) ){ goto $label$38 }
	if ( ((int_64)$2 > (int_64)4732888668045311999) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)4730614989889994752) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)4732888407366696960) ){ goto $label$25 }
	*($10 + [164]) = [0]
	*($10 + [160]) = [3]
	*($10 + [120 align=4]) = *($10 + [160])
	CALL $50($3, ($10 + [120]))
	goto $label$24 
	
.LABEL $label$39
	if ( ((int_64)$2 > (int_64)3849075353381240831) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4352386765319831552) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-4227572822580396032) ){ goto $label$25 }
	*($10 + [204]) = [0]
	*($10 + [200]) = [4]
	*($10 + [80 align=4]) = *($10 + [200])
	CALL $50($3, ($10 + [80]))
	goto $label$24 
	
.LABEL $label$38
	if ( ((int_64)$2 > (int_64)8421059068054994943) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)5562627511889690624) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$25 }
	*($10 + [156]) = [0]
	*($10 + [152]) = [5]
	*($10 + [128 align=4]) = *($10 + [152])
	CALL $61($3, ($10 + [128]))
	goto $label$24 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4421664685212827648) ){ goto $label$25 }
	*($10 + [180]) = [0]
	*($10 + [176]) = [6]
	*($10 + [104 align=4]) = *($10 + [176])
	CALL $56($3, ($10 + [104]))
	goto $label$24 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)4732888668045312000) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4769497573093572608) ){ goto $label$25 }
	*($10 + [172]) = [0]
	*($10 + [168]) = [7]
	*($10 + [112 align=4]) = *($10 + [168])
	CALL $58($3, ($10 + [112]))
	goto $label$24 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)3849075353381240832) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4157834728315027456) ){ goto $label$25 }
	*($10 + [252]) = [0]
	*($10 + [248]) = [8]
	*($10 + [32 align=4]) = *($10 + [248])
	CALL $40($3, ($10 + [32]))
	goto $label$24 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)8421059068054994944) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)8428183962663637504) ){ goto $label$25 }
	*($10 + [228]) = [0]
	*($10 + [224]) = [9]
	*($10 + [56 align=4]) = *($10 + [224])
	CALL $46($3, ($10 + [56]))
	goto $label$24 
	
.LABEL $label$33
	*($10 + [212]) = [0]
	*($10 + [208]) = [10]
	*($10 + [72 align=4]) = *($10 + [208])
	CALL $50($3, ($10 + [72]))
	goto $label$24 
	
.LABEL $label$32
	*($10 + [244]) = [0]
	*($10 + [240]) = [11]
	*($10 + [40 align=4]) = *($10 + [240])
	CALL $42($3, ($10 + [40]))
	goto $label$24 
	
.LABEL $label$31
	*($10 + [268]) = [0]
	*($10 + [264]) = [12]
	*($10 + [16 align=4]) = *($10 + [264])
	CALL $36($3, ($10 + [16]))
	goto $label$24 
	
.LABEL $label$30
	*($10 + [220]) = [0]
	*($10 + [216]) = [13]
	*($10 + [64 align=4]) = *($10 + [216])
	CALL $48($3, ($10 + [64]))
	goto $label$24 
	
.LABEL $label$29
	*($10 + [236]) = [0]
	*($10 + [232]) = [14]
	*($10 + [48 align=4]) = *($10 + [232])
	CALL $44($3, ($10 + [48]))
	goto $label$24 
	
.LABEL $label$28
	*($10 + [196]) = [0]
	*($10 + [192]) = [15]
	*($10 + [88 align=4]) = *($10 + [192])
	CALL $53($3, ($10 + [88]))
	goto $label$24 
	
.LABEL $label$27
	*($10 + [148]) = [0]
	*($10 + [144]) = [16]
	*($10 + [136 align=4]) = *($10 + [144])
	CALL $63($3, ($10 + [136]))
	goto $label$24 
	
.LABEL $label$26
	*($10 + [260]) = [0]
	*($10 + [256]) = [17]
	*($10 + [24 align=4]) = *($10 + [256])
	CALL $38($3, ($10 + [24]))
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert([0], [560])
	
.LABEL $label$24
	CALL eosio_exit([0])
}

int_32 .FUNC $310 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [88]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [128])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($5 = ($0 + [136]))) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*(($0 + [136])) = ($4 | [1])
	*(($0 + [144])) = $5
	*(($0 + [140])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [512], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*(($0 + [160])) = [0]
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	*(($0 + [188])) = [0]
	*(($0 + [192])) = [0]
	*($0 + [200]) = [0]
	*(($0 + [204])) = [0]
	*(($0 + [208])) = [0]
	*($0 + [224]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [16])
	*($6 + [28]) = ($0 + [24])
	*($6 + [32]) = ($0 + [88])
	*($6 + [36]) = ($0 + [200])
	*($6 + [40]) = ($0 + [216])
	CALL $311(($6 + [16]), ($6 + [8]))
	$3 = *(*($2 + [8]))
	*($0 + [232]) = [-1]
	*($0 + [228]) = $3
	*(($0 + [236])) = [-1]
	*([0] + [4]) = ($6 + [48])
	return $0
	
.LABEL $label$1
	CALL $477($5)
	return (unreachable)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

void .FUNC $311 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [24])
	*($4 + [24]) = ($3 + [28])
	*($4 + [28]) = ($3 + [32])
	*($4 + [32]) = ($3 + [40])
	*($4 + [36]) = ($3 + [48])
	*($4 + [40]) = ($3 + [56])
	CALL $214(($4 + [8]), $4)
	$3 = *($0 + [16])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [88])
	CALL $244(($4 + [8]), $4)
	CALL $68(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($4 + [48])
}

void .FUNC _Z10str_to_sigNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL strlen([416])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [16]) = ($4 << [1])
	$2 = (($5 + [16]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $475($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $2
	*($5 + [20]) = $4
	
.LABEL $label$3
	CALL memcpy($2, [416], $4)
	
.LABEL $label$2
	*(($2 + $4)) = [0]
	$4 = *($5 + [16])
	CALL $493($5, $1, ( *($5 + [20]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	if ( (*($1) & [1]) ){ goto $label$6 }
	*($1) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$5
	$4 = [0]
	CALL $480($1, [0])
	*($1) = *($5)
	$2 = *(($5 + [8]))
	*(($1 + [8])) = $2
	$3 = *($1)
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( $2 ? ($1 + [1]) : ($3 & [1]) ), $5)
	*($0) = [0]
	$2 = ($0 + [1])
	$1 = *($5)
	
.LOOP $label$7:
	*(($2 + $4)) = *(($1 + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[65]) ){ goto $label$7 }
	*($5 + [4]) = $1
	CALL $476($1)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*($5 + [24]))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $477(($5 + [16]))
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

int_32 .FUNC _Z7all_numNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = *($0)
	$1 = ($3 & [1])
	if ( $1 ){ goto $label$5 }
	if ( uint_32($3 >> [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($0 + [4]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $1 ){ goto $label$6 }
	$1 = uint_32($3 >> [1])
	$2 = ($0 + [1])
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$0 = ($2 + $3)
	$3 = ($3 + [1])
	if ( (((*($0) + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	$1 = *($0 + [4])
	$3 = [0]
	$2 = ($0 + [8])
	
.LOOP $label$8:
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	$0 = (*($2) + $3)
	$3 = ($3 + [1])
	if ( (((*($0) + [-48]) & [255]) <= [10]) ){ goto $label$8 }
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [1]
	
.LABEL $label$1
	return [1]
}

void .FUNC _Z10str_to_pubNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$2 = CALL strlen([432])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [32]) = ($2 << [1])
	$3 = (($5 + [32]) | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$3 = CALL $475($4)
	*($5 + [32]) = ($4 | [1])
	*($5 + [40]) = $3
	*($5 + [36]) = $2
	
.LABEL $label$3
	CALL memcpy($3, [432], $2)
	
.LABEL $label$2
	$4 = [0]
	*(($3 + $2)) = [0]
	$2 = *($5 + [32])
	CALL $493(($5 + [16]), $1, ( *($5 + [36]) ? uint_32($2 >> [1]) : ($2 & [1]) ), [-1], $1)
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($5 + [24]) ? (($5 + [16]) | [1]) : (*($5 + [16]) & [1]) ), $5)
	*($0) = [0]
	$3 = ($0 + [1])
	$2 = *($5)
	
.LOOP $label$5:
	*(($3 + $4)) = *(($2 + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[33]) ){ goto $label$5 }
	*($5 + [4]) = $2
	CALL $476($2)
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($5 + [24])))
	
.LABEL $label$6
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*($5 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $477(($5 + [32]))
}

void .FUNC _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$11 = *($1)
	if ( ($11 & [1]) ){ goto $label$2 }
	$4 = ($1 + [1])
	*($12 + [24]) = $4
	$1 = uint_32($11 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [8])
	*($12 + [24]) = $4
	$1 = *($1 + [4])
	
.LABEL $label$1
	$11 = ($4 + $1)
	*($12 + [16]) = $11
	*($12) = $4
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$6 }
	$3 = ($1 + [-1])
	$6 = ($2 & [255])
	$7 = ($0 + [8])
	$8 = ($0 + [4])
	$1 = $4
	$10 = [0]
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*($4) != (int_32)$6) ){ goto $label$8 }
	$11 = *($8)
	if ( ((uint_32)$11 >= (uint_32)*($7)) ){ goto $label$13 }
	*($11) = (int_64)0
	*(($11 + [8])) = [0]
	$5 = ($4 - $1)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$12 }
	*($11) = ($5 << [1])
	$10 = ($11 + [1])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL $26($0, ($12 + [24]), $12)
	goto $label$9 
	
.LABEL $label$12
	$9 = (($5 + [16]) & [-16])
	$10 = CALL $475($9)
	*($11) = ($9 | [1])
	*($11 + [8]) = $10
	*($11 + [4]) = $5
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$11
	$11 = $10
	
.LOOP $label$14:
	*($11) = *($1)
	$11 = ($11 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$10 = ($10 + $5)
	
.LABEL $label$10
	*($10) = [0]
	*($8) = (*($8) + [12])
	
.LABEL $label$9
	$4 = *($12)
	$1 = ($4 + [1])
	*($12 + [24]) = $1
	$10 = ((int_32)$2 == (int_32)$3)
	$11 = *($12 + [16])
	
.LABEL $label$8
	$4 = ($4 + [1])
	*($12) = $4
	$2 = ($2 + [1])
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$7 }
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$19 }
	$4 = *($0 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($0 + [8])) ){ goto $label$18 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$2 = ($11 - $1)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 > (uint_32)[10]) ){ goto $label$17 }
	*($4) = ($2 << [1])
	$6 = ($4 + [1])
	goto $label$16 
	
.LABEL $label$19
	if ( ($10 & [1]) ){ goto $label$15 }
	goto $label$6 
	
.LABEL $label$18
	CALL $26($0, ($12 + [24]), ($12 + [16]))
	if ( ($10 & [1]) ){ goto $label$15 }
	goto $label$6 
	
.LABEL $label$17
	$8 = (($2 + [16]) & [-16])
	$6 = CALL $475($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $2
	
.LABEL $label$16
	$4 = $6
	
.LOOP $label$20:
	*($4) = *($1)
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$20 }
	*(($6 + $2)) = [0]
	*(($1 = ($0 + [4]))) = (*($1) + [12])
	if ( (($10 & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$15
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$23 }
	*($12) = ($1 << [1])
	$11 = ($12 | [1])
	if ( $1 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$4 = (($1 + [16]) & [-16])
	$11 = CALL $475($4)
	*($12) = ($4 | [1])
	*($12 + [8]) = $11
	*($12 + [4]) = $1
	
.LABEL $label$22
	CALL memcpy($11, [512], $1)
	
.LABEL $label$21
	*(($11 + $1)) = [0]
	$1 = *($0 + [4])
	if ( ((uint_32)$1 >= (uint_32)*($0 + [8])) ){ goto $label$24 }
	*($1) = *($12)
	$1 = ($12 + [8])
	*(($1 + [8])) = *($1)
	*($1) = [0]
	*($12) = [0]
	*($12 + [4]) = [0]
	*(($1 = ($0 + [4]))) = (*($1) + [12])
	goto $label$6 
	
.LABEL $label$24
	CALL $27($0, $12)
	if ( ((*($12) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($12 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($12 + [32])
	return (unreachable)
	
.LABEL $label$5
	CALL $477($11)
	
.LABEL $label$4
	CALL $477($12)
	
.LABEL $label$3
	CALL $477($4)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [448])
	$2 = CALL $485($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $493($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [480])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $480($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $476($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $9) / (int_32)[12])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = [357913941]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[12])
	if ( ((uint_32)$9 > (uint_32)[178956969]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$8 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$3 * (int_32)[12])))) = [0]
	*(($9 + [4])) = (int_64)0
	$1 = *($1)
	$2 = *($2)
	$4 = ($2 - $1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($9) = ($4 << [1])
	$7 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$7 = CALL $475($5)
	*($9) = ($5 | [1])
	*(($3 = ($6 + ((int_32)$3 * (int_32)[12]))) + [8]) = $7
	*($3 + [4]) = $4
	
.LABEL $label$6
	$3 = ((int_32)$8 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$8 = $7
	
.LOOP $label$9:
	*($8) = *($1)
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $4)
	
.LABEL $label$8
	$4 = ($6 + $3)
	*($7) = [0]
	$7 = ($9 + [12])
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$11 }
	$2 = ([0] - $1)
	$1 = ($8 + [-12])
	
.LOOP $label$12:
	*(($9 + [-12])) = *($1)
	$8 = ($1 + [8])
	*(($9 + [-4])) = *($8)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($8) = [0]
	$9 = ($9 + [-12])
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$12 }
	$1 = *(($0 + [4]))
	$8 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$8 = $1
	
.LABEL $label$10
	*($0) = $9
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$13 }
	$9 = ([0] - $8)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $9) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $476($8)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $477($9)
	(unreachable)
}

int_32 .FUNC $329 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [1760])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1824])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1824])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1824])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1824])
	return $0
}

void .FUNC $328 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$5 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [1024]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*($12 + [64]) = $10
	*($12 + [56]) = $5
	$7 = *($3)
	$9 = (int_64)0
	$8 = (int_64)59
	$0 = [544]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$12 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*(($12 + [36])) = *(($2 + [12]))
	*(($12 + [32])) = *(($2 + [8]))
	*(($12 + [28])) = *(($2 + [4]))
	*($12 + [8]) = $5
	*($12 + [16]) = *($1)
	*($12 + [24]) = *($2)
	CALL $492(($12 + [40]), $4)
	$0 = CALL $251(($12 + [72]), ($12 + [56]), $7, $10, ($12 + [8]))
	CALL $252(($12 + [112]), $0)
	$6 = *($12 + [112])
	CALL send_inline($6, (*($12 + [116]) - $6))
	$6 = *($12 + [112])
	if ( ($6 == 0) ){ goto $label$13 }
	*($12 + [116]) = $6
	CALL $476($6)
	
.LABEL $label$13
	$6 = *($0 + [28])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($0 + [32])) = $6
	CALL $476($6)
	
.LABEL $label$14
	$6 = *($0 + [16])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($0 + [20])) = $6
	CALL $476($6)
	
.LABEL $label$15
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($12 + [48])))
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [128])
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([48])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [28]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [20])
	*($8 + [52]) = ($6 + [22])
	*($8 + [56]) = ($6 + [24])
	CALL $194(($8 + [40]), ($8 + [32]))
	*($6 + [36]) = [-1]
	*($6 + [32]) = $1
	*($6 + [40]) = [-1]
	*($6 + [44]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $72(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [16])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $470 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $321 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([64])) + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [28])
	*($8 + [60]) = ($6 + [32])
	*($8 + [64]) = ($6 + [36])
	*($8 + [68]) = ($6 + [40])
	*($8 + [72]) = ($6 + [44])
	CALL $322(($8 + [40]), ($8 + [32]))
	*($6 + [52]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $323(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $320 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [624]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [624]
	$8 = (int_64)0
	
.LOOP $label$5:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$1 = ($1 + [165])
	goto $label$7 
	
.LABEL $label$8
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$6
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$5 }
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [8]) = $8
	*($9) = $6
	*($9 + [24]) = (int_64)0
	$3 = CALL db_lowerbound_i64($6, $8, (int_64)-6778360920335712256, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$1 = ($0 + [340])
	$3 = CALL $321($9, $3)
	if ( ((int_64)*($3) == (int_64)*($1)) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL eosio_assert([1], [1520])
	$3 = CALL db_next_i64(*($3 + [52]), ($9 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $321($9, $3)
	if ( ((int_64)*($3) != (int_64)*($1)) ){ goto $label$11 }
	
.LABEL $label$10
	CALL memcpy(($0 + [376]), $3, [48])
	
.LABEL $label$9
	$0 = *($9 + [24])
	if ( ($0 == 0) ){ goto $label$12 }
	$2 = ($9 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$1 = *($3)
	*($3) = [0]
	if ( ($1 == 0) ){ goto $label$16 }
	CALL $476($1)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($9 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $0
	
.LABEL $label$13
	*($2) = $0
	CALL $476($3)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $323 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $322 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $325 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $475([96])
	CALL $329($6)
	*($6 + [80]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [40])
	*($8 + [56]) = ($6 + [56])
	*($8 + [60]) = ($6 + [72])
	CALL $330(($8 + [40]), ($8 + [32]))
	*($6 + [84]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $331(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $324 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $327 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $326 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [528]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	*($10 + [24]) = $8
	CALL $492(($10 + [8]), $3)
	CALL $328($0, $1, $2, ($10 + [24]), ($10 + [8]))
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*($10 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [2])
	*(($2 = *($1))) = (*($2) + [2])
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2)
	$2 = *($0 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [4])
	*(($0 = *($1))) = (*($0) + [4])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [4])
	*(($0 = *($1))) = (*($0) + [4])
	*(($0 = *($1))) = (*($0) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$15 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($16 + [24]) = [4]
	*($16 + [8]) = ($16 + [24])
	$3 = ($1 + [16])
	*($16 + [36]) = $3
	$2 = ($1 + [8])
	*($16 + [32]) = $2
	$4 = ($1 + [24])
	*($16 + [40]) = $4
	$5 = ($1 + [26])
	*($16 + [44]) = $5
	$6 = ($1 + [32])
	*($16 + [48]) = $6
	$7 = ($1 + [40])
	*($16 + [52]) = $7
	$8 = ($1 + [52])
	*($16 + [56]) = $8
	$9 = ($1 + [56])
	*($16 + [60]) = $9
	$10 = ($1 + [64])
	*($16 + [64]) = $10
	$11 = ($1 + [72])
	*($16 + [68]) = $11
	$12 = ($1 + [76])
	*($16 + [72]) = $12
	$13 = ($1 + [80])
	*($16 + [76]) = $13
	CALL $101(($16 + [32]), ($16 + [8]))
	$14 = *($16 + [24])
	if ( ($14 == 0) ){ goto $label$2 }
	CALL $70($0, $14)
	$15 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($16 + [12]) = $0
	*($16 + [8]) = $0
	*($16 + [16]) = $15
	CALL eosio_assert(((int_32)($15 - $0) > (int_32)[3]), [704])
	CALL memcpy(*($16 + [12]), $1, [4])
	*($16 + [12]) = (*($16 + [12]) + [4])
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $3
	*($16 + [32]) = $2
	*($16 + [40]) = $4
	*($16 + [44]) = $5
	*($16 + [48]) = $6
	*($16 + [52]) = $7
	*($16 + [56]) = $8
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = $11
	*($16 + [72]) = $12
	*($16 + [76]) = $13
	CALL $102(($16 + [32]), ($16 + [24]))
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$1 = ($0 + [1208])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [1208]), *(($0 + [1216])), (int_64)-6529297656626282496, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $104($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = (CASTING uint_64)(uint_32 $1)
	if ( (uint_64)((int_64))(*(*(CALL $105(($5 + [8])) + [4])) - *($4)) <= (int_64)100) ){ goto $label$2 }
	$0 = CALL db_lowerbound_i64(*(($0 + [1208])), *(($0 + [1216])), (int_64)-6529297656626282496, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $104($1, $0)
	$3 = [1]
	
.LOOP $label$3:
	$4 = [0]
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1472])
	CALL eosio_assert($2, [1520])
	$2 = CALL db_next_i64(*($0 + [52]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $104($1, $2)
	
.LABEL $label$4
	CALL $113($1, $0)
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($3 <= [51])
	$3 = ($3 + [1])
	$0 = $4
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6529297656626282496)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $104(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([64])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [36])
	*($8 + [60]) = ($6 + [40])
	CALL $112(($8 + [40]), ($8 + [32]))
	*($6 + [52]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $111(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $108(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_64 .FUNC _Z15drop_rare_levelRKyRKNSt3__15arrayIyLj4EEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	$4 = (int_64)4
	$3 = *($1 + [24])
	$2 = *($0)
	if ( ((uint_64)$2 <= (uint_64)$3) ){ goto $label$1 }
	$4 = (int_64)3
	$3 = ((int_64)*($1 + [16]) + (int_64)$3)
	if ( ((uint_64)$2 <= (uint_64)$3) ){ goto $label$1 }
	$4 = (int_64)2
	$3 = ((int_64)*($1 + [8]) + (int_64)$3)
	if ( ((uint_64)$2 <= (uint_64)$3) ){ goto $label$1 }
	return (CASTING uint_64)(uint_32 ((uint_64)$2 <= (uint_64)((int_64)*($1) + (int_64)$3)))
	
.LABEL $label$1
	return $4
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $7 ? $10 : ($10 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($10 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $475([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	*(($6 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$2 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [36])
	$9 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [24])
	$5 = ($7 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $70($1, $2)
	$8 = *($6)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	*($11 + [16]) = $11
	*($11 + [36]) = $3
	*($11 + [24]) = $4
	*($11 + [28]) = ($4 + [8])
	*($11 + [32]) = ($4 + [16])
	*($11 + [40]) = ($4 + [36])
	*($11 + [44]) = ($4 + [40])
	$3 = ($10 + [40])
	CALL $109(($11 + [24]), ($11 + [16]))
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$10:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($4 = ($10 + [-24]))) = (int_64)0
	*(($1 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($4) = *($8)
	*(($10 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($1) = *($4)
	*($4) = [0]
	*(($4 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($1 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($4) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($1) = *($4)
	*($4) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $10
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	$4 = ([0] - $1)
	$10 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($10 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$13
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$14
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $476($1)
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [48])
	(unreachable)
}

int_32 .FUNC $459 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([184])) + [104]) = [0]
	*($6 + [96 align=4]) = (int_64)0
	*($6 + [144]) = [0]
	*($6 + [148]) = [0]
	*($6 + [152]) = [0]
	*($6 + [168]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [64])
	*($8 + [52]) = ($6 + [144])
	*($8 + [56]) = ($6 + [160])
	CALL $460(($8 + [32]), ($8 + [24]))
	*($6 + [176]) = [-1]
	*($6 + [172]) = $1
	*($6 + [180]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [172])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $278(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [152])))
	
.LABEL $label$10
	if ( ((*(($4 + [96])) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($4 + [104])))
	
.LABEL $label$11
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $458 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [8])
	*($5) = *($1)
	*($5 + [12]) = ($2 + [8])
	*($5 + [8]) = $2
	*($5 + [16]) = ($2 + [16])
	*($5 + [20]) = ($2 + [24])
	*($5 + [24]) = ($2 + [32])
	CALL $276(($5 + [8]), $5)
	$2 = *($0 + [12])
	*($5) = *($1)
	*($5 + [12]) = ($2 + [8])
	*($5 + [8]) = $2
	*($5 + [16]) = ($2 + [16])
	*($5 + [20]) = ($2 + [24])
	*($5 + [24]) = ($2 + [32])
	CALL $218(($5 + [8]), $5)
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $318 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7684086372495261696, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-7684086372495261696, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $178($4, $8)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	
.LABEL $label$4
	*($2 + [36]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $319 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$8 = *($0 + [4])
	$6 = *($8 + [36])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-7684086372495261696, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [36]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$2), [720])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $178($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-7684086372495261696, $3))
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$2), [720])
	
.LABEL $label$5
	*($7 + [36]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $512 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [14976])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [15072]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [15072]
	return .LABEL $label$1
}

int_32 .FUNC $510 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [14352]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $512(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [14832]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [14864]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [14870] ? [14865] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [14834] ? [14832] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [14867]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $495()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [14832]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [14832]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [14816])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [14832])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [14848] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [14832]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [14928] ? [14944] : $30 ) ? ( [14896] ? [14912] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [14832]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [14833]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [14832] ? [14837] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14816])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14816])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [14816])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([14960], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([14960], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([14960], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $512(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $512(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $512(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $512(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $512(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $512(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $512(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $512(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $512(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC $476 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC $422 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = *($1 + [8])
	CALL eosio_assert([1], [1760])
	$4 = [0]
	$3 = (int_64)17229
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1824])
	CALL eosio_assert(((int_64)$2 == (int_64)4410628), [4112])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [4112])
}

void .FUNC $215 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_64 .FUNC $217 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [40]) = (int_64)100001
	*($5 + [32]) = (int_64)100001
	*($5 + [48]) = (int_64)1
	*($5 + [56]) = (int_64)1
	$1 = ($0 + [1248])
	$4 = *(($0 + [1276]))
	if ( ((int_32)$4 == (int_32)*(($0 + [1272]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	if ( $4 ){ goto $label$1 }
	$4 = ($5 + [32])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($1), *(($0 + [1256])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $93($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [720])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($5 + [32])
	
.LABEL $label$1
	*(($5 + [24])) = *(($4 + [24]))
	*(($2 = ($5 + [16]))) = *(($4 + [16]))
	*(($5 + [8])) = *(($4 + [8]))
	*($5) = *($4)
	*($2) = ((int_64)*($2) + (int_64)1)
	CALL $94($1, $5, *($0))
	$3 = *($2)
	*([0] + [4]) = ($5 + [64])
	return $3
}

void .FUNC $216 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($2)
	$4 = *(($1 + [40]))
	$7 = *(($1 + [44]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [16])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($1 + [16])), *(($1 + [24])), (int_64)-3020384829779738624, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $116($6, $7)
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$6), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1728])
	$6 = CALL memcpy($0, $2, [80])
	CALL $492(($6 + [80]), ($2 + [80]))
	CALL $492(($6 + [92]), ($2 + [92]))
	*($6 + [104]) = *($2 + [104])
}

void .FUNC $211 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*($1 + [44]) = (*($1 + [44]) + [-1])
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$7 = ($1 + [16])
	*($20 + [76]) = $7
	$8 = ($1 + [24])
	*($20 + [80]) = $8
	$9 = ($1 + [32])
	*($20 + [84]) = $9
	$10 = ($1 + [36])
	*($20 + [88]) = $10
	$11 = ($1 + [40])
	*($20 + [92]) = $11
	$6 = ($1 + [44])
	*($20 + [96]) = $6
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $7
	*($20 + [80]) = $8
	*($20 + [84]) = $9
	*($20 + [88]) = $10
	*($20 + [64]) = $1
	*($20 + [92]) = $11
	*($20 + [96]) = $6
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $211(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [72])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4411838784962822144, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [72]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4411838784962822145, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [76])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $223 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [464])
	*([0] + [4]) = $10
	CALL $216(($10 + [352]), $0, $2)
	$5 = ($0 + [880])
	*($10 + [344]) = $5
	CALL $224(($10 + [336]), ($10 + [344]), $1)
	CALL eosio_assert(((int_64)*(*($10 + [340]) + [8]) != (int_64)*($1)), [2544])
	CALL $225($0)
	CALL $226(($10 + [312]), ($10 + [328]), $4, [2])
	*($10 + [304]) = (int_64)3
	$9 = *($3)
	if ( ((int_64)$9 == (int_64)1) ){ goto $label$5 }
	if ( ((int_64)$9 == (int_64)2) ){ goto $label$4 }
	if ( ((int_64)$9 != (int_64)3) ){ goto $label$2 }
	*($10 + [304]) = (int_64)1
	goto $label$3 
	
.LABEL $label$5
	*($10 + [304]) = (int_64)3
	goto $label$3 
	
.LABEL $label$4
	*($10 + [304]) = (int_64)2
	
.LABEL $label$3
	$6 = CALL $227(($0 + [8]), ($10 + [304]))
	$9 = (int_64)0
	$3 = [0]
	$7 = *($10 + [312])
	
.LOOP $label$6:
	$9 = ((int_64)*(($7 + $3)) + (int_64)$9)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$6 }
	*($10 + [296]) = ($0 + [56])
	CALL $228(($10 + [288]), ($10 + [296]), ($10 + [304]))
	*((($10 + [256]) + [16])) = [0]
	*($10 + [264]) = (int_64)0
	$9 = ((uint_64)$9 % (uint_64)$6)
	$3 = *($10 + [292])
	if ( ($3 == 0) ){ goto $label$7 }
	$9 = ((int_64)$9 + (int_64)1)
	
.LOOP $label$8:
	if ( ((int_64)*($3 + [24]) != (int_64)*($10 + [304])) ){ goto $label$7 }
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$9 }
	CALL $229(($10 + [288]))
	$3 = *($10 + [292])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*($10 + [256]) = *($3)
	CALL $478((($10 + [256]) + [8]), ($3 + [8]))
	*($10 + [276 align=4]) = *($3 + [20 align=4])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($10 + [256]) != (int_64)0), [2576])
	*($10 + [64]) = [101]
	$3 = ($10 + [264])
	*($10 + [176]) = CALL $154($0, ($10 + [256]), ($10 + [64]), $3, [900])
	*($10 + [192]) = *($10 + [276])
	*($10 + [184]) = *($10 + [256])
	*($10 + [200]) = *($2)
	CALL $492((($10 + [176]) + [32]), $3)
	*($10 + [220]) = [1]
	*($10 + [232]) = (int_64)10000
	*($10 + [240]) = [1]
	*($10 + [244]) = [900]
	*($10 + [224]) = *($10 + [280])
	*($10 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$9 = *($0)
	*($10 + [40]) = ($10 + [176])
	CALL $155(($10 + [64]), ($0 + [136]), $9, ($10 + [40]))
	CALL $156($0, $2)
	*((($10 + [64]) + [16])) = (int_64)0
	*(($10 + [88])) = (int_64)0
	*((($10 + [64]) + [32])) = [0]
	*(($10 + [104])) = (int_64)0
	*($10 + [72]) = (int_64)0
	*($10 + [64]) = (int_64)0
	*((($10 + [64]) + [56])) = [0]
	*(($7 = ($10 + [112]))) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*(($10 + [112])) = ($3 << [1])
	$7 = ($7 + [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = (($3 + [16]) & [-16])
	$7 = CALL $475($8)
	*(($10 + [112])) = ($8 | [1])
	*(($10 + [120])) = $7
	*(($10 + [116])) = $3
	
.LABEL $label$11
	CALL memcpy($7, [512], $3)
	
.LABEL $label$10
	*(($7 + $3)) = [0]
	*(($10 + [136])) = [0]
	*(($10 + [128])) = (int_64)0
	*(($10 + [144])) = (int_64)0
	*(($8 = ($10 + [160]))) = [0]
	*(($10 + [164])) = [0]
	*(($10 + [168])) = [0]
	*($10 + [152]) = (int_64)0
	*(($10 + [56])) = [0]
	*($10 + [48]) = (int_64)0
	*($10 + [40]) = (int_64)1
	CALL $230(($10 + [48]), ($10 + [176]))
	*($10 + [152]) = *($10 + [40])
	$3 = ($10 + [52])
	CALL $197($8, *($10 + [48]), *($3))
	$9 = *($0)
	*($10 + [20]) = $1
	*($10 + [16]) = $0
	*($10 + [24]) = $2
	*($10 + [32]) = $4
	*($10 + [28]) = ($10 + [64])
	CALL $231(($10 + [8]), $5, $9, ($10 + [16]))
	$0 = *($10 + [48])
	if ( ($0 == 0) ){ goto $label$13 }
	$3 = *($3)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$15 }
	$7 = ([0] - $0)
	$3 = ($3 + [-48])
	
.LOOP $label$16:
	if ( ((*($3) & [1]) == 0) ){ goto $label$17 }
	CALL $476(*(($3 + [8])))
	
.LABEL $label$17
	$3 = ($3 + [-80])
	if ( ((int_32)($3 + $7) != (int_32)[-48]) ){ goto $label$16 }
	$3 = *(($10 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $0
	
.LABEL $label$14
	*(($10 + [52])) = $0
	CALL $476($3)
	
.LABEL $label$13
	$0 = *($8)
	if ( ($0 == 0) ){ goto $label$18 }
	$2 = ($10 + [164])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$20 }
	$7 = ([0] - $0)
	$3 = ($3 + [-48])
	
.LOOP $label$21:
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($3 + [8])))
	
.LABEL $label$22
	$3 = ($3 + [-80])
	if ( ((int_32)($3 + $7) != (int_32)[-48]) ){ goto $label$21 }
	$3 = *(($10 + [160]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $0
	
.LABEL $label$19
	*($2) = $0
	CALL $476($3)
	
.LABEL $label$18
	if ( ((*(($10 + [112])) & [1]) == 0) ){ goto $label$23 }
	CALL $476(*(($10 + [120])))
	
.LABEL $label$23
	if ( ((*(($10 + [208])) & [1]) == 0) ){ goto $label$24 }
	CALL $476(*(($10 + [216])))
	
.LABEL $label$24
	if ( ((*(($10 + [264])) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*(($10 + [272])))
	
.LABEL $label$2
	$3 = *($10 + [312])
	if ( ($3 == 0) ){ goto $label$25 }
	*($10 + [316]) = $3
	CALL $476($3)
	
.LABEL $label$25
	if ( ((*($10 + [444]) & [1]) == 0) ){ goto $label$26 }
	CALL $476(*(($10 + [452])))
	
.LABEL $label$26
	if ( ((*($10 + [432]) & [1]) == 0) ){ goto $label$27 }
	CALL $476(*(($10 + [440])))
	
.LABEL $label$27
	*([0] + [4]) = ($10 + [464])
	return (unreachable)
	
.LABEL $label$1
	CALL $477($7)
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[80])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[80])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-48])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-80])
	if ( ((int_32)($7 + $5) != (int_32)[-48]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[80])
	$7 = ($1 + ((int_32)$4 * (int_32)[80]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	*($6) = *($1)
	*(($6 + [24])) = *(($1 + [24]))
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $478(($6 + [32]), ($1 + [32]))
	CALL memcpy(($6 + [44]), ($1 + [44]), [36])
	$6 = ($6 + [80])
	$1 = ($1 + [80])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	*($1) = *($7)
	*(($1 + [24])) = *(($7 + [24]))
	*(($1 + [16])) = *(($7 + [16]))
	*(($1 + [8])) = *(($7 + [8]))
	CALL $492(($1 + [32]), ($7 + [32]))
	CALL memcpy(($1 + [44]), ($7 + [44]), [36])
	$1 = (*($6) + [80])
	*($6) = $1
	$7 = ($7 + [80])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-48])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $7) != (int_32)[-48]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $476($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[53687092]) ){ goto $label$1 }
	$6 = [53687091]
	$7 = ((int_32)$7 / (int_32)[80])
	if ( ((uint_32)$7 > (uint_32)[26843544]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[80])
	$6 = CALL $475($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	*($6) = *($1)
	*(($6 + [24])) = *(($1 + [24]))
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $492(($6 + [32]), ($1 + [32]))
	CALL memcpy(($6 + [44]), ($1 + [44]), [36])
	$6 = (*($7) + [80])
	*($7) = $6
	$1 = ($1 + [80])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $491($0)
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*(($0 + [36])) = (int_64)0
	$7 = ($0 + [32])
	$8 = CALL strlen([512])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = ($0 + [24])
	$5 = ($0 + [18])
	$4 = ($0 + [16])
	$3 = ($0 + [8])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$4 }
	*($7) = ($8 << [1])
	$10 = ($7 + [1])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$9 = (($8 + [16]) & [-16])
	$10 = CALL $475($9)
	*(($0 + [32])) = ($9 | [1])
	*(($0 + [40])) = $10
	*(($0 + [36])) = $8
	
.LABEL $label$3
	CALL memcpy($10, [512], $8)
	
.LABEL $label$2
	*(($10 + $8)) = [0]
	*($0 + [56]) = [0]
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = $1
	*($11) = *($2 + [4])
	*($11 + [12]) = $3
	*($11 + [8]) = $0
	*($11 + [16]) = $4
	*($11 + [20]) = $5
	*($11 + [24]) = $6
	*($11 + [28]) = $7
	*($11 + [32]) = ($0 + [48])
	*($11 + [36]) = ($0 + [56])
	*($11 + [40]) = ($0 + [64])
	CALL $196(($11 + [8]), $11)
	$8 = *(*($2 + [8]))
	*($0 + [80]) = [-1]
	*($0 + [76]) = $8
	*(($0 + [84])) = [-1]
	*(($0 + [88])) = [-1]
	*([0] + [4]) = ($11 + [48])
	return $0
	
.LABEL $label$1
	CALL $477($7)
	return (unreachable)
}

void .FUNC $219 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$10 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($11 + [24]) = [0]
	*($11 + [8]) = ($11 + [24])
	$2 = ($1 + [8])
	*($11 + [36]) = $2
	*($11 + [32]) = $1
	$3 = ($1 + [16])
	*($11 + [40]) = $3
	$4 = ($1 + [24])
	*($11 + [44]) = $4
	$5 = ($1 + [36])
	*($11 + [48]) = $5
	$6 = ($1 + [40])
	*($11 + [52]) = $6
	$7 = ($1 + [44])
	*($11 + [56]) = $7
	$8 = ($1 + [56])
	*($11 + [60]) = $8
	CALL $169(($11 + [32]), ($11 + [8]))
	$9 = *($11 + [24])
	if ( ($9 == 0) ){ goto $label$2 }
	CALL $70($0, $9)
	$10 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($11 + [12]) = $0
	*($11 + [8]) = $0
	*($11 + [16]) = $10
	*($11 + [24]) = ($11 + [8])
	*($11 + [36]) = $2
	*($11 + [32]) = $1
	*($11 + [40]) = $3
	*($11 + [44]) = $4
	*($11 + [48]) = $5
	*($11 + [52]) = $6
	*($11 + [56]) = $7
	*($11 + [60]) = $8
	CALL $170(($11 + [32]), ($11 + [24]))
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $68(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $378 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [16])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $379 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$9 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	*($10 + [16]) = $9
	*($10 + [8]) = $7
	$4 = [0]
	$3 = CALL db_find_i64($7, $9, (int_64)4412247138642165760, *($2))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $380(($10 + [8]), $3)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($10 + [8])), [720])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [3440])
	*($0) = *($4 + [8])
	*($0 + [8 align=4]) = *($4 + [16])
	*($0 + [16]) = *($4 + [24])
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = ($10 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $476($3)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($10 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $0
	
.LABEL $label$11
	*($2) = $0
	CALL $476($4)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $372 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4412005227943313408)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $371(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $373 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $370 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $371 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([64])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [36])
	*($8 + [60]) = ($6 + [40])
	CALL $373(($8 + [40]), ($8 + [32]))
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $368(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

int_32 .FUNC $376 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $475([48])
	$6 = CALL $377($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [36])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $378(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [16])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $377 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = $1
	*(($0 + [16])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $68($1, ($0 + [8]))
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [592])
	CALL memcpy(($0 + [20]), *($1 + [4]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$1 = *(*($2 + [8]))
	*($0 + [40]) = [-1]
	*($0 + [36]) = $1
	return $0
}

void .FUNC $374 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $375 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	$2 = *($0)
	CALL memcpy($1, *(*($0 + [4])), [64])
	*($8 + [72]) = ($8 + [56])
	*($8 + [68]) = $8
	*($8 + [64]) = $8
	*($8 + [80]) = ($8 + [64])
	$4 = ($1 + [8])
	*($8 + [92]) = $4
	*($8 + [88]) = $1
	$5 = ($1 + [16])
	*($8 + [96]) = $5
	*($8 + [100]) = ($1 + [24])
	*($8 + [104]) = ($1 + [28])
	*($8 + [108]) = ($1 + [32])
	*($8 + [112]) = ($1 + [40])
	*($8 + [116]) = ($1 + [48])
	*($8 + [120]) = ($1 + [56])
	CALL $212(($8 + [88]), ($8 + [80]))
	$3 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)4411838784962822144, *(*($0 + [8])), $3, $8, [56])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = ($2 + [8])
	$3 = *($2)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($8 + [88]) = *($4)
	*($1 + [72]) = CALL db_idx64_store($3, (int_64)4411838784962822144, $6, $7, ($8 + [88]))
	$3 = *($0)
	$6 = *($2)
	$7 = *($1)
	*($8 + [88]) = *($5)
	*(($1 + [76])) = CALL db_idx64_store($6, (int_64)4411838784962822145, $3, $7, ($8 + [88]))
	*([0] + [4]) = ($8 + [128])
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $475([96])
	CALL $175($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $176(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($1 + [40])))
	
.LABEL $label$4
	CALL $476($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $175 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*(($0 + [36])) = (int_64)0
	$5 = ($0 + [32])
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*(($0 + [32])) = ($4 | [1])
	*(($0 + [40])) = $5
	*(($0 + [36])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [512], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($0 + [56]) = [0]
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = $1
	CALL $177($2, $0)
	return $0
	
.LABEL $label$1
	CALL $477($5)
	return (unreachable)
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [40])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [64])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *(*($0 + [4]))
	*($1) = *($7)
	*(($1 + [24])) = *(($7 + [24]))
	*(($1 + [16])) = *(($7 + [16]))
	*(($1 + [8])) = *(($7 + [8]))
	$3 = ($1 + [32])
	CALL $478($3, ($7 + [32]))
	*(($1 + [64])) = *(($7 + [64]))
	*(($1 + [56])) = *(($7 + [56]))
	*($1 + [48]) = *($7 + [48])
	$7 = *($1 + [32])
	$4 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($4 + [48])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [48])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	*($10 + [16]) = $10
	*($10 + [28]) = ($1 + [8])
	*($10 + [24]) = $1
	*($10 + [32]) = ($1 + [16])
	*($10 + [36]) = ($1 + [18])
	*($10 + [40]) = ($1 + [24])
	*($10 + [44]) = $3
	*($10 + [48]) = $4
	*($10 + [52]) = ($1 + [56])
	*($10 + [56]) = ($1 + [64])
	CALL $160(($10 + [24]), ($10 + [16]))
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)-6083090961624203264, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = ($2 + [8])
	$8 = *($7)
	$9 = *(($0 + [8]))
	$5 = *($9)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)-6083090961624203264, $5, $6, ($10 + [24]))
	$8 = *($9)
	$5 = *($7)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [24]))
	*(($1 + [84])) = CALL db_idx64_store($5, (int_64)-6083090961624203263, $8, $6, ($10 + [24]))
	$8 = *($9)
	$5 = *($7)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [18]))
	*(($1 + [88])) = CALL db_idx64_store($5, (int_64)-6083090961624203262, $8, $6, ($10 + [24]))
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $76(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $171 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = *($6 + [8])
	$6 = CALL db_idx64_store($9, (int_64)8526756653867991040, $8, $7, ($10 + [8]))
	*(*($5 + [4]) + [72]) = $6
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = *($6 + [16])
	$6 = CALL db_idx64_store($9, (int_64)8526756653867991041, $8, $7, ($10 + [8]))
	*((*($5 + [4]) + [76])) = $6
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = *($6 + [40])
	$6 = CALL db_idx64_store($9, (int_64)8526756653867991042, $8, $7, ($10 + [8]))
	*((*($5 + [4]) + [80])) = $6
	$0 = *($0)
	$5 = *($0 + [12])
	$7 = *($5)
	$8 = *(*($0 + [8]))
	$9 = *(*($0) + [8])
	*($10 + [8]) = *($5 + [36])
	$5 = CALL db_idx64_store($9, (int_64)8526756653867991043, $8, $7, ($10 + [8]))
	*((*($0 + [4]) + [84])) = $5
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6083090961624203263, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $149($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-6083090961624203264, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [84])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$6 = *($0 + [4])
	$7 = *(($6 + [84]))
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6083090961624203263, ($9 + [8]), *($6))
	*((*(($0 + [4])) + [84])) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $149($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-6083090961624203264, $3))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [84])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([48])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [28]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [20])
	*($8 + [52]) = ($6 + [22])
	*($8 + [56]) = ($6 + [24])
	CALL $179(($8 + [40]), ($8 + [32]))
	*($6 + [36]) = [-1]
	*($6 + [32]) = $1
	*($6 + [40]) = [-1]
	*($6 + [44]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $74(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [16])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $361 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [120])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [120]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [12])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3020384829779738623, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [124])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

void .FUNC $420 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	$2 = *($0)
	$22 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $22, [80])
	$3 = ($1 + [80])
	CALL $478($3, ($22 + [80]))
	$4 = ($1 + [92])
	CALL $478($4, ($22 + [92]))
	*($1 + [104]) = *($22 + [104])
	*(($22 = $21) + [24]) = [0]
	*($22 + [8]) = ($22 + [24])
	$6 = ($1 + [8])
	*($22 + [36]) = $6
	*($22 + [32]) = $1
	$7 = ($1 + [12])
	*($22 + [40]) = $7
	$8 = ($1 + [16])
	*($22 + [44]) = $8
	$9 = ($1 + [24])
	*($22 + [48]) = $9
	$10 = ($1 + [32])
	*($22 + [52]) = $10
	$11 = ($1 + [36])
	*($22 + [56]) = $11
	$12 = ($1 + [40])
	*($22 + [60]) = $12
	$13 = ($1 + [44])
	*($22 + [64]) = $13
	$14 = ($1 + [48])
	*($22 + [68]) = $14
	$15 = ($1 + [56])
	*($22 + [72]) = $15
	$16 = ($1 + [64])
	*($22 + [76]) = $16
	*($22 + [80]) = $3
	*($22 + [84]) = $4
	$5 = ($1 + [104])
	*($22 + [88]) = $5
	CALL $129(($22 + [32]), ($22 + [8]))
	$17 = *($22 + [24])
	if ( ($17 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($17)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($17 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [12]) = $21
	*($22 + [8]) = $21
	*($22 + [16]) = ($21 + $17)
	*($22 + [24]) = ($22 + [8])
	*($22 + [36]) = $6
	*($22 + [32]) = $1
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $3
	*($22 + [84]) = $4
	*($22 + [88]) = $5
	CALL $130(($22 + [32]), ($22 + [24]))
	$18 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020384829779738624, *(*($0 + [8])), $18, $21, $17)
	if ( ($17 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($18 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$21 = ($2 + [8])
	$18 = *($21)
	$0 = *(($0 + [8]))
	$19 = *($0)
	$20 = *($1)
	*($22 + [32]) = *(($1 + [8]))
	*($1 + [120]) = CALL db_idx64_store($18, (int_64)-3020384829779738624, $19, $20, ($22 + [32]))
	$18 = *($0)
	$19 = *($21)
	$20 = *($1)
	*($22 + [32]) = *(($1 + [12]))
	*(($1 + [124])) = CALL db_idx64_store($19, (int_64)-3020384829779738623, $18, $20, ($22 + [32]))
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*(($8 = *($1))) = (*($8) + [8])
	$7 = *($0 + [4])
	$8 = (*($2) + [36])
	*(($2 = *($1))) = $8
	$3 = *(($7 + [40]))
	$6 = (CASTING uint_64)(uint_32 ( *(($7 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($2) = $8
	$7 = *(($7 + [40]))
	$7 = ( *(($7 + [44])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($7 + $8)
	*($2) = $8
	
.LABEL $label$2
	*($2) = ($8 + [20])
	$8 = *($0 + [8])
	$7 = (*($2) + [8])
	*(($2 = *($1))) = $7
	$8 = *($8 + [8])
	$1 = *(($8 + [12]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($1 - $8) / (int_32)[80]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($2) = $7
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$4 }
	$7 = ($9 + [28])
	$0 = ($9 + [36])
	$3 = ($9 + [44])
	$4 = ($9 + [52])
	$5 = ($9 + [56])
	
.LOOP $label$5:
	*($9 + [8]) = $2
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [16])
	*($7) = ($8 + [18])
	*((($9 + [16]) + [16])) = ($8 + [24])
	*($0) = ($8 + [32])
	*((($9 + [16]) + [24])) = ($8 + [44])
	*($9 + [20]) = ($8 + [8])
	*($3) = ($8 + [48])
	*((($9 + [16]) + [32])) = ($8 + [56])
	*($4) = ($8 + [64])
	*($5) = ($8 + [68])
	*((($9 + [16]) + [44])) = ($8 + [72])
	CALL $101(($9 + [16]), ($9 + [8]))
	$8 = ($8 + [80])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [24]))) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [1184])
	*($7 + [48]) = ($7 + [32])
	*($7 + [44]) = $7
	*($7 + [40]) = $7
	*($7 + [56]) = ($7 + [40])
	*($7 + [68]) = $6
	*($7 + [64]) = $1
	*($7 + [72]) = $5
	*($7 + [76]) = $4
	CALL $97(($7 + [64]), ($7 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $236(*($0 + [4]), $1)
	*(($10 = $9) + [16]) = [24]
	*($10) = ($10 + [16])
	*($10 + [28]) = ($1 + [32])
	$3 = ($1 + [24])
	*($10 + [24]) = $3
	*($10 + [32]) = ($1 + [112])
	CALL $237(($10 + [24]), $10)
	$7 = *($1 + [136])
	$4 = ( *(($1 + [140])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = (($4 + *($10 + [16])) + [8])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [136])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	*($10 + [16]) = $10
	*($10 + [28]) = ($1 + [8])
	*($10 + [24]) = $1
	*($10 + [32]) = ($1 + [16])
	*($10 + [36]) = $3
	*($10 + [40]) = $4
	*($10 + [44]) = ($1 + [152])
	CALL $238(($10 + [24]), ($10 + [16]))
	$8 = *($1)
	*($1 + [164]) = CALL db_store_i64(*($2 + [8]), (int_64)-3733857468820750336, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$7 = ($2 + [8])
	$8 = *($7)
	$9 = *(($0 + [8]))
	$5 = *($9)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [8]))
	*($1 + [168]) = CALL db_idx64_store($8, (int_64)-3733857468820750336, $5, $6, ($10 + [24]))
	$8 = *($9)
	$5 = *($7)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [16]))
	*(($1 + [172])) = CALL db_idx64_store($5, (int_64)-3733857468820750335, $8, $6, ($10 + [24]))
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $479 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $475($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $476($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $360 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [128])
	*([0] + [4]) = $20
	*(($19 = $20) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($19 + [40]) = *($1 + [12])
	$18 = *($1 + [8])
	*($19 + [32]) = (CASTING uint_64)(uint_32 $18)
	$5 = ($18 + [2])
	*($1 + [8]) = $5
	*($19 + [24]) = *($1)
	$4 = ($1 + [12])
	if ( ($5 == 0) ){ goto $label$3 }
	$18 = [16]
	$17 = [3376]
	
.LOOP $label$4:
	if ( ((uint_32)($18 + [-2]) > (uint_32)[14]) ){ goto $label$2 }
	$18 = ($18 + [-1])
	$16 = *($17)
	$17 = ($17 + [-4])
	if ( ($5 <= $16) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$18 = [1]
	goto $label$1 
	
.LABEL $label$2
	$18 = [0]
	
.LABEL $label$1
	$5 = ($1 + [8])
	*($4) = $18
	$16 = ($1 + [48])
	if ( ((int_64)*(*($3 + [4])) != (int_64)4) ){ goto $label$5 }
	*($16) = ((int_64)*($16) + (int_64)2)
	
.LABEL $label$5
	CALL eosio_assert([1], [1184])
	*($19 + [56]) = [0]
	*($19 + [8]) = ($19 + [56])
	*($19 + [68]) = $5
	*($19 + [72]) = $4
	*($19 + [64]) = $1
	$3 = ($1 + [16])
	*($19 + [76]) = $3
	$6 = ($1 + [24])
	*($19 + [80]) = $6
	$7 = ($1 + [32])
	*($19 + [84]) = $7
	$8 = ($1 + [36])
	*($19 + [88]) = $8
	$9 = ($1 + [40])
	*($19 + [92]) = $9
	$10 = ($1 + [44])
	*($19 + [96]) = $10
	*($19 + [100]) = $16
	$11 = ($1 + [56])
	*($19 + [104]) = $11
	$12 = ($1 + [64])
	*($19 + [108]) = $12
	$13 = ($1 + [80])
	*($19 + [112]) = $13
	$14 = ($1 + [92])
	*($19 + [116]) = $14
	$15 = ($1 + [104])
	*($19 + [120]) = $15
	CALL $129(($19 + [64]), ($19 + [8]))
	$17 = *($19 + [56])
	if ( ($17 <= [513]) ){ goto $label$7 }
	$18 = CALL malloc($17)
	$2 = *($19 + [48])
	goto $label$6 
	
.LABEL $label$7
	$18 = ($20 - (($17 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$6
	*($19 + [12]) = $18
	*($19 + [8]) = $18
	*($19 + [16]) = ($18 + $17)
	*($19 + [56]) = ($19 + [8])
	*($19 + [68]) = $5
	*($19 + [72]) = $4
	*($19 + [76]) = $3
	*($19 + [80]) = $6
	*($19 + [84]) = $7
	*($19 + [88]) = $8
	*($19 + [64]) = $1
	*($19 + [92]) = $9
	*($19 + [96]) = $10
	*($19 + [100]) = $16
	*($19 + [104]) = $11
	*($19 + [108]) = $12
	*($19 + [112]) = $13
	*($19 + [116]) = $14
	*($19 + [120]) = $15
	CALL $130(($19 + [64]), ($19 + [56]))
	CALL db_update_i64(*($1 + [116]), $2, $18, $17)
	if ( ($17 <= [513]) ){ goto $label$8 }
	CALL free($18)
	
.LABEL $label$8
	$18 = ($0 + [36])
	$2 = *($19 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($19 + [68]) = $1
	*($19 + [64]) = $0
	*($19 + [76]) = $1
	*($19 + [72]) = ($19 + [32])
	*($19 + [80]) = ($19 + [24])
	*($19 + [84]) = ($19 + [48])
	*($19 + [56]) = ($19 + [64])
	CALL $361(($19 + [56]), $18, ($18 + [1]))
	*([0] + [4]) = ($19 + [128])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $472([4524], $0)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $91($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $476($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $476($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $476($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $476($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $476($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $476($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $476($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $476($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $472 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $473($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12928])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $475 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13020])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12908])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12716]
	$1 = (((int_32)$2 * (int_32)[12]) + [12716])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $477 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $232 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0 + [24]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [64])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($5 = ($0 + [72]))) = (int_64)0
	$3 = CALL strlen([512])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $475($4)
	*(($0 + [72])) = ($4 | [1])
	*(($0 + [80])) = $5
	*(($0 + [76])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [512], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*(($0 + [96])) = [0]
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	*($0 + [136]) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*($0 + [160]) = $1
	CALL $235($2, $0)
	return $0
	
.LABEL $label$1
	CALL $477($5)
	return (unreachable)
}

int_32 .FUNC $408 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [704])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $231 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $475([176])
	CALL $232($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [164])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $233(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((*($0 + [136]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($0 + [144])))
	
.LABEL $label$4
	$5 = *(($0 + [120]))
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($0 + [124])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	$3 = ([0] - $5)
	$1 = ($1 + [-48])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $3) != (int_32)[-48]) ){ goto $label$8 }
	$1 = *(($0 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($4) = $5
	CALL $476($1)
	
.LABEL $label$5
	if ( ((*(($0 + [72])) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($0 + [80])))
	
.LABEL $label$10
	CALL $476($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $475([48])) + [32]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [16])
	*($7 + [44]) = ($5 + [24])
	CALL $99(($7 + [32]), ($7 + [24]))
	*($5 + [36]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)7235159537265672192
	$6 = *($5 + [36])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $98(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $441 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $475([96])
	CALL $445($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $331(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $476($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($2 + [144])))
	
.LABEL $label$6
	$5 = ($2 + [120])
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($2 + [124])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$9 }
	$4 = ([0] - $3)
	$8 = ($8 + [-48])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-80])
	if ( ((int_32)($8 + $4) != (int_32)[-48]) ){ goto $label$10 }
	$8 = *($5)
	goto $label$8 
	
.LABEL $label$9
	$8 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $476($8)
	
.LABEL $label$7
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($2 + [80])))
	
.LABEL $label$12
	CALL $476($2)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $476($8)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $87($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $70($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $88($4, $1)
	CALL $90(CALL $89(CALL $89($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [48])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy($9, $7, [8])
	$3 = ($1 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [592])
	$4 = ($9 + [8])
	CALL memcpy($4, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [592])
	$3 = ($9 + [16])
	CALL memcpy($3, ($7 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	$5 = *($3)
	$6 = *($4)
	*($9 + [40]) = *($9)
	*($9 + [32]) = $6
	*($9 + [24]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 ($9 + [40])), (int_32 ($9 + [32])), (int_32 ($9 + [24])), (int_32 $8))
	*([0] + [4]) = ($9 + [48])
	return [1]
}

void .FUNC _ZN4sghk9cardlvlupERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	CALL require_auth(*($1))
	CALL $78($0, $1)
	$9 = *($2)
	$3 = *(($0 + [160]))
	$7 = *(($0 + [164]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$9) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [136])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $79($6, $7)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [720])
	
.LABEL $label$3
	$4 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($4, [784])
	$9 = (int_64)0
	*($12 + [40]) = (int_64)0
	CALL $80($0, $1, ($12 + [40]), [17])
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)[1]), [816])
	CALL eosio_assert(((int_64)*($2 + [24]) == (int_64)*($1)), [864])
	CALL eosio_assert((*($2 + [44]) <= [5]), [912])
	*((($12 + [40]) + [44])) = [0]
	*(($7 = ($12 + [80]))) = [0]
	*(($12 + [88])) = [0]
	*($12 + [40]) = *($2 + [44])
	*((($12 + [40]) + [36])) = *(($2 + [28]))
	*((($12 + [40]) + [32])) = *($2 + [24])
	*((($12 + [40]) + [28])) = *(($2 + [20]))
	*(($12 + [64])) = *(($2 + [16]))
	*((($12 + [40]) + [20])) = *(($2 + [12]))
	*((($12 + [40]) + [16])) = *(($2 + [8]))
	*((($12 + [40]) + [12])) = *(($2 + [4]))
	*($12 + [48]) = *($2)
	CALL $478($7, ($2 + [32]))
	$7 = CALL memcpy(($12 + [92]), ($2 + [44]), [36])
	CALL eosio_assert(((uint_64)*($2 + [56]) >= (uint_64)*((($0 + (*($2 + [44]) << [3])) + [1304]))), [944])
	$11 = *($0)
	CALL eosio_assert($4, [976])
	CALL $81($6, $2, $11)
	*($7) = (*($7) + [1])
	$5 = *($0)
	$8 = (int_64)59
	$2 = [1024]
	$10 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$10 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	*($12 + [32]) = $10
	*($12 + [24]) = $5
	$9 = (int_64)0
	$11 = (int_64)59
	$2 = [1040]
	$10 = (int_64)0
	
.LOOP $label$11:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$12 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$11 }
	*($12 + [16]) = $10
	$9 = (int_64)0
	$8 = (int_64)59
	$2 = [1056]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$20 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	*($12 + [8]) = $10
	CALL $82($0, ($12 + [24]), ($12 + [16]), ($12 + [8]), ($12 + [40]))
	if ( ((*(($12 + [80])) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*(($12 + [88])))
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $271 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $272(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $270 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([184])) + [104]) = [0]
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [144]) = [0]
	*($3 + [148]) = [0]
	*($3 + [152]) = [0]
	*($3 + [168]) = $1
	CALL $277(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [172])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $278(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [152])))
	
.LABEL $label$4
	if ( ((*(($3 + [96])) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($3 + [104])))
	
.LABEL $label$5
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $277 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	$2 = *($0)
	*((($1 = CALL memcpy($1, ($14 = *(*($0 + [4]))), [64])) + [88])) = *(($14 + [88]))
	*(($1 + [80])) = *(($14 + [80]))
	*(($1 + [72])) = *(($14 + [72]))
	*($1 + [64]) = *($14 + [64])
	CALL $478(($1 + [96]), ($14 + [96]))
	CALL memcpy(($1 + [108]), ($14 + [108]), [36])
	$4 = ($1 + [144])
	CALL $478($4, ($14 + [144]))
	*($1 + [160]) = *($14 + [160])
	*(($14 = $13) + [24]) = [0]
	*($14 + [8]) = ($14 + [24])
	$6 = ($1 + [8])
	*($14 + [36]) = $6
	*($14 + [32]) = $1
	$7 = ($1 + [16])
	*($14 + [40]) = $7
	$8 = ($1 + [24])
	*($14 + [44]) = $8
	$3 = ($1 + [64])
	*($14 + [48]) = $3
	*($14 + [52]) = $4
	$5 = ($1 + [160])
	*($14 + [56]) = $5
	CALL $274(($14 + [32]), ($14 + [8]))
	$9 = *($14 + [24])
	if ( ($9 <= [513]) ){ goto $label$2 }
	$13 = CALL malloc($9)
	goto $label$1 
	
.LABEL $label$2
	$13 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$1
	*($14 + [12]) = $13
	*($14 + [8]) = $13
	*($14 + [16]) = ($13 + $9)
	*($14 + [24]) = ($14 + [8])
	*($14 + [36]) = $6
	*($14 + [32]) = $1
	*($14 + [40]) = $7
	*($14 + [44]) = $8
	*($14 + [48]) = $3
	*($14 + [52]) = $4
	*($14 + [56]) = $5
	CALL $275(($14 + [32]), ($14 + [24]))
	$10 = *($1)
	*($1 + [172]) = CALL db_store_i64(*($2 + [8]), (int_64)7056767238358958080, *(*($0 + [8])), $10, $13, $9)
	if ( ($9 <= [513]) ){ goto $label$3 }
	CALL free($13)
	
.LABEL $label$3
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$13 = ($2 + [8])
	$10 = *($13)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($14 + [32]) = *(($1 + [16]))
	*($1 + [176]) = CALL db_idx64_store($10, (int_64)7056767238358958080, $11, $12, ($14 + [32]))
	$10 = *($0)
	$11 = *($13)
	$12 = *($1)
	*($14 + [32]) = *(($1 + [8]))
	*(($1 + [180])) = CALL db_idx64_store($11, (int_64)7056767238358958081, $10, $12, ($14 + [32]))
	*([0] + [4]) = ($14 + [64])
}

void .FUNC $276 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $275 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	*($4 + [56]) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [24])
	*($4 + [24]) = ($3 + [32])
	CALL $276(($4 + [8]), ($4 + [56]))
	$3 = *($0 + [16])
	*($4 + [56]) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [18])
	*($4 + [24]) = ($3 + [24])
	*($4 + [28]) = ($3 + [32])
	*($4 + [32]) = ($3 + [44])
	*($4 + [36]) = ($3 + [48])
	*($4 + [40]) = ($3 + [56])
	*($4 + [44]) = ($3 + [64])
	*($4 + [48]) = ($3 + [68])
	*($4 + [52]) = ($3 + [72])
	CALL $102(($4 + [8]), ($4 + [56]))
	CALL $76(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($4 + [64])
}

void .FUNC $274 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($3 = *($1))) = (*($3) + [8])
	*(($3 = *($1))) = (*($3) + [8])
	*(($3 = *($1))) = (*($3) + [8])
	*(($3 = *($1))) = (*($3) + [36])
	$3 = *($0 + [16])
	*($5 + [8]) = *($1)
	*($5 + [20]) = ($3 + [8])
	*($5 + [16]) = $3
	*($5 + [24]) = ($3 + [16])
	*($5 + [28]) = ($3 + [18])
	*($5 + [32]) = ($3 + [24])
	*($5 + [36]) = ($3 + [32])
	*($5 + [40]) = ($3 + [44])
	*($5 + [44]) = ($3 + [48])
	*($5 + [48]) = ($3 + [56])
	*($5 + [52]) = ($3 + [64])
	*($5 + [56]) = ($3 + [68])
	*($5 + [60]) = ($3 + [72])
	CALL $101(($5 + [16]), ($5 + [8]))
	$3 = *($0)
	$0 = *($0 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$2 = *($1)
	$3 = *($2)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $3
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$2 }
	*($2) = ($0 + $3)
	
.LABEL $label$2
	*(($3 = *($1))) = (*($3) + [8])
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [592])
	$3 = ($7 + [8])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$4 = *($3)
	*($7 + [24]) = *($7)
	*($7 + [16]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 ($7 + [16])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC _ZN4sghk7speedupERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($1))
	*($3 + [8]) = (int_64)0
	CALL $80($0, $1, ($3 + [8]), [10])
	CALL $207($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $279 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $476($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($8 + [24])) = [0]
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = $1
	$9 = ($1 + $3)
	*($8 + [40]) = $9
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [592])
	CALL memcpy($8, $1, [8])
	$4 = ($1 + [8])
	CALL eosio_assert(((uint_32)($9 - $4) > (uint_32)[7]), [592])
	$9 = ($8 + [8])
	CALL memcpy($9, $4, [8])
	*($8 + [36]) = ($1 + [16])
	$4 = ($8 + [16])
	CALL $68(($8 + [32]), $4)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$5 = *($9)
	$6 = *($8)
	CALL $492(($8 + [32]), $4)
	*($8 + [56]) = $6
	*($8 + [48]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 ($8 + [56])), (int_32 ($8 + [48])), (int_32 ($8 + [32])), (int_32 $7))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($8 + [40]))
	
.LABEL $label$6
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($8 + [24])))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC _ZN4sghk10piecemergeERKyS1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [288])
	*([0] + [4]) = $12
	CALL require_auth(*($1))
	CALL $78($0, $1)
	*($12 + [32]) = (int_64)0
	CALL $80($0, $1, ($12 + [32]), [13])
	$9 = *($2)
	$3 = *(($0 + [248]))
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$9) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [224])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)-6083090961624203264, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $149($6, $7)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$6), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [784])
	CALL eosio_assert(((int_64)*($2 + [24]) == (int_64)*($1)), [864])
	CALL eosio_assert(((uint_64)*($2 + [48]) > (uint_64)(int_64)9), [2080])
	*($12 + [280]) = ($0 + [56])
	*($12 + [32]) = *($2 + [16])
	CALL $150(($12 + [272]), ($12 + [280]), ($12 + [32]))
	CALL eosio_assert(((int_32)*($12 + [276]) != (int_32)[0]), [2128])
	*(($12 + [40])) = [0]
	*($12 + [32]) = (int_64)0
	$6 = CALL strlen([2160])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($12 + [32]) = ($6 << [1])
	$4 = (($12 + [32]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$7 = (($6 + [16]) & [-16])
	$4 = CALL $475($7)
	*($12 + [32]) = ($7 | [1])
	*($12 + [40]) = $4
	*($12 + [36]) = $6
	
.LABEL $label$7
	CALL memcpy($4, [2160], $6)
	
.LABEL $label$6
	$7 = ($2 + [48])
	*(($4 + $6)) = [0]
	CALL $151($0, $2, ($12 + [32]))
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*($12 + [40]))
	
.LABEL $label$9
	$9 = ((int_64)*($7) + (int_64)-10)
	*($12 + [264]) = $9
	if ( (int_64)($9 == 0) ){ goto $label$10 }
	*($12 + [8]) = ($0 + [184])
	*($12 + [16]) = *(($2 + [16]))
	CALL $152(($12 + [32]), ($12 + [8]), ($12 + [16]))
	CALL eosio_assert(((int_32)*($12 + [36]) != (int_32)[0]), [2128])
	$6 = *($12 + [36])
	*($12 + [16]) = [800]
	CALL $153(($12 + [192]), $0, $6, $1, ($12 + [264]), ($12 + [16]))
	if ( ((*($12 + [224]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($12 + [232])))
	
.LABEL $label$10
	$6 = *($12 + [276])
	*($12 + [32]) = [101]
	$4 = ($6 + [8])
	*($12 + [112]) = CALL $154($0, $6, ($12 + [32]), $4, [700])
	*($12 + [120]) = *($6)
	*($12 + [128]) = *($6 + [20])
	*($12 + [136]) = *($1)
	CALL $492((($12 + [112]) + [32]), $4)
	*($12 + [156]) = [1]
	*($12 + [168]) = (int_64)10000
	*($12 + [176]) = [1]
	*($12 + [180]) = [700]
	*($12 + [160]) = *($6 + [24])
	*($12 + [184]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$9 = *($0)
	*($12 + [16]) = ($12 + [112])
	CALL $155(($12 + [32]), ($0 + [136]), $9, ($12 + [16]))
	CALL $156($0, $1)
	if ( ((*($12 + [144]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($12 + [152])))
	
.LABEL $label$11
	*($12 + [32]) = *($1)
	*(($12 + [68])) = *(($2 + [28]))
	*((($12 + [32]) + [32])) = *(($2 + [24]))
	*((($12 + [32]) + [28])) = *(($2 + [20]))
	*((($12 + [32]) + [24])) = *(($2 + [16]))
	*((($12 + [32]) + [20])) = *(($2 + [12]))
	*((($12 + [32]) + [16])) = *(($2 + [8]))
	*((($12 + [32]) + [12])) = *(($2 + [4]))
	*($12 + [40]) = *($2)
	CALL $492(($12 + [72]), ($2 + [32]))
	*(($12 + [104])) = *(($7 + [16]))
	*(($12 + [96])) = *(($7 + [8]))
	*(($12 + [88])) = *($7)
	$5 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$2 = [1024]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$17 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$12 }
	*($12 + [24]) = $10
	*($12 + [16]) = $5
	$9 = (int_64)0
	$11 = (int_64)59
	$2 = [1040]
	$10 = (int_64)0
	
.LOOP $label$18:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$19 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$19
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$18 }
	*($12 + [8]) = $10
	$9 = (int_64)0
	$8 = (int_64)59
	$2 = [2176]
	$10 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$27 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$23
	$2 = ($2 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$22 }
	*($12) = $10
	CALL $157($0, ($12 + [16]), ($12 + [8]), $12, ($12 + [32]))
	if ( ((*(($12 + [72])) & [1]) == 0) ){ goto $label$28 }
	CALL $476(*(($12 + [80])))
	
.LABEL $label$28
	*([0] + [4]) = ($12 + [288])
	return (unreachable)
	
.LABEL $label$5
	CALL $477(($12 + [32]))
}

void .FUNC _ZN4sghk8sellitemERKyS1_S1_RKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [240])
	*([0] + [4]) = $16
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($2) == (int_64)101), [1856])
	CALL $141($0, $4)
	CALL $78($0, $1)
	*($16) = (int_64)0
	CALL $80($0, $1, $16, [14])
	$13 = *($3)
	$5 = *(($0 + [160]))
	$10 = *(($0 + [164]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$1 }
	$10 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$11 = ($0 + [136])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$11), [720])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$10 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $79($11, $10)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$11), [720])
	
.LABEL $label$3
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [784])
	CALL eosio_assert(((int_64)*($8 + [24]) == (int_64)*($1)), [864])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)[1]), [1888])
	CALL $144($0, $8)
	$6 = ($0 + [464])
	*($16 + [88]) = $6
	CALL $120(($16 + [80]), ($16 + [88]), $3)
	CALL eosio_assert(((int_64)*(*($16 + [84]) + [24]) != (int_64)*($3)), [1936])
	$13 = *($0)
	CALL eosio_assert($10, [976])
	CALL $145($11, $8, $13)
	*(($16 + [56])) = (int_64)1398362884
	*($16 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$13 = (int_64)5462355
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [1824])
	*($16) = CALL $142($0)
	*($16 + [8]) = *($1)
	*($16 + [16]) = *($0)
	*($16 + [24]) = *($3)
	*($16 + [32]) = *($8 + [8])
	*($16 + [40]) = *($2)
	*(($16 + [56])) = *(($4 + [8]))
	*($16 + [48]) = *($4)
	*($16 + [64]) = [1]
	*($16 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$15 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [464])) == (int_64)CALL $fimport$14()), [640])
	*(($8 = CALL $475([112])) + [56]) = (int_64)1398362884
	*($8 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$3 = ($8 + [48])
	$13 = (uint_64)*($8 + [56]) >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [1824])
	*($8 + [80]) = $6
	$11 = CALL memcpy($8, $16, [80])
	*($16 + [184]) = (($16 + [96]) + [76])
	*($16 + [180]) = ($16 + [96])
	*($16 + [176]) = ($16 + [96])
	*($16 + [192]) = ($16 + [176])
	$10 = ($11 + [8])
	*($16 + [204]) = $10
	*($16 + [200]) = $11
	$6 = ($11 + [16])
	*($16 + [208]) = $6
	$4 = ($11 + [24])
	*($16 + [212]) = $4
	$2 = ($11 + [32])
	*($16 + [216]) = $2
	$5 = ($11 + [40])
	*($16 + [220]) = $5
	*($16 + [224]) = $3
	$3 = ($11 + [64])
	*($16 + [228]) = $3
	*($16 + [232]) = ($11 + [72])
	CALL $128(($16 + [200]), ($16 + [192]))
	$13 = *($11)
	$8 = ($0 + [472])
	*($11 + [84]) = CALL db_store_i64(*($8), (int_64)-6497942746098040832, $15, $13, ($16 + [96]), [76])
	$9 = ($0 + [480])
	if ( (uint_64)($13 <= *($9)) ){ goto $label$15 }
	*($9) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($10)
	*($11 + [88]) = CALL db_idx64_store($13, (int_64)-6497942746098040832, $15, $12, ($16 + [200]))
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($6)
	*($11 + [92]) = CALL db_idx64_store($13, (int_64)-6497942746098040831, $15, $12, ($16 + [200]))
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($4)
	*($11 + [96]) = CALL db_idx64_store($13, (int_64)-6497942746098040830, $15, $12, ($16 + [200]))
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($2)
	*($11 + [100]) = CALL db_idx64_store($13, (int_64)-6497942746098040829, $15, $12, ($16 + [200]))
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($5)
	*($11 + [104]) = CALL db_idx64_store($13, (int_64)-6497942746098040828, $15, $12, ($16 + [200]))
	$13 = *($8)
	$12 = *($11)
	*($16 + [200]) = *($3)
	*($11 + [108]) = CALL db_idx64_store($13, (int_64)-6497942746098040827, $15, $12, ($16 + [200]))
	*($16 + [200]) = $11
	$13 = *($11)
	*($16 + [96]) = $13
	$10 = *(($11 + [84]))
	*($16 + [176]) = $10
	$6 = ($0 + [492])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [496]))) ){ goto $label$17 }
	*($8 + [8]) = $13
	*($8 + [16]) = $10
	*($16 + [200]) = [0]
	*($8) = $11
	*($6) = ($8 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $134(($0 + [488]), ($16 + [200]), ($16 + [96]), ($16 + [176]))
	
.LABEL $label$16
	$11 = *($16 + [200])
	*($16 + [200]) = [0]
	if ( ($11 == 0) ){ goto $label$18 }
	CALL $476($11)
	
.LABEL $label$18
	$13 = *($1)
	$1 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$19 }
	$11 = ($10 + [-24])
	$6 = ([0] - $1)
	
.LOOP $label$20:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$19 }
	$10 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$22 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [112]) == (int_32)$8), [720])
	goto $label$21 
	
.LABEL $label$22
	$11 = [0]
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$21 }
	$11 = CALL $116($8, $10)
	CALL eosio_assert(((int_32)*($11 + [112]) == (int_32)$8), [720])
	
.LABEL $label$21
	$13 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [976])
	CALL $143($8, $11, $13)
	$7 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1024]
	$14 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$28 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$8 = ($8 + [165])
	goto $label$26 
	
.LABEL $label$28
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$24
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$23 }
	*($16 + [104]) = $14
	*($16 + [96]) = $7
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [1040]
	$14 = (int_64)0
	
.LOOP $label$29:
	$12 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$30 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$8 = ($8 + [165])
	goto $label$31 
	
.LABEL $label$32
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$30
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$29 }
	*($16 + [200]) = $14
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1920]
	$14 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$38 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$8 = ($8 + [165])
	goto $label$36 
	
.LABEL $label$38
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$34
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$33 }
	*($16 + [176]) = $14
	CALL $126($0, ($16 + [96]), ($16 + [200]), ($16 + [176]), $16)
	*([0] + [4]) = ($16 + [240])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [32])) = (int_64)1398362884
	*($10 + [8]) = (int_64)0
	*($10) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [1824])
	*($10 + [60]) = $6
	*($10 + [56]) = $6
	*($10 + [64]) = ($6 + $3)
	*($10 + [88]) = ($10 + [56])
	*($10 + [40]) = $10
	CALL $140(($10 + [40]), ($10 + [88]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *(($10 + [8]))
	*(($10 + [52])) = *(($10 + [36]))
	*(($1 = (($10 + [40]) + [8]))) = *(($10 + [32]))
	$4 = *($10)
	*($10 + [40]) = *($10 + [24])
	*($10 + [44]) = *(($10 + [28]))
	$5 = *(($10 + [16]))
	*((($10 + [56]) + [8])) = *($1)
	*($10 + [56]) = *($10 + [40])
	*($10 + [88]) = $4
	*($10 + [80]) = $7
	*($10 + [72]) = $5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	CALL void $1((int_32 ($10 + [88])), (int_32 ($10 + [80])), (int_32 ($10 + [72])), (int_32 ($10 + [56])), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC _ZN4sghk10ccsellitemERKyS1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [128])
	*([0] + [4]) = $15
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($2) == (int_64)101), [1856])
	CALL $78($0, $1)
	*($15 + [24]) = (int_64)0
	CALL $80($0, $1, ($15 + [24]), [15])
	$12 = *($3)
	$10 = *(($0 + [160]))
	$9 = *(($0 + [164]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$2 = ($9 + [-24])
	$5 = ([0] - $10)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$12) ){ goto $label$1 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [136])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [720])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$2 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $12)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $79($4, $2)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$4), [720])
	
.LABEL $label$3
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [784])
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)*($1)), [864])
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)[2]), [1888])
	*($15 + [112]) = ($0 + [464])
	CALL $120(($15 + [104]), ($15 + [112]), $3)
	CALL eosio_assert(((int_64)*(*($15 + [108]) + [24]) == (int_64)*($3)), [784])
	$2 = *($15 + [108])
	*($15 + [120]) = (int_64)0
	$12 = *($0)
	*($15 + [24]) = $2
	*($15 + [28]) = ($15 + [120])
	CALL $121(($15 + [8]), ($0 + [512]), $12, ($15 + [24]))
	$12 = *($15 + [104])
	*($15 + [24]) = $12
	$2 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$2) != (int_32)[0]), [1472])
	CALL $122(($15 + [24]))
	CALL $123(*($15 + [112]), $2)
	$12 = *($1)
	$1 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$5 }
	$2 = ($9 + [-24])
	$5 = ([0] - $1)
	
.LOOP $label$6:
	if ( ((int_64)*(*($2)) == (int_64)$12) ){ goto $label$5 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$9 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$8), [720])
	if ( *($2 + [36]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$2 = CALL $116($8, $9)
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$8), [720])
	
.LABEL $label$10
	if ( (*($2 + [36]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$12 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [976])
	CALL $124($8, $2, $12)
	
.LABEL $label$7
	$12 = *($0)
	CALL eosio_assert($6, [976])
	CALL $125($4, $10, $12)
	CALL memcpy(($15 + [24]), *($15 + [108]), [80])
	*($15 + [88]) = [0]
	$7 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$2 = [1024]
	$13 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$16 }
	$8 = *($2)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$8 = ($8 + [165])
	goto $label$14 
	
.LABEL $label$16
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$11 }
	*($15 + [16]) = $13
	*($15 + [8]) = $7
	$12 = (int_64)0
	$14 = (int_64)59
	$2 = [1040]
	$13 = (int_64)0
	
.LOOP $label$17:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$18 }
	$8 = *($2)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$8 = ($8 + [165])
	goto $label$19 
	
.LABEL $label$20
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$18
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$17 }
	*($15 + [120]) = $13
	$12 = (int_64)0
	$11 = (int_64)59
	$2 = [1056]
	$13 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$26 }
	$8 = *($2)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$8 = ($8 + [165])
	goto $label$24 
	
.LABEL $label$26
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$21 }
	*($15) = $13
	CALL $126($0, ($15 + [8]), ($15 + [120]), $15, ($15 + [24]))
	*([0] + [4]) = ($15 + [128])
}

void .FUNC $453 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7056767238358958081, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [168]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $459($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)7056767238358958080, $5))
	CALL eosio_assert(((int_32)*($2 + [168]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [180])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $452 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*(($6 = CALL $475([56])) + [40]) = $1
	$3 = CALL memcpy($6, *($3), [40])
	*($8 + [56]) = ($8 + [40])
	*($8 + [52]) = $8
	*($8 + [48]) = $8
	*($8 + [64]) = ($8 + [48])
	*($8 + [76]) = ($3 + [8])
	*($8 + [72]) = $3
	*($8 + [80]) = ($3 + [16])
	*($8 + [84]) = ($3 + [24])
	*($8 + [88]) = ($3 + [32])
	CALL $218(($8 + [72]), ($8 + [64]))
	$4 = *($3)
	*($3 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992623612187470848, $2, $4, $8, [40])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [72]) = $3
	$4 = *($3)
	*($8) = $4
	$5 = *($3 + [44])
	*($8 + [48]) = $5
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($8 + [72]) = [0]
	*($6) = $3
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $219(($1 + [24]), ($8 + [72]), $8, ($8 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($8 + [72])
	*($8 + [72]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $476($3)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $451 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([56])) + [40]) = $1
	CALL $461(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $286(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $476($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7684086372495261695, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $178($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-7684086372495261696, $5))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$6 = ($1 + [224])
	*($13 + [40]) = $6
	CALL $172(($13 + [32]), ($13 + [40]), $3)
	*($13 + [16]) = [102]
	$7 = ($2 + [8])
	$8 = CALL $154($1, $2, ($13 + [16]), $7, *($5))
	$11 = *($13 + [36])
	if ( ($11 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($11 + [24]) != (int_64)*($3)) ){ goto $label$2 }
	if ( ((int_64)*($11 + [8]) == (int_64)*($2)) ){ goto $label$4 }
	CALL $173(($13 + [32]))
	$11 = *($13 + [36])
	if ( ($11 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	*($4) = ((int_64)*($4) + (int_64)*($11 + [48]))
	*(($13 + [24])) = [0]
	*($13 + [16]) = (int_64)0
	$12 = CALL strlen([2240])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$7 }
	*($13 + [16]) = ($12 << [1])
	$9 = (($13 + [16]) | [1])
	if ( $12 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$10 = (($12 + [16]) & [-16])
	$9 = CALL $475($10)
	*($13 + [16]) = ($10 | [1])
	*($13 + [24]) = $9
	*($13 + [20]) = $12
	
.LABEL $label$6
	CALL memcpy($9, [2240], $12)
	
.LABEL $label$5
	*(($9 + $12)) = [0]
	CALL $151($1, $11, ($13 + [16]))
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*($13 + [24]))
	
.LABEL $label$2
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*(($0 + [36])) = (int_64)0
	$9 = ($0 + [32])
	$11 = CALL strlen([512])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$11 }
	*($9) = ($11 << [1])
	$12 = ($9 + [1])
	if ( $11 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = (($11 + [16]) & [-16])
	$12 = CALL $475($10)
	*(($0 + [32])) = ($10 | [1])
	*(($0 + [40])) = $12
	*(($0 + [36])) = $11
	
.LABEL $label$10
	CALL memcpy($12, [512], $11)
	
.LABEL $label$9
	*(($12 + $11)) = [0]
	*($0 + [64]) = (int_64)0
	*($0 + [56]) = [0]
	*($0) = $8
	*($0 + [48]) = *($4)
	*(($0 + [8])) = *($2)
	*(($0 + [16])) = *($2 + [20])
	*(($0 + [18])) = *($2 + [22])
	*(($0 + [24])) = *($3)
	CALL $478($9, $7)
	*($0 + [56]) = *($5)
	*($0 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($1)
	*($13 + [8]) = $0
	CALL $174(($13 + [16]), $6, $8, ($13 + [8]))
	CALL $156($1, $3)
	*([0] + [4]) = ($13 + [48])
	return (unreachable)
	
.LABEL $label$8
	CALL $477($9)
	
.LABEL $label$1
	CALL $477(($13 + [16]))
	(unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7922548076370198527, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $193($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-7922548076370198528, $5))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$3 = *($1)
	$4 = *(($0 + [248]))
	$8 = *(($0 + [252]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [224])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)-6083090961624203264, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $149($6, $8)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [720])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [784])
	CALL eosio_assert($8, [1472])
	CALL eosio_assert($8, [1520])
	$8 = CALL db_next_i64(*($7 + [76]), ($9 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL $149($6, $8)
	
.LABEL $label$5
	CALL $180($6, $7)
	CALL $181($0, $1, $2)
	CALL $182($0, ($7 + [24]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $116($5, $6)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*(($1 + [20])) != (int_32)[0]), [2192])
	$2 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [976])
	CALL $161($5, $1, $2, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $158(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

int_64 .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$5 = CALL $165($0)
	*($7 + [16]) = $5
	*($7 + [24]) = *($1)
	*($7 + [32]) = *($2)
	CALL $492(($7 + [40]), $3)
	*(($7 + [68])) = [0]
	*(($7 + [64])) = [0]
	*($7 + [56]) = [1]
	*($7 + [52]) = $4
	*($7 + [60]) = [0]
	$3 = ($7 + [60])
	$4 = CALL strlen([512])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*(($7 + [60])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $475($2)
	*(($7 + [60])) = ($2 | [1])
	*(($7 + [68])) = $3
	*(($7 + [64])) = $4
	
.LABEL $label$3
	CALL memcpy($3, [512], $4)
	
.LABEL $label$2
	*(($3 + $4)) = [0]
	*($7 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	*($7 + [8]) = ($7 + [16])
	CALL $166($7, ($0 + [424]), $6, ($7 + [8]))
	if ( ((*(($7 + [60])) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*(($7 + [68])))
	
.LABEL $label$5
	if ( ((*(($7 + [40])) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($7 + [48])))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [80])
	return $5
	
.LABEL $label$1
	CALL $477($3)
	return (unreachable)
}

void .FUNC $155 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([120])) + [40]) = [0]
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [80]) = $1
	CALL $163(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $115(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [40])))
	
.LABEL $label$4
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $404 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($5 = ($9 + [24]))) = [0]
	$2 = CALL $475([16])
	*($9 + [16]) = $2
	$7 = ($2 + [16])
	*($5) = $7
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $7
	*($9 + [28]) = [0]
	*(($2 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$1 = ((int_32)$8 * (int_32)[40])
	$8 = CALL $405($4)
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($9 + [28])
	CALL $70($5, $8)
	$3 = *($2)
	$2 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$5 = ($6 + $1)
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $3
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	*($10 + [28]) = ($4 + [8])
	*($10 + [32]) = ($4 + [16])
	*($10 + [36]) = ($4 + [20])
	*($10 + [40]) = ($4 + [24])
	*($10 + [44]) = ($4 + [36])
	CALL $406(($10 + [24]), ($10 + [16]))
	CALL $407($10, ($4 + [48]))
	$3 = ($9 + [40])
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$9:
	*(($9 + [-32])) = *(($4 + [-12]))
	*(($9 + [-40])) = *(($4 + [-20]))
	*(($2 = ($9 + [-24]))) = (int_64)0
	*(($1 = ($9 + [-16]))) = [0]
	$8 = ($4 + [-4])
	*($2) = *($8)
	*(($9 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($1 = ($9 + [-4]))) = [0]
	$8 = ($4 + [8])
	*($2) = *($8)
	*(($9 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$9 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$1 = $4
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	$2 = ([0] - $1)
	$9 = ($4 + [-24])
	
.LOOP $label$11:
	$4 = *(($9 + [12]))
	if ( ($4 == 0) ){ goto $label$12 }
	*(($9 + [16])) = $4
	CALL $476($4)
	
.LABEL $label$12
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $4
	CALL $476($4)
	
.LABEL $label$13
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $2) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $476($1)
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [48])
	(unreachable)
}

int_32 .FUNC $405 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = *($0 + [24])
	$2 = *(($0 + [28]))
	$4 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	$5 = [24]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$5 = (($4 & [-4]) + $5)
	
.LABEL $label$2
	$2 = *(($0 + [36]))
	$2 = ( *(($0 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$5 = ($2 + $5)
	$6 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$0 = *(($0 + [48]))
	$1 = *(($0 + [52]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($1 - $0) / (int_32)[48]))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [24])
	$3 = *($0 + [24])
	$2 = *(($0 + [28]))
	$4 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	$5 = (($4 & [-4]) + $5)
	
.LABEL $label$8
	$2 = *(($0 + [36]))
	$2 = ( *(($0 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$5 = ($2 + $5)
	$6 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$9 }
	$0 = ($0 + [48])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$5
	return $5
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $159(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($1 + [40])
	$3 = *($2)
	$5 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-56] - $5)
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $70($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = $5
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [704])
	CALL memcpy(*($6 + [4]), $1, [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($6 + [16]) = $6
	*($6 + [28]) = ($1 + [16])
	*($6 + [24]) = ($1 + [8])
	*($6 + [32]) = ($1 + [24])
	*($6 + [36]) = ($1 + [26])
	*($6 + [40]) = ($1 + [32])
	*($6 + [44]) = $2
	*($6 + [48]) = ($1 + [56])
	*($6 + [52]) = ($1 + [64])
	*($6 + [56]) = ($1 + [72])
	CALL $160(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $400 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([64])) + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $410(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $258(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [44])))
	
.LABEL $label$4
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [28])) = $1
	CALL $476($1)
	
.LABEL $label$5
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $401 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $476($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $475($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $491($0)
}

void .FUNC $402 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[48])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[48])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$4 = ([0] - $6)
	$7 = ($7 + [-24])
	
.LOOP $label$5:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($7 + [20])))
	
.LABEL $label$6
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [4])) = $5
	CALL $476($5)
	
.LABEL $label$7
	$7 = ($7 + [-48])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$4
	$5 = ((int_32)(*($0 + [4]) - $6) / (int_32)[48])
	$7 = ( ($1 + ((int_32)$5 * (int_32)[48])) ? $2 : ((uint_32)$3 > (uint_32)$5) )
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	*($6) = *($1)
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$10 }
	CALL $401(($6 + [24]), *(($1 + [24])), *(($1 + [28])))
	
.LABEL $label$10
	CALL $478(($6 + [36]), ($1 + [36]))
	$6 = ($6 + [48])
	$1 = ($1 + [48])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$5) ){ goto $label$11 }
	CALL $409($0, $7, $2, ($3 - ((int_32)(*(($0 + [4])) - *($0)) / (int_32)[48])))
	return 
	
.LABEL $label$11
	$0 = ($0 + [4])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$12 }
	$5 = ([0] - $6)
	$1 = ($1 + [-24])
	
.LOOP $label$13:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $476(*(($1 + [20])))
	
.LABEL $label$14
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$15 }
	*(($1 + [4])) = $7
	CALL $476($7)
	
.LABEL $label$15
	$1 = ($1 + [-48])
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	*($0) = $6
	return 
	
.LABEL $label$3
	$7 = $6
	
.LABEL $label$2
	*(($0 + [4])) = $6
	CALL $476($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$1
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$16 }
	$6 = [89478485]
	$7 = ((int_32)$7 / (int_32)[48])
	if ( ((uint_32)$7 > (uint_32)[44739241]) ){ goto $label$17 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$17
	$7 = ((int_32)$6 * (int_32)[48])
	$6 = CALL $475($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	CALL $409($0, $1, $2, $3)
	return (unreachable)
	
.LABEL $label$16
	CALL $491($0)
}

void .FUNC $403 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $404(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $273 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$9 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($10 + [24]) = [0]
	*($10 + [8]) = ($10 + [24])
	$2 = ($1 + [8])
	*($10 + [36]) = $2
	*($10 + [32]) = $1
	$3 = ($1 + [16])
	*($10 + [40]) = $3
	$4 = ($1 + [24])
	*($10 + [44]) = $4
	$5 = ($1 + [64])
	*($10 + [48]) = $5
	$6 = ($1 + [144])
	*($10 + [52]) = $6
	$7 = ($1 + [160])
	*($10 + [56]) = $7
	CALL $274(($10 + [32]), ($10 + [8]))
	$8 = *($10 + [24])
	if ( ($8 == 0) ){ goto $label$2 }
	CALL $70($0, $8)
	$9 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($10 + [12]) = $0
	*($10 + [8]) = $0
	*($10 + [16]) = $9
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = $2
	*($10 + [32]) = $1
	*($10 + [40]) = $3
	*($10 + [44]) = $4
	*($10 + [48]) = $5
	*($10 + [52]) = $6
	*($10 + [56]) = $7
	CALL $275(($10 + [32]), ($10 + [24]))
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $421 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	CALL $78($0, $1)
	CALL $422($0, $2)
	$4 = *($3)
	$5 = *(($0 + [328]))
	$10 = *(($0 + [332]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$3 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$4) ){ goto $label$1 }
	$10 = $3
	$7 = ($3 + [-24])
	$3 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [304])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$3 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$7), [720])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$10 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, $4)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $208($7, $10)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$7), [720])
	
.LABEL $label$3
	$10 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($10, [784])
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)*($1)), [864])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)[1]), [1888])
	$4 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($11 + [24]) = $4
	if ( ((uint_64)$4 >= (uint_64)*($3 + [40])) ){ goto $label$5 }
	$9 = *($2)
	CALL eosio_assert(((uint_64)((int_64)$9 + (int_64)9999) > (uint_64)(int_64)19998), [4080])
	$9 = ((int_64)((int_64)$9 / (int_64)10000) * (int_64)60)
	*($11 + [16]) = $9
	$8 = *($0)
	if ( ((uint_64)$9 >= (uint_64)(int_64))(*(($3 + [40])) - $4)) ){ goto $label$6 }
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert($10, [976])
	CALL $424($7, $3, $8, ($11 + [8]))
	goto $label$5 
	
.LABEL $label$6
	*($11 + [8]) = ($11 + [24])
	CALL eosio_assert($10, [976])
	CALL $423($7, $3, $8, ($11 + [8]))
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $455 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($4 + [152])))
	
.LABEL $label$7
	if ( ((*(($4 + [96])) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($4 + [104])))
	
.LABEL $label$8
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($4 + [152])))
	
.LABEL $label$11
	if ( ((*(($4 + [96])) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($4 + [104])))
	
.LABEL $label$12
	CALL $476($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [172]))
	$7 = *(($1 + [176]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7056767238358958080, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($7)
	
.LABEL $label$13
	$7 = *(($1 + [180]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$16 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7056767238358958081, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($7)
	
.LABEL $label$15
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $272 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $273(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $426 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [72])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4411838784962822144, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [72]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4411838784962822145, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [76])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $475([64])) + [32]) = [0]
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $110(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $111(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($3 + [32])))
	
.LABEL $label$4
	CALL $476($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $427 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $68($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $424 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*($4 + [104]) = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($4 + [88]) = *($1 + [8])
	*($4 + [96]) = *($1 + [16])
	$2 = *($1)
	*($4 + [80]) = $2
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	CALL eosio_assert([1], [1184])
	*($4 + [72]) = ($4 + [56])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [112]) = ($4 + [64])
	*($4 + [124]) = ($1 + [8])
	*($4 + [120]) = $1
	*($4 + [128]) = ($1 + [16])
	*($4 + [132]) = ($1 + [24])
	*($4 + [136]) = ($1 + [28])
	*($4 + [140]) = ($1 + [32])
	*($4 + [144]) = ($1 + [40])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	CALL $212(($4 + [120]), ($4 + [112]))
	CALL db_update_i64(*($1 + [68]), *($4 + [104]), $4, [56])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [124]) = $1
	*($4 + [120]) = $0
	*($4 + [132]) = $1
	*($4 + [128]) = ($4 + [88])
	*($4 + [136]) = ($4 + [80])
	*($4 + [140]) = ($4 + [104])
	*($4 + [112]) = ($4 + [120])
	CALL $425(($4 + [112]), $3, ($3 + [1]))
	*([0] + [4]) = ($4 + [160])
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [13088]), [13104], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

void .FUNC $425 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [8])
	if ( (CALL memcmp(*($3 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$5 = *(*($3 + [12]) + [72])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4411838784962822144, $6, *(*($3 + [16])))
	*(*(($3 + [12])) + [72]) = $5
	
.LABEL $label$2
	CALL db_idx64_update($5, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$3 = *($0)
	$5 = *($3)
	*($6 + [8]) = *(*($3 + [4]) + [16])
	if ( (CALL memcmp((*($3 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($3 + [12]) + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)4411838784962822145, $6, *(*($3 + [16])))
	*((*(($3 + [12])) + [76])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($3 + [20])), ($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $344 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $345(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7922548076370198528, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-7922548076370198528, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $193($4, $8)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [720])
	
.LABEL $label$4
	*($2 + [36]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $229 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$8 = *($0 + [4])
	$6 = *($8 + [36])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-7922548076370198528, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [36]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$2), [720])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $193($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-7922548076370198528, $3))
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$2), [720])
	
.LABEL $label$5
	*($7 + [36]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [704])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [704])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $91(CALL $92($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [704])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [704])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-3733857468820750336, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $240($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-3733857468820750336, $5))
	CALL eosio_assert(((int_32)*($2 + [160]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [168])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $225 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = CALL db_lowerbound_i64(*($0 + [880]), *(($0 + [888])), (int_64)-3733857468820750336, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [880])
	$4 = CALL $240($1, $4)
	*($5 + [8]) = (CASTING uint_64)(uint_32 $1)
	if ( (uint_64)((int_64))(*(*(CALL $241(($5 + [8])) + [4])) - *($4)) <= (int_64)50) ){ goto $label$1 }
	$0 = CALL db_lowerbound_i64(*(($0 + [880])), *(($0 + [888])), (int_64)-3733857468820750336, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $240($1, $0)
	$3 = [1]
	
.LOOP $label$2:
	$4 = [0]
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1472])
	CALL eosio_assert($2, [1520])
	$2 = CALL db_next_i64(*($0 + [164]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $240($1, $2)
	
.LABEL $label$3
	CALL $248($1, $0)
	if ( ($4 == 0) ){ goto $label$1 }
	$2 = ($3 <= [20])
	$3 = ($3 + [1])
	$0 = $4
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $226 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	*(($13 + [56])) = [0]
	*($13 + [48]) = (int_64)0
	$6 = CALL strlen([512])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($13 + [48]) = ($6 << [1])
	$8 = (($13 + [48]) | [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$12 = (($6 + [16]) & [-16])
	$8 = CALL $475($12)
	*($13 + [48]) = ($12 | [1])
	*($13 + [56]) = $8
	*($13 + [52]) = $6
	
.LABEL $label$3
	CALL memcpy($8, [512], $6)
	
.LABEL $label$2
	*(($8 + $6)) = [0]
	CALL $493($13, $2, [7], [94], $2)
	if ( (*($13 + [48]) & [1]) ){ goto $label$6 }
	*($13 + [48]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*($13 + [56])) = [0]
	*($13 + [52]) = [0]
	
.LABEL $label$5
	CALL $480(($13 + [48]), [0])
	$7 = ($13 + [8])
	*((($13 + [48]) + [8])) = *($7)
	*($13 + [48]) = *($13)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ((uint_32)[94] / (uint_32)(($3 & [1]) + $3))
	if ( ($3 == 0) ){ goto $label$8 }
	$5 = (($13 + [32]) | [1])
	$8 = (($13 + [32]) + [8])
	$10 = ($0 + [4])
	$11 = [0]
	$2 = [0]
	
.LOOP $label$9:
	*($8) = [0]
	*($13 + [32]) = (int_64)0
	$6 = CALL strlen([512])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	*($13 + [32]) = ($6 << [1])
	$12 = $5
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = (($6 + [16]) & [-16])
	$12 = CALL $475($9)
	*($8) = $12
	*($13 + [32]) = ($9 | [1])
	*($13 + [36]) = $6
	
.LABEL $label$11
	CALL memcpy($12, [512], $6)
	
.LABEL $label$10
	*(($12 + $6)) = [0]
	CALL $493($13, ($13 + [48]), $2, $4, ($13 + [48]))
	if ( (*($13 + [32]) & [1]) ){ goto $label$14 }
	*($13 + [32]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*($8)) = [0]
	*($13 + [36]) = [0]
	
.LABEL $label$13
	CALL $480(($13 + [32]), [0])
	*($8) = *($7)
	*($13 + [32]) = *($13)
	$6 = ( *($8) ? $5 : (*($13 + [32]) & [1]) )
	CALL sha256($6, CALL $534($6), $13)
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$16 }
	*($6) = *($13)
	*(($6 + [8])) = *($13 + [8])
	*(($6 + [24])) = *(($13 + [24]))
	*(($6 + [16])) = *(($13 + [16]))
	*($10) = (*($10) + [32])
	goto $label$15 
	
.LABEL $label$16
	CALL $247($0, $13)
	
.LABEL $label$15
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL $476(*($8))
	
.LABEL $label$17
	$2 = ($2 + $4)
	$11 = ($11 + [1])
	if ( ($11 <= $3) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL $476(*($13 + [56]))
	
.LABEL $label$18
	*([0] + [4]) = ($13 + [64])
	return (unreachable)
	
.LABEL $label$7
	CALL $477(($13 + [32]))
	
.LABEL $label$1
	CALL $477(($13 + [48]))
	(unreachable)
}

int_64 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$9 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*(($10 + [32])) = [0]
	*(($10 + [38])) = [0]
	*($10 + [16]) = (int_64)-1
	$6 = (int_64)0
	*($10 + [24]) = (int_64)0
	*($10 + [36]) = [0]
	*($10 + [8]) = $9
	*($10) = $7
	$4 = CALL db_lowerbound_i64($7, $9, (int_64)-7922548076370198528, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $193($10, $4)
	$6 = *($1)
	$5 = *($4 + [24])
	CALL eosio_assert([1], [1520])
	$6 = (CASTING uint_64)(uint_32 ((int_64)$5 == (int_64)$6))
	$4 = CALL db_next_i64(*($4 + [32]), ($10 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = CALL $193($10, $4)
	$5 = *($1)
	$8 = *($4 + [24])
	CALL eosio_assert([1], [1520])
	$6 = ((int_64)(CASTING uint_64)(uint_32 ((int_64)$8 == (int_64)$5)) + (int_64)$6)
	$4 = CALL db_next_i64(*($4 + [32]), ($10 + [40]))
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$10 }
	
.LABEL $label$9
	$1 = *($10 + [24])
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($10 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $476(*(($2 + [16])))
	
.LABEL $label$16
	CALL $476($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($10 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $476($4)
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [48])
	return $6
}

void .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $68(*($1), ($2 + [24]))
	CALL $68(*($1), ($2 + [36]))
}

void .FUNC $221 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$2 = *($1 + [16])
	$3 = *($1 + [8])
	$4 = *($1)
	CALL $492(($6 + [24]), ($1 + [24]))
	CALL $492(($6 + [8]), ($1 + [36]))
	*($6 + [56]) = $4
	*($6 + [48]) = $3
	*($6 + [40]) = $2
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($6 + [56])), (int_32 ($6 + [48])), (int_32 ($6 + [40])), (int_32 ($6 + [24])), (int_32 ($6 + [8])), (int_32 $1))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*($6 + [16]))
	
.LABEL $label$2
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL $476(*($6 + [32]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [192])
	*([0] + [4]) = $4
	CALL $492(($4 + [104]), $1)
	CALL _Z10str_to_sigNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($4 + [120]), ($4 + [104]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$1 }
	CALL $476(*($4 + [112]))
	
.LABEL $label$1
	$2 = ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) )
	CALL sha256($2, CALL $534($2), ($4 + [64]))
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$2 = CALL strlen([2608])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($4 + [8]) = ($2 << [1])
	$1 = (($4 + [8]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = (($2 + [16]) & [-16])
	$1 = CALL $475($3)
	*($4 + [8]) = ($3 | [1])
	*($4 + [16]) = $1
	*($4 + [12]) = $2
	
.LABEL $label$4
	CALL memcpy($1, [2608], $2)
	
.LABEL $label$3
	*(($1 + $2)) = [0]
	CALL _Z10str_to_pubNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($4 + [24]), ($4 + [8]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($4 + [16]))
	
.LABEL $label$6
	CALL assert_recover_key(($4 + [64]), ($4 + [120]), [66], ($4 + [24]), [34])
	*([0] + [4]) = ($4 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $477(($4 + [8]))
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	CALL $103($0)
	$4 = ($0 + [1208])
	$7 = ($0 + [1224])
	$9 = *($7)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [1216])), (int_64)-6529297656626282496, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $104($4, $5)
	*($12 + [36]) = [0]
	*($12 + [32]) = $4
	$9 = *(*(CALL $105(($12 + [32])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [1224])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1280])
	$9 = *($7)
	*(($12 + [60])) = (int_64)0
	*($12 + [32]) = $9
	*($12 + [56]) = [0]
	*($12 + [40]) = *($1)
	*($12 + [48]) = *($2)
	$2 = ($12 + [56])
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*(($12 + [56])) = ($1 << [1])
	$2 = ($2 + [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($1 + [16]) & [-16])
	$2 = CALL $475($7)
	*(($12 + [56])) = ($7 | [1])
	*(($12 + [64])) = $2
	*(($12 + [60])) = $1
	
.LABEL $label$5
	CALL memcpy($2, [512], $1)
	
.LABEL $label$4
	*(($2 + $1)) = [0]
	*($12 + [68]) = $3
	*($12 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$9 = *($0)
	*($12 + [8]) = ($12 + [32])
	CALL $106(($12 + [16]), $4, $9, ($12 + [8]))
	$6 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [1024]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$12 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*($12 + [24]) = $10
	*($12 + [16]) = $6
	$9 = (int_64)0
	$11 = (int_64)59
	$1 = [1040]
	$10 = (int_64)0
	
.LOOP $label$13:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$14 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$2 = ($2 + [165])
	goto $label$15 
	
.LABEL $label$16
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$14
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$13 }
	*($12 + [8]) = $10
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [1344]
	$10 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$22 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$2 = ($2 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	*($12) = $10
	CALL $107($0, ($12 + [16]), ($12 + [8]), $12, ($12 + [32]))
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$23 }
	CALL $476(*(($12 + [64])))
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $477($2)
}

void .FUNC $389 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $393(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $388 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$19 = (*([0] + [4]) - [128])
	*([0] + [4]) = $19
	*(($20 = $19) + [48]) = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($20 + [32]) = *($1 + [8])
	*($20 + [40]) = *($1 + [12])
	*($1 + [40]) = [2]
	*($20 + [24]) = *($1)
	CALL eosio_assert([1], [1184])
	*($20 + [56]) = [0]
	*($20 + [8]) = ($20 + [56])
	$4 = ($1 + [8])
	*($20 + [68]) = $4
	*($20 + [64]) = $1
	$5 = ($1 + [12])
	*($20 + [72]) = $5
	$7 = ($1 + [16])
	*($20 + [76]) = $7
	$8 = ($1 + [24])
	*($20 + [80]) = $8
	$9 = ($1 + [32])
	*($20 + [84]) = $9
	$10 = ($1 + [36])
	*($20 + [88]) = $10
	$6 = ($1 + [40])
	*($20 + [92]) = $6
	$11 = ($1 + [44])
	*($20 + [96]) = $11
	$12 = ($1 + [48])
	*($20 + [100]) = $12
	$13 = ($1 + [56])
	*($20 + [104]) = $13
	$14 = ($1 + [64])
	*($20 + [108]) = $14
	$15 = ($1 + [80])
	*($20 + [112]) = $15
	$16 = ($1 + [92])
	*($20 + [116]) = $16
	$17 = ($1 + [104])
	*($20 + [120]) = $17
	CALL $129(($20 + [64]), ($20 + [8]))
	$18 = *($20 + [56])
	if ( ($18 <= [513]) ){ goto $label$2 }
	$19 = CALL malloc($18)
	goto $label$1 
	
.LABEL $label$2
	$19 = ($19 - (($18 + [15]) & [-16]))
	*([0] + [4]) = $19
	
.LABEL $label$1
	*($20 + [12]) = $19
	*($20 + [8]) = $19
	*($20 + [16]) = ($19 + $18)
	*($20 + [56]) = ($20 + [8])
	*($20 + [68]) = $4
	*($20 + [72]) = $5
	*($20 + [76]) = $7
	*($20 + [80]) = $8
	*($20 + [84]) = $9
	*($20 + [88]) = $10
	*($20 + [64]) = $1
	*($20 + [92]) = $6
	*($20 + [96]) = $11
	*($20 + [100]) = $12
	*($20 + [104]) = $13
	*($20 + [108]) = $14
	*($20 + [112]) = $15
	*($20 + [116]) = $16
	*($20 + [120]) = $17
	CALL $130(($20 + [64]), ($20 + [56]))
	CALL db_update_i64(*($1 + [116]), *($20 + [48]), $19, $18)
	if ( ($18 <= [513]) ){ goto $label$3 }
	CALL free($19)
	
.LABEL $label$3
	$19 = ($0 + [36])
	$2 = *($20 + [24])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($20 + [68]) = $1
	*($20 + [64]) = $0
	*($20 + [76]) = $1
	*($20 + [72]) = ($20 + [32])
	*($20 + [80]) = ($20 + [24])
	*($20 + [84]) = ($20 + [48])
	*($20 + [56]) = ($20 + [64])
	CALL $395(($20 + [56]), $19, ($19 + [1]))
	*([0] + [4]) = ($20 + [128])
}

void .FUNC $383 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$3 = *($3)
	*($1 + [8]) = *($3 + [1288])
	*(($1 + [20])) = *(($3 + [1300]))
	*(($1 + [16])) = *(($3 + [1296]))
	*(($1 + [12])) = *(($3 + [1292]))
	$4 = *($1)
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1184])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [24])
	*($5 + [116]) = ($1 + [40])
	*($5 + [120]) = ($1 + [56])
	*($5 + [124]) = ($1 + [72])
	CALL $327(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $382 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $381 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $380 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([48])) + [32]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [12])
	*($8 + [52]) = ($6 + [16])
	*($8 + [56]) = ($6 + [20])
	*($8 + [60]) = ($6 + [24])
	CALL $381(($8 + [40]), ($8 + [32]))
	*($6 + [36]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $382(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $387 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [224])
	*([0] + [4]) = $27
	$22 = *($1)
	$6 = *(($0 + [40]))
	$25 = *(($0 + [44]))
	if ( ((int_32)$25 == (int_32)$6) ){ goto $label$1 }
	$10 = ($25 + [-24])
	$26 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$22) ){ goto $label$1 }
	$25 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $26) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$25 == (int_32)$6) ){ goto $label$4 }
	$20 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [112]) == (int_32)$3), [720])
	goto $label$3 
	
.LABEL $label$4
	$20 = [0]
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $22)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$20 = CALL $116($3, $10)
	CALL eosio_assert(((int_32)*($20 + [112]) == (int_32)$3), [720])
	
.LABEL $label$3
	$4 = ((int_32)$20 != (int_32)[0])
	CALL eosio_assert($4, [1728])
	CALL eosio_assert(((int_32)*($20 + [40]) == (int_32)[1]), [3808])
	CALL $226(($27 + [184]), ($27 + [200]), $2, [10])
	*($27 + [176]) = [0]
	*($27 + [168]) = (int_64)0
	*($27 + [160]) = [0]
	*($27 + [152]) = (int_64)0
	$8 = ($0 + [136])
	$2 = ($0 + [8])
	$7 = ($27 + [44])
	$6 = ($27 + [32])
	$5 = (($27 + [80]) + [8])
	$11 = ($27 + [16])
	$12 = ($27 + [100])
	$15 = ($27 + [56])
	$16 = ($27 + [64])
	$17 = ($27 + [68])
	$18 = ($27 + [48])
	$19 = ($27 + [72])
	$25 = [0]
	$26 = [1]
	
.LOOP $label$5:
	*($27) = (int_64)1
	*($27 + [80]) = $26
	CALL $266(($27 + [112]), $2, $27, ($27 + [80]))
	$10 = *($27 + [184])
	*($27) = (int_64)1000
	$10 = ($10 + $25)
	CALL $390(($27 + [80]), $2, ($27 + [112]), $10, ($10 + [32]), $27, ($27 + [168]))
	*($27 + [208]) = [101]
	$22 = CALL $154($0, ($27 + [80]), ($27 + [208]), $5, [100])
	*($11) = *($12)
	*($27) = $22
	*(($13 = ($27 + [8]))) = *($27 + [80])
	*(($14 = ($27 + [24]))) = *($1)
	CALL $492($6, $5)
	*($7) = [1]
	*($15) = (int_64)10000
	*($16) = [1]
	*($17) = [100]
	*($18) = *((($27 + [80]) + [24]))
	*($19) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$22 = *($0)
	*($27 + [216]) = $27
	CALL $155(($27 + [208]), $8, $22, ($27 + [216]))
	CALL $156($0, $1)
	$10 = *($27 + [156])
	if ( ((uint_32)$10 >= (uint_32)*((($27 + [152]) + [8]))) ){ goto $label$7 }
	*($10) = *($27)
	*(($10 + [24])) = *($14)
	*(($10 + [16])) = *($11)
	*(($10 + [8])) = *($13)
	*(($10 + [40])) = *(($6 + [8]))
	*($10 + [32 align=4]) = *($6)
	*($6) = [0]
	*(($27 + [36])) = [0]
	*(($27 + [40])) = [0]
	CALL memcpy(($10 + [44]), $7, [36])
	*($27 + [156]) = ($10 + [80])
	goto $label$6 
	
.LABEL $label$7
	CALL $291(($27 + [152]), $27)
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($27 + [40])))
	
.LABEL $label$6
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*((($27 + [80]) + [16])))
	
.LABEL $label$8
	$25 = ($25 + [64])
	$26 = ($26 + [1])
	if ( ((int_32)$26 != (int_32)[6]) ){ goto $label$5 }
	$22 = *($0)
	CALL eosio_assert($4, [976])
	CALL $388($3, $20, $22, $27)
	$9 = *($0)
	$22 = (int_64)0
	$21 = (int_64)59
	$10 = [1024]
	$23 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$14 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$14
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$10
	$10 = ($10 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$9 }
	*($27 + [8]) = $23
	*($27) = $9
	$22 = (int_64)0
	$24 = (int_64)59
	$10 = [1040]
	$23 = (int_64)0
	
.LOOP $label$15:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$16 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$5 = ($5 + [165])
	goto $label$17 
	
.LABEL $label$18
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$16
	$10 = ($10 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$21 | (int_64)$23)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$15 }
	*($27 + [112]) = $23
	$22 = (int_64)0
	$21 = (int_64)59
	$10 = [3856]
	$23 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$24 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$24
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$20
	$10 = ($10 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$19 }
	*($27 + [80]) = $23
	CALL $389($0, $27, ($27 + [112]), ($27 + [80]), ($27 + [152]))
	$5 = *($27 + [152])
	if ( ($5 == 0) ){ goto $label$25 }
	$10 = *($27 + [156])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$27 }
	$0 = ([0] - $5)
	$10 = ($10 + [-48])
	
.LOOP $label$28:
	if ( ((*($10) & [1]) == 0) ){ goto $label$29 }
	CALL $476(*(($10 + [8])))
	
.LABEL $label$29
	$10 = ($10 + [-80])
	if ( ((int_32)($10 + $0) != (int_32)[-48]) ){ goto $label$28 }
	$10 = *($27 + [152])
	goto $label$26 
	
.LABEL $label$27
	$10 = $5
	
.LABEL $label$26
	*($27 + [156]) = $5
	CALL $476($10)
	
.LABEL $label$25
	$5 = *($27 + [168])
	if ( ($5 == 0) ){ goto $label$30 }
	$10 = *($27 + [172])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$32 }
	$0 = ([0] - $5)
	$10 = ($10 + [-24])
	
.LOOP $label$33:
	if ( ((*($10) & [1]) == 0) ){ goto $label$34 }
	CALL $476(*(($10 + [8])))
	
.LABEL $label$34
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $0) != (int_32)[-24]) ){ goto $label$33 }
	$10 = *($27 + [168])
	goto $label$31 
	
.LABEL $label$32
	$10 = $5
	
.LABEL $label$31
	*($27 + [172]) = $5
	CALL $476($10)
	
.LABEL $label$30
	$10 = *($27 + [184])
	if ( ($10 == 0) ){ goto $label$35 }
	*($27 + [188]) = $10
	CALL $476($10)
	
.LABEL $label$35
	*([0] + [4]) = ($27 + [224])
}

void .FUNC _ZN4sghk9cardmergeERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	float_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [192])
	*([0] + [4]) = $26
	CALL require_auth(*($1))
	CALL $78($0, $1)
	*($26 + [32]) = (int_64)0
	CALL $80($0, $1, ($26 + [32]), [12])
	$7 = *($2)
	$22 = *(($0 + [160]))
	$24 = *(($0 + [164]))
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$1 }
	$23 = ($24 + [-24])
	$8 = ([0] - $22)
	
.LOOP $label$2:
	if ( ((int_64)*(*($23)) == (int_64)$7) ){ goto $label$1 }
	$24 = $23
	$9 = ($23 + [-24])
	$23 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [136])
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$4 }
	$18 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [80]) == (int_32)$4), [720])
	goto $label$3 
	
.LABEL $label$4
	$18 = [0]
	$23 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $7)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$3 }
	$18 = CALL $79($4, $23)
	CALL eosio_assert(((int_32)*($18 + [80]) == (int_32)$4), [720])
	
.LABEL $label$3
	$5 = ((int_32)$18 != (int_32)[0])
	CALL eosio_assert($5, [784])
	CALL eosio_assert(((int_32)*($18 + [64]) == (int_32)[1]), [1888])
	CALL eosio_assert(((int_64)*($18 + [24]) == (int_64)*($1)), [864])
	*($26 + [184]) = [0]
	*($26 + [176]) = (int_64)0
	CALL $492(($26 + [160]), $3)
	CALL _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c(($26 + [176]), ($26 + [160]), [45])
	if ( ((*($26 + [160]) & [1]) == 0) ){ goto $label$5 }
	CALL $476(*($26 + [168]))
	
.LABEL $label$5
	CALL eosio_assert((((int_32)(*($26 + [180]) - *($26 + [176])) / (int_32)[12]) <= [6]), [2288])
	*($26 + [152]) = [0]
	*($26 + [144]) = (int_64)0
	*(($26 + [88])) = [0]
	*(($23 = (($26 + [32]) + [48]))) = (int_64)0
	*(($26 + [132])) = [0]
	*(($26 + [136])) = [0]
	*($26 + [128]) = [0]
	*($26 + [32]) = *($1)
	*($26 + [40]) = (int_64)0
	*(($26 + [72])) = *(($18 + [24]))
	*((($26 + [32]) + [32])) = *(($18 + [16]))
	$11 = ($18 + [8])
	*((($26 + [32]) + [24])) = *($11)
	*($26 + [48]) = *($18)
	CALL $478($23, ($18 + [32]))
	CALL memcpy(($26 + [92]), ($18 + [44]), [36])
	$23 = *($26 + [176])
	if ( ((int_32)*($26 + [180]) == (int_32)$23) ){ goto $label$6 }
	$12 = ($0 + [160])
	$13 = ($0 + [164])
	$14 = ($0 + [144])
	$15 = ($0 + [136])
	$17 = ($18 + [48])
	$16 = ($18 + [18])
	$22 = [0]
	
.LOOP $label$7:
	$7 = CALL _ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($23 + ((int_32)$22 * (int_32)[12])), [0], [10])
	CALL eosio_assert(((int_64)$7 != (int_64)*($2)), [2352])
	$3 = *($12)
	$24 = *($13)
	if ( ((int_32)$24 == (int_32)$3) ){ goto $label$8 }
	$23 = ($24 + [-24])
	$8 = ([0] - $3)
	
.LOOP $label$9:
	if ( ((int_64)*(*($23)) == (int_64)$7) ){ goto $label$8 }
	$24 = $23
	$9 = ($23 + [-24])
	$23 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$24 == (int_32)$3) ){ goto $label$11 }
	$23 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [80]) == (int_32)$4), [720])
	goto $label$10 
	
.LABEL $label$11
	$23 = [0]
	$9 = CALL db_find_i64(*($15), *($14), (int_64)4732891782226903040, $7)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$23 = CALL $79($4, $9)
	CALL eosio_assert(((int_32)*($23 + [80]) == (int_32)$4), [720])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [784])
	CALL eosio_assert(((int_32)*($23 + [64]) == (int_32)[1]), [1888])
	CALL eosio_assert(((int_64)*($23 + [24]) == (int_64)*($1)), [864])
	$25 = (float_64)1
	if ( ((int_64)*($11) == (int_64)*($23 + [8])) ){ goto $label$12 }
	$25 = ( (float_64)0.8 ? (float_64)0.5 : ((int_32)*($16) == (int_32)*($23 + [18])) )
	
.LABEL $label$12
	$7 = (int_64)0
	$21 = (int_64)0
	$9 = (*($23 + [48]) + [-1])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$13 }
	$21 = *((($9 << [3]) + [2400]))
	
.LABEL $label$13
	$10 = (CASTING float_64)(uint_64 $21)
	$9 = (*($17) + [-1])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$14 }
	$7 = *((($9 << [3]) + [2400]))
	
.LABEL $label$14
	*($26 + [16]) = ((float_64)((float_64)$25 * (float_64)((float_64)$10 / (float_64)(CASTING float_64)(uint_64 $7))) * (float_64)(CASTING float_64)(uint_64 *($23 + [56])))
	$7 = *($0)
	*($26 + [8]) = ($26 + [16])
	CALL eosio_assert($5, [976])
	CALL $199($4, $18, $7, ($26 + [8]))
	*(($9 = (($26 + [32]) + [8]))) = ((int_64)*($9) + (int_64)(Rounds 0)(*($26 + [16])))
	$9 = *($26 + [148])
	if ( ((uint_32)$9 >= (uint_32)*((($26 + [144]) + [8]))) ){ goto $label$16 }
	*($9) = *($23)
	*(($9 + [24])) = *(($23 + [24]))
	*(($9 + [16])) = *(($23 + [16]))
	*(($9 + [8])) = *(($23 + [8]))
	CALL $492(($9 + [32]), ($23 + [32]))
	CALL memcpy(($9 + [44]), ($23 + [44]), [36])
	*($26 + [148]) = (*($26 + [148]) + [80])
	goto $label$15 
	
.LABEL $label$16
	CALL $200(($26 + [144]), $23)
	
.LABEL $label$15
	CALL $201($0, $23)
	$23 = *($26 + [176])
	$22 = ($22 + [1])
	if ( ($22 <= ((int_32)(*($26 + [180]) - $23) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $197(($26 + [128]), *($26 + [144]), *($26 + [148]))
	$6 = *($0)
	$7 = (int_64)0
	$19 = (int_64)59
	$23 = [1024]
	$20 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$22 }
	$9 = *($23)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$9 = ($9 + [165])
	goto $label$20 
	
.LABEL $label$22
	$21 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$18
	$23 = ($23 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$17 }
	*($26 + [24]) = $20
	*($26 + [16]) = $6
	$7 = (int_64)0
	$21 = (int_64)59
	$23 = [1040]
	$20 = (int_64)0
	
.LOOP $label$23:
	$19 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$24 }
	$9 = *($23)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$9 = ($9 + [165])
	goto $label$25 
	
.LABEL $label$26
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$24
	$23 = ($23 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$23 }
	*($26 + [8]) = $20
	$7 = (int_64)0
	$19 = (int_64)59
	$23 = [2336]
	$20 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$32 }
	$9 = *($23)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$9 = ($9 + [165])
	goto $label$30 
	
.LABEL $label$32
	$21 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$28
	$23 = ($23 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$27 }
	*($26) = $20
	CALL $198($0, ($26 + [16]), ($26 + [8]), $26, ($26 + [32]))
	$24 = *($26 + [128])
	if ( ($24 == 0) ){ goto $label$33 }
	$8 = ($26 + [132])
	$23 = *($8)
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$35 }
	$9 = ([0] - $24)
	$23 = ($23 + [-48])
	
.LOOP $label$36:
	if ( ((*($23) & [1]) == 0) ){ goto $label$37 }
	CALL $476(*(($23 + [8])))
	
.LABEL $label$37
	$23 = ($23 + [-80])
	if ( ((int_32)($23 + $9) != (int_32)[-48]) ){ goto $label$36 }
	$23 = *(($26 + [128]))
	goto $label$34 
	
.LABEL $label$35
	$23 = $24
	
.LABEL $label$34
	*($8) = $24
	CALL $476($23)
	
.LABEL $label$33
	if ( ((*(($26 + [80])) & [1]) == 0) ){ goto $label$38 }
	CALL $476(*(($26 + [88])))
	
.LABEL $label$38
	$24 = *($26 + [144])
	if ( ($24 == 0) ){ goto $label$39 }
	$23 = *($26 + [148])
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$41 }
	$9 = ([0] - $24)
	$23 = ($23 + [-48])
	
.LOOP $label$42:
	if ( ((*($23) & [1]) == 0) ){ goto $label$43 }
	CALL $476(*(($23 + [8])))
	
.LABEL $label$43
	$23 = ($23 + [-80])
	if ( ((int_32)($23 + $9) != (int_32)[-48]) ){ goto $label$42 }
	$23 = *($26 + [144])
	goto $label$40 
	
.LABEL $label$41
	$23 = $24
	
.LABEL $label$40
	*($26 + [148]) = $24
	CALL $476($23)
	
.LABEL $label$39
	$24 = *($26 + [176])
	if ( ($24 == 0) ){ goto $label$44 }
	$23 = *($26 + [180])
	if ( ((int_32)$23 == (int_32)$24) ){ goto $label$46 }
	$9 = ([0] - $24)
	$23 = ($23 + [-12])
	
.LOOP $label$47:
	if ( ((*($23) & [1]) == 0) ){ goto $label$48 }
	CALL $476(*(($23 + [8])))
	
.LABEL $label$48
	$23 = ($23 + [-12])
	if ( ((int_32)($23 + $9) != (int_32)[-12]) ){ goto $label$47 }
	$23 = *($26 + [176])
	goto $label$45 
	
.LABEL $label$46
	$23 = $24
	
.LABEL $label$45
	*($26 + [180]) = $24
	CALL $476($23)
	
.LABEL $label$44
	*([0] + [4]) = ($26 + [192])
}

void .FUNC $385 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[1]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($5) = $2
	*($5 + [12]) = ($3 + [24])
	*($5 + [8]) = ($3 + [16])
	*($5 + [16]) = ($3 + [32])
	*($5 + [20]) = ($3 + [40])
	*($5 + [24]) = ($3 + [44])
	*($5 + [28]) = ($3 + [48])
	*($5 + [32]) = ($3 + [56])
	*($5 + [36]) = ($3 + [64])
	*($5 + [40]) = ($3 + [72])
	CALL $214(($5 + [8]), $5)
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[1]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($5) = $2
	*($5 + [12]) = ($3 + [24])
	*($5 + [8]) = ($3 + [16])
	*($5 + [16]) = ($3 + [32])
	*($5 + [20]) = ($3 + [40])
	*($5 + [24]) = ($3 + [44])
	*($5 + [28]) = ($3 + [48])
	*($5 + [32]) = ($3 + [56])
	*($5 + [36]) = ($3 + [64])
	*($5 + [40]) = ($3 + [72])
	CALL $214(($5 + [8]), $5)
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $384 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	$3 = *($3)
	*($1 + [8]) = *($3 + [1288])
	*(($1 + [20])) = *(($3 + [1300]))
	*(($1 + [16])) = *(($3 + [1296]))
	*(($1 + [12])) = *(($3 + [1292]))
	$4 = *($1)
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1184])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	*($5 + [96]) = ($5 + [80])
	*($5 + [108]) = ($1 + [8])
	*($5 + [104]) = $1
	*($5 + [112]) = ($1 + [24])
	*($5 + [116]) = ($1 + [40])
	*($5 + [120]) = ($1 + [56])
	*($5 + [124]) = ($1 + [72])
	CALL $327(($5 + [104]), ($5 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [16])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [48])
	$12 = $11
	*([0] + [4]) = $11
	$9 = *($0 + [4])
	*($1) = ((int_64)*(*($9)) + (int_64)1000000)
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $478($3, *($9 + [4]))
	*($1 + [20]) = *(*($9 + [8]))
	*($1 + [22]) = *(*($9 + [12]))
	*($1 + [24]) = *(*($9 + [16]))
	$9 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [16])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	$5 = ($1 + [22])
	$4 = ($1 + [20])
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ($9 <= [513]) ){ goto $label$3 }
	$11 = CALL malloc($9)
	goto $label$2 
	
.LABEL $label$3
	$11 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$2
	*($12 + [4]) = $11
	*($12) = $11
	*($12 + [8]) = ($11 + $9)
	*($12 + [16]) = $12
	*($12 + [28]) = $3
	*($12 + [24]) = $1
	*($12 + [32]) = $4
	*($12 + [36]) = $5
	*($12 + [40]) = $6
	CALL $75(($12 + [24]), ($12 + [16]))
	$10 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-7684086372495261696, *(*($0 + [8])), $10, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$4 }
	CALL free($11)
	
.LABEL $label$4
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$9 = ($2 + [8])
	$10 = *($9)
	$11 = *(($0 + [8]))
	$7 = *($11)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [24]))
	*($1 + [36]) = CALL db_idx64_store($10, (int_64)-7684086372495261696, $7, $8, ($12 + [24]))
	$10 = *($11)
	$7 = *($9)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [20]))
	*(($1 + [40])) = CALL db_idx64_store($7, (int_64)-7684086372495261695, $10, $8, ($12 + [24]))
	$10 = *($11)
	$7 = *($9)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [22]))
	*(($1 + [44])) = CALL db_idx64_store($7, (int_64)-7684086372495261694, $10, $8, ($12 + [24]))
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $475($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $491($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $476($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [48])
	$12 = $11
	*([0] + [4]) = $11
	$9 = *($0 + [4])
	*($1) = *(*($9))
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $478($3, *($9 + [4]))
	*($1 + [20]) = *(*($9 + [8]))
	*($1 + [22]) = *(*($9 + [12]))
	*($1 + [24]) = *(*($9 + [16]))
	$9 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [16])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [24])
	$5 = ($1 + [22])
	$4 = ($1 + [20])
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ($9 <= [513]) ){ goto $label$3 }
	$11 = CALL malloc($9)
	goto $label$2 
	
.LABEL $label$3
	$11 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$2
	*($12 + [4]) = $11
	*($12) = $11
	*($12 + [8]) = ($11 + $9)
	*($12 + [16]) = $12
	*($12 + [28]) = $3
	*($12 + [24]) = $1
	*($12 + [32]) = $4
	*($12 + [36]) = $5
	*($12 + [40]) = $6
	CALL $77(($12 + [24]), ($12 + [16]))
	$10 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-7922548076370198528, *(*($0 + [8])), $10, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$4 }
	CALL free($11)
	
.LABEL $label$4
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$9 = ($2 + [8])
	$10 = *($9)
	$11 = *(($0 + [8]))
	$7 = *($11)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [24]))
	*($1 + [36]) = CALL db_idx64_store($10, (int_64)-7922548076370198528, $7, $8, ($12 + [24]))
	$10 = *($11)
	$7 = *($9)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [20]))
	*(($1 + [40])) = CALL db_idx64_store($7, (int_64)-7922548076370198527, $10, $8, ($12 + [24]))
	$10 = *($11)
	$7 = *($9)
	$8 = *($1)
	*($12 + [24]) = *(($1 + [22]))
	*(($1 + [44])) = CALL db_idx64_store($7, (int_64)-7922548076370198526, $10, $8, ($12 + [24]))
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [16])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($1)
	$3 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $116($5, $6)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1728])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([120])) + [40]) = [0]
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [80]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [18])
	*($8 + [48]) = ($6 + [24])
	*($8 + [52]) = ($6 + [32])
	*($8 + [56]) = ($6 + [44])
	*($8 + [60]) = ($6 + [48])
	*($8 + [64]) = ($6 + [56])
	*($8 + [68]) = ($6 + [64])
	*($8 + [72]) = ($6 + [68])
	*($8 + [76]) = ($6 + [72])
	CALL $114(($8 + [32]), ($8 + [24]))
	*($6 + [88]) = [-1]
	*($6 + [84]) = $1
	*($6 + [92]) = [-1]
	*($6 + [96]) = [-1]
	*($6 + [100]) = [-1]
	*($6 + [104]) = [-1]
	*($6 + [108]) = [-1]
	*($6 + [112]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [84])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $115(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([13144])
	return [13152]
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [13140]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [13140]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $259 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $260($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [592])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $258 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [44])))
	
.LABEL $label$11
	$6 = *($1 + [24])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [28])) = $6
	CALL $476($6)
	
.LABEL $label$12
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $476($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $312 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $313(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $313 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [24])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [704])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [704])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [704])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $476($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $314 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [448])
	*([0] + [4]) = $18
	CALL memcpy(($0 + [312]), $1, [64])
	CALL $320($0)
	CALL $226(($18 + [424]), ($18 + [440]), $2, [9])
	$17 = *($18 + [424])
	*($0 + [432]) = *($17)
	*(($0 + [460])) = *(($17 + [28]))
	*(($0 + [456])) = *(($17 + [24]))
	*(($0 + [452])) = *(($17 + [20]))
	*(($0 + [448])) = *(($17 + [16]))
	*(($0 + [444])) = *(($17 + [12]))
	*(($0 + [440])) = *(($17 + [8]))
	*(($0 + [436])) = *(($17 + [4]))
	*(($0 + [488])) = *(($17 + [56]))
	*(($0 + [480])) = *(($17 + [48]))
	*(($0 + [472])) = *(($17 + [40]))
	*($0 + [464]) = *($17 + [32])
	*(($0 + [520])) = *(($17 + [88]))
	*(($0 + [512])) = *(($17 + [80]))
	*(($0 + [504])) = *(($17 + [72]))
	*($0 + [496]) = *($17 + [64])
	*(($0 + [552])) = *(($17 + [120]))
	*(($0 + [544])) = *(($17 + [112]))
	*(($0 + [536])) = *(($17 + [104]))
	*($0 + [528]) = *($17 + [96])
	*(($0 + [584])) = *(($17 + [152]))
	*(($0 + [576])) = *(($17 + [144]))
	*(($0 + [568])) = *(($17 + [136]))
	*($0 + [560]) = *($17 + [128])
	*(($0 + [616])) = *(($17 + [184]))
	*(($0 + [608])) = *(($17 + [176]))
	*(($0 + [600])) = *(($17 + [168]))
	*($0 + [592]) = *($17 + [160])
	*(($0 + [648])) = *(($17 + [216]))
	*(($0 + [640])) = *(($17 + [208]))
	*(($0 + [632])) = *(($17 + [200]))
	*($0 + [624]) = *($17 + [192])
	*(($0 + [680])) = *(($17 + [248]))
	*(($0 + [672])) = *(($17 + [240]))
	*(($0 + [664])) = *(($17 + [232]))
	*($0 + [656]) = *($17 + [224])
	*(($0 + [712])) = *(($17 + [280]))
	*(($0 + [704])) = *(($17 + [272]))
	*(($0 + [696])) = *(($17 + [264]))
	*($0 + [688]) = *($17 + [256])
	*((($18 + [344]) + [16])) = (int_64)0
	*((($18 + [344]) + [24])) = [0]
	*(($18 + [376])) = (int_64)0
	*(($5 = (($18 + [344]) + [40]))) = (int_64)0
	*((($18 + [344]) + [48])) = [0]
	*($18 + [352]) = (int_64)0
	*($18 + [344]) = (int_64)0
	$17 = CALL strlen([512])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$5 }
	*(($18 + [384])) = ($17 << [1])
	$16 = ($5 + [1])
	if ( $17 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = (($17 + [16]) & [-16])
	$16 = CALL $475($3)
	*(($18 + [384])) = ($3 | [1])
	*(($18 + [392])) = $16
	*(($18 + [388])) = $17
	
.LABEL $label$4
	CALL memcpy($16, [512], $17)
	
.LABEL $label$3
	*(($16 + $17)) = [0]
	*(($17 = (($18 + [344]) + [64]))) = [0]
	*(($16 = ($18 + [400]))) = (int_64)0
	*(($3 = (($18 + [344]) + [72]))) = (int_64)0
	*(($4 = ($18 + [276]))) = *((($18 + [344]) + [36]))
	*(($6 = ($18 + [272]))) = *((($18 + [344]) + [32]))
	*(($7 = (($18 + [232]) + [36]))) = *((($18 + [344]) + [28]))
	*(($8 = (($18 + [232]) + [32]))) = *((($18 + [344]) + [24]))
	*(($9 = (($18 + [232]) + [28]))) = *((($18 + [344]) + [20]))
	*(($10 = (($18 + [232]) + [24]))) = *((($18 + [344]) + [16]))
	*((($18 + [232]) + [20])) = *((($18 + [344]) + [12]))
	*($18 + [232]) = (int_64)0
	*($18 + [240]) = *($18 + [344])
	*(($11 = (($18 + [232]) + [16]))) = *($18 + [352])
	$12 = ($18 + [280])
	CALL $492($12, $5)
	*(($5 = (($18 + [232]) + [80]))) = *($3)
	*(($13 = (($18 + [232]) + [72]))) = *($17)
	*(($17 = (($18 + [232]) + [64]))) = *($16)
	*($18 + [320]) = (int_64)0
	*(($16 = (($18 + [232]) + [96]))) = [0]
	*(($14 = ($18 + [332]))) = [0]
	*((($18 + [232]) + [104])) = [0]
	*($18 + [16]) = (int_64)0
	*($18 + [8]) = (int_64)0
	*($18 + [24]) = (int_64)0
	CALL memcpy((($18 + [8]) + [24]), $1, [64])
	*(($15 = (($18 + [8]) + [96]))) = *($18 + [240])
	*(($3 = (($18 + [8]) + [104]))) = *($11)
	*((($18 + [8]) + [132])) = *($4)
	*((($18 + [8]) + [128])) = *($6)
	*((($18 + [8]) + [124])) = *($7)
	*((($18 + [8]) + [120])) = *($8)
	*((($18 + [8]) + [116])) = *($9)
	*((($18 + [8]) + [112])) = *($10)
	*($18 + [96]) = *($18 + [232])
	$6 = (($18 + [8]) + [136])
	CALL $492($6, $12)
	*((($18 + [8]) + [168])) = *($5)
	*((($18 + [8]) + [160])) = *($13)
	*(($4 = (($18 + [8]) + [152]))) = *($17)
	*(($7 = (($18 + [8]) + [176]))) = *($18 + [320])
	*(($1 = ($18 + [192]))) = [0]
	*(($18 + [196])) = [0]
	*(($18 + [200])) = [0]
	$17 = (*($14) - *($16))
	$5 = ((int_32)$17 / (int_32)[80])
	if ( ($17 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[53687092]) ){ goto $label$1 }
	$16 = CALL $475($17)
	*(($18 + [192])) = $16
	*(($1 = ($18 + [196]))) = $16
	*(($18 + [200])) = ($16 + ((int_32)$5 * (int_32)[80]))
	$5 = *(($18 + [332]))
	$17 = *(($18 + [328]))
	if ( ((int_32)$17 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	*($16) = *($17)
	*(($16 + [24])) = *(($17 + [24]))
	*(($16 + [16])) = *(($17 + [16]))
	*(($16 + [8])) = *(($17 + [8]))
	CALL $492(($16 + [32]), ($17 + [32]))
	CALL memcpy(($16 + [44]), ($17 + [44]), [36])
	$16 = (*($1) + [80])
	*($1) = $16
	$17 = ($17 + [80])
	if ( ((int_32)$17 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	$16 = (($18 + [8]) + [200])
	CALL $492($16, $2)
	*($18 + [224]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($17 = CALL memcpy($0, ($18 + [8]), [88])) + [88]) = *((($18 + [8]) + [88]))
	*(($17 + [96])) = *($15)
	*(($17 + [104])) = *($3)
	*(($17 + [132])) = *(($3 + [28]))
	*(($17 + [128])) = *(($3 + [24]))
	*(($17 + [124])) = *(($3 + [20]))
	*(($17 + [120])) = *(($3 + [16]))
	*(($17 + [116])) = *(($3 + [12]))
	*(($17 + [112])) = *(($3 + [8]))
	CALL $478(($17 + [136]), $6)
	*(($17 + [168])) = *(($4 + [16]))
	*(($17 + [160])) = *(($4 + [8]))
	*(($17 + [152])) = *($4)
	*(($17 + [176])) = *($7)
	if ( ((int_32)$17 == (int_32)($18 + [8])) ){ goto $label$8 }
	CALL $197(($17 + [184]), *((($18 + [8]) + [184])), *(($18 + [196])))
	
.LABEL $label$8
	CALL $478(($17 + [200]), $16)
	*($17 + [216]) = *(($18 + [224]))
	if ( ((*($16) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($18 + [216])))
	
.LABEL $label$9
	$0 = *(($18 + [192]))
	if ( ($0 == 0) ){ goto $label$10 }
	$1 = ($18 + [196])
	$17 = *($1)
	if ( ((int_32)$17 == (int_32)$0) ){ goto $label$12 }
	$16 = ([0] - $0)
	$17 = ($17 + [-48])
	
.LOOP $label$13:
	if ( ((*($17) & [1]) == 0) ){ goto $label$14 }
	CALL $476(*(($17 + [8])))
	
.LABEL $label$14
	$17 = ($17 + [-80])
	if ( ((int_32)($17 + $16) != (int_32)[-48]) ){ goto $label$13 }
	$17 = *(($18 + [192]))
	goto $label$11 
	
.LABEL $label$12
	$17 = $0
	
.LABEL $label$11
	*($1) = $0
	CALL $476($17)
	
.LABEL $label$10
	if ( ((*(($18 + [144])) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($18 + [152])))
	
.LABEL $label$15
	$0 = *(($18 + [328]))
	if ( ($0 == 0) ){ goto $label$16 }
	$1 = ($18 + [332])
	$17 = *($1)
	if ( ((int_32)$17 == (int_32)$0) ){ goto $label$18 }
	$16 = ([0] - $0)
	$17 = ($17 + [-48])
	
.LOOP $label$19:
	if ( ((*($17) & [1]) == 0) ){ goto $label$20 }
	CALL $476(*(($17 + [8])))
	
.LABEL $label$20
	$17 = ($17 + [-80])
	if ( ((int_32)($17 + $16) != (int_32)[-48]) ){ goto $label$19 }
	$17 = *(($18 + [328]))
	goto $label$17 
	
.LABEL $label$18
	$17 = $0
	
.LABEL $label$17
	*($1) = $0
	CALL $476($17)
	
.LABEL $label$16
	if ( ((*(($18 + [280])) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*(($18 + [288])))
	
.LABEL $label$21
	if ( ((*(($18 + [384])) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($18 + [392])))
	
.LABEL $label$22
	$17 = *($18 + [424])
	if ( ($17 == 0) ){ goto $label$23 }
	*($18 + [428]) = $17
	CALL $476($17)
	
.LABEL $label$23
	*([0] + [4]) = ($18 + [448])
	return (unreachable)
	
.LABEL $label$2
	CALL $477($5)
	
.LABEL $label$1
	CALL $491($1)
	(unreachable)
}

void .FUNC $315 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$1 = ($0 + [592])
	$6 = (int_64)0
	$5 = [0]
	
.LOOP $label$1:
	$6 = ((int_64)*(($1 + $5)) + (int_64)$6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	if ( ((uint_64)((int_64)((uint_64)$6 % (uint_64)(int_64)100) + (int_64)1) <= (uint_64)*(($0 + [412]))) ){ goto $label$5 }
	*($0 + [264]) = (int_64)0
	*(($0 + [272])) = (int_64)0
	$5 = ($0 + [280])
	if ( (*($5) & [1]) ){ goto $label$4 }
	*($5) = [0]
	$1 = ($0 + [288])
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [304])
	$1 = ($0 + [624])
	$4 = *(($0 + [416]))
	$3 = *(($0 + [420]))
	$6 = (int_64)0
	$5 = [0]
	
.LOOP $label$6:
	$6 = ((int_64)*(($1 + $5)) + (int_64)$6)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$6 }
	*($7 + [8]) = (int_64)3
	CALL $266(($7 + [40]), $2, ($7 + [8]), ($0 + [340]))
	*($7) = (int_64)1000
	*($7 + [104]) = *($7 + [60])
	*($7 + [96]) = *($7 + [64])
	*($7 + [88]) = *($7 + [68])
	*($7 + [80]) = *($7 + [72])
	CALL $267(($7 + [8]), $2, ($7 + [104]), ($7 + [96]), ($7 + [88]), ($7 + [80]), ($0 + [656]), ($0 + [688]), $7)
	$6 = ((int_64)((uint_64)$6 % (uint_64)$3) + (int_64)1)
	*($0 + [264]) = ( $4 ? $6 : (uint_64)($6 <= $4) )
	*(($0 + [272])) = *($7 + [8])
	CALL $478(($0 + [280]), ($7 + [16]))
	*(($0 + [292])) = *($7 + [28 align=4])
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*(($7 + [24])))
	goto $label$2 
	
.LABEL $label$4
	*(*(($1 = ($0 + [288])))) = [0]
	*(($0 + [284])) = [0]
	
.LABEL $label$3
	CALL $480($5, [0])
	*($1) = [0]
	*(($0 + [280])) = (int_64)0
	*(($0 + [292])) = (int_64)0
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $316 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [160])
	*([0] + [4]) = $10
	$1 = ($0 + [464])
	$8 = (int_64)0
	$7 = [0]
	
.LOOP $label$1:
	$8 = ((int_64)*(($1 + $7)) + (int_64)$8)
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$1 }
	$5 = *(($0 + [400]))
	$3 = *(($0 + [408]))
	$2 = *(($0 + [404]))
	CALL prints([3008])
	CALL printui(*($0 + [376]))
	CALL prints([3024])
	CALL prints([3040])
	CALL printui($2)
	CALL prints([3024])
	CALL prints([3056])
	CALL printui($3)
	CALL prints([3024])
	if ( ((uint_64)((int_64)((uint_64)$8 % (uint_64)(int_64)100) + (int_64)1) <= (uint_64)$5) ){ goto $label$6 }
	*($0 + [224]) = (int_64)0
	*(($0 + [232])) = (int_64)0
	$7 = ($0 + [240])
	if ( (*($7) & [1]) ){ goto $label$5 }
	*($7) = [0]
	$1 = ($0 + [248])
	goto $label$4 
	
.LABEL $label$6
	$4 = ($0 + [304])
	$1 = ($0 + [496])
	$8 = (int_64)0
	$7 = [0]
	
.LOOP $label$7:
	$8 = ((int_64)*(($1 + $7)) + (int_64)$8)
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$7 }
	CALL prints([3072])
	$8 = ((int_64)((uint_64)$8 % (uint_64)$3) + (int_64)1)
	$8 = ( $2 ? $8 : (uint_64)($8 <= $2) )
	CALL printui($8)
	CALL prints([3024])
	*($10 + [96]) = (int_64)3
	CALL $266(($10 + [8]), $4, ($10 + [96]), ($0 + [340]))
	*($10 + [88]) = (int_64)1000
	*($10 + [152]) = *($10 + [28])
	*($10 + [144]) = *($10 + [32])
	*($10 + [136]) = *($10 + [36])
	*($10 + [128]) = *($10 + [40])
	CALL $317(($10 + [96]), $4, ($10 + [152]), ($10 + [144]), ($10 + [136]), ($10 + [128]), ($0 + [528]), ($0 + [560]), ($10 + [88]))
	*($0 + [224]) = $8
	*(($0 + [232])) = *($10 + [96])
	CALL $478(($0 + [240]), ($10 + [104]))
	*(($0 + [252])) = *($10 + [116 align=4])
	if ( ((*($10 + [104]) & [1]) == 0) ){ goto $label$3 }
	CALL $476(*(($10 + [112])))
	goto $label$3 
	
.LABEL $label$5
	*(*(($1 = ($0 + [248])))) = [0]
	*(($0 + [244])) = [0]
	
.LABEL $label$4
	CALL $480($7, [0])
	*($1) = [0]
	*(($0 + [240])) = (int_64)0
	*(($0 + [252])) = (int_64)0
	*($10 + [8]) = (int_64)0
	$7 = CALL memset(($10 + [16]), [0], [72])
	*(($10 + [24])) = (int_64)0
	*(($10 + [32])) = [0]
	*(($10 + [40])) = (int_64)0
	*(($10 + [52])) = (int_64)0
	*(($4 = ($10 + [48]))) = [0]
	*($10 + [16]) = (int_64)0
	$1 = CALL strlen([512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*(($10 + [48])) = ($1 << [1])
	$9 = ($4 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($1 + [16]) & [-16])
	$9 = CALL $475($6)
	*(($10 + [48])) = ($6 | [1])
	*(($10 + [56])) = $9
	*(($10 + [52])) = $1
	
.LABEL $label$9
	CALL memcpy($9, [512], $1)
	
.LABEL $label$8
	*(($9 + $1)) = [0]
	*(($10 + [72])) = [0]
	*(($1 = ($10 + [64]))) = (int_64)0
	*(($10 + [80])) = (int_64)0
	*(($0 + [96])) = *($10 + [8])
	*(($0 + [104])) = *($7)
	*(($0 + [132])) = *(($7 + [28]))
	*(($0 + [128])) = *(($7 + [24]))
	*(($0 + [124])) = *(($7 + [20]))
	*(($0 + [120])) = *(($7 + [16]))
	*(($0 + [116])) = *(($7 + [12]))
	*(($0 + [112])) = *(($7 + [8]))
	$7 = ($0 + [136])
	if ( (*($7) & [1]) ){ goto $label$12 }
	*($7) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*(($0 + [144]))) = [0]
	*(($0 + [140])) = [0]
	
.LABEL $label$11
	CALL $480($7, [0])
	$9 = *(($4 + [8]))
	$8 = *($4)
	*(($10 + [48])) = [0]
	*(($7 + [8])) = $9
	*($7) = $8
	*(($10 + [52])) = [0]
	*(($10 + [56])) = [0]
	*(($0 + [168])) = *(($1 + [16]))
	*(($0 + [160])) = *(($1 + [8]))
	*(($0 + [152])) = *($1)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $477($4)
}

void .FUNC $317 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [64])
	*([0] + [4]) = $15
	$11 = (int_64)0
	$9 = [0]
	
.LOOP $label$1:
	$11 = ((int_64)*(($6 + $9)) + (int_64)$11)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$1 }
	$10 = (int_64)4
	$13 = *($5)
	$11 = ((int_64)((uint_64)$11 % (uint_64)*($8)) + (int_64)1)
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (int_64)3
	$13 = ((int_64)$13 + (int_64)*($4))
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (int_64)2
	$13 = ((int_64)$13 + (int_64)*($3))
	if ( ((uint_64)$11 <= (uint_64)$13) ){ goto $label$2 }
	$10 = (CASTING uint_64)(uint_32 ((uint_64)$11 <= (uint_64)((int_64)$13 + (int_64)*($2))))
	
.LABEL $label$2
	*($15 + [56]) = $10
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [624]
	$12 = (int_64)0
	
.LOOP $label$3:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$4 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$3 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [624]
	$14 = (int_64)0
	
.LOOP $label$7:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$8 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$9 = [0]
	*((($15 + [16]) + [32])) = [0]
	*(($15 + [54])) = [0]
	*($15 + [24]) = $14
	*($15 + [16]) = $12
	*($15 + [32]) = (int_64)-1
	$11 = (int_64)0
	*($15 + [40]) = (int_64)0
	*($15 + [52]) = [0]
	*($15 + [8]) = ($15 + [16])
	CALL $318($15, ($15 + [8]), ($15 + [56]))
	$10 = CALL $227($1, ($15 + [56]))
	
.LOOP $label$11:
	$11 = ((int_64)*(($7 + $9)) + (int_64)$11)
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$11 }
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	$11 = ((uint_64)$11 % (uint_64)$10)
	$9 = *($15 + [4])
	if ( ($9 == 0) ){ goto $label$12 }
	$11 = ((int_64)$11 + (int_64)1)
	
.LOOP $label$13:
	if ( ((int_64)*($9 + [24]) != (int_64)*($15 + [56])) ){ goto $label$12 }
	$11 = ((int_64)$11 + (int_64)-1)
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$14 }
	CALL $319($15)
	$9 = *($15 + [4])
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	*($0) = *($9)
	CALL $478(($0 + [8]), ($9 + [8]))
	*($0 + [20 align=4]) = *($9 + [20 align=4])
	
.LABEL $label$12
	$7 = *($15 + [40])
	if ( ($7 == 0) ){ goto $label$15 }
	$0 = ($15 + [44])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL $476(*(($6 + [16])))
	
.LABEL $label$20
	CALL $476($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$18 }
	$9 = *(($15 + [40]))
	goto $label$16 
	
.LABEL $label$17
	$9 = $7
	
.LABEL $label$16
	*($0) = $7
	CALL $476($9)
	
.LABEL $label$15
	*([0] + [4]) = ($15 + [64])
}

int_32 .FUNC $251 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $475([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $70($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $256(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $250 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [144])
	*([0] + [4]) = $17
	$12 = (*($2) + ((int_32)(*($4) + [-1]) * (int_32)[12]))
	if ( (*($12) & [1]) ){ goto $label$2 }
	$12 = ($12 + [1])
	goto $label$1 
	
.LABEL $label$2
	$12 = *($12 + [8])
	
.LABEL $label$1
	$11 = [-1]
	
.LOOP $label$3:
	$10 = ($12 + $11)
	$5 = ($11 + [1])
	$11 = $5
	if ( *(($10 + [1])) ){ goto $label$3 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$14 = (int_64)0
	$13 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$4:
	$16 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$6) ){ goto $label$5 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$11 = ($11 + [165])
	goto $label$6 
	
.LABEL $label$7
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$9 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$8
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$4 }
	$7 = *(($0 + [1152]))
	$10 = *(($0 + [1156]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$10 }
	$12 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)*(*($12)) == (int_64)$15) ){ goto $label$10 }
	$10 = $12
	$11 = ($12 + [-24])
	$12 = $11
	if ( ((int_32)($11 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$12 = ($0 + [1128])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$15 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$12), [720])
	if ( $10 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$11 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $15)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $249($12, $11)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$12), [720])
	
.LABEL $label$14
	$12 = *($10 + [16])
	if ( ($12 == 0) ){ goto $label$13 }
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)*((($12 << [3]) + [2696]))))
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1760])
	$14 = (int_64)17229
	$12 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$11 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	
.LABEL $label$16
	CALL eosio_assert($11, [1824])
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	$12 = CALL strlen([2752])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$23 }
	*($17 + [112]) = ($12 << [1])
	$11 = (($17 + [112]) | [1])
	if ( $12 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$5 = (($12 + [16]) & [-16])
	$11 = CALL $475($5)
	*($17 + [112]) = ($5 | [1])
	*($17 + [120]) = $11
	*($17 + [116]) = $12
	
.LABEL $label$22
	CALL memcpy($11, [2752], $12)
	
.LABEL $label$21
	*(($11 + $12)) = [0]
	$8 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [1024]
	$15 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$29 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$11 = ($11 + [165])
	goto $label$27 
	
.LABEL $label$29
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$25
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$24 }
	*($17 + [64]) = $15
	*($17 + [56]) = $8
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [2800]
	$15 = (int_64)0
	
.LOOP $label$30:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$31 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$11 = ($11 + [165])
	goto $label$32 
	
.LABEL $label$33
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$31
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$30 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [2816]
	$6 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$39 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$11 = ($11 + [165])
	goto $label$37 
	
.LABEL $label$39
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$35
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$6 = ((int_64)$13 | (int_64)$6)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$34 }
	$14 = *($10)
	*(($17 + [32])) = (int_64)4410628
	*($17 + [8]) = $8
	*($17 + [24]) = $9
	*($17 + [16]) = $14
	CALL $492(($17 + [40]), ($17 + [112]))
	$12 = CALL $251(($17 + [72]), ($17 + [56]), $15, $6, ($17 + [8]))
	CALL $252(($17 + [128]), $12)
	$11 = *($17 + [128])
	CALL send_inline($11, (*($17 + [132]) - $11))
	$11 = *($17 + [128])
	if ( ($11 == 0) ){ goto $label$40 }
	*($17 + [132]) = $11
	CALL $476($11)
	
.LABEL $label$40
	$11 = *($12 + [28])
	if ( ($11 == 0) ){ goto $label$41 }
	*(($12 + [32])) = $11
	CALL $476($11)
	
.LABEL $label$41
	$11 = *($12 + [16])
	if ( ($11 == 0) ){ goto $label$42 }
	*(($12 + [20])) = $11
	CALL $476($11)
	
.LABEL $label$42
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$43 }
	CALL $476(*(($17 + [48])))
	
.LABEL $label$43
	*((($17 + [8]) + [24])) = (int_64)1398362884
	*($17 + [24]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$14 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	
.LOOP $label$48:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$48 }
	
.LABEL $label$47
	$11 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$11 = [0]
	
.LABEL $label$44
	CALL eosio_assert($11, [1824])
	$14 = *($10)
	*(($17 + [24])) = $9
	*(($17 + [32])) = (int_64)4410628
	*($17 + [8]) = *($1)
	*($17 + [16]) = $14
	*($17 + [40]) = *($4)
	*($17 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [1024]
	$15 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$54 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$11 = ($11 + [165])
	goto $label$52 
	
.LABEL $label$54
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$50
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$49 }
	*($17 + [80]) = $15
	*($17 + [72]) = $6
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1040]
	$15 = (int_64)0
	
.LOOP $label$55:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$56 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$11 = ($11 + [165])
	goto $label$57 
	
.LABEL $label$58
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$56
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$55 }
	*($17 + [56]) = $15
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [2832]
	$15 = (int_64)0
	
.LOOP $label$59:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$60 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$11 = ($11 + [165])
	goto $label$61 
	
.LABEL $label$62
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$60
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$59 }
	*($17 + [128]) = $15
	CALL $253($0, ($17 + [72]), ($17 + [56]), ($17 + [128]), ($17 + [8]))
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$13 }
	CALL $476(*($17 + [120]))
	
.LABEL $label$13
	$12 = (*($4) + [1])
	*($4) = $12
	$11 = ((int_32)(*($2 + [4]) - *($2)) / (int_32)[12])
	if ( ((int_32)$12 > (int_32)[3]) ){ goto $label$63 }
	if ( ($11 <= $12) ){ goto $label$63 }
	CALL $250($0, $1, $2, $3, $4)
	
.LABEL $label$63
	*([0] + [4]) = ($17 + [144])
	return (unreachable)
	
.LABEL $label$12
	CALL $477(($17 + [112]))
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $254(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $70($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [704])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [704])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $91(CALL $92($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $255 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $254 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [44])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	*($9 + [28]) = ($4 + [8])
	*($9 + [32]) = ($4 + [16])
	*($9 + [36]) = ($4 + [32])
	*($9 + [40]) = ($4 + [40])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $255(($9 + [24]), ($9 + [16]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $476($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $476($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $476($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
	(unreachable)
}

void .FUNC $257 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $259(*($1), *($0 + [16]))
	CALL $68(*($1), *($0 + [20]))
}

void .FUNC $256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $76(*($1), ($0 + [32]))
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$9 = *($1)
	$4 = *(($0 + [448]))
	$7 = *(($0 + [452]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$1 = ($7 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$9) ){ goto $label$1 }
	$7 = $1
	$6 = ($1 + [-24])
	$1 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [424])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$1 = CALL db_find_i64(*(($0 + [424])), *(($0 + [432])), (int_64)8526756653867991040, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $185($3, $1)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [720])
	
.LABEL $label$3
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [784])
	*((($12 + [32]) + [16])) = *(($7 + [16]))
	*((($12 + [32]) + [8])) = *(($7 + [8]))
	*($12 + [32]) = *($7)
	CALL $492((($12 + [32]) + [24]), ($7 + [24]))
	*($12 + [68 align=4]) = *($7 + [36 align=4])
	$1 = (($12 + [32]) + [44])
	CALL $492($1, ($7 + [44]))
	*($12 + [72]) = [0]
	*($12 + [88]) = *($7 + [56])
	CALL $478($1, $2)
	$5 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [1024]
	$10 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$10 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	*($12 + [24]) = $10
	*($12 + [16]) = $5
	$9 = (int_64)0
	$11 = (int_64)59
	$1 = [1040]
	$10 = (int_64)0
	
.LOOP $label$11:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$12 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$11 }
	*($12 + [8]) = $10
	$9 = (int_64)0
	$8 = (int_64)59
	$1 = [2272]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$20 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	*($12) = $10
	CALL $186($0, ($12 + [16]), ($12 + [8]), $12, ($12 + [32]))
	CALL eosio_assert($4, [1472])
	CALL eosio_assert($4, [1520])
	$1 = CALL db_next_i64(*($7 + [68]), ($12 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$21 }
	CALL $185($3, $1)
	
.LABEL $label$21
	CALL $187($3, $7)
	if ( ((*(($12 + [76])) & [1]) == 0) ){ goto $label$22 }
	CALL $476(*(($12 + [84])))
	
.LABEL $label$22
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$23 }
	CALL $476(*(($12 + [64])))
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $406 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $408(*($1), *($0 + [16]))
	CALL $76(*($1), *($0 + [20]))
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$7
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $192(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($12 + [8]) = *($8 + [8])
	$8 = CALL db_idx64_store($11, (int_64)-6497942599532281856, $10, $9, ($12 + [8]))
	*(*($7 + [4]) + [88]) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($12 + [8]) = *($8 + [16])
	$8 = CALL db_idx64_store($11, (int_64)-6497942599532281855, $10, $9, ($12 + [8]))
	*((*($7 + [4]) + [92])) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($12 + [8]) = *($8 + [24])
	$8 = CALL db_idx64_store($11, (int_64)-6497942599532281854, $10, $9, ($12 + [8]))
	*((*($7 + [4]) + [96])) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($12 + [8]) = *($8 + [32])
	$8 = CALL db_idx64_store($11, (int_64)-6497942599532281853, $10, $9, ($12 + [8]))
	*((*($7 + [4]) + [100])) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($12 + [8]) = *($8 + [40])
	$8 = CALL db_idx64_store($11, (int_64)-6497942599532281852, $10, $9, ($12 + [8]))
	*((*($7 + [4]) + [104])) = $8
	$0 = *($0)
	$7 = *($0 + [12])
	$9 = *($7)
	$10 = *(*($0 + [8]))
	$11 = *(*($0) + [8])
	*($12 + [8]) = *($7 + [64])
	$7 = CALL db_idx64_store($11, (int_64)-6497942599532281851, $10, $9, ($12 + [8]))
	*((*($0 + [4]) + [108])) = $7
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $428 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
}

void .FUNC $369 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = ($2 + [976])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($2 + [960])
	$4 = CALL db_lowerbound_i64(*($3), *(($2 + [968])), (int_64)4412005227943313408, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $371($3, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $3
	$6 = *(*(CALL $372(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [976])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1280])
	*($1) = *($5)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*(*($0 + [8]) + [4]))
	CALL $478(($1 + [24]), (*(*($0 + [8]) + [4]) + [8]))
	*($1 + [36]) = *(*(*($0 + [8]) + [4]) + [20])
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $269 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $476($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7176366818724937728, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [52]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7176366818724937729, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	$4 = (*($2 + [4]) + [4])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	$4 = (*($2 + [4]) + [4])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $76(*($1), *($0 + [48]))
	CALL $76(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *($7 + [88])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$2 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6497942746098040832, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($9)
	
.LABEL $label$1
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [92]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$4 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6497942746098040831, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($9)
	
.LABEL $label$3
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [96]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6497942746098040830, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($9)
	
.LABEL $label$5
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [100]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6497942746098040829, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($9)
	
.LABEL $label$7
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [104]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-6497942746098040828, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($9)
	
.LABEL $label$9
	$9 = *($0)
	$8 = *($9 + [4])
	$0 = *(($8 + [108]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$0 = *($9)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040827, ($10 + [8]), *($8))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($0)
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $475([112])
	$6 = CALL $133($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [84])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $134(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [48]) = (int_64)0
	*(($4 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [1760])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1824])
	*($0 + [80]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [24])
	*($6 + [24]) = ($0 + [32])
	*($6 + [28]) = ($0 + [40])
	*($6 + [32]) = ($0 + [48])
	*($6 + [36]) = ($0 + [64])
	*($6 + [40]) = ($0 + [72])
	CALL $135(($6 + [8]), $6)
	$4 = *(*($2 + [8]))
	*($0 + [88]) = [-1]
	*($0 + [84]) = $4
	*(($0 + [92])) = [-1]
	*(($0 + [96])) = [-1]
	*(($0 + [100])) = [-1]
	*(($0 + [104])) = [-1]
	*(($0 + [108])) = [-1]
	*([0] + [4]) = ($6 + [48])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	*($1 + [8]) = *(*($4) + [8])
	*($1 + [16]) = *(*($4) + [16])
	*($1 + [24]) = *(*($4) + [24])
	*($1 + [32]) = *(*($4) + [32])
	*($1 + [40]) = *(*($4) + [40])
	$5 = *($4)
	*($1 + [48]) = *($5 + [48])
	*(($1 + [56])) = *(($5 + [56]))
	*($1 + [64]) = *(*($4 + [4]))
	*($1 + [72]) = *(*($4) + [72])
	*($6 + [88]) = ($6 + [76])
	*($6 + [84]) = $6
	*($6 + [80]) = $6
	*($6 + [96]) = ($6 + [80])
	*($6 + [108]) = ($1 + [8])
	*($6 + [104]) = $1
	*($6 + [112]) = ($1 + [16])
	*($6 + [116]) = ($1 + [24])
	*($6 + [120]) = ($1 + [32])
	*($6 + [124]) = ($1 + [40])
	*($6 + [128]) = ($1 + [48])
	*($6 + [132]) = ($1 + [64])
	*($6 + [136]) = ($1 + [72])
	CALL $138(($6 + [104]), ($6 + [96]))
	$3 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)-6497942599532281856, *(*($0 + [8])), $3, $6, [76])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [108]) = $1
	*($6 + [116]) = $1
	*($6 + [112]) = *(($0 + [8]))
	*($6 + [104]) = $2
	*($6 + [96]) = ($6 + [104])
	CALL $139(($6 + [96]), ($2 + [36]), ($2 + [37]), ($2 + [38]), ($2 + [39]), ($2 + [40]), ($2 + [41]))
	*([0] + [4]) = ($6 + [144])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1824])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $427($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $368 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [32])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $300 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($1)
	$3 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$1 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$1 }
	$6 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$1 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$1 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $116($5, $6)
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$5), [720])
	
.LABEL $label$3
	$2 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [976])
	CALL $301($5, $1, $2, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $429 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$8 = CALL $440(($0 + [1088]), (int_64)100, [4432])
	$10 = *(($8 + [16]))
	$12 = *($8 + [8])
	CALL eosio_assert((int_64)(((int_64)*($2) % (int_64)$12) == 0), [4080])
	CALL eosio_assert(((int_64)$10 == (int_64)*($2 + [8])), [3488])
	*($13 + [72]) = ((int_64)*($2) / (int_64)$12)
	$10 = *($1)
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$8), [720])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $10)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $116($8, $6)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$8), [720])
	
.LABEL $label$3
	$10 = *($0)
	*($13 + [40]) = ($13 + [72])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [976])
	CALL $469($8, $7, $10, ($13 + [40]))
	*(($13 + [56])) = (int_64)1398362884
	*($13 + [48]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$10 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [1824])
	*(($13 + [60])) = *(($2 + [12]))
	*(($13 + [56])) = *(($2 + [8]))
	*((($13 + [40]) + [12])) = *(($2 + [4]))
	*($13 + [40]) = *($1)
	*($13 + [48]) = *($2)
	$10 = *($13 + [72])
	*($13 + [64]) = $10
	*($13 + [68]) = ((int_64)$10 + (int_64)*($7 + [16]))
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$15 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$10 }
	*($13 + [32]) = $11
	*($13 + [24]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1040]
	$11 = (int_64)0
	
.LOOP $label$16:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$17
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$16 }
	*($13 + [16]) = $11
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [4144]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$25 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$25
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$21
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$20 }
	*($13 + [8]) = $11
	CALL $464($0, ($13 + [24]), ($13 + [16]), ($13 + [8]), ($13 + [40]))
	*([0] + [4]) = ($13 + [80])
}

int_32 .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([80])) + [64]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [28])
	*($8 + [60]) = ($6 + [32])
	*($8 + [64]) = ($6 + [40])
	*($8 + [68]) = ($6 + [48])
	*($8 + [72]) = ($6 + [56])
	CALL $214(($8 + [40]), ($8 + [32]))
	*($6 + [72]) = [-1]
	*($6 + [68]) = $1
	*($6 + [76]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $215(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $209 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	*($5 + [104]) = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1072])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1120])
	*($5 + [88]) = *($1 + [8])
	*($5 + [96]) = *($1 + [16])
	$2 = *($1)
	*($5 + [80]) = $2
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [1184])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	*($5 + [112]) = ($5 + [64])
	*($5 + [124]) = ($1 + [8])
	*($5 + [120]) = $1
	*($5 + [128]) = ($1 + [16])
	*($5 + [132]) = ($1 + [24])
	*($5 + [136]) = ($1 + [28])
	*($5 + [140]) = ($1 + [32])
	*($5 + [144]) = ($1 + [40])
	*($5 + [148]) = ($1 + [48])
	*($5 + [152]) = ($1 + [56])
	CALL $212(($5 + [120]), ($5 + [112]))
	CALL db_update_i64(*($1 + [68]), *($5 + [104]), $5, [56])
	$4 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [124]) = $1
	*($5 + [120]) = $0
	*($5 + [132]) = $1
	*($5 + [128]) = ($5 + [88])
	*($5 + [136]) = ($5 + [80])
	*($5 + [140]) = ($5 + [104])
	*($5 + [112]) = ($5 + [120])
	CALL $213(($5 + [112]), $4, ($4 + [1]))
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$7
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [40])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $203(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]), ($0 + [41]), ($0 + [42]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *($8 + [88])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$2 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903040, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($10)
	
.LABEL $label$1
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *(($8 + [92]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$4 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903041, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($10)
	
.LABEL $label$3
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *(($8 + [96]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$6 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903042, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($10)
	
.LABEL $label$5
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *(($8 + [100]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$8 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903043, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($10)
	
.LABEL $label$7
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *(($8 + [104]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$10 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903044, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($10)
	
.LABEL $label$9
	$9 = *($0)
	$8 = *($9 + [4])
	$10 = *(($8 + [108]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$12 }
	$10 = *($9)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)4732891782226903045, ($11 + [8]), *($8))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($10)
	
.LABEL $label$11
	$10 = *($0)
	$9 = *($10 + [4])
	$0 = *(($9 + [112]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$14 }
	$0 = *($10)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732891782226903046, ($11 + [8]), *($9))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($0)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[80])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[53687092]) ){ goto $label$2 }
	$5 = [53687091]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[80])
	if ( ((uint_32)$6 > (uint_32)[26843544]) ){ goto $label$4 }
	$6 = ($6 << [1])
	$5 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $475(((int_32)$5 * (int_32)[80]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($6 = ($4 + ((int_32)$2 * (int_32)[80])))) = *($1)
	*(($6 + [24])) = *(($1 + [24]))
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $492(($6 + [32]), ($1 + [32]))
	CALL memcpy(($6 + [44]), ($1 + [44]), [36])
	$2 = ($4 + ((int_32)$5 * (int_32)[80]))
	$3 = ($6 + [80])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	$4 = ([0] - $1)
	$1 = ($5 + [-40])
	
.LOOP $label$7:
	*(($6 + [-56])) = *(($1 + [-16]))
	*(($6 + [-64])) = *(($1 + [-24]))
	*(($6 + [-72])) = *(($1 + [-32]))
	*(($6 + [-80])) = *(($1 + [-40]))
	*(($6 + [-40])) = *($1)
	$5 = ($1 + [-8])
	*(($6 + [-48])) = *($5)
	*($5) = [0]
	*(($1 + [-4])) = [0]
	*($1) = [0]
	CALL memcpy(($6 + [-36]), ($1 + [4]), [36])
	$6 = ($6 + [-80])
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $4) != (int_32)[-40]) ){ goto $label$7 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$8 }
	$6 = ([0] - $5)
	$1 = ($1 + [-48])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-48]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $476($5)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = *($1)
	$3 = *(($0 + [160]))
	$7 = *(($0 + [164]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [136])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)4732891782226903040, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $79($6, $7)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$6), [720])
	
.LABEL $label$3
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [784])
	CALL eosio_assert($7, [1472])
	CALL eosio_assert($7, [1520])
	$7 = CALL db_next_i64(*($5 + [84]), $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $79($6, $7)
	
.LABEL $label$5
	CALL $202($6, $5)
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$6 = CALL strlen([2160])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($8) = ($6 << [1])
	$7 = ($8 | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($6 + [16]) & [-16])
	$7 = CALL $475($4)
	*($8) = ($4 | [1])
	*($8 + [8]) = $7
	*($8 + [4]) = $6
	
.LABEL $label$8
	CALL memcpy($7, [2160], $6)
	
.LABEL $label$7
	*(($7 + $6)) = [0]
	CALL $181($0, $1, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*($8 + [8]))
	
.LABEL $label$10
	CALL $182($0, ($5 + [24]))
	CALL $144($0, $1)
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$6
	CALL $477($8)
}

int_32 .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[80]))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$8 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($9 + [16]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($8), ($9 + [16]), [1])
	$6 = (*($8) + [1])
	*($8) = $6
	if ( $3 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [28])
	$3 = ($9 + [36])
	$4 = ($9 + [44])
	$1 = ($9 + [52])
	$5 = ($9 + [56])
	
.LOOP $label$3:
	*($9 + [8]) = $0
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [16])
	*($2) = ($8 + [18])
	*((($9 + [16]) + [16])) = ($8 + [24])
	*($3) = ($8 + [32])
	*((($9 + [16]) + [24])) = ($8 + [44])
	*($9 + [20]) = ($8 + [8])
	*($4) = ($8 + [48])
	*((($9 + [16]) + [32])) = ($8 + [56])
	*($1) = ($8 + [64])
	*($5) = ($8 + [68])
	*((($9 + [16]) + [44])) = ($8 + [72])
	CALL $102(($9 + [16]), ($9 + [8]))
	$8 = ($8 + [80])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [64])
	return $0
}

void .FUNC $207 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$4 = *($1)
	$10 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $10)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [112]) == (int_32)$3), [720])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $116($3, $8)
	CALL eosio_assert(((int_32)*($10 + [112]) == (int_32)$3), [720])
	
.LABEL $label$3
	$7 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($7, [1728])
	$4 = *($2)
	$2 = *(($0 + [328]))
	$9 = *(($0 + [332]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$8 = ($9 + [-24])
	$5 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$5 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [304])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [720])
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $208($6, $9)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [720])
	
.LABEL $label$7
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [784])
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)*($1)), [864])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)[1]), [1888])
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($8 + [40])) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($10 + [44]) != (int_32)[0]), [2432])
	$4 = *($0)
	CALL eosio_assert($9, [976])
	CALL $209($6, $8, $4, ($11 + [8]))
	$4 = *($0)
	CALL eosio_assert($7, [976])
	CALL $210($3, $10, $4, $11)
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$11 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $11) / (int_32)[40])
	$10 = ($5 + [1])
	if ( ((uint_32)$10 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$11 = ((int_32)(*($0 + [8]) - $11) / (int_32)[40])
	if ( ((uint_32)$11 > (uint_32)[53687090]) ){ goto $label$4 }
	$11 = ($11 << [1])
	$8 = ( $10 ? $11 : ($11 <= $10) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = CALL $475(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$10 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($11 = ($10 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($11 + [8]) = *($3)
	*($11 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($5 = ($11 + [24]))) = [0]
	$2 = CALL $475([16])
	*($11 + [16]) = $2
	$9 = ($2 + [16])
	*($5) = $9
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($11 + [20])) = $9
	*($11 + [28]) = [0]
	*(($2 = ($11 + [32]))) = [0]
	*(($11 + [36])) = [0]
	*($12 + [24]) = [0]
	*($12 + [8]) = ($12 + [24])
	*($12 + [32]) = $4
	$1 = ($4 + [8])
	*($12 + [36]) = $1
	$5 = ($4 + [16])
	*($12 + [40]) = $5
	$9 = ($4 + [96])
	*($12 + [44]) = $9
	$8 = ((int_32)$8 * (int_32)[40])
	CALL $205(($12 + [32]), ($12 + [8]))
	$7 = *($12 + [24])
	if ( ($7 == 0) ){ goto $label$6 }
	$6 = ($11 + [28])
	CALL $70($6, $7)
	$3 = *($2)
	$2 = *($6)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$10 = ($10 + $8)
	*($12 + [12]) = $2
	*($12 + [8]) = $2
	*($12 + [16]) = $3
	CALL eosio_assert(((int_32)($3 - $2) > (int_32)[7]), [704])
	CALL memcpy(*($12 + [12]), $4, [8])
	$2 = (*($12 + [12]) + [8])
	*($12 + [12]) = $2
	CALL eosio_assert(((int_32)(*($12 + [16]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($12 + [12]), $1, [8])
	*($12 + [12]) = (*($12 + [12]) + [8])
	*($12 + [24]) = ($12 + [8])
	*($12 + [36]) = ($4 + [24])
	*($12 + [32]) = $5
	*($12 + [40]) = ($4 + [32])
	*($12 + [44]) = ($4 + [34])
	*($12 + [48]) = ($4 + [40])
	*($12 + [52]) = ($4 + [48])
	*($12 + [56]) = ($4 + [60])
	*($12 + [60]) = ($4 + [64])
	*($12 + [64]) = ($4 + [72])
	*($12 + [68]) = ($4 + [80])
	*($12 + [72]) = ($4 + [84])
	*($12 + [76]) = ($4 + [88])
	CALL $102(($12 + [32]), ($12 + [24]))
	CALL $206(($12 + [8]), $9)
	$5 = ($11 + [40])
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$9:
	*(($11 + [-32])) = *(($4 + [-12]))
	*(($11 + [-40])) = *(($4 + [-20]))
	*(($2 = ($11 + [-24]))) = (int_64)0
	*(($1 = ($11 + [-16]))) = [0]
	$3 = ($4 + [-4])
	*($2) = *($3)
	*(($11 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($11 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($1 = ($11 + [-4]))) = [0]
	$3 = ($4 + [8])
	*($2) = *($3)
	*(($11 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($3) = (int_64)0
	$11 = ($11 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $8) != (int_32)[-20]) ){ goto $label$9 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$1 = $4
	
.LABEL $label$7
	*($0) = $11
	*(($0 + [4])) = $5
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$10 }
	$2 = ([0] - $1)
	$11 = ($4 + [-24])
	
.LOOP $label$11:
	$4 = *(($11 + [12]))
	if ( ($4 == 0) ){ goto $label$12 }
	*(($11 + [16])) = $4
	CALL $476($4)
	
.LABEL $label$12
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$13 }
	*(($11 + [4])) = $4
	CALL $476($4)
	
.LABEL $label$13
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $2) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $476($1)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [80])
	(unreachable)
}

void .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*(($8 = *($1))) = (*($8) + [8])
	*(($8 = *($1))) = (*($8) + [8])
	$8 = *($0 + [8])
	*($9 + [8]) = *($1)
	*($9 + [20]) = ($8 + [8])
	*($9 + [16]) = $8
	*($9 + [24]) = ($8 + [16])
	*($9 + [28]) = ($8 + [18])
	*($9 + [32]) = ($8 + [24])
	*($9 + [36]) = ($8 + [32])
	*($9 + [40]) = ($8 + [44])
	*($9 + [44]) = ($8 + [48])
	*($9 + [48]) = ($8 + [56])
	*($9 + [52]) = ($8 + [64])
	*($9 + [56]) = ($8 + [68])
	*($9 + [60]) = ($8 + [72])
	CALL $101(($9 + [16]), ($9 + [8]))
	$8 = *($8)
	$8 = *($0 + [12])
	$0 = *($8 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($0 - $8) / (int_32)[80]))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$2 }
	$1 = ($9 + [28])
	$3 = ($9 + [36])
	$4 = ($9 + [44])
	$5 = ($9 + [52])
	$6 = ($9 + [56])
	
.LOOP $label$3:
	*($9 + [8]) = $2
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [16])
	*($1) = ($8 + [18])
	*((($9 + [16]) + [16])) = ($8 + [24])
	*($3) = ($8 + [32])
	*((($9 + [16]) + [24])) = ($8 + [44])
	*($9 + [20]) = ($8 + [8])
	*($4) = ($8 + [48])
	*((($9 + [16]) + [32])) = ($8 + [56])
	*($5) = ($8 + [64])
	*($6) = ($8 + [68])
	*((($9 + [16]) + [44])) = ($8 + [72])
	CALL $101(($9 + [16]), ($9 + [8]))
	$8 = ($8 + [80])
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$13 = $1
	$9 = ($9 & [1])
	$9 = *($0)
	if ( (( *($0 + [4]) ? uint_32($9 >> [1]) : $9 ) == 0) ){ goto $label$1 }
	$3 = ($0 + [1])
	$5 = ($0 + [8])
	$9 = ( *($5) ? $3 : $9 )
	$8 = ($2 + [-1])
	$13 = $1
	
.LOOP $label$2:
	$2 = *($9)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$4 }
	$2 = ($2 + [208])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($2 + [169])
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$2 = ($2 + [201])
	goto $label$3 
	
.LABEL $label$6
	$2 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$3
	$10 = ($2 << [4])
	*($13) = $10
	$7 = ($0 + [4])
	$11 = *($7)
	$2 = *($0)
	$6 = ($2 & [1])
	$12 = *($5)
	$4 = ($9 + [1])
	if ( ((int_32)$4 == (int_32)(( $12 ? $3 : $6 ) + ( $11 ? uint_32($2 >> [1]) : $6 ))) ){ goto $label$10 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$2 = ($2 + [208])
	goto $label$8 
	
.LABEL $label$10
	$9 = $4
	$13 = ($13 + [1])
	if ( $8 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$11 }
	$2 = ($2 + [169])
	goto $label$8 
	
.LABEL $label$11
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$12 }
	$2 = ($2 + [201])
	goto $label$8 
	
.LABEL $label$12
	$2 = [0]
	CALL eosio_assert([0], [16])
	$10 = *($13)
	
.LABEL $label$8
	*($13) = ($10 | $2)
	$9 = ($9 + [2])
	$11 = *($7)
	$12 = *($5)
	$2 = *($0)
	$13 = ($13 + [1])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = ($8 + [-1])
	$4 = ($2 & [1])
	if ( ((int_32)$9 != (int_32)(( $12 ? $3 : $4 ) + ( $11 ? uint_32(($2 & [254]) >> [1]) : $4 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($13 - $1)
}

void .FUNC _Z6to_hexPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $483($0, *((uint_32($3 >> [4]) + [48])))
	CALL $483($0, *((($3 & [15]) + [48])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $475($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $482($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $477($0)
}

int_32 .FUNC _Z8from_hexc (int_32 $0)
{
	if ( ((uint_32)(($0 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$2 }
	$0 = ($0 + [208])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$3 }
	$0 = ($0 + [169])
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$0 = ($0 + [201])
	goto $label$1 
	
.LABEL $label$4
	$0 = [0]
	CALL eosio_assert([0], [16])
	
.LABEL $label$1
	return ($0 & [255])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $480($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _Z13str_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	$1 = ( *($1 + [8]) ? ($1 + [1]) : (*($1) & [1]) )
	CALL sha256($1, CALL $534($1), $0)
}

void .FUNC _Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[64]), [80])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [32])
}

void .FUNC _Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[40]), [96])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [20])
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $475($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [112]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [112])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $475($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $476($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $18($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $19($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $476($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([368], [384], [149], [400])
	return (unreachable)
}

void .FUNC _Z13sha256_to_hexRK11checksum256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $483($0, *((uint_32($2 >> [4]) + [48])))
	CALL $483($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
}

void .FUNC _Z11sha1_to_hexRK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $483($0, *((uint_32($2 >> [4]) + [48])))
	CALL $483($0, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
}

int_64 .FUNC _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = ($2 & [1])
	$5 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$1 = ($3 + [-4])
	$0 = $5
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($6 + [12]), $0, [4])
	$4 = ((int_32)*($6 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($1 & [-4])
	$5 = (($5 + $0) + [4])
	$3 = ($1 - $0)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($5 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($5 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)*($5) ^ (int_32)$2) * (int_32)[1540483477])
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

int_64 .FUNC _Z11uint64_hashRK11checksum256 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($0 + $3))
	CALL $483($4, *((uint_32($2 >> [4]) + [48])))
	CALL $483($4, *((($2 & [15]) + [48])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$1 = CALL _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*(($4 + [8])))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC _ZN4sghk6battleERKyS1_S1_S1_S1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [1104])
	*([0] + [4]) = $18
	$16 = (int_64)0
	$17 = (int_64)59
	$12 = [624]
	$13 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$13 = ((int_64)$15 | (int_64)$13)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($13)
	$16 = *($1)
	$9 = *(($0 + [624]))
	$14 = *(($0 + [628]))
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$5 }
	$12 = ($14 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_64)*(*($12)) == (int_64)$16) ){ goto $label$5 }
	$14 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $10) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($0 + [600])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$8 }
	$12 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [192]) == (int_32)$8), [720])
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	$14 = CALL db_find_i64(*(($0 + [600])), *(($0 + [608])), (int_64)4157834741199929344, $16)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $334($8, $14)
	CALL eosio_assert(((int_32)*($12 + [192]) == (int_32)$8), [720])
	
.LABEL $label$7
	CALL eosio_assert(($12 == 0), [3248])
	CALL $78($0, $2)
	CALL $78($0, $3)
	$12 = [0]
	$16 = ((int_64)*($5) + (int_64)-2)
	if ( ((uint_64)$16 > (uint_64)(int_64)4) ){ goto $label$9 }
	$12 = (((int_32)(CASTING uint_32)(uint_64 $16) ^ (int_32)[-1]) & [1])
	
.LABEL $label$9
	CALL eosio_assert($12, [3280])
	CALL $222($0, $6, $7)
	$14 = *($4)
	$16 = *($5)
	$17 = *($1)
	$15 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($5)
	if ( ((int_64)$13 != (int_64)2) ){ goto $label$11 }
	*($18 + [864]) = [0]
	*($18 + [856]) = *($2)
	*($18 + [784]) = [0]
	*($18 + [776]) = *($3)
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)*($4) != (int_64)1) ){ goto $label$12 }
	*($18 + [864]) = [0]
	*($18 + [856]) = *($2)
	*($18 + [784]) = [0]
	*($18 + [776]) = *($3)
	if ( ((int_64)$13 != (int_64)6) ){ goto $label$10 }
	CALL $335($0, $2, $3, $4)
	goto $label$10 
	
.LABEL $label$12
	*($18 + [32]) = (int_64)0
	CALL $80($0, $2, ($18 + [32]), [3])
	*($18 + [32]) = (int_64)0
	CALL $80($0, $3, ($18 + [32]), [3])
	CALL $226(($18 + [408]), ($18 + [704]), $6, [2])
	*($18 + [520]) = [500]
	CALL $336(($18 + [32]), $0, $2, $5, ($18 + [520]), *($18 + [408]))
	CALL memcpy((($18 + [856]) + [16]), ($18 + [32]), [64])
	CALL $337($0, $2, ($18 + [856]), $5)
	CALL $338($0, $3, ($18 + [776]), $5)
	if ( ((int_64)*($5) != (int_64)6) ){ goto $label$13 }
	*($18 + [1016]) = (int_64)5
	*($18 + [936]) = [500]
	CALL $336(($18 + [520]), $0, $3, ($18 + [1016]), ($18 + [936]), (*($18 + [408]) + [32]))
	CALL memcpy((($18 + [776]) + [16]), ($18 + [520]), [64])
	CALL $335($0, $2, $3, $4)
	
.LABEL $label$13
	$12 = *($18 + [408])
	if ( ($12 == 0) ){ goto $label$10 }
	*($18 + [412]) = $12
	CALL $476($12)
	
.LABEL $label$10
	CALL $339($0)
	CALL memcpy(($18 + [1020]), ($18 + [856]), [80])
	CALL memcpy(($18 + [936]), ($18 + [776]), [80])
	$11 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [600])) == (int_64)CALL $fimport$14()), [640])
	*(($12 = CALL $475([208])) + [192]) = $8
	*($12 + [8]) = $16
	*($12) = $17
	*($12 + [16]) = $14
	CALL memcpy(($12 + [20]), ($18 + [1016]), [84])
	$8 = CALL memcpy(($12 + [104]), ($18 + [936]), [80])
	*($12 + [184]) = $15
	*($18 + [416]) = (($18 + [32]) + [160])
	*($18 + [412]) = ($18 + [32])
	*($18 + [408]) = ($18 + [32])
	*($18 + [704]) = ($18 + [408])
	*($18 + [524]) = ($12 + [8])
	*($18 + [520]) = $12
	*($18 + [528]) = ($12 + [16])
	*($18 + [532]) = ($12 + [24])
	*($18 + [536]) = $8
	*($18 + [540]) = ($12 + [184])
	CALL $340(($18 + [520]), ($18 + [704]))
	$13 = *($12)
	$10 = CALL db_store_i64(*(($0 + [608])), (int_64)4157834741199929344, $11, $13, ($18 + [32]), [160])
	*($12 + [196]) = $10
	$8 = ($0 + [616])
	if ( (uint_64)($13 <= *($8)) ){ goto $label$14 }
	*($8) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($18 + [520]) = $12
	$13 = *($12)
	*($18 + [32]) = $13
	*($18 + [408]) = $10
	$1 = ($0 + [628])
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [632]))) ){ goto $label$16 }
	*($8 + [8]) = $13
	*($8 + [16]) = $10
	*($18 + [520]) = [0]
	*($8) = $12
	*($1) = ($8 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $341(($0 + [624]), ($18 + [520]), ($18 + [32]), ($18 + [408]))
	
.LABEL $label$15
	$12 = *($18 + [520])
	*($18 + [520]) = [0]
	if ( ($12 == 0) ){ goto $label$17 }
	CALL $476($12)
	
.LABEL $label$17
	*($18 + [32]) = [1]
	CALL $342(($18 + [704]), $0, $2, ($18 + [32]), $5)
	*($18 + [32]) = [0]
	CALL $342(($18 + [632]), $0, $3, ($18 + [32]), $5)
	CALL $343(($18 + [520]), $0, $2)
	CALL $343(($18 + [408]), $0, $3)
	*($18 + [40]) = $16
	*($18 + [32]) = $17
	*($18 + [48]) = $14
	CALL memcpy(($18 + [52]), ($18 + [1016]), [84])
	CALL memcpy(($18 + [136]), ($18 + [936]), [80])
	*($18 + [216]) = $15
	CALL memcpy(($18 + [224]), ($18 + [704]), [72])
	CALL memcpy(($18 + [296]), ($18 + [632]), [72])
	*($18 + [368]) = *($18 + [528])
	*($18 + [376]) = *($18 + [568])
	*($18 + [384]) = *($18 + [416])
	*($18 + [392]) = *($18 + [456])
	$11 = *($0)
	$16 = (int_64)0
	$15 = (int_64)59
	$12 = [1024]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$23 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [165])
	goto $label$21 
	
.LABEL $label$23
	$17 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$19
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$13 = ((int_64)$17 | (int_64)$13)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$18 }
	*($18 + [24]) = $13
	*($18 + [16]) = $11
	$16 = (int_64)0
	$17 = (int_64)59
	$12 = [1040]
	$13 = (int_64)0
	
.LOOP $label$24:
	$15 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$25 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$8 = ($8 + [165])
	goto $label$26 
	
.LABEL $label$27
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$25
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$13 = ((int_64)$15 | (int_64)$13)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$24 }
	*($18 + [8]) = $13
	$16 = (int_64)0
	$15 = (int_64)59
	$12 = [3312]
	$13 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$33 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$8 = ($8 + [165])
	goto $label$31 
	
.LABEL $label$33
	$17 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$29
	$12 = ($12 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$13 = ((int_64)$17 | (int_64)$13)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$28 }
	*($18) = $13
	CALL $344($0, ($18 + [16]), ($18 + [8]), $18, ($18 + [32]))
	if ( ((*($18 + [500]) & [1]) == 0) ){ goto $label$34 }
	CALL $476(*(($18 + [508])))
	
.LABEL $label$34
	if ( ((*($18 + [488]) & [1]) == 0) ){ goto $label$35 }
	CALL $476(*(($18 + [496])))
	
.LABEL $label$35
	if ( ((*($18 + [612]) & [1]) == 0) ){ goto $label$36 }
	CALL $476(*(($18 + [620])))
	
.LABEL $label$36
	if ( ((*($18 + [600]) & [1]) == 0) ){ goto $label$37 }
	CALL $476(*(($18 + [608])))
	
.LABEL $label$37
	*([0] + [4]) = ($18 + [1104])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $476($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $475($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $491($0)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $338 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$4 = *($1)
	$5 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$7), [720])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $116($7, $9)
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$7), [720])
	
.LABEL $label$3
	$4 = *($0)
	*($10 + [12]) = $0
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [976])
	CALL $358($7, $8, $4, ($10 + [8]))
	*($2 + [8]) = [65535]
	*($2) = *($1)
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $339 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$1 = ($0 + [600])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [600]), *(($0 + [608])), (int_64)4157834741199929344, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $334($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = (CASTING uint_64)(uint_32 $1)
	if ( (uint_64)((int_64))(*(*(CALL $356(($5 + [8])) + [4])) - *($4)) <= (int_64)20) ){ goto $label$2 }
	$0 = CALL db_lowerbound_i64(*(($0 + [600])), *(($0 + [608])), (int_64)4157834741199929344, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $334($1, $0)
	$3 = [1]
	
.LOOP $label$3:
	$4 = [0]
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1472])
	CALL eosio_assert($2, [1520])
	$2 = CALL db_next_i64(*($0 + [196]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $334($1, $2)
	
.LABEL $label$4
	CALL $357($1, $0)
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($3 <= [5])
	$3 = ($3 + [1])
	$0 = $4
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $336 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	*($8 + [152]) = [0]
	$3 = CALL $362(($8 + [152]), $3, $5)
	*($8 + [144]) = ($1 + [264])
	*($8 + [24]) = (CASTING uint_64)(uint_32 $3)
	CALL $363(($8 + [136]), ($8 + [144]), ($8 + [24]))
	CALL $216(($8 + [24]), $1, $2)
	if ( (*(($8 + [52])) == 0) ){ goto $label$4 }
	$3 = *($8 + [140])
	$6 = CALL current_time()
	*($8 + [8]) = [103]
	*($0) = CALL $154($1, $3, ($8 + [8]), ($3 + [8]), *($4))
	*($0 + [24]) = [1]
	*($0 + [8]) = *($3)
	*($0 + [16]) = *($2)
	$7 = *($3 + [24])
	*($0 + [28]) = *($3 + [20])
	*($0 + [32]) = [1]
	*($0 + [40]) = ((int_64)$7 + (int_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*($0 + [48]) = *($4)
	*($0 + [56]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($1)
	*($8) = $0
	CALL $364(($8 + [8]), ($1 + [304]), $6, $8)
	$6 = *($2)
	$5 = *(($1 + [40]))
	$2 = *(($1 + [44]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$5 }
	$0 = ($2 + [-24])
	$4 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($0)) == (int_64)$6) ){ goto $label$5 }
	$2 = $0
	$3 = ($0 + [-24])
	$0 = $3
	if ( ((int_32)($3 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($1 + [16])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$3 }
	$0 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [112]) == (int_32)$3), [720])
	goto $label$2 
	
.LABEL $label$4
	$6 = *($1)
	*($8 + [12]) = $2
	*($8 + [8]) = $1
	*($8 + [16]) = ($8 + [136])
	CALL $366($8, ($1 + [960]), $6, ($8 + [8]))
	CALL memset($0, [0], [64])
	goto $label$1 
	
.LABEL $label$3
	$0 = [0]
	$2 = CALL db_find_i64(*(($1 + [16])), *(($1 + [24])), (int_64)-3020384829779738624, $6)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $116($3, $2)
	CALL eosio_assert(((int_32)*($0 + [112]) == (int_32)$3), [720])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*(($0 + [28])) != (int_32)[0]), [3392])
	$6 = *($1)
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [976])
	CALL $365($3, $0, $6, ($8 + [8]))
	
.LABEL $label$1
	if ( ((*($8 + [116]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($8 + [124])))
	
.LABEL $label$7
	if ( ((*($8 + [104]) & [1]) == 0) ){ goto $label$8 }
	CALL $476(*(($8 + [112])))
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [160])
}

void .FUNC $337 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$4 = *($1)
	$5 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$7), [720])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $116($7, $9)
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$7), [720])
	
.LABEL $label$3
	$4 = *($0)
	*($10 + [12]) = $3
	*($10 + [8]) = $0
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [976])
	CALL $360($7, $8, $4, ($10 + [8]))
	*($2 + [8]) = [2]
	*($2) = *($1)
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $334 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([208])) + [192]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [104])
	*($8 + [60]) = ($6 + [184])
	CALL $385(($8 + [40]), ($8 + [32]))
	*($6 + [196]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [196])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $341(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $335 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$5 = *($1)
	$11 = *(($0 + [1024]))
	$10 = *(($0 + [1028]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$6 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$5) ){ goto $label$1 }
	$10 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [1000])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$4), [720])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$9 = CALL db_find_i64(*(($0 + [1000])), *(($0 + [1008])), (int_64)4157834734666924032, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $325($4, $9)
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$4), [720])
	
.LABEL $label$3
	$8 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($8, [3088])
	$5 = *($2)
	$2 = *(($0 + [1024]))
	$10 = *(($0 + [1028]))
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$5 }
	$9 = ($10 + [-24])
	$6 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$5) ){ goto $label$5 }
	$10 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$8 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$4), [720])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$7 = CALL db_find_i64(*(($0 + [1000])), *(($0 + [1008])), (int_64)4157834734666924032, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $325($4, $7)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$4), [720])
	
.LABEL $label$7
	$6 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($6, [3088])
	CALL eosio_assert(((int_64)*(($11 + [16])) == (int_64)*(($9 + [16]))), [3488])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*($9 + [8])), [3088])
	$10 = ($11 + [8])
	if ( ((int_64)*($3) != (int_64)1) ){ goto $label$18 }
	*((($12 + [16]) + [8])) = [0]
	*($12 + [16]) = (int_64)0
	$7 = CALL strlen([3552])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$17 }
	*($12 + [16]) = ($7 << [1])
	$2 = (($12 + [16]) | [1])
	if ( $7 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	if ( ((int_64)*($11 + [8]) < (int_64)1) ){ goto $label$11 }
	*(($12 + [40])) = [0]
	*($12 + [32]) = (int_64)0
	$7 = CALL strlen([3600])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($12 + [32]) = ($7 << [1])
	$2 = (($12 + [32]) | [1])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$17
	$1 = (($7 + [16]) & [-16])
	$2 = CALL $475($1)
	*($12 + [16]) = ($1 | [1])
	*($12 + [24]) = $2
	*($12 + [20]) = $7
	
.LABEL $label$16
	CALL memcpy($2, [3552], $7)
	
.LABEL $label$15
	$1 = ($9 + [8])
	*(($2 + $7)) = [0]
	CALL $492(($12 + [64]), ($12 + [16]))
	CALL $326($0, $11, $10, ($12 + [64]))
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$19 }
	CALL $476(*($12 + [72]))
	
.LABEL $label$19
	CALL $492(($12 + [48]), ($12 + [16]))
	CALL $326($0, $9, $1, ($12 + [48]))
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$20 }
	CALL $476(*($12 + [56]))
	
.LABEL $label$20
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*($12 + [24]))
	goto $label$11 
	
.LABEL $label$14
	$3 = (($7 + [16]) & [-16])
	$2 = CALL $475($3)
	*($12 + [32]) = ($3 | [1])
	*($12 + [40]) = $2
	*($12 + [36]) = $7
	
.LABEL $label$13
	CALL memcpy($2, [3600], $7)
	
.LABEL $label$12
	*(($2 + $7)) = [0]
	$5 = *(($10 + [8]))
	*((($12 + [16]) + [8])) = $5
	*($12 + [16]) = *($10)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($9 + [16]))), [3664])
	$5 = ((int_64)*($12 + [16]) + (int_64)*(($9 + [8])))
	*($12 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [3712])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [3744])
	CALL $492($12, ($12 + [32]))
	CALL $326($0, $1, ($12 + [16]), $12)
	if ( ((*($12) & [1]) == 0) ){ goto $label$21 }
	CALL $476(*($12 + [8]))
	
.LABEL $label$21
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*($12 + [40]))
	
.LABEL $label$11
	$5 = *($0)
	*($12 + [16]) = $0
	CALL eosio_assert($8, [976])
	CALL $383($4, $11, $5, ($12 + [16]))
	$5 = *($0)
	*($12 + [16]) = $0
	CALL eosio_assert($6, [976])
	CALL $384($4, $9, $5, ($12 + [16]))
	*([0] + [4]) = ($12 + [80])
	return (unreachable)
	
.LABEL $label$10
	CALL $477(($12 + [16]))
	
.LABEL $label$9
	CALL $477(($12 + [32]))
	(unreachable)
}

void .FUNC $332 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $68(*($1), ($3 + [40]))
	CALL $68(*($1), ($3 + [52]))
}

void .FUNC $333 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	$2 = *($1 + [32])
	$3 = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	CALL $492(($8 + [24]), ($1 + [40]))
	CALL $492(($8 + [8]), ($1 + [52]))
	*($8 + [72]) = $6
	*($8 + [64]) = $5
	*($8 + [56]) = $4
	*($8 + [48]) = $3
	*($8 + [40]) = $2
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*(*($0)) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($8 + [72])), (int_32 ($8 + [64])), (int_32 ($8 + [56])), (int_32 ($8 + [48])), (int_32 ($8 + [40])), (int_32 ($8 + [24])), (int_32 ($8 + [8])), (int_32 $1))
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $476(*($8 + [16]))
	
.LABEL $label$2
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$3 }
	CALL $476(*($8 + [32]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $330 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $331 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $475([128])
	$6 = CALL $117($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [116])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $118(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [100])))
	
.LABEL $label$10
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($4 + [88])))
	
.LABEL $label$11
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [64]) = (int_64)0
	*(($4 = ($0 + [72]))) = (int_64)1398362884
	CALL eosio_assert([1], [1760])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1824])
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*($0 + [112]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [12])
	*($6 + [28]) = ($0 + [16])
	*($6 + [32]) = ($0 + [24])
	*($6 + [36]) = ($0 + [32])
	*($6 + [40]) = ($0 + [36])
	*($6 + [44]) = ($0 + [40])
	*($6 + [48]) = ($0 + [44])
	*($6 + [52]) = ($0 + [48])
	*($6 + [56]) = ($0 + [56])
	*($6 + [60]) = ($0 + [64])
	*($6 + [64]) = ($0 + [80])
	*($6 + [68]) = ($0 + [92])
	*($6 + [72]) = ($0 + [104])
	CALL $119(($6 + [16]), ($6 + [8]))
	$4 = *(*($2 + [8]))
	*($0 + [120]) = [-1]
	*($0 + [116]) = $4
	*(($0 + [124])) = [-1]
	*([0] + [4]) = ($6 + [80])
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [592])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [40])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$7
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($4 + [32])))
	
.LABEL $label$10
	CALL $476($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	$8 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	$3 = ($1 + [24])
	CALL $478($3, ($5 + [24]))
	*(($1 + [44])) = *(($5 + [44]))
	*($1 + [36 align=4]) = *($5 + [36 align=4])
	$5 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [36])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [36])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	*($8 + [16]) = $8
	*($8 + [28]) = ($1 + [8])
	*($8 + [24]) = $1
	*($8 + [32]) = ($1 + [16])
	*($8 + [36]) = $3
	*($8 + [40]) = $4
	*($8 + [44]) = ($1 + [40])
	CALL $109(($8 + [24]), ($8 + [16]))
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-6529297656626282496, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [32])))
	
.LABEL $label$11
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $448 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $449 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$2 = ($0 + [1088])
	$0 = CALL $440($2, (int_64)301, [4432])
	$3 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*($1 + [8])), [3488])
	$5 = (int_64)1
	if ( ((int_64)$3 == (int_64)*($1)) ){ goto $label$1 }
	$0 = CALL $440($2, (int_64)302, [4432])
	$3 = *($0 + [8])
	$0 = ($1 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*($0)), [3488])
	$5 = (int_64)2
	if ( ((int_64)$3 == (int_64)*($1)) ){ goto $label$1 }
	$4 = CALL $440($2, (int_64)303, [4432])
	$3 = *($4 + [8])
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)*($0)), [3488])
	$5 = (int_64)3
	if ( ((int_64)$3 == (int_64)*($1)) ){ goto $label$1 }
	$0 = CALL $440($2, (int_64)304, [4432])
	$3 = *($0 + [8])
	$0 = ($1 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*($0)), [3488])
	$5 = (int_64)4
	if ( ((int_64)$3 == (int_64)*($1)) ){ goto $label$1 }
	$2 = CALL $440($2, (int_64)305, [4432])
	$5 = *($2 + [8])
	CALL eosio_assert(((int_64)*(($2 + [16])) == (int_64)*($0)), [3488])
	$5 = ( (int_64)5 ? (int_64)0 : ((int_64)$5 == (int_64)*($1)) )
	
.LABEL $label$1
	return $5
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [92]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*(($1 + [100])))
	
.LABEL $label$11
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($1 + [88])))
	
.LABEL $label$12
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $476($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	$4 = (*($2 + [4]) + [4])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[3]), [592])
	CALL memcpy(($3 + [4]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	$4 = (*($2 + [4]) + [4])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[3]), [592])
	CALL memcpy(($3 + [4]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $68(*($1), *($0 + [48]))
	CALL $68(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $299 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1552])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1600])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1664])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $476($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $476($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$7 = *(($1 + [72]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4411838784962822144, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	$7 = *(($1 + [76]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4411838784962822145, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [16])
	*($4 + [20]) = ($3 + [24])
	*($4 + [24]) = ($3 + [28])
	*($4 + [28]) = ($3 + [32])
	*($4 + [32]) = ($3 + [40])
	*($4 + [36]) = ($3 + [48])
	*($4 + [40]) = ($3 + [56])
	CALL $212(($4 + [8]), $4)
	$3 = *($0 + [16])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [8])
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + [88])
	CALL $239(($4 + [8]), $4)
	CALL $76(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($4 + [48])
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [17041])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [17041])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [17041]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [17041]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [17312]))
	$10 = *(($13 + [17041]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [17041]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [17041]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [17041]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [17041])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [17041])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC $295 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $296(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $294 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = *($1)
	$3 = *(($0 + [328]))
	$7 = *(($0 + [332]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [304])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [720])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)4411838784962822144, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $208($5, $7)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [720])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [784])
	CALL eosio_assert($7, [1472])
	CALL eosio_assert($7, [1520])
	$7 = CALL db_next_i64(*($6 + [68]), $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $208($5, $7)
	
.LABEL $label$5
	CALL $299($5, $6)
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	$6 = CALL strlen([2976])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($8) = ($6 << [1])
	$5 = ($8 | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (($6 + [16]) & [-16])
	$5 = CALL $475($7)
	*($8) = ($7 | [1])
	*($8 + [8]) = $5
	*($8 + [4]) = $6
	
.LABEL $label$8
	CALL memcpy($5, [2976], $6)
	
.LABEL $label$7
	*(($5 + $6)) = [0]
	CALL $181($0, $1, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*($8 + [8]))
	
.LABEL $label$10
	CALL $300($0, ($1 + [16]))
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$6
	CALL $477($8)
}

void .FUNC $297 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($7 + [56]) = [80]
	*($7 + [8]) = ($7 + [56])
	*($7 + [28]) = ($1 + [96])
	$2 = ($1 + [88])
	*($7 + [24]) = $2
	*($7 + [32]) = ($1 + [176])
	CALL $237(($7 + [24]), ($7 + [8]))
	$4 = *($1 + [200])
	$6 = ( *(($1 + [204])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = (([-8] - $6) - *($7 + [56]))
	$5 = (CASTING uint_64)(uint_32 $6)
	$3 = ($1 + [200])
	
.LOOP $label$1:
	$4 = ($4 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$6 = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $70($0, ([0] - $4))
	$6 = *(($0 + [4]))
	$4 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = $6
	*($7 + [56]) = ($7 + [8])
	*($7 + [40]) = $2
	*($7 + [44]) = $3
	*($7 + [24]) = $1
	*($7 + [28]) = ($1 + [8])
	*($7 + [32]) = ($1 + [16])
	*($7 + [36]) = ($1 + [24])
	*($7 + [48]) = ($1 + [216])
	CALL $298(($7 + [24]), ($7 + [56]))
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $296 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $475(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	CALL $297(($8 + [28]), $4)
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $476($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $476($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $476($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $291 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$4 = *($0 + [4])
	$7 = ((int_32)($4 - $2) / (int_32)[80])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[53687092]) ){ goto $label$2 }
	$5 = [53687091]
	$3 = ((int_32)(*($0 + [8]) - $2) / (int_32)[80])
	if ( ((uint_32)$3 > (uint_32)[26843544]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$5 * (int_32)[80]))
	$4 = *(($0 + [4]))
	$2 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[80])))) = *($1)
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [8])) = *(($1 + [8]))
	$3 = ($1 + [40])
	*(($7 + [40])) = *($3)
	*($7 + [32 align=4]) = *($1 + [32 align=4])
	*($1 + [32]) = [0]
	*(($1 + [36])) = [0]
	*($3) = [0]
	CALL memcpy(($7 + [44]), ($1 + [44]), [36])
	$5 = ($6 + ((int_32)$5 * (int_32)[80]))
	$6 = ($7 + [80])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	$2 = ([0] - $2)
	$1 = ($4 + [-40])
	
.LOOP $label$7:
	*(($7 + [-56])) = *(($1 + [-16]))
	*(($7 + [-64])) = *(($1 + [-24]))
	*(($7 + [-72])) = *(($1 + [-32]))
	*(($7 + [-80])) = *(($1 + [-40]))
	*(($7 + [-40])) = *($1)
	$4 = ($1 + [-8])
	*(($7 + [-48])) = *($4)
	*($4) = [0]
	*(($1 + [-4])) = [0]
	*($1) = [0]
	CALL memcpy(($7 + [-36]), ($1 + [4]), [36])
	$7 = ($7 + [-80])
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $2) != (int_32)[-40]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$7 = ([0] - $2)
	$1 = ($4 + [-48])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $7) != (int_32)[-48]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $476($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $290 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [128])
	*([0] + [4]) = $14
	$4 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($14 + [64]) = $11
	*($14 + [56]) = $4
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [2800]
	$11 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2816]
	$13 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$16 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	*(($14 + [36])) = *(($2 + [12]))
	*(($14 + [32])) = *(($2 + [8]))
	*(($14 + [28])) = *(($2 + [4]))
	*($14 + [8]) = $4
	*($14 + [16]) = *($1)
	*($14 + [24]) = *($2)
	CALL $492(($14 + [40]), $3)
	$8 = CALL $251(($14 + [72]), ($14 + [56]), $11, $13, ($14 + [8]))
	CALL $252(($14 + [112]), $8)
	$5 = *($14 + [112])
	CALL send_inline($5, (*($14 + [116]) - $5))
	$5 = *($14 + [112])
	if ( ($5 == 0) ){ goto $label$17 }
	*($14 + [116]) = $5
	CALL $476($5)
	
.LABEL $label$17
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($8 + [32])) = $5
	CALL $476($5)
	
.LABEL $label$18
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($8 + [20])) = $5
	CALL $476($5)
	
.LABEL $label$19
	if ( ((*($14 + [40]) & [1]) == 0) ){ goto $label$20 }
	CALL $476(*(($14 + [48])))
	
.LABEL $label$20
	$10 = *($1)
	$6 = *(($0 + [1152]))
	$3 = *(($0 + [1156]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$21 }
	$8 = ($3 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$22:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$21 }
	$3 = $8
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$5 = ($0 + [1128])
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$24 }
	$8 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [720])
	goto $label$23 
	
.LABEL $label$24
	$8 = [0]
	$3 = CALL db_find_i64(*(($0 + [1128])), *(($0 + [1136])), (int_64)8428183958969122816, $10)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $249($5, $3)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [720])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [784])
	$5 = *($8 + [36])
	$3 = CALL strlen([512])
	if ( ((int_32)$3 != (int_32)( *(($8 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$26 }
	if ( (CALL $486(($8 + [36]), [0], [-1], [512], $3) == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1024]
	$11 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$32 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [165])
	goto $label$30 
	
.LABEL $label$32
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$28
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$27 }
	*($14 + [80]) = $11
	*($14 + [72]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2992]
	$11 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$38 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$5 = ($5 + [165])
	goto $label$36 
	
.LABEL $label$38
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$34
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$33 }
	*($14 + [56]) = $11
	*(($14 + [28])) = *(($2 + [12]))
	*(($14 + [24])) = *(($2 + [8]))
	*((($14 + [8]) + [12])) = *(($2 + [4]))
	*($14 + [8]) = *($1)
	*($14 + [16]) = *($2)
	CALL $312($0, ($14 + [72]), $0, ($14 + [56]), ($14 + [8]))
	
.LABEL $label$25
	*([0] + [4]) = ($14 + [128])
}

void .FUNC $293 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $475([240])
	CALL $303($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [228])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $304(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((*($0 + [200]) & [1]) == 0) ){ goto $label$4 }
	CALL $476(*(($0 + [208])))
	
.LABEL $label$4
	$5 = *(($0 + [184]))
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($0 + [188])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	$3 = ([0] - $5)
	$1 = ($1 + [-48])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $3) != (int_32)[-48]) ){ goto $label$8 }
	$1 = *(($0 + [184]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($4) = $5
	CALL $476($1)
	
.LABEL $label$5
	if ( ((*(($0 + [136])) & [1]) == 0) ){ goto $label$10 }
	CALL $476(*(($0 + [144])))
	
.LABEL $label$10
	CALL $476($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $292 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$1 = ($0 + [840])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [840]), *(($0 + [848])), (int_64)-6778290816923205632, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $307($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = (CASTING uint_64)(uint_32 $1)
	if ( (uint_64)((int_64))(*(*(CALL $308(($5 + [8])) + [4])) - *($4)) <= (int_64)20) ){ goto $label$2 }
	$0 = CALL db_lowerbound_i64(*(($0 + [840])), *(($0 + [848])), (int_64)-6778290816923205632, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $307($1, $0)
	$3 = [1]
	
.LOOP $label$3:
	$4 = [0]
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1472])
	CALL eosio_assert($2, [1520])
	$2 = CALL db_next_i64(*($0 + [228]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $307($1, $2)
	
.LABEL $label$4
	CALL $309($1, $0)
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($3 <= [5])
	$3 = ($3 + [1])
	$0 = $4
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC $407 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[48]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [704])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($2) = ($7 + [20])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*((($8 + [8]) + [20])) = ($7 + [36])
	*($8 + [12]) = ($7 + [8])
	CALL $406(($8 + [8]), $8)
	$7 = ($7 + [48])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $484 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $475($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $476($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $204(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $84($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $85(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $476($0)
	
.LABEL $label$1
	CALL $86(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $349 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [160])
	*([0] + [4]) = $7
	*($7 + [8]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [640])
	*(($5 = CALL $475([104])) + [72]) = $1
	$3 = CALL memcpy($5, *($3), [72])
	*($7 + [104]) = (($7 + [16]) + [72])
	*($7 + [100]) = ($7 + [16])
	*($7 + [96]) = ($7 + [16])
	*($7 + [112]) = ($7 + [96])
	*($7 + [124]) = ($3 + [8])
	*($7 + [120]) = $3
	*($7 + [128]) = ($3 + [16])
	*($7 + [132]) = ($3 + [24])
	*($7 + [136]) = ($3 + [32])
	*($7 + [140]) = ($3 + [40])
	*($7 + [144]) = ($3 + [48])
	*($7 + [148]) = ($3 + [56])
	*($7 + [152]) = ($3 + [64])
	CALL $347(($7 + [120]), ($7 + [112]))
	$2 = *($3)
	*($3 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4157834741345014784, *($7 + [8]), $2, ($7 + [16]), [72])
	if ( (uint_64)($2 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [124]) = $3
	*($7 + [132]) = $3
	*($7 + [120]) = $1
	*($7 + [128]) = ($7 + [8])
	*($7 + [112]) = ($7 + [120])
	CALL $353(($7 + [112]), ($1 + [36]), ($1 + [37]), ($1 + [38]), ($1 + [39]), ($1 + [40]))
	*($7 + [120]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [96]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [120]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $354(($1 + [24]), ($7 + [120]), ($7 + [16]), ($7 + [96]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [120])
	*($7 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $476($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [160])
}

int_32 .FUNC $348 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $475([104])) + [72]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [40])
	*($8 + [64]) = ($6 + [48])
	*($8 + [68]) = ($6 + [56])
	*($8 + [72]) = ($6 + [64])
	CALL $355(($8 + [40]), ($8 + [32]))
	*($6 + [80]) = [-1]
	*($6 + [76]) = $1
	*($6 + [84]) = [-1]
	*($6 + [88]) = [-1]
	*($6 + [92]) = [-1]
	*($6 + [96]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $354(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $476($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC $347 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $346 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($2 + [8])
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + [16])
	*($4 + [20]) = ($2 + [24])
	*($4 + [24]) = ($2 + [104])
	*($4 + [28]) = ($2 + [184])
	CALL $340(($4 + [8]), $4)
	$2 = *($0 + [4])
	*($4) = *($1)
	*($4 + [12]) = ($2 + [8])
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + [16])
	*($4 + [20]) = ($2 + [24])
	*($4 + [24]) = ($2 + [32])
	*($4 + [28]) = ($2 + [40])
	*($4 + [32]) = ($2 + [48])
	*($4 + [36]) = ($2 + [56])
	*($4 + [40]) = ($2 + [64])
	CALL $347(($4 + [8]), $4)
	$2 = *($0 + [8])
	*($4) = *($1)
	*($4 + [12]) = ($2 + [8])
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + [16])
	*($4 + [20]) = ($2 + [24])
	*($4 + [24]) = ($2 + [32])
	*($4 + [28]) = ($2 + [40])
	*($4 + [32]) = ($2 + [48])
	*($4 + [36]) = ($2 + [56])
	*($4 + [40]) = ($2 + [64])
	CALL $347(($4 + [8]), $4)
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*([0] + [4]) = ($4 + [48])
}

void .FUNC $345 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $475([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $70(($8 + [28]), [336])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [12]) = $1
	*($9 + [8]) = $1
	*($9 + [16]) = $2
	*($9 + [24]) = ($9 + [8])
	*($9 + [32]) = $4
	*($9 + [36]) = ($4 + [192])
	*($9 + [40]) = ($4 + [264])
	*($9 + [44]) = ($4 + [336])
	*($9 + [48]) = ($4 + [344])
	*($9 + [52]) = ($4 + [352])
	*($9 + [56]) = ($4 + [360])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $346(($9 + [32]), ($9 + [24]))
	$4 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	$6 = ([0] - $4)
	$4 = ($2 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($4 + [-12]))
	*(($8 + [-40])) = *(($4 + [-20]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$7 = ($4 + [-4])
	*($2) = *($7)
	*(($8 + [-20])) = *($4)
	$2 = ($4 + [4])
	*($1) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$7 = ($4 + [8])
	*($2) = *($7)
	*(($8 + [-8])) = *(($4 + [12]))
	$2 = ($4 + [16])
	*($1) = *($2)
	*($2) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$8 = ($4 + [-24])
	
.LOOP $label$9:
	$4 = *(($8 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $4
	CALL $476($4)
	
.LABEL $label$10
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $4
	CALL $476($4)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $476($1)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
	(unreachable)
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $343 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($2)
	$4 = *(($1 + [40]))
	$7 = *(($1 + [44]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [16])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$6), [720])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($1 + [16])), *(($1 + [24])), (int_64)-3020384829779738624, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $116($6, $7)
	CALL eosio_assert(((int_32)*($2 + [112]) == (int_32)$6), [720])
	
.LABEL $label$3
	$6 = CALL memcpy($0, $2, [80])
	CALL $492(($6 + [80]), ($2 + [80]))
	CALL $492(($6 + [92]), ($2 + [92]))
	*($6 + [104]) = *($2 + [104])
}

void .FUNC $342 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$5 = *($2)
	$6 = *(($1 + [1064]))
	$10 = *(($1 + [1068]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$5) ){ goto $label$1 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($1 + [1040])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$9), [720])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*(($1 + [1040])), *(($1 + [1048])), (int_64)4157834741345014784, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $348($9, $8)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$9), [720])
	
.LABEL $label$5
	$5 = *($1)
	*($11 + [4]) = $4
	*($11) = $3
	CALL eosio_assert([1], [976])
	CALL $350($9, $8, $5, $11)
	CALL memcpy($0, $8, [72])
	goto $label$3 
	
.LABEL $label$4
	*($0) = *($2)
	$5 = *($4)
	$7 = ((int_64)$5 == (int_64)2)
	$10 = *($3)
	$8 = ((int_32)$10 != (int_32)[0])
	*($0 + [8]) = (CASTING uint_64)(uint_32 ($8 & $7))
	$10 = ($10 == 0)
	*($0 + [16]) = (CASTING uint_64)(uint_32 ($10 & $7))
	$7 = ((int_64)$5 == (int_64)4)
	*($0 + [24]) = (CASTING uint_64)(uint_32 ($8 & $7))
	*($0 + [32]) = (CASTING uint_64)(uint_32 ($10 & $7))
	$7 = ((int_64)$5 == (int_64)6)
	*($0 + [40]) = (CASTING uint_64)(uint_32 ($8 & $7))
	*($0 + [48]) = (CASTING uint_64)(uint_32 ($10 & $7))
	*($0 + [56]) = (int_64)1
	*($0 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = *($1)
	*($11 + [8]) = $0
	CALL $349($11, $9, $5, ($11 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $341 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $475(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $491($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $476($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $476($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $340 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [704])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($5) = $2
	*($5 + [12]) = ($3 + [24])
	*($5 + [8]) = ($3 + [16])
	*($5 + [16]) = ($3 + [32])
	*($5 + [20]) = ($3 + [40])
	*($5 + [24]) = ($3 + [44])
	*($5 + [28]) = ($3 + [48])
	*($5 + [32]) = ($3 + [56])
	*($5 + [36]) = ($3 + [64])
	*($5 + [40]) = ($3 + [72])
	CALL $212(($5 + [8]), $5)
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[1]), [704])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($5) = $2
	*($5 + [12]) = ($3 + [24])
	*($5 + [8]) = ($3 + [16])
	*($5 + [16]) = ($3 + [32])
	*($5 + [20]) = ($3 + [40])
	*($5 + [24]) = ($3 + [44])
	*($5 + [28]) = ($3 + [48])
	*($5 + [32]) = ($3 + [56])
	*($5 + [36]) = ($3 + [64])
	*($5 + [40]) = ($3 + [72])
	CALL $212(($5 + [8]), $5)
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $482 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $479($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($3 = $4) + [60]) = $0
	*($3 + [48]) = *($1)
	*($3 + [52]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [64]) = $1
	$4 = ($1 + $0)
	*($3 + [72]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [592])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [68]) = ($1 + [16])
	CALL $68(($3 + [64]), (($3 + [8]) + [16]))
	CALL $68(($3 + [64]), ($3 + [36]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $386(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*(($3 + [44])))
	
.LABEL $label$6
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($3 + [32])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [80])
	return [1]
}

void .FUNC $283 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [592])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($6 + [16])) = [0]
	*($6) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [32]) = ($1 + $3)
	*($6 + [24]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [592])
	CALL memcpy($6, $1, [8])
	*($6 + [28]) = ($1 + [8])
	$7 = ($6 + [8])
	CALL $68(($6 + [24]), $7)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$4 = *($6)
	CALL $492(($6 + [24]), $7)
	*($6 + [40]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 + [40])), (int_32 ($6 + [24])), (int_32 $5))
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($6 + [32]))
	
.LABEL $label$6
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $476(*(($6 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
	return [1]
}

void .FUNC _ZN4sghk8inittaskERKyS1_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	CALL require_auth(*($1))
	$5 = *($1)
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [624]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$1 = [1]
	if ( ((int_64)$5 == (int_64)$9) ){ goto $label$5 }
	$1 = ((int_64)$5 == (int_64)*($0))
	
.LABEL $label$5
	CALL eosio_assert($1, [3776])
	CALL $222($0, $3, $4)
	*($11 + [8]) = (int_64)0
	CALL $80($0, $2, ($11 + [8]), [2])
	CALL $387($0, $2, $3)
	*([0] + [4]) = ($11 + [16])
}

void .FUNC _ZN4sghk10tptransferERKyN5eosio8currency8transferE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	$8 = *($0)
	if ( ((int_64)*($2) == (int_64)$8) ){ goto $label$1 }
	if ( ((int_64)*($2 + [8]) != (int_64)$8) ){ goto $label$1 }
	$3 = *($1)
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [2800]
	$9 = (int_64)0
	
.LOOP $label$2:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$3 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$3 != (int_64)$9) ){ goto $label$1 }
	*($12 + [48]) = [0]
	*($12 + [40]) = (int_64)0
	CALL $492(($12 + [24]), ($2 + [32]))
	CALL _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c(($12 + [40]), ($12 + [24]), [45])
	if ( ((*($12 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $476(*($12 + [32]))
	
.LABEL $label$6
	$4 = *($1)
	$1 = *($12 + [40])
	$5 = CALL strlen([4000])
	if ( ((int_32)$5 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$7 }
	$11 = [0]
	if ( CALL $486($1, [0], [-1], [4000], $5) ){ goto $label$7 }
	*($12 + [56]) = (int_64)0
	CALL $80($0, $2, ($12 + [56]), [10])
	CALL eosio_assert(((int_32)(*($12 + [44]) - *($12 + [40])) == (int_32)[24]), [4016])
	CALL $492(($12 + [8]), (*($12 + [40]) + [12]))
	$1 = ($1 & [1])
	$1 = *($12 + [8])
	$6 = uint_32($1 >> [1])
	$5 = *($12 + [12])
	if ( (( $5 ? $6 : $1 ) == 0) ){ goto $label$8 }
	if ( $1 ){ goto $label$10 }
	$11 = [1]
	$5 = (($12 + [8]) | [1])
	$1 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)$1 >= (uint_32)$6) ){ goto $label$8 }
	$4 = ($5 + $1)
	$1 = ($1 + [1])
	if ( (((*($4) + [-48]) & [255]) <= [10]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$1 = [0]
	$6 = *($12 + [16])
	$11 = [1]
	
.LOOP $label$12:
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$8 }
	$4 = ($6 + $1)
	$1 = ($1 + [1])
	if ( (((*($4) + [-48]) & [255]) <= [10]) ){ goto $label$12 }
	
.LABEL $label$9
	$11 = [0]
	
.LABEL $label$8
	CALL eosio_assert($11, [4048])
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $476(*($12 + [16]))
	
.LABEL $label$13
	*($12 + [56]) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($12 + [40]) + [12]), [0], [10]))
	CALL $421($0, $2, ($2 + [16]), ($12 + [56]))
	
.LABEL $label$7
	$2 = *($12 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = *($12 + [44])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$15 }
	$4 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$16:
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL $476(*(($1 + [8])))
	
.LABEL $label$17
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $4) != (int_32)[-12]) ){ goto $label$16 }
	$1 = *($12 + [40])
	goto $label$14 
	
.LABEL $label$15
	$1 = $2
	
.LABEL $label$14
	*($12 + [44]) = $2
	CALL $476($1)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [64])
}

void .FUNC _ZN4sghk6signinERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [624]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(CALL $fimport$33(*($1)), [3872])
	*($12 + [8]) = (int_64)0
	CALL $80($0, $1, ($12 + [8]), [1])
	$8 = *($1)
	$4 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$8) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$9 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [112]) == (int_32)$6), [720])
	if ( $3 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020384829779738624, $8)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $116($6, $3) + [112]) == (int_32)$6), [720])
	goto $label$7 
	
.LABEL $label$8
	CALL $396($0, $1)
	CALL $397($0, $1, $2)
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [112])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [24])) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [1824])
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = $9
	CALL $428(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	$6 = *(($9 + [8]))
	*(($9 + [76])) = *(($9 + [28]))
	*(($1 = (($9 + [64]) + [8]))) = *(($9 + [24]))
	*($9 + [68]) = *(($9 + [20]))
	$4 = *($9)
	*($9 + [64]) = *($9 + [16])
	CALL $492(($9 + [48]), ($9 + [32]))
	*((($9 + [80]) + [8])) = *($1)
	*($9 + [80]) = *($9 + [64])
	*($9 + [104]) = $4
	*($9 + [96]) = $6
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	CALL void $1((int_32 ($9 + [104])), (int_32 ($9 + [96])), (int_32 ($9 + [80])), (int_32 ($9 + [48])), (int_32 $8))
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $476(*($9 + [56]))
	
.LABEL $label$11
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*(($9 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [112])
	return [1]
}

void .FUNC $280 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5066923847832305664, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $282($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-5066923847832305664, $5))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [720])
	
.LABEL $label$4
	*(($2 + [48])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	*($0 + [16]) = $1
	*($0) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	$2 = [0]
	*(($0 + [48])) = [0]
	*(($0 + [52])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	*(($0 + [94])) = [0]
	*(($0 + [92])) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	*(($0 + [134])) = [0]
	*(($0 + [132])) = [0]
	*($0 + [136]) = $1
	*(($0 + [144])) = $1
	*(($0 + [152])) = (int_64)-1
	*(($0 + [160])) = [0]
	*(($0 + [164])) = [0]
	*(($0 + [168])) = [0]
	*(($0 + [178])) = [0]
	*(($0 + [176])) = [0]
	*(($0 + [172])) = [0]
	*($0 + [184]) = $1
	*(($0 + [192])) = $1
	*(($0 + [200])) = (int_64)-1
	*(($0 + [208])) = [0]
	*(($0 + [212])) = [0]
	*(($0 + [216])) = [0]
	*(($0 + [222])) = [0]
	*(($0 + [220])) = [0]
	*($0 + [224]) = $1
	*(($0 + [232])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = [0]
	*(($0 + [252])) = [0]
	*(($0 + [256])) = [0]
	*(($0 + [262])) = [0]
	*(($0 + [260])) = [0]
	*($0 + [264]) = $1
	*(($0 + [272])) = $1
	*(($0 + [280])) = (int_64)-1
	*(($0 + [288])) = [0]
	*(($0 + [292])) = [0]
	*(($0 + [296])) = [0]
	*(($0 + [300])) = [0]
	$1 = *($0)
	*($0 + [304]) = $1
	*(($0 + [312])) = $1
	*(($0 + [320])) = (int_64)-1
	*(($0 + [328])) = [0]
	*(($0 + [332])) = [0]
	*(($0 + [336])) = [0]
	*(($0 + [340])) = [0]
	*($0 + [344]) = $1
	*(($0 + [352])) = $1
	*(($0 + [360])) = (int_64)-1
	*(($0 + [368])) = [0]
	*(($0 + [372])) = [0]
	*(($0 + [376])) = [0]
	*(($0 + [380])) = [0]
	*($0 + [384]) = $1
	*(($0 + [392])) = $1
	*(($0 + [400])) = (int_64)-1
	*(($0 + [408])) = [0]
	*(($0 + [412])) = [0]
	*(($0 + [416])) = [0]
	*(($0 + [420])) = [0]
	*($0 + [424]) = $1
	*(($0 + [432])) = $1
	*(($0 + [440])) = (int_64)-1
	*(($0 + [448])) = [0]
	*(($0 + [452])) = [0]
	*(($0 + [456])) = [0]
	*(($0 + [460])) = [0]
	*($0 + [464]) = $1
	*(($0 + [472])) = $1
	*(($0 + [480])) = (int_64)-1
	*(($0 + [488])) = [0]
	*(($0 + [492])) = [0]
	*(($0 + [496])) = [0]
	*(($0 + [504])) = [0]
	*(($0 + [500])) = [0]
	*($0 + [512]) = $1
	*(($0 + [520])) = $1
	*(($0 + [528])) = (int_64)-1
	*(($0 + [536])) = [0]
	*(($0 + [540])) = [0]
	*(($0 + [544])) = [0]
	*(($0 + [552])) = [0]
	*(($0 + [548])) = [0]
	*($0 + [560]) = $1
	*(($0 + [568])) = $1
	*(($0 + [576])) = (int_64)-1
	*(($0 + [584])) = [0]
	*(($0 + [588])) = [0]
	*(($0 + [592])) = [0]
	$1 = *($0)
	*($0 + [600]) = $1
	*(($0 + [608])) = $1
	*(($0 + [616])) = (int_64)-1
	*(($0 + [624])) = [0]
	*(($0 + [628])) = [0]
	*(($0 + [632])) = [0]
	*($0 + [640]) = $1
	*(($0 + [648])) = $1
	*(($0 + [656])) = (int_64)-1
	*(($0 + [664])) = [0]
	*(($0 + [668])) = [0]
	*(($0 + [672])) = [0]
	*($0 + [680]) = $1
	*(($0 + [688])) = $1
	*(($0 + [696])) = (int_64)-1
	*(($0 + [704])) = [0]
	*(($0 + [708])) = [0]
	*(($0 + [712])) = [0]
	*(($0 + [716])) = [0]
	*($0 + [720]) = $1
	*(($0 + [728])) = $1
	*(($0 + [736])) = (int_64)-1
	*(($0 + [744])) = [0]
	*(($0 + [748])) = [0]
	*(($0 + [752])) = [0]
	*($0 + [760]) = $1
	*(($0 + [768])) = $1
	*(($0 + [776])) = (int_64)-1
	*(($0 + [784])) = [0]
	*(($0 + [788])) = [0]
	*(($0 + [792])) = [0]
	*($0 + [800]) = $1
	*(($0 + [808])) = $1
	*(($0 + [816])) = (int_64)-1
	*(($0 + [824])) = [0]
	*(($0 + [828])) = [0]
	*(($0 + [832])) = [0]
	*($0 + [840]) = $1
	*(($0 + [848])) = $1
	*(($0 + [856])) = (int_64)-1
	*(($0 + [864])) = [0]
	*(($0 + [868])) = [0]
	*(($0 + [872])) = [0]
	*(($0 + [876])) = [0]
	*($0 + [880]) = $1
	*(($0 + [888])) = $1
	*(($0 + [896])) = (int_64)-1
	*(($0 + [904])) = [0]
	*(($0 + [908])) = [0]
	*(($0 + [912])) = [0]
	*(($0 + [916])) = [0]
	$1 = *($0)
	*($0 + [920]) = $1
	*(($0 + [928])) = $1
	*(($0 + [936])) = (int_64)-1
	*(($0 + [944])) = [0]
	*(($0 + [948])) = [0]
	*(($0 + [952])) = [0]
	*(($0 + [956])) = [0]
	*($0 + [960]) = $1
	*(($0 + [968])) = $1
	*(($0 + [976])) = (int_64)-1
	*(($0 + [984])) = [0]
	*(($0 + [988])) = [0]
	*(($0 + [992])) = [0]
	*(($0 + [996])) = [0]
	*($0 + [1000]) = $1
	*(($0 + [1008])) = $1
	*(($0 + [1016])) = (int_64)-1
	*(($0 + [1024])) = [0]
	*(($0 + [1028])) = [0]
	*(($0 + [1032])) = [0]
	*($0 + [1040]) = $1
	*(($0 + [1048])) = $1
	*(($0 + [1056])) = (int_64)-1
	*(($0 + [1064])) = [0]
	*(($0 + [1068])) = [0]
	*(($0 + [1072])) = [0]
	*(($0 + [1080])) = [0]
	*(($0 + [1076])) = [0]
	*($0 + [1088]) = $1
	*(($0 + [1096])) = $1
	*(($0 + [1104])) = (int_64)-1
	*(($0 + [1112])) = [0]
	*(($0 + [1116])) = [0]
	*(($0 + [1120])) = [0]
	*($0 + [1128]) = $1
	*(($0 + [1136])) = $1
	*(($0 + [1144])) = (int_64)-1
	*(($0 + [1152])) = [0]
	*(($0 + [1156])) = [0]
	*(($0 + [1160])) = [0]
	*(($0 + [1164])) = [0]
	*($0 + [1168]) = $1
	*(($0 + [1176])) = $1
	*(($0 + [1184])) = (int_64)-1
	*(($0 + [1192])) = [0]
	*(($0 + [1196])) = [0]
	*(($0 + [1200])) = [0]
	*($0 + [1208]) = $1
	*(($0 + [1216])) = $1
	*(($0 + [1224])) = (int_64)-1
	*(($0 + [1232])) = [0]
	*(($0 + [1236])) = [0]
	*(($0 + [1240])) = [0]
	$1 = *($0)
	*($0 + [1248]) = $1
	*(($0 + [1256])) = $1
	*(($0 + [1264])) = (int_64)-1
	*(($0 + [1272])) = [0]
	*(($0 + [1276])) = [0]
	*(($0 + [1280])) = [0]
	*($0 + [1288]) = (int_64)0
	*(($3 = ($0 + [1296]))) = (int_64)1397703940
	CALL eosio_assert([1], [1760])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1824])
	*(($0 + [1312])) = (int_64)100000
	*($0 + [1304]) = (int_64)10000
	*(($0 + [1320])) = (int_64)300000
	*(($0 + [1328])) = (int_64)600000
	*(($0 + [1336])) = (int_64)1000000
	*($0 + [1344]) = (int_64)0
	*(($0 + [1352])) = (int_64)5
	*(($0 + [1360])) = (int_64)10
	*(($0 + [1368])) = (int_64)20
	*(($0 + [1376])) = (int_64)40
	*(($0 + [1384])) = (int_64)100
	return $0
}

void .FUNC _ZN4sghk8transferERKyS1_RKN5eosio5assetERKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = *($0)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$7) ){ goto $label$1 }
	CALL $141($0, $3)
	$2 = *($4)
	$5 = CALL strlen([4144])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$8 }
	if ( (CALL $486($4, [0], [-1], [4144], $5) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = *($4)
	$5 = ($4 + [4])
	$6 = CALL strlen([4160])
	if ( ((int_32)$6 != (int_32)( *($5) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$9 }
	if ( (CALL $486($4, [0], [-1], [4160], $6) == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$2 = *($4)
	$6 = CALL strlen([4176])
	if ( ((int_32)$6 != (int_32)( *($5) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$10 }
	if ( (CALL $486($4, [0], [-1], [4176], $6) == 0) ){ goto $label$5 }
	
.LABEL $label$10
	$2 = *($4)
	$5 = CALL strlen([4192])
	if ( ((int_32)$5 != (int_32)( *(($4 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$11 }
	if ( (CALL $486($4, [0], [-1], [4192], $5) == 0) ){ goto $label$2 }
	
.LABEL $label$11
	*($8 + [32]) = [0]
	*($8 + [24]) = (int_64)0
	CALL $492(($8 + [8]), $4)
	CALL _Z10split_memoRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEES6_c(($8 + [24]), ($8 + [8]), [45])
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $476(*($8 + [16]))
	
.LABEL $label$12
	$2 = *($4)
	$4 = *($8 + [24])
	$5 = CALL strlen([4208])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$13 }
	if ( CALL $486($4, [0], [-1], [4208], $5) ){ goto $label$13 }
	*($8 + [40]) = (int_64)0
	CALL $80($0, $1, ($8 + [40]), [16])
	CALL $433($0, $1, $3, ($8 + [24]))
	
.LABEL $label$13
	$1 = *($8 + [24])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($8 + [28])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	$0 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$14:
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	CALL $476(*(($4 + [8])))
	
.LABEL $label$15
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $0) != (int_32)[-12]) ){ goto $label$14 }
	$4 = *($8 + [24])
	goto $label$3 
	
.LABEL $label$7
	*($8 + [24]) = (int_64)0
	CALL $80($0, $1, ($8 + [24]), [7])
	CALL $429($0, $1, $3)
	goto $label$1 
	
.LABEL $label$6
	*($8 + [24]) = (int_64)0
	CALL $80($0, $1, ($8 + [24]), [8])
	CALL $430($0, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($8 + [24]) = (int_64)0
	CALL $80($0, $1, ($8 + [24]), [9])
	CALL $431($0, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($8 + [28]) = $1
	CALL $476($4)
	goto $label$1 
	
.LABEL $label$2
	*($8 + [24]) = (int_64)0
	CALL $80($0, $1, ($8 + [24]), [11])
	CALL $432($0, $1, $3)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $281 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1520])
	$6 = *($0 + [4])
	$7 = *($6 + [48])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-5066923847832305664, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [48]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $282($2, CALL $fimport$17(*($2), *($2 + [8]), (int_64)-5066923847832305664, $3))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$2), [720])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [48])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}