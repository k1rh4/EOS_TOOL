(data (i32.const 8192) "Invalid token transfer...\00")
(data (i32.const 8218) "EOS\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8308) "only EOS token is allowed\00")
(data (i32.const 8334) "must be a positive amount\00")
(data (i32.const 8360) "toppaigow123\00")
(data (i32.const 8373) "topthreecard\00")
(data (i32.const 8386) "TOP\00")
(data (i32.const 8390) "only TOP token is allowed\00")
(data (i32.const 8416) "cannot undelegate cause has no record\00")
(data (i32.const 8454) "amount is bigger than delegated\00")
(data (i32.const 8486) "not enough TOP to undelegate\00")
(data (i32.const 8515) "topdappadmin\00")
(data (i32.const 8528) "not start or not time yet\00")
(data (i32.const 8554) "cannot withdraw cause u has no delegate record\00")
(data (i32.const 8601) "has no money or not reach the time for dividend\00")
(data (i32.const 8649) "active\00")
(data (i32.const 8656) "eosio.token\00")
(data (i32.const 8668) "transfer\00")
(data (i32.const 8677) "bonus for delegate top\00")
(data (i32.const 8700) "it\'s not time yet\00")
(data (i32.const 8718) "you have no top to withdraw\00")
(data (i32.const 8746) "topdapptoken\00")
(data (i32.const 8759) "undelegate top\00")
(data (i32.const 8774) "fuck \00")
(data (i32.const 8780) "fuck u \00")
(data (i32.const 8788) "string is too long to be a valid symbol_code\00")
(data (i32.const 8833) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8886) "string is too long to be a valid name\00")
(data (i32.const 8924) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8991) "character is not in allowed character set for names\00")
(data (i32.const 9043) "topdividend1\00")
(data (i32.const 9056) "save eos to dividend\00")
(data (i32.const 9077) "unable to find key\00")
(data (i32.const 9096) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9147) "error reading iterator\00")
(data (i32.const 9170) "read\00")
(data (i32.const 9175) "write\00")
(data (i32.const 9181) "save top to dividend\00")
(data (i32.const 9202) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9251) "invalid symbol name\00")
(data (i32.const 9271) "cannot pass end iterator to modify\00")
(data (i32.const 9306) "object passed to modify is not in multi_index\00")
(data (i32.const 9352) "cannot modify objects in table of another contract\00")
(data (i32.const 9403) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9462) "cannot create objects in table of another contract\00")
(data (i32.const 9513) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9565) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9619) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9667) "cannot increment end iterator\00")
(data (i32.const 9697) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $29))
(export "_Znwj" (func $55))
(export "_ZdlPv" (func $57))
(export "_Znaj" (func $56))
(export "_ZdaPv" (func $58))
(export "_ZnwjSt11align_val_t" (func $59))
(export "_ZnajSt11align_val_t" (func $60))
(export "_ZdlPvSt11align_val_t" (func $61))
(export "_ZdaPvSt11align_val_t" (func $62))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $13 $1 $7 $21 $24 $19 $34 $28 $12 $14)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18120))
(global $global$2 i32 (i32.const 18120))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9175])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9175])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $43(CALL $42($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $19 (int_32 $0)
{
	CALL require_auth(*($0))
	CALL $20($0)
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9147])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $72($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9170])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9170])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $75($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $74($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8222])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $67 ()
{
	return [9708]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-2039333636183086593) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-3111238946495234049) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4994301883677933568) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$5 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [1]
	*($3 + [8]) = *($3 + [208])
	CALL $30($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [224]) = [8656]
	*($3 + [228]) = CALL $69([8656])
	*($3 + [112]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [112]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$10 }
	*($3 + [224]) = [8668]
	*($3 + [228]) = CALL $69([8668])
	*($3 + [104]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$10 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [64]) = *($3 + [152])
	CALL $31($0, (int_64)6138663591592764928, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [136]) = [8746]
	*($3 + [140]) = CALL $69([8746])
	*($3 + [96]) = *($3 + [136])
	CALL $2(($3 + [144]), ($3 + [96]))
	if ( ((int_64)$1 != (int_64)-3662953346221468368) ){ goto $label$5 }
	*($3 + [224]) = [8668]
	*($3 + [228]) = CALL $69([8668])
	*($3 + [88]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [88]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	*($3 + [128]) = [8746]
	*($3 + [132]) = CALL $69([8746])
	*($3 + [80]) = *($3 + [128])
	$4 = CALL $2(($3 + [232]), ($3 + [80]))
	CALL prints([8774])
	CALL printui(*($4))
	CALL prints([8780])
	CALL printui((int_64)-3617168760277827584)
	*($3 + [124]) = [0]
	*($3 + [120]) = [3]
	*($3 + [72]) = *($3 + [120])
	CALL $31($0, (int_64)-3662953346221468368, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	if ( ((int_64)$2 > (int_64)4851652648162732415) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-2039333636183086592) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4851652394761737529) ){ goto $label$5 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [4]
	*($3 + [32]) = *($3 + [184])
	CALL $32($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-3111238946495234048) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-2039333636190949376) ){ goto $label$5 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [5]
	*($3 + [16]) = *($3 + [200])
	CALL $33($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4851652648162732416) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)4851652648162978128) ){ goto $label$5 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [6]
	*($3 + [48]) = *($3 + [168])
	CALL $32($1, $1, ($3 + [48]))
	
.LABEL $label$5
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [164]) = [0]
	*($3 + [160]) = [7]
	*($3 + [56]) = *($3 + [160])
	CALL $32($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [196]) = [0]
	*($3 + [192]) = [8]
	*($3 + [24]) = *($3 + [192])
	CALL $33($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [220]) = [0]
	*($3 + [216]) = [9]
	*($3) = *($3 + [216])
	CALL $35($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$1
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [40]) = *($3 + [176])
	CALL $32($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [208])
	$global$0 = $2
	*($2 + [192]) = ($0 + [32])
	CALL $8(($2 + [128]), ($2 + [192]), $1)
	$3 = [0]
	$4 = *($2 + [132])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = ( $4 ? [0] : ((int_64)*($1) == (int_64)*($4 + [48])) )
	
.LABEL $label$1
	CALL eosio_assert(((uint_64)CALL $fimport$9() >= (uint_64)*($3 + [40])), [8700])
	CALL eosio_assert(((int_64)*($3 + [32]) != (int_64)0), [8718])
	$5 = *($3 + [32])
	$6 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9271])
	$4 = *($2 + [192])
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$4), [9306])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$5()), [9352])
	*($3 + [32]) = (int_64)0
	$7 = ($3 + [48])
	*($2 + [200]) = *($7)
	$8 = *($3)
	CALL eosio_assert([1], [9403])
	*($2 + [56]) = (($2 + [128]) + [56])
	*($2 + [52]) = ($2 + [128])
	*($2 + [48]) = ($2 + [128])
	CALL $9(($2 + [48]), $3)
	CALL db_update_i64(*($3 + [60]), $6, ($2 + [128]), [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$2 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [112]) = *($7)
	if ( (CALL $68(($2 + [200]), ($2 + [112]), [8]) == 0) ){ goto $label$3 }
	$7 = ($3 + [64])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-1561324103627964416, ($2 + [32]), $8)
	*($7) = $3
	
.LABEL $label$4
	CALL db_idx64_update($3, $6, ($2 + [112]))
	
.LABEL $label$3
	$3 = CALL $69([8386])
	if ( ($3 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8788])
	goto $label$7 
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = (int_64)0
	
.LOOP $label$9:
	$4 = *(($3 + [8385]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$10
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$6 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9202])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$8 = $6
	$4 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$8 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9251])
	$8 = CALL current_time()
	*(($2 + [156])) = (int_64)0
	*(($2 + [172])) = (int_64)0
	*(($2 + [180])) = (int_64)0
	*($2 + [140]) = [0]
	*($2 + [144]) = [0]
	*($2 + [148 align=4]) = (int_64)0
	*($2 + [164 align=4]) = (int_64)0
	*($2 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	$8 = *($0)
	*($2 + [112]) = [8649]
	*($2 + [116]) = CALL $69([8649])
	*($2 + [24]) = *($2 + [112])
	*($2 + [120]) = *(CALL $2(($2 + [48]), ($2 + [24])))
	*($2 + [112]) = $8
	*($2 + [104]) = [8746]
	*($2 + [108]) = CALL $69([8746])
	*($2 + [16]) = *($2 + [104])
	$7 = CALL $2(($2 + [200]), ($2 + [16]))
	*($2 + [32]) = [8668]
	*($2 + [36]) = CALL $69([8668])
	*($2 + [8]) = *($2 + [32])
	*($2 + [96]) = *(CALL $2(($2 + [48]), ($2 + [8])))
	$8 = *($0)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $69([8759])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$10 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($2 + [32]) = ($10 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$18
	CALL memcpy($4, [8759], $3)
	
.LABEL $label$17
	*(($4 + $3)) = [0]
	*(($2 + [72])) = $9
	$3 = ($2 + [40])
	*((($2 + [48]) + [40])) = *($3)
	*($3) = [0]
	*($2 + [48]) = $8
	*($2 + [64]) = $5
	*($2 + [56]) = *($1)
	*($2 + [80]) = *($2 + [32])
	*($2 + [32]) = (int_64)0
	$3 = (($2 + [128]) + [40])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [172]))) ){ goto $label$21 }
	CALL $17($4, ($2 + [112]), *($7), *($2 + [96]), ($2 + [48]))
	*($3) = (*($3) + [40])
	goto $label$20 
	
.LABEL $label$21
	CALL $25(($2 + [164]), ($2 + [112]), $7, ($2 + [96]), ($2 + [48]))
	
.LABEL $label$20
	if ( ((*(($2 + [80])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [88])))
	
.LABEL $label$22
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$23
	*(($2 + [148])) = [2]
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = *($1)
	$8 = *($0)
	CALL $26(($2 + [112]), ($2 + [128]))
	$3 = *($2 + [112])
	CALL send_deferred(($2 + [48]), $8, $3, (*($2 + [116]) - $3), [0])
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$24 }
	*($2 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$24
	CALL $27(($2 + [128]))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$16
	CALL $63(($2 + [32]))
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$1 = ($global$0 - [256])
	$global$0 = $1
	*($1 + [200]) = [8515]
	*($1 + [204]) = CALL $69([8515])
	*($1 + [8]) = *($1 + [200])
	CALL require_auth(*(CALL $2(($1 + [208]), ($1 + [8]))))
	CALL memset(($1 + [32]), [0], [80])
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [9096])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $3($2, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [9096])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [32])
	
.LABEL $label$1
	CALL memcpy(($1 + [120]), $3, [80])
	$4 = *($1 + [160])
	if ( ((int_32)*($1 + [168]) != (int_32)[2]) ){ goto $label$6 }
	$5 = (int_64)0
	$3 = [1]
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = $4
	
.LABEL $label$5
	$3 = [0]
	$4 = $5
	
.LABEL $label$4
	CALL eosio_assert(( [0] ? $3 : (uint_64)(CALL $fimport$9() <= $4) ), [8528])
	*((($1 + [120]) + [40])) = ((int_64)CALL current_time() + (int_64)86400000000)
	*($1 + [24]) = [0]
	$5 = (int_64)0
	*($1 + [16]) = (int_64)0
	$6 = ($0 + [32])
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-1561324103627964416, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $22($6, $3)
	$5 = (int_64)0
	$7 = ($1 + [144])
	$9 = (($1 + [16]) + [8])
	$8 = *($1 + [20])
	if ( ((int_32)$8 != (int_32)*($9)) ){ goto $label$9 }
	$10 = [4]
	goto $label$7 
	
.LABEL $label$9
	$10 = [3]
	goto $label$7 
	
.LABEL $label$8
	$10 = [41]
	
.LABEL $label$7
	
.LOOP $label$10:
	goto $label$81 
	
.LABEL $label$83
	$3 = CALL $22($6, $3)
	$8 = *($1 + [20])
	if ( ((int_32)$8 == (int_32)*($9)) ){ goto $label$41 }
	$10 = [3]
	goto $label$10 
	
.LABEL $label$82
	*($8) = *($3)
	*($1 + [20]) = ($8 + [8])
	$4 = *($3 + [8])
	$11 = *($3 + [24])
	if ( (int_64)($11 == 0) ){ goto $label$40 }
	$10 = [0]
	goto $label$10 
	
.LABEL $label$81
	*($7) = ((int_64)*($7) + (int_64)$11)
	$10 = [1]
	goto $label$10 
	
.LABEL $label$80
	$5 = ((int_64)$4 + (int_64)$5)
	CALL eosio_assert([1], [9667])
	$3 = CALL db_next_i64(*($3 + [60]), ($1 + [32]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$79
	CALL $23(($1 + [16]), $3)
	$4 = *($3 + [8])
	$11 = *($3 + [24])
	if ( ((int_64)($11 == 0) == 0) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$78
	if ( (int_64)($5 == 0) ){ goto $label$35 }
	$10 = [6]
	goto $label$10 
	
.LABEL $label$77
	$4 = *($1 + [128])
	$11 = *($1 + [152])
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$34 }
	$10 = [7]
	goto $label$10 
	
.LABEL $label$76
	*(($1 + [128])) = (int_64)0
	$4 = ((int_64)*($1 + [144]) + (int_64)$4)
	$12 = ((float_64)(CASTING float_64)(uint_64 $4) * (float_64)(float_64)0.05)
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$33 }
	$10 = [35]
	goto $label$10 
	
.LABEL $label$75
	$13 = (int_64)0
	goto $label$32 
	
.LABEL $label$74
	$5 = (int_64)0
	$10 = [41]
	goto $label$10 
	
.LABEL $label$73
	$14 = [1]
	$13 = (int_64)0
	goto $label$29 
	
.LABEL $label$72
	*(($1 + [128])) = (int_64)0
	$12 = ((float_64)(CASTING float_64)(uint_64 $4) * (float_64)(float_64)0.7)
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$12 }
	$10 = [39]
	goto $label$10 
	
.LABEL $label$71
	$13 = (int_64)0
	goto $label$11 
	
.LABEL $label$70
	$13 = (Rounds 0)($12)
	$10 = [9]
	goto $label$10 
	
.LABEL $label$69
	$15 = (int_64)
	*($1 + [144]) = $15($4 - $13))
	$16 = ((uint_64)$5 / (uint_64)(int_64)10000)
	if ( ((uint_64)$16 <= (uint_64)$13) ){ goto $label$30 }
	$10 = [34]
	goto $label$10 
	
.LABEL $label$68
	$3 = ((uint_64)$15 > (uint_64)$13)
	$13 = (int_64)
	*(($1 + [144])) = (int_64))(( $15 ? $13($16 - $13)) : $3 ) - $13)
	$13 = ( $16 ? $4 : $3 )
	goto $label$31 
	
.LABEL $label$67
	$13 = (Rounds 0)($12)
	$10 = [38]
	goto $label$10 
	
.LABEL $label$66
	*($1 + [144]) = $13
	$13 = (int_64))($4 - $13)
	$10 = [10]
	goto $label$10 
	
.LABEL $label$65
	*(($1 + [152])) = ((int_64)$11 + (int_64)1)
	$14 = [0]
	$10 = [11]
	goto $label$10 
	
.LABEL $label$64
	CALL $4($2, ($1 + [120]), *($0))
	$17 = *($1 + [20])
	$2 = *($1 + [16])
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$28 }
	$10 = [12]
	goto $label$10 
	
.LABEL $label$63
	$18 = (($1 + [32]) + [56])
	$19 = ($0 + [60])
	$20 = ($0 + [40])
	$21 = ($0 + [32])
	$22 = (($1 + [216]) + [8])
	$10 = [13]
	goto $label$10 
	
.LABEL $label$62
	$4 = *($2)
	$8 = *($19)
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$24 }
	$10 = [14]
	goto $label$10 
	
.LABEL $label$61
	$3 = ($8 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$23 }
	$10 = [15]
	goto $label$10 
	
.LABEL $label$60
	$8 = $3
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$59
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$22 }
	$10 = [33]
	goto $label$10 
	
.LABEL $label$58
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$6), [9096])
	$4 = (int_64)0
	if ( ($14 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$57
	$7 = [0]
	$3 = CALL db_find_i64(*($21), *($20), (int_64)-1561324103627964416, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$21 }
	$10 = [17]
	goto $label$10 
	
.LABEL $label$56
	$7 = CALL $22($6, $3)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$6), [9096])
	$10 = [18]
	goto $label$10 
	
.LABEL $label$55
	$4 = (int_64)0
	if ( $14 ){ goto $label$20 }
	$10 = [19]
	goto $label$10 
	
.LABEL $label$54
	$11 = *($7 + [8])
	if ( (int_64)($11 == 0) ){ goto $label$17 }
	$10 = [20]
	goto $label$10 
	
.LABEL $label$53
	$4 = ((uint_64)((int_64)$11 * (int_64)$13) / (uint_64)$5)
	$10 = [21]
	goto $label$10 
	
.LABEL $label$52
	$11 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9271])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$6), [9306])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$5()), [9352])
	*($7 + [24]) = $4
	$4 = *($7 + [16])
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = ((int_64)$4 + (int_64)*($7 + [8]))
	$3 = ($7 + [48])
	*($1 + [232]) = *($3)
	$4 = *($7)
	CALL eosio_assert([1], [9403])
	*($22) = $18
	*($1 + [220]) = ($1 + [32])
	*($1 + [216]) = ($1 + [32])
	CALL $9(($1 + [216]), $7)
	CALL db_update_i64(*($7 + [60]), $11, ($1 + [32]), [56])
	$8 = ($0 + [48])
	if ( (uint_64)($4 <= *($8)) ){ goto $label$16 }
	$10 = [22]
	goto $label$10 
	
.LABEL $label$51
	*($8) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$10 = [23]
	goto $label$10 
	
.LABEL $label$50
	*($1 + [248]) = *($3)
	if ( (CALL $68(($1 + [232]), ($1 + [248]), [8]) == 0) ){ goto $label$15 }
	$10 = [24]
	goto $label$10 
	
.LABEL $label$49
	$7 = ($7 + [64])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$14 }
	$10 = [31]
	goto $label$10 
	
.LABEL $label$48
	$3 = CALL db_idx64_find_primary(*($21), *($20), (int_64)-1561324103627964416, ($1 + [240]), $4)
	*($7) = $3
	$10 = [25]
	goto $label$10 
	
.LABEL $label$47
	CALL db_idx64_update($3, $11, ($1 + [248]))
	$10 = [26]
	goto $label$10 
	
.LABEL $label$46
	$2 = ($2 + [8])
	if ( ((int_32)$2 != (int_32)$17) ){ goto $label$27 }
	$10 = [27]
	goto $label$10 
	
.LABEL $label$45
	$2 = *($1 + [16])
	$10 = [28]
	goto $label$10 
	
.LABEL $label$44
	if ( ($2 == 0) ){ goto $label$13 }
	$10 = [29]
	goto $label$10 
	
.LABEL $label$43
	*($1 + [20]) = $2
	CALL _ZdlPv($2)
	$10 = [30]
	goto $label$10 
	
.LABEL $label$42
	$global$0 = ($1 + [256])
	return 
	
.LABEL $label$41
	$10 = [4]
	goto $label$10 
	
.LABEL $label$40
	$10 = [1]
	goto $label$10 
	
.LABEL $label$39
	$10 = [1]
	goto $label$10 
	
.LABEL $label$38
	$10 = [0]
	goto $label$10 
	
.LABEL $label$37
	$10 = [5]
	goto $label$10 
	
.LABEL $label$36
	$10 = [2]
	goto $label$10 
	
.LABEL $label$35
	$10 = [40]
	goto $label$10 
	
.LABEL $label$34
	$10 = [36]
	goto $label$10 
	
.LABEL $label$33
	$10 = [8]
	goto $label$10 
	
.LABEL $label$32
	$10 = [9]
	goto $label$10 
	
.LABEL $label$31
	$10 = [10]
	goto $label$10 
	
.LABEL $label$30
	$10 = [10]
	goto $label$10 
	
.LABEL $label$29
	$10 = [11]
	goto $label$10 
	
.LABEL $label$28
	$10 = [28]
	goto $label$10 
	
.LABEL $label$27
	$10 = [13]
	goto $label$10 
	
.LABEL $label$26
	$10 = [16]
	goto $label$10 
	
.LABEL $label$25
	$10 = [14]
	goto $label$10 
	
.LABEL $label$24
	$10 = [16]
	goto $label$10 
	
.LABEL $label$23
	$10 = [32]
	goto $label$10 
	
.LABEL $label$22
	$10 = [16]
	goto $label$10 
	
.LABEL $label$21
	$10 = [18]
	goto $label$10 
	
.LABEL $label$20
	$10 = [21]
	goto $label$10 
	
.LABEL $label$19
	$10 = [21]
	goto $label$10 
	
.LABEL $label$18
	$10 = [19]
	goto $label$10 
	
.LABEL $label$17
	$10 = [21]
	goto $label$10 
	
.LABEL $label$16
	$10 = [23]
	goto $label$10 
	
.LABEL $label$15
	$10 = [26]
	goto $label$10 
	
.LABEL $label$14
	$10 = [25]
	goto $label$10 
	
.LABEL $label$13
	$10 = [30]
	goto $label$10 
	
.LABEL $label$12
	$10 = [37]
	goto $label$10 
	
.LABEL $label$11
	$10 = [38]
	goto $label$10 
	$10
}

void .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$1 = ($global$0 - [224])
	$global$0 = $1
	*($1 + [192]) = [8746]
	*($1 + [196]) = CALL $69([8746])
	*($1 + [32]) = *($1 + [192])
	$2 = CALL $2(($1 + [200]), ($1 + [32]))
	$3 = *($0)
	$4 = CALL $69([8386])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8788])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8385]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	$7 = *($2)
	*(($1 + [104])) = [0]
	*($1 + [80]) = $3
	*($1 + [72]) = $7
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	$5 = *(CALL $16(($1 + [72]), $5, [9077]))
	$2 = *($1 + [96])
	if ( ($2 == 0) ){ goto $label$7 }
	$8 = ($1 + [100])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($1 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($8) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_64)$5 < (int_64)1000000001) ){ goto $label$13 }
	$4 = CALL $69([8386])
	if ( ($4 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [8788])
	goto $label$16 
	
.LABEL $label$17
	if ( ($4 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (int_64)0
	
.LOOP $label$18:
	$6 = *(($4 + [8385]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$15
	$3 = (int_64)0
	
.LABEL $label$14
	$7 = ((int_64)$5 + (int_64)-1000000000)
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686017427387903) <= (int_64)9223372036854775807), [9202])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $3
	$6 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$5 = $3
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [9251])
	$5 = *($0)
	*($1 + [152]) = [8649]
	*($1 + [156]) = CALL $69([8649])
	*($1 + [24]) = *($1 + [152])
	*($1 + [144]) = *(CALL $2(($1 + [72]), ($1 + [24])))
	*($1 + [136]) = $5
	*($1 + [120]) = [8746]
	*($1 + [124]) = CALL $69([8746])
	*($1 + [16]) = *($1 + [120])
	$2 = CALL $2(($1 + [128]), ($1 + [16]))
	*($1 + [152]) = [8668]
	*($1 + [156]) = CALL $69([8668])
	*($1 + [8]) = *($1 + [152])
	$5 = *(CALL $2(($1 + [72]), ($1 + [8])))
	$3 = *($0)
	*($1 + [56]) = [9043]
	*($1 + [60]) = CALL $69([9043])
	*($1) = *($1 + [56])
	$0 = CALL $2(($1 + [64]), $1)
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$4 = CALL $69([9181])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$27 }
	*($1 + [40]) = ($4 << [1])
	$6 = (($1 + [40]) | [1])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($1 + [40]) = ($8 | [1])
	*($1 + [48]) = $6
	*($1 + [44]) = $4
	
.LABEL $label$26
	CALL memcpy($6, [9181], $4)
	
.LABEL $label$25
	*(($6 + $4)) = [0]
	*(($1 + [96])) = $9
	$4 = ($1 + [48])
	*(($1 + [112])) = *($4)
	*($4) = [0]
	*($1 + [72]) = $3
	*($1 + [88]) = $7
	*($1 + [80]) = *($0)
	*($1 + [104]) = *($1 + [40])
	*($1 + [40]) = (int_64)0
	$4 = CALL $17(($1 + [152]), ($1 + [136]), *($2), $5, ($1 + [72]))
	CALL $18(($1 + [208]), $4)
	$6 = *($1 + [208])
	CALL send_inline($6, (*($1 + [212]) - $6))
	$6 = *($1 + [208])
	if ( ($6 == 0) ){ goto $label$28 }
	*($1 + [212]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$30 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((*(($1 + [104])) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($1 + [112])))
	
.LABEL $label$31
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$13
	$global$0 = ($1 + [224])
	return (unreachable)
	
.LABEL $label$12
	CALL $63(($1 + [40]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9147])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $72($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [48]) = (int_64)0
	CALL $52(($3 + [32]), $5)
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $75($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$5 = CALL $17($6, $1, *($2), *($3), $4)
	$10 = ($5 + [40])
	$8 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$11 = ($8 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$5 = ($7 + $1)
	*((($8 = ($6 + $1)) + [-32])) = *(($5 + [-32]))
	*(($8 + [-40])) = *(($5 + [-40]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($3 = ($8 + [-16]))) = [0]
	$4 = ($5 + [-24])
	*($2) = *($4)
	$2 = ($5 + [-16])
	*($3) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*(($8 = ($8 + [-4]))) = [0]
	$3 = ($5 + [-12])
	*($2) = *($3)
	*($4) = (int_64)0
	$5 = ($5 + [-4])
	*($8) = *($5)
	*($5) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$5 = ($6 + $1)
	$8 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $8
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($8 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($8 + [-40])
	$1 = *(($8 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($8 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($1))
	*($2 + [192]) = ($0 + [32])
	CALL $8(($2 + [128]), ($2 + [192]), $1)
	$3 = [0]
	$4 = *($2 + [132])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = ( $4 ? [0] : ((int_64)*($1) == (int_64)*($4 + [48])) )
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [8554])
	CALL eosio_assert(((int_64)*($3 + [24]) != (int_64)0), [8601])
	$5 = *($3 + [24])
	$6 = *($0)
	CALL eosio_assert($4, [9271])
	$4 = *($2 + [192])
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$4), [9306])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$5()), [9352])
	*($3 + [24]) = (int_64)0
	$7 = ($3 + [48])
	*($2 + [200]) = *($7)
	$8 = *($3)
	CALL eosio_assert([1], [9403])
	*($2 + [56]) = (($2 + [128]) + [56])
	*($2 + [52]) = ($2 + [128])
	*($2 + [48]) = ($2 + [128])
	CALL $9(($2 + [48]), $3)
	CALL db_update_i64(*($3 + [60]), $6, ($2 + [128]), [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$2 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [112]) = *($7)
	if ( (CALL $68(($2 + [200]), ($2 + [112]), [8]) == 0) ){ goto $label$3 }
	$7 = ($3 + [64])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-1561324103627964416, ($2 + [32]), $8)
	*($7) = $3
	
.LABEL $label$4
	CALL db_idx64_update($3, $6, ($2 + [112]))
	
.LABEL $label$3
	$3 = CALL $69([8218])
	if ( ($3 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8788])
	goto $label$7 
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = (int_64)0
	
.LOOP $label$9:
	$4 = *(($3 + [8217]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$10
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$6 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9202])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$8 = $6
	$4 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$8 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9251])
	$8 = CALL current_time()
	*(($2 + [156])) = (int_64)0
	*(($2 + [172])) = (int_64)0
	*(($2 + [180])) = (int_64)0
	*($2 + [140]) = [0]
	*($2 + [144]) = [0]
	*($2 + [148 align=4]) = (int_64)0
	*($2 + [164 align=4]) = (int_64)0
	*($2 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	$8 = *($0)
	*($2 + [112]) = [8649]
	*($2 + [116]) = CALL $69([8649])
	*($2 + [24]) = *($2 + [112])
	*($2 + [120]) = *(CALL $2(($2 + [48]), ($2 + [24])))
	*($2 + [112]) = $8
	*($2 + [32]) = [8656]
	*($2 + [36]) = CALL $69([8656])
	*($2 + [16]) = *($2 + [32])
	*($2 + [200]) = *(CALL $2(($2 + [48]), ($2 + [16])))
	*($2 + [32]) = [8668]
	*($2 + [36]) = CALL $69([8668])
	*($2 + [8]) = *($2 + [32])
	*($2 + [104]) = *(CALL $2(($2 + [48]), ($2 + [8])))
	$8 = *($0)
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $69([8677])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2 + [32]) = ($7 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$18
	CALL memcpy($4, [8677], $3)
	
.LABEL $label$17
	*(($4 + $3)) = [0]
	*(($2 + [72])) = $9
	$3 = ($2 + [40])
	*((($2 + [48]) + [40])) = *($3)
	*($3) = [0]
	*($2 + [48]) = $8
	*($2 + [64]) = $5
	*($2 + [56]) = *($1)
	*($2 + [80]) = *($2 + [32])
	*($2 + [32]) = (int_64)0
	$3 = (($2 + [128]) + [40])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [172]))) ){ goto $label$21 }
	CALL $17($4, ($2 + [112]), *($2 + [200]), *($2 + [104]), ($2 + [48]))
	*($3) = (*($3) + [40])
	goto $label$20 
	
.LABEL $label$21
	CALL $25(($2 + [164]), ($2 + [112]), ($2 + [200]), ($2 + [104]), ($2 + [48]))
	
.LABEL $label$20
	if ( ((*(($2 + [80])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [88])))
	
.LABEL $label$22
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [40])))
	
.LABEL $label$23
	*(($2 + [148])) = [2]
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = *($1)
	$8 = *($0)
	CALL $26(($2 + [112]), ($2 + [128]))
	$3 = *($2 + [112])
	CALL send_deferred(($2 + [48]), $8, $3, (*($2 + [116]) - $3), [0])
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$24 }
	*($2 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$24
	CALL $27(($2 + [128]))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$16
	CALL $63(($2 + [32]))
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $44($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $37($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $45($2, $1)
	CALL $47(CALL $46(CALL $46($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9716]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9720])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9716]) = [1]
	$2 = ($2 << [16])
	*([0] + [9720]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9720])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9720]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9716]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9716]) = [1]
	$3 = ($3 << [16])
	*([0] + [9720]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9720])
	
.LABEL $label$10
	*([0] + [9720]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9170])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9175])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9175])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9175])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9175])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9175])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9175])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9175])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9175])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9175])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $43($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9175])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9175])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9175])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $43(CALL $42($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9175])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9175])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9175])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9175])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $72 (int_32 $0)
{
	return CALL $73([9724], $0)
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9619])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-1561324103627964416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9565])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9565])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $22(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $67())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $71($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18108])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17916]
	$3 = (((int_32)$1 * (int_32)[12]) + [17916])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $72($1)
	
.LABEL $label$2
	*(CALL $67()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $72(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $75($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-1561324103627964416, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9096])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $22($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-1561324103627964416, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [9096])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9462])
	*(($5 = CALL _Znwj([96])) + [80]) = $1
	$3 = CALL memcpy($5, *($3), [80])
	*($4 + [88]) = ($4 + [73])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($3 + [8])
	*($4 + [104]) = $3
	*($4 + [112]) = ($3 + [16])
	*($4 + [116]) = ($3 + [24])
	*($4 + [120]) = ($3 + [32])
	*($4 + [124]) = ($3 + [40])
	*($4 + [128]) = ($3 + [48])
	*($4 + [132]) = ($3 + [56])
	*($4 + [136]) = ($3 + [64])
	*($4 + [140]) = ($3 + [72])
	CALL $50(($4 + [104]), ($4 + [96]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-1573667770917191680, $2, (int_64)-1573667770917191680, $4, [73])
	*($3 + [84]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-1573667770917191680) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-1573667770917191679
	
.LABEL $label$1
	*($4 + [104]) = $3
	*($4) = (int_64)-1573667770917191680
	*($4 + [80]) = $6
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-1573667770917191680
	*($5 + [16]) = $6
	*($4 + [104]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $49(($1 + [24]), ($4 + [104]), $4, ($4 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [240])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8192])
	$2 = CALL $69([8386])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8788])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = *(($2 + [8385]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$12
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [8390])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8334])
	*($5 + [192]) = (int_64)0
	*($5 + [184]) = (int_64)0
	CALL memset(($5 + [16]), [0], [80])
	$2 = ($0 + [72])
	$7 = *(($0 + [100]))
	if ( ((int_32)$7 == (int_32)*(($0 + [96]))) ){ goto $label$14 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [9096])
	if ( $7 ){ goto $label$13 }
	$7 = ($5 + [16])
	goto $label$13 
	
.LABEL $label$14
	$7 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $3($2, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [9096])
	goto $label$13 
	
.LABEL $label$15
	$7 = ($5 + [16])
	
.LABEL $label$13
	CALL memcpy(($5 + [104]), $7, [80])
	if ( ((int_32)*($5 + [152]) != (int_32)[2]) ){ goto $label$17 }
	if ( ((int_64)*($5 + [144]) == (int_64)0) ){ goto $label$17 }
	$6 = *($3)
	*($5 + [184]) = $6
	goto $label$16 
	
.LABEL $label$17
	$6 = *($3)
	*($5 + [192]) = $6
	
.LABEL $label$16
	*($5 + [120]) = ((int_64)*($5 + [120]) + (int_64)$6)
	CALL $4($2, ($5 + [104]), *($0))
	$7 = ($0 + [32])
	*($5 + [8]) = $7
	CALL $8(($5 + [16]), ($5 + [8]), $1)
	$2 = *($5 + [20])
	if ( ($2 == 0) ){ goto $label$18 }
	$9 = ($2 + [48])
	if ( ((int_64)*($1) != (int_64)*($9)) ){ goto $label$18 }
	$8 = *($0)
	CALL eosio_assert([1], [9271])
	$7 = *($5 + [8])
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$7), [9306])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$5()), [9352])
	*($2 + [8]) = ((int_64)*($2 + [8]) + (int_64)*($5 + [192]))
	*($2 + [16]) = ((int_64)*($5 + [184]) + (int_64)*($2 + [16]))
	*($5 + [200]) = *($9)
	$6 = *($2)
	CALL eosio_assert([1], [9403])
	*($5 + [224]) = (($5 + [16]) + [56])
	*($5 + [220]) = ($5 + [16])
	*($5 + [216]) = ($5 + [16])
	CALL $9(($5 + [216]), $2)
	CALL db_update_i64(*($2 + [60]), $8, ($5 + [16]), [56])
	if ( (uint_64)($6 <= *($7 + [16])) ){ goto $label$19 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($5 + [232]) = *(($2 + [48]))
	if ( (CALL $68(($5 + [200]), ($5 + [232]), [8]) == 0) ){ goto $label$1 }
	$0 = ($2 + [64])
	$2 = *($0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$20 }
	$2 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-1561324103627964416, ($5 + [208]), $6)
	*($0) = $2
	
.LABEL $label$20
	CALL db_idx64_update($2, $8, ($5 + [232]))
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$18
	$6 = *($0)
	*($5 + [16]) = $0
	*($5 + [28]) = $1
	*($5 + [20]) = ($5 + [192])
	*($5 + [24]) = ($5 + [184])
	*($5 + [232]) = $6
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$5()), [9462])
	*($5 + [216]) = $7
	*($5 + [220]) = ($5 + [16])
	*($5 + [224]) = ($5 + [232])
	*(($2 = CALL _Znwj([72])) + [56]) = $7
	*($2 + [48]) = (int_64)0
	CALL $10(($5 + [216]), $2)
	*($5 + [208]) = $2
	$6 = *($2)
	*($5 + [216]) = $6
	$1 = *($2 + [60])
	*($5 + [200]) = $1
	$9 = ($0 + [60])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$22 }
	*($7 + [8]) = $6
	*($7 + [16]) = $1
	*($5 + [208]) = [0]
	*($7) = $2
	*($9) = ($7 + [24])
	$2 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $2 ){ goto $label$21 }
	goto $label$1 
	
.LABEL $label$22
	CALL $11(($0 + [56]), ($5 + [208]), ($5 + [216]), ($5 + [200]))
	$2 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$21
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [9096])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [9096])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9271])
	CALL $5($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $6($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9306])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9352])
	$1 = CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [9403])
	*($4 + [88]) = ($4 + [73])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [24])
	*($4 + [120]) = ($1 + [32])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [56])
	*($4 + [136]) = ($1 + [64])
	*($4 + [140]) = ($1 + [72])
	CALL $50(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [73])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-1573667770917191680) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-1573667770917191679
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8886])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8991])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8924])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8991])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9147])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $72($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $48(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-1573667770917191680
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-1573667770917191680
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $75($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$5 = ($global$0 - [192])
	$global$0 = $5
	CALL require_auth(*($1))
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $8
	$7 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8192])
	$2 = CALL $69([8218])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [8788])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = *(($2 + [8217]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$12
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [8308])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8334])
	*($5 + [184]) = [8360]
	*($5 + [188]) = CALL $69([8360])
	*($5 + [8]) = *($5 + [184])
	$2 = CALL $2(($5 + [96]), ($5 + [8]))
	if ( ((int_64)*($1) == (int_64)*($2)) ){ goto $label$13 }
	*($5 + [176]) = [8373]
	*($5 + [180]) = CALL $69([8373])
	*($5) = *($5 + [176])
	$2 = CALL $2(($5 + [16]), $5)
	if ( ((int_64)*($1) != (int_64)*($2)) ){ goto $label$1 }
	
.LABEL $label$13
	CALL memset(($5 + [16]), [0], [80])
	$2 = ($0 + [72])
	$7 = *(($0 + [100]))
	if ( ((int_32)$7 == (int_32)*(($0 + [96]))) ){ goto $label$15 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [9096])
	if ( $7 ){ goto $label$14 }
	$7 = ($5 + [16])
	goto $label$14 
	
.LABEL $label$15
	$7 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$7 = CALL $3($2, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [9096])
	goto $label$14 
	
.LABEL $label$16
	$7 = ($5 + [16])
	
.LABEL $label$14
	CALL memcpy(($5 + [96]), $7, [80])
	*($5 + [104]) = ((int_64)*($5 + [104]) + (int_64)*($3))
	CALL $4($2, ($5 + [96]), *($0))
	
.LABEL $label$1
	$global$0 = ($5 + [192])
}

void .FUNC $14 (int_32 $0)
{
	CALL require_auth(*($0))
	CALL $15($0)
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [192])
	$global$0 = $1
	*($1 + [136]) = [8656]
	*($1 + [140]) = CALL $69([8656])
	*($1 + [32]) = *($1 + [136])
	$2 = *(CALL $2(($1 + [72]), ($1 + [32])))
	$3 = *($0)
	$4 = CALL $69([8218])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8788])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8217]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($1 + [104])) = [0]
	*($1 + [80]) = $3
	*($1 + [72]) = $2
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	$5 = *(CALL $16(($1 + [72]), $5, [9077]))
	$7 = *($1 + [96])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($1 + [100])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($1 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_64)$5 < (int_64)10000001) ){ goto $label$13 }
	$4 = CALL $69([8218])
	if ( ($4 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [8788])
	goto $label$16 
	
.LABEL $label$17
	if ( ($4 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$2 = (int_64)0
	
.LOOP $label$18:
	$6 = *(($4 + [8217]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [8833])
	
.LABEL $label$19
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$15
	$2 = (int_64)0
	
.LABEL $label$14
	$3 = ((int_64)$5 + (int_64)-10000000)
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018417387903) <= (int_64)9223372036854775807), [9202])
	$5 = ((int_64)$2 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$2 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $2
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$5 = $2
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [9251])
	$5 = *($0)
	*($1 + [136]) = [8649]
	*($1 + [140]) = CALL $69([8649])
	*($1 + [24]) = *($1 + [136])
	*($1 + [128]) = *(CALL $2(($1 + [72]), ($1 + [24])))
	*($1 + [120]) = $5
	*($1 + [136]) = [8656]
	*($1 + [140]) = CALL $69([8656])
	*($1 + [16]) = *($1 + [136])
	$5 = *(CALL $2(($1 + [72]), ($1 + [16])))
	*($1 + [136]) = [8668]
	*($1 + [140]) = CALL $69([8668])
	*($1 + [8]) = *($1 + [136])
	$2 = *(CALL $2(($1 + [72]), ($1 + [8])))
	$10 = *($0)
	*($1 + [56]) = [9043]
	*($1 + [60]) = CALL $69([9043])
	*($1) = *($1 + [56])
	$7 = CALL $2(($1 + [64]), $1)
	*(($1 + [48])) = [0]
	*($1 + [40]) = (int_64)0
	$4 = CALL $69([9056])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$27 }
	*($1 + [40]) = ($4 << [1])
	$6 = (($1 + [40]) | [1])
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$0 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($1 + [40]) = ($0 | [1])
	*($1 + [48]) = $6
	*($1 + [44]) = $4
	
.LABEL $label$26
	CALL memcpy($6, [9056], $4)
	
.LABEL $label$25
	*(($6 + $4)) = [0]
	*(($1 + [96])) = $9
	$4 = ($1 + [48])
	*(($1 + [112])) = *($4)
	*($4) = [0]
	*($1 + [72]) = $10
	*($1 + [88]) = $3
	*($1 + [80]) = *($7)
	*($1 + [104]) = *($1 + [40])
	*($1 + [40]) = (int_64)0
	$4 = CALL $17(($1 + [136]), ($1 + [120]), $5, $2, ($1 + [72]))
	CALL $18(($1 + [176]), $4)
	$6 = *($1 + [176])
	CALL send_inline($6, (*($1 + [180]) - $6))
	$6 = *($1 + [176])
	if ( ($6 == 0) ){ goto $label$28 }
	*($1 + [180]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($4 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$30 }
	*(($4 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((*(($1 + [104])) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($1 + [112])))
	
.LABEL $label$31
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$13
	$global$0 = ($1 + [192])
	return (unreachable)
	
.LABEL $label$12
	CALL $63(($1 + [40]))
}

int_32 .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9096])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $39($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9096])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $37($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $38(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [32])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [40])), (int_64)-1561324103627964416, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $22($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $51(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [48])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9513])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [48]) = *(*($5 + [12]))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $9(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-1561324103627964416, *(*($0 + [8])), $8, $5, [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [48]))
	*($1 + [64]) = CALL db_idx64_store($8, (int_64)-1561324103627964416, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL require_auth(*($1))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($2) != (int_64)0), [8334])
	*($3 + [160]) = ($0 + [32])
	CALL $8(($3 + [80]), ($3 + [160]), $1)
	$4 = [0]
	$5 = *($3 + [84])
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ( $5 ? [0] : ((int_64)*($1) == (int_64)*($5 + [48])) )
	
.LABEL $label$2
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8416])
	CALL eosio_assert(((uint_64)*($2) <= (uint_64)((int_64)*($4 + [16]) + (int_64)*($4 + [8]))), [8454])
	$1 = CALL memset($3, [0], [80])
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	if ( ((int_32)$7 == (int_32)*(($0 + [96]))) ){ goto $label$5 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [9096])
	if ( $7 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $3($5, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [9096])
	goto $label$3 
	
.LABEL $label$4
	$7 = $1
	
.LABEL $label$3
	CALL memcpy(($1 + [80]), $7, [80])
	$8 = *($1 + [96])
	CALL eosio_assert(((uint_64)$8 >= (uint_64)*($2)), [8486])
	*($1 + [96]) = (int_64))($8 - *($2))
	CALL $4($5, ($1 + [80]), *($0))
	$9 = *($2)
	$8 = *(($4 + [8]))
	if ( ((uint_64)$8 >= (uint_64)$9) ){ goto $label$7 }
	$8 = ((int_64))($8 - $9) + (int_64)*(($4 + [16])))
	$10 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$10 = (int_64))($8 - $9)
	$8 = *(($4 + [16]))
	
.LABEL $label$6
	$9 = *($0)
	CALL eosio_assert($6, [9271])
	$0 = *($1 + [160])
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$0), [9306])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9352])
	*($4 + [8]) = $10
	*($4 + [16]) = $8
	*($4 + [32]) = ((int_64)*($2) + (int_64)*($4 + [32]))
	$2 = ($4 + [48])
	*($1 + [184]) = *($2)
	$8 = *($4)
	*($4 + [40]) = ((int_64)CALL current_time() + (int_64)86400000000)
	CALL eosio_assert(((int_64)$8 == (int_64)*($4)), [9403])
	*($1 + [176]) = ($1 + [56])
	*($1 + [172]) = $1
	*($1 + [168]) = $1
	CALL $9(($1 + [168]), $4)
	CALL db_update_i64(*($4 + [60]), $9, $1, [56])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($1 + [200]) = *($2)
	if ( (CALL $68(($1 + [184]), ($1 + [200]), [8]) == 0) ){ goto $label$1 }
	$2 = ($4 + [64])
	$4 = *($2)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$9 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-1561324103627964416, ($1 + [192]), $8)
	*($2) = $4
	
.LABEL $label$9
	CALL db_idx64_update($4, $9, ($1 + [200]))
	
.LABEL $label$1
	$global$0 = ($3 + [208])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	$2 = CALL memset($2, [0], [80])
	$3 = ($0 + [72])
	$4 = *(($0 + [100]))
	if ( ((int_32)$4 == (int_32)*(($0 + [96]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [9096])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $3($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [9096])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$6 }
	if ( $4 ){ goto $label$4 }
	*($2 + [128]) = [0]
	goto $label$4 
	
.LABEL $label$6
	*($2 + [128]) = [1]
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)*($2 + [128]) != (int_32)[1]) ){ goto $label$4 }
	*(($2 + [128])) = [2]
	*($2 + [120]) = ((int_64)CALL current_time() + (int_64)86400000000)
	
.LABEL $label$4
	CALL $4($3, ($2 + [80]), *($0))
	$global$0 = ($2 + [160])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9170])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [160])
	$global$0 = $1
	CALL require_auth(*($0))
	$1 = CALL memset($1, [0], [80])
	$2 = ($0 + [72])
	$3 = *(($0 + [100]))
	if ( ((int_32)$3 == (int_32)*(($0 + [96]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [9096])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-1573667770917191680, (int_64)-1573667770917191680)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $3($2, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [9096])
	goto $label$1 
	
.LABEL $label$2
	$3 = $1
	
.LABEL $label$1
	CALL memcpy(($1 + [80]), $3, [80])
	*($1 + [120]) = (int_64)1544407200000000
	CALL $4($2, ($1 + [80]), *($0))
	$global$0 = ($1 + [160])
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $72($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9170])
	CALL memcpy(($4 + [112]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9170])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$0 = *($4 + [112])
	*($4 + [128]) = *($4 + [120])
	*($4 + [136]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [136])), (int_32 ($4 + [128])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $75($2)
	
.LABEL $label$5
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $72($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $75($2)
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [96]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [56]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [100])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $72($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9170])
	CALL memcpy(($4 + [112]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = *($4 + [112])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [120])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $75($2)
	
.LABEL $label$5
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $72($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9170])
	CALL memcpy(($4 + [120]), $2, [1])
	*(($4 + [28])) = ($2 + [1])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [127]) = *($4 + [120])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [127])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $75($2)
	
.LABEL $label$5
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [108])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [104]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $72($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [144]) + [24]))) = (int_64)0
	*((($4 + [144]) + [40])) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [224]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $36(($4 + [16]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$9 = *($3)
	*((($4 + [192]) + [8])) = $9
	*(($3 = (($4 + [208]) + [8]))) = $9
	$10 = *($4)
	*($4 + [208]) = $10
	*($4 + [192]) = $10
	$11 = *($3)
	*(($9 = (($4 + [224]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($3) = *($8)
	*($4 + [208]) = *($4 + [160])
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	$8 = CALL $64(($4 + [192]), ($4 + [176]))
	*($9) = *($3)
	*($4 + [248]) = $1
	*($4 + [240]) = $0
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [248])), (int_32 ($4 + [240])), (int_32 ($4 + [224])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [192]) & [1]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $75($2)
	$3 = *(($4 + [112]))
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = *(($4 + [112]))
	if ( $3 ){ goto $label$9 }
	
.LABEL $label$10
	$3 = *(($4 + [72]))
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = ($4 + [116])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL _ZdlPv($2)
	$3 = *(($4 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = ($4 + [76])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $3
	
.LABEL $label$18
	*($5) = $3
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [176]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$5
	$global$0 = ($4 + [256])
	return $2
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $70(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9704])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $70(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $75($0)
	
.LABEL $label$1
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9175])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9175])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9175])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $41(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9170])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9170])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $54($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $65($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $65($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $63($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9697])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $37($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9170])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $72($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9704])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $72($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $75($0)
	
.LABEL $label$1
}