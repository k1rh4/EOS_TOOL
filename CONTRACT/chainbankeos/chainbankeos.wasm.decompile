(data (i32.const 8192) "\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8202) "1.0000\00")
(data (i32.const 8209) "1.1000\00")
(data (i32.const 8216) "1.2100\00")
(data (i32.const 8223) "1.3310\00")
(data (i32.const 8230) "1.4640\00")
(data (i32.const 8237) "1.6110\00")
(data (i32.const 8244) "1.7720\00")
(data (i32.const 8251) "1.9490\00")
(data (i32.const 8258) "2.1440\00")
(data (i32.const 8265) "2.3580\00")
(data (i32.const 8272) "2.5940\00")
(data (i32.const 8279) "2.8530\00%lld\00")
(data (i32.const 8291) "3.1380\00")
(data (i32.const 8298) "3.4520\00")
(data (i32.const 8305) "3.7970\00")
(data (i32.const 8312) "4.1770\00")
(data (i32.const 8319) "4.5950\00")
(data (i32.const 8326) "5.0540\00")
(data (i32.const 8333) "5.5600\00")
(data (i32.const 8340) "6.1160\00")
(data (i32.const 17052) "10000.0000\00")
(data (i32.const 17063) "2200.0000\00")
(data (i32.const 17073) "2500.0000\00")
(data (i32.const 17083) "2000.0000\00")
(data (i32.const 17093) "1500.0000\00")
(data (i32.const 17103) "1000.0000\00")
(data (i32.const 17113) "1800.0000\00")
(data (i32.const 17123) "3000.0000\00")
(data (i32.const 17133) "2800.0000\00")
(data (i32.const 17143) "1400.0000\00")
(data (i32.const 17153) "1200.0000\00")
(data (i32.const 17163) "20000.0000\00")
(data (i32.const 17174) "14000.0000\00")
(data (i32.const 17185) "12000.0000\00")
(data (i32.const 17196) "4500.0000\00")
(data (i32.const 17206) "4000.0000\00")
(data (i32.const 17216) "0.0000\00")
(data (i32.const 17223) "invalid symbol name\00")
(data (i32.const 17243) "invalid supply\00")
(data (i32.const 17258) "max-supply must be positive\00")
(data (i32.const 17286) "token with symbol already exists\00")
(data (i32.const 17319) "memo has more than 256 bytes\00")
(data (i32.const 17348) "token with symbol does not exist, create token before issue\00")
(data (i32.const 17408) "invalid quantity\00")
(data (i32.const 17425) "must issue positive quantity\00")
(data (i32.const 17454) "symbol precision mismatch\00")
(data (i32.const 17480) "quantity exceeds available supply\00")
(data (i32.const 17514) "cannot transfer to self\00")
(data (i32.const 17538) "to account does not exist\00")
(data (i32.const 17564) "unable to find key\00")
(data (i32.const 17583) "must transfer positive quantity\00")
(data (i32.const 17615) "no balance object found\00")
(data (i32.const 17639) "overdrawn balance\00")
(data (i32.const 17657) "must stake a positive amount\00")
(data (i32.const 17686) "must be token.\00")
(data (i32.const 17701) "Can\'t Send EOS.\00")
(data (i32.const 17717) "claim dividend.\00")
(data (i32.const 17733) "Claim collection bouns.\00")
(data (i32.const 17757) "Player not found.\00")
(data (i32.const 17775) "The coin not found.\00")
(data (i32.const 17795) "Unable to find player\00")
(data (i32.const 17817) "Unable to find coin.\00")
(data (i32.const 17838) "Pos Too Large.\00")
(data (i32.const 17853) ",\00")
(data (i32.const 17855) "Not Equal Type\00")
(data (i32.const 17870) "This coin cant exchange, it is frozen.\00")
(data (i32.const 17909) "Goal Is Gearter Than Input\00")
(data (i32.const 17936) "Cant\'t exactly divided.\00")
(data (i32.const 17960) "You have wrong cost.\00")
(data (i32.const 17981) "You have mining too much times.\00")
(data (i32.const 18013) "CCC mining.\00")
(data (i32.const 18032) "\10\8a\a2RQi\a0\be")
(data (i32.const 18040) "bouns \00")
(data (i32.const 18047) " CCC\00")
(data (i32.const 18052) "Trade id is not found\00")
(data (i32.const 18074) "Asset does not match\00")
(data (i32.const 18095) "CCC bouns\00")
(data (i32.const 18105) "Order matched.\00")
(data (i32.const 18120) "invalid token transfer\00")
(data (i32.const 18143) "only EOS token is allowed\00")
(data (i32.const 18169) "Must transfer a positive amount\00")
(data (i32.const 18201) "Error memo\00")
(data (i32.const 18212) "mining\00")
(data (i32.const 18219) "ref\00")
(data (i32.const 18223) "Sponsor is not an existing account.\00")
(data (i32.const 18259) "take_order\00")
(data (i32.const 18270) "multiplication overflow\00")
(data (i32.const 18294) "multiplication underflow\00")
(data (i32.const 18319) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18368) "attempt to add asset with different symbol\00")
(data (i32.const 18411) "addition underflow\00")
(data (i32.const 18430) "addition overflow\00")
(data (i32.const 18448) "write\00")
(data (i32.const 18454) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18513) "attempt to subtract asset with different symbol\00")
(data (i32.const 18561) "subtraction underflow\00")
(data (i32.const 18583) "subtraction overflow\00")
(data (i32.const 18604) "error reading iterator\00")
(data (i32.const 18627) "read\00")
(data (i32.const 18632) "cannot pass end iterator to erase\00")
(data (i32.const 18666) "cannot increment end iterator\00")
(data (i32.const 18696) "object passed to erase is not in multi_index\00")
(data (i32.const 18741) "cannot erase objects in table of another contract\00")
(data (i32.const 18791) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18844) "amount of coin can\'t be 0.\00")
(data (i32.const 18871) "Player dont have enough coins for sell order\00")
(data (i32.const 18916) "cannot pass end iterator to modify\00")
(data (i32.const 18951) "object passed to modify is not in multi_index\00")
(data (i32.const 18997) "cannot modify objects in table of another contract\00")
(data (i32.const 19048) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19107) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 19158) "get\00")
(data (i32.const 19162) "cannot create objects in table of another contract\00")
(data (i32.const 19213) "Account does not match\00")
(data (i32.const 19236) "Type error\00")
(data (i32.const 19247) "Not Enough Coin\00")
(data (i32.const 19263) "Bouns from collection claim.\00")
(data (i32.const 19292) "Only CCC token is allowed\00")
(data (i32.const 19318) "must transfer a positive amount\00")
(data (i32.const 19350) "Must have enough token.\00")
(data (i32.const 19374) "Entered buybackqueue before.\00")
(data (i32.const 19403) "Did not entered buybackqueue before.\00")
(data (i32.const 19440) "Must have enough token limit.\00")
(data (i32.const 19470) "Claim buyback.\00")
(data (i32.const 19485) "singleton does not exist\00")
(data (i32.const 19510) "divide by zero\00")
(data (i32.const 19525) "signed division overflow\00")
(data (i32.const 19550) "quantity 0\00")
(data (i32.const 19561) "testX\00")
(data (i32.const 19568) "\08\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 19580) "string is too long to be a valid name\00")
(data (i32.const 19618) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 19685) "character is not in allowed character set for names\00")
(data (i32.const 19737) "next primary key in table is at autoincrement limit\00")
(data (i32.const 19789) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 19843) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19904) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19984) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 20241) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "__floatuntidf" (func $fimport$10 (param i64 i64) (result f64)))
(import "env" "__fixunsdfti" (func $fimport$11 (param i32 f64)))
(import "env" "__multi3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$19 (param i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "current_time" (func $fimport$22 (result i64)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $158))
(export "_Znwj" (func $227))
(export "_ZdlPv" (func $229))
(export "_Znaj" (func $228))
(export "_ZdaPv" (func $230))
(export "_ZnwjSt11align_val_t" (func $231))
(export "_ZnajSt11align_val_t" (func $232))
(export "_ZdlPvSt11align_val_t" (func $233))
(export "_ZdaPvSt11align_val_t" (func $234))
(table $0 34 34 anyfunc)
(elem (i32.const 1) $57 $59 $61 $63 $65 $45 $67 $69 $71 $72 $74 $76 $78 $79 $81 $83 $84 $86 $88 $89 $90 $92 $93 $94 $96 $98 $100 $50 $101 $102 $4 $253 $255)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20327))
(global $global$2 i32 (i32.const 20327))


void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	*($1 + [64]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [19048])
	$8 = *($1 + [48])
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [40]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$2
	$3 = ($3 + [8])
	$8 = *($1 + [72])
	$7 = *(($1 + [76]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $270($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $274($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($1 + [32])
	$3 = *(($1 + [36]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	$7 = [32]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$8 = ($1 + [64])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$2
	$3 = *($8)
	$3 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$7 = (([-16] - $3) - $7)
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$7 = ($7 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$3 = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $7))
	$3 = *(($0 + [4]))
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	*($2 + [4]) = $7
	*($2) = $7
	*($2 + [8]) = $3
	CALL $184($2, $1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($2 + [4]), ($1 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $157($2, $8)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18448])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18448])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-7807295949623618560, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $128($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $225(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [19737])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = $2
	$6 = ($2 + [-16])
	$global$0 = $6
	CALL eosio_assert([1], [18448])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [-8]), ($1 + [8]), [8])
	$7 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)-7807295949623618560, *(*($0 + [8])), $7, $6, [16])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $246 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $245($0, $1, $2, CALL $265($2))
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18448])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *([0] + [8348])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *([0] + [8352])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($2 + [-12])
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *([0] + [8348])
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*([0] + [8352]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
}

void .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $183($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $185($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)4981848853652488192, *(*($0 + [8])), (int_64)4981848853652488192, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4981848853652488192) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4981848853652488192) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)4981848853652488193
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = (*($1) + [-22])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$27 }
	goto $label$33 
	
.LABEL $label$33
	*($2 + [12]) = [0]
	CALL $6($0, ($2 + [12]))
	*($2 + [12]) = [2]
	$4 = ($0 + [8])
	$5 = *($4)
	$3 = ($0 + [4])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$26 }
	*($1) = [2]
	$1 = ($1 + [4])
	*($3) = $1
	$3 = [10]
	*($2 + [12]) = [10]
	if ( ($1 <= $5) ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$32
	*($2 + [12]) = [1]
	CALL $6($0, ($2 + [12]))
	*($2 + [12]) = [14]
	$5 = ($0 + [8])
	$1 = *($5)
	$4 = ($0 + [4])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$24 }
	*($3) = [14]
	$3 = ($3 + [4])
	*($4) = $3
	$4 = [7]
	*($2 + [12]) = [7]
	if ( ($3 <= $1) ){ goto $label$23 }
	goto $label$14 
	
.LABEL $label$31
	*($2 + [12]) = [3]
	CALL $6($0, ($2 + [12]))
	*($2 + [12]) = [13]
	$4 = ($0 + [8])
	$5 = *($4)
	$3 = ($0 + [4])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$22 }
	*($1) = [13]
	$1 = ($1 + [4])
	*($3) = $1
	$3 = [16]
	*($2 + [12]) = [16]
	if ( ($1 <= $5) ){ goto $label$21 }
	goto $label$15 
	
.LABEL $label$30
	*($2 + [12]) = [17]
	CALL $6($0, ($2 + [12]))
	*($2 + [12]) = [5]
	$4 = ($0 + [8])
	$5 = *($4)
	$3 = ($0 + [4])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)$5) ){ goto $label$20 }
	*($1) = [5]
	$1 = ($1 + [4])
	*($3) = $1
	$3 = [20]
	*($2 + [12]) = [20]
	if ( ($1 <= $5) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$29
	*($2 + [12]) = [9]
	CALL $6($0, ($2 + [12]))
	$3 = ($0 + [4])
	$1 = *($3)
	*($2 + [12]) = [8]
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($1) = [8]
	*($3) = ($1 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$28
	*($2 + [12]) = [19]
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	*($2 + [12]) = [4]
	$4 = ($0 + [4])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$17 }
	*($3) = [4]
	*($4) = ($3 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$27
	CALL $7($0, $1)
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$26
	CALL $6($0, ($2 + [12]))
	$4 = *($4)
	$1 = *($3)
	$3 = [10]
	*($2 + [12]) = [10]
	if ( ((uint_32)$1 >= (uint_32)$4) ){ goto $label$1 }
	
.LABEL $label$25
	*($1) = $3
	*(($0 + [4])) = ($1 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$24
	CALL $6($0, ($2 + [12]))
	$1 = *($5)
	$3 = *($4)
	$4 = [7]
	*($2 + [12]) = [7]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$14 }
	
.LABEL $label$23
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [11]
	*($2 + [12]) = [11]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$22
	CALL $6($0, ($2 + [12]))
	$4 = *($4)
	$1 = *($3)
	$3 = [16]
	*($2 + [12]) = [16]
	if ( ((uint_32)$1 >= (uint_32)$4) ){ goto $label$15 }
	
.LABEL $label$21
	*($1) = $3
	*(($0 + [4])) = ($1 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$20
	CALL $6($0, ($2 + [12]))
	$4 = *($4)
	$1 = *($3)
	$3 = [20]
	*($2 + [12]) = [20]
	if ( ((uint_32)$1 >= (uint_32)$4) ){ goto $label$16 }
	
.LABEL $label$19
	*($1) = $3
	*(($0 + [4])) = ($1 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$18
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$17
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$16
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$15
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$14
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [11]
	*($2 + [12]) = [11]
	if ( ($3 <= $1) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [12]
	*($2 + [12]) = [12]
	if ( ($3 <= $1) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [12]
	*($2 + [12]) = [12]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$10 }
	
.LABEL $label$11
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [6]
	*($2 + [12]) = [6]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [6]
	*($2 + [12]) = [6]
	if ( ($3 <= $1) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [15]
	*($2 + [12]) = [15]
	if ( ($3 <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [15]
	*($2 + [12]) = [15]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [18]
	*($2 + [12]) = [18]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [18]
	*($2 + [12]) = [18]
	if ( ($3 <= $1) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $6($0, ($2 + [12]))
	$1 = *(($0 + [8]))
	$3 = *(($0 + [4]))
	$4 = [21]
	*($2 + [12]) = [21]
	if ( ($3 <= $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	*($3) = $4
	$3 = ($3 + [4])
	*(($0 + [4])) = $3
	$4 = [21]
	*($2 + [12]) = [21]
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	
.LABEL $label$3
	*($3) = $4
	*(($0 + [4])) = ($3 + [4])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$2
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$1
	CALL $6($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	$3
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [320])
	$global$0 = $2
	$3 = *($1)
	if ( (uint_64)($3 <= (int_64)408121) ){ goto $label$105 }
	*(($2 + [312])) = [0]
	*($2 + [304]) = (int_64)0
	$1 = CALL $265([8202])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$104 }
	*($2 + [304]) = ($1 << [1])
	$4 = (($2 + [304]) | [1])
	$5 = ($2 + [304])
	if ( $1 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	if ( (uint_64)($3 <= (int_64)386641) ){ goto $label$106 }
	*(($2 + [296])) = [0]
	*($2 + [288]) = (int_64)0
	$1 = CALL $265([8209])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$100 }
	*($2 + [288]) = ($1 << [1])
	$4 = (($2 + [288]) | [1])
	$5 = ($2 + [288])
	if ( $1 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$106
	if ( (uint_64)($3 <= (int_64)365161) ){ goto $label$101 }
	*(($2 + [280])) = [0]
	*($2 + [272]) = (int_64)0
	$1 = CALL $265([8216])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$96 }
	*($2 + [272]) = ($1 << [1])
	$4 = (($2 + [272]) | [1])
	$5 = ($2 + [272])
	if ( $1 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$104
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [304]) = ($6 | [1])
	*($2 + [312]) = $4
	*($2 + [308]) = $1
	$5 = ($2 + [304])
	
.LABEL $label$103
	CALL memcpy($4, [8202], $1)
	
.LABEL $label$102
	*(($4 + $1)) = [0]
	$1 = *($2 + [304])
	if ( ($1 & [1]) ){ goto $label$109 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$108 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$110:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$111 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$111
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$110 }
	goto $label$107 
	
.LABEL $label$109
	$4 = *($2 + [308])
	if ( ($4 == 0) ){ goto $label$108 }
	$1 = *(($2 + [312]))
	$7 = (int_64)0
	
.LOOP $label$112:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$113 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$113
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$112 }
	goto $label$107 
	
.LABEL $label$108
	$7 = (int_64)0
	
.LABEL $label$107
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$116:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$115 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$117 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$117
	$3 = $8
	
.LOOP $label$118:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$115 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$118 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$115
	$4 = [0]
	
.LABEL $label$114
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [304]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [312])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$101
	if ( (uint_64)($3 <= (int_64)343681) ){ goto $label$97 }
	*(($2 + [264])) = [0]
	*($2 + [256]) = (int_64)0
	$1 = CALL $265([8223])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$92 }
	*($2 + [256]) = ($1 << [1])
	$4 = (($2 + [256]) | [1])
	$5 = ($2 + [256])
	if ( $1 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$100
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [288]) = ($6 | [1])
	*($2 + [296]) = $4
	*($2 + [292]) = $1
	$5 = ($2 + [288])
	
.LABEL $label$99
	CALL memcpy($4, [8209], $1)
	
.LABEL $label$98
	*(($4 + $1)) = [0]
	$1 = *($2 + [288])
	if ( ($1 & [1]) ){ goto $label$121 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$120 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$122:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$123 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$123
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$122 }
	goto $label$119 
	
.LABEL $label$121
	$4 = *($2 + [292])
	if ( ($4 == 0) ){ goto $label$120 }
	$1 = *(($2 + [296]))
	$7 = (int_64)0
	
.LOOP $label$124:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$125 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$125
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$124 }
	goto $label$119 
	
.LABEL $label$120
	$7 = (int_64)0
	
.LABEL $label$119
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$128:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$127 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$129 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$128 }
	goto $label$126 
	
.LABEL $label$129
	$3 = $8
	
.LOOP $label$130:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$127 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$130 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$128 }
	goto $label$126 
	
.LABEL $label$127
	$4 = [0]
	
.LABEL $label$126
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [296])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$97
	if ( (uint_64)($3 <= (int_64)322201) ){ goto $label$93 }
	*(($2 + [248])) = [0]
	*($2 + [240]) = (int_64)0
	$1 = CALL $265([8230])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$88 }
	*($2 + [240]) = ($1 << [1])
	$4 = (($2 + [240]) | [1])
	$5 = ($2 + [240])
	if ( $1 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$96
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [272]) = ($6 | [1])
	*($2 + [280]) = $4
	*($2 + [276]) = $1
	$5 = ($2 + [272])
	
.LABEL $label$95
	CALL memcpy($4, [8216], $1)
	
.LABEL $label$94
	*(($4 + $1)) = [0]
	$1 = *($2 + [272])
	if ( ($1 & [1]) ){ goto $label$133 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$132 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$134:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$135 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$135
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$134 }
	goto $label$131 
	
.LABEL $label$133
	$4 = *($2 + [276])
	if ( ($4 == 0) ){ goto $label$132 }
	$1 = *(($2 + [280]))
	$7 = (int_64)0
	
.LOOP $label$136:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$137 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$137
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$136 }
	goto $label$131 
	
.LABEL $label$132
	$7 = (int_64)0
	
.LABEL $label$131
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$140:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$139 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$141 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$140 }
	goto $label$138 
	
.LABEL $label$141
	$3 = $8
	
.LOOP $label$142:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$139 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$142 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$140 }
	goto $label$138 
	
.LABEL $label$139
	$4 = [0]
	
.LABEL $label$138
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [280])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$93
	if ( (uint_64)($3 <= (int_64)300721) ){ goto $label$89 }
	*(($2 + [232])) = [0]
	*($2 + [224]) = (int_64)0
	$1 = CALL $265([8237])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$84 }
	*($2 + [224]) = ($1 << [1])
	$4 = (($2 + [224]) | [1])
	$5 = ($2 + [224])
	if ( $1 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$92
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [256]) = ($6 | [1])
	*($2 + [264]) = $4
	*($2 + [260]) = $1
	$5 = ($2 + [256])
	
.LABEL $label$91
	CALL memcpy($4, [8223], $1)
	
.LABEL $label$90
	*(($4 + $1)) = [0]
	$1 = *($2 + [256])
	if ( ($1 & [1]) ){ goto $label$145 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$144 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$146:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$147 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$147
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$146 }
	goto $label$143 
	
.LABEL $label$145
	$4 = *($2 + [260])
	if ( ($4 == 0) ){ goto $label$144 }
	$1 = *(($2 + [264]))
	$7 = (int_64)0
	
.LOOP $label$148:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$149 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$149
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$148 }
	goto $label$143 
	
.LABEL $label$144
	$7 = (int_64)0
	
.LABEL $label$143
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$152:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$151 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$153 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$152 }
	goto $label$150 
	
.LABEL $label$153
	$3 = $8
	
.LOOP $label$154:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$151 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$154 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$152 }
	goto $label$150 
	
.LABEL $label$151
	$4 = [0]
	
.LABEL $label$150
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [264])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$89
	if ( (uint_64)($3 <= (int_64)279241) ){ goto $label$85 }
	*(($2 + [216])) = [0]
	*($2 + [208]) = (int_64)0
	$1 = CALL $265([8244])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$80 }
	*($2 + [208]) = ($1 << [1])
	$4 = (($2 + [208]) | [1])
	$5 = ($2 + [208])
	if ( $1 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$88
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [240]) = ($6 | [1])
	*($2 + [248]) = $4
	*($2 + [244]) = $1
	$5 = ($2 + [240])
	
.LABEL $label$87
	CALL memcpy($4, [8230], $1)
	
.LABEL $label$86
	*(($4 + $1)) = [0]
	$1 = *($2 + [240])
	if ( ($1 & [1]) ){ goto $label$157 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$156 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$158:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$159 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$159
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$158 }
	goto $label$155 
	
.LABEL $label$157
	$4 = *($2 + [244])
	if ( ($4 == 0) ){ goto $label$156 }
	$1 = *(($2 + [248]))
	$7 = (int_64)0
	
.LOOP $label$160:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$161 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$161
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$160 }
	goto $label$155 
	
.LABEL $label$156
	$7 = (int_64)0
	
.LABEL $label$155
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$164:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$163 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$165 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$164 }
	goto $label$162 
	
.LABEL $label$165
	$3 = $8
	
.LOOP $label$166:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$163 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$166 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$164 }
	goto $label$162 
	
.LABEL $label$163
	$4 = [0]
	
.LABEL $label$162
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [240]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [248])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$85
	if ( (uint_64)($3 <= (int_64)257761) ){ goto $label$81 }
	*(($2 + [200])) = [0]
	*($2 + [192]) = (int_64)0
	$1 = CALL $265([8251])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$76 }
	*($2 + [192]) = ($1 << [1])
	$4 = (($2 + [192]) | [1])
	$5 = ($2 + [192])
	if ( $1 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$84
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [224]) = ($6 | [1])
	*($2 + [232]) = $4
	*($2 + [228]) = $1
	$5 = ($2 + [224])
	
.LABEL $label$83
	CALL memcpy($4, [8237], $1)
	
.LABEL $label$82
	*(($4 + $1)) = [0]
	$1 = *($2 + [224])
	if ( ($1 & [1]) ){ goto $label$169 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$168 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$170:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$171 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$171
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$170 }
	goto $label$167 
	
.LABEL $label$169
	$4 = *($2 + [228])
	if ( ($4 == 0) ){ goto $label$168 }
	$1 = *(($2 + [232]))
	$7 = (int_64)0
	
.LOOP $label$172:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$173 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$173
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$172 }
	goto $label$167 
	
.LABEL $label$168
	$7 = (int_64)0
	
.LABEL $label$167
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$176:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$175 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$177 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$176 }
	goto $label$174 
	
.LABEL $label$177
	$3 = $8
	
.LOOP $label$178:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$175 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$178 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$176 }
	goto $label$174 
	
.LABEL $label$175
	$4 = [0]
	
.LABEL $label$174
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [232])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$81
	if ( (uint_64)($3 <= (int_64)236281) ){ goto $label$77 }
	*(($2 + [184])) = [0]
	*($2 + [176]) = (int_64)0
	$1 = CALL $265([8258])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$72 }
	*($2 + [176]) = ($1 << [1])
	$4 = (($2 + [176]) | [1])
	$5 = ($2 + [176])
	if ( $1 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$80
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [208]) = ($6 | [1])
	*($2 + [216]) = $4
	*($2 + [212]) = $1
	$5 = ($2 + [208])
	
.LABEL $label$79
	CALL memcpy($4, [8244], $1)
	
.LABEL $label$78
	*(($4 + $1)) = [0]
	$1 = *($2 + [208])
	if ( ($1 & [1]) ){ goto $label$181 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$180 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$182:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$183 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$183
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$182 }
	goto $label$179 
	
.LABEL $label$181
	$4 = *($2 + [212])
	if ( ($4 == 0) ){ goto $label$180 }
	$1 = *(($2 + [216]))
	$7 = (int_64)0
	
.LOOP $label$184:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$185 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$185
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$184 }
	goto $label$179 
	
.LABEL $label$180
	$7 = (int_64)0
	
.LABEL $label$179
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$188:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$187 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$189 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$189
	$3 = $8
	
.LOOP $label$190:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$187 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$190 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	$4 = [0]
	
.LABEL $label$186
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [216])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$77
	if ( (uint_64)($3 <= (int_64)214801) ){ goto $label$73 }
	*(($2 + [168])) = [0]
	*($2 + [160]) = (int_64)0
	$1 = CALL $265([8265])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$68 }
	*($2 + [160]) = ($1 << [1])
	$4 = (($2 + [160]) | [1])
	$5 = ($2 + [160])
	if ( $1 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$76
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [192]) = ($6 | [1])
	*($2 + [200]) = $4
	*($2 + [196]) = $1
	$5 = ($2 + [192])
	
.LABEL $label$75
	CALL memcpy($4, [8251], $1)
	
.LABEL $label$74
	*(($4 + $1)) = [0]
	$1 = *($2 + [192])
	if ( ($1 & [1]) ){ goto $label$193 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$192 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$194:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$195 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$195
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$194 }
	goto $label$191 
	
.LABEL $label$193
	$4 = *($2 + [196])
	if ( ($4 == 0) ){ goto $label$192 }
	$1 = *(($2 + [200]))
	$7 = (int_64)0
	
.LOOP $label$196:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$197 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$197
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$196 }
	goto $label$191 
	
.LABEL $label$192
	$7 = (int_64)0
	
.LABEL $label$191
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$200:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$199 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$201 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$200 }
	goto $label$198 
	
.LABEL $label$201
	$3 = $8
	
.LOOP $label$202:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$199 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$202 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$200 }
	goto $label$198 
	
.LABEL $label$199
	$4 = [0]
	
.LABEL $label$198
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [200])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$73
	if ( (uint_64)($3 <= (int_64)193321) ){ goto $label$69 }
	*(($2 + [152])) = [0]
	*($2 + [144]) = (int_64)0
	$1 = CALL $265([8272])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$64 }
	*($2 + [144]) = ($1 << [1])
	$4 = (($2 + [144]) | [1])
	$5 = ($2 + [144])
	if ( $1 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$72
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [176]) = ($6 | [1])
	*($2 + [184]) = $4
	*($2 + [180]) = $1
	$5 = ($2 + [176])
	
.LABEL $label$71
	CALL memcpy($4, [8258], $1)
	
.LABEL $label$70
	*(($4 + $1)) = [0]
	$1 = *($2 + [176])
	if ( ($1 & [1]) ){ goto $label$205 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$204 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$206:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$207 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$207
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$206 }
	goto $label$203 
	
.LABEL $label$205
	$4 = *($2 + [180])
	if ( ($4 == 0) ){ goto $label$204 }
	$1 = *(($2 + [184]))
	$7 = (int_64)0
	
.LOOP $label$208:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$209 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$209
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$208 }
	goto $label$203 
	
.LABEL $label$204
	$7 = (int_64)0
	
.LABEL $label$203
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$212:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$211 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$213 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$212 }
	goto $label$210 
	
.LABEL $label$213
	$3 = $8
	
.LOOP $label$214:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$211 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$214 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$212 }
	goto $label$210 
	
.LABEL $label$211
	$4 = [0]
	
.LABEL $label$210
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [184])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$69
	if ( (uint_64)($3 <= (int_64)171841) ){ goto $label$65 }
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$1 = CALL $265([8279])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$60 }
	*($2 + [128]) = ($1 << [1])
	$4 = (($2 + [128]) | [1])
	$5 = ($2 + [128])
	if ( $1 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$68
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [160]) = ($6 | [1])
	*($2 + [168]) = $4
	*($2 + [164]) = $1
	$5 = ($2 + [160])
	
.LABEL $label$67
	CALL memcpy($4, [8265], $1)
	
.LABEL $label$66
	*(($4 + $1)) = [0]
	$1 = *($2 + [160])
	if ( ($1 & [1]) ){ goto $label$217 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$216 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$218:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$219 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$219
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$218 }
	goto $label$215 
	
.LABEL $label$217
	$4 = *($2 + [164])
	if ( ($4 == 0) ){ goto $label$216 }
	$1 = *(($2 + [168]))
	$7 = (int_64)0
	
.LOOP $label$220:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$221 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$221
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$220 }
	goto $label$215 
	
.LABEL $label$216
	$7 = (int_64)0
	
.LABEL $label$215
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$224:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$223 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$225 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$224 }
	goto $label$222 
	
.LABEL $label$225
	$3 = $8
	
.LOOP $label$226:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$223 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$226 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$224 }
	goto $label$222 
	
.LABEL $label$223
	$4 = [0]
	
.LABEL $label$222
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [168])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$65
	if ( (uint_64)($3 <= (int_64)150361) ){ goto $label$61 }
	*(($2 + [120])) = [0]
	*($2 + [112]) = (int_64)0
	$1 = CALL $265([8291])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$56 }
	*($2 + [112]) = ($1 << [1])
	$4 = (($2 + [112]) | [1])
	$5 = ($2 + [112])
	if ( $1 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$64
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [144]) = ($6 | [1])
	*($2 + [152]) = $4
	*($2 + [148]) = $1
	$5 = ($2 + [144])
	
.LABEL $label$63
	CALL memcpy($4, [8272], $1)
	
.LABEL $label$62
	*(($4 + $1)) = [0]
	$1 = *($2 + [144])
	if ( ($1 & [1]) ){ goto $label$229 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$228 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$230:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$231 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$231
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$230 }
	goto $label$227 
	
.LABEL $label$229
	$4 = *($2 + [148])
	if ( ($4 == 0) ){ goto $label$228 }
	$1 = *(($2 + [152]))
	$7 = (int_64)0
	
.LOOP $label$232:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$233 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$233
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$232 }
	goto $label$227 
	
.LABEL $label$228
	$7 = (int_64)0
	
.LABEL $label$227
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$236:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$235 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$237 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$236 }
	goto $label$234 
	
.LABEL $label$237
	$3 = $8
	
.LOOP $label$238:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$235 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$238 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$236 }
	goto $label$234 
	
.LABEL $label$235
	$4 = [0]
	
.LABEL $label$234
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [152])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$61
	if ( (uint_64)($3 <= (int_64)128881) ){ goto $label$57 }
	*(($2 + [104])) = [0]
	*($2 + [96]) = (int_64)0
	$1 = CALL $265([8298])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$52 }
	*($2 + [96]) = ($1 << [1])
	$4 = (($2 + [96]) | [1])
	$5 = ($2 + [96])
	if ( $1 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$60
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [128]) = ($6 | [1])
	*($2 + [136]) = $4
	*($2 + [132]) = $1
	$5 = ($2 + [128])
	
.LABEL $label$59
	CALL memcpy($4, [8279], $1)
	
.LABEL $label$58
	*(($4 + $1)) = [0]
	$1 = *($2 + [128])
	if ( ($1 & [1]) ){ goto $label$241 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$240 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$242:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$243 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$243
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$242 }
	goto $label$239 
	
.LABEL $label$241
	$4 = *($2 + [132])
	if ( ($4 == 0) ){ goto $label$240 }
	$1 = *(($2 + [136]))
	$7 = (int_64)0
	
.LOOP $label$244:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$245 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$245
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$244 }
	goto $label$239 
	
.LABEL $label$240
	$7 = (int_64)0
	
.LABEL $label$239
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$248:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$247 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$249 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$248 }
	goto $label$246 
	
.LABEL $label$249
	$3 = $8
	
.LOOP $label$250:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$247 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$250 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$248 }
	goto $label$246 
	
.LABEL $label$247
	$4 = [0]
	
.LABEL $label$246
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [136])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$57
	if ( (uint_64)($3 <= (int_64)107401) ){ goto $label$53 }
	*(($2 + [88])) = [0]
	*($2 + [80]) = (int_64)0
	$1 = CALL $265([8305])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$48 }
	*($2 + [80]) = ($1 << [1])
	$4 = (($2 + [80]) | [1])
	$5 = ($2 + [80])
	if ( $1 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$56
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [112]) = ($6 | [1])
	*($2 + [120]) = $4
	*($2 + [116]) = $1
	$5 = ($2 + [112])
	
.LABEL $label$55
	CALL memcpy($4, [8291], $1)
	
.LABEL $label$54
	*(($4 + $1)) = [0]
	$1 = *($2 + [112])
	if ( ($1 & [1]) ){ goto $label$253 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$252 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$254:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$255 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$255
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$254 }
	goto $label$251 
	
.LABEL $label$253
	$4 = *($2 + [116])
	if ( ($4 == 0) ){ goto $label$252 }
	$1 = *(($2 + [120]))
	$7 = (int_64)0
	
.LOOP $label$256:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$257 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$257
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$256 }
	goto $label$251 
	
.LABEL $label$252
	$7 = (int_64)0
	
.LABEL $label$251
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$260:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$259 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$261 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$260 }
	goto $label$258 
	
.LABEL $label$261
	$3 = $8
	
.LOOP $label$262:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$259 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$262 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$260 }
	goto $label$258 
	
.LABEL $label$259
	$4 = [0]
	
.LABEL $label$258
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [120])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$53
	if ( (uint_64)($3 <= (int_64)85921) ){ goto $label$49 }
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$1 = CALL $265([8312])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$44 }
	*($2 + [64]) = ($1 << [1])
	$4 = (($2 + [64]) | [1])
	$5 = ($2 + [64])
	if ( $1 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$52
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [96]) = ($6 | [1])
	*($2 + [104]) = $4
	*($2 + [100]) = $1
	$5 = ($2 + [96])
	
.LABEL $label$51
	CALL memcpy($4, [8298], $1)
	
.LABEL $label$50
	*(($4 + $1)) = [0]
	$1 = *($2 + [96])
	if ( ($1 & [1]) ){ goto $label$265 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$264 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$266:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$267 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$267
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$266 }
	goto $label$263 
	
.LABEL $label$265
	$4 = *($2 + [100])
	if ( ($4 == 0) ){ goto $label$264 }
	$1 = *(($2 + [104]))
	$7 = (int_64)0
	
.LOOP $label$268:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$269 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$269
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$268 }
	goto $label$263 
	
.LABEL $label$264
	$7 = (int_64)0
	
.LABEL $label$263
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$272:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$271 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$273 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$272 }
	goto $label$270 
	
.LABEL $label$273
	$3 = $8
	
.LOOP $label$274:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$271 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$274 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$272 }
	goto $label$270 
	
.LABEL $label$271
	$4 = [0]
	
.LABEL $label$270
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [104])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$49
	if ( (uint_64)($3 <= (int_64)64441) ){ goto $label$45 }
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$1 = CALL $265([8319])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$40 }
	*($2 + [48]) = ($1 << [1])
	$4 = (($2 + [48]) | [1])
	$5 = ($2 + [48])
	if ( $1 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$48
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [80]) = ($6 | [1])
	*($2 + [88]) = $4
	*($2 + [84]) = $1
	$5 = ($2 + [80])
	
.LABEL $label$47
	CALL memcpy($4, [8305], $1)
	
.LABEL $label$46
	*(($4 + $1)) = [0]
	$1 = *($2 + [80])
	if ( ($1 & [1]) ){ goto $label$277 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$276 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$278:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$279 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$279
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$278 }
	goto $label$275 
	
.LABEL $label$277
	$4 = *($2 + [84])
	if ( ($4 == 0) ){ goto $label$276 }
	$1 = *(($2 + [88]))
	$7 = (int_64)0
	
.LOOP $label$280:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$281 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$281
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$280 }
	goto $label$275 
	
.LABEL $label$276
	$7 = (int_64)0
	
.LABEL $label$275
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$284:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$283 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$285 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$284 }
	goto $label$282 
	
.LABEL $label$285
	$3 = $8
	
.LOOP $label$286:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$283 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$286 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$284 }
	goto $label$282 
	
.LABEL $label$283
	$4 = [0]
	
.LABEL $label$282
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [88])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$45
	if ( (uint_64)($3 <= (int_64)42961) ){ goto $label$41 }
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$1 = CALL $265([8326])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$36 }
	*($2 + [32]) = ($1 << [1])
	$4 = (($2 + [32]) | [1])
	$5 = ($2 + [32])
	if ( $1 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$44
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [64]) = ($6 | [1])
	*($2 + [72]) = $4
	*($2 + [68]) = $1
	$5 = ($2 + [64])
	
.LABEL $label$43
	CALL memcpy($4, [8312], $1)
	
.LABEL $label$42
	*(($4 + $1)) = [0]
	$1 = *($2 + [64])
	if ( ($1 & [1]) ){ goto $label$289 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$288 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$290:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$291 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$291
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$290 }
	goto $label$287 
	
.LABEL $label$289
	$4 = *($2 + [68])
	if ( ($4 == 0) ){ goto $label$288 }
	$1 = *(($2 + [72]))
	$7 = (int_64)0
	
.LOOP $label$292:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$293 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$293
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$292 }
	goto $label$287 
	
.LABEL $label$288
	$7 = (int_64)0
	
.LABEL $label$287
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$296:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$295 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$297 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$297
	$3 = $8
	
.LOOP $label$298:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$295 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$298 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$4 = [0]
	
.LABEL $label$294
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [72])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$41
	if ( (uint_64)($3 <= (int_64)21481) ){ goto $label$37 }
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$1 = CALL $265([8333])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$33 }
	*($2 + [16]) = ($1 << [1])
	$4 = (($2 + [16]) | [1])
	$5 = ($2 + [16])
	if ( $1 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$40
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [48]) = ($6 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $1
	$5 = ($2 + [48])
	
.LABEL $label$39
	CALL memcpy($4, [8319], $1)
	
.LABEL $label$38
	*(($4 + $1)) = [0]
	$1 = *($2 + [48])
	if ( ($1 & [1]) ){ goto $label$301 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$300 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$302:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$303 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$303
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$302 }
	goto $label$299 
	
.LABEL $label$301
	$4 = *($2 + [52])
	if ( ($4 == 0) ){ goto $label$300 }
	$1 = *(($2 + [56]))
	$7 = (int_64)0
	
.LOOP $label$304:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$305 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$305
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$304 }
	goto $label$299 
	
.LABEL $label$300
	$7 = (int_64)0
	
.LABEL $label$299
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$308:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$307 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$309 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$308 }
	goto $label$306 
	
.LABEL $label$309
	$3 = $8
	
.LOOP $label$310:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$307 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$310 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$308 }
	goto $label$306 
	
.LABEL $label$307
	$4 = [0]
	
.LABEL $label$306
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [56])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$37
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $265([8340])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$30 }
	*($2) = ($1 << [1])
	$4 = ($2 | [1])
	$5 = $2
	if ( $1 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$36
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [32]) = ($6 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $1
	$5 = ($2 + [32])
	
.LABEL $label$35
	CALL memcpy($4, [8326], $1)
	
.LABEL $label$34
	*(($4 + $1)) = [0]
	$1 = *($2 + [32])
	if ( ($1 & [1]) ){ goto $label$313 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$312 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$314:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$315 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$315
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$314 }
	goto $label$311 
	
.LABEL $label$313
	$4 = *($2 + [36])
	if ( ($4 == 0) ){ goto $label$312 }
	$1 = *(($2 + [40]))
	$7 = (int_64)0
	
.LOOP $label$316:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$317 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$317
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$316 }
	goto $label$311 
	
.LABEL $label$312
	$7 = (int_64)0
	
.LABEL $label$311
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$320:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$319 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$321 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$320 }
	goto $label$318 
	
.LABEL $label$321
	$3 = $8
	
.LOOP $label$322:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$319 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$322 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$320 }
	goto $label$318 
	
.LABEL $label$319
	$4 = [0]
	
.LABEL $label$318
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [40])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$33
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2 + [16]) = ($6 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $1
	$5 = ($2 + [16])
	
.LABEL $label$32
	CALL memcpy($4, [8333], $1)
	
.LABEL $label$31
	*(($4 + $1)) = [0]
	$1 = *($2 + [16])
	if ( ($1 & [1]) ){ goto $label$27 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$25 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$323:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$324 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$324
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$323 }
	goto $label$24 
	
.LABEL $label$30
	$6 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $1
	$5 = $2
	
.LABEL $label$29
	CALL memcpy($4, [8340], $1)
	
.LABEL $label$28
	*(($4 + $1)) = [0]
	$1 = *($2)
	if ( ($1 & [1]) ){ goto $label$26 }
	$6 = uint_32($1 >> [1])
	if ( ($6 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	$7 = (int_64)0
	$1 = [0]
	
.LOOP $label$325:
	$4 = *(($5 + $1))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$326 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$326
	$1 = ($1 + [1])
	if ( ($1 <= $6) ){ goto $label$325 }
	goto $label$22 
	
.LABEL $label$27
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$25 }
	$1 = *(($2 + [24]))
	$7 = (int_64)0
	
.LOOP $label$327:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$328 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$328
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$327 }
	goto $label$24 
	
.LABEL $label$26
	$4 = *($2 + [4])
	if ( ($4 == 0) ){ goto $label$23 }
	$1 = *(($2 + [8]))
	$7 = (int_64)0
	
.LOOP $label$329:
	$6 = *($1)
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$330 }
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$330
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$329 }
	goto $label$22 
	
.LABEL $label$25
	$7 = (int_64)0
	
.LABEL $label$24
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$333:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$332 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$334 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$333 }
	goto $label$331 
	
.LABEL $label$334
	$3 = $8
	
.LOOP $label$335:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$332 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$335 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$333 }
	goto $label$331 
	
.LABEL $label$332
	$4 = [0]
	
.LABEL $label$331
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [24])))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$23
	$7 = (int_64)0
	
.LABEL $label$22
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$338:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$337 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$339 }
	$3 = $8
	$4 = [1]
	$6 = $1
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$338 }
	goto $label$336 
	
.LABEL $label$339
	$3 = $8
	
.LOOP $label$340:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$337 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $4 ){ goto $label$340 }
	$4 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$338 }
	goto $label$336 
	
.LABEL $label$337
	$4 = [0]
	
.LABEL $label$336
	CALL eosio_assert($4, [17223])
	*($0 + [8]) = (int_64)1397703940
	CALL eosio_assert(((int_64)$7 < (int_64)2305843009213693952), [18270])
	CALL eosio_assert(((int_64)$7 > (int_64)-2305843009213693952), [18294])
	*($0) = ((int_64)$7 << (int_64)1)
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$21
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$20
	CALL $235(($2 + [304]))
	
.LABEL $label$19
	CALL $235(($2 + [288]))
	
.LABEL $label$18
	CALL $235(($2 + [272]))
	
.LABEL $label$17
	CALL $235(($2 + [256]))
	
.LABEL $label$16
	CALL $235(($2 + [240]))
	
.LABEL $label$15
	CALL $235(($2 + [224]))
	
.LABEL $label$14
	CALL $235(($2 + [208]))
	
.LABEL $label$13
	CALL $235(($2 + [192]))
	
.LABEL $label$12
	CALL $235(($2 + [176]))
	
.LABEL $label$11
	CALL $235(($2 + [160]))
	
.LABEL $label$10
	CALL $235(($2 + [144]))
	
.LABEL $label$9
	CALL $235(($2 + [128]))
	
.LABEL $label$8
	CALL $235(($2 + [112]))
	
.LABEL $label$7
	CALL $235(($2 + [96]))
	
.LABEL $label$6
	CALL $235(($2 + [80]))
	
.LABEL $label$5
	CALL $235(($2 + [64]))
	
.LABEL $label$4
	CALL $235(($2 + [48]))
	
.LABEL $label$3
	CALL $235(($2 + [32]))
	
.LABEL $label$2
	CALL $235(($2 + [16]))
	
.LABEL $label$1
	CALL $235($2)
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $183($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$5 = (($8 & [-8]) + $5)
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $185($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)4981848853652488192, *(*($0 + [8])), (int_64)4981848853652488192, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4981848853652488192) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4981848853652488192) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)4981848853652488193
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $189(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4981848853652488192
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4981848853652488192
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $190(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [64]) = $1
	*($3) = (int_64)0
	CALL $222(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7235159537265672192
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $220(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [48]))) = *(($3 + [48]))
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($6 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 | [8]), $6, [32])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [40]), $5, [8])
	CALL db_update_i64(*($1 + [68]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $264 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC memory ()
{
	CALL $226()
}

void .FUNC $266 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [208])
	$global$0 = $2
	$3 = ($0 + [32])
	$4 = *(($0 + [60]))
	if ( ((int_32)$4 == (int_32)*(($0 + [56]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$3), [19107])
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	$5 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27($3, $5)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$3), [19107])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19485])
	*((($2 + [128]) + [56])) = *(($4 + [56]))
	*((($2 + [128]) + [48])) = *(($4 + [48]))
	*((($2 + [128]) + [32])) = *(($4 + [32]))
	*((($2 + [128]) + [24])) = *(($4 + [24]))
	*((($2 + [128]) + [16])) = *(($4 + [16]))
	$6 = *(($4 + [40]))
	*((($2 + [128]) + [40])) = $6
	*($2 + [136]) = *(($4 + [8]))
	*($2 + [128]) = *($4)
	$7 = ((int_64)$6 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [18319])
	$8 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $9
	$5 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$8 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [17223])
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$8 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$8 = $9
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$8 = $9
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $5 ){ goto $label$16 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$12 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = *($0)
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $265([17733])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [8]) = ($4 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [17701])
	$global$0 = ($2 + [208])
	return 
	
.LABEL $label$11
	$10 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2 + [8]) = ($10 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $4
	
.LABEL $label$10
	CALL memcpy($5, [17733], $4)
	
.LABEL $label$9
	*(($5 + $4)) = [0]
	*(($2 + [48])) = (int_64)1397703940
	$4 = ($2 + [16])
	*(($2 + [64])) = *($4)
	*($4) = [0]
	*($2 + [40]) = $6
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($1)
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$4 = CALL $39(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $40(($2 + [192]), $4)
	$5 = *($2 + [192])
	CALL send_inline($5, (*($2 + [196]) - $5))
	$5 = *($2 + [192])
	if ( ($5 == 0) ){ goto $label$17 }
	*($2 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$20
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$21
	*(($2 + [168])) = (int_64)0
	CALL $26($3, ($2 + [128]), *($0))
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$8
	CALL $235(($2 + [8]))
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $157(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18448])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18448])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $178(CALL $177($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18627])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [18627])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[40]), [18627])
	CALL memcpy(($5 + [48]), ($2 + [40]), [8])
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $220(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $47($0, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $48($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $49($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [72])) = (int_64)0
	*((($1 + [32]) + [32])) = (int_64)0
	*((($1 + [32]) + [24])) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [80]) = (int_64)429600
	CALL $46(($0 + [32]), ($1 + [32]), *($0))
	*($1 + [16]) = (int_64)300000000000
	*($1 + [24]) = (int_64)1128481540
	$2 = *($0)
	CALL eosio_assert([1], [18319])
	$3 = ($0 + [152])
	$4 = (int_64)4408131
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $0
	$0 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$0 < (int_32)[6])
	$7 = ($0 + [1])
	$0 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$0 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17223])
	*(($1 + [8])) = *((($1 + [16]) + [8]))
	*($1) = *($1 + [16])
	CALL $9($3, $2, $1)
	$global$0 = ($1 + [96])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = *($2)
	CALL eosio_assert(((int_64)$5 > (int_64)0), [17657])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1128481540), [17686])
	$2 = [0]
	*(($4 + [88])) = [0]
	*($4 + [64]) = $1
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	$6 = *($0)
	*($4 + [56]) = $6
	*($4 + [32]) = (int_64)1397703940
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [18319])
	$1 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [17223])
	CALL $32(($4 + [40]), ($4 + [56]), $6, ($4 + [24]))
	$8 = ($0 + [32])
	$2 = *(($0 + [60]))
	if ( ((int_32)$2 == (int_32)*(($0 + [56]))) ){ goto $label$7 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$8), [19107])
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	$9 = CALL db_find_i64(*($8), *(($0 + [40])), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $27($8, $9)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$8), [19107])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [19485])
	CALL __multi3(($4 + [8]), *($2 + [16]), *(($2 + [24])), $5, (int_64)$5 >> (int_64)63))
	$5 = *($4 + [48])
	$6 = *($4 + [12 align=4])
	$10 = (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($10, [18319])
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [17223])
	$2 = ($4 + [48])
	CALL eosio_assert(((int_64)$5 == (int_64)*($2)), [18454])
	if ( ((int_64)*($4 + [40]) >= (int_64)$6) ){ goto $label$14 }
	*($4 + [40]) = (int_64)0
	CALL eosio_assert([1], [18319])
	goto $label$13 
	
.LABEL $label$14
	$5 = *($2)
	CALL eosio_assert($10, [18319])
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$1 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$1 = $7
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$19 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [17223])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($4 + [48]))), [18513])
	$1 = (int_64)
	*($4 + [40]) = $1(*($4 + [40]) - $6))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [18561])
	CALL eosio_assert(((int_64)*($4 + [40]) < (int_64)4611686018427387904), [18583])
	
.LABEL $label$13
	CALL $33(($4 + [56]), ($4 + [40]), *($0))
	$9 = *($4 + [80])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($4 + [84])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$24 }
	CALL _ZdlPv($8)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($4 + [80]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$global$0 = ($4 + [96])
}

void .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [48]))) = *(($4 + [48]))
	*(($1 + [40])) = *(($4 + [40]))
	*(($1 + [32])) = *(($4 + [32]))
	*(($1 + [24])) = *(($4 + [24]))
	*(($6 = ($1 + [16]))) = *(($4 + [16]))
	*(($1 + [8])) = *(($4 + [8]))
	CALL eosio_assert([1], [18448])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 | [8]), $6, [32])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [40]), $5, [8])
	*($1 + [68]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $2, [48])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $267 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $274($0)
	
.LABEL $label$1
}

void .FUNC $249 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $226 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$0 = ($global$0 - [272])
	$global$0 = $0
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	*($0 + [8]) = $1
	$1 = ($1 + [40])
	*($0 + [16]) = $1
	*($0 + [12]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [28])) = $2
	*(($0 + [24])) = $2
	*($0 + [20]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [40])) = $2
	*(($0 + [36])) = $2
	*($0 + [32]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)5
	*($1 + [24]) = (int_64)10
	*($1 + [32]) = (int_64)50
	*($1 + [40]) = (int_64)100
	$2 = ($1 + [48])
	*(($0 + [52])) = $2
	*((($0 + [8]) + [40])) = $2
	*($0 + [44]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)5
	*($1 + [24]) = (int_64)10
	*($1 + [32]) = (int_64)20
	*($1 + [40]) = (int_64)50
	$2 = ($1 + [48])
	*(($0 + [64])) = $2
	*(($0 + [60])) = $2
	*($0 + [56]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [76])) = $2
	*((($0 + [8]) + [64])) = $2
	*($0 + [68]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	*($1 + [40]) = (int_64)20
	$2 = ($1 + [48])
	*(($0 + [88])) = $2
	*(($0 + [84])) = $2
	*($0 + [80]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [100])) = $2
	*(($0 + [96])) = $2
	*($0 + [92]) = $1
	*(($1 = CALL _Znwj([64]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	*($1 + [40]) = (int_64)20
	*($1 + [48]) = (int_64)50
	*($1 + [56]) = (int_64)100
	$2 = ($1 + [64])
	*(($0 + [112])) = $2
	*(($0 + [108])) = $2
	*($0 + [104]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [124])) = $2
	*(($0 + [120])) = $2
	*($0 + [116]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [136])) = $2
	*(($0 + [132])) = $2
	*($0 + [128]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)1
	*($1 + [8]) = (int_64)1
	*($1 + [16]) = (int_64)2
	*($1 + [24]) = (int_64)5
	*($1 + [32]) = (int_64)10
	$2 = ($1 + [40])
	*(($0 + [148])) = $2
	*(($0 + [144])) = $2
	*($0 + [140]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)5
	*($1 + [8]) = (int_64)5
	*($1 + [16]) = (int_64)10
	*($1 + [24]) = (int_64)20
	*($1 + [32]) = (int_64)50
	*($1 + [40]) = (int_64)100
	$2 = ($1 + [48])
	*(($0 + [160])) = $2
	*(($0 + [156])) = $2
	*($0 + [152]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)5
	*($1 + [8]) = (int_64)5
	*($1 + [16]) = (int_64)10
	*($1 + [24]) = (int_64)20
	*($1 + [32]) = (int_64)50
	$2 = ($1 + [40])
	*(($0 + [172])) = $2
	*(($0 + [168])) = $2
	*($0 + [164]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)5
	*($1 + [8]) = (int_64)5
	*($1 + [16]) = (int_64)10
	*($1 + [24]) = (int_64)20
	*($1 + [32]) = (int_64)50
	*($1 + [40]) = (int_64)100
	$2 = ($1 + [48])
	*(($0 + [184])) = $2
	*(($0 + [180])) = $2
	*($0 + [176]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)10
	*($1 + [8]) = (int_64)10
	*($1 + [16]) = (int_64)20
	*($1 + [24]) = (int_64)50
	*($1 + [32]) = (int_64)100
	$2 = ($1 + [40])
	*(($0 + [196])) = $2
	*(($0 + [192])) = $2
	*($0 + [188]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)10
	*($1 + [8]) = (int_64)10
	*($1 + [16]) = (int_64)20
	*($1 + [24]) = (int_64)50
	*($1 + [32]) = (int_64)100
	$2 = ($1 + [40])
	*(($0 + [208])) = $2
	*(($0 + [204])) = $2
	*($0 + [200]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)50
	*($1 + [8]) = (int_64)50
	*($1 + [16]) = (int_64)100
	*($1 + [24]) = (int_64)200
	*($1 + [32]) = (int_64)500
	*($1 + [40]) = (int_64)1000
	$2 = ($1 + [48])
	*(($0 + [220])) = $2
	*(($0 + [216])) = $2
	*($0 + [212]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)100
	*($1 + [8]) = (int_64)100
	*($1 + [16]) = (int_64)200
	*($1 + [24]) = (int_64)500
	*($1 + [32]) = (int_64)1000
	$2 = ($1 + [40])
	*(($0 + [232])) = $2
	*(($0 + [228])) = $2
	*($0 + [224]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)500
	*($1 + [8]) = (int_64)500
	*($1 + [16]) = (int_64)1000
	*($1 + [24]) = (int_64)2000
	*($1 + [32]) = (int_64)5000
	$2 = ($1 + [40])
	*(($0 + [244])) = $2
	*(($0 + [240])) = $2
	*($0 + [236]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)500
	*($1 + [8]) = (int_64)500
	*($1 + [16]) = (int_64)1000
	*($1 + [24]) = (int_64)2000
	*($1 + [32]) = (int_64)5000
	$2 = ($1 + [40])
	*(($0 + [256])) = $2
	*(($0 + [252])) = $2
	*($0 + [248]) = $1
	*(($1 = CALL _Znwj([40]))) = (int_64)500
	*($1 + [8]) = (int_64)500
	*($1 + [16]) = (int_64)1000
	*($1 + [24]) = (int_64)2000
	*($1 + [32]) = (int_64)5000
	*([0] + [8348 align=4]) = (int_64)0
	$2 = ($1 + [40])
	*(($0 + [268])) = $2
	*(($0 + [264])) = $2
	*($0 + [260]) = $1
	*([0] + [8356]) = [0]
	$1 = CALL _Znwj([264])
	*([0] + [8348]) = $1
	*([0] + [8352]) = $1
	*([0] + [8356]) = ($1 + [264])
	$2 = [0]
	
.LOOP $label$2:
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$3 = (($0 + [8]) + $2)
	$4 = ($3 + [4])
	$5 = (*($4) - *($3))
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($7 = ($1 + [4]))) = $5
	*(($1 + [8])) = ($5 + ($6 << [3]))
	*($1) = $5
	$3 = *($3)
	$1 = (*($4) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $3, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$3
	$1 = (*([0] + [8352]) + [12])
	*([0] + [8352]) = $1
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)[264]) ){ goto $label$2 }
	$1 = *($0 + [260])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [264])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($0 + [248])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($0 + [252])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($0 + [236])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($0 + [240])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *($0 + [224])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($0 + [228])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$1 = *($0 + [212])
	if ( ($1 == 0) ){ goto $label$8 }
	*(($0 + [216])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($0 + [200])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($0 + [204])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($0 + [188])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($0 + [192])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($0 + [176])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($0 + [180])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($0 + [164])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 + [168])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = *($0 + [152])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($0 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($0 + [140])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($0 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($0 + [128])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($0 + [132])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$1 = *($0 + [116])
	if ( ($1 == 0) ){ goto $label$16 }
	*(($0 + [120])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($0 + [104])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($0 + [108])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$17
	$1 = *($0 + [92])
	if ( ($1 == 0) ){ goto $label$18 }
	*(($0 + [96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$18
	$1 = *($0 + [80])
	if ( ($1 == 0) ){ goto $label$19 }
	*(($0 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$19
	$1 = *($0 + [68])
	if ( ($1 == 0) ){ goto $label$20 }
	*(($0 + [72])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	$1 = *($0 + [56])
	if ( ($1 == 0) ){ goto $label$21 }
	*(($0 + [60])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = *($0 + [44])
	if ( ($1 == 0) ){ goto $label$22 }
	*(($0 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$1 = *($0 + [32])
	if ( ($1 == 0) ){ goto $label$23 }
	*(($0 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$23
	$1 = *($0 + [20])
	if ( ($1 == 0) ){ goto $label$24 }
	*(($0 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$24
	$1 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$25 }
	*($0 + [12]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$25
	CALL $251([31], [0], [8192])
	$global$0 = ($0 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $249($1)
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18627])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $166(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $164 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [52])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [56]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	$3 = ($1 + [48])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [48])
	CALL $133($3, $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [19048])
	$8 = *($3)
	$6 = *(($1 + [52]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [40]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$4
	$3 = ($3 + [8])
	$8 = *($1 + [72])
	$6 = *(($1 + [76]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$4 = CALL $270($3)
	goto $label$7 
	
.LABEL $label$8
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$7
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $274($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = (*($1 + [48]) + (*(*($3)) << [3]))
	$7 = ($3 + [8])
	$6 = ($1 + [52])
	$8 = (*($6) - $7)
	$9 = int_32($8 >> [3])
	$10 = *($1)
	$11 = $10
	if ( ($8 == 0) ){ goto $label$1 }
	CALL memmove($3, $7, $8)
	$11 = *($1)
	
.LABEL $label$1
	*($6) = ($3 + ($9 << [3]))
	CALL eosio_assert(((int_64)$10 == (int_64)$11), [19048])
	$8 = *($1 + [48])
	$3 = *($6)
	$9 = ($3 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$6 = [40]
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	$6 = (($9 & [-8]) + $6)
	
.LABEL $label$3
	$6 = ($6 + [8])
	$8 = *($1 + [72])
	$3 = *(($1 + [76]))
	$9 = ($3 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	$6 = (($9 & [-8]) + $6)
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$7 }
	$3 = CALL $270($6)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $274($3)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$6 = *($1)
	$7 = *(*($3) + [4])
	$8 = ($1 + [52])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [56]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($7)
	$3 = ($1 + [48])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [48])
	CALL $133($3, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [19048])
	$8 = *($3)
	$7 = *(($1 + [52]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [40]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$4 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$4
	$3 = ($3 + [8])
	$8 = *($1 + [72])
	$7 = *(($1 + [76]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$6 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$4 = CALL $270($3)
	goto $label$7 
	
.LABEL $label$8
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$7
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $274($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [128])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [112])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [120])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $116($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $224(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [128])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [19737])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$5 = $2
	$2 = ($5 + [-32])
	$global$0 = $2
	CALL eosio_assert([1], [18448])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($5 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($5 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($5 + [-8]), ($1 + [24]), [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)4980189539499769856, *(*($0 + [8])), $8, $2, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $242($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $221(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4981848853652488192
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4981848853652488192
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $190(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [12]) = $0
	CALL $151(($3 + [32]), $5)
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4981848853652488192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4981848853652488192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $190(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$10 }
	*($1 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $245 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $238($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = (*($1 + [48]) + (*(*($3)) << [3]))
	$7 = ($3 + [8])
	$6 = ($1 + [52])
	$8 = (*($6) - $7)
	$9 = int_32($8 >> [3])
	$10 = *($1)
	$11 = $10
	if ( ($8 == 0) ){ goto $label$1 }
	CALL memmove($3, $7, $8)
	$11 = *($1)
	
.LABEL $label$1
	*($6) = ($3 + ($9 << [3]))
	CALL eosio_assert(((int_64)$10 == (int_64)$11), [19048])
	$8 = *($1 + [48])
	$3 = *($6)
	$9 = ($3 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$6 = [40]
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	$6 = (($9 & [-8]) + $6)
	
.LABEL $label$3
	$6 = ($6 + [8])
	$8 = *($1 + [72])
	$3 = *(($1 + [76]))
	$9 = ($3 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	$6 = (($9 & [-8]) + $6)
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$7 }
	$3 = CALL $270($6)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $274($3)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $242 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $265($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $238($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($2 + [8])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [216]) = [0]
	*($2 + [208]) = (int_64)0
	*(($2 + [160])) = [0]
	*($2 + [152]) = (int_64)0
	$3 = CALL $265([17853])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [152]) = ($3 << [1])
	$4 = (($2 + [152]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [152]) = ($5 | [1])
	*($2 + [160]) = $4
	*($2 + [156]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [17853], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	CALL $115($3, $1, ($2 + [208]), ($2 + [152]))
	if ( ((*($2 + [152]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [160]))
	
.LABEL $label$5
	$3 = *($2 + [208])
	$4 = *($2 + [212])
	*($2 + [200]) = [0]
	*($2 + [192]) = (int_64)0
	$6 = ($4 - $3)
	$7 = (int_64)0
	$8 = (int_64)0
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$6 }
	$9 = ($0 + [112])
	$10 = [0]
	$11 = ($0 + [140])
	$12 = ($0 + [136])
	$13 = ($0 + [120])
	$14 = (($2 + [192]) + [8])
	$8 = (int_64)0
	$7 = (int_64)0
	
.LOOP $label$7:
	$15 = *(($3 + ($10 << [3])))
	$4 = *($11)
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$11:
	$3 = ($4 + [-24])
	$1 = *($3)
	if ( ((int_64)*($1) == (int_64)$15) ){ goto $label$10 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$9), [19107])
	goto $label$8 
	
.LABEL $label$9
	$1 = CALL $116($9, CALL $fimport$3(*($9), *($13), (int_64)4980189539499769856, $15))
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$9), [19107])
	
.LABEL $label$8
	*($2 + [156]) = $1
	*($2 + [152]) = $9
	CALL require_auth(*($1 + [8]))
	$3 = *($2 + [156])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$15 }
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)$8), [17855])
	$3 = *($2 + [196])
	if ( ((uint_32)$3 >= (uint_32)*($14)) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$8 = *($3 + [16])
	$7 = *($3 + [8])
	$3 = *($2 + [196])
	if ( ($3 <= *($14)) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $117(($2 + [192]), ($2 + [152]))
	goto $label$12 
	
.LABEL $label$13
	*($3) = *($2 + [152])
	*($2 + [196]) = (*($2 + [196]) + [8])
	
.LABEL $label$12
	$3 = *($2 + [208])
	$10 = ($10 + [1])
	if ( ($10 <= int_32((*($2 + [212]) - $3) >> [3])) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = int_32($6 >> [3])
	*(($2 + [184])) = [0]
	*($2 + [160]) = $7
	*($2 + [168]) = (int_64)-1
	*($2 + [176]) = (int_64)0
	$15 = *($0)
	*($2 + [152]) = $15
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	*(($3 = CALL _Znwj([232]))) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	*($3 + [128]) = (int_64)0
	*($2 + [80]) = $3
	$1 = ($3 + [232])
	*($2 + [88]) = $1
	*($3 + [144]) = (int_64)0
	*($3 + [136]) = (int_64)0
	*($3 + [152]) = (int_64)0
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = (int_64)0
	*($3 + [176]) = (int_64)0
	*($3 + [184]) = (int_64)0
	*($3 + [192]) = (int_64)0
	*($3 + [200]) = (int_64)0
	*($3 + [208]) = (int_64)0
	*($3 + [216]) = (int_64)0
	*($3 + [224]) = (int_64)0
	*($2 + [84]) = $1
	CALL $118(($2 + [136]), ($2 + [152]), $15, ($2 + [80]))
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$16 }
	*($2 + [84]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$16 = (CASTING uint_64)(uint_32 $4)
	*($2 + [80]) = $8
	CALL $119(($2 + [120]), $0, ($2 + [80]))
	$15 = (int_64)0
	$4 = *($2 + [124])
	$3 = *($2 + [120])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$17 }
	$15 = (int_64)0
	$1 = *($2 + [136])
	
.LOOP $label$18:
	$15 = ((int_64)*(($1 + (*($3) << [3]))) + (int_64)$15)
	$3 = ($3 + [4])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$18 }
	
.LABEL $label$17
	*((($2 + [80]) + [32])) = [0]
	*($2 + [88]) = $7
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	$17 = *($0)
	*($2 + [80]) = $17
	*((($2 + [40]) + [32])) = [0]
	*($2 + [48]) = $7
	*($2 + [40]) = $17
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$18 = ((int_64)$15 + (int_64)$16)
	$3 = CALL db_find_i64($17, $7, (int_64)4980194288978624512, (int_64)4980194288978624512)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*(CALL $52(($2 + [80]), $3) + [12]) == (int_32)($2 + [80])), [19107])
	$9 = ((CASTING uint_32)(uint_64 ((uint_64)$8 % (uint_64)(int_64)100)) + [-1])
	CALL $120(($2 + [24]), ($2 + [80]))
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$23 }
	$4 = *($2 + [28])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$25 }
	
.LOOP $label$27:
	$3 = ($4 + [-12])
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$28 }
	*(($4 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$28
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$27 }
	$3 = *($2 + [24])
	goto $label$24 
	
.LABEL $label$26
	$10 = ($0 + [112])
	$3 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$29 }
	CALL $116($10, $3)
	
.LABEL $label$29
	$9 = ($0 + [72])
	$4 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$30:
	$3 = ($4 + [-24])
	$1 = *($3)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$22 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$30 }
	goto $label$21 
	
.LABEL $label$25
	$3 = $5
	
.LABEL $label$24
	*($2 + [28]) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$23
	$10 = *($3 + [4])
	$3 = ($5 + ((int_32)$9 * (int_32)[12]))
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$19 }
	$11 = ($2 + [68])
	$12 = ($2 + [64])
	$14 = ($2 + [48])
	
.LOOP $label$31:
	if ( ((int_64)*($9 + [8]) == (int_64)6138663591592764928) ){ goto $label$32 }
	$15 = *($9)
	$4 = *($11)
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$36:
	$3 = ($4 + [-24])
	$1 = *($3)
	if ( ((int_64)*($1) == (int_64)$15) ){ goto $label$35 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($2 + [40])), [19107])
	if ( ((int_64)$18 >= (int_64)1) ){ goto $label$33 }
	goto $label$19 
	
.LABEL $label$34
	$1 = [0]
	$3 = CALL db_find_i64(*($2 + [40]), *($14), (int_64)6767209626505375744, $15)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$37 }
	$1 = CALL $121(($2 + [40]), $3)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($2 + [40])), [19107])
	
.LABEL $label$37
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$19 }
	
.LABEL $label$33
	$18 = ((int_64)( (int_64)-2 ? (int_64)-1 : $1 ) + (int_64)$18)
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$19 }
	
.LABEL $label$32
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$31 }
	goto $label$19 
	
.LABEL $label$22
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$9), [19107])
	goto $label$20 
	
.LABEL $label$21
	$1 = CALL $122($9, CALL $fimport$3(*($9), *(($0 + [80])), (int_64)-6030912142679474176, $7))
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$9), [19107])
	
.LABEL $label$20
	$11 = *(($1 + [52]))
	$9 = *($1 + [48])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$19 }
	$12 = ($0 + [140])
	$14 = ($0 + [136])
	$13 = ($0 + [120])
	$6 = ($0 + [112])
	$19 = ($2 + [68])
	$20 = ($2 + [64])
	$21 = (($2 + [40]) + [8])
	
.LOOP $label$38:
	$15 = *($9)
	$4 = *($12)
	$5 = *($14)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$41 }
	
.LOOP $label$43:
	$3 = ($4 + [-24])
	$1 = *($3)
	if ( ((int_64)*($1) == (int_64)$15) ){ goto $label$42 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$41 }
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$10), [19107])
	if ( ((int_64)*($1 + [16]) == (int_64)$8) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$1 = [0]
	$3 = CALL db_find_i64(*($6), *($13), (int_64)4980189539499769856, $15)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$44 }
	$1 = CALL $116($10, $3)
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$10), [19107])
	
.LABEL $label$44
	if ( ((int_64)*($1 + [16]) != (int_64)$8) ){ goto $label$39 }
	
.LABEL $label$40
	if ( ((int_64)*($1 + [8]) == (int_64)6138663591592764928) ){ goto $label$39 }
	$15 = *($9)
	$4 = *($19)
	$5 = *($20)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$46 }
	
.LOOP $label$48:
	$3 = ($4 + [-24])
	$1 = *($3)
	if ( ((int_64)*($1) == (int_64)$15) ){ goto $label$47 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$46 }
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($2 + [40])), [19107])
	if ( ((int_64)$18 >= (int_64)1) ){ goto $label$45 }
	goto $label$19 
	
.LABEL $label$46
	$1 = [0]
	$3 = CALL db_find_i64(*($2 + [40]), *($21), (int_64)6767209626505375744, $15)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$49 }
	$1 = CALL $121(($2 + [40]), $3)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($2 + [40])), [19107])
	
.LABEL $label$49
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$19 }
	
.LABEL $label$45
	$18 = ((int_64)( (int_64)-2 ? (int_64)-1 : $1 ) + (int_64)$18)
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$19 }
	
.LABEL $label$39
	$9 = ($9 + [8])
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$38 }
	
.LABEL $label$19
	CALL eosio_assert(((int_64)$18 < (int_64)1), [17870])
	CALL $51(($2 + [80]))
	$3 = *($3)
	$18 = ((uint_64)$8 / (uint_64)(int_64)100)
	$17 = (int_64)
	$1 = ((int_32)((CASTING uint_32)(uint_64 $17($8 - ((int_64)$18 * (int_64)100)))) + [-1]) * (int_32)[12]
	$4 = *([0] + [8348])
	$3 = ($4 + $1)
	if ( ((int_32)*($3) + [4]) == (int_32)$3) ){ goto $label$50 }
	$5 = ($3 + ((CASTING uint_32)(uint_64 $18) << [3]))
	$15 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$18 >= (uint_64)$15) ){ goto $label$52 }
	if ( ((int_64)((int_64)*($5) * (int_64)$16) != (int_64)*(($3 + ((CASTING uint_32)(uint_64 $15) << [3])))) ){ goto $label$52 }
	$4 = *($2 + [212])
	$3 = *($2 + [208])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$53 }
	
.LOOP $label$54:
	CALL $114($0, $3)
	$3 = ($3 + [8])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$54 }
	
.LABEL $label$53
	$8 = ((int_64)$17 + (int_64)((int_64)$15 * (int_64)100))
	*($2 + [24]) = $8
	*($2 + [16]) = $7
	*($2 + [8]) = CALL $123($0, $8)
	CALL $113($0, ($2 + [16]), ($2 + [24]), ($2 + [8]))
	$4 = *([0] + [8348])
	
.LABEL $label$52
	$3 = *($3)
	$3 = ($4 + $1)
	$15 = ((int_64)$15 + (int_64)1)
	if ( (uint_64)($15 <= (CASTING uint_64)(uint_32 int_32((*($3 + [4]) - $3) >> [3]))) ){ goto $label$51 }
	
.LABEL $label$50
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$55 }
	$0 = ($2 + [68])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$57 }
	
.LOOP $label$58:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$59 }
	CALL _ZdlPv($4)
	
.LABEL $label$59
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$58 }
	$3 = *(($2 + [64]))
	goto $label$56 
	
.LABEL $label$57
	$3 = $1
	
.LABEL $label$56
	*($0) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$55
	$10 = *($2 + [104])
	if ( ($10 == 0) ){ goto $label$60 }
	$11 = ($2 + [108])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$62 }
	
.LOOP $label$63:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$64 }
	$0 = *($5)
	if ( ($0 == 0) ){ goto $label$65 }
	$4 = *($5 + [4])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$67 }
	
.LOOP $label$68:
	$3 = ($4 + [-12])
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$69 }
	*(($4 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$69
	$4 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$68 }
	$3 = *($5)
	goto $label$66 
	
.LABEL $label$67
	$3 = $0
	
.LABEL $label$66
	*(($5 + [4])) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$65
	CALL _ZdlPv($5)
	
.LABEL $label$64
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$63 }
	$3 = *(($2 + [104]))
	goto $label$61 
	
.LABEL $label$62
	$3 = $10
	
.LABEL $label$61
	*($11) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$60
	$3 = *($2 + [120])
	if ( ($3 == 0) ){ goto $label$70 }
	*($2 + [124]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$70
	$3 = *($2 + [136])
	if ( ($3 == 0) ){ goto $label$71 }
	*($2 + [140]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$71
	$0 = *($2 + [176])
	if ( ($0 == 0) ){ goto $label$72 }
	$5 = ($2 + [180])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$74 }
	
.LOOP $label$75:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$76 }
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$77 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$77
	CALL _ZdlPv($4)
	
.LABEL $label$76
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$75 }
	$3 = *(($2 + [176]))
	goto $label$73 
	
.LABEL $label$74
	$3 = $0
	
.LABEL $label$73
	*($5) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$72
	$3 = *($2 + [192])
	if ( ($3 == 0) ){ goto $label$78 }
	*($2 + [196]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$78
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$79 }
	*($2 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$79
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $235(($2 + [152]))
}

int_32 .FUNC $271 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $272($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [20241])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $270 (int_32 $0)
{
	return CALL $271([8656], $0)
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $265($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $238($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $238($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $274 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17040])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16848]
	$3 = (((int_32)$1 * (int_32)[12]) + [16848])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [40])) = [0]
	*($1 + [16]) = (int_64)8902831729082402368
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [8]) = *($0)
	CALL $51(($1 + [8]))
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ($1 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = *($5)
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = *($5 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($7 + [-12])
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$7 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	$0 = *($5)
	goto $label$7 
	
.LABEL $label$8
	$0 = $6
	
.LABEL $label$7
	*(($5 + [4])) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$0 = *(($1 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($3) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$0), [19107])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4980194288978624512, (int_64)4980194288978624512)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $52($0, $2)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$0), [19107])
	
.LABEL $label$2
	CALL eosio_assert([1], [18632])
	CALL eosio_assert([1], [18666])
	$3 = CALL db_next_i64(*($2 + [16]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $52($0, $3)
	
.LABEL $label$4
	CALL $53($0, $2)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $270($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($2 = CALL _Znwj([24])) + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [12]) = $0
	CALL $204(($3 + [32]), $2)
	*($2 + [16]) = $1
	*($3 + [24]) = $2
	*($3 + [16]) = (int_64)4980194288978624512
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4980194288978624512
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $2
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $203(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($4)
	
.LABEL $label$6
	$7 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	$0 = *($7)
	if ( ($0 == 0) ){ goto $label$10 }
	$1 = *($7 + [4])
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($1 + [-12])
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$14 }
	*(($1 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *($7)
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*(($7 + [4])) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [18791])
	$4 = ($3 + [-24])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = *($3)
	*($3) = [0]
	$6 = *($4)
	*($4) = $2
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = *($6 + [4])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($8 + [-12])
	$9 = *($2)
	if ( ($9 == 0) ){ goto $label$9 }
	*(($8 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$8 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	$2 = *($6)
	goto $label$6 
	
.LABEL $label$7
	$2 = $7
	
.LABEL $label$6
	*(($6 + [4])) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL _ZdlPv($6)
	
.LABEL $label$4
	*($4 + [8]) = *($3 + [8])
	*(($4 + [16])) = *(($3 + [16]))
	$4 = ($4 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$12 }
	$8 = *($6 + [4])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($8 + [-12])
	$9 = *($2)
	if ( ($9 == 0) ){ goto $label$16 }
	*(($8 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$8 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$15 }
	$2 = *($6)
	goto $label$13 
	
.LABEL $label$14
	$2 = $7
	
.LABEL $label$13
	*(($6 + [4])) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$1
	*(($0 + [28])) = $4
	CALL db_remove_i64(*(($1 + [16])))
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [576])
	$global$0 = $4
	if ( ((int_64)$2 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$3 != (int_64)-3617168760277827584) ){ goto $label$2 }
	CALL $55(($4 + [528]))
	*(($5 = (($4 + [512]) + [8]))) = *(($4 + [552]))
	*($4 + [512]) = *($4 + [544])
	$3 = *($4 + [536])
	$2 = *($4 + [528])
	$6 = ($4 + [560])
	$7 = CALL $236(($4 + [496]), $6)
	*(($4 + [8])) = *($5)
	*($4) = *($4 + [512])
	CALL $56($0, $2, $3, $4, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$3
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [568])))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$2
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$3 > (int_64)4516881727834030079) ){ goto $label$32 }
	if ( ((int_64)$3 <= (int_64)-5003266787307945985) ){ goto $label$31 }
	if ( ((int_64)$3 > (int_64)-3841130677495922689) ){ goto $label$29 }
	if ( ((int_64)$3 > (int_64)-5003124999045775361) ){ goto $label$25 }
	if ( ((int_64)$3 == (int_64)-5003266787307945984) ){ goto $label$19 }
	if ( ((int_64)$3 != (int_64)-5003174495819661312) ){ goto $label$1 }
	*($4 + [316]) = [0]
	*($4 + [312]) = [1]
	*($4 + [192]) = *($4 + [312])
	CALL $58($1, $2, ($4 + [192]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$32
	if ( ((int_64)$3 <= (int_64)4981847898557775871) ){ goto $label$30 }
	if ( ((int_64)$3 > (int_64)6767209626505363455) ){ goto $label$28 }
	if ( ((int_64)$3 > (int_64)6291761009422842159) ){ goto $label$24 }
	if ( ((int_64)$3 == (int_64)4981847898557775872) ){ goto $label$18 }
	if ( ((int_64)$3 != (int_64)6291761009417781248) ){ goto $label$1 }
	*($4 + [436]) = [0]
	*($4 + [432]) = [2]
	*($4 + [72]) = *($4 + [432])
	CALL $60($1, $2, ($4 + [72]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$31
	if ( ((int_64)$3 <= (int_64)-6402240835906888401) ){ goto $label$27 }
	if ( ((int_64)$3 > (int_64)-5003347152076169953) ){ goto $label$23 }
	if ( ((int_64)$3 == (int_64)-6402240835906888400) ){ goto $label$17 }
	if ( ((int_64)$3 != (int_64)-5858943021525499904) ){ goto $label$1 }
	*($4 + [404]) = [0]
	*($4 + [400]) = [3]
	*($4 + [104]) = *($4 + [400])
	CALL $62($1, $2, ($4 + [104]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$30
	if ( ((int_64)$3 <= (int_64)4921564679018381311) ){ goto $label$26 }
	if ( ((int_64)$3 > (int_64)4923678490122780671) ){ goto $label$22 }
	if ( ((int_64)$3 == (int_64)4921564679018381312) ){ goto $label$16 }
	if ( ((int_64)$3 != (int_64)4923676415485804544) ){ goto $label$1 }
	*($4 + [348]) = [0]
	*($4 + [344]) = [4]
	*($4 + [160]) = *($4 + [344])
	CALL $64($1, $2, ($4 + [160]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$29
	if ( ((int_64)$3 > (int_64)-3109888186201596625) ){ goto $label$21 }
	if ( ((int_64)$3 == (int_64)-3841130677495922688) ){ goto $label$15 }
	if ( ((int_64)$3 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($4 + [460]) = [0]
	*($4 + [456]) = [5]
	*($4 + [48]) = *($4 + [456])
	CALL $66($1, $2, ($4 + [48]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$28
	if ( ((int_64)$3 > (int_64)8516769789752901631) ){ goto $label$20 }
	if ( ((int_64)$3 == (int_64)6767209626505363456) ){ goto $label$14 }
	if ( ((int_64)$3 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($4 + [492]) = [0]
	*($4 + [488]) = [6]
	*($4 + [16]) = *($4 + [488])
	CALL $64($1, $2, ($4 + [16]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$27
	if ( ((int_64)$3 == (int_64)-7807295961876660224) ){ goto $label$13 }
	if ( ((int_64)$3 == (int_64)-6434942959346242560) ){ goto $label$12 }
	if ( ((int_64)$3 != (int_64)-6402241093739143888) ){ goto $label$1 }
	*($4 + [444]) = [0]
	*($4 + [440]) = [7]
	*($4 + [64]) = *($4 + [440])
	CALL $68($1, $2, ($4 + [64]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$26
	if ( ((int_64)$3 == (int_64)4516881727834030080) ){ goto $label$11 }
	if ( ((int_64)$3 == (int_64)4520614715839217664) ){ goto $label$10 }
	if ( ((int_64)$3 != (int_64)4730614996831743488) ){ goto $label$1 }
	*($4 + [396]) = [0]
	*($4 + [392]) = [8]
	*($4 + [112]) = *($4 + [392])
	CALL $70($1, $2, ($4 + [112]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$25
	if ( ((int_64)$3 == (int_64)-5003124999045775360) ){ goto $label$9 }
	if ( ((int_64)$3 != (int_64)-4057586280667894272) ){ goto $label$1 }
	*($4 + [388]) = [0]
	*($4 + [384]) = [9]
	*($4 + [120]) = *($4 + [384])
	CALL $68($1, $2, ($4 + [120]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$24
	if ( ((int_64)$3 == (int_64)6291761009422842160) ){ goto $label$8 }
	if ( ((int_64)$3 != (int_64)6767209621867200512) ){ goto $label$1 }
	*($4 + [292]) = [0]
	*($4 + [288]) = [10]
	*($4 + [216]) = *($4 + [288])
	CALL $73($1, $2, ($4 + [216]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$23
	if ( ((int_64)$3 == (int_64)-5003347152076169952) ){ goto $label$7 }
	if ( ((int_64)$3 != (int_64)-5003315193367756800) ){ goto $label$1 }
	*($4 + [324]) = [0]
	*($4 + [320]) = [11]
	*($4 + [184]) = *($4 + [320])
	CALL $75($1, $2, ($4 + [184]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$22
	if ( ((int_64)$3 == (int_64)4923678490122780672) ){ goto $label$6 }
	if ( ((int_64)$3 != (int_64)4980194288978624512) ){ goto $label$1 }
	*($4 + [276]) = [0]
	*($4 + [272]) = [12]
	*($4 + [232]) = *($4 + [272])
	CALL $77($1, $2, ($4 + [232]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$21
	if ( ((int_64)$3 == (int_64)-3109888186201596624) ){ goto $label$5 }
	if ( ((int_64)$3 != (int_64)3941568778817642496) ){ goto $label$1 }
	*($4 + [332]) = [0]
	*($4 + [328]) = [13]
	*($4 + [176]) = *($4 + [328])
	CALL $58($1, $2, ($4 + [176]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$20
	if ( ((int_64)$3 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$3 != (int_64)9015419116817883488) ){ goto $label$1 }
	*($4 + [364]) = [0]
	*($4 + [360]) = [14]
	*($4 + [144]) = *($4 + [360])
	CALL $80($1, $2, ($4 + [144]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$19
	*($4 + [260]) = [0]
	*($4 + [256]) = [15]
	*($4 + [248]) = *($4 + [256])
	CALL $82($1, $2, ($4 + [248]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$18
	*($4 + [372]) = [0]
	*($4 + [368]) = [16]
	*($4 + [136]) = *($4 + [368])
	CALL $73($1, $2, ($4 + [136]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$17
	*($4 + [452]) = [0]
	*($4 + [448]) = [17]
	*($4 + [56]) = *($4 + [448])
	CALL $85($1, $2, ($4 + [56]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$16
	*($4 + [380]) = [0]
	*($4 + [376]) = [18]
	*($4 + [128]) = *($4 + [376])
	CALL $87($1, $2, ($4 + [128]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$15
	*($4 + [268]) = [0]
	*($4 + [264]) = [19]
	*($4 + [240]) = *($4 + [264])
	CALL $64($1, $2, ($4 + [240]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$14
	*($4 + [284]) = [0]
	*($4 + [280]) = [20]
	*($4 + [224]) = *($4 + [280])
	CALL $68($1, $2, ($4 + [224]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$13
	*($4 + [412]) = [0]
	*($4 + [408]) = [21]
	*($4 + [96]) = *($4 + [408])
	CALL $91($1, $2, ($4 + [96]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$12
	*($4 + [356]) = [0]
	*($4 + [352]) = [22]
	*($4 + [152]) = *($4 + [352])
	CALL $58($1, $2, ($4 + [152]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$11
	*($4 + [468]) = [0]
	*($4 + [464]) = [23]
	*($4 + [40]) = *($4 + [464])
	CALL $82($1, $2, ($4 + [40]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$10
	*($4 + [340]) = [0]
	*($4 + [336]) = [24]
	*($4 + [168]) = *($4 + [336])
	CALL $95($1, $2, ($4 + [168]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$9
	*($4 + [300]) = [0]
	*($4 + [296]) = [25]
	*($4 + [208]) = *($4 + [296])
	CALL $97($1, $2, ($4 + [208]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$8
	*($4 + [428]) = [0]
	*($4 + [424]) = [26]
	*($4 + [80]) = *($4 + [424])
	CALL $99($1, $2, ($4 + [80]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$7
	*($4 + [308]) = [0]
	*($4 + [304]) = [27]
	*($4 + [200]) = *($4 + [304])
	CALL $73($1, $2, ($4 + [200]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$6
	*($4 + [484]) = [0]
	*($4 + [480]) = [28]
	*($4 + [24]) = *($4 + [480])
	CALL $64($1, $2, ($4 + [24]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$5
	*($4 + [420]) = [0]
	*($4 + [416]) = [29]
	*($4 + [88]) = *($4 + [416])
	CALL $68($1, $2, ($4 + [88]))
	$global$0 = ($4 + [576])
	return 
	
.LABEL $label$4
	*($4 + [476]) = [0]
	*($4 + [472]) = [30]
	*($4 + [32]) = *($4 + [472])
	CALL $82($1, $2, ($4 + [32]))
	
.LABEL $label$1
	$global$0 = ($4 + [576])
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $270($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $103($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	$5 = ($global$0 - [208])
	$global$0 = $5
	*($5 + [72]) = $1
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL require_auth($1)
	$7 = *($3 + [8])
	$8 = [0]
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$8 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [18120])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [18143])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [18169])
	*($5 + [144]) = [32]
	CALL $1(($5 + [56]), $4, ($5 + [144]))
	CALL eosio_assert((((int_32)(*($5 + [60]) - *($5 + [56])) / (int_32)[12]) <= [6]), [18201])
	$9 = *($5 + [56])
	$8 = *($9)
	$10 = CALL $265([18212])
	if ( ((int_32)$10 != (int_32)( *($9 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$19 }
	if ( (CALL $247($9, [0], [-1], [18212], $10) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$9 = *($5 + [56])
	$8 = *($9)
	$10 = CALL $265([18259])
	if ( ((int_32)$10 != (int_32)( *($9 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$12 }
	if ( CALL $247($9, [0], [-1], [18259], $10) ){ goto $label$12 }
	CALL eosio_assert(((int_32)(*($5 + [60]) - *($5 + [56])) == (int_32)[24]), [18201])
	$11 = CALL $236(($5 + [32]), (*($5 + [56]) + [12]))
	$9 = *($11)
	$12 = ($9 & [1])
	if ( $12 ){ goto $label$17 }
	$10 = uint_32($9 >> [1])
	if ( ($10 == 0) ){ goto $label$11 }
	$4 = (($5 + [32]) | [1])
	$1 = (int_64)0
	$9 = [0]
	
.LOOP $label$20:
	$8 = *(($4 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$21 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$21
	$9 = ($9 + [1])
	if ( ($9 <= $10) ){ goto $label$20 }
	goto $label$16 
	
.LABEL $label$18
	CALL $104($0, ($5 + [72]), $3)
	$9 = *($5 + [56])
	$8 = (*($5 + [60]) - $9)
	if ( ((uint_32)((int_32)$8 / (int_32)[12]) > (uint_32)[2]) ){ goto $label$22 }
	CALL $105($0, ($5 + [72]), [18032])
	goto $label$13 
	
.LABEL $label$22
	$10 = [0]
	if ( ((int_32)$8 != (int_32)[36]) ){ goto $label$23 }
	$8 = *($9 + [12])
	$3 = CALL $265([18219])
	if ( ((int_32)$3 != (int_32)( *(($9 + [16])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$23 }
	$10 = (CALL $247(($9 + [12]), [0], [-1], [18219], $3) == 0)
	
.LABEL $label$23
	CALL eosio_assert($10, [18201])
	$9 = *($5 + [56])
	if ( (*($9 + [24]) & [1]) ){ goto $label$15 }
	$9 = (($9 + [24]) + [1])
	goto $label$14 
	
.LABEL $label$17
	$8 = *($11 + [4])
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = *(($11 + [8]))
	$1 = (int_64)0
	
.LOOP $label$24:
	$10 = *($9)
	if ( ((uint_32)(($10 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$25
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$24 }
	
.LABEL $label$16
	if ( $12 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$15
	$9 = *(($9 + [32]))
	
.LABEL $label$14
	*($5 + [48]) = $9
	*($5 + [52]) = CALL $265($9)
	*($5 + [24]) = *($5 + [48])
	$9 = CALL $106(($5 + [144]), ($5 + [24]))
	CALL eosio_assert(CALL $fimport$7(*($9)), [18223])
	CALL $105($0, ($5 + [72]), $9)
	
.LABEL $label$13
	$9 = *((*($0 + [152]) + [-12]))
	*(($5 + [176])) = [0]
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [144]) = *(($9 + ($0 + [152])))
	*($5 + [152]) = (int_64)4408131
	$1 = *(CALL $18(($5 + [144]), (int_64)4408131, [17564]))
	$10 = *($5 + [168])
	if ( ($10 == 0) ){ goto $label$26 }
	$3 = ($5 + [172])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	CALL _ZdlPv($8)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$29 }
	$9 = *(($5 + [168]))
	goto $label$27 
	
.LABEL $label$28
	$9 = $10
	
.LABEL $label$27
	*($3) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$26
	$2 = *($0 + [192])
	*((($5 + [80]) + [24])) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	$9 = ($0 + [224])
	CALL $25(($5 + [144]), $9, $2, ($5 + [80]))
	$8 = (($5 + [144]) + [24])
	CALL __fixunsdfti(($5 + [8]), ((float_64)((float_64)((float_64)CALL $fimport$10(((int_64)$6 << (int_64)32), (uint_64)$6 >> (uint_64)(int_64)32)) * (float_64)(float_64)0.6) / (float_64)(CASTING float_64)(int_64 $1)) + (float_64)CALL $fimport$10(*($5 + [160]), *($8))))
	*($8) = *(($5 + [16]))
	$13 = (CASTING float_64)(uint_64 $6)
	$14 = ((float_64)((float_64)$13 * (float_64)(float_64)0.25) + (float_64)(CASTING float_64)(uint_64 *($5 + [176])))
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$32 }
	$1 = (int_64)0
	goto $label$31 
	
.LABEL $label$32
	$1 = (Rounds 0)($14)
	
.LABEL $label$31
	*($5 + [176]) = $1
	$14 = ((float_64)((float_64)$13 * (float_64)(float_64)0.15) + (float_64)(CASTING float_64)(uint_64 *($5 + [184])))
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$34 }
	$1 = (int_64)0
	goto $label$33 
	
.LABEL $label$34
	$1 = (Rounds 0)($14)
	
.LABEL $label$33
	*($5 + [184]) = $1
	*($5 + [160]) = *($5 + [8])
	CALL $26($9, ($5 + [144]), *($0 + [192]))
	
.LABEL $label$12
	$10 = *($5 + [56])
	if ( ($10 == 0) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$11
	$1 = (int_64)0
	goto $label$8 
	
.LABEL $label$10
	$1 = (int_64)0
	
.LABEL $label$9
	CALL _ZdlPv(*(($11 + [8])))
	
.LABEL $label$8
	*($5 + [144]) = $1
	CALL $107($0, ($5 + [72]), ($5 + [144]), $3)
	$10 = *($5 + [56])
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = *($5 + [60])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$9 = ($8 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$38
	$8 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$37 }
	$9 = *($5 + [56])
	goto $label$35 
	
.LABEL $label$36
	$9 = $10
	
.LABEL $label$35
	*($5 + [60]) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$global$0 = ($5 + [208])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $247 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $264(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [76])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [80]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	goto $label$1 
	
.LABEL $label$2
	CALL $133(($1 + [72]), $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [19048])
	$8 = *($1 + [48])
	$6 = *(($1 + [52]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [40]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$4
	$3 = ($3 + [8])
	$8 = *($1 + [72])
	$6 = *(($1 + [76]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$4 = CALL $270($3)
	goto $label$7 
	
.LABEL $label$8
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$7
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $213($5, $1)
	CALL db_update_i64(*(($1 + [88])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $274($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $152 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $122($1, $6)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $153 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([24])
	CALL $198($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $127(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $151($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19158])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $182($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18627])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4980194288978624512, (int_64)4980194288978624512)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $52($0, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $200($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $201($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18448])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18448])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([24])
	CALL $199($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $127(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL memory()
	*(($3 + [16])) = [0]
	*($3 + [32]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL $54(CALL $159(($3 + [40]), $0, $1, ($3 + [8])), $0, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $159 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$6 = ($3 + [8])
	*(($5 = ((($4 = ($global$0 - [96])) + [32]) + [8]))) = *($6)
	*($4 + [32]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$5 = *($5)
	*(($7 = (($4 + [80]) + [8]))) = $5
	$8 = *($4 + [32])
	*($0 + [16]) = $8
	*(($0 + [24])) = $5
	*($4 + [80]) = $8
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*(($9 = (($4 + [16]) + [8]))) = *($6)
	*($4 + [16]) = *($3)
	*(($5 = (($4 + [64]) + [8]))) = *($9)
	*($4 + [64]) = *($4 + [16])
	*(($0 + [160])) = $1
	*(($0 + [168])) = $2
	$9 = *($5)
	*($7) = $9
	$8 = *($4 + [64])
	*(($0 + [176])) = $8
	*(($0 + [184])) = $9
	*($4 + [80]) = $8
	*($0 + [152]) = [19580]
	*(($9 = ($4 + [8]))) = *($6)
	*($4) = *($3)
	$3 = *($9)
	*((($4 + [48]) + [8])) = $3
	*($5) = $3
	$8 = *($4)
	*($4 + [64]) = $8
	*($4 + [48]) = $8
	*($0 + [192]) = $1
	*(($0 + [200])) = $2
	$3 = *($5)
	*($7) = $3
	$2 = *($4 + [64])
	*(($0 + [208])) = $2
	*(($0 + [216])) = $3
	*($4 + [80]) = $2
	*(($0 + [232])) = $1
	*(($0 + [224])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	return $0
}

int_32 .FUNC $273 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $271([8656], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $272 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8648]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8652])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8648]) = [1]
	$2 = ($2 << [16])
	*([0] + [8652]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8652])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8652]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8648]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8648]) = [1]
	$3 = ($3 << [16])
	*([0] + [8652]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8652])
	
.LABEL $label$10
	*([0] + [8652]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$6 = [32]
	$4 = *($4 + [12])
	$7 = ($1 + [32])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $183($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	*($1 + [48]) = CALL current_time()
	$7 = *($1 + [32])
	$4 = *(($1 + [36]))
	$8 = ($4 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	$6 = (($8 & [-8]) + $6)
	
.LABEL $label$3
	$4 = ($6 + [8])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$6 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $184($3, $1)
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $9, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274($6)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $224 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19843])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4980189539499769856)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19789])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19789])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $116(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $249($0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($1))
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	*($3 + [40]) = (int_64)0
	CALL $138(($3 + [8]), ($3 + [16]), *($2), [18052])
	CALL eosio_assert(((int_64)*(*($3 + [12]) + [8]) == (int_64)*($1)), [19213])
	$5 = ($0 + [112])
	$1 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $116($5, $1)
	
.LABEL $label$1
	$7 = *(($1 + [36]))
	$1 = *($3 + [12])
	$6 = *($1 + [32])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = ($0 + [140])
	$9 = ($0 + [136])
	$10 = ($0 + [120])
	$11 = ($0 + [112])
	
.LOOP $label$3:
	$4 = *($6)
	$2 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$7:
	$1 = ($2 + [-24])
	$13 = *($1)
	if ( ((int_64)*($13) == (int_64)$4) ){ goto $label$6 }
	$2 = $1
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$5), [19107])
	goto $label$4 
	
.LABEL $label$5
	$13 = [0]
	$1 = CALL db_find_i64(*($11), *($10), (int_64)4980189539499769856, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$13 = CALL $116($5, $1)
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$5), [19107])
	
.LABEL $label$4
	$4 = *($0)
	*($3 + [56]) = ($3 + [8])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [18916])
	CALL $139($5, $13, $4, ($3 + [56]))
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = *($3 + [8])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$2 = ((int_32)$1) != (int_32)[0]
	CALL eosio_assert($2), [18632])
	CALL eosio_assert($2, [18666])
	$2 = CALL db_next_i64(*($1 + [60]), ($3 + [56]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL $136((CASTING uint_32)(uint_64 $4), $2)
	
.LABEL $label$8
	CALL $140(($3 + [16]), $1)
	$12 = *($3 + [40])
	if ( ($12 == 0) ){ goto $label$9 }
	$6 = ($3 + [44])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	$13 = *($2 + [32])
	if ( ($13 == 0) ){ goto $label$14 }
	*(($2 + [36])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$14
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($3 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $12
	
.LABEL $label$10
	*($6) = $12
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($2 + [8])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $248 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $241(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $256(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8286], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $241(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $241(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $225 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [20]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19843])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-7807295949623618560)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19789])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19789])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $128(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [136]) = $2
	CALL require_auth($1)
	$7 = ($3 + [8])
	*(($6 = (($5 + [120]) + [8]))) = *($7)
	*($5 + [120]) = *($3)
	$8 = CALL $236(($5 + [104]), $4)
	*((($5 + [40]) + [8])) = *($6)
	*($5 + [40]) = *($5 + [120])
	CALL $15(($0 + [152]), $1, $2, ($5 + [40]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$1
	*(($6 = (($5 + [88]) + [8]))) = *($7)
	*($5 + [88]) = *($3)
	$8 = CALL $236(($5 + [72]), $4)
	*((($5 + [24]) + [8])) = *($6)
	*($5 + [24]) = *($5 + [88])
	$0 = ($0 + [192])
	CALL $44($0, $1, ($5 + [24]), $5)
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$2
	$2 = *(($3 + [8]))
	*((($5 + [56]) + [8])) = $2
	$1 = *($3)
	*((($5 + [8]) + [8])) = $2
	*($5 + [56]) = $1
	*($5 + [8]) = $1
	CALL $31($0, ($5 + [136]), ($5 + [8]))
	$global$0 = ($5 + [144])
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	$3 = ($2 + $7)
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $2
	*(($4 + [192])) = $3
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $2
	*(($4 + [224])) = $3
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $114($0, $1)
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [296]) + [24])) = (int_64)0
	*((($4 + [296]) + [40])) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [284]) = $2
	*($4 + [280]) = $2
	*($4 + [288]) = ($2 + $5)
	*($4 + [448]) = ($4 + [280])
	*($4 + [16]) = ($4 + [296])
	CALL $111(($4 + [16]), ($4 + [448]))
	*(($3 = ($4 + [8]))) = *($4 + [288])
	*($4) = *($4 + [280])
	$3 = *($3)
	*(($6 = (($4 + [352]) + [8]))) = $3
	*(($7 = (($4 + [400]) + [8]))) = $3
	$8 = *($4)
	*($4 + [400]) = $8
	*($4 + [352]) = $8
	$3 = *($7)
	*(($9 = (($4 + [448]) + [8]))) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$8 = *($4 + [400])
	*($4 + [32]) = $8
	*($4 + [448]) = $8
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($7 = (($4 + [384]) + [8]))) = *($6)
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [384]) = *($4 + [352])
	*(($3 = (($4 + [432]) + [8]))) = *($7)
	*($4 + [432]) = *($4 + [384])
	*(($4 + [176])) = $0
	*(($4 + [184])) = $1
	$7 = *($3)
	*($9) = $7
	$8 = *($4 + [432])
	*(($4 + [192])) = $8
	*(($4 + [200])) = $7
	*($4 + [448]) = $8
	*($4 + [168]) = [19580]
	*(($7 = (($4 + [368]) + [8]))) = *($6)
	*($4 + [368]) = *($4 + [352])
	$6 = *($7)
	*((($4 + [416]) + [8])) = $6
	*($3) = $6
	$8 = *($4 + [368])
	*($4 + [432]) = $8
	*($4 + [416]) = $8
	*(($4 + [216])) = $1
	$3 = *($3)
	*($9) = $3
	$1 = *($4 + [432])
	*(($4 + [224])) = $1
	*(($4 + [232])) = $3
	*($4 + [208]) = $0
	*($4 + [448]) = $1
	*(($4 + [248])) = $0
	*(($4 + [240])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($4 + [452]) = ($4 + [344])
	*($4 + [448]) = ($4 + [16])
	CALL $112(($4 + [448]), ($4 + [296]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $274($2)
	
.LABEL $label$4
	CALL $108(($4 + [16]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$5
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	$4 = ($global$0 - [256])
	$global$0 = $4
	CALL require_auth(*($1))
	$5 = ($0 + [72])
	$6 = *($1)
	$8 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [84]) == (int_32)$5), [19107])
	if ( $10 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$9 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-6030912142679474176, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $122($5, $9)
	CALL eosio_assert(((int_32)*($10 + [84]) == (int_32)$5), [19107])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0)
	*($4 + [112]) = $1
	CALL $132(($4 + [168]), $5, $6, ($4 + [112]))
	$10 = *($4 + [172])
	
.LABEL $label$1
	*($4 + [168]) = [32]
	CALL $1(($4 + [240]), $3, ($4 + [168]))
	CALL eosio_assert(((int_32)(*($4 + [244]) - *($4 + [240])) == (int_32)[36]), [18201])
	$3 = CALL $236(($4 + [224]), *($4 + [240]))
	$9 = *($3)
	$11 = ($9 & [1])
	if ( $11 ){ goto $label$11 }
	$7 = uint_32($9 >> [1])
	if ( ($7 == 0) ){ goto $label$9 }
	$5 = (($4 + [224]) | [1])
	$12 = (int_64)0
	$9 = [0]
	
.LOOP $label$12:
	$8 = *(($5 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$13 }
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$13
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$8 = *($3 + [4])
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = *(($3 + [8]))
	$12 = (int_64)0
	
.LOOP $label$14:
	$7 = *($9)
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$12 = ((int_64)((int_64)((int_64)$12 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$15
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$10
	if ( $11 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$12 = (int_64)0
	goto $label$6 
	
.LABEL $label$8
	$12 = (int_64)0
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	$3 = CALL $236(($4 + [168]), (*($4 + [240]) + [12]))
	$9 = *($4 + [168])
	$11 = ($9 & [1])
	if ( $11 ){ goto $label$21 }
	$7 = uint_32($9 >> [1])
	if ( ($7 == 0) ){ goto $label$19 }
	$5 = (($4 + [168]) | [1])
	$13 = (int_64)0
	$9 = [0]
	
.LOOP $label$22:
	$8 = *(($5 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$23 }
	$13 = ((int_64)((int_64)((int_64)$13 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$23
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$8 = *($3 + [4])
	if ( ($8 == 0) ){ goto $label$18 }
	$9 = *(($3 + [8]))
	$13 = (int_64)0
	
.LOOP $label$24:
	$7 = *($9)
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$25 }
	$13 = ((int_64)((int_64)((int_64)$13 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$25
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$24 }
	
.LABEL $label$20
	if ( $11 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$13 = (int_64)0
	goto $label$16 
	
.LABEL $label$18
	$13 = (int_64)0
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$16
	$3 = CALL $236(($4 + [208]), (*($4 + [240]) + [24]))
	$9 = *($3)
	$11 = ($9 & [1])
	if ( $11 ){ goto $label$31 }
	$7 = uint_32($9 >> [1])
	if ( ($7 == 0) ){ goto $label$29 }
	$5 = (($4 + [208]) | [1])
	$14 = (int_64)0
	$9 = [0]
	
.LOOP $label$32:
	$8 = *(($5 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$33 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$33
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$8 = *($3 + [4])
	if ( ($8 == 0) ){ goto $label$28 }
	$9 = *(($3 + [8]))
	$14 = (int_64)0
	
.LOOP $label$34:
	$7 = *($9)
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$35 }
	$14 = ((int_64)((int_64)((int_64)$14 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$35
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$34 }
	
.LABEL $label$30
	if ( $11 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$14 = (int_64)0
	goto $label$26 
	
.LABEL $label$28
	$14 = (int_64)0
	
.LABEL $label$27
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$26
	$15 = (int_64)0
	CALL eosio_assert(((int_64)$14 != (int_64)0), [18844])
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)-1
	*($4 + [192]) = (int_64)0
	$6 = *($0)
	*($4 + [168]) = $6
	*($4 + [176]) = *($1)
	*($4 + [120]) = [0]
	*($4 + [112]) = (int_64)0
	*(($9 = CALL _Znwj([232]))) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [48]) = (int_64)0
	*($9 + [56]) = (int_64)0
	*($9 + [64]) = (int_64)0
	*($9 + [72]) = (int_64)0
	*($9 + [80]) = (int_64)0
	*($9 + [88]) = (int_64)0
	*($9 + [96]) = (int_64)0
	*($9 + [104]) = (int_64)0
	*($9 + [112]) = (int_64)0
	*($9 + [120]) = (int_64)0
	*($9 + [128]) = (int_64)0
	*($4 + [112]) = $9
	$8 = ($9 + [232])
	*($4 + [120]) = $8
	*($9 + [144]) = (int_64)0
	*($9 + [136]) = (int_64)0
	*($9 + [152]) = (int_64)0
	*($9 + [160]) = (int_64)0
	*($9 + [168]) = (int_64)0
	*($9 + [176]) = (int_64)0
	*($9 + [184]) = (int_64)0
	*($9 + [192]) = (int_64)0
	*($9 + [200]) = (int_64)0
	*($9 + [208]) = (int_64)0
	*($9 + [216]) = (int_64)0
	*($9 + [224]) = (int_64)0
	*($4 + [116]) = $8
	CALL $118(($4 + [152]), ($4 + [168]), $6, ($4 + [112]))
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$36 }
	*($4 + [116]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$36
	*($4 + [32]) = $13
	CALL $119(($4 + [112]), $0, ($4 + [32]))
	$8 = *($4 + [116])
	$5 = *($4 + [112])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$37 }
	$15 = (int_64)0
	$7 = *($4 + [152])
	$9 = $5
	
.LOOP $label$38:
	$15 = ((int_64)*(($7 + (*($9) << [3]))) + (int_64)$15)
	$9 = ($9 + [4])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$38 }
	
.LABEL $label$37
	if ( ($5 == 0) ){ goto $label$39 }
	*($4 + [116]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$39
	*(($4 + [144])) = [0]
	*($4 + [128]) = (int_64)-1
	*($4 + [112]) = *($0)
	*($4 + [120]) = *($1)
	$5 = ($0 + [112])
	*($4 + [136]) = (int_64)0
	$9 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$40 }
	$9 = CALL $116($5, $8)
	
.LABEL $label$40
	*($4 + [108]) = $9
	*($4 + [104]) = $5
	*($4 + [96]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	$11 = *(($10 + [52]))
	$3 = *($10 + [48])
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$42 }
	$16 = ($0 + [140])
	$17 = ($0 + [136])
	$18 = ($0 + [120])
	$19 = ($0 + [112])
	$20 = ($4 + [140])
	$21 = ($4 + [136])
	
.LOOP $label$43:
	$6 = *($3)
	$8 = *($16)
	$10 = *($17)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$45 }
	
.LOOP $label$47:
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$6) ){ goto $label$46 }
	$8 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$45 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [19107])
	goto $label$44 
	
.LABEL $label$45
	$7 = [0]
	$9 = CALL db_find_i64(*($19), *($18), (int_64)4980189539499769856, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$44 }
	$7 = CALL $116($5, $9)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [19107])
	
.LABEL $label$44
	*($4 + [104]) = $5
	*($4 + [108]) = $7
	if ( ((int_64)*($7 + [8]) == (int_64)6138663591592764928) ){ goto $label$48 }
	if ( ((int_64)*($7 + [16]) != (int_64)$13) ){ goto $label$48 }
	$6 = *($3)
	$8 = *($20)
	$10 = *($21)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$56 }
	
.LOOP $label$58:
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$6) ){ goto $label$57 }
	$8 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$56 }
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)($4 + [112])), [19107])
	if ( ((int_64)($15 == 0) == 0) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$7 = [0]
	$9 = CALL db_find_i64(*($4 + [112]), *((($4 + [112]) + [8])), (int_64)6767209626505375744, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$59 }
	$7 = CALL $121(($4 + [112]), $9)
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)($4 + [112])), [19107])
	
.LABEL $label$59
	if ( (int_64)($15 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$15 = ((int_64)$15 + (int_64)-1)
	if ( ($7 == 0) ){ goto $label$49 }
	$9 = *($4 + [92])
	if ( ((int_32)$9 == (int_32)*((($4 + [88]) + [8]))) ){ goto $label$53 }
	*($9) = *($3)
	*($4 + [92]) = ($9 + [8])
	goto $label$52 
	
.LABEL $label$54
	$9 = *($4 + [92])
	if ( ((int_32)$9 == (int_32)*((($4 + [88]) + [8]))) ){ goto $label$51 }
	*($9) = *($3)
	*($4 + [92]) = ($9 + [8])
	goto $label$50 
	
.LABEL $label$53
	CALL $133(($4 + [88]), $3)
	
.LABEL $label$52
	$9 = *($4 + [76])
	if ( ((int_32)$9 == (int_32)*((($4 + [72]) + [8]))) ){ goto $label$60 }
	*($9) = *($4 + [104])
	*($4 + [76]) = (*($4 + [76]) + [8])
	goto $label$49 
	
.LABEL $label$60
	CALL $134(($4 + [72]), ($4 + [104]))
	goto $label$49 
	
.LABEL $label$51
	CALL $133(($4 + [88]), $3)
	
.LABEL $label$50
	$9 = *($4 + [76])
	if ( ((int_32)$9 == (int_32)*((($4 + [72]) + [8]))) ){ goto $label$62 }
	*($9) = *($4 + [104])
	*($4 + [76]) = (*($4 + [76]) + [8])
	goto $label$61 
	
.LABEL $label$62
	CALL $134(($4 + [72]), ($4 + [104]))
	
.LABEL $label$61
	$15 = (int_64)0
	
.LABEL $label$49
	$8 = *($4 + [88])
	$9 = *($4 + [92])
	if ( ((int_64)$14 == (int_64)(CASTING uint_64)(uint_32 int_32(($9 - $8) >> [3]))) ){ goto $label$41 }
	
.LABEL $label$48
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$43 }
	$8 = *($4 + [88])
	$9 = *($4 + [92])
	goto $label$41 
	
.LABEL $label$42
	$8 = [0]
	$9 = [0]
	
.LABEL $label$41
	CALL eosio_assert(((int_64)$14 == (int_64)(CASTING uint_64)(uint_32 int_32(($9 - $8) >> [3]))), [18871])
	$7 = *($4 + [76])
	$9 = *($4 + [72])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$63 }
	
.LOOP $label$64:
	$6 = *($0)
	$8 = *($9 + [4])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18916])
	CALL $135($5, $8, $6, ($4 + [32]))
	$9 = ($9 + [8])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$64 }
	
.LABEL $label$63
	$22 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)1.0175)
	if ( ((float_64)(float_64)|$22| < (float_64)(float_64)9223372036854775808) ){ goto $label$66 }
	$6 = (int_64)-9223372036854775808
	goto $label$65 
	
.LABEL $label$66
	$6 = (Rounds 0)($22)
	
.LABEL $label$65
	*($2) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	*(($4 + [64])) = [0]
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	$6 = *($0)
	*($4 + [32]) = $6
	*($4 + [40]) = $6
	$15 = ((int_64)((int_64)$12 * (int_64)1000000) & (int_64)4294967232)
	*($4 + [24]) = $15
	$9 = CALL db_find_i64($6, $6, (int_64)-6497942746098040832, $15)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$67 }
	CALL eosio_assert(((int_32)*(CALL $136(($4 + [32]), $9) + [56]) == (int_32)($4 + [32])), [19107])
	$5 = ($4 + [60])
	$3 = ($4 + [56])
	$11 = ($4 + [40])
	
.LOOP $label$68:
	$6 = ((int_64)*($4 + [24]) + (int_64)1)
	*($4 + [24]) = $6
	$8 = *($5)
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$69 }
	
.LOOP $label$71:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$70 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$69 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)($4 + [32])), [19107])
	if ( $10 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$9 = CALL db_find_i64(*($4 + [32]), *($11), (int_64)-6497942746098040832, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$67 }
	$9 = CALL $136(($4 + [32]), $9)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($4 + [32])), [19107])
	if ( $9 ){ goto $label$68 }
	
.LABEL $label$67
	$6 = *($0)
	*($4 + [12]) = $1
	*($4 + [16]) = $2
	*($4 + [8]) = ($4 + [24])
	*($4 + [20]) = ($4 + [88])
	CALL $137($4, ($4 + [32]), $6, ($4 + [8]))
	$10 = *($4 + [56])
	if ( ($10 == 0) ){ goto $label$72 }
	$5 = ($4 + [60])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$74 }
	
.LOOP $label$75:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$76 }
	$7 = *($8 + [32])
	if ( ($7 == 0) ){ goto $label$77 }
	*(($8 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$77
	CALL _ZdlPv($8)
	
.LABEL $label$76
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$75 }
	$9 = *(($4 + [56]))
	goto $label$73 
	
.LABEL $label$74
	$9 = $10
	
.LABEL $label$73
	*($5) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$72
	$9 = *($4 + [72])
	if ( ($9 == 0) ){ goto $label$78 }
	*($4 + [76]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$78
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$79 }
	*($4 + [92]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$79
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$80 }
	$10 = ($4 + [140])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$82 }
	
.LOOP $label$83:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$84 }
	CALL _ZdlPv($8)
	
.LABEL $label$84
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$83 }
	$9 = *(($4 + [136]))
	goto $label$81 
	
.LABEL $label$82
	$9 = $7
	
.LABEL $label$81
	*($10) = $7
	CALL _ZdlPv($9)
	
.LABEL $label$80
	$9 = *($4 + [152])
	if ( ($9 == 0) ){ goto $label$85 }
	*($4 + [156]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$85
	$10 = *($4 + [192])
	if ( ($10 == 0) ){ goto $label$86 }
	$5 = ($4 + [196])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$88 }
	
.LOOP $label$89:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$90 }
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$91 }
	*($8 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$91
	CALL _ZdlPv($8)
	
.LABEL $label$90
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$89 }
	$9 = *(($4 + [192]))
	goto $label$87 
	
.LABEL $label$88
	$9 = $10
	
.LABEL $label$87
	*($5) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$86
	$7 = *($4 + [240])
	if ( ($7 == 0) ){ goto $label$92 }
	$8 = *($4 + [244])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$94 }
	
.LOOP $label$95:
	$9 = ($8 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$96
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$95 }
	$9 = *($4 + [240])
	goto $label$93 
	
.LABEL $label$94
	$9 = $7
	
.LABEL $label$93
	*($4 + [244]) = $7
	CALL _ZdlPv($9)
	
.LABEL $label$92
	$global$0 = ($4 + [256])
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [312]) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [292]) = $2
	*($4 + [288]) = $2
	*($4 + [296]) = ($2 + $7)
	CALL $109(($4 + [288]), ($4 + [304]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [296])
	*($4 + [8]) = *($4 + [288])
	$3 = *($3)
	*(($8 = (($4 + [320]) + [8]))) = $3
	*(($9 = (($4 + [368]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [368]) = $10
	*($4 + [320]) = $10
	$3 = *($9)
	*(($11 = (($4 + [416]) + [8]))) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$10 = *($4 + [368])
	*($4 + [40]) = $10
	*($4 + [416]) = $10
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($9 = (($4 + [352]) + [8]))) = *($8)
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [352]) = *($4 + [320])
	*(($3 = (($4 + [400]) + [8]))) = *($9)
	*($4 + [400]) = *($4 + [352])
	*(($4 + [184])) = $0
	*(($4 + [192])) = $1
	$9 = *($3)
	*($11) = $9
	$10 = *($4 + [400])
	*(($4 + [200])) = $10
	*(($4 + [208])) = $9
	*($4 + [416]) = $10
	*($4 + [176]) = [19580]
	*(($9 = (($4 + [336]) + [8]))) = *($8)
	*($4 + [336]) = *($4 + [320])
	$8 = *($9)
	*((($4 + [384]) + [8])) = $8
	*($3) = $8
	$10 = *($4 + [336])
	*($4 + [400]) = $10
	*($4 + [384]) = $10
	*(($4 + [224])) = $1
	$3 = *($3)
	*($11) = $3
	$1 = *($4 + [400])
	*(($4 + [232])) = $1
	*(($4 + [240])) = $3
	*($4 + [216]) = $0
	*($4 + [416]) = $1
	*(($4 + [256])) = $0
	*(($4 + [248])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = CALL $236(($4 + [416]), ($4 + [304]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((*($4 + [416]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $274($2)
	
.LABEL $label$6
	CALL $108(($4 + [24]))
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$7
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [176])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = [0]
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$3 = *($0)
	*($1 + [8]) = $3
	*($1 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $146(($1 + [8]), $4) + [32]) == (int_32)($1 + [8])), [19107])
	$2 = [1]
	
.LABEL $label$1
	CALL eosio_assert($2, [19403])
	CALL $149(($1 + [8]))
	$3 = *($0 + [192])
	*(($1 + [72])) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = (int_64)0
	$2 = ($0 + [224])
	CALL $25(($1 + [112]), $2, $3, ($1 + [48]))
	*($1 + [144]) = (int_64)0
	CALL $26($2, ($1 + [112]), *($0 + [192]))
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($1 + [176])
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [296]) + [16]))) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [288]) = ($2 + $7)
	*($4 + [280]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [296]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18627])
	CALL memcpy((($4 + [296]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18627])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($8) = *($4 + [16])
	*($4 + [284]) = ($2 + [24])
	$9 = (($4 + [296]) + [24])
	CALL $109(($4 + [280]), $9)
	*(($3 = ($4 + [8]))) = *($4 + [288])
	*($4) = *($4 + [280])
	$3 = *($3)
	*(($10 = (($4 + [336]) + [8]))) = $3
	*(($11 = (($4 + [384]) + [8]))) = $3
	$12 = *($4)
	*($4 + [384]) = $12
	*($4 + [336]) = $12
	$3 = *($11)
	*(($13 = (($4 + [432]) + [8]))) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$12 = *($4 + [384])
	*($4 + [32]) = $12
	*($4 + [432]) = $12
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($11 = (($4 + [368]) + [8]))) = *($10)
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [368]) = *($4 + [336])
	*(($3 = (($4 + [416]) + [8]))) = *($11)
	*($4 + [416]) = *($4 + [368])
	*(($4 + [176])) = $0
	*(($4 + [184])) = $1
	$11 = *($3)
	*($13) = $11
	$12 = *($4 + [416])
	*(($4 + [192])) = $12
	*(($4 + [200])) = $11
	*($4 + [432]) = $12
	*($4 + [168]) = [19580]
	*(($11 = (($4 + [352]) + [8]))) = *($10)
	*($4 + [352]) = *($4 + [336])
	$10 = *($11)
	*((($4 + [400]) + [8])) = $10
	*($3) = $10
	$12 = *($4 + [352])
	*($4 + [416]) = $12
	*($4 + [400]) = $12
	*(($4 + [216])) = $1
	$10 = *($3)
	*($13) = $10
	$1 = *($4 + [416])
	*(($4 + [224])) = $1
	*(($4 + [232])) = $10
	*($4 + [208]) = $0
	*($4 + [432]) = $1
	*(($4 + [248])) = $0
	*(($4 + [240])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($3) = *($8)
	*($4 + [416]) = *($4 + [304])
	$0 = *($4 + [296])
	$8 = CALL $236(($4 + [400]), $9)
	*($13) = *($3)
	*($4 + [384]) = $0
	*($4 + [432]) = *($4 + [416])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [384])), (int_32 ($4 + [432])), (int_32 $8), (int_32 $6))
	if ( ((*($4 + [400]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $274($2)
	
.LABEL $label$6
	CALL $108(($4 + [16]))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$7
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $265([8192])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8192], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($4 & [1])
	$4 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($4 >> [1]) : $4 )
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = ( *($1 + [8]) ? ($1 + [1]) : $4 )
	$7 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$8:
	$1 = *($4)
	if ( ((int_32)$1 != (int_32)*($2)) ){ goto $label$12 }
	$1 = *($3)
	$8 = CALL $265([8192])
	if ( ((int_32)$8 != (int_32)( *($3 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$13 }
	if ( (CALL $247($3, [0], [-1], [8192], $8) == 0) ){ goto $label$11 }
	
.LABEL $label$13
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)*($7)) ){ goto $label$10 }
	CALL $236($1, $3)
	*($6) = (*($6) + [12])
	goto $label$9 
	
.LABEL $label$12
	CALL $244($3, int_32(($1 << [24]) >> [24]))
	
.LABEL $label$11
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $2($0, $3)
	
.LABEL $label$9
	CALL $240($3, [8192])
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	
.LABEL $label$7
	$4 = *($3)
	$5 = CALL $265([8192])
	if ( ((int_32)$5 != (int_32)( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$16 }
	if ( (CALL $247($3, [0], [-1], [8192], $5) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$4 = ($0 + [4])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$14 }
	CALL $236($5, $3)
	*($4) = (*($4) + [12])
	
.LABEL $label$15
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$14
	CALL $2($0, $3)
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $235($3)
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $270($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8360])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $270($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $274($0)
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)6767209626505375744, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $121(($2 + [24]), $4) + [12]) == (int_32)($2 + [24])), [19107])
	$4 = *($2 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($2 + [16]) = $1
	CALL $154(($2 + [8]), ($2 + [24]), $3, ($2 + [16]))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth((int_64)-7883083604913904416)
	*($1) = (int_64)14281
	$2 = ($0 + [112])
	$4 = *(($0 + [140]))
	$3 = *(($0 + [136]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)14281) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$2), [19107])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)4980189539499769856, (int_64)14281)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $116($2, $5)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$2), [19107])
	
.LABEL $label$1
	$8 = ((uint_64)$7 / (uint_64)(int_64)100)
	$7 = *($6 + [16])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($7 - ((int_64)$8 * (int_64)100))) == (int_64)1), [17855])
	CALL eosio_assert(((uint_64)$7 > (uint_64)(int_64)99), [17909])
	$9 = *(*($5))
	$8 = ((uint_64)$7 / (uint_64)$9)
	$5 = *([0] + [8348])
	$7 = *((*((($5 + ((int_32)(CASTING uint_32)(uint_64 $9) * (int_32)[12])) + [-12])) + ((CASTING uint_32)(uint_64 $8) << [3])))
	CALL eosio_assert((int_64)((int_64))($7 - ((int_64)$8 * (int_64)$9)) == 0), [17936])
	if ( ((uint_64)$9 > (uint_64)$7) ){ goto $label$5 }
	$4 = ($0 + [120])
	$3 = ($0 + [112])
	$6 = ($6 + [8])
	$7 = (int_64)0
	
.LOOP $label$6:
	$5 = CALL db_lowerbound_i64(*($3), *($4), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $116($2, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)*($0)) ){ goto $label$9 }
	$10 = [2]
	goto $label$7 
	
.LABEL $label$9
	$10 = [0]
	goto $label$7 
	
.LABEL $label$8
	$10 = [4]
	
.LABEL $label$7
	
.LOOP $label$10:
	goto $label$16 
	
.LABEL $label$18
	$5 = CALL $116($2, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)*($0)) ){ goto $label$11 }
	$10 = [2]
	goto $label$10 
	
.LABEL $label$17
	if ( ((int_64)*($5 + [16]) == (int_64)1) ){ goto $label$12 }
	$10 = [0]
	goto $label$10 
	
.LABEL $label$16
	CALL eosio_assert([1], [18666])
	$5 = CALL db_next_i64(*($5 + [36]), ($1 + [8]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$13 }
	$10 = [4]
	goto $label$10 
	
.LABEL $label$15
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)$8 > (uint_64)$7) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$14
	*($1 + [8]) = *($6)
	CALL $124($0, ($1 + [8]), $5)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((uint_64)$8 > (uint_64)$7) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$13
	$10 = [1]
	goto $label$10 
	
.LABEL $label$12
	$10 = [3]
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	goto $label$10 
	
.LABEL $label$5
	CALL $114($0, $1)
	CALL eosio_assert([0], [19561])
	$global$0 = ($1 + [16])
	$10
}

int_32 .FUNC $87 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($2 + [8])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)*($0)) ){ goto $label$1 }
	$4 = *((*($0 + [152]) + [-12]))
	*(($2 + [72])) = [0]
	*($2 + [48]) = $3
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	*($2 + [40]) = *(($4 + ($0 + [152])))
	$4 = CALL $23(($2 + [40]), (int_64)4408131, [17564])
	*(($5 = (($2 + [24]) + [8]))) = *(($4 + [8]))
	*($2 + [24]) = *($4)
	$6 = ($0 + [192])
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($2 + [68])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [64]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	*((($2 + [8]) + [8])) = *($5)
	*($2 + [8]) = *($2 + [24])
	CALL $38($6, $1, ($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [288]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18627])
	CALL memcpy((($4 + [272]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + [24])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*((($4 + [8]) + [24])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	$0 = *($4 + [288])
	$1 = *($4 + [272])
	*($4 + [304]) = *($4 + [280])
	*($4 + [312]) = $1
	*($4 + [296]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [312])), (int_32 ($4 + [304])), (int_32 ($4 + [296])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL $113($0, $1, $2, $3)
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth(*($1))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert((*($2) <= [30]), [19236])
	*($2) = (*($2) + [-1])
	*(($3 + [112])) = [0]
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$4 = *($0)
	*($3 + [80]) = $4
	*($3 + [88]) = *($1)
	*(($5 = CALL _Znwj([232]))) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($3 + [128]) = $5
	$6 = ($5 + [232])
	*($3 + [136]) = $6
	*($5 + [144]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = (int_64)0
	*($5 + [192]) = (int_64)0
	*($5 + [200]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($3 + [132]) = $6
	CALL $118(($3 + [64]), ($3 + [80]), $4, ($3 + [128]))
	$5 = *($3 + [128])
	if ( ($5 == 0) ){ goto $label$3 }
	*($3 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$5 = *($2)
	if ( ((uint_32)$5 > (uint_32)[21]) ){ goto $label$5 }
	CALL $5(($3 + [128]), $2)
	$6 = *($3 + [132])
	$5 = *($3 + [128])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $142($0, $1, $5, ($3 + [56]))
	$5 = ($5 + [4])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$5 = *($3 + [128])
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$4 }
	*($3 + [132]) = $5
	CALL _ZdlPv($5)
	goto $label$4 
	
.LABEL $label$5
	if ( ((uint_32)$5 > (uint_32)[27]) ){ goto $label$8 }
	CALL $5(($3 + [128]), $2)
	$8 = *($3 + [132])
	$7 = *($3 + [128])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$9 }
	$9 = *($3 + [64])
	$5 = $7
	
.LOOP $label$10:
	$6 = ($9 + (*($5) << [3]))
	$4 = *($6)
	*($3 + [56]) = $4
	$10 = *($6)
	*($3 + [56]) = ( $10 ? $4 : ((uint_64)$4 > (uint_64)$10) )
	$5 = ($5 + [4])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$4 }
	*($3 + [132]) = $7
	CALL _ZdlPv($7)
	goto $label$4 
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)[28]) ){ goto $label$4 }
	$5 = [0]
	$6 = *($3 + [64])
	
.LOOP $label$11:
	if ( $5 ){ goto $label$14 }
	$4 = *($6)
	*($3 + [56]) = $4
	if ( ((uint_64)$4 > (uint_64)*($6)) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((uint_64)$4 <= (uint_64)*(($6 + $5))) ){ goto $label$12 }
	
.LABEL $label$13
	$4 = *(($6 + $5))
	*($3 + [56]) = $4
	
.LABEL $label$12
	$5 = ($5 + [8])
	if ( ((int_32)$5 != (int_32)[176]) ){ goto $label$11 }
	
.LABEL $label$4
	CALL eosio_assert(((uint_64)*($3 + [56]) > (uint_64)*((*($3 + [64]) + (*($2) << [3])))), [19247])
	if ( ((int_32)*($2) != (int_32)[28]) ){ goto $label$16 }
	CALL $43(($0 + [192]), $1)
	goto $label$15 
	
.LABEL $label$16
	$4 = *($1)
	CALL $8(($3 + [40]), $2)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$5 = CALL $265([19263])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$19 }
	*($3 + [24]) = ($5 << [1])
	$6 = (($3 + [24]) | [1])
	if ( $5 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [24]) = ($8 | [1])
	*($3 + [32]) = $6
	*($3 + [28]) = $5
	
.LABEL $label$18
	CALL memcpy($6, [19263], $5)
	
.LABEL $label$17
	*(($6 + $5)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [40]) + [8]))
	*($3 + [8]) = *($3 + [40])
	CALL $143($0, $4, ($3 + [8]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$15
	$4 = *($0)
	*(($5 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($5) = $4
	*($3 + [120]) = $1
	*($3 + [124]) = $2
	*($3 + [128]) = $5
	$5 = ($5 + [16])
	*($3 + [136]) = $5
	*($3 + [132]) = $5
	*($3) = *($3 + [120])
	CALL $144($4, (int_64)-5003347152076169952, ($3 + [128]), $3)
	$5 = *($3 + [128])
	if ( ($5 == 0) ){ goto $label$20 }
	*($3 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	*(($5 = (*($3 + [64]) + (*($2) << [3])))) = ((int_64)*($5) + (int_64)1)
	CALL $145(($3 + [80]), ($3 + [64]), *($0))
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$21 }
	*($3 + [68]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$2 = *($3 + [104])
	if ( ($2 == 0) ){ goto $label$2 }
	$6 = ($3 + [108])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$1 = *($5)
	*($5) = [0]
	if ( ($1 == 0) ){ goto $label$25 }
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$26 }
	*($1 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$26
	CALL _ZdlPv($1)
	
.LABEL $label$25
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($3 + [104]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $2
	
.LABEL $label$22
	*($6) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $235(($3 + [24]))
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [464])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [304]) + [16]))) = (int_64)0
	*(($4 + [336])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [296]) = ($2 + $5)
	*($4 + [288]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [304]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18627])
	CALL memcpy((($4 + [304]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18627])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*($4 + [292]) = ($2 + [24])
	CALL $109(($4 + [288]), (($4 + [304]) + [24]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [296])
	*($4 + [8]) = *($4 + [288])
	$3 = *($3)
	*(($6 = (($4 + [352]) + [8]))) = $3
	*(($7 = (($4 + [400]) + [8]))) = $3
	$8 = *($4 + [8])
	*($4 + [400]) = $8
	*($4 + [352]) = $8
	$3 = *($7)
	*(($9 = (($4 + [448]) + [8]))) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$8 = *($4 + [400])
	*($4 + [40]) = $8
	*($4 + [448]) = $8
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($7 = (($4 + [384]) + [8]))) = *($6)
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [384]) = *($4 + [352])
	*(($3 = (($4 + [432]) + [8]))) = *($7)
	*($4 + [432]) = *($4 + [384])
	*(($4 + [184])) = $0
	*(($4 + [192])) = $1
	$7 = *($3)
	*($9) = $7
	$8 = *($4 + [432])
	*(($4 + [200])) = $8
	*(($4 + [208])) = $7
	*($4 + [448]) = $8
	*($4 + [176]) = [19580]
	*(($7 = (($4 + [368]) + [8]))) = *($6)
	*($4 + [368]) = *($4 + [352])
	$6 = *($7)
	*((($4 + [416]) + [8])) = $6
	*($3) = $6
	$8 = *($4 + [368])
	*($4 + [432]) = $8
	*($4 + [416]) = $8
	*(($4 + [224])) = $1
	$3 = *($3)
	*($9) = $3
	$1 = *($4 + [432])
	*(($4 + [232])) = $1
	*(($4 + [240])) = $3
	*($4 + [216]) = $0
	*($4 + [448]) = $1
	*(($4 + [256])) = $0
	*(($4 + [248])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [452]) = ($4 + [344])
	*($4 + [448]) = ($4 + [24])
	CALL $110(($4 + [448]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $274($2)
	
.LABEL $label$4
	CALL $108(($4 + [24]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [336])))
	
.LABEL $label$5
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $81 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL require_auth($1)
	$5 = *($0)
	*((($4 + [8]) + [16])) = *(($2 + [8]))
	*($4 + [8]) = $1
	*($4 + [16]) = *($2)
	$3 = CALL $236((($4 + [8]) + [24]), $3)
	*($4 + [56]) = (int_64)-5003266787307945984
	*($4 + [48]) = (int_64)4805577723863017856
	*(($2 = CALL _Znwj([16]))) = $5
	*($2 + [8]) = (int_64)3617214756542218240
	*(($4 + [84])) = [0]
	$0 = ($2 + [16])
	*((($4 + [48]) + [24])) = $0
	*(($4 + [68])) = $0
	*($4 + [64]) = $2
	*($4 + [76 align=4]) = (int_64)0
	$2 = *($3)
	$0 = ( *((($4 + [8]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($0 + [24])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = (($4 + [48]) + [28])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $41($0, $2)
	$0 = *(($4 + [80]))
	$2 = *(($4 + [76]))
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [88]) = $2
	*($4 + [96]) = $0
	$0 = ($0 - $2)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18448])
	CALL memcpy($2, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18448])
	CALL memcpy(($2 + [8]), (($4 + [8]) + [8]), [8])
	*($4 + [104]) = *((($4 + [8]) + [16]))
	CALL eosio_assert(((int_32)($0 + [-16]) > (int_32)[7]), [18448])
	CALL memcpy(($2 + [16]), ($4 + [104]), [8])
	*($4 + [92]) = ($2 + [24])
	CALL $157(($4 + [88]), $3)
	CALL $40(($4 + [88]), ($4 + [48]))
	$2 = *($4 + [88])
	CALL send_inline($2, (*($4 + [92]) - $2))
	$2 = *($4 + [88])
	if ( ($2 == 0) ){ goto $label$4 }
	*($4 + [92]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($4 + [76])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [80])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$7
	$global$0 = ($4 + [112])
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [272]) + [16]))) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [18627])
	CALL memcpy(($4 + [8]), ($2 + [16]), [8])
	*($3) = *($4 + [8])
	$8 = ($2 + [24])
	*(($4 + [28])) = $8
	$9 = ($2 + $7)
	*((($4 + [8]) + [24])) = $9
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $8
	*(($4 + [192])) = $9
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $8
	*(($4 + [224])) = $9
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*(($8 = (($4 + [296]) + [8]))) = *($3)
	*($4 + [296]) = *($4 + [280])
	$0 = *($4 + [272])
	*((($4 + [312]) + [8])) = *($8)
	*($4 + [328]) = $0
	*($4 + [312]) = *($4 + [296])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [328])), (int_32 ($4 + [312])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$0), [19107])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $146($0, $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$0), [19107])
	
.LABEL $label$2
	CALL eosio_assert([1], [18632])
	CALL eosio_assert([1], [18666])
	$3 = CALL db_next_i64(*($2 + [36]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $146($0, $3)
	
.LABEL $label$4
	CALL $197($0, $2)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [19107])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $146($1, $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [19107])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $193($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [24])) = *(($1 + [24]))
	$global$0 = ($4 + [16])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4981848853652488192, (int_64)4981848853652488192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $168($0, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $187($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $188($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $144 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $41(($4 + [52]), [12])
	$2 = *($3)
	$7 = *($4 + [52])
	$5 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [18448])
	CALL memcpy($7, $2, [8])
	$2 = *($3 + [4])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[3]), [18448])
	CALL memcpy(($7 + [8]), $2, [4])
	CALL $40(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $249(($4 + [8]))
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $146($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $191($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $192($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $194(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)4520614716222125216
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4520614716222125216
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $195(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	*($1 + [8]) = *(*(*($3) + [4]) + [8])
	$5 = *($1)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18791])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $143 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	*(($5 = (($4 + [72]) + [8]))) = *(($2 + [8]))
	*($4 + [88]) = $1
	*($4 + [72]) = *($2)
	$3 = CALL $236(($4 + [56]), $3)
	$6 = *($5)
	*((($4 + [96]) + [8])) = $6
	*(($7 = (($4 + [128]) + [8]))) = $6
	$6 = *($4 + [72])
	*($4 + [128]) = $6
	*($4 + [96]) = $6
	$5 = CALL $236(($4 + [112]), $3)
	*((($4 + [24]) + [8])) = *($7)
	*($4 + [24]) = *($4 + [128])
	CALL $20(($0 + [152]), $1, ($4 + [24]), $5)
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$1
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$2
	$6 = *(($2 + [8]))
	*((($4 + [40]) + [8])) = $6
	$1 = *($2)
	*((($4 + [8]) + [8])) = $6
	*($4 + [40]) = $1
	*($4 + [8]) = $1
	CALL $31(($0 + [192]), ($4 + [88]), ($4 + [8]))
	$global$0 = ($4 + [144])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL $152(($4 + [56]), ($0 + [72]), *($1), [17757])
	$5 = [0]
	*($4 + [48]) = [0]
	*($4 + [40]) = (int_64)0
	$7 = *(($1 + [52]))
	$1 = *($4 + [60])
	$6 = *($1 + [48])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$8 = ($0 + [112])
	$9 = ($0 + [140])
	$10 = ($0 + [136])
	$11 = ($0 + [120])
	$12 = (($4 + [40]) + [8])
	
.LOOP $label$2:
	$13 = *($6)
	$1 = *($9)
	$14 = *($10)
	if ( ((int_32)$14 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$6:
	$0 = ($1 + [-24])
	$15 = *($0)
	if ( ((int_64)*($15) == (int_64)$13) ){ goto $label$5 }
	$1 = $0
	if ( ((int_32)$14 != (int_32)$0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$14 == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($15 + [32]) == (int_32)$8), [19107])
	*($4 + [28]) = $15
	goto $label$3 
	
.LABEL $label$4
	$0 = CALL db_find_i64(*($8), *($11), (int_64)4980189539499769856, $13)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$7 }
	$0 = CALL $116($8, $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$8), [19107])
	*($4 + [28]) = $0
	goto $label$3 
	
.LABEL $label$7
	*($4 + [28]) = [0]
	
.LABEL $label$3
	*($4 + [24]) = $8
	$0 = *($4 + [44])
	if ( ((uint_32)$0 >= (uint_32)*($12)) ){ goto $label$8 }
	*($0) = *($4 + [24])
	*($4 + [44]) = (*($4 + [44]) + [8])
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	CALL $186(($4 + [40]), ($4 + [24]))
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$1
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = [0]
	$0 = *([0] + [8348])
	$14 = (*([0] + [8352]) - $0)
	$1 = ((int_32)$14 / (int_32)[12])
	if ( ($14 == 0) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[357913942]) ){ goto $label$10 }
	$5 = CALL _Znwj($14)
	$14 = ($5 + ((int_32)$1 * (int_32)[12]))
	*((($4 + [24]) + [8])) = $14
	*($4 + [24]) = $5
	*($4 + [28]) = $5
	$0 = $5
	
.LOOP $label$12:
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$0 = ($0 + [12])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	*($4 + [28]) = $14
	$0 = *([0] + [8348])
	
.LABEL $label$11
	$15 = [0]
	*($4 + [16]) = [0]
	$1 = *($2)
	$0 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *($0 + [4])
	$0 = *($0)
	*($4 + [8]) = (int_64)0
	$14 = [0]
	$0 = ($6 - $0)
	if ( ($0 == 0) ){ goto $label$13 }
	$1 = int_32($0 >> [3])
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$9 }
	$14 = CALL _Znwj($0)
	$15 = ($14 + ($1 << [3]))
	*((($4 + [8]) + [8])) = $15
	*($4 + [8]) = $14
	*($4 + [12]) = $14
	$0 = $14
	
.LOOP $label$14:
	*($0) = (int_64)0
	$0 = ($0 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	*($4 + [12]) = $15
	$1 = *($2)
	$5 = *($4 + [24])
	
.LABEL $label$13
	$0 = ($5 + ((int_32)$1 * (int_32)[12]))
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$16 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	*($0 + [4 align=4]) = (int_64)0
	*($0) = [0]
	$6 = ($0 + [8])
	$8 = ($0 + [4])
	$1 = *($2)
	$15 = *($4 + [12])
	$14 = *($4 + [8])
	goto $label$15 
	
.LABEL $label$16
	$6 = ($0 + [8])
	$8 = ($0 + [4])
	
.LABEL $label$15
	*($8) = $15
	*($0) = $14
	*($6) = *(($4 + [16]))
	$6 = *($0)
	$7 = *($4 + [24])
	$0 = ($7 + ((int_32)$1 * (int_32)[12]))
	$14 = *($0 + [4])
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$17 }
	$8 = int_32(($14 - $6) >> [3])
	$14 = *($4 + [44])
	$9 = *($4 + [40])
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$18 }
	$10 = ($1 + [1])
	$15 = [0]
	
.LOOP $label$19:
	$1 = ($6 + ($15 << [3]))
	$13 = (CASTING uint_64)(uint_32 ($10 + ((int_32)$15 * (int_32)[100])))
	$0 = $9
	
.LOOP $label$20:
	if ( ((int_64)*(*(($0 + [4])) + [16]) != (int_64)$13) ){ goto $label$21 }
	*($1) = ((int_64)*($1) + (int_64)1)
	
.LABEL $label$21
	$0 = ($0 + [8])
	if ( ((int_32)$14 != (int_32)$0) ){ goto $label$20 }
	if ( $15 ){ goto $label$24 }
	$16 = *($6)
	*($3) = $16
	$13 = *($1)
	if ( ((uint_64)$16 > (uint_64)$13) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$13 = *($1)
	if ( ((uint_64)*($3) <= (uint_64)$13) ){ goto $label$22 }
	
.LABEL $label$23
	*($3) = $13
	
.LABEL $label$22
	$15 = ($15 + [1])
	if ( ($15 <= $8) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$0 = [0]
	$1 = $6
	
.LOOP $label$25:
	if ( $0 ){ goto $label$28 }
	$16 = *($6)
	*($3) = $16
	$13 = *($1)
	if ( ((uint_64)$16 > (uint_64)$13) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$13 = *($1)
	if ( ((uint_64)*($3) <= (uint_64)$13) ){ goto $label$26 }
	
.LABEL $label$27
	*($3) = $13
	
.LABEL $label$26
	$1 = ($1 + [8])
	$0 = ($0 + [1])
	if ( ($0 <= $8) ){ goto $label$25 }
	
.LABEL $label$17
	if ( ($7 == 0) ){ goto $label$29 }
	$1 = *($4 + [28])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$0 = ($1 + [-12])
	$14 = *($0)
	if ( ($14 == 0) ){ goto $label$33 }
	*(($1 + [-8])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$33
	$1 = $0
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$32 }
	$0 = *($4 + [24])
	goto $label$30 
	
.LABEL $label$31
	$0 = $7
	
.LABEL $label$30
	*($4 + [28]) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$29
	$0 = *($4 + [40])
	if ( ($0 == 0) ){ goto $label$34 }
	*($4 + [44]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$34
	$global$0 = ($4 + [64])
	return (unreachable)
	
.LABEL $label$10
	CALL $249(($4 + [24]))
	
.LABEL $label$9
	CALL $249(($4 + [8]))
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [136])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$4 = *($0)
	*($3 + [104]) = $4
	*($3 + [112]) = *($1)
	*(($5 = CALL _Znwj([232]))) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($3 + [16]) = $5
	$6 = ($5 + [232])
	*($3 + [24]) = $6
	*($5 + [144]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = (int_64)0
	*($5 + [192]) = (int_64)0
	*($5 + [200]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($3 + [20]) = $6
	CALL $118(($3 + [88]), ($3 + [104]), $4, ($3 + [16]))
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$1 }
	*($3 + [20]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$7 = *((*($3 + [88]) + (*($2) << [3])))
	CALL eosio_assert(((int_64)$7 != (int_64)0), [19550])
	CALL $152(($3 + [80]), ($0 + [72]), *($1), [17757])
	CALL $5(($3 + [64]), $2)
	$9 = *(($5 + [52]))
	$5 = *($3 + [84])
	$8 = *($5 + [48])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$10 = ($0 + [112])
	$11 = ($3 + [32])
	$12 = ($3 + [40])
	$13 = ($3 + [48])
	$14 = ($3 + [44])
	
.LOOP $label$3:
	if ( (int_64)($7 == 0) ){ goto $label$4 }
	$15 = (int_64)0
	
.LOOP $label$5:
	$16 = *($3 + [68])
	$6 = *($3 + [64])
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$6 }
	$2 = *([0] + [8348])
	
.LOOP $label$7:
	$5 = ($2 + ((int_32)*($6) * (int_32)[12]))
	if ( ((int_32)*($5 + [4]) == (int_32)*($5)) ){ goto $label$8 }
	$5 = [0]
	$17 = [0]
	
.LOOP $label$9:
	CALL $126(($3 + [56]), $10, *($8), [17775])
	if ( ((int_64)*(*($3 + [60]) + [16]) != (int_64)(CASTING uint_64)(uint_32 ((((int_32)$5 * (int_32)[100]) | [1]) + *($6)))) ){ goto $label$10 }
	$4 = *($0)
	*((($3 + [16]) + [8])) = $4
	*($11) = (int_64)-1
	*($12) = (int_64)0
	*($13) = [0]
	*($3 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)6767209626505375744, *($8))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $121(($3 + [16]), $5) + [12]) == (int_32)($3 + [16])), [19107])
	$1 = *($12)
	if ( ($1 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$4 = *($0)
	*($3 + [8]) = $8
	CALL $153($3, ($3 + [16]), $4, ($3 + [8]))
	$1 = *($12)
	if ( ($1 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$5 = *($14)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$15 }
	$5 = *($12)
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($14) = $1
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$17 = ($17 + [1])
	$5 = ($17 & [255])
	$2 = *([0] + [8348])
	$5 = ($2 + ((int_32)*($6) * (int_32)[12]))
	if ( ((uint_32)int_32((*($5 + [4]) - *($5)) >> [3]) > (uint_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = ($6 + [4])
	if ( ((int_32)$6 != (int_32)$16) ){ goto $label$7 }
	
.LABEL $label$6
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)$7) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$17 }
	*($3 + [68]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($3 + [88])
	if ( ($5 == 0) ){ goto $label$18 }
	*($3 + [92]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$19 }
	$17 = ($3 + [132])
	$5 = *($17)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$24 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$24
	CALL _ZdlPv($2)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($3 + [128]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $6
	
.LABEL $label$20
	*($17) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($3 + [144])
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = [0]
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [4])
	$3 = ($2 + [12])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	$0 = *($4 + [272])
	*($4 + [292]) = *($4 + [280])
	*($4 + [296]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [296])), (int_32 ($4 + [292])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + [16])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	$0 = *($4 + [272])
	*($4 + [288]) = *($4 + [280])
	*($4 + [296]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [296])), (int_32 ($4 + [288])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)0
	CALL $138(($2 + [8]), ($2 + [16]), *($1), [18052])
	$4 = ($0 + [112])
	$1 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $116($4, $1)
	
.LABEL $label$1
	$6 = *(($1 + [36]))
	$1 = *($2 + [12])
	$5 = *($1 + [32])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$7 = ($0 + [140])
	$8 = ($0 + [136])
	$9 = ($0 + [120])
	$10 = ($0 + [112])
	
.LOOP $label$3:
	$3 = *($5)
	$12 = *($7)
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$5 }
	
.LOOP $label$7:
	$1 = ($12 + [-24])
	$13 = *($1)
	if ( ((int_64)*($13) == (int_64)$3) ){ goto $label$6 }
	$12 = $1
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$4), [19107])
	goto $label$4 
	
.LABEL $label$5
	$13 = [0]
	$1 = CALL db_find_i64(*($10), *($9), (int_64)4980189539499769856, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$13 = CALL $116($4, $1)
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$4), [19107])
	
.LABEL $label$4
	$3 = *($0)
	*($2 + [56]) = ($2 + [8])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [18916])
	CALL $141($4, $13, $3, ($2 + [56]))
	$5 = ($5 + [8])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($2 + [8])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$12 = ((int_32)$1) != (int_32)[0]
	CALL eosio_assert($12), [18632])
	CALL eosio_assert($12, [18666])
	$12 = CALL db_next_i64(*($1 + [60]), ($2 + [56]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$8 }
	CALL $136((CASTING uint_32)(uint_64 $3), $12)
	
.LABEL $label$8
	CALL $140(($2 + [16]), $1)
	$11 = *($2 + [40])
	if ( ($11 == 0) ){ goto $label$9 }
	$5 = ($2 + [44])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$11) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$12 = *($1)
	*($1) = [0]
	if ( ($12 == 0) ){ goto $label$13 }
	$13 = *($12 + [32])
	if ( ($13 == 0) ){ goto $label$14 }
	*(($12 + [36])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$14
	CALL _ZdlPv($12)
	
.LABEL $label$13
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($2 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $11
	
.LABEL $label$10
	*($5) = $11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($2 + [64])
}

void .FUNC $76 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [19107])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $122($3, $6)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [19107])
	
.LABEL $label$1
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$8 = *($0)
	*($2 + [24]) = $8
	*($2 + [32]) = $1
	$6 = CALL db_find_i64($8, $1, (int_64)4980194288978624512, (int_64)4980194288978624512)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $52(($2 + [24]), $6) + [12]) == (int_32)($2 + [24])), [19107])
	CALL $51(($2 + [24]))
	
.LABEL $label$5
	*(($6 = CALL _Znwj([264]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80 align=4]) = (int_64)0
	*($6 + [88 align=4]) = (int_64)0
	*($6 + [96 align=4]) = (int_64)0
	*($6 + [104 align=4]) = (int_64)0
	*($6 + [112]) = [0]
	*($2 + [8]) = $6
	*($2 + [12]) = $6
	$5 = ($6 + [264])
	*($2 + [16]) = $5
	*($6 + [116 align=4]) = (int_64)0
	*($6 + [124 align=4]) = (int_64)0
	*($6 + [132 align=4]) = (int_64)0
	*($6 + [140 align=4]) = (int_64)0
	*($6 + [148 align=4]) = (int_64)0
	*($6 + [156 align=4]) = (int_64)0
	*($6 + [164 align=4]) = (int_64)0
	*($6 + [172 align=4]) = (int_64)0
	*($6 + [180 align=4]) = (int_64)0
	*($6 + [188 align=4]) = (int_64)0
	*($6 + [196 align=4]) = (int_64)0
	*($6 + [204 align=4]) = (int_64)0
	*($6 + [212 align=4]) = (int_64)0
	*($6 + [220 align=4]) = (int_64)0
	*($6 + [228 align=4]) = (int_64)0
	*($6 + [236 align=4]) = (int_64)0
	*($6 + [244]) = [0]
	*($6 + [256 align=4]) = (int_64)0
	*($6 + [248 align=4]) = (int_64)0
	*($2 + [12]) = $5
	$9 = *(($7 + [52]))
	$3 = *($7 + [48])
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$6 }
	$10 = ($0 + [112])
	$11 = ($0 + [140])
	$12 = ($0 + [136])
	$13 = ($0 + [120])
	
.LOOP $label$7:
	$1 = *($3)
	$5 = *($11)
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$10 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$10), [19107])
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	$6 = CALL db_find_i64(*($10), *($13), (int_64)4980189539499769856, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $116($10, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$10), [19107])
	
.LABEL $label$8
	$5 = (*($2 + [8]) + ((int_32)((CASTING uint_32)(uint_64 ((uint_64)*($7 + [16]) % (uint_64)(int_64)100)) + [-1]) * (int_32)[12]))
	$6 = *($5 + [4])
	if ( ((int_32)$6 == (int_32)*($5 + [8])) ){ goto $label$12 }
	*($6) = *($7)
	*(($6 + [24])) = *(($7 + [24]))
	*(($6 + [16])) = *(($7 + [16]))
	*(($6 + [8])) = *(($7 + [8]))
	*(($6 = ($5 + [4]))) = (*($6) + [32])
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$12
	CALL $155($5, $7)
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $156(($2 + [24]), ($2 + [8]), *($0))
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$13 }
	$5 = *($2 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($5 + [-12])
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$17 }
	*(($5 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$16 }
	$6 = *($2 + [8])
	goto $label$14 
	
.LABEL $label$15
	$6 = $4
	
.LABEL $label$14
	*($2 + [12]) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$9 = *($2 + [48])
	if ( ($9 == 0) ){ goto $label$18 }
	$11 = ($2 + [52])
	$10 = *($11)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$23 }
	$5 = *($3 + [4])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($5 + [-12])
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$27 }
	*(($5 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$27
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$26 }
	$6 = *($3)
	goto $label$24 
	
.LABEL $label$25
	$6 = $4
	
.LABEL $label$24
	*(($3 + [4])) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$23
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$21 }
	$6 = *(($2 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $9
	
.LABEL $label$19
	*($11) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($2 + [64])
}

int_32 .FUNC $77 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [264]), $2, [8])
	$3 = ($2 + [8])
	*(($4 + [20])) = $3
	$8 = ($2 + $7)
	*(($4 + [24])) = $8
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = $1
	*(($4 + [176])) = $2
	*(($4 + [180])) = $3
	*(($4 + [184])) = $8
	*(($4 + [200])) = $1
	*(($4 + [208])) = $2
	*(($4 + [212])) = $3
	*(($4 + [216])) = $8
	*(($4 + [224])) = $0
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = [0]
	*($4 + [152]) = [19580]
	*($4 + [192]) = $0
	*(($4 + [252])) = (int_64)0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [264])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108($4)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
}

int_32 .FUNC $75 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$7 = CALL $270($8)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	CALL read_action_data($7, $8)
	
.LABEL $label$1
	CALL memset(($4 + [304]), [0], [80])
	*(($4 + [328])) = (int_64)0
	*(($4 + [344])) = [0]
	*(($4 + [376])) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [368]) = (int_64)0
	$9 = ($4 + [368])
	$2 = CALL $265([18105])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*(($4 + [368])) = ($2 << [1])
	$3 = ($9 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($10)
	*(($4 + [376])) = $3
	*(($4 + [372])) = $2
	*($4 + [368]) = ($10 | [1])
	
.LABEL $label$7
	CALL memcpy($3, [18105], $2)
	
.LABEL $label$6
	*(($3 + $2)) = [0]
	*($4 + [292]) = $7
	*($4 + [288]) = $7
	*($4 + [296]) = ($7 + $8)
	CALL $150(($4 + [288]), ($4 + [304]))
	CALL eosio_assert(((uint_32)(*($4 + [296]) - *($4 + [292])) > (uint_32)[7]), [18627])
	$11 = (($4 + [304]) + [56])
	CALL memcpy($11, *($4 + [292]), [8])
	*($4 + [292]) = (*($4 + [292]) + [8])
	CALL $109(($4 + [288]), $9)
	*(($2 = (($4 + [8]) + [8]))) = *($4 + [296])
	*($4 + [8]) = *($4 + [288])
	$2 = *($2)
	*(($10 = (($4 + [384]) + [8]))) = $2
	*(($3 = (($4 + [432]) + [8]))) = $2
	$12 = *($4 + [8])
	*($4 + [432]) = $12
	*($4 + [384]) = $12
	$3 = *($3)
	*(($2 = (($4 + [480]) + [8]))) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$12 = *($4 + [432])
	*($4 + [40]) = $12
	*($4 + [480]) = $12
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($13 = (($4 + [416]) + [8]))) = *($10)
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [416]) = *($4 + [384])
	*(($3 = (($4 + [464]) + [8]))) = *($13)
	*($4 + [464]) = *($4 + [416])
	*(($4 + [184])) = $0
	*(($4 + [192])) = $1
	$13 = *($3)
	*($2) = $13
	$12 = *($4 + [464])
	*(($4 + [200])) = $12
	*(($4 + [208])) = $13
	*($4 + [480]) = $12
	*($4 + [176]) = [19580]
	*(($13 = (($4 + [400]) + [8]))) = *($10)
	*($4 + [400]) = *($4 + [384])
	$10 = *($13)
	*((($4 + [448]) + [8])) = $10
	*($3) = $10
	$12 = *($4 + [400])
	*($4 + [464]) = $12
	*($4 + [448]) = $12
	*(($4 + [224])) = $1
	$3 = *($3)
	*($2) = $3
	$1 = *($4 + [464])
	*(($4 + [232])) = $1
	*(($4 + [240])) = $3
	*($4 + [216]) = $0
	*($4 + [480]) = $1
	*(($4 + [256])) = $0
	*(($4 + [248])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*((($4 + [480]) + [40])) = [0]
	*((($4 + [480]) + [24])) = *((($4 + [304]) + [24]))
	*((($4 + [480]) + [16])) = *((($4 + [304]) + [16]))
	*($2) = *((($4 + [304]) + [8]))
	*($4 + [512]) = (int_64)0
	*($4 + [480]) = *($4 + [304])
	$2 = (*(($4 + [340])) - *($4 + [336]))
	if ( ($2 == 0) ){ goto $label$9 }
	$10 = int_32($2 >> [3])
	if ( ((uint_32)$10 >= (uint_32)[536870912]) ){ goto $label$4 }
	$2 = CALL _Znwj($2)
	*((($4 + [480]) + [32])) = $2
	*(($3 = (($4 + [480]) + [36]))) = $2
	*(($4 + [520])) = ($2 + ($10 << [3]))
	$13 = *((($4 + [304]) + [32]))
	$10 = (*((($4 + [304]) + [36])) - $13)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $13, $10)
	*($3) = (*($3) + $10)
	
.LABEL $label$9
	*($4 + [528]) = *($4 + [352])
	*($4 + [536]) = *($11)
	$3 = CALL $236((($4 + [480]) + [64]), $9)
	$2 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$10 }
	$6 = *((*($2) + $6))
	
.LABEL $label$10
	CALL void $2((int_32 ($4 + [480])), (int_32 $6))
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [552])))
	
.LABEL $label$11
	$2 = *($4 + [512])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [516])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	if ( ($8 <= [513]) ){ goto $label$13 }
	CALL $274($7)
	
.LABEL $label$13
	CALL $108(($4 + [24]))
	if ( ((*(($4 + [368])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [376])))
	
.LABEL $label$14
	$2 = *(($4 + [336]))
	if ( ($2 == 0) ){ goto $label$15 }
	*(($4 + [340])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$global$0 = ($4 + [560])
	return [1]
	
.LABEL $label$5
	CALL $235($9)
	
.LABEL $label$4
	CALL $249(($4 + [512]))
	(unreachable)
	return (unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL require_auth(*($0))
	$4 = *($0)
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$2 }
	*(($2 + [248])) = [0]
	*($2 + [232]) = (int_64)-1
	*($2 + [240]) = (int_64)0
	*($2 + [224]) = $3
	*($2 + [216]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $3, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $146(($2 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($2 + [216])), [19107])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19403])
	$5 = *(($2 + [244]))
	if ( ((int_32)$5 == (int_32)*(($2 + [240]))) ){ goto $label$5 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($2 + [216])), [19107])
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	$5 = CALL db_find_i64(*($2 + [216]), *(($2 + [224])), (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $146(($2 + [216]), $5)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($2 + [216])), [19107])
	
.LABEL $label$4
	$5 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19485])
	*((($2 + [184]) + [24])) = *(($6 + [24]))
	*((($2 + [184]) + [16])) = *(($6 + [16]))
	$7 = *(($6 + [8]))
	*((($2 + [184]) + [8])) = $7
	$4 = *($6)
	*($2 + [184]) = $4
	*(($2 + [176])) = [0]
	*($2 + [160]) = (int_64)-1
	*($2 + [168]) = (int_64)0
	$3 = *($0)
	*($2 + [144]) = $3
	*($2 + [152]) = $3
	$6 = [0]
	$8 = CALL db_find_i64($3, $3, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $146(($2 + [144]), $8)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($2 + [144])), [19107])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19485])
	$3 = *($6 + [16])
	CALL __multi3(($2 + [8]), $3, (int_64)$3 >> (int_64)63), $4, (int_64)$4 >> (int_64)63))
	$3 = *((($2 + [8]) + [8]))
	$9 = *($2 + [8])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [18270])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [18294])
	CALL eosio_assert([1], [19510])
	CALL eosio_assert([1], [19525])
	$10 = ((int_64)$9 / (int_64)100000000)
	$11 = ((int_64)$10 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($11 <= (int_64)9223372036854775807), [18319])
	$3 = (int_64)5459781
	
.LOOP $label$8:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$12 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$10 }
	$12 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($12, [17223])
	if ( ((uint_64)$11 > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$3 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $4
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$3 = $4
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $6 ){ goto $label$15 }
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((int_64)$9 < (int_64)100000000) ){ goto $label$11 }
	*($2 + [96]) = (int_64)3617214756542218240
	*($2 + [88]) = *($0)
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$5 = CALL $265([19470])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$18 }
	*($2 + [24]) = ($5 << [1])
	$6 = (($2 + [24]) | [1])
	if ( $5 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2 + [24]) = ($8 | [1])
	*($2 + [32]) = $6
	*($2 + [28]) = $5
	
.LABEL $label$17
	CALL memcpy($6, [19470], $5)
	
.LABEL $label$16
	*(($6 + $5)) = [0]
	*(($2 + [64])) = (int_64)1397703940
	$5 = ($2 + [32])
	*(($2 + [80])) = *($5)
	*($5) = [0]
	*($2 + [56]) = $10
	*($2 + [40]) = *($0)
	*($2 + [48]) = *($1)
	*($2 + [72]) = *($2 + [24])
	*($2 + [24]) = (int_64)0
	$5 = CALL $39(($2 + [104]), ($2 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [40]))
	CALL $40(($2 + [256]), $5)
	$6 = *($2 + [256])
	CALL send_inline($6, (*($2 + [260]) - $6))
	$6 = *($2 + [256])
	if ( ($6 == 0) ){ goto $label$19 }
	*($2 + [260]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [80])))
	
.LABEL $label$22
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$23
	CALL eosio_assert(((int_64)$7 == (int_64)*(($2 + [192]))), [18513])
	$3 = (int_64)
	*($2 + [184]) = $3(*($2 + [184]) - $10))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18561])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18583])
	CALL $147(($2 + [216]), ($2 + [184]), *($0))
	
.LABEL $label$11
	CALL $149(($2 + [216]))
	$8 = *($2 + [168])
	if ( ($8 == 0) ){ goto $label$24 }
	$12 = ($2 + [172])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($2 + [168]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $8
	
.LABEL $label$25
	*($12) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$8 = *($2 + [240])
	if ( ($8 == 0) ){ goto $label$2 }
	$12 = ($2 + [244])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$30 }
	
.LOOP $label$31:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	CALL _ZdlPv($6)
	
.LABEL $label$32
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$31 }
	$5 = *(($2 + [240]))
	goto $label$29 
	
.LABEL $label$30
	$5 = $8
	
.LABEL $label$29
	*($12) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($2 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $235(($2 + [24]))
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL require_auth(*($1))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$2 }
	$4 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$5 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $7
	$4 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $4 ){ goto $label$7 }
	$4 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [18120])
	$9 = ($2 + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)1128481540), [19292])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [19318])
	$5 = *($9)
	$7 = *($1)
	$6 = *((*($0 + [152]) + [-12]))
	*(($3 + [200])) = [0]
	*($3 + [176]) = $7
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$10 = ($0 + [152])
	*($3 + [168]) = *(($6 + $10))
	$6 = CALL $23(($3 + [168]), (uint_64)$5 >> (uint_64)(int_64)8), [17564]
	$5 = *($6) + [8])
	$7 = *($6)
	$8 = *($3 + [192])
	if ( ($8 == 0) ){ goto $label$8 }
	$11 = ($3 + [196])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($3 + [192]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $8
	
.LABEL $label$9
	*($11) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$5 == (int_64)*($9)), [18454])
	CALL eosio_assert(((int_64)$7 >= (int_64)*($2)), [19350])
	*((($3 + [136]) + [8])) = [0]
	*((($3 + [152]) + [8])) = *($9)
	*($3 + [136]) = (int_64)0
	*($3 + [152]) = *($2)
	$5 = *($1)
	$6 = CALL $265([8192])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$15 }
	*($3 + [136]) = ($6 << [1])
	$4 = (($3 + [136]) | [1])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($3 + [136]) = ($8 | [1])
	*($3 + [144]) = $4
	*($3 + [140]) = $6
	
.LABEL $label$14
	CALL memcpy($4, [8192], $6)
	
.LABEL $label$13
	*(($4 + $6)) = [0]
	$7 = *((($3 + [152]) + [8]))
	*(($6 = (($3 + [64]) + [8]))) = $7
	*(($4 = (($3 + [168]) + [8]))) = $7
	$7 = *($3 + [152])
	*($3 + [168]) = $7
	*($3 + [64]) = $7
	$8 = CALL $236(($3 + [32]), ($3 + [136]))
	*((($3 + [16]) + [8])) = *($4)
	*($3 + [16]) = *($3 + [168])
	CALL $44(($0 + [192]), $5, ($3 + [16]), $6)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$16
	*(($4 = (($3 + [96]) + [8]))) = *($6)
	*($3 + [96]) = *($3 + [64])
	$6 = CALL $236(($3 + [208]), ($3 + [136]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [96])
	CALL $22($10, $5, $3, $6)
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$17
	$6 = [1]
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [144]))
	
.LABEL $label$18
	$4 = [0]
	*(($3 + [200])) = [0]
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$5 = *($0)
	*($3 + [168]) = $5
	$7 = *($1)
	*($3 + [176]) = $7
	$8 = CALL db_find_i64($5, $7, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(CALL $146(($3 + [168]), $8) + [32]) == (int_32)($3 + [168])), [19107])
	$6 = [0]
	
.LABEL $label$19
	CALL eosio_assert($6, [19374])
	*(($6 = (($3 + [96]) + [24]))) = (int_64)1397703940
	*((($3 + [96]) + [8])) = *(($2 + [8]))
	*($3 + [112]) = (int_64)0
	*($3 + [96]) = *($2)
	CALL eosio_assert([1], [18319])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	
.LOOP $label$22:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $7
	$8 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$5 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $8 ){ goto $label$24 }
	$8 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$8 = [0]
	
.LABEL $label$20
	CALL eosio_assert($8, [17223])
	CALL $147(($3 + [168]), ($3 + [96]), *($0))
	*(($3 + [128])) = [0]
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$12 = *($0)
	*($3 + [96]) = $12
	*($3 + [104]) = $12
	*($3 + [40]) = (int_64)1128481540
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [18319])
	$5 = (uint_64)*($3 + [40]) >> (uint_64)(int_64)8)
	
.LOOP $label$27:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$5 = $7
	$8 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$5 = $7
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $8 ){ goto $label$29 }
	$8 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = [0]
	
.LABEL $label$25
	CALL eosio_assert($8, [17223])
	*(($6 = (($3 + [32]) + [24]))) = (int_64)1397703940
	*($3 + [48]) = (int_64)0
	CALL eosio_assert([1], [18319])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	
.LOOP $label$31:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$5 = $7
	$1 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$5 = $7
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$33 }
	$1 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$31 }
	
.LABEL $label$30
	CALL eosio_assert($1, [17223])
	CALL $148(($3 + [64]), ($3 + [96]), $12, ($3 + [32]))
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($3 + [72])), [18368])
	$5 = ((int_64)*($3 + [64]) + (int_64)*($2))
	*($3 + [64]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18411])
	CALL eosio_assert(((int_64)*($3 + [64]) < (int_64)4611686018427387904), [18430])
	$4 = ($0 + [224])
	$6 = *(($0 + [252]))
	if ( ((int_32)$6 == (int_32)*(($0 + [248]))) ){ goto $label$35 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [19107])
	goto $label$34 
	
.LABEL $label$35
	$6 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [232])), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$34 }
	$6 = CALL $27($4, $8)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$4), [19107])
	
.LABEL $label$34
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19485])
	$12 = ((uint_64)((int_64)*($6 + [32]) * (int_64)100000000) / (uint_64)*($3 + [64]))
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$5 = $7
	$4 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$5 = $7
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $4 ){ goto $label$40 }
	$4 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	
.LABEL $label$36
	CALL eosio_assert($4, [17223])
	*(($3 + [88])) = (int_64)1397703940
	*($3 + [80]) = $12
	CALL $147(($3 + [96]), ($3 + [64]), *($0))
	$8 = *($3 + [120])
	if ( ($8 == 0) ){ goto $label$41 }
	$1 = ($3 + [124])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$43 }
	
.LOOP $label$44:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$44 }
	$6 = *(($3 + [120]))
	goto $label$42 
	
.LABEL $label$43
	$6 = $8
	
.LABEL $label$42
	*($1) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$41
	$8 = *($3 + [192])
	if ( ($8 == 0) ){ goto $label$2 }
	$1 = ($3 + [196])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$47 }
	
.LOOP $label$48:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$49 }
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$48 }
	$6 = *(($3 + [192]))
	goto $label$46 
	
.LABEL $label$47
	$6 = $8
	
.LABEL $label$46
	*($1) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $235(($3 + [136]))
}

void .FUNC $241 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $242($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $259 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $258 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $257($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19158])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $41($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18627])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $268 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $250())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $269($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $251 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $266([8372])
	$3 = *([0] + [8380])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8384])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8388]
	*([0] + [8380]) = [8388]
	$4 = *([0] + [8384])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $273([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8380])
	*([0] + [8380]) = $3
	*([0] + [8384]) = [0]
	
.LABEL $label$2
	*([0] + [8384]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $267([8372])
	return [0]
	
.LABEL $label$1
	CALL $267([8372])
	return [-1]
}

int_32 .FUNC $250 ()
{
	return [8364]
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $252 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [32] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $254($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $254($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $254($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $254($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19904]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $254($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $254($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $254($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $255 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $254 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $257 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $256 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $252([33], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $98 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [19107])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4980189539499769856, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $116($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [19107])
	
.LABEL $label$1
	CALL require_auth(*($8 + [8]))
	$10 = ((uint_64)$2 / (uint_64)(int_64)100)
	$11 = (int_64)
	$1 = ((uint_64)$1 / (uint_64)(int_64)100)
	$1 = *($8 + [16])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($1 - ((int_64)$1 * (int_64)100))) == (int_64)$11($2 - ((int_64)$10 * (int_64)100)))), [17855])
	CALL eosio_assert((uint_64)($10 <= $1), [17909])
	$9 = *((*((($7 + ((int_32)(CASTING uint_32)(uint_64 $11) * (int_32)[12])) + [-12])) + ((CASTING uint_32)(uint_64 $10) << [3])))
	$10 = ((uint_64)$1 / (uint_64)$9)
	$7 = *([0] + [8348])
	$1 = *((*((($7 + ((int_32)(CASTING uint_32)(uint_64 $9) * (int_32)[12])) + [-12])) + ((CASTING uint_32)(uint_64 $1) << [3])))
	CALL eosio_assert((int_64)((int_64))($1 - ((int_64)$10 * (int_64)$9)) == 0), [17936])
	if ( ((uint_64)$9 > (uint_64)$1) ){ goto $label$5 }
	if ( ((uint_64)$2 > (uint_64)(int_64)99) ){ goto $label$6 }
	$6 = ($0 + [120])
	$5 = ($0 + [112])
	$8 = ($8 + [8])
	$1 = (int_64)0
	
.LOOP $label$7:
	$7 = CALL db_lowerbound_i64(*($5), *($6), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $116($4, $7)
	if ( ((int_64)*($7 + [8]) != (int_64)*($0)) ){ goto $label$10 }
	$12 = [2]
	goto $label$8 
	
.LABEL $label$10
	$12 = [0]
	goto $label$8 
	
.LABEL $label$9
	$12 = [4]
	
.LABEL $label$8
	
.LOOP $label$11:
	goto $label$17 
	
.LABEL $label$19
	$7 = CALL $116($4, $7)
	if ( ((int_64)*($7 + [8]) != (int_64)*($0)) ){ goto $label$12 }
	$12 = [2]
	goto $label$11 
	
.LABEL $label$18
	if ( ((int_64)*($7 + [16]) == (int_64)*($3 + [8])) ){ goto $label$13 }
	$12 = [0]
	goto $label$11 
	
.LABEL $label$17
	CALL eosio_assert([1], [18666])
	$7 = CALL db_next_i64(*($7 + [36]), ($3 + [24]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$14 }
	$12 = [4]
	goto $label$11 
	
.LABEL $label$16
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((uint_64)$10 > (uint_64)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$15
	*($3 + [24]) = *($8)
	CALL $124($0, ($3 + [24]), $7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((uint_64)$10 > (uint_64)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$14
	$12 = [1]
	goto $label$11 
	
.LABEL $label$13
	$12 = [3]
	goto $label$11 
	
.LABEL $label$12
	$12 = [0]
	goto $label$11 
	
.LABEL $label$6
	$7 = ($8 + [8])
	*($3 + [24]) = *($7)
	*($3) = CALL $123($0, $2)
	CALL $113($0, ($3 + [24]), ($3 + [8]), $3)
	if ( (uint_64)($10 <= (int_64)2) ){ goto $label$5 }
	$1 = (int_64)1
	
.LOOP $label$20:
	$2 = *($3 + [8])
	*($3 + [24]) = *($7)
	*($3) = CALL $123($0, $2)
	CALL $113($0, ($3 + [24]), ($3 + [8]), $3)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((uint_64)$10 > (uint_64)$1) ){ goto $label$20 }
	
.LABEL $label$5
	CALL $114($0, ($3 + [16]))
	$global$0 = ($3 + [32])
	$12
}

int_32 .FUNC $99 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + [16])
	*(($4 + [28])) = $3
	$8 = ($2 + $7)
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $8
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $8
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $238 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL require_auth(*($0))
	if ( ((int_64)*($1) == (int_64)*($0)) ){ goto $label$2 }
	$4 = [0]
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$6 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$5 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [18120])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)1128481540), [19292])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [19318])
	*(($3 + [248])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$6 = *($0)
	*($3 + [216]) = $6
	$8 = *($1)
	*($3 + [224]) = $8
	$7 = CALL db_find_i64($6, $8, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $146(($3 + [216]), $7)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [216])), [19107])
	
.LABEL $label$8
	$5 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19403])
	$7 = *(($3 + [244]))
	if ( ((int_32)$7 == (int_32)*(($3 + [240]))) ){ goto $label$10 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [216])), [19107])
	goto $label$9 
	
.LABEL $label$10
	$7 = CALL db_find_i64(*($3 + [216]), *(($3 + [224])), (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $146(($3 + [216]), $7)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [216])), [19107])
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19485])
	*((($3 + [184]) + [24])) = *(($5 + [24]))
	*((($3 + [184]) + [16])) = *(($5 + [16]))
	$6 = *(($5 + [8]))
	*((($3 + [184]) + [8])) = $6
	*($3 + [184]) = *($5)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($2 + [8]))), [18454])
	CALL eosio_assert(((int_64)*($3 + [184]) >= (int_64)*($2)), [19440])
	*(($3 + [176])) = [0]
	*($3 + [160]) = (int_64)-1
	*($3 + [168]) = (int_64)0
	$6 = *($0)
	*($3 + [144]) = $6
	*($3 + [152]) = $6
	$5 = [0]
	$9 = CALL db_find_i64($6, $6, (int_64)4520614716222125216, (int_64)4520614716222125216)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $146(($3 + [144]), $9)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [144])), [19107])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19485])
	$6 = *($5 + [16])
	$6 = *($2)
	CALL __multi3(($3 + [8]), $6, (int_64)$6 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	$6 = *((($3 + [8]) + [8]))
	$8 = *($3 + [8])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [18270])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [18294])
	*($2) = $8
	CALL eosio_assert([1], [19510])
	CALL eosio_assert([1], [19525])
	$10 = *($2)
	$11 = ((int_64)$10 / (int_64)100000000)
	*($2) = $11
	$12 = ((int_64)$11 + (int_64)4611686018427387903)
	CALL eosio_assert((uint_64)($12 <= (int_64)9223372036854775807), [18319])
	$6 = (int_64)5459781
	
.LOOP $label$13:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $8
	$4 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = $8
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$15 }
	$4 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($4, [17223])
	if ( ((uint_64)$12 > (uint_64)(int_64)9223372036854775806) ){ goto $label$16 }
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $8
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$6 = $8
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$20 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((int_64)$10 < (int_64)100000000) ){ goto $label$16 }
	*($3 + [96]) = (int_64)3617214756542218240
	*($3 + [88]) = *($0)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$7 = CALL $265([19470])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$23 }
	*($3 + [24]) = ($7 << [1])
	$5 = (($3 + [24]) | [1])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$9 = (($7 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $7
	
.LABEL $label$22
	CALL memcpy($5, [19470], $7)
	
.LABEL $label$21
	*(($5 + $7)) = [0]
	*(($3 + [64])) = (int_64)1397703940
	$7 = ($3 + [32])
	*(($3 + [80])) = *($7)
	*($7) = [0]
	*($3 + [56]) = $11
	*($3 + [40]) = *($0)
	*($3 + [48]) = *($1)
	*($3 + [72]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	$7 = CALL $39(($3 + [104]), ($3 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [40]))
	CALL $40(($3 + [256]), $7)
	$5 = *($3 + [256])
	CALL send_inline($5, (*($3 + [260]) - $5))
	$5 = *($3 + [256])
	if ( ($5 == 0) ){ goto $label$24 }
	*($3 + [260]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$25 }
	*(($7 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$26 }
	*(($7 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$26
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$27
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$28
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*((($3 + [184]) + [8]))), [18513])
	$6 = (int_64)
	*($3 + [184]) = $6(*($3 + [184]) - *($2)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18561])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18583])
	CALL $147(($3 + [216]), ($3 + [184]), *($0))
	
.LABEL $label$16
	CALL $149(($3 + [216]))
	$9 = *($3 + [168])
	if ( ($9 == 0) ){ goto $label$29 }
	$2 = ($3 + [172])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$31 }
	
.LOOP $label$32:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$33 }
	CALL _ZdlPv($5)
	
.LABEL $label$33
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$32 }
	$7 = *(($3 + [168]))
	goto $label$30 
	
.LABEL $label$31
	$7 = $9
	
.LABEL $label$30
	*($2) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$29
	$9 = *($3 + [240])
	if ( ($9 == 0) ){ goto $label$2 }
	$2 = ($3 + [244])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$35 }
	
.LOOP $label$36:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$37 }
	CALL _ZdlPv($5)
	
.LABEL $label$37
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$36 }
	$7 = *(($3 + [240]))
	goto $label$34 
	
.LABEL $label$35
	$7 = $9
	
.LABEL $label$34
	*($2) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$2
	$global$0 = ($3 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $235(($3 + [24]))
}

int_32 .FUNC $95 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [272]) + [16]))) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [272]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [18627])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [18627])
	CALL memcpy(($4 + [8]), ($2 + [16]), [8])
	*($3) = *($4 + [8])
	$8 = ($2 + [24])
	*(($4 + [28])) = $8
	$9 = ($2 + $7)
	*((($4 + [8]) + [24])) = $9
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $8
	*(($4 + [192])) = $9
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $8
	*(($4 + [224])) = $9
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*(($8 = (($4 + [296]) + [8]))) = *($3)
	*($4 + [296]) = *($4 + [280])
	$0 = *($4 + [272])
	*((($4 + [312]) + [8])) = *($8)
	*($4 + [328]) = $0
	*($4 + [312]) = *($4 + [296])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [328])), (int_32 ($4 + [312])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
}

int_32 .FUNC $97 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*(($4 + [312])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [288]) = ($2 + $8)
	*($4 + [280]) = $2
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [18627])
	CALL memcpy(($4 + [296]), $2, [8])
	*($4 + [284]) = ($2 + [8])
	CALL $151(($4 + [280]), (($4 + [296]) + [8]))
	*(($3 = ($4 + [8]))) = *($4 + [288])
	*($4) = *($4 + [280])
	$3 = *($3)
	*(($9 = (($4 + [320]) + [8]))) = $3
	*(($10 = (($4 + [368]) + [8]))) = $3
	$11 = *($4)
	*($4 + [368]) = $11
	*($4 + [320]) = $11
	$3 = *($10)
	*(($12 = (($4 + [416]) + [8]))) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$11 = *($4 + [368])
	*($4 + [32]) = $11
	*($4 + [416]) = $11
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($10 = (($4 + [352]) + [8]))) = *($9)
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [352]) = *($4 + [320])
	*(($3 = (($4 + [400]) + [8]))) = *($10)
	*($4 + [400]) = *($4 + [352])
	*(($4 + [176])) = $0
	*(($4 + [184])) = $1
	$10 = *($3)
	*($12) = $10
	$11 = *($4 + [400])
	*(($4 + [192])) = $11
	*(($4 + [200])) = $10
	*($4 + [416]) = $11
	*($4 + [168]) = [19580]
	*(($10 = (($4 + [336]) + [8]))) = *($9)
	*($4 + [336]) = *($4 + [320])
	$9 = *($10)
	*((($4 + [384]) + [8])) = $9
	*($3) = $9
	$11 = *($4 + [336])
	*($4 + [400]) = $11
	*($4 + [384]) = $11
	*(($4 + [216])) = $1
	$3 = *($3)
	*($12) = $3
	$1 = *($4 + [400])
	*(($4 + [224])) = $1
	*(($4 + [232])) = $3
	*($4 + [208]) = $0
	*($4 + [416]) = $1
	*(($4 + [248])) = $0
	*(($4 + [240])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($4 + [400]) = (int_64)0
	*($4 + [408]) = [0]
	$0 = *($4 + [296])
	$3 = (*(($4 + [308])) - *($4 + [304]))
	if ( ($3 == 0) ){ goto $label$6 }
	$9 = int_32($3 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*((($4 + [400]) + [8])) = ($7 + ($9 << [3]))
	*($4 + [400]) = $7
	*($4 + [404]) = $7
	$9 = *((($4 + [296]) + [8]))
	$3 = (*(($4 + [308])) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $9, $3)
	$7 = (*($4 + [404]) + $3)
	*($4 + [404]) = $7
	
.LABEL $label$6
	*($4 + [384]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [424]) = [0]
	*($4 + [416]) = (int_64)0
	$7 = ($7 - *($4 + [400]))
	if ( ($7 == 0) ){ goto $label$8 }
	$5 = int_32($7 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*(($4 + [424])) = ($7 + ($5 << [3]))
	*($4 + [416]) = $7
	*($4 + [420]) = $7
	$9 = *($4 + [400])
	$5 = (*($4 + [404]) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $9, $5)
	*($4 + [420]) = ($7 + $5)
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [384])), (int_32 ($4 + [416])), (int_32 $6))
	$7 = *($4 + [416])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [420]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [400])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [404]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $274($2)
	
.LABEL $label$11
	CALL $108(($4 + [16]))
	$2 = *(($4 + [304]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [308])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [432])
	return [1]
	
.LABEL $label$5
	CALL $249(($4 + [400]))
	
.LABEL $label$4
	CALL $249(($4 + [416]))
	(unreachable)
	return (unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	$3 = *($0)
	*($2 + [120]) = $3
	*($2 + [128]) = $3
	*($2 + [144]) = (int_64)0
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-7807295949623618560, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $128(($2 + [120]), $4)
	$6 = ($0 + [32])
	$4 = *(($0 + [60]))
	if ( ((int_32)$4 == (int_32)*(($0 + [56]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$6), [19107])
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$7 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $47($6, $7)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$6), [19107])
	
.LABEL $label$2
	$8 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19485])
	*((($2 + [32]) + [56])) = *(($4 + [56]))
	*(($6 = (($2 + [32]) + [48]))) = *(($4 + [48]))
	*((($2 + [32]) + [40])) = *(($4 + [40]))
	*((($2 + [32]) + [32])) = *(($4 + [32]))
	*((($2 + [32]) + [24])) = *(($4 + [24]))
	*((($2 + [32]) + [16])) = *(($4 + [16]))
	*($2 + [40]) = *(($4 + [8]))
	*($2 + [32]) = *($4)
	CALL $3(($2 + [104]), $6)
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$7 = [4]
	$9 = [0]
	
.LOOP $label$4:
	$4 = ($1 + $7)
	$10 = ($4 + [-4])
	$6 = *($10)
	$11 = ((($6 << [24]) | (($6 << [8]) & [16711680])) | ((uint_32($6 >> [8]) & [65280]) | uint_32($6 >> [24])))
	*($2 + [32]) = $11
	$6 = ($4 + [-1])
	$12 = ($4 + [-2])
	$13 = ($4 + [-3])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	*($9) = $11
	$4 = ($9 + [4])
	*($2 + [20]) = $4
	goto $label$5 
	
.LABEL $label$6
	CALL $7(($2 + [16]), ($2 + [32]))
	$8 = *((($2 + [16]) + [8]))
	$4 = *($2 + [20])
	
.LABEL $label$5
	$6 = ((((*($12) << [16]) | (*($6) << [24])) | (*($13) << [8])) | *($10))
	*($2 + [32]) = $6
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$9 }
	*($4) = $6
	*($2 + [20]) = ($4 + [4])
	if ( ((uint_32)$7 <= (uint_32)[31]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $7(($2 + [16]), ($2 + [32]))
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = ($7 + [4])
	$8 = *((($2 + [16]) + [8]))
	$9 = *($2 + [20])
	goto $label$4 
	
.LABEL $label$7
	*($2 + [8]) = (int_64)0
	$6 = [-1]
	$9 = (($2 + [32]) + [8])
	$7 = [0]
	
.LOOP $label$12:
	if ( ($5 == 0) ){ goto $label$11 }
	$4 = *($2 + [16])
	$6 = ($6 + [1])
	if ( ((int_32)$6 == (int_32)int_32((*($2 + [20]) - $4) >> [2])) ){ goto $label$10 }
	$3 = *($5 + [8])
	*($2 + [8]) = $3
	CALL $129($0, $3, (CASTING uint_64)(uint_32 ((uint_32)*(($4 + $7)) % (uint_32)[429600])))
	$3 = *($0)
	*(($4 = CALL _Znwj([16]))) = $3
	*($4 + [8]) = (int_64)3617214756542218240
	$8 = ($4 + [16])
	*($9) = $8
	*($2 + [32]) = $4
	*($2 + [36]) = $8
	CALL $130($3, (int_64)-5003174495819661312, ($2 + [32]), ($2 + [8]))
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$13 }
	*($2 + [36]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	CALL eosio_assert([1], [18632])
	CALL eosio_assert([1], [18666])
	$4 = CALL db_next_i64(*($5 + [20]), ($2 + [32]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	CALL $128(($2 + [120]), $4)
	
.LABEL $label$14
	CALL $131(($2 + [120]), $5)
	$5 = [0]
	$4 = CALL db_lowerbound_i64(*($2 + [120]), *((($2 + [120]) + [8])), (int_64)-7807295949623618560, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$5 = CALL $128(($2 + [120]), $4)
	
.LABEL $label$15
	$7 = ($7 + [4])
	if ( ($6 <= [16]) ){ goto $label$12 }
	
.LABEL $label$11
	$4 = *($2 + [16])
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$16 }
	*($2 + [20]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$7 = *($2 + [144])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($2 + [148])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($2 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $7
	
.LABEL $label$17
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($2 + [160])
}

int_32 .FUNC $91 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $270($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [272]) + [24]))) = (int_64)0
	*(($9 = (($4 + [272]) + [16]))) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[31]), [18627])
	CALL memcpy(($4 + [272]), $2, [32])
	$3 = ($2 + [32])
	*(($4 + [28])) = $3
	$10 = ($2 + $7)
	*((($4 + [8]) + [24])) = $10
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = $1
	*(($4 + [184])) = $2
	*(($4 + [188])) = $3
	*(($4 + [192])) = $10
	*(($4 + [208])) = $1
	*(($4 + [216])) = $2
	*(($4 + [220])) = $3
	*(($4 + [224])) = $10
	*(($4 + [232])) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = [0]
	*($4 + [160]) = [19580]
	*($4 + [200]) = $0
	*(($4 + [260])) = (int_64)0
	*(($3 = (($4 + [304]) + [24]))) = *($8)
	*(($10 = (($4 + [304]) + [16]))) = *($9)
	*($4 + [312]) = *($4 + [280])
	*($4 + [304]) = *($4 + [272])
	*((($4 + [336]) + [24])) = *($3)
	*((($4 + [336]) + [16])) = *($10)
	*($4 + [344]) = *($4 + [312])
	*($4 + [336]) = *($4 + [304])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [336])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $274($2)
	
.LABEL $label$5
	CALL $108(($4 + [8]))
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
}

void .FUNC $93 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($5 = (($4 + [48]) + [8]))) = *(($2 + [8]))
	*($4 + [48]) = *($2)
	$2 = CALL $236(($4 + [32]), $3)
	$6 = *($5)
	*(($3 = (($4 + [64]) + [8]))) = $6
	*(($5 = (($4 + [128]) + [8]))) = $6
	$6 = *($4 + [48])
	*($4 + [128]) = $6
	*($4 + [64]) = $6
	$7 = CALL $236(($4 + [112]), $2)
	*((($4 + [16]) + [8])) = *($5)
	*($4 + [16]) = *($4 + [128])
	CALL $44(($0 + [192]), $1, ($4 + [16]), $4)
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$1
	*(($5 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [64])
	$3 = CALL $236(($4 + [80]), $2)
	*(($4 + [8])) = *($5)
	*($4) = *($4 + [96])
	CALL $22(($0 + [152]), $1, $4, $3)
	if ( (*($4 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($2) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [8]))
	$global$0 = ($4 + [144])
	return 
	
.LABEL $label$2
	$global$0 = ($4 + [144])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6497942746098040832, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $136($1, $6)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	*($1 + [8]) = *(*(*($3) + [4]) + [8])
	$5 = *($1)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $269 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $270($1)
	
.LABEL $label$2
	*(CALL $250()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $270(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $274($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $130 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $41(($4 + [52]), [8])
	$7 = *($4 + [52])
	CALL eosio_assert(((int_32)(*(($4 + [56])) - $7) > (int_32)[7]), [18448])
	CALL memcpy($7, $3, [8])
	CALL $40(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $249(($4 + [8]))
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18791])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [64]) = (int_64)-4710649412229887472
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80]) = [0]
	*($3 + [84]) = $1
	CALL $211(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [88])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $212(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [72])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [76])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	*($1 + [8]) = (int_64)6138663591592764928
	$5 = *($1)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [56]) = $0
	CALL $150(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $180(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $137 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [56]) = $1
	CALL $179(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $180(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $260 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $258($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $261 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $260($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $250()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $260($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19985]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $259($0, (int_64)0)
	*(CALL $250()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $260($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $260($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $260($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $260($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19985])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $260($0)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $260($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8193]))
	$8 = (int_64)0
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $260($0)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $260($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19985]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $259($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19985]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19985]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $260($0) + [19985]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $250()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $250()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $250()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $185($0, ($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $185($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_64 .FUNC $262 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $259($3, (int_64)0)
	$4 = CALL $261($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $263 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $265 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $208 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($6 + [-12])
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$10 }
	*(($6 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	CALL $210($5, *($1), *(($1 + [4])))
	
.LABEL $label$13
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$14 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [4])
	$1 = *($0)
	
.LOOP $label$15:
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$6 = ($4 + [4])
	$5 = (*($6) - *($4))
	if ( ($5 == 0) ){ goto $label$16 }
	$3 = int_32($5 >> [5])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*(($7 = ($1 + [4]))) = $5
	*(($1 + [8])) = ($5 + ($3 << [5]))
	*($1) = $5
	$6 = *($4)
	$1 = (*($6) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($5, $6, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$16
	$1 = (*($0) + [12])
	*($0) = $1
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$0 = ($0 + [4])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($4 + [-12])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	
.LABEL $label$17
	*($0) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$20 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$20
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$21:
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$6 = ($1 + [4])
	$4 = (*($6) - *($1))
	if ( ($4 == 0) ){ goto $label$22 }
	$3 = int_32($4 >> [5])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = CALL _Znwj($4)
	*(($7 = ($5 + [4]))) = $4
	*(($5 + [8])) = ($4 + ($3 << [5]))
	*($5) = $4
	$6 = *($1)
	$5 = (*($6) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($4, $6, $5)
	*($7) = (*($7) + $5)
	
.LABEL $label$22
	$5 = (*($5) + [12])
	*(($5 = ($0 + [4]))) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $249($5)
	
.LABEL $label$2
	CALL $249($1)
	
.LABEL $label$1
	CALL $249($0)
	(unreachable)
}

int_32 .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[12]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18448])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$3 = (CASTING uint_64)(uint_32 int_32((*($9 + [4]) - *($9)) >> [5]))
	
.LOOP $label$4:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18448])
	CALL memcpy(*($6), ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$4 }
	$7 = *(($9 + [4]))
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $181($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = ($9 + [12])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $208($1, *($5), *($5 + [4]))
	
.LABEL $label$1
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = (CASTING uint_64)(uint_32 ((int_32)($6 - $7) / (int_32)[12]))
	$5 = [0]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$10 = *($7)
	$9 = *($7 + [4])
	$11 = ($9 - $10)
	$8 = (CASTING uint_64)(uint_32 int_32($11 >> [5]))
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$6 }
	$5 = (($11 & [-32]) + $5)
	
.LABEL $label$6
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$8 }
	$7 = CALL $270($5)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $5)
	CALL $209($3, $1)
	*($1 + [16]) = CALL db_store_i64(*($4 + [8]), (int_64)4980194288978624512, *(*($0 + [8])), (int_64)4980194288978624512, $7, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4980194288978624512) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $274($7)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4980194288978624512) ){ goto $label$9 }
	
.LABEL $label$10
	*(($4 + [16])) = (int_64)4980194288978624513
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-12])
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$15 }
	*(($7 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	$1 = *($0)
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*(($0 + [4])) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $200 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $208($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [19048])
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = (CASTING uint_64)(uint_32 ((int_32)($6 - $7) / (int_32)[12]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$10 = *($7)
	$9 = *($7 + [4])
	$11 = ($9 - $10)
	$8 = (CASTING uint_64)(uint_32 int_32($11 >> [5]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$6 }
	$3 = (($11 & [-32]) + $3)
	
.LABEL $label$6
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$8 }
	$7 = CALL $270($3)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$7
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	CALL $209($5, $1)
	CALL db_update_i64(*(($1 + [16])), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)4980194288978624512) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $274($7)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4980194288978624512) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = (int_64)4980194288978624513
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $201 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $202(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4980194288978624512
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4980194288978624512
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $203(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = *($5)
	if ( ($7 == 0) ){ goto $label$4 }
	$3 = *($5 + [4])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($3 + [-12])
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$3 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$7 }
	$1 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*(($5 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $249($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $207 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19158])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1)
	$8 = *($1 + [4])
	$2 = ((int_32)($8 - $3) / (int_32)[12])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $205($1, ($7 - $2))
	$8 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($3 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($8 + [-12])
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$8 }
	*(($8 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$8 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$8 = $3
	
.LABEL $label$5
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$9:
	$3 = *($2)
	$6 = [0]
	$4 = (int_64)0
	
.LOOP $label$10:
	CALL eosio_assert(($3 <= *($5)), [19158])
	$3 = *($2)
	$7 = *($3)
	$3 = ($3 + [1])
	*($2) = $3
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($7 & [128]) ){ goto $label$10 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($9)
	$3 = *($9 + [4])
	$1 = int_32(($3 - $7) >> [5])
	if ( ((uint_32)$1 >= (uint_32)$6) ){ goto $label$13 }
	CALL $206($9, ($6 - $1))
	$3 = *(($9 + [4]))
	$7 = *($9)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((uint_32)$1 <= (uint_32)$6) ){ goto $label$14 }
	$3 = ($7 + ($6 << [5]))
	*(($9 + [4])) = $3
	
.LABEL $label$14
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$12
	
.LOOP $label$15:
	CALL $207($0, $7)
	$7 = ($7 + [32])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$15 }
	
.LABEL $label$11
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$5 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$7 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	*(($4 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$6 = ($1 + [-12])
	*($4) = *($6)
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$3 = $4
	$1 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $7
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $129 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [88]) = $1
	CALL eosio_assert((uint_64)($2 <= (int_64)640001), [17838])
	*($3 + [80]) = (int_64)0
	$1 = (int_64)1
	if ( (uint_64)($2 <= (int_64)2101) ){ goto $label$2 }
	$1 = (int_64)2
	if ( ((uint_64)$2 <= (uint_64)(int_64)12100) ){ goto $label$2 }
	$1 = (int_64)3
	if ( (uint_64)($2 <= (int_64)20501) ){ goto $label$2 }
	$1 = (int_64)4
	if ( (uint_64)($2 <= (int_64)39501) ){ goto $label$2 }
	$1 = (int_64)5
	if ( (uint_64)($2 <= (int_64)89501) ){ goto $label$2 }
	$1 = (int_64)6
	if ( (uint_64)($2 <= (int_64)103501) ){ goto $label$2 }
	$1 = (int_64)7
	if ( (uint_64)($2 <= (int_64)130501) ){ goto $label$2 }
	$1 = (int_64)8
	if ( (uint_64)($2 <= (int_64)140501) ){ goto $label$2 }
	$1 = (int_64)9
	if ( (uint_64)($2 <= (int_64)170501) ){ goto $label$2 }
	$1 = (int_64)10
	if ( (uint_64)($2 <= (int_64)180501) ){ goto $label$2 }
	$1 = (int_64)11
	if ( (uint_64)($2 <= (int_64)182121) ){ goto $label$2 }
	$1 = (int_64)12
	if ( (uint_64)($2 <= (int_64)192121) ){ goto $label$2 }
	$1 = (int_64)13
	if ( (uint_64)($2 <= (int_64)220121) ){ goto $label$2 }
	$1 = (int_64)14
	if ( (uint_64)($2 <= (int_64)230121) ){ goto $label$2 }
	$1 = (int_64)15
	if ( (uint_64)($2 <= (int_64)250121) ){ goto $label$2 }
	$1 = (int_64)16
	if ( (uint_64)($2 <= (int_64)277121) ){ goto $label$2 }
	$1 = (int_64)17
	if ( (uint_64)($2 <= (int_64)298121) ){ goto $label$2 }
	$1 = (int_64)18
	if ( (uint_64)($2 <= (int_64)335521) ){ goto $label$2 }
	$1 = (int_64)19
	if ( (uint_64)($2 <= (int_64)366621) ){ goto $label$2 }
	$1 = (int_64)20
	if ( (uint_64)($2 <= (int_64)389801) ){ goto $label$2 }
	$1 = (int_64)21
	if ( (uint_64)($2 <= (int_64)409801) ){ goto $label$2 }
	$1 = (int_64)22
	$4 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)429600) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [80]) = $1
	$4 = $1
	
.LABEL $label$1
	$5 = ($0 + [32])
	$6 = *(($0 + [60]))
	if ( ((int_32)$6 == (int_32)*(($0 + [56]))) ){ goto $label$4 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [19107])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $47($5, $7)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [19107])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19485])
	$2 = *(($6 + [48]))
	*(($7 = (($3 + [16]) + [48]))) = $2
	*((($3 + [16]) + [56])) = *(($6 + [56]))
	*((($3 + [16]) + [40])) = *(($6 + [40]))
	*((($3 + [16]) + [32])) = *(($6 + [32]))
	*((($3 + [16]) + [24])) = *(($6 + [24]))
	*((($3 + [16]) + [16])) = *(($6 + [16]))
	$1 = *(($6 + [8]))
	$8 = *($6)
	*($7) = ((int_64)$2 + (int_64)-1)
	*($3 + [24]) = $1
	*($3 + [16]) = $8
	CALL $46($5, ($3 + [16]), *($0))
	*($3 + [8]) = CALL $123($0, $4)
	CALL $113($0, ($3 + [88]), ($3 + [80]), ($3 + [8]))
	$global$0 = ($3 + [96])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18627])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $172(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [480])
	$global$0 = $2
	$1 = *($1)
	if ( ((uint_32)$1 > (uint_32)[28]) ){ goto $label$196 }
	goto $label$224 
	
.LABEL $label$224
	*(($2 + [472])) = [0]
	*($2 + [464]) = (int_64)0
	$1 = CALL $265([17052])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$153 }
	*($2 + [464]) = ($1 << [1])
	$3 = (($2 + [464]) | [1])
	$4 = ($2 + [464])
	if ( $1 ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$223
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$1 = CALL $265([17073])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$194 }
	*($2 + [32]) = ($1 << [1])
	$3 = (($2 + [32]) | [1])
	$4 = ($2 + [32])
	if ( $1 ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$222
	*(($2 + [216])) = [0]
	*($2 + [208]) = (int_64)0
	$1 = CALL $265([17153])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$191 }
	*($2 + [208]) = ($1 << [1])
	$3 = (($2 + [208]) | [1])
	$4 = ($2 + [208])
	if ( $1 ){ goto $label$190 }
	goto $label$189 
	
.LABEL $label$221
	*(($2 + [248])) = [0]
	*($2 + [240]) = (int_64)0
	$1 = CALL $265([17133])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$188 }
	*($2 + [240]) = ($1 << [1])
	$3 = (($2 + [240]) | [1])
	$4 = ($2 + [240])
	if ( $1 ){ goto $label$187 }
	goto $label$186 
	
.LABEL $label$220
	*(($2 + [296])) = [0]
	*($2 + [288]) = (int_64)0
	$1 = CALL $265([17113])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$185 }
	*($2 + [288]) = ($1 << [1])
	$3 = (($2 + [288]) | [1])
	$4 = ($2 + [288])
	if ( $1 ){ goto $label$184 }
	goto $label$183 
	
.LABEL $label$219
	*(($2 + [408])) = [0]
	*($2 + [400]) = (int_64)0
	$1 = CALL $265([17083])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$182 }
	*($2 + [400]) = ($1 << [1])
	$3 = (($2 + [400]) | [1])
	$4 = ($2 + [400])
	if ( $1 ){ goto $label$181 }
	goto $label$180 
	
.LABEL $label$218
	*(($2 + [280])) = [0]
	*($2 + [272]) = (int_64)0
	$1 = CALL $265([17093])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$179 }
	*($2 + [272]) = ($1 << [1])
	$3 = (($2 + [272]) | [1])
	$4 = ($2 + [272])
	if ( $1 ){ goto $label$178 }
	goto $label$177 
	
.LABEL $label$217
	*(($2 + [328])) = [0]
	*($2 + [320]) = (int_64)0
	$1 = CALL $265([17113])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$176 }
	*($2 + [320]) = ($1 << [1])
	$3 = (($2 + [320]) | [1])
	$4 = ($2 + [320])
	if ( $1 ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$216
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$1 = CALL $265([17196])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$173 }
	*($2 + [64]) = ($1 << [1])
	$3 = (($2 + [64]) | [1])
	$4 = ($2 + [64])
	if ( $1 ){ goto $label$172 }
	goto $label$171 
	
.LABEL $label$215
	*(($2 + [88])) = [0]
	*($2 + [80]) = (int_64)0
	$1 = CALL $265([17185])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$168 }
	*($2 + [80]) = ($1 << [1])
	$3 = (($2 + [80]) | [1])
	$4 = ($2 + [80])
	if ( $1 ){ goto $label$167 }
	goto $label$166 
	
.LABEL $label$214
	*(($2 + [440])) = [0]
	*($2 + [432]) = (int_64)0
	$1 = CALL $265([17073])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$165 }
	*($2 + [432]) = ($1 << [1])
	$3 = (($2 + [432]) | [1])
	$4 = ($2 + [432])
	if ( $1 ){ goto $label$164 }
	goto $label$163 
	
.LABEL $label$213
	*(($2 + [232])) = [0]
	*($2 + [224]) = (int_64)0
	$1 = CALL $265([17143])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$162 }
	*($2 + [224]) = ($1 << [1])
	$3 = (($2 + [224]) | [1])
	$4 = ($2 + [224])
	if ( $1 ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$212
	*(($2 + [424])) = [0]
	*($2 + [416]) = (int_64)0
	$1 = CALL $265([17052])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$159 }
	*($2 + [416]) = ($1 << [1])
	$3 = (($2 + [416]) | [1])
	$4 = ($2 + [416])
	if ( $1 ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$211
	*(($2 + [360])) = [0]
	*($2 + [352]) = (int_64)0
	$1 = CALL $265([17113])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$156 }
	*($2 + [352]) = ($1 << [1])
	$3 = (($2 + [352]) | [1])
	$4 = ($2 + [352])
	if ( $1 ){ goto $label$155 }
	goto $label$154 
	
.LABEL $label$210
	*(($2 + [456])) = [0]
	*($2 + [448]) = (int_64)0
	$1 = CALL $265([17063])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$150 }
	*($2 + [448]) = ($1 << [1])
	$3 = (($2 + [448]) | [1])
	$4 = ($2 + [448])
	if ( $1 ){ goto $label$149 }
	goto $label$148 
	
.LABEL $label$209
	*(($2 + [200])) = [0]
	*($2 + [192]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$145 }
	*($2 + [192]) = ($1 << [1])
	$3 = (($2 + [192]) | [1])
	$4 = ($2 + [192])
	if ( $1 ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$208
	*(($2 + [392])) = [0]
	*($2 + [384]) = (int_64)0
	$1 = CALL $265([17093])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$142 }
	*($2 + [384]) = ($1 << [1])
	$3 = (($2 + [384]) | [1])
	$4 = ($2 + [384])
	if ( $1 ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$207
	*(($2 + [152])) = [0]
	*($2 + [144]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$139 }
	*($2 + [144]) = ($1 << [1])
	$3 = (($2 + [144]) | [1])
	$4 = ($2 + [144])
	if ( $1 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$206
	*(($2 + [264])) = [0]
	*($2 + [256]) = (int_64)0
	$1 = CALL $265([17113])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$134 }
	*($2 + [256]) = ($1 << [1])
	$3 = (($2 + [256]) | [1])
	$4 = ($2 + [256])
	if ( $1 ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$205
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$131 }
	*($2 + [128]) = ($1 << [1])
	$3 = (($2 + [128]) | [1])
	$4 = ($2 + [128])
	if ( $1 ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$204
	*(($2 + [376])) = [0]
	*($2 + [368]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$126 }
	*($2 + [368]) = ($1 << [1])
	$3 = (($2 + [368]) | [1])
	$4 = ($2 + [368])
	if ( $1 ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$203
	*(($2 + [312])) = [0]
	*($2 + [304]) = (int_64)0
	$1 = CALL $265([17052])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$123 }
	*($2 + [304]) = ($1 << [1])
	$3 = (($2 + [304]) | [1])
	$4 = ($2 + [304])
	if ( $1 ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$202
	*(($2 + [184])) = [0]
	*($2 + [176]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$120 }
	*($2 + [176]) = ($1 << [1])
	$3 = (($2 + [176]) | [1])
	$4 = ($2 + [176])
	if ( $1 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$201
	*(($2 + [344])) = [0]
	*($2 + [336]) = (int_64)0
	$1 = CALL $265([17123])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$114 }
	*($2 + [336]) = ($1 << [1])
	$3 = (($2 + [336]) | [1])
	$4 = ($2 + [336])
	if ( $1 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$200
	*(($2 + [120])) = [0]
	*($2 + [112]) = (int_64)0
	$1 = CALL $265([17163])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$111 }
	*($2 + [112]) = ($1 << [1])
	$3 = (($2 + [112]) | [1])
	$4 = ($2 + [112])
	if ( $1 ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$199
	*(($2 + [168])) = [0]
	*($2 + [160]) = (int_64)0
	$1 = CALL $265([17103])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$108 }
	*($2 + [160]) = ($1 << [1])
	$3 = (($2 + [160]) | [1])
	$4 = ($2 + [160])
	if ( $1 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$198
	*(($2 + [104])) = [0]
	*($2 + [96]) = (int_64)0
	$1 = CALL $265([17174])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$105 }
	*($2 + [96]) = ($1 << [1])
	$3 = (($2 + [96]) | [1])
	$4 = ($2 + [96])
	if ( $1 ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$197
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$1 = CALL $265([17216])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$102 }
	*($2 + [16]) = ($1 << [1])
	$3 = (($2 + [16]) | [1])
	$4 = ($2 + [16])
	if ( $1 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$196
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$1 = CALL $265([17216])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$97 }
	*($2) = ($1 << [1])
	$3 = ($2 | [1])
	$4 = $2
	if ( $1 ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$195
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$1 = CALL $265([17206])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$94 }
	*($2 + [48]) = ($1 << [1])
	$3 = (($2 + [48]) | [1])
	$4 = ($2 + [48])
	if ( $1 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$194
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $3
	*($2 + [36]) = $1
	$4 = ($2 + [32])
	
.LABEL $label$193
	CALL memcpy($3, [17073], $1)
	
.LABEL $label$192
	*(($3 + $1)) = [0]
	$1 = *($2 + [32])
	if ( ($1 & [1]) ){ goto $label$225 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$91 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$226:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$227 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$227
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$226 }
	goto $label$90 
	
.LABEL $label$225
	$3 = *($2 + [36])
	if ( ($3 == 0) ){ goto $label$91 }
	$1 = *(($2 + [40]))
	$6 = (int_64)0
	
.LOOP $label$228:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$229 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$229
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$228 }
	goto $label$90 
	
.LABEL $label$191
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [208]) = ($5 | [1])
	*($2 + [216]) = $3
	*($2 + [212]) = $1
	$4 = ($2 + [208])
	
.LABEL $label$190
	CALL memcpy($3, [17153], $1)
	
.LABEL $label$189
	*(($3 + $1)) = [0]
	$1 = *($2 + [208])
	if ( ($1 & [1]) ){ goto $label$230 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$89 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$231:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$232 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$232
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$231 }
	goto $label$88 
	
.LABEL $label$230
	$3 = *($2 + [212])
	if ( ($3 == 0) ){ goto $label$89 }
	$1 = *(($2 + [216]))
	$6 = (int_64)0
	
.LOOP $label$233:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$234 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$234
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$233 }
	goto $label$88 
	
.LABEL $label$188
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [240]) = ($5 | [1])
	*($2 + [248]) = $3
	*($2 + [244]) = $1
	$4 = ($2 + [240])
	
.LABEL $label$187
	CALL memcpy($3, [17133], $1)
	
.LABEL $label$186
	*(($3 + $1)) = [0]
	$1 = *($2 + [240])
	if ( ($1 & [1]) ){ goto $label$235 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$87 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$236:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$237 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$237
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$236 }
	goto $label$86 
	
.LABEL $label$235
	$3 = *($2 + [244])
	if ( ($3 == 0) ){ goto $label$87 }
	$1 = *(($2 + [248]))
	$6 = (int_64)0
	
.LOOP $label$238:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$239 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$239
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$238 }
	goto $label$86 
	
.LABEL $label$185
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [288]) = ($5 | [1])
	*($2 + [296]) = $3
	*($2 + [292]) = $1
	$4 = ($2 + [288])
	
.LABEL $label$184
	CALL memcpy($3, [17113], $1)
	
.LABEL $label$183
	*(($3 + $1)) = [0]
	$1 = *($2 + [288])
	if ( ($1 & [1]) ){ goto $label$240 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$85 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$241:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$242 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$242
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$241 }
	goto $label$84 
	
.LABEL $label$240
	$3 = *($2 + [292])
	if ( ($3 == 0) ){ goto $label$85 }
	$1 = *(($2 + [296]))
	$6 = (int_64)0
	
.LOOP $label$243:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$244 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$244
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$243 }
	goto $label$84 
	
.LABEL $label$182
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [400]) = ($5 | [1])
	*($2 + [408]) = $3
	*($2 + [404]) = $1
	$4 = ($2 + [400])
	
.LABEL $label$181
	CALL memcpy($3, [17083], $1)
	
.LABEL $label$180
	*(($3 + $1)) = [0]
	$1 = *($2 + [400])
	if ( ($1 & [1]) ){ goto $label$245 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$83 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$246:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$247 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$247
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$246 }
	goto $label$82 
	
.LABEL $label$245
	$3 = *($2 + [404])
	if ( ($3 == 0) ){ goto $label$83 }
	$1 = *(($2 + [408]))
	$6 = (int_64)0
	
.LOOP $label$248:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$249 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$249
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$248 }
	goto $label$82 
	
.LABEL $label$179
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [272]) = ($5 | [1])
	*($2 + [280]) = $3
	*($2 + [276]) = $1
	$4 = ($2 + [272])
	
.LABEL $label$178
	CALL memcpy($3, [17093], $1)
	
.LABEL $label$177
	*(($3 + $1)) = [0]
	$1 = *($2 + [272])
	if ( ($1 & [1]) ){ goto $label$250 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$81 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$251:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$252 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$252
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$251 }
	goto $label$80 
	
.LABEL $label$250
	$3 = *($2 + [276])
	if ( ($3 == 0) ){ goto $label$81 }
	$1 = *(($2 + [280]))
	$6 = (int_64)0
	
.LOOP $label$253:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$254 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$254
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$253 }
	goto $label$80 
	
.LABEL $label$176
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [320]) = ($5 | [1])
	*($2 + [328]) = $3
	*($2 + [324]) = $1
	$4 = ($2 + [320])
	
.LABEL $label$175
	CALL memcpy($3, [17113], $1)
	
.LABEL $label$174
	*(($3 + $1)) = [0]
	$1 = *($2 + [320])
	if ( ($1 & [1]) ){ goto $label$170 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$79 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$255:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$256 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$256
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$255 }
	goto $label$78 
	
.LABEL $label$173
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [64]) = ($5 | [1])
	*($2 + [72]) = $3
	*($2 + [68]) = $1
	$4 = ($2 + [64])
	
.LABEL $label$172
	CALL memcpy($3, [17196], $1)
	
.LABEL $label$171
	*(($3 + $1)) = [0]
	$1 = *($2 + [64])
	if ( ($1 & [1]) ){ goto $label$169 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$77 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$257:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$258 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$258
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$257 }
	goto $label$76 
	
.LABEL $label$170
	$3 = *($2 + [324])
	if ( ($3 == 0) ){ goto $label$79 }
	$1 = *(($2 + [328]))
	$6 = (int_64)0
	
.LOOP $label$259:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$260 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$260
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$259 }
	goto $label$78 
	
.LABEL $label$169
	$3 = *($2 + [68])
	if ( ($3 == 0) ){ goto $label$77 }
	$1 = *(($2 + [72]))
	$6 = (int_64)0
	
.LOOP $label$261:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$262 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$262
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$261 }
	goto $label$76 
	
.LABEL $label$168
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [80]) = ($5 | [1])
	*($2 + [88]) = $3
	*($2 + [84]) = $1
	$4 = ($2 + [80])
	
.LABEL $label$167
	CALL memcpy($3, [17185], $1)
	
.LABEL $label$166
	*(($3 + $1)) = [0]
	$1 = *($2 + [80])
	if ( ($1 & [1]) ){ goto $label$263 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$75 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$264:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$265 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$265
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$264 }
	goto $label$74 
	
.LABEL $label$263
	$3 = *($2 + [84])
	if ( ($3 == 0) ){ goto $label$75 }
	$1 = *(($2 + [88]))
	$6 = (int_64)0
	
.LOOP $label$266:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$267 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$267
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$266 }
	goto $label$74 
	
.LABEL $label$165
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [432]) = ($5 | [1])
	*($2 + [440]) = $3
	*($2 + [436]) = $1
	$4 = ($2 + [432])
	
.LABEL $label$164
	CALL memcpy($3, [17073], $1)
	
.LABEL $label$163
	*(($3 + $1)) = [0]
	$1 = *($2 + [432])
	if ( ($1 & [1]) ){ goto $label$268 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$73 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$269:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$270 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$270
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$269 }
	goto $label$72 
	
.LABEL $label$268
	$3 = *($2 + [436])
	if ( ($3 == 0) ){ goto $label$73 }
	$1 = *(($2 + [440]))
	$6 = (int_64)0
	
.LOOP $label$271:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$272 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$272
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$271 }
	goto $label$72 
	
.LABEL $label$162
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [224]) = ($5 | [1])
	*($2 + [232]) = $3
	*($2 + [228]) = $1
	$4 = ($2 + [224])
	
.LABEL $label$161
	CALL memcpy($3, [17143], $1)
	
.LABEL $label$160
	*(($3 + $1)) = [0]
	$1 = *($2 + [224])
	if ( ($1 & [1]) ){ goto $label$273 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$71 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$274:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$275 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$275
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$274 }
	goto $label$70 
	
.LABEL $label$273
	$3 = *($2 + [228])
	if ( ($3 == 0) ){ goto $label$71 }
	$1 = *(($2 + [232]))
	$6 = (int_64)0
	
.LOOP $label$276:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$277 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$277
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$276 }
	goto $label$70 
	
.LABEL $label$159
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [416]) = ($5 | [1])
	*($2 + [424]) = $3
	*($2 + [420]) = $1
	$4 = ($2 + [416])
	
.LABEL $label$158
	CALL memcpy($3, [17052], $1)
	
.LABEL $label$157
	*(($3 + $1)) = [0]
	$1 = *($2 + [416])
	if ( ($1 & [1]) ){ goto $label$278 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$69 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$279:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$280 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$280
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$279 }
	goto $label$68 
	
.LABEL $label$278
	$3 = *($2 + [420])
	if ( ($3 == 0) ){ goto $label$69 }
	$1 = *(($2 + [424]))
	$6 = (int_64)0
	
.LOOP $label$281:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$282 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$282
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$281 }
	goto $label$68 
	
.LABEL $label$156
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [352]) = ($5 | [1])
	*($2 + [360]) = $3
	*($2 + [356]) = $1
	$4 = ($2 + [352])
	
.LABEL $label$155
	CALL memcpy($3, [17113], $1)
	
.LABEL $label$154
	*(($3 + $1)) = [0]
	$1 = *($2 + [352])
	if ( ($1 & [1]) ){ goto $label$283 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$67 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$284:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$285 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$285
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$284 }
	goto $label$66 
	
.LABEL $label$283
	$3 = *($2 + [356])
	if ( ($3 == 0) ){ goto $label$67 }
	$1 = *(($2 + [360]))
	$6 = (int_64)0
	
.LOOP $label$286:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$287 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$287
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$286 }
	goto $label$66 
	
.LABEL $label$153
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [464]) = ($5 | [1])
	*($2 + [472]) = $3
	*($2 + [468]) = $1
	$4 = ($2 + [464])
	
.LABEL $label$152
	CALL memcpy($3, [17052], $1)
	
.LABEL $label$151
	*(($3 + $1)) = [0]
	$1 = *($2 + [464])
	if ( ($1 & [1]) ){ goto $label$147 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$65 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$288:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$289 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$289
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$288 }
	goto $label$64 
	
.LABEL $label$150
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [448]) = ($5 | [1])
	*($2 + [456]) = $3
	*($2 + [452]) = $1
	$4 = ($2 + [448])
	
.LABEL $label$149
	CALL memcpy($3, [17063], $1)
	
.LABEL $label$148
	*(($3 + $1)) = [0]
	$1 = *($2 + [448])
	if ( ($1 & [1]) ){ goto $label$146 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$63 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$290:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$291 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$291
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$290 }
	goto $label$62 
	
.LABEL $label$147
	$3 = *($2 + [468])
	if ( ($3 == 0) ){ goto $label$65 }
	$1 = *(($2 + [472]))
	$6 = (int_64)0
	
.LOOP $label$292:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$293 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$293
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$292 }
	goto $label$64 
	
.LABEL $label$146
	$3 = *($2 + [452])
	if ( ($3 == 0) ){ goto $label$63 }
	$1 = *(($2 + [456]))
	$6 = (int_64)0
	
.LOOP $label$294:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$295 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$295
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$294 }
	goto $label$62 
	
.LABEL $label$145
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [192]) = ($5 | [1])
	*($2 + [200]) = $3
	*($2 + [196]) = $1
	$4 = ($2 + [192])
	
.LABEL $label$144
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$143
	*(($3 + $1)) = [0]
	$1 = *($2 + [192])
	if ( ($1 & [1]) ){ goto $label$296 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$61 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$297:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$298 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$298
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$297 }
	goto $label$60 
	
.LABEL $label$296
	$3 = *($2 + [196])
	if ( ($3 == 0) ){ goto $label$61 }
	$1 = *(($2 + [200]))
	$6 = (int_64)0
	
.LOOP $label$299:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$300 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$300
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$299 }
	goto $label$60 
	
.LABEL $label$142
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [384]) = ($5 | [1])
	*($2 + [392]) = $3
	*($2 + [388]) = $1
	$4 = ($2 + [384])
	
.LABEL $label$141
	CALL memcpy($3, [17093], $1)
	
.LABEL $label$140
	*(($3 + $1)) = [0]
	$1 = *($2 + [384])
	if ( ($1 & [1]) ){ goto $label$136 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$59 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$301:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$302 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$302
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$301 }
	goto $label$58 
	
.LABEL $label$139
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [144]) = ($5 | [1])
	*($2 + [152]) = $3
	*($2 + [148]) = $1
	$4 = ($2 + [144])
	
.LABEL $label$138
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$137
	*(($3 + $1)) = [0]
	$1 = *($2 + [144])
	if ( ($1 & [1]) ){ goto $label$135 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$57 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$303:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$304 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$304
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$303 }
	goto $label$56 
	
.LABEL $label$136
	$3 = *($2 + [388])
	if ( ($3 == 0) ){ goto $label$59 }
	$1 = *(($2 + [392]))
	$6 = (int_64)0
	
.LOOP $label$305:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$306 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$306
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$305 }
	goto $label$58 
	
.LABEL $label$135
	$3 = *($2 + [148])
	if ( ($3 == 0) ){ goto $label$57 }
	$1 = *(($2 + [152]))
	$6 = (int_64)0
	
.LOOP $label$307:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$308 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$308
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$307 }
	goto $label$56 
	
.LABEL $label$134
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [256]) = ($5 | [1])
	*($2 + [264]) = $3
	*($2 + [260]) = $1
	$4 = ($2 + [256])
	
.LABEL $label$133
	CALL memcpy($3, [17113], $1)
	
.LABEL $label$132
	*(($3 + $1)) = [0]
	$1 = *($2 + [256])
	if ( ($1 & [1]) ){ goto $label$128 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$55 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$309:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$310 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$310
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$309 }
	goto $label$54 
	
.LABEL $label$131
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [128]) = ($5 | [1])
	*($2 + [136]) = $3
	*($2 + [132]) = $1
	$4 = ($2 + [128])
	
.LABEL $label$130
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$129
	*(($3 + $1)) = [0]
	$1 = *($2 + [128])
	if ( ($1 & [1]) ){ goto $label$127 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$53 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$311:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$312 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$312
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$311 }
	goto $label$52 
	
.LABEL $label$128
	$3 = *($2 + [260])
	if ( ($3 == 0) ){ goto $label$55 }
	$1 = *(($2 + [264]))
	$6 = (int_64)0
	
.LOOP $label$313:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$314 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$314
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$313 }
	goto $label$54 
	
.LABEL $label$127
	$3 = *($2 + [132])
	if ( ($3 == 0) ){ goto $label$53 }
	$1 = *(($2 + [136]))
	$6 = (int_64)0
	
.LOOP $label$315:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$316 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$316
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$315 }
	goto $label$52 
	
.LABEL $label$126
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [368]) = ($5 | [1])
	*($2 + [376]) = $3
	*($2 + [372]) = $1
	$4 = ($2 + [368])
	
.LABEL $label$125
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$124
	*(($3 + $1)) = [0]
	$1 = *($2 + [368])
	if ( ($1 & [1]) ){ goto $label$117 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$51 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$317:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$318 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$318
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$317 }
	goto $label$50 
	
.LABEL $label$123
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [304]) = ($5 | [1])
	*($2 + [312]) = $3
	*($2 + [308]) = $1
	$4 = ($2 + [304])
	
.LABEL $label$122
	CALL memcpy($3, [17052], $1)
	
.LABEL $label$121
	*(($3 + $1)) = [0]
	$1 = *($2 + [304])
	if ( ($1 & [1]) ){ goto $label$116 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$49 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$319:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$320 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$320
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$319 }
	goto $label$48 
	
.LABEL $label$120
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [176]) = ($5 | [1])
	*($2 + [184]) = $3
	*($2 + [180]) = $1
	$4 = ($2 + [176])
	
.LABEL $label$119
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$118
	*(($3 + $1)) = [0]
	$1 = *($2 + [176])
	if ( ($1 & [1]) ){ goto $label$115 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$47 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$321:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$322 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$322
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$321 }
	goto $label$46 
	
.LABEL $label$117
	$3 = *($2 + [372])
	if ( ($3 == 0) ){ goto $label$51 }
	$1 = *(($2 + [376]))
	$6 = (int_64)0
	
.LOOP $label$323:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$324 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$324
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$323 }
	goto $label$50 
	
.LABEL $label$116
	$3 = *($2 + [308])
	if ( ($3 == 0) ){ goto $label$49 }
	$1 = *(($2 + [312]))
	$6 = (int_64)0
	
.LOOP $label$325:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$326 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$326
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$325 }
	goto $label$48 
	
.LABEL $label$115
	$3 = *($2 + [180])
	if ( ($3 == 0) ){ goto $label$47 }
	$1 = *(($2 + [184]))
	$6 = (int_64)0
	
.LOOP $label$327:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$328 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$328
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$327 }
	goto $label$46 
	
.LABEL $label$114
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [336]) = ($5 | [1])
	*($2 + [344]) = $3
	*($2 + [340]) = $1
	$4 = ($2 + [336])
	
.LABEL $label$113
	CALL memcpy($3, [17123], $1)
	
.LABEL $label$112
	*(($3 + $1)) = [0]
	$1 = *($2 + [336])
	if ( ($1 & [1]) ){ goto $label$329 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$45 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$330:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$331 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$331
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$330 }
	goto $label$44 
	
.LABEL $label$329
	$3 = *($2 + [340])
	if ( ($3 == 0) ){ goto $label$45 }
	$1 = *(($2 + [344]))
	$6 = (int_64)0
	
.LOOP $label$332:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$333 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$333
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$332 }
	goto $label$44 
	
.LABEL $label$111
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [112]) = ($5 | [1])
	*($2 + [120]) = $3
	*($2 + [116]) = $1
	$4 = ($2 + [112])
	
.LABEL $label$110
	CALL memcpy($3, [17163], $1)
	
.LABEL $label$109
	*(($3 + $1)) = [0]
	$1 = *($2 + [112])
	if ( ($1 & [1]) ){ goto $label$334 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$43 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$335:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$336 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$336
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$335 }
	goto $label$42 
	
.LABEL $label$334
	$3 = *($2 + [116])
	if ( ($3 == 0) ){ goto $label$43 }
	$1 = *(($2 + [120]))
	$6 = (int_64)0
	
.LOOP $label$337:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$338 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$338
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$337 }
	goto $label$42 
	
.LABEL $label$108
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [160]) = ($5 | [1])
	*($2 + [168]) = $3
	*($2 + [164]) = $1
	$4 = ($2 + [160])
	
.LABEL $label$107
	CALL memcpy($3, [17103], $1)
	
.LABEL $label$106
	*(($3 + $1)) = [0]
	$1 = *($2 + [160])
	if ( ($1 & [1]) ){ goto $label$339 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$41 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$340:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$341 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$341
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$340 }
	goto $label$40 
	
.LABEL $label$339
	$3 = *($2 + [164])
	if ( ($3 == 0) ){ goto $label$41 }
	$1 = *(($2 + [168]))
	$6 = (int_64)0
	
.LOOP $label$342:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$343 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$343
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$342 }
	goto $label$40 
	
.LABEL $label$105
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [96]) = ($5 | [1])
	*($2 + [104]) = $3
	*($2 + [100]) = $1
	$4 = ($2 + [96])
	
.LABEL $label$104
	CALL memcpy($3, [17174], $1)
	
.LABEL $label$103
	*(($3 + $1)) = [0]
	$1 = *($2 + [96])
	if ( ($1 & [1]) ){ goto $label$99 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$39 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$344:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$345 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$345
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$344 }
	goto $label$38 
	
.LABEL $label$102
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $3
	*($2 + [20]) = $1
	$4 = ($2 + [16])
	
.LABEL $label$101
	CALL memcpy($3, [17216], $1)
	
.LABEL $label$100
	*(($3 + $1)) = [0]
	$1 = *($2 + [16])
	if ( ($1 & [1]) ){ goto $label$98 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$37 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$346:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$347 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$347
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$346 }
	goto $label$36 
	
.LABEL $label$99
	$3 = *($2 + [100])
	if ( ($3 == 0) ){ goto $label$39 }
	$1 = *(($2 + [104]))
	$6 = (int_64)0
	
.LOOP $label$348:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$349 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$349
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$348 }
	goto $label$38 
	
.LABEL $label$98
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$37 }
	$1 = *(($2 + [24]))
	$6 = (int_64)0
	
.LOOP $label$350:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$351 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$351
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$350 }
	goto $label$36 
	
.LABEL $label$97
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $3
	*($2 + [4]) = $1
	$4 = $2
	
.LABEL $label$96
	CALL memcpy($3, [17216], $1)
	
.LABEL $label$95
	*(($3 + $1)) = [0]
	$1 = *($2)
	if ( ($1 & [1]) ){ goto $label$352 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$35 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$353:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$354 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$354
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$353 }
	goto $label$34 
	
.LABEL $label$352
	$3 = *($2 + [4])
	if ( ($3 == 0) ){ goto $label$35 }
	$1 = *(($2 + [8]))
	$6 = (int_64)0
	
.LOOP $label$355:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$356 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$356
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$355 }
	goto $label$34 
	
.LABEL $label$94
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [48]) = ($5 | [1])
	*($2 + [56]) = $3
	*($2 + [52]) = $1
	$4 = ($2 + [48])
	
.LABEL $label$93
	CALL memcpy($3, [17206], $1)
	
.LABEL $label$92
	*(($3 + $1)) = [0]
	$1 = *($2 + [48])
	if ( ($1 & [1]) ){ goto $label$357 }
	$5 = uint_32($1 >> [1])
	if ( ($5 == 0) ){ goto $label$33 }
	$4 = ($4 + [1])
	$6 = (int_64)0
	$1 = [0]
	
.LOOP $label$358:
	$3 = *(($4 + $1))
	if ( ((uint_32)(($3 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$359 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$359
	$1 = ($1 + [1])
	if ( ($1 <= $5) ){ goto $label$358 }
	goto $label$32 
	
.LABEL $label$357
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$33 }
	$1 = *(($2 + [56]))
	$6 = (int_64)0
	
.LOOP $label$360:
	$5 = *($1)
	if ( ((uint_32)(($5 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$361 }
	$6 = ((int_64)((int_64)((int_64)$6 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$361
	$1 = ($1 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$360 }
	goto $label$32 
	
.LABEL $label$91
	$6 = (int_64)0
	
.LABEL $label$90
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$364:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$363 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$365 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$364 }
	goto $label$362 
	
.LABEL $label$365
	$6 = $7
	
.LOOP $label$366:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$363 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$366 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$364 }
	goto $label$362 
	
.LABEL $label$363
	$1 = [0]
	
.LABEL $label$362
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [40])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$89
	$6 = (int_64)0
	
.LABEL $label$88
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$369:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$368 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$370 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$369 }
	goto $label$367 
	
.LABEL $label$370
	$6 = $7
	
.LOOP $label$371:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$368 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$371 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$369 }
	goto $label$367 
	
.LABEL $label$368
	$1 = [0]
	
.LABEL $label$367
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [216])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$87
	$6 = (int_64)0
	
.LABEL $label$86
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$374:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$373 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$375 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$374 }
	goto $label$372 
	
.LABEL $label$375
	$6 = $7
	
.LOOP $label$376:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$373 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$376 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$374 }
	goto $label$372 
	
.LABEL $label$373
	$1 = [0]
	
.LABEL $label$372
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [240]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [248])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$85
	$6 = (int_64)0
	
.LABEL $label$84
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$379:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$378 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$380 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$379 }
	goto $label$377 
	
.LABEL $label$380
	$6 = $7
	
.LOOP $label$381:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$378 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$381 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$379 }
	goto $label$377 
	
.LABEL $label$378
	$1 = [0]
	
.LABEL $label$377
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [296])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$83
	$6 = (int_64)0
	
.LABEL $label$82
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$384:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$383 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$385 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$384 }
	goto $label$382 
	
.LABEL $label$385
	$6 = $7
	
.LOOP $label$386:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$383 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$386 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$384 }
	goto $label$382 
	
.LABEL $label$383
	$1 = [0]
	
.LABEL $label$382
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [400]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [408])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$81
	$6 = (int_64)0
	
.LABEL $label$80
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$389:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$388 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$390 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$389 }
	goto $label$387 
	
.LABEL $label$390
	$6 = $7
	
.LOOP $label$391:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$388 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$391 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$389 }
	goto $label$387 
	
.LABEL $label$388
	$1 = [0]
	
.LABEL $label$387
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [280])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$79
	$6 = (int_64)0
	
.LABEL $label$78
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$394:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$393 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$395 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$394 }
	goto $label$392 
	
.LABEL $label$395
	$6 = $7
	
.LOOP $label$396:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$393 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$396 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$394 }
	goto $label$392 
	
.LABEL $label$393
	$1 = [0]
	
.LABEL $label$392
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [320]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [328])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$77
	$6 = (int_64)0
	
.LABEL $label$76
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$399:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$398 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$400 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$399 }
	goto $label$397 
	
.LABEL $label$400
	$6 = $7
	
.LOOP $label$401:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$398 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$401 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$399 }
	goto $label$397 
	
.LABEL $label$398
	$1 = [0]
	
.LABEL $label$397
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [72])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$75
	$6 = (int_64)0
	
.LABEL $label$74
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$404:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$403 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$405 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$404 }
	goto $label$402 
	
.LABEL $label$405
	$6 = $7
	
.LOOP $label$406:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$403 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$406 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$404 }
	goto $label$402 
	
.LABEL $label$403
	$1 = [0]
	
.LABEL $label$402
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [88])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$73
	$6 = (int_64)0
	
.LABEL $label$72
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$409:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$408 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$410 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$409 }
	goto $label$407 
	
.LABEL $label$410
	$6 = $7
	
.LOOP $label$411:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$408 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$411 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$409 }
	goto $label$407 
	
.LABEL $label$408
	$1 = [0]
	
.LABEL $label$407
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [432]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [440])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$71
	$6 = (int_64)0
	
.LABEL $label$70
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$414:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$413 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$415 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$414 }
	goto $label$412 
	
.LABEL $label$415
	$6 = $7
	
.LOOP $label$416:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$413 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$416 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$414 }
	goto $label$412 
	
.LABEL $label$413
	$1 = [0]
	
.LABEL $label$412
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [232])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$69
	$6 = (int_64)0
	
.LABEL $label$68
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$419:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$418 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$420 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$419 }
	goto $label$417 
	
.LABEL $label$420
	$6 = $7
	
.LOOP $label$421:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$418 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$421 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$419 }
	goto $label$417 
	
.LABEL $label$418
	$1 = [0]
	
.LABEL $label$417
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [416]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [424])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$67
	$6 = (int_64)0
	
.LABEL $label$66
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$424:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$423 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$425 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$424 }
	goto $label$422 
	
.LABEL $label$425
	$6 = $7
	
.LOOP $label$426:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$423 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$426 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$424 }
	goto $label$422 
	
.LABEL $label$423
	$1 = [0]
	
.LABEL $label$422
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [352]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [360])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$65
	$6 = (int_64)0
	
.LABEL $label$64
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$429:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$428 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$430 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$429 }
	goto $label$427 
	
.LABEL $label$430
	$6 = $7
	
.LOOP $label$431:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$428 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$431 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$429 }
	goto $label$427 
	
.LABEL $label$428
	$1 = [0]
	
.LABEL $label$427
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [464]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [472])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$63
	$6 = (int_64)0
	
.LABEL $label$62
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$434:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$433 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$435 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$434 }
	goto $label$432 
	
.LABEL $label$435
	$6 = $7
	
.LOOP $label$436:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$433 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$436 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$434 }
	goto $label$432 
	
.LABEL $label$433
	$1 = [0]
	
.LABEL $label$432
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [448]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [456])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$61
	$6 = (int_64)0
	
.LABEL $label$60
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$439:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$438 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$440 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$439 }
	goto $label$437 
	
.LABEL $label$440
	$6 = $7
	
.LOOP $label$441:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$438 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$441 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$439 }
	goto $label$437 
	
.LABEL $label$438
	$1 = [0]
	
.LABEL $label$437
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [200])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$59
	$6 = (int_64)0
	
.LABEL $label$58
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$444:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$443 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$445 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$444 }
	goto $label$442 
	
.LABEL $label$445
	$6 = $7
	
.LOOP $label$446:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$443 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$446 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$444 }
	goto $label$442 
	
.LABEL $label$443
	$1 = [0]
	
.LABEL $label$442
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [384]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [392])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$57
	$6 = (int_64)0
	
.LABEL $label$56
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$449:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$448 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$450 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$449 }
	goto $label$447 
	
.LABEL $label$450
	$6 = $7
	
.LOOP $label$451:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$448 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$451 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$449 }
	goto $label$447 
	
.LABEL $label$448
	$1 = [0]
	
.LABEL $label$447
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [152])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$55
	$6 = (int_64)0
	
.LABEL $label$54
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$454:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$453 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$455 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$454 }
	goto $label$452 
	
.LABEL $label$455
	$6 = $7
	
.LOOP $label$456:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$453 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$456 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$454 }
	goto $label$452 
	
.LABEL $label$453
	$1 = [0]
	
.LABEL $label$452
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [264])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$53
	$6 = (int_64)0
	
.LABEL $label$52
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$459:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$458 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$460 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$459 }
	goto $label$457 
	
.LABEL $label$460
	$6 = $7
	
.LOOP $label$461:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$458 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$461 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$459 }
	goto $label$457 
	
.LABEL $label$458
	$1 = [0]
	
.LABEL $label$457
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [136])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$51
	$6 = (int_64)0
	
.LABEL $label$50
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$464:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$463 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$465 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$464 }
	goto $label$462 
	
.LABEL $label$465
	$6 = $7
	
.LOOP $label$466:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$463 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$466 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$464 }
	goto $label$462 
	
.LABEL $label$463
	$1 = [0]
	
.LABEL $label$462
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [368]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [376])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$49
	$6 = (int_64)0
	
.LABEL $label$48
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$469:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$468 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$470 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$469 }
	goto $label$467 
	
.LABEL $label$470
	$6 = $7
	
.LOOP $label$471:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$468 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$471 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$469 }
	goto $label$467 
	
.LABEL $label$468
	$1 = [0]
	
.LABEL $label$467
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [304]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [312])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$47
	$6 = (int_64)0
	
.LABEL $label$46
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$474:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$473 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$475 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$474 }
	goto $label$472 
	
.LABEL $label$475
	$6 = $7
	
.LOOP $label$476:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$473 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$476 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$474 }
	goto $label$472 
	
.LABEL $label$473
	$1 = [0]
	
.LABEL $label$472
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [184])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$45
	$6 = (int_64)0
	
.LABEL $label$44
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$479:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$478 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$480 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$479 }
	goto $label$477 
	
.LABEL $label$480
	$6 = $7
	
.LOOP $label$481:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$478 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$481 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$479 }
	goto $label$477 
	
.LABEL $label$478
	$1 = [0]
	
.LABEL $label$477
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [336]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [344])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$43
	$6 = (int_64)0
	
.LABEL $label$42
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$484:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$483 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$485 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$484 }
	goto $label$482 
	
.LABEL $label$485
	$6 = $7
	
.LOOP $label$486:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$483 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$486 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$484 }
	goto $label$482 
	
.LABEL $label$483
	$1 = [0]
	
.LABEL $label$482
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [120])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$41
	$6 = (int_64)0
	
.LABEL $label$40
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$489:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$488 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$490 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$489 }
	goto $label$487 
	
.LABEL $label$490
	$6 = $7
	
.LOOP $label$491:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$488 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$491 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$489 }
	goto $label$487 
	
.LABEL $label$488
	$1 = [0]
	
.LABEL $label$487
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [168])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$39
	$6 = (int_64)0
	
.LABEL $label$38
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$494:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$493 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$495 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$494 }
	goto $label$492 
	
.LABEL $label$495
	$6 = $7
	
.LOOP $label$496:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$493 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$496 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$494 }
	goto $label$492 
	
.LABEL $label$493
	$1 = [0]
	
.LABEL $label$492
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [104])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$37
	$6 = (int_64)0
	
.LABEL $label$36
	*($0 + [8]) = (int_64)1397703940
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$499:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$498 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$500 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$499 }
	goto $label$497 
	
.LABEL $label$500
	$6 = $7
	
.LOOP $label$501:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$498 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$501 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$499 }
	goto $label$497 
	
.LABEL $label$498
	$1 = [0]
	
.LABEL $label$497
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [24])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$35
	$6 = (int_64)0
	
.LABEL $label$34
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$504:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$503 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$505 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$504 }
	goto $label$502 
	
.LABEL $label$505
	$6 = $7
	
.LOOP $label$506:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$503 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$506 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$504 }
	goto $label$502 
	
.LABEL $label$503
	$1 = [0]
	
.LABEL $label$502
	CALL eosio_assert($1, [17223])
	if ( ((*($2) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [8])))
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$33
	$6 = (int_64)0
	
.LABEL $label$32
	*($0 + [8]) = (int_64)1128481540
	*($0) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$509:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$508 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$510 }
	$6 = $7
	$1 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$509 }
	goto $label$507 
	
.LABEL $label$510
	$6 = $7
	
.LOOP $label$511:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$508 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $1 ){ goto $label$511 }
	$1 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$509 }
	goto $label$507 
	
.LABEL $label$508
	$1 = [0]
	
.LABEL $label$507
	CALL eosio_assert($1, [17223])
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$31
	$global$0 = ($2 + [480])
	return (unreachable)
	
.LABEL $label$30
	CALL $235(($2 + [464]))
	
.LABEL $label$29
	CALL $235(($2 + [32]))
	
.LABEL $label$28
	CALL $235(($2 + [208]))
	
.LABEL $label$27
	CALL $235(($2 + [240]))
	
.LABEL $label$26
	CALL $235(($2 + [288]))
	
.LABEL $label$25
	CALL $235(($2 + [400]))
	
.LABEL $label$24
	CALL $235(($2 + [272]))
	
.LABEL $label$23
	CALL $235(($2 + [320]))
	
.LABEL $label$22
	CALL $235(($2 + [64]))
	
.LABEL $label$21
	CALL $235(($2 + [80]))
	
.LABEL $label$20
	CALL $235(($2 + [432]))
	
.LABEL $label$19
	CALL $235(($2 + [224]))
	
.LABEL $label$18
	CALL $235(($2 + [416]))
	
.LABEL $label$17
	CALL $235(($2 + [352]))
	
.LABEL $label$16
	CALL $235(($2 + [448]))
	
.LABEL $label$15
	CALL $235(($2 + [192]))
	
.LABEL $label$14
	CALL $235(($2 + [384]))
	
.LABEL $label$13
	CALL $235(($2 + [144]))
	
.LABEL $label$12
	CALL $235(($2 + [256]))
	
.LABEL $label$11
	CALL $235(($2 + [128]))
	
.LABEL $label$10
	CALL $235(($2 + [368]))
	
.LABEL $label$9
	CALL $235(($2 + [304]))
	
.LABEL $label$8
	CALL $235(($2 + [176]))
	
.LABEL $label$7
	CALL $235(($2 + [336]))
	
.LABEL $label$6
	CALL $235(($2 + [112]))
	
.LABEL $label$5
	CALL $235(($2 + [160]))
	
.LABEL $label$4
	CALL $235(($2 + [96]))
	
.LABEL $label$3
	CALL $235(($2 + [16]))
	
.LABEL $label$2
	CALL $235($2)
	
.LABEL $label$1
	CALL $235(($2 + [48]))
	$1
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*(($0 + *((*($0) + [-12])))))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [17223])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [17243])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [17258])
	$4 = *((*($0) + [-12]))
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *(($0 + $4))
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $10(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])), [19107])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [17286])
	$8 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [19162])
	*(($4 = CALL _Znwj([56]))) = (int_64)0
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $11(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$0 = ($3 + [36])
	$9 = *($0)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($0) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $12(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$0 = ($3 + [36])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($0) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

int_64 .FUNC $123 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-3020626370892922880, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $165(($2 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($2 + [8])), [19107])
	$5 = *($0)
	CALL eosio_assert([1], [18916])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($2 + [8])), [18951])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [18997])
	$3 = ((int_64)*($4 + [8]) + (int_64)1)
	*($4 + [8]) = $3
	$1 = *($4)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [64]), $4, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [64]) | [8]), ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), $5, ($2 + [64]), [16])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$4 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *($2 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [19162])
	*(($4 = CALL _Znwj([32])) + [16]) = ($2 + [8])
	*($4 + [8]) = (int_64)1
	*($4) = $1
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [64]), $4, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [64]) | [8]), ($4 + [8]), [8])
	$3 = *($4)
	$6 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-3020626370892922880, $5, $3, ($2 + [64]), [16])
	*($4 + [20]) = $6
	$0 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [56]) = $4
	$3 = *($4)
	*($2 + [64]) = $3
	*($2 + [52]) = $6
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)*(($2 + [40]))) ){ goto $label$8 }
	*($0 + [8]) = $3
	*($0 + [16]) = $6
	*($2 + [56]) = [0]
	*($0) = $4
	*($7) = ($0 + [24])
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $166(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$3 = (int_64)1
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL _ZdlPv($0)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($2 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $6
	
.LABEL $label$9
	*($7) = $6
	CALL _ZdlPv($4)
	$global$0 = ($2 + [80])
	return $3
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	return $3
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [56]) = [0]
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [64]) = (int_64)-4710649412229887472
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	CALL $219(($3 + [32]), $5)
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $212(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [48])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18627])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [18627])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $127(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [19107])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4980194288978624512, (int_64)4980194288978624512)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $52($1, $3)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$1), [19107])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [19485])
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($2 + [4]) - *($2))
	$4 = ((int_32)$1 / (int_32)[12])
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$3 }
	$1 = CALL _Znwj($1)
	*(($3 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ((int_32)$4 * (int_32)[12]))
	*($0) = $1
	$5 = *(($2 + [4]))
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$4 = ($0 + [4])
	$2 = (*($4) - *($0))
	if ( ($2 == 0) ){ goto $label$7 }
	$6 = int_32($2 >> [5])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$2 = CALL _Znwj($2)
	*(($7 = ($1 + [4]))) = $2
	*(($1 + [8])) = ($2 + ($6 << [5]))
	*($1) = $2
	$4 = *($0)
	$1 = (*($4) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($2, $4, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$7
	$1 = (*($3) + [12])
	*($3) = $1
	$0 = ($0 + [12])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	
.LABEL $label$5
	return (unreachable)
	
.LABEL $label$4
	CALL $249($1)
	
.LABEL $label$3
	CALL $249($0)
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $236(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4980189539499769856, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $116($1, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [19107])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18791])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = ($0 + [112])
	$5 = *($2)
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [19107])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4980189539499769856, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $116($4, $8)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [19107])
	
.LABEL $label$1
	$7 = ($0 + [72])
	CALL $152(($3 + [8]), $7, *($1), [17795])
	$10 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [18916])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$4), [18951])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$4()), [18997])
	*($9 + [8]) = *($1)
	$5 = *($9)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($3 + [16]), $9, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($3 + [16]) | [8]), ($9 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($3 + [16]) + [16]), ($9 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($3 + [16]) + [24]), ($9 + [24]), [8])
	CALL db_update_i64(*($9 + [36]), $10, ($3 + [16]), [32])
	$8 = ($0 + [128])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = *($0)
	$8 = *($3 + [12])
	*($3 + [16]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18916])
	CALL $164($7, $8, $5, ($3 + [16]))
	$global$0 = ($3 + [48])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = *((*($0) + [-12]))
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *(($0 + $5))
	*($4 + [8]) = $6
	$7 = *($2 + [8])
	*($4 + [16]) = $1
	$5 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$5) < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $16(($4 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [19107])
	$6 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert([1], [18916])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [18951])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [18997])
	$1 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [18368])
	$7 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18411])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [18430])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [48]), $5, [8])
	*($4 + [72]) = *($5 + [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($5 + [20]), $6, ($4 + [48]), [16])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$1 + (int_64)1)
	$2 = *($4 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($5 + [8]) = *(($2 + [8]))
	*($5) = *($2)
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [48]), $5, [8])
	*($4 + [72]) = *($5 + [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $7, $1), ($4 + [48]), [16]
	*($5 + [20]) = $2)
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$5 }
	*($0) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $5
	$1 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $1
	*($0 + [16]) = $2
	*($4 + [72]) = [0]
	*($0) = $5
	*($8) = ($0 + [24])
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $5 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $17(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $2
	
.LABEL $label$8
	*($8) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [17514])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [17538])
	$6 = *($3 + [8])
	$7 = *((*($0) + [-12]))
	$8 = [0]
	*(($5 + [104])) = [0]
	$9 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $9)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *(($0 + $7))
	$10 = CALL $18(($5 + [72]), $9, [17564])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $12
	$8 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [17408])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [17583])
	CALL eosio_assert(((int_64)$6 == (int_64)*($10 + [8])), [17454])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($7 <= [257]), [17319])
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$9 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $9
	*($5 + [56]) = $9
	CALL $19($0, $1, ($5 + [24]))
	$1 = *($7)
	*((($5 + [40]) + [8])) = $1
	$9 = *($3)
	*((($5 + [8]) + [8])) = $1
	*($5 + [8]) = $9
	*($5 + [40]) = $9
	CALL $14($0, $2, ($5 + [8]), $9)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$11 }
	$7 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$7 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18627])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $214(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17223])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [17319])
	$5 = *((*($0) + [-12]))
	$10 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *(($0 + $5))
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $10(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [19107])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [17348])
	CALL require_auth(*($11 + [32]))
	$12 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [17408])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [17425])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [17454])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [17480])
	$7 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [18951])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$4()), [18997])
	$9 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$9), [18368])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18411])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [18430])
	$8 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [19048])
	*($4 + [176]) = (($4 + [128]) + [40])
	*($4 + [172]) = ($4 + [128])
	*($4 + [168]) = ($4 + [128])
	*($4 + [184]) = ($4 + [168])
	*($4 + [196]) = ($11 + [16])
	*($4 + [192]) = $11
	*($4 + [200]) = $12
	CALL $11(($4 + [192]), ($4 + [184]))
	CALL db_update_i64(*($11 + [44]), $7, ($4 + [128]), [40])
	$5 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$5 = ($2 + [8])
	$7 = *($5)
	*((($4 + [72]) + [8])) = $7
	$9 = *($12)
	$8 = *($2)
	*((($4 + [24]) + [8])) = $7
	*($4 + [72]) = $8
	*($4 + [24]) = $8
	CALL $14($0, $9, ($4 + [24]), $8)
	$8 = *($12)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$15 }
	*(($10 = (($4 + [56]) + [8]))) = *($5)
	*($4 + [56]) = *($2)
	$5 = CALL $236(($4 + [40]), $3)
	*((($4 + [8]) + [8])) = *($10)
	*($4 + [8]) = *($4 + [56])
	CALL $15($0, $8, $1, ($4 + [8]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$16 }
	$13 = ($4 + [116])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$20 }
	CALL _ZdlPv($10)
	
.LABEL $label$20
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $11
	
.LABEL $label$17
	*($13) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$global$0 = ($4 + [208])
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18448])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [18448])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [19107])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $10($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [19107])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *((*($0) + [-12]))
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *(($0 + $4))
	$1 = *($2)
	$5 = *($2 + [8])
	$4 = CALL $23(($3 + [8]), (uint_64)$5 >> (uint_64)(int_64)8), [17615]
	CALL eosio_assert(((int_64)*($4)) >= (int_64)$1), [17639])
	if ( ((int_64)$1 != (int_64)*($4)) ){ goto $label$3 }
	CALL $24(($3 + [8]), $4)
	$2 = *($3 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [8])), [18951])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [18997])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [18513])
	$1 = (int_64)
	*($4) = $1(*($4) - $1))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [18561])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [18583])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($3 + [48]), $4, [8])
	*($3 + [72]) = *($4 + [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($4 + [20]), $6, ($3 + [48]), [16])
	$4 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$4 }
	*($4) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$4
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [36])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($8) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $185($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $183($1, *($3), *($3 + [4]))
	
.LABEL $label$1
	CALL eosio_assert([1], [19048])
	$7 = *($1)
	$6 = *($1 + [4])
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$3 = [0]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $270($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $185($5, $1)
	CALL db_update_i64(*(($1 + [16])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)4981848853652488192) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4981848853652488192) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)4981848853652488193
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $207(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $161(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $249($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [112])
	$4 = *($1)
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [19107])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)4980189539499769856, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $116($3, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [19107])
	
.LABEL $label$1
	$9 = ($0 + [72])
	$4 = *($8 + [8])
	$6 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$9), [19107])
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	$7 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)-6030912142679474176, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $122($9, $7)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$9), [19107])
	
.LABEL $label$5
	$11 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18916])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [18951])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$4()), [18997])
	*($8 + [8]) = *($0)
	$4 = *($8)
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [16]), $8, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [16]) + [16]), ($8 + [16]), [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [16]) + [24]), ($8 + [24]), [8])
	CALL db_update_i64(*($8 + [36]), $11, ($2 + [16]), [32])
	$7 = ($0 + [128])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$9 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [16]) = [0]
	$8 = *($5 + [48])
	$7 = *(($5 + [52]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$11 }
	$10 = int_32(($7 - $8) >> [3])
	$4 = *($1)
	$7 = [1]
	
.LOOP $label$12:
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$10 }
	$8 = ($8 + [8])
	*($2 + [16]) = $7
	$6 = ((uint_32)$7 >= (uint_32)$10)
	$7 = ($7 + [1])
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$11
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$10
	$4 = *($0)
	*($2 + [8]) = ($2 + [16])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18916])
	CALL $163($9, $5, $4, ($2 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($1 + [1])
	$7 = [0]
	$9 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($8 == 0) ){ goto $label$3 }
	$10 = ($7 & [1])
	$7 = *($1)
	$7 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $10 )
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$2 }
	$11 = ( *($1 + [8]) ? $6 : $10 )
	$12 = ($11 + $7)
	$13 = ( *($3 + [8]) ? $5 : $9 )
	$10 = *($13)
	$9 = $11
	
.LOOP $label$4:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$2 }
	$7 = CALL $263($9, $10, $7)
	if ( ($7 == 0) ){ goto $label$2 }
	if ( (CALL $264($7, $13, $8) == 0) ){ goto $label$5 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$2 }
	$7 = ($7 - $11)
	if ( ((int_32)$7 == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$15 = (($4 + [8]) | [1])
	$16 = ($2 + [4])
	$10 = [0]
	
.LOOP $label$6:
	CALL $237(($4 + [8]), $1, $10, ($7 - $10), $1)
	$9 = (($4 + [8]) + [8])
	$14 = CALL $262(( *($9) ? $15 : (*($4 + [8]) & [1]) ), [0], [0])
	*($4 + [24]) = $14
	$8 = *($16)
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [8]))) ){ goto $label$9 }
	*($8) = $14
	*($16) = ($8 + [8])
	if ( (*($4 + [8]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $167($2, ($4 + [24]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($9))
	
.LABEL $label$7
	$11 = ($8 & [1])
	$8 = *($3)
	$8 = ( *(($3 + [4])) ? uint_32($8 >> [1]) : $11 )
	$10 = ($8 + $7)
	$9 = ($8 & [1])
	$8 = *($1)
	$13 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $9 )
	if ( ($13 <= $10) ){ goto $label$1 }
	$7 = $10
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = ($17 + $10)
	$17 = ( *(($1 + [8])) ? $6 : $9 )
	$12 = ($17 + $13)
	$7 = ($12 - $9)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$1 }
	$11 = ( *(($3 + [8])) ? $5 : $11 )
	$13 = *($11)
	
.LOOP $label$11:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $263($9, $13, $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $264($7, $11, $8) == 0) ){ goto $label$12 }
	$9 = ($7 + [1])
	$7 = ($12 - $9)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$11 }
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$1 }
	$7 = ($7 - $17)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	$8 = *($1)
	if ( ((int_32)$10 == (int_32)( *(($1 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$13 }
	$8 = CALL $237(($4 + [8]), $1, $10, ((int_32)$10 ^ (int_32)[-1]), $1)
	$14 = CALL $262(( *($8 + [8]) ? ($8 + [1]) : (*($4 + [8]) & [1]) ), [0], [0])
	*($4 + [24]) = $14
	$7 = *($2 + [4])
	if ( ((uint_32)$7 >= (uint_32)*($2 + [8])) ){ goto $label$15 }
	*($7) = $14
	*(($2 + [4])) = ($7 + [8])
	if ( (*($4 + [8]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $167($2, ($4 + [24]))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$13
	$global$0 = ($4 + [32])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $236(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $236(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = ($0 + [72])
	CALL $152(($4 + [32]), $5, *($1), [17795])
	$6 = *($0)
	*($4 + [12]) = $1
	*($4 + [8]) = $0
	*($4 + [16]) = $2
	*($4 + [20]) = $3
	*($4 + [72]) = $6
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)CALL $fimport$4()), [19162])
	$3 = ($0 + [112])
	*($4 + [48]) = $3
	*($4 + [52]) = ($4 + [8])
	*($4 + [56]) = ($4 + [72])
	*(($1 = CALL _Znwj([48])) + [32]) = $3
	CALL $160(($4 + [48]), $1)
	*($4 + [64]) = $1
	$6 = *($1)
	*($4 + [48]) = $6
	$7 = *($1 + [36])
	*($4 + [44]) = $7
	$8 = ($0 + [140])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [144]))) ){ goto $label$2 }
	*($2 + [8]) = $6
	*($2 + [16]) = $7
	*($4 + [64]) = [0]
	*($2) = $1
	*($8) = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $161(($0 + [136]), ($4 + [64]), ($4 + [48]), ($4 + [44]))
	
.LABEL $label$1
	*($4 + [28]) = $1
	*($4 + [24]) = $3
	$1 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($4 + [36])
	$6 = *($0)
	*($4 + [8]) = ($4 + [24])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18916])
	CALL $162($5, $1, $6, ($4 + [8]))
	$global$0 = ($4 + [80])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $236(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $236(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $237 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$5 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$1), [19107])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4981848853652488192, (int_64)4981848853652488192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $168($1, $5)
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$1), [19107])
	
.LABEL $label$4
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = (*($5 + [4]) - *($5))
	if ( ($1 == 0) ){ goto $label$2 }
	$6 = int_32($1 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$1 = CALL _Znwj($1)
	*(($3 = ($0 + [4]))) = $1
	*(($0 + [8])) = ($1 + ($6 << [3]))
	*($0) = $1
	$5 = *($5)
	$0 = (*(($5 + [4])) - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($1, $5, $0)
	*($3) = (*($3) + $0)
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	*($4 + [8]) = $3
	CALL $169($4, $1, $2, ($4 + [8]))
	*($0) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($4 + [4])
	$5 = (*($1 + [4]) - *($1))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($3 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ($6 << [3]))
	*($0) = $5
	$0 = *($1)
	$1 = (*(($1 + [4])) - $0)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $0, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$2
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $249($0)
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$4 = *($2)
	$2 = CALL _Znwj([8])
	*($0) = $2
	*($2) = [1]
	$5 = ($2 + [8])
	*($0 + [8]) = $5
	$4 = (((uint_32)$4 % (uint_32)[100]) + [-1])
	*($2 + [4]) = $4
	*($0 + [4]) = $5
	*($3 + [12]) = [28]
	CALL $170($0, ($3 + [12]))
	if ( ((uint_32)$4 > (uint_32)[21]) ){ goto $label$44 }
	$5 = ($0 + [8])
	$2 = ($0 + [4])
	goto $label$45 
	
.LABEL $label$45
	*($3 + [12]) = [22]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$22 }
	*($4) = [22]
	*($2) = ($4 + [4])
	
.LABEL $label$44
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$43
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$21 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$42
	*($3 + [12]) = [22]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$20 }
	*($4) = [22]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$41
	*($3 + [12]) = [24]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$19 }
	*($4) = [24]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$40
	*($3 + [12]) = [27]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$18 }
	*($4) = [27]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$39
	*($3 + [12]) = [25]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$17 }
	*($4) = [25]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$38
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$16 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$37
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$15 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$36
	*($3 + [12]) = [26]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$14 }
	*($4) = [26]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$35
	*($3 + [12]) = [26]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$13 }
	*($4) = [26]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$34
	*($3 + [12]) = [22]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$12 }
	*($4) = [22]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$33
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$11 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$32
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$10 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$31
	*($3 + [12]) = [24]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$9 }
	*($4) = [24]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$30
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$8 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$29
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$7 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$28
	*($3 + [12]) = [24]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$6 }
	*($4) = [24]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$27
	*($3 + [12]) = [25]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$5 }
	*($4) = [25]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$26
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$4 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$25
	*($3 + [12]) = [25]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$3 }
	*($4) = [25]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$24
	*($3 + [12]) = [23]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$2 }
	*($4) = [23]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$23
	*($3 + [12]) = [27]
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*($5)) ){ goto $label$1 }
	*($4) = [27]
	*($2) = ($4 + [4])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$22
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$21
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$20
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$19
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$18
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	CALL $170($0, ($3 + [12]))
	$global$0 = ($3 + [16])
	$4
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [48])) = *(($3 + [48]))
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [19048])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $217(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)5455799419163115520) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)5455799419163115521
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = $1
	*(($6 = ($5 + [24]))) = (int_64)0
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($6) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*(($5 + [48])) = *(($3 + [48]))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $217(($4 + [64]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)5455799419163115520, $2, (int_64)5455799419163115520, ($4 + [16]), [48])
	*($5 + [68]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5455799419163115520) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5455799419163115521
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4 + [16]) = (int_64)5455799419163115520
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)5455799419163115520
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $216(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $235 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [17514])
	CALL eosio_assert(CALL $fimport$7($2), [17538])
	$6 = *($3 + [8])
	$7 = *((*($0) + [-12]))
	$8 = [0]
	*(($5 + [104])) = [0]
	$9 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $9)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *(($0 + $7))
	$10 = CALL $18(($5 + [72]), $9, [17564])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $12
	$8 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [17408])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [17583])
	CALL eosio_assert(((int_64)$6 == (int_64)*($10 + [8])), [17454])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($7 <= [257]), [17319])
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$9 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $9
	*($5 + [56]) = $9
	CALL $19($0, $1, ($5 + [24]))
	$1 = *($7)
	*((($5 + [40]) + [8])) = $1
	$9 = *($3)
	*((($5 + [8]) + [8])) = $1
	*($5 + [8]) = $9
	*($5 + [40]) = $9
	CALL $14($0, $2, ($5 + [8]), $9)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$11 }
	$7 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$7 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17223])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [17319])
	$5 = *((*($0) + [-12]))
	$10 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *(($0 + $5))
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $10(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [19107])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [17348])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [17408])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [17425])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [17454])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [17480])
	$7 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [18951])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$4()), [18997])
	$9 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$9), [18368])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [18411])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [18430])
	$8 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [19048])
	*($4 + [176]) = (($4 + [128]) + [40])
	*($4 + [172]) = ($4 + [128])
	*($4 + [168]) = ($4 + [128])
	*($4 + [184]) = ($4 + [168])
	*($4 + [196]) = ($11 + [16])
	*($4 + [192]) = $11
	$5 = ($11 + [32])
	*($4 + [200]) = $5
	CALL $11(($4 + [192]), ($4 + [184]))
	CALL db_update_i64(*($11 + [44]), $7, ($4 + [128]), [40])
	$10 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$14 }
	*($10) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$10 = ($2 + [8])
	$7 = *($10)
	*((($4 + [72]) + [8])) = $7
	$9 = *($5)
	$8 = *($2)
	*((($4 + [24]) + [8])) = $7
	*($4 + [72]) = $8
	*($4 + [24]) = $8
	CALL $14($0, $9, ($4 + [24]), $8)
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$15 }
	*(($11 = (($4 + [56]) + [8]))) = *($10)
	*($4 + [56]) = *($2)
	$5 = CALL $236(($4 + [40]), $3)
	*((($4 + [8]) + [8])) = *($11)
	*($4 + [8]) = *($4 + [56])
	CALL $21($0, $8, $1, ($4 + [8]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$16 }
	$12 = ($4 + [116])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$20 }
	CALL _ZdlPv($10)
	
.LABEL $label$20
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $11
	
.LABEL $label$17
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$global$0 = ($4 + [208])
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [19107])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $16($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [19107])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17223])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [17319])
	$5 = *((*($0) + [-12]))
	$10 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$8 = *(($0 + $5))
	*($4 + [40]) = $8
	*($4 + [48]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $10(($4 + [40]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [40])), [19107])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [17348])
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$10 = [1]
	$3 = $5
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$3 = ($5 + [1])
	$5 = $3
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [17408])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [17425])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [17454])
	$7 = *(($0 + *((*($0) + [-12]))))
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [40])), [18951])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$4()), [18997])
	$8 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [18513])
	$9 = (int_64)
	*($11) = $9(*($11) - $9))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [18561])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [18583])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [19048])
	*($4 + [128]) = (($4 + [80]) + [40])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($11 + [16])
	*($4 + [144]) = $11
	*($4 + [152]) = ($11 + [32])
	CALL $11(($4 + [144]), ($4 + [136]))
	CALL db_update_i64(*($11 + [44]), $7, ($4 + [80]), [40])
	$5 = (($4 + [40]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$7 = *(($2 + [8]))
	*((($4 + [24]) + [8])) = $7
	$8 = *($2)
	*((($4 + [8]) + [8])) = $7
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $19($0, $1, ($4 + [8]))
	$11 = *($4 + [64])
	if ( ($11 == 0) ){ goto $label$15 }
	$3 = ($4 + [68])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$19 }
	CALL _ZdlPv($10)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $11
	
.LABEL $label$16
	*($3) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($4 + [160])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [19107])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $27($1, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [19107])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [56])) = *(($5 + [56]))
	*(($0 + [48])) = *(($5 + [48]))
	*(($0 + [40])) = *(($5 + [40]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $28($4, $1, $2, ($4 + [8]))
	$5 = *($4 + [4])
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [32])) = *(($5 + [32]))
	*(($0 + [40])) = *(($5 + [40]))
	*(($0 + [48])) = *(($5 + [48]))
	*(($0 + [56])) = *(($5 + [56]))
	$global$0 = ($4 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18791])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $270($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = $0
	*(($5 + [24])) = (int_64)0
	CALL $215(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)5455799419163115520
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)5455799419163115520
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $216(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $274($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $29($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $30($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [56]) + [32])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)6767209626505375744, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $121(($2 + [56]), $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)($2 + [56])), [19107])
	CALL eosio_assert([1], [18632])
	CALL eosio_assert([1], [18666])
	$5 = CALL db_next_i64(*($4 + [16]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $121(($2 + [56]), $5)
	
.LABEL $label$2
	CALL $125(($2 + [56]), $4)
	
.LABEL $label$1
	CALL $126(($2 + [48]), ($0 + [112]), *($1), [17817])
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	$6 = *(*($2 + [52]) + [8])
	*($2 + [16]) = $6
	$4 = CALL db_find_i64($3, $6, (int_64)6767209626505375744, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $121(($2 + [8]), $4) + [12]) == (int_32)($2 + [8])), [19107])
	$4 = *($2 + [32])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($0)
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$4()), [19162])
	*(($0 = CALL _Znwj([24])) + [8]) = [0]
	*($0 + [12]) = ($2 + [8])
	*($0) = *($1)
	CALL eosio_assert([1], [18448])
	CALL memcpy(($2 + [112]), $0, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy((($2 + [112]) | [8]), ($0 + [8]), [4])
	$3 = *($0)
	$4 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)6767209626505375744, $6, $3, ($2 + [112]), [12])
	*($0 + [16]) = $4
	$1 = ($2 + [24])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$6 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($2 + [104]) = $0
	$3 = *($0)
	*($2 + [112]) = $3
	*($2 + [100]) = $4
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [40]))) ){ goto $label$9 }
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($2 + [104]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	$0 = *($2 + [104])
	*($2 + [104]) = [0]
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $127(($2 + [32]), ($2 + [104]), ($2 + [112]), ($2 + [100]))
	$0 = *($2 + [104])
	*($2 + [104]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($2 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $4
	
.LABEL $label$10
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($2 + [84])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$18 }
	CALL _ZdlPv($1)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($2 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $4
	
.LABEL $label$15
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$global$0 = ($2 + [128])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $109($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $102 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	$6 = ($2 + [8])
	*(($5 = (($4 + [72]) + [8]))) = *($6)
	*($4 + [88]) = $1
	*($4 + [72]) = *($2)
	$3 = CALL $236(($4 + [56]), $3)
	*((($4 + [24]) + [8])) = *($5)
	*($4 + [24]) = *($4 + [72])
	CALL $13(($0 + [152]), $1, ($4 + [24]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$7 = *($6)
	*((($4 + [40]) + [8])) = $7
	$1 = *($2)
	*((($4 + [8]) + [8])) = $7
	*($4 + [40]) = $1
	*($4 + [8]) = $1
	CALL $31(($0 + [192]), ($4 + [88]), ($4 + [8]))
	$global$0 = ($4 + [96])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = ($0 + [72])
	$5 = *($2)
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$4), [19107])
	if ( $9 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)-6030912142679474176, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $122($4, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$4), [19107])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0)
	*($3 + [16]) = $2
	CALL $132(($3 + [32]), $4, $5, ($3 + [16]))
	$9 = *($3 + [36])
	
.LABEL $label$1
	$5 = *($1)
	$7 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$11:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$5) ){ goto $label$10 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$4), [19107])
	if ( ((int_64)*($6 + [64]) != (int_64)-4710649412229887472) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-6030912142679474176, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$6 = CALL $122($4, $8)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$4), [19107])
	
.LABEL $label$12
	if ( ((int_64)*($6 + [64]) != (int_64)-4710649412229887472) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = *(($9 + [76]))
	$8 = *($9 + [72])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$13 }
	$5 = *($1)
	
.LOOP $label$14:
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$13 }
	$8 = ($8 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$6
	$5 = *($0)
	*($3 + [32]) = $1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [18916])
	CALL $173($4, $9, $5, ($3 + [32]))
	$8 = *(($9 + [72]))
	$7 = *(($9 + [76]))
	CALL eosio_assert([1], [18319])
	$1 = int_32(($7 - $8) >> [3])
	$5 = (int_64)4408131
	$8 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$5 = $11
	$7 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$5 = $11
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $7 ){ goto $label$19 }
	$7 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [17223])
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$21 }
	CALL eosio_assert([1], [18319])
	$5 = (int_64)100000
	goto $label$20 
	
.LABEL $label$21
	if ( ((uint_32)$1 > (uint_32)[30]) ){ goto $label$22 }
	CALL eosio_assert([1], [18319])
	$5 = (int_64)120000
	goto $label$20 
	
.LABEL $label$22
	if ( ((uint_32)$1 > (uint_32)[70]) ){ goto $label$23 }
	CALL eosio_assert([1], [18319])
	$5 = (int_64)150000
	goto $label$20 
	
.LABEL $label$23
	CALL eosio_assert([1], [18319])
	$5 = ( (int_64)200000 ? (int_64)250000 : ($1 <= [101]) )
	
.LABEL $label$20
	$11 = *($9)
	*($3 + [72]) = (int_64)1128481540
	*($3 + [64]) = $5
	CALL $248(($3 + [16]), (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $5) / (uint_32)[10000])))
	$8 = CALL $246(($3 + [16]), [0], [18040])
	$7 = ($8 + [8])
	*((($3 + [32]) + [8])) = *($7)
	*($3 + [32]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	$8 = CALL $243(($3 + [32]), [18047])
	$7 = ($8 + [8])
	*((($3 + [48]) + [8])) = *($7)
	*($3 + [48]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	*(($3 + [8])) = *($3 + [72])
	*($3) = *($3 + [64])
	CALL $143($0, $11, $3, ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$28 }
	if ( (*($3 + [32]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*($3 + [56]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($3 + [40]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$24
	$5 = *($0)
	*($3 + [32]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18916])
	CALL $174($4, $6, $5, ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$3 = ($global$0 - [192])
	$global$0 = $3
	$4 = ($0 + [32])
	$5 = *(($0 + [60]))
	if ( ((int_32)$5 == (int_32)*(($0 + [56]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [19107])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $47($4, $6)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$4), [19107])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19485])
	*((($3 + [64]) + [56])) = *(($5 + [56]))
	*(($4 = (($3 + [64]) + [48]))) = *(($5 + [48]))
	*((($3 + [64]) + [40])) = *(($5 + [40]))
	*((($3 + [64]) + [32])) = *(($5 + [32]))
	*((($3 + [64]) + [24])) = *(($5 + [24]))
	*((($3 + [64]) + [16])) = *(($5 + [16]))
	*($3 + [72]) = *(($5 + [8]))
	*($3 + [64]) = *($5)
	CALL $3(($3 + [136]), $4)
	CALL eosio_assert(((int_64)*($3 + [136]) != (int_64)0), [19510])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3 + [144])), [18454])
	$7 = ((int_64)*($2) / (int_64)*($3 + [136]))
	CALL eosio_assert(((int_64)$7 > (int_64)0), [17960])
	CALL eosio_assert(((int_64)$7 < (int_64)11), [17981])
	$8 = ($0 + [72])
	$9 = *($1)
	$2 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($2 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$9) ){ goto $label$6 }
	$2 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$8), [19107])
	if ( $6 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = CALL db_find_i64(*($8), *(($0 + [80])), (int_64)-6030912142679474176, $9)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $122($8, $5) + [84]) == (int_32)$8), [19107])
	goto $label$3 
	
.LABEL $label$4
	$9 = *($0)
	*($3 + [160]) = $1
	CALL $132(($3 + [64]), $8, $9, ($3 + [160]))
	
.LABEL $label$3
	*(($10 = (($3 + [64]) + [32]))) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$9 = *($0)
	*($3 + [64]) = $9
	*($3 + [72]) = $9
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$9 }
	$11 = (($3 + [64]) + [24])
	$12 = (($3 + [32]) | [1])
	$6 = (($3 + [48]) + [8])
	$13 = ($3 + [92])
	$8 = [0]
	
.LOOP $label$10:
	*($6) = (int_64)1128481540
	$9 = ((int_64)*($3 + [136]) * (int_64)10)
	*($3 + [48]) = $9
	$14 = *($1)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$9 = (int_64)4408131
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$15 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$9 = $15
	$2 = [1]
	$4 = $5
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$9 = $15
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$5 < (int_32)[6])
	$4 = ($5 + [1])
	$5 = $4
	if ( $2 ){ goto $label$15 }
	$2 = [1]
	$5 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	
.LABEL $label$11
	CALL eosio_assert($2, [17223])
	*(($4 = (($3 + [32]) + [8]))) = [0]
	*($3 + [32]) = (int_64)0
	$5 = CALL $265([18013])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [32]) = ($5 << [1])
	$2 = $12
	if ( $5 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$16 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($16)
	*($4) = $2
	*($3 + [32]) = ($16 | [1])
	*($3 + [36]) = $5
	
.LABEL $label$17
	CALL memcpy($2, [18013], $5)
	
.LABEL $label$16
	*(($2 + $5)) = [0]
	*((($3 + [8]) + [8])) = *($6)
	*($3 + [8]) = *($3 + [48])
	CALL $143($0, $14, ($3 + [8]), ($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$19
	$9 = *($0)
	*($3 + [28]) = $1
	*($3 + [24]) = ($3 + [64])
	*($3 + [184]) = $9
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$4()), [19162])
	*((($3 + [160]) + [8])) = ($3 + [184])
	*($3 + [164]) = ($3 + [24])
	*($3 + [160]) = ($3 + [64])
	*(($5 = CALL _Znwj([32])) + [16]) = ($3 + [64])
	CALL $171(($3 + [160]), $5)
	*($3 + [176]) = $5
	$9 = *($5)
	*($3 + [160]) = $9
	$4 = *($5 + [20])
	*($3 + [156]) = $4
	$2 = *($13)
	if ( ((uint_32)$2 >= (uint_32)*($10)) ){ goto $label$22 }
	*($2 + [8]) = $9
	*($2 + [16]) = $4
	*($3 + [176]) = [0]
	*($2) = $5
	*($13) = ($2 + [24])
	$5 = *($3 + [176])
	*($3 + [176]) = [0]
	if ( $5 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $172($11, ($3 + [176]), ($3 + [160]), ($3 + [156]))
	$5 = *($3 + [176])
	*($3 + [176]) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$8 = ($8 + [1])
	if ( ((int_64)$7 > (int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)255)) ){ goto $label$10 }
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$9 }
	$0 = ($3 + [92])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL _ZdlPv($2)
	
.LABEL $label$26
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($3 + [88]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$23
	*($0) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $235(($3 + [32]))
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	float_64 $26
	float_64 $27
	float_64 $28
	$4 = ($global$0 - [352])
	$global$0 = $4
	$5 = [0]
	*(($4 + [264])) = [0]
	*($4 + [248]) = (int_64)-1
	*($4 + [256]) = (int_64)0
	$6 = *($0)
	*($4 + [232]) = $6
	*($4 + [240]) = $6
	CALL $138(($4 + [224]), ($4 + [232]), *($2), [18052])
	$2 = *($4 + [228])
	CALL eosio_assert(((int_64)*(($2 + [24])) == (int_64)*($3 + [8])), [18454])
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)*($3)), [18074])
	$7 = ($0 + [72])
	$8 = *(*($4 + [228]) + [8])
	$10 = *(($0 + [100]))
	$9 = *(($0 + [96]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($10 + [-24])
	$11 = *($2)
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$3 }
	$10 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$7), [19107])
	$5 = $11
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($7), *(($0 + [80])), (int_64)-6030912142679474176, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $122($7, $2)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$7), [19107])
	
.LABEL $label$1
	$13 = *(($2 + [36]))
	$2 = *($4 + [228])
	$12 = *($2 + [32])
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$10 }
	$14 = ($0 + [152])
	$15 = ($0 + [192])
	$16 = ($0 + [112])
	$17 = ((int_32)$5 != (int_32)[0])
	$18 = (($4 + [208]) | [1])
	$19 = ($5 + [48])
	$20 = ($5 + [52])
	$21 = ($0 + [140])
	$22 = ($0 + [136])
	$23 = ($0 + [120])
	
.LOOP $label$11:
	*($4 + [144]) = [0]
	$10 = *($19)
	$2 = *($20)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$12 }
	$11 = int_32(($2 - $10) >> [3])
	$6 = *($12)
	$2 = [1]
	
.LOOP $label$14:
	if ( ((int_64)$6 == (int_64)*($10)) ){ goto $label$13 }
	$10 = ($10 + [8])
	*($4 + [144]) = $2
	$9 = ((uint_32)$2 >= (uint_32)$11)
	$2 = ($2 + [1])
	if ( ($9 == 0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$6 = *($0)
	*($4 + [64]) = ($4 + [144])
	CALL eosio_assert($17, [18916])
	CALL $175($7, $5, $6, ($4 + [64]))
	$6 = *($12)
	$10 = *($21)
	$11 = *($22)
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$18:
	$2 = ($10 + [-24])
	$9 = *($2)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$17 }
	$10 = $2
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$16), [19107])
	goto $label$15 
	
.LABEL $label$16
	$9 = CALL $116($16, CALL $fimport$3(*($16), *($23), (int_64)4980189539499769856, $6))
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$16), [19107])
	
.LABEL $label$15
	$6 = ((uint_64)$6 / (uint_64)(int_64)100)
	$6 = *($9 + [16])
	$2 = *(((*([0] + [8348]) + ((int_32)(CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$6 * (int_64)100))) * (int_32)[12])) + [-12])
	$24 = ((int_64)((uint_64)*(($2) + ((CASTING uint_32)(uint_64 $6) << [3]))) / (uint_64)*($2)) * (int_64)320000
	CALL eosio_assert((uint_64)(((int_64)$24) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (int_64)4408131
	$2 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$25 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$6 = $25
	$10 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$6 = $25
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $10 ){ goto $label$23 }
	$10 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	
.LABEL $label$19
	CALL eosio_assert($10, [17223])
	*(($9 = (($4 + [208]) + [8]))) = [0]
	*($4 + [208]) = (int_64)0
	$2 = CALL $265([8192])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [208]) = ($2 << [1])
	$10 = $18
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$11 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($9) = $10
	*($4 + [208]) = ($11 | [1])
	*($4 + [212]) = $2
	
.LABEL $label$25
	CALL memcpy($10, [8192], $2)
	
.LABEL $label$24
	*(($10 + $2)) = [0]
	*(($2 = (($4 + [64]) + [8]))) = (int_64)1128481540
	*($4 + [64]) = $24
	CALL $236(($4 + [160]), ($4 + [208]))
	*((($4 + [48]) + [8])) = *($2)
	*($4 + [48]) = *($4 + [64])
	CALL $44($15, $8, ($4 + [48]), $2)
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*((($4 + [160]) + [8])))
	
.LABEL $label$27
	*(($2 = (($4 + [272]) + [8]))) = (int_64)1128481540
	*($4 + [272]) = $24
	$10 = CALL $236(($4 + [336]), ($4 + [208]))
	*((($4 + [32]) + [8])) = *($2)
	*($4 + [32]) = *($4 + [272])
	CALL $22($14, $8, ($4 + [32]), $10)
	if ( ((*($4 + [336]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*((($4 + [336]) + [8])))
	
.LABEL $label$28
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$12
	CALL $124($0, $1, $12)
	$12 = ($12 + [8])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	
.LABEL $label$10
	*($4 + [200]) = (int_64)1128481540
	$6 = *($3)
	*($4 + [192]) = $6
	$24 = *($1)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (int_64)4408131
	$2 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$25 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$6 = $25
	$10 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$6 = $25
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $10 ){ goto $label$33 }
	$10 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$10 = [0]
	
.LABEL $label$29
	CALL eosio_assert($10, [17223])
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$2 = CALL $265([18095])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$36 }
	*($4 + [176]) = ($2 << [1])
	$10 = (($4 + [176]) | [1])
	if ( $2 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$9 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($4 + [176]) = ($9 | [1])
	*($4 + [184]) = $10
	*($4 + [180]) = $2
	
.LABEL $label$35
	CALL memcpy($10, [18095], $2)
	
.LABEL $label$34
	*(($10 + $2)) = [0]
	*((($4 + [16]) + [8])) = *((($4 + [192]) + [8]))
	*($4 + [16]) = *($4 + [192])
	CALL $143($0, $24, ($4 + [16]), ($4 + [176]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($4 + [184]))
	
.LABEL $label$37
	$26 = ((float_64)(CASTING float_64)(int_64 *($3)) / (float_64)(float_64)1.0175)
	if ( ((float_64)(float_64)|$26| < (float_64)(float_64)9223372036854775808) ){ goto $label$39 }
	$6 = (int_64)-9223372036854775808
	goto $label$38 
	
.LABEL $label$39
	$6 = (Rounds 0)($26)
	
.LABEL $label$38
	*($3) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = *($3)
	$27 = (CASTING float_64)(int_64 $6)
	$26 = ((float_64)$27 * (float_64)(float_64)0.9825)
	if ( ((int_32)((float_64)$26 >= (float_64)(float_64)1) ^ (int_32)[1]) ){ goto $label$40 }
	$2 = *((*($0 + [152]) + [-12]))
	*(($4 + [96])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = *(($2 + ($0 + [152])))
	$27 = (float_64)
	if ( (((float_64)$27($27 - $26)) < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$42 }
	$6 = (int_64)0
	goto $label$41 
	
.LABEL $label$42
	$6 = (Rounds 0)($27)
	
.LABEL $label$41
	*($4 + [72]) = (int_64)4408131
	$25 = *(CALL $18(($4 + [64]), (int_64)4408131, [17564]))
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$43 }
	$11 = ($4 + [92])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$45 }
	
.LOOP $label$46:
	$2 = ($2 + [-24])
	$10 = *($2)
	*($2) = [0]
	if ( ($10 == 0) ){ goto $label$47 }
	CALL _ZdlPv($10)
	
.LABEL $label$47
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$46 }
	$2 = *(($4 + [88]))
	goto $label$44 
	
.LABEL $label$45
	$2 = $9
	
.LABEL $label$44
	*($11) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$43
	$24 = *($0 + [192])
	*((($4 + [272]) + [24])) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	$2 = ($0 + [224])
	CALL $25(($4 + [64]), $2, $24, ($4 + [272]))
	$10 = (($4 + [64]) + [24])
	CALL __fixunsdfti($4, ((float_64)((float_64)((float_64)CALL $fimport$10(((int_64)$6 << (int_64)32), (uint_64)$6 >> (uint_64)(int_64)32)) * (float_64)(float_64)0.6) / (float_64)(CASTING float_64)(int_64 $25)) + (float_64)CALL $fimport$10(*($4 + [80]), *($10))))
	*($10) = *(($4 + [8]))
	$28 = (CASTING float_64)(uint_64 $6)
	$27 = ((float_64)((float_64)$28 * (float_64)(float_64)0.25) + (float_64)(CASTING float_64)(uint_64 *($4 + [96])))
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$49 }
	$6 = (int_64)0
	goto $label$48 
	
.LABEL $label$49
	$6 = (Rounds 0)($27)
	
.LABEL $label$48
	*($4 + [96]) = $6
	$27 = ((float_64)((float_64)$28 * (float_64)(float_64)0.15) + (float_64)(CASTING float_64)(uint_64 *($4 + [104])))
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$51 }
	$6 = (int_64)0
	goto $label$50 
	
.LABEL $label$51
	$6 = (Rounds 0)($27)
	
.LABEL $label$50
	*($4 + [104]) = $6
	*($4 + [80]) = *($4)
	CALL $26($2, ($4 + [64]), *($0 + [192]))
	if ( ((float_64)(float_64)|$26| < (float_64)(float_64)9223372036854775808) ){ goto $label$53 }
	$6 = (int_64)-9223372036854775808
	goto $label$52 
	
.LABEL $label$53
	$6 = (Rounds 0)($26)
	
.LABEL $label$52
	*($3) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = *($3)
	
.LABEL $label$40
	if ( ((int_64)$6 <= (int_64)0) ){ goto $label$54 }
	$25 = *(($3 + [8]))
	*($4 + [168]) = (int_64)3617214756542218240
	*($4 + [160]) = *($0)
	*((($4 + [144]) + [8])) = [0]
	*($4 + [144]) = (int_64)0
	$2 = CALL $265([8192])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$57 }
	*($4 + [144]) = ($2 << [1])
	$10 = (($4 + [144]) | [1])
	if ( $2 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$9 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*($4 + [144]) = ($9 | [1])
	*($4 + [152]) = $10
	*($4 + [148]) = $2
	
.LABEL $label$56
	CALL memcpy($10, [8192], $2)
	
.LABEL $label$55
	*(($10 + $2)) = [0]
	*(($4 + [88])) = $25
	$2 = ($4 + [152])
	*(($4 + [104])) = *($2)
	*($2) = [0]
	*($4 + [72]) = $8
	*($4 + [80]) = $6
	*($4 + [64]) = *($0)
	*($4 + [96]) = *($4 + [144])
	*($4 + [144]) = (int_64)0
	$2 = CALL $39(($4 + [272]), ($4 + [160]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [64]))
	CALL $40(($4 + [336]), $2)
	$10 = *($4 + [336])
	CALL send_inline($10, (*($4 + [340]) - $10))
	$10 = *($4 + [336])
	if ( ($10 == 0) ){ goto $label$58 }
	*($4 + [340]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$58
	$10 = *($2 + [28])
	if ( ($10 == 0) ){ goto $label$59 }
	*(($2 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$59
	$10 = *($2 + [16])
	if ( ($10 == 0) ){ goto $label$60 }
	*(($2 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$60
	if ( ((*(($4 + [96])) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$61
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$54
	$2 = *($4 + [228])
	$6 = *(($2 + [8]))
	$25 = *(($2 + [16]))
	$8 = *(($2 + [24]))
	$24 = *($2)
	*((($4 + [64]) + [36])) = (int_64)0
	*((($4 + [64]) + [24])) = $8
	*((($4 + [64]) + [16])) = $25
	*((($4 + [64]) + [8])) = $6
	*($4 + [96]) = [0]
	*($4 + [64]) = $24
	$10 = (*(($2 + [36])) - *($2 + [32]))
	if ( ($10 == 0) ){ goto $label$62 }
	$9 = int_32($10 >> [3])
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$5 }
	$10 = CALL _Znwj($10)
	*((($4 + [64]) + [32])) = $10
	*(($4 + [104])) = ($10 + ($9 << [3]))
	*(($9 = (($4 + [64]) + [36]))) = $10
	$12 = *(($2 + [32]))
	$11 = (*(($2 + [36])) - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$62 }
	CALL memcpy($10, $12, $11)
	*($9) = (*($9) + $11)
	
.LABEL $label$62
	$6 = *($2 + [48])
	*(($4 + [136])) = [0]
	*($4 + [112]) = $6
	*($4 + [120]) = *($1)
	*($4 + [128]) = (int_64)0
	$10 = ($4 + [128])
	$2 = CALL $265([18105])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$65 }
	*(($4 + [128])) = ($2 << [1])
	$10 = ($10 + [1])
	if ( $2 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$9 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($9)
	*(($4 + [136])) = $10
	*(($4 + [132])) = $2
	*($4 + [128]) = ($9 | [1])
	
.LABEL $label$64
	CALL memcpy($10, [18105], $2)
	
.LABEL $label$63
	*(($10 + $2)) = [0]
	*($4 + [280]) = (int_64)-5003315193367756800
	$6 = *($0)
	*($4 + [272]) = $6
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	$10 = ($2 + [16])
	*(($4 + [296])) = $10
	*(($4 + [292])) = $10
	*($4 + [288]) = $2
	CALL $176(($4 + [300]), ($4 + [64]))
	CALL $40(($4 + [160]), ($4 + [272]))
	$2 = *($4 + [160])
	CALL send_inline($2, (*($4 + [164]) - $2))
	$2 = *($4 + [160])
	if ( ($2 == 0) ){ goto $label$66 }
	*($4 + [164]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$66
	$2 = *($4 + [300])
	if ( ($2 == 0) ){ goto $label$67 }
	*(($4 + [304])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$67
	$2 = *($4 + [288])
	if ( ($2 == 0) ){ goto $label$68 }
	*(($4 + [292])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$68
	$6 = *($4 + [224])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	$10 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($10), [18632])
	CALL eosio_assert($10, [18666])
	$10 = CALL db_next_i64(*($2 + [60]), ($4 + [272]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$69 }
	CALL $136((CASTING uint_32)(uint_64 $6), $10)
	
.LABEL $label$69
	CALL $140(($4 + [232]), $2)
	if ( ((*(($4 + [128])) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$70
	$2 = *($4 + [96])
	if ( ($2 == 0) ){ goto $label$71 }
	*(($4 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$71
	$11 = *($4 + [256])
	if ( ($11 == 0) ){ goto $label$72 }
	$12 = ($4 + [260])
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$74 }
	
.LOOP $label$75:
	$2 = ($2 + [-24])
	$10 = *($2)
	*($2) = [0]
	if ( ($10 == 0) ){ goto $label$76 }
	$9 = *($10 + [32])
	if ( ($9 == 0) ){ goto $label$77 }
	*(($10 + [36])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$77
	CALL _ZdlPv($10)
	
.LABEL $label$76
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$75 }
	$2 = *(($4 + [256]))
	goto $label$73 
	
.LABEL $label$74
	$2 = $11
	
.LABEL $label$73
	*($12) = $11
	CALL _ZdlPv($2)
	
.LABEL $label$72
	$global$0 = ($4 + [352])
	return (unreachable)
	
.LABEL $label$9
	CALL $235(($4 + [208]))
	
.LABEL $label$8
	CALL $235(($4 + [176]))
	
.LABEL $label$7
	CALL $235($10)
	
.LABEL $label$6
	CALL $235(($4 + [144]))
	
.LABEL $label$5
	CALL $249(($4 + [96]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [19580])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [19685])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [19618])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [19685])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $223($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $239($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $239($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $235($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $108 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [248]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($0 + [100])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	$1 = *($3 + [72])
	if ( ($1 == 0) ){ goto $label$16 }
	*(($3 + [76])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($3 + [52])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$17
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$18 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($0 + [56]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $1
	
.LABEL $label$19
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$18
	return $0
}

void .FUNC $212 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [48])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [52])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $268(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8360])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $268(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $151($0, ($1 + [72]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [18627])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $151($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [264])) = [0]
	*($3 + [248]) = (int_64)-1
	*($3 + [256]) = (int_64)0
	$5 = *($0)
	*($3 + [232]) = $5
	*($3 + [240]) = *($1)
	*($3 + [152]) = (int_64)1397703940
	*($3 + [144]) = (int_64)0
	CALL eosio_assert([1], [18319])
	$6 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [17223])
	CALL $32(($3 + [216]), ($3 + [232]), $5, ($3 + [144]))
	$10 = ($0 + [32])
	$4 = *(($0 + [60]))
	if ( ((int_32)$4 == (int_32)*(($0 + [56]))) ){ goto $label$7 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$10), [19107])
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	$8 = CALL db_find_i64(*($10), *(($0 + [40])), (int_64)5455799419163115520, (int_64)5455799419163115520)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $27($10, $8)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$10), [19107])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19485])
	*((($3 + [144]) + [56])) = *(($4 + [56]))
	*((($3 + [144]) + [48])) = *(($4 + [48]))
	*((($3 + [144]) + [40])) = *(($4 + [40]))
	*((($3 + [144]) + [32])) = *(($4 + [32]))
	*((($3 + [144]) + [24])) = *(($4 + [24]))
	*((($3 + [144]) + [16])) = *(($4 + [16]))
	*($3 + [152]) = *(($4 + [8]))
	*($3 + [144]) = *($4)
	CALL eosio_assert([1], [18319])
	$6 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [17223])
	$7 = *($2)
	CALL __multi3(($3 + [8]), *($3 + [160]), *(($3 + [168])), $7, (int_64)$7 >> (int_64)63))
	$5 = (int_64)0
	$6 = *($3 + [12 align=4])
	$11 = *($3 + [216])
	if ( ((int_64)$11 >= (int_64)$6) ){ goto $label$13 }
	$5 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$5($6 - $11)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$11 = *($3 + [216])
	
.LABEL $label$13
	*($3 + [216]) = $6
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	CALL $33(($3 + [232]), ($3 + [216]), *($0))
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$16 }
	if ( (int_64)($11 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$8 = [0]
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$17 }
	$6 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$6 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$6 = $7
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$21 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$8 = [0]
	
.LABEL $label$17
	CALL eosio_assert((((int_64)$5 > (int_64)0) & $8), [17701])
	*($3 + [96]) = (int_64)3617214756542218240
	*($3 + [88]) = *($0)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = CALL $265([17717])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$24 }
	*($3 + [24]) = ($4 << [1])
	$8 = (($3 + [24]) | [1])
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $8
	*($3 + [28]) = $4
	
.LABEL $label$23
	CALL memcpy($8, [17717], $4)
	
.LABEL $label$22
	*(($8 + $4)) = [0]
	*(($3 + [64])) = (int_64)1397703940
	$4 = ($3 + [32])
	*(($3 + [80])) = *($4)
	*($4) = [0]
	*($3 + [56]) = $5
	*($3 + [40]) = *($0)
	*($3 + [48]) = *($1)
	*($3 + [72]) = *($3 + [24])
	*($3 + [24]) = (int_64)0
	$4 = CALL $39(($3 + [104]), ($3 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [40]))
	CALL $40(($3 + [272]), $4)
	$8 = *($3 + [272])
	CALL send_inline($8, (*($3 + [276]) - $8))
	$8 = *($3 + [272])
	if ( ($8 == 0) ){ goto $label$25 }
	*($3 + [276]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($4 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($4 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((*(($3 + [72])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [80])))
	
.LABEL $label$28
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$29
	*($3 + [192]) = *($1)
	CALL $26($10, ($3 + [144]), *($0))
	
.LABEL $label$15
	$9 = *($3 + [256])
	if ( ($9 == 0) ){ goto $label$30 }
	$0 = ($3 + [260])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$33:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	CALL _ZdlPv($8)
	
.LABEL $label$34
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$33 }
	$4 = *(($3 + [256]))
	goto $label$31 
	
.LABEL $label$32
	$4 = $9
	
.LABEL $label$31
	*($0) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$30
	$global$0 = ($3 + [288])
	return (unreachable)
	
.LABEL $label$14
	CALL $235(($3 + [24]))
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $41($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $42(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [19048])
	CALL eosio_assert([1], [18448])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($5)
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6030912134838419456) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6030912134838419455
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [18319])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [17223])
	*($5 + [16]) = $1
	$7 = *($3)
	*($5) = *($7)
	*(($9 = ($5 + [8]))) = *(($7 + [8]))
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [16]), $5, [8])
	*($4 + [40]) = *($9)
	CALL eosio_assert([1], [18448])
	CALL memcpy((($4 + [16]) | [8]), ($4 + [40]), [8])
	$9 = CALL db_store_i64(*($1 + [8]), (int_64)-6030912134838419456, $2, (int_64)-6030912134838419456, ($4 + [16]), [16])
	*($5 + [20]) = $9
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912134838419456) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)-6030912134838419455
	
.LABEL $label$6
	*($4 + [40]) = $5
	*($4 + [16]) = (int_64)-6030912134838419456
	*($4 + [12]) = $9
	$10 = ($1 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-6030912134838419456
	*($7 + [16]) = $9
	*($4 + [40]) = [0]
	*($7) = $5
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $218(($1 + [24]), ($4 + [40]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$7 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18604])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $270($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [18319])
	$10 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [17223])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [18627])
	CALL memcpy($9, $7, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [18627])
	CALL memcpy(($3 + [24]), ($7 + [8]), [8])
	*(($9 + [8])) = *($3 + [24])
	*($9 + [20]) = $1
	*($3 + [16]) = $9
	*($3 + [24]) = (int_64)-6030912134838419456
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)-6030912134838419456
	*($5 + [16]) = $1
	*($3 + [16]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $218($8, ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $274($7)
	
.LABEL $label$11
	$5 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [18319])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [17223])
	*($5 + [16]) = $1
	$7 = *($3)
	*($5) = *($7)
	*(($9 = ($5 + [8]))) = *(($7 + [8]))
	CALL eosio_assert([1], [18448])
	CALL memcpy(($4 + [16]), $5, [8])
	*($4 + [40]) = *($9)
	CALL eosio_assert([1], [18448])
	CALL memcpy((($4 + [16]) | [8]), ($4 + [40]), [8])
	$9 = CALL db_store_i64(*($1 + [8]), (int_64)-6030912134838419456, $2, (int_64)-6030912134838419456, ($4 + [16]), [16])
	*($5 + [20]) = $9
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6030912134838419456) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)-6030912134838419455
	
.LABEL $label$6
	*($4 + [40]) = $5
	*($4 + [16]) = (int_64)-6030912134838419456
	*($4 + [12]) = $9
	$10 = ($1 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-6030912134838419456
	*($7 + [16]) = $9
	*($4 + [40]) = [0]
	*($7) = $5
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $218(($1 + [24]), ($4 + [40]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$7 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [19107])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912134838419456, (int_64)-6030912134838419456)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $34($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [19107])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $35($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [19107])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912134838419456, (int_64)-6030912134838419456)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [19107])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18916])
	CALL $36($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $37($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([80])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = $1
	*(($6 = ($5 + [24]))) = (int_64)0
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($6) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*(($5 + [48])) = *(($3 + [48]))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $217(($4 + [64]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)5455799419163115520, $2, (int_64)5455799419163115520, ($4 + [16]), [48])
	*($5 + [68]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)5455799419163115520) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)5455799419163115521
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4 + [16]) = (int_64)5455799419163115520
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)5455799419163115520
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $216(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = *($2)
	CALL eosio_assert(((int_64)$4 > (int_64)0), [17657])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1128481540), [17686])
	$2 = [0]
	*(($3 + [200])) = [0]
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$5 = *($0)
	*($3 + [168]) = $5
	*($3 + [176]) = *($1)
	*($3 + [88]) = (int_64)1397703940
	*($3 + [80]) = (int_64)0
	CALL eosio_assert([1], [18319])
	$6 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$1 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $1 ){ goto $label$5 }
	$1 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	CALL eosio_assert($1, [17223])
	CALL $32(($3 + [152]), ($3 + [168]), $5, ($3 + [80]))
	$6 = *($0)
	*((($3 + [16]) + [24])) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	CALL $25(($3 + [80]), ($0 + [32]), $6, ($3 + [16]))
	CALL __multi3($3, *($3 + [96]), *((($3 + [80]) + [24])), $4, (int_64)$4 >> (int_64)63))
	$4 = *($3 + [160])
	$5 = *($3 + [4 align=4])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18319])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$1 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $1 ){ goto $label$10 }
	$1 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	
.LABEL $label$6
	CALL eosio_assert($1, [17223])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($3 + [160]))), [18368])
	$6 = ((int_64)*($3 + [152]) + (int_64)$5)
	*($3 + [152]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18411])
	CALL eosio_assert(((int_64)*($3 + [152]) < (int_64)4611686018427387904), [18430])
	CALL $33(($3 + [168]), ($3 + [152]), *($0))
	$8 = *($3 + [192])
	if ( ($8 == 0) ){ goto $label$11 }
	$0 = ($3 + [196])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [192]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $8
	
.LABEL $label$12
	*($0) = $8
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($3 + [208])
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [18627])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18627])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18448])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $216 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [64]) = (int_64)-4710649412229887472
	*($1) = *(*(*($0 + [4])))
	$5 = *($1 + [48])
	$4 = *(($1 + [52]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$8 = *($0)
	$9 = [40]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$2
	$9 = ($9 + [8])
	$5 = *($1 + [72])
	$4 = *(($1 + [76]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$6 }
	$2 = CALL $270($9)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $9)
	CALL $213($3, $1)
	$7 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($8 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $7, $2, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($8 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $274($2)
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [5])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($5 >> [5]) > (uint_32)[67108862]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [4])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [5])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [5])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [5]) << [5]))
	return (unreachable)
	
.LABEL $label$1
	CALL $249($0)
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [12]) = $1
	*($0 + [8]) = [0]
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [18448])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)6767209626505375744, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $199 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [12]) = $1
	*($0 + [8]) = [0]
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [18448])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18448])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)6767209626505375744, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [18448])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18696])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18741])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [18791])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18627])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [18627])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($5 + [16])
	*($4 + [56]) = $5
	CALL $196(($4 + [56]), ($4 + [48]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4520614716222125216, $2, (int_64)4520614716222125216, $4, [32])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4520614716222125216) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4520614716222125217
	
.LABEL $label$1
	*($4 + [32]) = $5
	*($4) = (int_64)4520614716222125216
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4520614716222125216
	*($3 + [16]) = $6
	*($4 + [32]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $195(($1 + [24]), ($4 + [32]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [19162])
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($5 + [16])
	*($4 + [56]) = $5
	CALL $196(($4 + [56]), ($4 + [48]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4520614716222125216, $2, (int_64)4520614716222125216, $4, [32])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4520614716222125216) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4520614716222125217
	
.LABEL $label$1
	*($4 + [32]) = $5
	*($4) = (int_64)4520614716222125216
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4520614716222125216
	*($3 + [16]) = $6
	*($4 + [32]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $195(($1 + [24]), ($4 + [32]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $249($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18951])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18997])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [24])) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [19048])
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = $5
	*($4 + [56]) = $1
	CALL $196(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4520614716222125216) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4520614716222125217
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}