(data (i32.const 8192) "Name : %\n\00")
(data (i32.const 8202) "get\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8292) "read\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$2 (param i32 i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$6))
(import "env" "memset" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$15 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$16 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$17 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$18 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$19 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$20 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$23 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$25 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$26 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$27 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $12))
(export "_Znwj" (func $10))
(export "_Znaj" (func $11))
(export "_ZdaPv" (func $13))
(export "_ZnwjSt11align_val_t" (func $14))
(export "_ZnajSt11align_val_t" (func $15))
(export "_ZdlPvSt11align_val_t" (func $16))
(export "_ZdaPvSt11align_val_t" (func $17))
(table $0 2 2 anyfunc)
(elem (i32.const 1) $2)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 16716))
(global $global$2 i32 (i32.const 16716))


void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16704])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16512]
	$3 = (((int_32)$1 * (int_32)[12]) + [16512])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8312]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8316])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8312]) = [1]
	$2 = ($2 << [16])
	*([0] + [8316]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8316])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8316]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8312]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8312]) = [1]
	$3 = ($3 << [16])
	*([0] + [8316]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8316])
	
.LABEL $label$10
	*([0] + [8316]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $26($1)
	
.LABEL $label$2
	*(CALL $22()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $26(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $29($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $22())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $25($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $21($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17, int_32 $18)
{
	int_32 $19
	int_32 $20
	int_32 $21
	$19 = ($global$0 - [288])
	$global$0 = $19
	$0 = *($0 + [4])
	$20 = *($0 + [4])
	$21 = (*($0) + int_32($20 >> [1]))
	$0 = *($0)
	if ( (($20 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($21) + $0))
	
.LABEL $label$1
	$18 = CALL $19($19, $18)
	$17 = CALL $19(($19 + [16]), $17)
	$16 = CALL $19(($19 + [32]), $16)
	$15 = CALL $19(($19 + [48]), $15)
	$14 = CALL $19(($19 + [64]), $14)
	$13 = CALL $19(($19 + [80]), $13)
	$12 = CALL $19(($19 + [96]), $12)
	$11 = CALL $19(($19 + [112]), $11)
	$10 = CALL $19(($19 + [128]), $10)
	$9 = CALL $19(($19 + [144]), $9)
	$8 = CALL $19(($19 + [160]), $8)
	$7 = CALL $19(($19 + [176]), $7)
	$6 = CALL $19(($19 + [192]), $6)
	$5 = CALL $19(($19 + [208]), $5)
	$4 = CALL $19(($19 + [224]), $4)
	$3 = CALL $19(($19 + [240]), $3)
	$2 = CALL $19(($19 + [256]), $2)
	$1 = CALL $19(($19 + [272]), $1)
	CALL void $21((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_32 $11), (int_32 $12), (int_32 $13), (int_32 $14), (int_32 $15), (int_32 $16), (int_32 $17), (int_32 $18), (int_32 $0))
	if ( (*($18) & [1]) ){ goto $label$36 }
	if ( (*($17) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL _ZdlPv(*($18 + [8]))
	if ( ((*($17) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*($17 + [8]))
	$0 = [1]
	if ( ((*($16) & [1]) == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$0 = [1]
	if ( (*($16) & [1]) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (*($15) & $0) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($15) & $0) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($15 + [8]))
	$0 = [1]
	if ( ((*($14) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$0 = [1]
	if ( (*($14) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($13) & $0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($13) & $0) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($13 + [8]))
	$0 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$0 = [1]
	if ( (*($12) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($11) & $0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $0) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$0 = [1]
	if ( (*($10) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($9) & $0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $0) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($9 + [8]))
	$0 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$0 = [1]
	if ( (*($8) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($7) & $0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $0) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($5) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($3) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$0 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($2) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($1) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($19 + [288])
	return 
	
.LABEL $label$2
	$global$0 = ($19 + [288])
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [204]) & [1]) ){ goto $label$35 }
	if ( (*($0 + [192]) & [1]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL _ZdlPv(*(($0 + [212])))
	if ( ((*($0 + [192]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*(($0 + [200])))
	$1 = [1]
	if ( ((*($0 + [180]) & [1]) == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$1 = [1]
	if ( (*($0 + [180]) & [1]) ){ goto $label$31 }
	
.LABEL $label$32
	if ( (*($0 + [168]) & $1) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL _ZdlPv(*(($0 + [188])))
	if ( ((*($0 + [168]) & $1) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($0 + [176])))
	$1 = [1]
	if ( ((*($0 + [156]) & [1]) == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = [1]
	if ( (*($0 + [156]) & [1]) ){ goto $label$27 }
	
.LABEL $label$28
	if ( (*($0 + [144]) & $1) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL _ZdlPv(*(($0 + [164])))
	if ( ((*($0 + [144]) & $1) == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv(*(($0 + [152])))
	$1 = [1]
	if ( ((*($0 + [132]) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$1 = [1]
	if ( (*($0 + [132]) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( (*($0 + [120]) & $1) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*(($0 + [140])))
	if ( ((*($0 + [120]) & $1) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($0 + [128])))
	$1 = [1]
	if ( ((*($0 + [108]) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$1 = [1]
	if ( (*($0 + [108]) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($0 + [96]) & $1) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($0 + [116])))
	if ( ((*($0 + [96]) & $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($0 + [104])))
	$1 = [1]
	if ( ((*($0 + [84]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($0 + [84]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($0 + [72]) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($0 + [92])))
	if ( ((*($0 + [72]) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [80])))
	$1 = [1]
	if ( ((*($0 + [60]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($0 + [60]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($0 + [48]) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [68])))
	if ( ((*($0 + [48]) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [56])))
	$1 = [1]
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [36]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [24]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [44])))
	if ( ((*($0 + [24]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [32])))
	$1 = [1]
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [12]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [20])))
	if ( ((*($0) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($0 + [8]))
	return $0
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8202])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $8($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8292])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $7($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $20($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $20($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $18($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [288])
	$global$0 = $2
	$1 = CALL $19($2, ($1 + [204]))
	$19 = CALL $19(($2 + [16]), ($1 + [192]))
	$18 = CALL $19(($2 + [32]), ($1 + [180]))
	$17 = CALL $19(($2 + [48]), ($1 + [168]))
	$16 = CALL $19(($2 + [64]), ($1 + [156]))
	$15 = CALL $19(($2 + [80]), ($1 + [144]))
	$14 = CALL $19(($2 + [96]), ($1 + [132]))
	$13 = CALL $19(($2 + [112]), ($1 + [120]))
	$12 = CALL $19(($2 + [128]), ($1 + [108]))
	$11 = CALL $19(($2 + [144]), ($1 + [96]))
	$10 = CALL $19(($2 + [160]), ($1 + [84]))
	$9 = CALL $19(($2 + [176]), ($1 + [72]))
	$8 = CALL $19(($2 + [192]), ($1 + [60]))
	$7 = CALL $19(($2 + [208]), ($1 + [48]))
	$6 = CALL $19(($2 + [224]), ($1 + [36]))
	$5 = CALL $19(($2 + [240]), ($1 + [24]))
	$4 = CALL $19(($2 + [256]), ($1 + [12]))
	$3 = CALL $19(($2 + [272]), $1)
	CALL $9($0, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $1)
	if ( (*($1) & [1]) ){ goto $label$35 }
	if ( (*($19) & [1]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($19) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*($19 + [8]))
	$1 = [1]
	if ( ((*($18) & [1]) == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$1 = [1]
	if ( (*($18) & [1]) ){ goto $label$31 }
	
.LABEL $label$32
	if ( (*($17) & $1) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL _ZdlPv(*($18 + [8]))
	if ( ((*($17) & $1) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*($17 + [8]))
	$1 = [1]
	if ( ((*($16) & [1]) == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = [1]
	if ( (*($16) & [1]) ){ goto $label$27 }
	
.LABEL $label$28
	if ( (*($15) & $1) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($15) & $1) == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv(*($15 + [8]))
	$1 = [1]
	if ( ((*($14) & [1]) == 0) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$1 = [1]
	if ( (*($14) & [1]) ){ goto $label$23 }
	
.LABEL $label$24
	if ( (*($13) & $1) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($13) & $1) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*($13 + [8]))
	$1 = [1]
	if ( ((*($12) & [1]) == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$1 = [1]
	if ( (*($12) & [1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( (*($11) & $1) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($11) & $1) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($11 + [8]))
	$1 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($10) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($9) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($9) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($7) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [288])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [288])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17, int_32 $18)
{
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$19 = ($global$0 - [16])
	$global$0 = $19
	$20 = CALL $19($19, $2)
	$2 = [8192]
	$21 = *([8192])
	if ( ($21 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)$21 == (int_32)[37]) ){ goto $label$2 }
	CALL prints_l($2, [1])
	$2 = ($2 + [1])
	$21 = *($2)
	if ( ($21 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$2
	$21 = *($20)
	$22 = ($21 & [1])
	CALL prints_l(( *($20 + [8]) ? ($20 + [1]) : $22 ), ( *($20 + [4]) ? uint_32($21 >> [1]) : $22 ))
	CALL prints(($2 + [1]))
	
.LABEL $label$1
	if ( ((*($20) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($20 + [8]))
	
.LABEL $label$4
	$global$0 = ($19 + [16])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $26($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*(($4 + [204])) = (int_64)0
	*(($4 + [212])) = (int_64)0
	*(($4 + [228])) = (int_64)0
	*(($4 + [236])) = (int_64)0
	*(($4 + [252])) = (int_64)0
	*(($4 + [260])) = (int_64)0
	*(($4 + [276])) = [0]
	*($4 + [196 align=4]) = (int_64)0
	*($4 + [220 align=4]) = (int_64)0
	*($4 + [244 align=4]) = (int_64)0
	*($4 + [268 align=4]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	CALL $4(($4 + [48]), ($4 + [64]))
	CALL $4(($4 + [48]), ($4 + [76]))
	CALL $4(($4 + [48]), (($4 + [64]) + [24]))
	CALL $4(($4 + [48]), ($4 + [100]))
	CALL $4(($4 + [48]), ($4 + [112]))
	CALL $4(($4 + [48]), ($4 + [124]))
	CALL $4(($4 + [48]), ($4 + [136]))
	CALL $4(($4 + [48]), ($4 + [148]))
	CALL $4(($4 + [48]), ($4 + [160]))
	CALL $4(($4 + [48]), ($4 + [172]))
	CALL $4(($4 + [48]), ($4 + [184]))
	CALL $4(($4 + [48]), ($4 + [196]))
	CALL $4(($4 + [48]), ($4 + [208]))
	CALL $4(($4 + [48]), ($4 + [220]))
	CALL $4(($4 + [48]), ($4 + [232]))
	CALL $4(($4 + [48]), ($4 + [244]))
	CALL $4(($4 + [48]), ($4 + [256]))
	CALL $4(($4 + [48]), ($4 + [268]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [288]) + [8]))) = *($3)
	*($4 + [288]) = *($4)
	$3 = *($6)
	*((($4 + [304]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [288])
	*($4 + [32]) = $0
	*($4 + [304]) = $0
	*($4 + [308]) = ($4 + [280])
	*($4 + [304]) = ($4 + [16])
	CALL $5(($4 + [304]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $29($2)
	
.LABEL $label$4
	CALL $6(($4 + [64]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$1 }
	*($3 + [12]) = [0]
	*($3 + [8]) = [1]
	*($3) = *($3 + [8])
	CALL $3($1, $1, $3)
	
.LABEL $label$1
	CALL $23([0])
	$global$0 = ($3 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $24(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8300])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $24(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $29($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $26($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8300])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $26($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $29($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $21 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $23 (int_32 $0)
{
}

int_32 .FUNC $22 ()
{
	return [8304]
}

void .FUNC $18 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $28($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8206])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $26 (int_32 $0)
{
	return CALL $27([8320], $0)
}