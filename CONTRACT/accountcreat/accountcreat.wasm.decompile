(data (i32.const 8192) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8208) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8224) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8537) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00unexpected error in fixed_bytes constructor\00EOS\00")
(data (i32.const 8624) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8896) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 8955) "PUB_R1_\00")
(data (i32.const 8963) "unrecognized public key format\00")
(data (i32.const 8994) "unexpected asset symbol input\00")
(data (i32.const 9024) "invalid sell\00")
(data (i32.const 9037) "invalid conversion\00")
(data (i32.const 9056) "\04EOS\00\00\00\00")
(data (i32.const 9064) "Are you trying to corrupt me?\00")
(data (i32.const 9094) "Amount must be > 0\00")
(data (i32.const 9113) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9162) "invalid symbol name\00")
(data (i32.const 9182) "cannot increment end iterator\00")
(data (i32.const 9212) "cannot pass end iterator to erase\00")
(data (i32.const 9246) "error reading iterator\00")
(data (i32.const 9269) "read\00")
(data (i32.const 9274) "object passed to erase is not in multi_index\00")
(data (i32.const 9319) "cannot erase objects in table of another contract\00")
(data (i32.const 9369) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9422) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9473) "string is too long to be a valid name\00")
(data (i32.const 9511) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9578) "character is not in allowed character set for names\00")
(data (i32.const 9630) ":-\00")
(data (i32.const 9633) "Please stake a positive amount\00")
(data (i32.const 9664) "multiplication overflow\00")
(data (i32.const 9688) "multiplication underflow\00")
(data (i32.const 9713) "Accounts require at least 3 KB of RAM\00")
(data (i32.const 9751) "Not enough money\00")
(data (i32.const 9768) "Account creation fee\00")
(data (i32.const 9789) "Initial balance\00")
(data (i32.const 9805) "unable to find key\00")
(data (i32.const 9824) "attempt to subtract asset with different symbol\00")
(data (i32.const 9872) "subtraction underflow\00")
(data (i32.const 9894) "subtraction overflow\00")
(data (i32.const 9915) "write\00")
(data (i32.const 9921) "invalid base-58 value\00")
(data (i32.const 9943) "base-58 value is out of range\00")
(data (i32.const 9973) "cannot create objects in table of another contract\00")
(data (i32.const 10024) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10076) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10130) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10178) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 10222) "get\00")
(data (i32.const 0) "\f8\'\00\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "abort" (func $fimport$4))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$6 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$8 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "get_active_producers" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$13 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$15 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$16 (param i32 i32)))
(import "env" "__multf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$18 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$21 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$26 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$28 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "assert_sha256" (func $fimport$33 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$34 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$35 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$36 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$37 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$38 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$39 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$40 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$41 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$42 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$43 (param i32 i32 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$44 (result i32)))
(import "env" "read_action_data" (func $fimport$45 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$46 (param i32 i64)))
(import "env" "db_idx64_find_primary" (func $fimport$47 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$48 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$49 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$50 (param i32)))
(import "env" "db_get_i64" (func $fimport$51 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$52 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$53 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$54 (param i32)))
(import "env" "__multi3" (func $fimport$55 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$56 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$57 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$58 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_store" (func $fimport$59 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$60 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$61 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$62 (param i64 i64 i64) (result i32)))
(import "env" "db_idx256_next" (func $fimport$63 (param i32 i32) (result i32)))
(export "apply" (func $1))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10226))
(global $global$2 i32 (i32.const 10226))


void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($1)
	$1 = *($5 + [4])
	$6 = ($5 + [8])
	$7 = ($5 + [4])
	
.LOOP $label$1:
	$8 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$9 = ((int_64)$4) != (int_64)0
	*($3 + [15]) = (($9) << [7]) | ($8 & [127]))
	if ( ((int_32)(*($6) - $1) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$1 = *($7)
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	$1 = (*($7) + [1])
	*($7) = $1
	if ( $9 ){ goto $label$1 }
	$7 = ($0 + [4])
	if ( ((int_32)(*(($5 + [8])) - $1) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$1 = *(($5 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $7, [33])
	*(($1 = ($5 + [4]))) = (*($1) + [33])
	$global$0 = ($3 + [16])
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [132]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10130])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942746098040832)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10076])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10076])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $49(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $92(*($1), *($0 + [8]))
	CALL $93(*($0 + [12]), $1, [1])
	CALL $94(*($0 + [16]), $1, [1])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($1)
	$1 = *($5 + [4])
	$6 = ($5 + [8])
	$7 = ($5 + [4])
	
.LOOP $label$1:
	$8 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$9 = ((int_64)$4) != (int_64)0
	*($3 + [15]) = (($9) << [7]) | ($8 & [127]))
	if ( ((int_32)(*($6) - $1) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$1 = *($7)
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	$1 = (*($7) + [1])
	*($7) = $1
	if ( $9 ){ goto $label$1 }
	$7 = ($0 + [4])
	if ( ((int_32)(*(($5 + [8])) - $1) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$1 = *(($5 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $7, [33])
	*(($1 = ($5 + [4]))) = (*($1) + [33])
	$global$0 = ($3 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	$2 = ($global$0 - [256])
	$global$0 = $2
	*($0) = (int_64)0
	*(($3 = ($0 + [29]))) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)0
	*(($5 = ($0 + [16]))) = (int_64)0
	*(($6 = ($0 + [8]))) = (int_64)0
	$7 = *($1 + [4])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = *($1)
	$9 = ($8 + $7)
	$7 = ($0 + [2])
	$10 = ($0 + [3])
	$11 = ($0 + [4])
	$12 = ($0 + [5])
	$13 = ($0 + [6])
	$14 = ($0 + [7])
	$15 = ($0 + [9])
	$16 = ($0 + [10])
	$17 = ($0 + [11])
	$18 = ($0 + [12])
	$19 = ($0 + [13])
	$20 = ($0 + [14])
	$21 = ($0 + [15])
	$22 = ($0 + [17])
	$23 = ($0 + [18])
	$24 = ($0 + [19])
	$25 = ($0 + [20])
	$26 = ($0 + [21])
	$27 = ($0 + [22])
	$28 = ($0 + [23])
	$29 = ($0 + [25])
	$30 = ($0 + [26])
	$31 = ($0 + [27])
	$32 = ($0 + [28])
	$33 = ($0 + [30])
	$34 = ($0 + [31])
	$35 = ($0 + [32])
	$36 = ($0 + [33])
	$37 = ($0 + [34])
	$38 = ($0 + [35])
	$39 = ($0 + [36])
	
.LOOP $label$2:
	if ( *([0] + [8280]) ){ goto $label$3 }
	$1 = [-256]
	
.LOOP $label$4:
	*(($1 + [8537])) = [255]
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$4 }
	$1 = [0]
	
.LOOP $label$5:
	*((*(($1 + [8896])) + [8281])) = $1
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[59]) ){ goto $label$5 }
	*([0] + [8280]) = [1]
	
.LABEL $label$3
	$1 = *((CALL memcpy($2, [8281], [256]) + *($8)))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	CALL eosio_assert([0], [9921])
	
.LABEL $label$6
	$1 = (((int_32)*($0) * (int_32)[58]) + $1)
	*($0) = $1
	$1 = (((int_32)*($40) * (int_32)[58]) + int_32($1 >> [8]))
	*(($40 = ($0 + [1]))) = $1
	$1 = (((int_32)*($7) * (int_32)[58]) + int_32($1 >> [8]))
	*($7) = $1
	$1 = (((int_32)*($10) * (int_32)[58]) + int_32($1 >> [8]))
	*($10) = $1
	$1 = (((int_32)*($11) * (int_32)[58]) + int_32($1 >> [8]))
	*($11) = $1
	$1 = (((int_32)*($12) * (int_32)[58]) + int_32($1 >> [8]))
	*($12) = $1
	$1 = (((int_32)*($13) * (int_32)[58]) + int_32($1 >> [8]))
	*($13) = $1
	$1 = (((int_32)*($14) * (int_32)[58]) + int_32($1 >> [8]))
	*($14) = $1
	$1 = (((int_32)*($6) * (int_32)[58]) + int_32($1 >> [8]))
	*($6) = $1
	$1 = (((int_32)*($15) * (int_32)[58]) + int_32($1 >> [8]))
	*($15) = $1
	$1 = (((int_32)*($16) * (int_32)[58]) + int_32($1 >> [8]))
	*($16) = $1
	$1 = (((int_32)*($17) * (int_32)[58]) + int_32($1 >> [8]))
	*($17) = $1
	$1 = (((int_32)*($18) * (int_32)[58]) + int_32($1 >> [8]))
	*($18) = $1
	$1 = (((int_32)*($19) * (int_32)[58]) + int_32($1 >> [8]))
	*($19) = $1
	$1 = (((int_32)*($20) * (int_32)[58]) + int_32($1 >> [8]))
	*($20) = $1
	$1 = (((int_32)*($21) * (int_32)[58]) + int_32($1 >> [8]))
	*($21) = $1
	$1 = (((int_32)*($5) * (int_32)[58]) + int_32($1 >> [8]))
	*($5) = $1
	$1 = (((int_32)*($22) * (int_32)[58]) + int_32($1 >> [8]))
	*($22) = $1
	$1 = (((int_32)*($23) * (int_32)[58]) + int_32($1 >> [8]))
	*($23) = $1
	$1 = (((int_32)*($24) * (int_32)[58]) + int_32($1 >> [8]))
	*($24) = $1
	$1 = (((int_32)*($25) * (int_32)[58]) + int_32($1 >> [8]))
	*($25) = $1
	$1 = (((int_32)*($26) * (int_32)[58]) + int_32($1 >> [8]))
	*($26) = $1
	$1 = (((int_32)*($27) * (int_32)[58]) + int_32($1 >> [8]))
	*($27) = $1
	$1 = (((int_32)*($28) * (int_32)[58]) + int_32($1 >> [8]))
	*($28) = $1
	$1 = (((int_32)*($4) * (int_32)[58]) + int_32($1 >> [8]))
	*($4) = $1
	$1 = (((int_32)*($29) * (int_32)[58]) + int_32($1 >> [8]))
	*($29) = $1
	$1 = (((int_32)*($30) * (int_32)[58]) + int_32($1 >> [8]))
	*($30) = $1
	$1 = (((int_32)*($31) * (int_32)[58]) + int_32($1 >> [8]))
	*($31) = $1
	$1 = (((int_32)*($32) * (int_32)[58]) + int_32($1 >> [8]))
	*($32) = $1
	$1 = (((int_32)*($3) * (int_32)[58]) + int_32($1 >> [8]))
	*($3) = $1
	$1 = (((int_32)*($33) * (int_32)[58]) + int_32($1 >> [8]))
	*($33) = $1
	$1 = (((int_32)*($34) * (int_32)[58]) + int_32($1 >> [8]))
	*($34) = $1
	$1 = (((int_32)*($35) * (int_32)[58]) + int_32($1 >> [8]))
	*($35) = $1
	$1 = (((int_32)*($36) * (int_32)[58]) + int_32($1 >> [8]))
	*($36) = $1
	$1 = (((int_32)*($37) * (int_32)[58]) + int_32($1 >> [8]))
	*($37) = $1
	$1 = (((int_32)*($38) * (int_32)[58]) + int_32($1 >> [8]))
	*($38) = $1
	$1 = (((int_32)*($39) * (int_32)[58]) + int_32($1 >> [8]))
	*($39) = $1
	if ( ($1 <= [256]) ){ goto $label$7 }
	CALL eosio_assert([0], [9943])
	
.LABEL $label$7
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [36])
	
.LOOP $label$8:
	$8 = *($0)
	*($0) = *($1)
	*($1) = $8
	$1 = ($1 + [-1])
	$0 = ($0 + [1])
	if ( ($0 <= $1) ){ goto $label$8 }
	$global$0 = ($2 + [256])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9246])
	
.LABEL $label$5
	$4 = CALL $8($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $14([144])) + [16]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [88]) = [0]
	*($5 + [128]) = $0
	*(($5 + [40])) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*(($5 + [24])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [88])
	CALL $72(($3 + [40]), ($3 + [32]))
	*($5 + [132]) = $1
	*($5 + [136 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $16($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [9182])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = *(($2 + [140]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942746098040831, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [140])) = $3
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$5 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	if ( ((int_32)*($8 + [128]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9422])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL $49($6, CALL $fimport$11(*($6), *($6 + [8]), (int_64)-6497942746098040832, $5))
	if ( ((int_32)*($8 + [128]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9422])
	
.LABEL $label$3
	*(($0 + [4])) = $8
	*(($8 + [140])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = *($1)
	$5 = CALL db_idx256_lowerbound(*($4), *($4 + [8]), (int_64)-6497942746098040832, $3, [2], ($3 + [40]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = *($3 + [40])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$6:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$6) ){ goto $label$4 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	$4 = [0]
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($10 + [128]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9422])
	goto $label$2 
	
.LABEL $label$3
	$10 = CALL $49($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	if ( ((int_32)*($10 + [128]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9422])
	
.LABEL $label$2
	*(($10 + [136])) = $5
	$4 = [0]
	if ( ($10 == 0) ){ goto $label$1 }
	if ( ((int_64)((int_64)((int_64)*($2) ^ (int_64)*($10 + [16])) | (int_64)((int_64)*(($2 + [8])) ^ (int_64)*(($10 + [24])))) != (int_64)0) ){ goto $label$1 }
	$4 = ( $10 ? [0] : (int_64)(((int_64)((int_64)*($2 + [16]) ^ (int_64)*(($10 + [32]))) | (int_64)((int_64)*(($2 + [24])) ^ (int_64)*(($10 + [40])))) == 0) )
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [32]) = [0]
	*($1 + [24]) = (int_64)0
	$2 = ($0 + [72])
	*($1 + [16]) = $2
	*($1 + [40]) = (int_64)0
	CALL $46(($1 + [8]), ($1 + [16]), ($1 + [40]))
	$3 = *($1 + [12])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + [32])
	
.LOOP $label$3:
	if ( ((uint_32)*($3 + [8]) >= (uint_32)(CASTING uint_32)(uint_64 ((int_64)CALL $23() / (int_64)1000000))) ){ goto $label$2 }
	$5 = *($1 + [28])
	if ( ((int_32)$5 == (int_32)*($4)) ){ goto $label$5 }
	*($1 + [28]) = (CALL memcpy($5, $3, [128]) + [128])
	goto $label$4 
	
.LABEL $label$5
	CALL $47(($1 + [24]), $3)
	
.LABEL $label$4
	CALL $48(($1 + [8]))
	$3 = *($1 + [12])
	if ( $3 ){ goto $label$3 }
	
.LABEL $label$2
	$7 = *($1 + [28])
	$6 = *($1 + [24])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	$8 = ($0 + [100])
	$9 = ($0 + [96])
	$10 = ($0 + [80])
	$11 = ($0 + [72])
	
.LOOP $label$7:
	$12 = *($6)
	$5 = *($8)
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$13:
	$3 = ($5 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$12) ){ goto $label$12 }
	$5 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$11 }
	if ( ((int_32)*($4 + [128]) != (int_32)$2) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = CALL db_find_i64(*($11), *($10), (int_64)-6497942746098040832, $12)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $49($2, $3)
	if ( ((int_32)*($4 + [128]) == (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$10
	CALL eosio_assert([0], [9422])
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	CALL eosio_assert([0], [9212])
	CALL eosio_assert([0], [9182])
	
.LABEL $label$8
	$3 = CALL db_next_i64(*($4 + [132]), ($1 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	CALL $49($2, $3)
	
.LABEL $label$14
	CALL $50($2, $4)
	$6 = ($6 + [128])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	$7 = *($1 + [24])
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$1 }
	*($1 + [28]) = $7
	CALL $16($7)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL require_auth($1)
	CALL $42($0)
	$6 = ($0 + [72])
	*($5 + [24]) = $6
	CALL $43(($5 + [16]), ($5 + [24]), $2)
	if ( *($5 + [20]) ){ goto $label$1 }
	*($5 + [4]) = $2
	*($5 + [8]) = $3
	*($5 + [12]) = $4
	*($5) = $0
	*($5 + [56]) = $1
	if ( ((int_64)CALL current_receiver() == (int_64)*($6)) ){ goto $label$2 }
	CALL eosio_assert([0], [9973])
	
.LABEL $label$2
	*($5 + [32]) = $6
	*($5 + [36]) = $5
	*($5 + [40]) = ($5 + [56])
	*(($2 = CALL $14([144])) + [16]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [88]) = [0]
	*($2 + [128]) = $6
	*(($2 + [40])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	CALL $44(($5 + [32]), $2)
	*($5 + [48]) = $2
	$1 = *($2)
	*($5 + [32]) = $1
	$3 = *($2 + [132])
	*($5 + [28]) = $3
	$4 = ($0 + [100])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$4 }
	*($6 + [8]) = $1
	*($6 + [16]) = $3
	*($5 + [48]) = [0]
	*($6) = $2
	*($4) = ($6 + [24])
	$2 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $45(($0 + [96]), ($5 + [48]), ($5 + [32]), ($5 + [28]))
	$2 = *($5 + [48])
	*($5 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL $16($2)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *(($1 + [48]))
	$6 = *(($1 + [24]))
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)*($1 + [8])) ){ goto $label$10 }
	$7 = *($3)
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$9 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [80]) + [8])) = $7
	$6 = *($2)
	*((($4 + [16]) + [8])) = $7
	*($4 + [80]) = $6
	*($4 + [16]) = $6
	CALL $39(($4 + [96]), $1, ($1 + [16]), ($4 + [16]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$8 }
	$7 = *($1)
	$8 = ($1 + [16])
	$6 = *($2)
	$9 = CALL $7(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), *(($1 + [32])))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$5 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$5 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [64]) + [8])) = $7
	$6 = *($2)
	*((($4 + [32]) + [8])) = $7
	*($4 + [64]) = $6
	*($4 + [32]) = $6
	CALL $39(($4 + [96]), $1, ($1 + [40]), ($4 + [32]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [40])
	$6 = *($2)
	$9 = CALL $7(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), *(($1 + [56])))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$7
	$5 = (Rounds 0)($9)
	
.LABEL $label$6
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$11 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$11
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $7
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $7
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$16 }
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [9162])
	
.LABEL $label$12
	*($2) = $5
	*(($2 + [8])) = $10
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [9037])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [9024])
	goto $label$1 
	
.LABEL $label$3
	$5 = (Rounds 0)($9)
	
.LABEL $label$2
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$17 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$17
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $7
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $7
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$22 }
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [9162])
	
.LABEL $label$18
	*($2) = $5
	*(($2 + [8])) = $10
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($3) != (int_64)*($8)) ){ goto $label$23 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$23
	$7 = *($8)
	*((($4 + [48]) + [8])) = $7
	$6 = *($2)
	*(($4 + [8])) = $7
	*($4 + [48]) = $6
	*($4) = $6
	CALL $40($0, $1, $4, $3)
	$global$0 = ($4 + [112])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [7])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[33554432]) ){ goto $label$3 }
	$6 = [33554431]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [7]) > (uint_32)[16777214]) ){ goto $label$5 }
	$6 = int_32($7 >> [6])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[33554432]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL $14(($6 << [7]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $22($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($2 - $3)
	$4 = CALL memcpy(($5 + ($4 << [7])), $1, [128])
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [7]))
	$5 = ($4 + [128])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $16($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942746098040831, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [128]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9422])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $49($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	if ( ((int_32)*($4 + [128]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9422])
	
.LABEL $label$2
	*(($4 + [140])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $14(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $22($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $16($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $16($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *(($6 + [88]))
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = ($6 + [72])
	$9 = CALL db_lowerbound_i64(*($8), *(($6 + [80])), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $49($8, $9)
	*($3 + [36]) = [0]
	*($3 + [32]) = $8
	$7 = *(*(CALL $90(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [88])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10024])
	$7 = *(($6 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [88])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$7 = CALL $23()
	*($1 + [8]) = (*($6 + [28]) + (CASTING uint_32)(uint_64 ((int_64)$7 / (int_64)1000000)))
	$6 = *($5 + [4])
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$6 = *($5 + [8])
	*($1 + [48 align=4]) = *($6)
	*(($1 + [77])) = *(($6 + [29]))
	*(($1 + [72])) = *(($6 + [24]))
	*(($1 + [64])) = *(($6 + [16]))
	*(($1 + [56])) = *(($6 + [8]))
	$6 = *($5 + [12])
	*($1 + [88 align=4]) = *($6)
	*(($1 + [117])) = *(($6 + [29]))
	*(($1 + [112])) = *(($6 + [24]))
	*(($1 + [104])) = *(($6 + [16]))
	*(($1 + [96])) = *(($6 + [8]))
	$8 = ($1 + [88])
	$9 = ($1 + [48])
	$5 = ($1 + [16])
	$10 = ($1 + [8])
	$7 = *($1 + [48])
	$6 = [110]
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	$7 = *($1 + [88])
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$2 = CALL $8($6)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$7
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $5
	*($3 + [44]) = $9
	*($3 + [48]) = $8
	CALL $91(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($4 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $7, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL $9($2)
	
.LABEL $label$9
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$10 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$6 = ($4 + [8])
	$7 = *($6)
	$2 = *(($0 + [8]))
	$11 = *($2)
	$12 = *($1)
	*((($3 + [32]) + [24])) = *(($5 + [24]))
	*((($3 + [32]) + [16])) = *(($5 + [16]))
	*($3 + [40]) = *(($5 + [8]))
	*($3 + [32]) = *($5)
	*($1 + [136]) = CALL db_idx256_store($7, (int_64)-6497942746098040832, $11, $12, ($3 + [32]), [2])
	$7 = *($2)
	$11 = *($6)
	$12 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*(($1 + [140])) = CALL db_idx64_store($11, (int_64)-6497942746098040831, $7, $12, ($3 + [32]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8252]) + $1)
	*([0] + [8252]) = $2
	$3 = *([0] + [8244])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8244]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8252]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8537])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $9 (int_32 $0)
{
}

int_64 .FUNC $6 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $7 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $4($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $5($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8208])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8192]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8224]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $6($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $4 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $5 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $0 ()
{
	CALL $10()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $66($0, $1)
	CALL $67($0, $1)
	CALL $68($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $35([0])
	((int_64)$0 == (int_64)$1)
	((int_64)-5001137286409207808 == (int_64)$2)
	((int_64)4923678677850772624 == (int_64)$2)
	((int_64)-3617168760277827584 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $8($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8264])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $8($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $15 (int_32 $0)
{
	return CALL $14($0)
}

void .FUNC $16 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $9($0)
	
.LABEL $label$1
}

void .FUNC $17 (int_32 $0)
{
	CALL $16($0)
}

void .FUNC $10 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8244]) = $0
	*([0] + [8240]) = $0
	*([0] + [8252]) = (current_memory)
}

int_32 .FUNC $11 ()
{
	return [8256]
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $8($1)
	
.LABEL $label$2
	*(CALL $11()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $8(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $9($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $11())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $12($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9246])
	
.LABEL $label$5
	$4 = CALL $8($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $14([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $77(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$7 = *($5 + [8])
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $78(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $16($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $13(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8264])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $13(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	return CALL $18($0, $1)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [8])) = (int_64)0
	*($0 + [4]) = [0]
	*($0) = *($1)
	$2 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$2 / (int_32)[44])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[97612894]) ){ goto $label$3 }
	$2 = CALL $14($2)
	*(($0 + [4])) = $2
	*(($0 + [12])) = ($2 + ((int_32)$3 * (int_32)[44]))
	*(($3 = ($0 + [8]))) = $2
	$4 = *(($1 + [4]))
	$5 = (*(($1 + [8])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[44]) * (int_32)[44]))
	
.LABEL $label$4
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$2 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $14($2)
	*(($0 + [16])) = $2
	*(($0 + [24])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [20]))) = $2
	$4 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$5
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$2 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $14($2)
	*(($0 + [28])) = $2
	*(($0 + [36])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [32]))) = $2
	$5 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL $22(($0 + [4]))
	
.LABEL $label$2
	CALL $22(($0 + [16]))
	
.LABEL $label$1
	CALL $22(($0 + [28]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = [0]
	*(($3 + [136])) = [0]
	*($3 + [112]) = (int_64)6138663577826885632
	*($3 + [104]) = (int_64)6138663577826885632
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$5 = CALL db_find_i64((int_64)6138663577826885632, (int_64)6138663577826885632, (int_64)-5069606918720847872, (int_64)4995142087184830980)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $75(($3 + [104]), $5)
	if ( ((int_32)*($4 + [64]) == (int_32)($3 + [104])) ){ goto $label$1 }
	CALL eosio_assert([0], [9422])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9805])
	
.LABEL $label$1
	*((($3 + [40]) + [56])) = *(($4 + [56]))
	*((($3 + [40]) + [48])) = *(($4 + [48]))
	*((($3 + [40]) + [40])) = *(($4 + [40]))
	*((($3 + [40]) + [32])) = *(($4 + [32]))
	*((($3 + [40]) + [24])) = *(($4 + [24]))
	*((($3 + [40]) + [16])) = *(($4 + [16]))
	*((($3 + [40]) + [8])) = *(($4 + [8]))
	*($3 + [32]) = (int_64)1296126464
	*($3 + [40]) = *($4)
	*($3 + [24]) = (CASTING uint_64)(uint_32 $2)
	$6 = (int_64)5062994
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $7
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $2 ){ goto $label$7 }
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [9162])
	
.LABEL $label$3
	*((($3 + [8]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [8]) = *($3 + [24])
	CALL $40($0, ($3 + [40]), ($3 + [8]), [9056])
	*($0) = ((int_64)((int_64)((int_64)*($0) * (int_64)200) + (int_64)199) / (int_64)199)
	$5 = *($3 + [128])
	if ( ($5 == 0) ){ goto $label$8 }
	$0 = ($3 + [132])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $16($2)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	$4 = *(($3 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $5
	
.LABEL $label$9
	*($0) = $5
	CALL $16($4)
	
.LABEL $label$8
	$global$0 = ($3 + [144])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [128]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9274])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9319])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9369])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $16($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $16($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [132]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $71(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [240])
	$global$0 = $5
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)7100092273213675680) ){ goto $label$1 }
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$6 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9064])
	
.LABEL $label$2
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$7 }
	CALL eosio_assert([0], [9094])
	
.LABEL $label$7
	$7 = *($4)
	$9 = ($7 & [1])
	$10 = ( *($4 + [8]) ? ($4 + [1]) : $9 )
	$8 = [-1]
	$7 = ( *($4 + [4]) ? uint_32($7 >> [1]) : $9 )
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = [0]
	
.LOOP $label$9:
	if ( ((int_32)*(($10 + $8)) != (int_32)[32]) ){ goto $label$8 }
	$8 = ($8 + [1])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$9 }
	$8 = [-1]
	
.LABEL $label$8
	
.LOOP $label$12:
	if ( ($7 == 0) ){ goto $label$11 }
	$9 = ($10 + $7)
	$11 = ($7 + [-1])
	$7 = $11
	if ( ((int_32)*(($9 + [-1])) == (int_32)[32]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [-1]
	
.LABEL $label$10
	$7 = CALL $32(($5 + [64]), $4, $8, (([1] - $8) + $11), $4)
	$8 = ( *($7 + [8]) ? ($7 + [1]) : (*($5 + [64]) & [1]) )
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$14 }
	$9 = uint_32($9 >> [1])
	goto $label$13 
	
.LABEL $label$14
	$9 = *(($4 + [4]))
	
.LABEL $label$13
	CALL $34(($5 + [192]), $8, $9)
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $16(*(($7 + [8])))
	
.LABEL $label$15
	*($5 + [184]) = ($0 + [72])
	CALL $43(($5 + [176]), ($5 + [184]), ($5 + [192]))
	*(($5 + [160])) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [112]) = [0]
	*($5 + [152]) = (int_64)0
	if ( (*($5 + [180]) == 0) ){ goto $label$17 }
	$8 = *($7)
	$9 = ($8 & [1])
	$7 = CALL $32(($5 + [40]), $4, [0], [12], $4)
	*($5 + [56]) = ( *($7 + [8]) ? ($7 + [1]) : $9 )
	*($5 + [60]) = ( *($7 + [4]) ? uint_32($8 >> [1]) : $9 )
	*($5 + [16]) = *($5 + [56])
	*($5 + [64]) = *(CALL $52(($5 + [232]), ($5 + [16])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$18 }
	CALL $16(*(($7 + [8])))
	
.LABEL $label$18
	$7 = *($5 + [180])
	*(($5 + [80])) = *(($7 + [56]))
	*(($5 + [88])) = *(($7 + [64]))
	*(($5 + [96])) = *(($7 + [72]))
	*(($5 + [101])) = *(($7 + [77]))
	$1 = *($7 + [48 align=4])
	*((($5 + [64]) + [56])) = *(($7 + [96]))
	*((($5 + [64]) + [64])) = *(($7 + [104]))
	*((($5 + [64]) + [72])) = *(($7 + [112]))
	*((($5 + [64]) + [77])) = *(($7 + [117]))
	*($5 + [72]) = $1
	*($5 + [112]) = *($7 + [88 align=4])
	*((($5 + [64]) + [96])) = *(($0 + [40]))
	*($5 + [152]) = *($0 + [32])
	*($5 + [168]) = *($0 + [64])
	$1 = *($5 + [176])
	*($5 + [232]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $7) ){ goto $label$19 }
	CALL eosio_assert([0], [9212])
	$7 = *($5 + [236])
	
.LABEL $label$19
	CALL $53(($5 + [232]))
	CALL $50(*($5 + [184]), $7)
	goto $label$16 
	
.LABEL $label$17
	CALL $54($0, $4, ($5 + [64]))
	
.LABEL $label$16
	$2 = *(($3 + [8]))
	*((($5 + [24]) + [8])) = $2
	$1 = *($3)
	*(($5 + [8])) = $2
	*($5 + [24]) = $1
	*($5) = $1
	CALL $55($0, $5, ($5 + [64]))
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9473])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9578])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9511])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9578])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [-1]
	$4 = *($2 + [136])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [9182])
	$3 = [-1]
	$2 = *(($0 + [4]))
	$4 = *($2 + [136])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	*(($1 + [16])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	$4 = *(*($0))
	$4 = CALL db_idx256_find_primary(*($4), *($4 + [8]), (int_64)-6497942746098040832, $1, [2], *($2))
	*(*(($0 + [4])) + [136]) = $4
	
.LABEL $label$1
	*($1) = (int_64)0
	$5 = CALL db_idx256_next($4, $1)
	if ( ((int_32)$5 <= (int_32)$3) ){ goto $label$7 }
	$6 = *($1)
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$4 = ($2 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$6 }
	$2 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)*($3 + [128]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9422])
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $49($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	if ( ((int_32)*($3 + [128]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [9422])
	
.LABEL $label$4
	*(($0 + [4])) = $3
	*(($3 + [136])) = $5
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = [0]
	*($3 + [200]) = [0]
	*($3 + [192]) = (int_64)0
	$5 = *($1)
	$6 = ($5 & [1])
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $6 )
	$8 = [-1]
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($7 + $4)) != (int_32)[32]) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	$8 = [-1]
	goto $label$1 
	
.LABEL $label$2
	$8 = $4
	
.LABEL $label$1
	
.LOOP $label$6:
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($7 + $5)
	$6 = ($5 + [-1])
	$5 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[32]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [-1]
	
.LABEL $label$4
	$7 = CALL $32(($3 + [128]), $1, $8, (([1] - $8) + $6), $1)
	*(($3 + [184])) = [0]
	*($3 + [176]) = (int_64)0
	$5 = CALL $2([9630])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [176]) = ($5 << [1])
	$4 = (($3 + [176]) | [1])
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($5 + [16]) & [-16])
	$4 = CALL $14($6)
	*($3 + [176]) = ($6 | [1])
	*($3 + [184]) = $4
	*($3 + [180]) = $5
	
.LABEL $label$9
	CALL memcpy($4, [9630], $5)
	
.LABEL $label$8
	*(($4 + $5)) = [0]
	CALL $56($0, $7, ($3 + [176]), ($3 + [192]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL $16(*($3 + [184]))
	
.LABEL $label$11
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$12 }
	CALL $16(*($7 + [8]))
	
.LABEL $label$12
	$5 = *($3 + [192])
	$4 = *($5)
	if ( ($4 & [1]) ){ goto $label$14 }
	$4 = uint_32($4 >> [1])
	$5 = ($5 + [1])
	goto $label$13 
	
.LABEL $label$14
	$4 = *($5 + [4])
	$5 = *($5 + [8])
	
.LABEL $label$13
	*($3 + [172]) = $4
	*($3 + [168]) = $5
	*($3 + [32]) = *($3 + [168])
	*($2) = *(CALL $52(($3 + [128]), ($3 + [32])))
	$5 = *($3 + [192])
	$4 = *($5 + [12])
	if ( ($4 & [1]) ){ goto $label$16 }
	$4 = uint_32($4 >> [1])
	$5 = (($5 + [12]) + [1])
	goto $label$15 
	
.LABEL $label$16
	$4 = *(($5 + [16]))
	$5 = *(($5 + [20]))
	
.LABEL $label$15
	*($3 + [124]) = $4
	*($3 + [120]) = $5
	*($3 + [24]) = *($3 + [120])
	CALL $37(($3 + [128]), ($3 + [24]))
	*(($2 + [37])) = *(($3 + [157]))
	*(($2 + [32])) = *((($3 + [128]) + [24]))
	*(($2 + [24])) = *((($3 + [128]) + [16]))
	*(($2 + [16])) = *((($3 + [128]) + [8]))
	*($2 + [8 align=4]) = *($3 + [128])
	*(($2 + [96])) = *(($0 + [40]))
	*($2 + [88]) = *($0 + [32])
	*($2 + [104]) = *($0 + [64])
	$7 = *($3 + [192])
	$4 = (((int_32)(*($3 + [196]) - $7) / (int_32)[12]) + [-2])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$17 }
	$6 = ($2 + [88])
	$5 = ($2 + [8])
	goto $label$26 
	
.LABEL $label$26
	*($2 + [48 align=4]) = *($5)
	*(($2 + [77])) = *(($5 + [29]))
	*(($2 + [72])) = *(($5 + [24]))
	*(($2 + [64])) = *(($5 + [16]))
	*(($2 + [56])) = *(($5 + [8]))
	goto $label$18 
	
.LABEL $label$25
	*($2 + [48 align=4]) = *($5)
	*(($2 + [77])) = *(($5 + [29]))
	*(($2 + [72])) = *(($5 + [24]))
	*(($2 + [64])) = *(($5 + [16]))
	*(($2 + [56])) = *(($5 + [8]))
	$5 = CALL $31(($3 + [96]), ($7 + [24]))
	CALL $57(($3 + [128]), $0, $5)
	*(($6 + [8])) = *((($3 + [128]) + [8]))
	*($6) = *($3 + [128])
	if ( ((*($5) & [1]) == 0) ){ goto $label$27 }
	CALL $16(*($5 + [8]))
	
.LABEL $label$27
	$5 = CALL $31(($3 + [80]), (*($3 + [192]) + [36]))
	$4 = (CALL $29(( *($5 + [8]) ? ($5 + [1]) : (*($5) & [1]) ), [0], [10]) << [10])
	if ( ((uint_32)$4 > (uint_32)*(($0 + [64]))) ){ goto $label$28 }
	CALL eosio_assert([0], [9713])
	
.LABEL $label$28
	*(($2 + [104])) = $4
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL $16(*(($5 + [8])))
	goto $label$18 
	
.LABEL $label$24
	$5 = *($7 + [24])
	if ( ($5 & [1]) ){ goto $label$22 }
	$5 = uint_32($5 >> [1])
	$4 = (($7 + [24]) + [1])
	goto $label$21 
	
.LABEL $label$23
	$5 = *($7 + [24])
	if ( ($5 & [1]) ){ goto $label$20 }
	$5 = uint_32($5 >> [1])
	$4 = (($7 + [24]) + [1])
	goto $label$19 
	
.LABEL $label$22
	$5 = *(($7 + [28]))
	$4 = *(($7 + [32]))
	
.LABEL $label$21
	*($3 + [116]) = $5
	*($3 + [112]) = $4
	*($3 + [8]) = *($3 + [112])
	CALL $37(($3 + [128]), ($3 + [8]))
	*(($2 + [77])) = *(($3 + [157]))
	*(($2 + [72])) = *(($3 + [152]))
	*(($2 + [64])) = *(($3 + [144]))
	*(($2 + [56])) = *(($3 + [136]))
	*($2 + [48 align=4]) = *($3 + [128])
	goto $label$18 
	
.LABEL $label$20
	$5 = *(($7 + [28]))
	$4 = *(($7 + [32]))
	
.LABEL $label$19
	*($3 + [76]) = $5
	*($3 + [72]) = $4
	*($3 + [16]) = *($3 + [72])
	CALL $37(($3 + [128]), ($3 + [16]))
	*(($2 + [77])) = *(($3 + [157]))
	*(($2 + [72])) = *(($3 + [152]))
	*(($2 + [64])) = *(($3 + [144]))
	$4 = (($3 + [128]) + [8])
	*(($2 + [56])) = *($4)
	*($2 + [48 align=4]) = *($3 + [128])
	$5 = CALL $31(($3 + [56]), (*($3 + [192]) + [36]))
	CALL $57(($3 + [128]), $0, $5)
	*(($6 + [8])) = *($4)
	*($6) = *($3 + [128])
	if ( ((*($5) & [1]) == 0) ){ goto $label$29 }
	CALL $16(*($5 + [8]))
	
.LABEL $label$29
	$5 = CALL $31(($3 + [40]), (*($3 + [192]) + [48]))
	$4 = (CALL $29(( *($5 + [8]) ? ($5 + [1]) : (*($5) & [1]) ), [0], [10]) << [10])
	if ( ((uint_32)$4 > (uint_32)*(($0 + [64]))) ){ goto $label$30 }
	CALL eosio_assert([0], [9713])
	
.LABEL $label$30
	*(($2 + [104])) = $4
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL $16(*(($5 + [8])))
	
.LABEL $label$18
	$7 = *($3 + [192])
	
.LABEL $label$17
	if ( ($7 == 0) ){ goto $label$31 }
	$4 = *($3 + [196])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($4 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$35 }
	CALL $16(*(($4 + [-4])))
	
.LABEL $label$35
	$4 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$34 }
	$5 = *($3 + [192])
	goto $label$32 
	
.LABEL $label$33
	$5 = $7
	
.LABEL $label$32
	*($3 + [196]) = $7
	CALL $16($5)
	
.LABEL $label$31
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$7
	CALL $30(($3 + [176]))
	$4
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8571])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($5 & [1])
	$5 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($7 & [1])
	$7 = *($2)
	$8 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $7 )
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = ( *($2 + [8]) ? ($2 + [1]) : $7 )
	$10 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$11 = [0]
	
.LOOP $label$2:
	$12 = *(($10 + $11))
	$7 = $8
	$5 = $9
	
.LOOP $label$4:
	if ( ((int_32)($12 & [255]) == (int_32)*($5)) ){ goto $label$3 }
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$4 }
	$11 = ($11 + [1])
	if ( ($11 <= $6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$1 }
	$13 = ($1 + [1])
	$14 = ($2 + [1])
	$15 = ($3 + [8])
	$16 = ($3 + [4])
	$6 = [0]
	
.LOOP $label$5:
	$7 = CALL $32($4, $1, $6, ($11 - $6), $1)
	$5 = *($16)
	if ( ((uint_32)$5 >= (uint_32)*($15)) ){ goto $label$7 }
	*($5) = *($4)
	$5 = ($4 + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($16) = (*($16) + [12])
	*($4) = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	CALL $74($3, $7)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $16(*(($4 + [8])))
	
.LABEL $label$6
	$6 = ($11 + [1])
	$5 = ($5 & [1])
	$5 = *($1)
	$17 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $5 )
	if ( ((uint_32)$17 <= (uint_32)$6) ){ goto $label$8 }
	$7 = ($7 & [1])
	$7 = *($2)
	$8 = ( *(($2 + [4])) ? uint_32($7 >> [1]) : $7 )
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = ( *(($2 + [8])) ? $14 : $7 )
	$10 = ( *(($1 + [8])) ? $13 : $5 )
	$11 = $6
	
.LOOP $label$9:
	$12 = *(($10 + $11))
	$7 = $8
	$5 = $9
	
.LOOP $label$11:
	if ( ((int_32)($12 & [255]) == (int_32)*($5)) ){ goto $label$10 }
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$11 }
	$11 = ($11 + [1])
	if ( ($11 <= $17) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$8
	$12 = CALL $32($4, $1, $6, $17, $1)
	$5 = ($3 + [4])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($3 + [8]))) ){ goto $label$12 }
	*($7) = *($4)
	$7 = ($4 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($5) = (*($5) + [12])
	*($4) = (int_64)0
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$12
	CALL $74($3, $12)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $16(*(($4 + [8])))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( (*($2) & [1]) ){ goto $label$2 }
	$2 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [8])
	
.LABEL $label$1
	$4 = CALL $36($2)
	*($0 + [8]) = (int_64)1397703940
	*($0) = $4
	if ( (uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$3 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$3
	$5 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$5 = $6
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = $6
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $7 ){ goto $label$8 }
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [9162])
	
.LABEL $label$4
	CALL __multi3($3, $4, (int_64)$4 >> (int_64)63), (int_64)10000, (int_64)0)
	$6 = *(($3 + [8]))
	$5 = *($3)
	if ( (( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ) == 0) ){ goto $label$12 }
	if ( (( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ) == 0) ){ goto $label$11 }
	*($0) = $5
	if ( ((int_64)$5 <= (int_64)0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [9664])
	*($0) = $5
	if ( ((int_64)$5 > (int_64)0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [9688])
	*($0) = $5
	if ( ((int_64)$5 > (int_64)0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [9633])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0)
{
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $26($3, (int_64)0)
	$4 = CALL $28($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $27($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $11()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $27($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8625]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $26($0, (int_64)0)
	*(CALL $11()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $27($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $27($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $27($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $27($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8625])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $27($0)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $27($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8562]))
	$8 = (int_64)0
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $27($0)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $27($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8625]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $26($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8625]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8625]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $27($0) + [8625]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $11()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $11()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $11()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	$3 = ($global$0 - [432])
	$global$0 = $3
	*((($3 + [360]) + [29])) = *(($2 + [37]))
	*(($4 = (($3 + [360]) + [24]))) = *(($2 + [32]))
	*(($5 = (($3 + [360]) + [16]))) = *(($2 + [24]))
	*(($6 = (($3 + [360]) + [8]))) = *(($2 + [16]))
	*($3 + [360]) = *($2 + [8 align=4])
	*((($3 + [320]) + [29])) = *(($2 + [77]))
	*(($7 = (($3 + [320]) + [24]))) = *(($2 + [72]))
	*(($8 = (($3 + [320]) + [16]))) = *(($2 + [64]))
	*(($9 = (($3 + [320]) + [8]))) = *(($2 + [56]))
	*($3 + [320]) = *($2 + [48 align=4])
	*($3 + [280]) = [1]
	*(($10 = (($3 + [144]) + [32]))) = *((($3 + [360]) + [32]))
	*(($11 = (($3 + [144]) + [24]))) = *($4)
	*(($12 = (($3 + [144]) + [16]))) = *($5)
	*(($13 = (($3 + [144]) + [8]))) = *($6)
	*($3 + [184]) = [1]
	*($3 + [144]) = *($3 + [360])
	$5 = CALL $14([44])
	*((($3 + [280]) + [24])) = (int_64)0
	$4 = [0]
	*((($3 + [280]) + [32])) = [0]
	$6 = ($5 + [44])
	*((($3 + [280]) + [12])) = $6
	*($5) = *($3 + [144])
	*(($5 + [8])) = *($13)
	*(($5 + [16])) = *($12)
	*(($5 + [24])) = *($11)
	*(($5 + [32])) = *($10)
	*(($5 + [40])) = *($3 + [184])
	*((($3 + [280]) + [8])) = $6
	*($3 + [284]) = $5
	*($3 + [296]) = (int_64)0
	*((($3 + [280]) + [36])) = [0]
	*($3 + [240]) = [1]
	*($10) = *((($3 + [320]) + [32]))
	*($11) = *($7)
	*($12) = *($8)
	*($13) = *($9)
	*($3 + [184]) = [1]
	*($3 + [144]) = *($3 + [320])
	$5 = CALL $14([44])
	*((($3 + [240]) + [24])) = (int_64)0
	*((($3 + [240]) + [32])) = [0]
	$6 = ($5 + [44])
	*((($3 + [240]) + [12])) = $6
	*($5) = *($3 + [144])
	*(($5 + [8])) = *($13)
	*(($5 + [16])) = *($12)
	*(($5 + [24])) = *($11)
	*(($5 + [32])) = *($10)
	*(($5 + [40])) = *($3 + [184])
	*((($3 + [240]) + [8])) = $6
	*($3 + [244]) = $5
	*($3 + [256]) = (int_64)0
	*((($3 + [240]) + [36])) = [0]
	*($3 + [144]) = *($0)
	*($3 + [152]) = *($2)
	CALL $58($12, ($3 + [280]))
	CALL $58((($3 + [144]) + [56]), ($3 + [240]))
	$14 = *(($0 + [56]))
	$15 = *(($2 + [96]))
	$16 = *($0 + [48])
	$17 = *($2 + [88])
	$18 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$18 = $19
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$18 = $19
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $5 ){ goto $label$5 }
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9162])
	
.LABEL $label$1
	CALL $59(($3 + [128]), $0, *($2 + [104]))
	CALL $59(($3 + [112]), $0, [800])
	$20 = *($1)
	$18 = ((int_64)((int_64)$20 + (int_64)119) / (int_64)200)
	$21 = ( $18 ? (int_64)1000 : ((int_64)$18 > (int_64)1000) )
	$18 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$19 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$18 = $19
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$18 = $19
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $5 ){ goto $label$12 }
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	$19 = *($1 + [8])
	if ( ((int_64)$15 == (int_64)$19) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [9162])
	$19 = *($1 + [8])
	if ( ((int_64)$15 == (int_64)$19) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9824])
	
.LABEL $label$6
	$18 = (int_64)
	if ( ((int_64)$18($20 - $17)) <= (int_64)-4611686018427387904) ){ goto $label$21 }
	if ( ((int_64)$18 >= (int_64)4611686018427387904) ){ goto $label$20 }
	if ( ((int_64)$14 != (int_64)$19) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL eosio_assert([0], [9872])
	if ( ((int_64)$14 == (int_64)$19) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	CALL eosio_assert([0], [9894])
	if ( ((int_64)$14 == (int_64)$19) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [9824])
	$18 = (int_64)
	if ( ((int_64)$18($18 - $16)) > (int_64)-4611686018427387904) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$18 = (int_64)
	if ( ((int_64)$18($18 - $16)) <= (int_64)-4611686018427387904) ){ goto $label$16 }
	
.LABEL $label$17
	if ( ((int_64)$18 < (int_64)4611686018427387904) ){ goto $label$15 }
	CALL eosio_assert([0], [9894])
	if ( ((int_64)*($3 + [136]) != (int_64)$19) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	CALL eosio_assert([0], [9872])
	
.LABEL $label$15
	if ( ((int_64)*($3 + [136]) == (int_64)$19) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert([0], [9824])
	
.LABEL $label$13
	$18 = (int_64)
	if ( ((int_64)$18($18 - *($3 + [128]))) <= (int_64)-4611686018427387904) ){ goto $label$30 }
	if ( ((int_64)$18 >= (int_64)4611686018427387904) ){ goto $label$29 }
	if ( ((int_64)$19 != (int_64)1397703940) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	CALL eosio_assert([0], [9872])
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	CALL eosio_assert([0], [9894])
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$27 }
	
.LABEL $label$28
	CALL eosio_assert([0], [9824])
	$18 = (int_64)
	if ( ((int_64)$18($18 - $21)) > (int_64)-4611686018427387904) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$18 = (int_64)
	if ( ((int_64)$18($18 - $21)) <= (int_64)-4611686018427387904) ){ goto $label$25 }
	
.LABEL $label$26
	if ( ((int_64)$18 < (int_64)4611686018427387904) ){ goto $label$24 }
	CALL eosio_assert([0], [9894])
	if ( ((int_64)*($3 + [120]) != (int_64)$19) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	CALL eosio_assert([0], [9872])
	
.LABEL $label$24
	if ( ((int_64)*($3 + [120]) == (int_64)$19) ){ goto $label$22 }
	
.LABEL $label$23
	CALL eosio_assert([0], [9824])
	
.LABEL $label$22
	$20 = (int_64)
	if ( ((int_64)$20($18 - *($3 + [112]))) <= (int_64)-4611686018427387904) ){ goto $label$39 }
	if ( ((int_64)$20 >= (int_64)4611686018427387904) ){ goto $label$38 }
	if ( ((int_64)$19 != (int_64)1397703940) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL eosio_assert([0], [9872])
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	CALL eosio_assert([0], [9894])
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$36 }
	
.LABEL $label$37
	CALL eosio_assert([0], [9824])
	if ( ((int_64)$20 > (int_64)-4611686018427387894) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	if ( ((int_64)$20 <= (int_64)-4611686018427387894) ){ goto $label$34 }
	
.LABEL $label$35
	if ( ((int_64)$20 >= (int_64)4611686018427387914) ){ goto $label$32 }
	if ( ((int_64)$20 <= (int_64)9) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	CALL eosio_assert([0], [9872])
	
.LABEL $label$33
	CALL eosio_assert([0], [9751])
	goto $label$31 
	
.LABEL $label$32
	CALL eosio_assert([0], [9894])
	
.LABEL $label$31
	*(($5 = ($3 + [24]))) = [0]
	*($3) = (int_64)6138663577826885632
	*($3 + [8]) = (int_64)-7297973096368160768
	*($3 + [16]) = (int_64)0
	$18 = *($0)
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [20])) = $12
	*($3 + [16]) = $4
	CALL $60(($3 + [28]), ($3 + [144]))
	CALL $61($3)
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$40 }
	*(($3 + [32])) = $4
	CALL $16($4)
	
.LABEL $label$40
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$41 }
	*(($3 + [20])) = $4
	CALL $16($4)
	
.LABEL $label$41
	$18 = *($0)
	*(($5 = ($3 + [24]))) = [0]
	*((($3 + [72]) + [24])) = *(($3 + [136]))
	*($3 + [72]) = $18
	*($3) = (int_64)6138663577826885632
	*($3 + [8]) = (int_64)4520896354024685568
	*($3 + [16]) = (int_64)0
	*($3 + [80]) = *($2)
	*($3 + [88]) = *($3 + [128])
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	*(($3 + [36])) = [0]
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [20])) = $12
	*($3 + [16]) = $4
	*($3 + [28 align=4]) = (int_64)0
	CALL $62(($3 + [28]), [32])
	$12 = ($3 + [32])
	$4 = *($12)
	$5 = *($3 + [28])
	*($3 + [404]) = $5
	*($3 + [400]) = $5
	*($3 + [408]) = $4
	*($3 + [424]) = ($3 + [400])
	*($3 + [56]) = ($3 + [72])
	CALL $63(($3 + [56]), ($3 + [424]))
	CALL $61($3)
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$42 }
	*($12) = $4
	CALL $16($4)
	
.LABEL $label$42
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$43 }
	*(($3 + [20])) = $4
	CALL $16($4)
	
.LABEL $label$43
	$18 = *($0)
	*(($5 = ($3 + [24]))) = [0]
	*((($3 + [72]) + [24])) = *(($3 + [120]))
	*($3 + [80]) = $18
	*($3 + [72]) = $18
	*($3) = (int_64)6138663577826885632
	*($3 + [8]) = (int_64)4520896354024685568
	*($3 + [16]) = (int_64)0
	*($3 + [88]) = *($3 + [112])
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	*(($3 + [36])) = [0]
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [20])) = $12
	*($3 + [16]) = $4
	*($3 + [28 align=4]) = (int_64)0
	CALL $62(($3 + [28]), [32])
	$12 = ($3 + [32])
	$4 = *($12)
	$5 = *($3 + [28])
	*($3 + [404]) = $5
	*($3 + [400]) = $5
	*($3 + [408]) = $4
	*($3 + [424]) = ($3 + [400])
	*($3 + [56]) = ($3 + [72])
	CALL $63(($3 + [56]), ($3 + [424]))
	CALL $61($3)
	$4 = *($3 + [28])
	if ( ($4 == 0) ){ goto $label$44 }
	*($12) = $4
	CALL $16($4)
	
.LABEL $label$44
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$45 }
	*(($3 + [20])) = $4
	CALL $16($4)
	
.LABEL $label$45
	$18 = *($0)
	*(($3 + [64])) = [0]
	*($3 + [56]) = (int_64)0
	$4 = CALL $2([9768])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$50 }
	*($3 + [56]) = ($4 << [1])
	$5 = (($3 + [56]) | [1])
	if ( $4 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$12 = (($4 + [16]) & [-16])
	$5 = CALL $14($12)
	*($3 + [56]) = ($12 | [1])
	*($3 + [64]) = $5
	*($3 + [60]) = $4
	
.LABEL $label$49
	CALL memcpy($5, [9768], $4)
	
.LABEL $label$48
	$22 = ((int_64)$20 + (int_64)-10)
	*(($5 + $4)) = [0]
	*(($3 + [24])) = (int_64)1397703940
	*(($5 = (($3 + [72]) + [24]))) = [0]
	$4 = ($3 + [64])
	*(($3 + [40])) = *($4)
	*($4) = [0]
	*($3 + [8]) = (int_64)-4498943837835979392
	*($3 + [16]) = $21
	*($3 + [72]) = (int_64)6138663591592764928
	*($3 + [80]) = (int_64)-3617168760277827584
	*($3 + [88]) = (int_64)0
	*($3) = *($0)
	*($3 + [32]) = *($3 + [56])
	*($3 + [56]) = (int_64)0
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	*((($3 + [72]) + [36])) = [0]
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [92])) = $12
	*($3 + [88]) = $4
	*($3 + [100 align=4]) = (int_64)0
	$4 = *($3 + [32])
	$5 = ( *(($3 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$18 = (CASTING uint_64)(uint_32 $5)
	$5 = ($3 + [100])
	
.LOOP $label$51:
	$4 = ($4 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$51 }
	if ( ($4 == 0) ){ goto $label$53 }
	CALL $62($5, $4)
	$5 = *(($3 + [104]))
	$4 = *(($3 + [100]))
	goto $label$52 
	
.LABEL $label$53
	$5 = [0]
	$4 = [0]
	
.LABEL $label$52
	*($3 + [404]) = $4
	*($3 + [400]) = $4
	*($3 + [408]) = $5
	*($3 + [416]) = ($3 + [400])
	*($3 + [424]) = $3
	CALL $64(($3 + [424]), ($3 + [416]))
	CALL $61(($3 + [72]))
	$4 = *($3 + [100])
	if ( ($4 == 0) ){ goto $label$54 }
	*(($3 + [104])) = $4
	CALL $16($4)
	
.LABEL $label$54
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$55 }
	*(($3 + [92])) = $4
	CALL $16($4)
	
.LABEL $label$55
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$56 }
	CALL $16(*(($3 + [40])))
	
.LABEL $label$56
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$57 }
	CALL $16(*(($3 + [64])))
	
.LABEL $label$57
	$18 = *($0)
	*(($3 + [24])) = $14
	*(($3 + [40])) = $15
	*(($5 = (($3 + [72]) + [24]))) = [0]
	*($3) = $18
	*($3 + [16]) = $16
	*($3 + [32]) = $17
	*($3 + [48]) = [1]
	*($3 + [72]) = (int_64)6138663577826885632
	*($3 + [80]) = (int_64)5378043540636893184
	*($3 + [88]) = (int_64)0
	*($3 + [8]) = *($2)
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	*(($3 + [108])) = [0]
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [92])) = $12
	*($3 + [88]) = $4
	*($3 + [100 align=4]) = (int_64)0
	CALL $62(($3 + [100]), [49])
	$12 = ($3 + [104])
	$4 = *($12)
	$5 = *($3 + [100])
	*($3 + [404]) = $5
	*($3 + [400]) = $5
	*($3 + [408]) = $4
	*($3 + [424]) = ($3 + [400])
	*($3 + [56]) = $3
	CALL $65(($3 + [56]), ($3 + [424]))
	CALL $61(($3 + [72]))
	$4 = *($3 + [100])
	if ( ($4 == 0) ){ goto $label$58 }
	*($12) = $4
	CALL $16($4)
	
.LABEL $label$58
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$59 }
	*(($3 + [92])) = $4
	CALL $16($4)
	
.LABEL $label$59
	if ( ((int_64)$20 < (int_64)11) ){ goto $label$60 }
	$18 = *($0)
	*(($3 + [64])) = [0]
	*($3 + [56]) = (int_64)0
	$4 = CALL $2([9789])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$63 }
	*($3 + [56]) = ($4 << [1])
	$5 = (($3 + [56]) | [1])
	if ( $4 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$12 = (($4 + [16]) & [-16])
	$5 = CALL $14($12)
	*($3 + [56]) = ($12 | [1])
	*($3 + [64]) = $5
	*($3 + [60]) = $4
	
.LABEL $label$62
	CALL memcpy($5, [9789], $4)
	
.LABEL $label$61
	*(($5 + $4)) = [0]
	*(($3 + [24])) = $19
	*(($5 = (($3 + [72]) + [24]))) = [0]
	$4 = ($3 + [64])
	*(($3 + [40])) = *($4)
	*($4) = [0]
	*($3 + [16]) = $22
	*($3 + [72]) = (int_64)6138663591592764928
	*($3 + [80]) = (int_64)-3617168760277827584
	*($3 + [88]) = (int_64)0
	*($3) = *($0)
	*($3 + [8]) = *($2)
	*($3 + [32]) = *($3 + [56])
	*($3 + [56]) = (int_64)0
	*(($4 = CALL $14([16]))) = $18
	*($4 + [8]) = (int_64)3617214756542218240
	*((($3 + [72]) + [36])) = [0]
	$12 = ($4 + [16])
	*($5) = $12
	*(($3 + [92])) = $12
	*($3 + [88]) = $4
	*($3 + [100 align=4]) = (int_64)0
	$4 = *($3 + [32])
	$5 = ( *(($3 + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$18 = (CASTING uint_64)(uint_32 $5)
	$5 = ($3 + [100])
	
.LOOP $label$64:
	$4 = ($4 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$64 }
	if ( ($4 == 0) ){ goto $label$66 }
	CALL $62($5, $4)
	$5 = *(($3 + [104]))
	$4 = *(($3 + [100]))
	goto $label$65 
	
.LABEL $label$66
	$5 = [0]
	$4 = [0]
	
.LABEL $label$65
	*($3 + [404]) = $4
	*($3 + [400]) = $4
	*($3 + [408]) = $5
	*($3 + [416]) = ($3 + [400])
	*($3 + [424]) = $3
	CALL $64(($3 + [424]), ($3 + [416]))
	CALL $61(($3 + [72]))
	$4 = *($3 + [100])
	if ( ($4 == 0) ){ goto $label$67 }
	*(($3 + [104])) = $4
	CALL $16($4)
	
.LABEL $label$67
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$68 }
	*(($3 + [92])) = $4
	CALL $16($4)
	
.LABEL $label$68
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$69 }
	CALL $16(*(($3 + [40])))
	
.LABEL $label$69
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$60 }
	CALL $16(*(($3 + [64])))
	
.LABEL $label$60
	$4 = *(($3 + [228]))
	if ( ($4 == 0) ){ goto $label$70 }
	*(($3 + [232])) = $4
	CALL $16($4)
	
.LABEL $label$70
	$4 = *(($3 + [216]))
	if ( ($4 == 0) ){ goto $label$71 }
	*(($3 + [220])) = $4
	CALL $16($4)
	
.LABEL $label$71
	$4 = *(($3 + [204]))
	if ( ($4 == 0) ){ goto $label$72 }
	*(($3 + [208])) = $4
	CALL $16($4)
	
.LABEL $label$72
	$4 = *(($3 + [188]))
	if ( ($4 == 0) ){ goto $label$73 }
	*(($3 + [192])) = $4
	CALL $16($4)
	
.LABEL $label$73
	$4 = *(($3 + [176]))
	if ( ($4 == 0) ){ goto $label$74 }
	*(($3 + [180])) = $4
	CALL $16($4)
	
.LABEL $label$74
	$4 = *(($3 + [164]))
	if ( ($4 == 0) ){ goto $label$75 }
	*(($3 + [168])) = $4
	CALL $16($4)
	
.LABEL $label$75
	$4 = *(($3 + [268]))
	if ( ($4 == 0) ){ goto $label$76 }
	*(($3 + [272])) = $4
	CALL $16($4)
	
.LABEL $label$76
	$4 = *(($3 + [256]))
	if ( ($4 == 0) ){ goto $label$77 }
	*(($3 + [260])) = $4
	CALL $16($4)
	
.LABEL $label$77
	$4 = *($3 + [244])
	if ( ($4 == 0) ){ goto $label$78 }
	*(($3 + [248])) = $4
	CALL $16($4)
	
.LABEL $label$78
	$4 = *(($3 + [308]))
	if ( ($4 == 0) ){ goto $label$79 }
	*(($3 + [312])) = $4
	CALL $16($4)
	
.LABEL $label$79
	$4 = *(($3 + [296]))
	if ( ($4 == 0) ){ goto $label$80 }
	*(($3 + [300])) = $4
	CALL $16($4)
	
.LABEL $label$80
	$4 = *($3 + [284])
	if ( ($4 == 0) ){ goto $label$81 }
	*(($3 + [288])) = $4
	CALL $16($4)
	
.LABEL $label$81
	$global$0 = ($3 + [432])
	return (unreachable)
	
.LABEL $label$47
	CALL $30(($3 + [56]))
	
.LABEL $label$46
	CALL $30(($3 + [56]))
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	CALL $20($0, $1)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $9($0)
	
.LABEL $label$1
}

int_64 .FUNC $23 ()
{
	int_64 $0
	if ( (*([0] + [8268]) == 0) ){ goto $label$1 }
	return *([0] + [8272])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8268]) = [1]
	*([0] + [8272]) = $0
	return $0
}

void .FUNC $22 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $24($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $27 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $25($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $70($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $14($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $33($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $33($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $30($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $16($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $68 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [288])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $8($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [228]) = $2
	*($3 + [224]) = $2
	*($3 + [232]) = ($2 + $4)
	*($3 + [216]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9269])
	$2 = *($3 + [228])
	
.LABEL $label$5
	CALL memcpy(($3 + [216]), $2, [8])
	$2 = (*($3 + [228]) + [8])
	*($3 + [228]) = $2
	*($3 + [208]) = (int_64)0
	$4 = (($3 + [224]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9269])
	$2 = *($3 + [228])
	
.LABEL $label$6
	CALL memcpy(($3 + [208]), $2, [8])
	$2 = (*($3 + [228]) + [8])
	*($3 + [228]) = $2
	*($3 + [200]) = (int_64)0
	*($3 + [192]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9269])
	$2 = *($3 + [228])
	
.LABEL $label$7
	CALL memcpy(($3 + [192]), $2, [8])
	$2 = (*($3 + [228]) + [8])
	*($3 + [228]) = $2
	*($3 + [64]) = (int_64)0
	$4 = (($3 + [224]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9269])
	$2 = *($3 + [228])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*((($3 + [192]) + [8])) = *($3 + [64])
	*($3 + [228]) = (*($3 + [228]) + [8])
	$2 = [0]
	*($3 + [184]) = [0]
	*($3 + [176]) = (int_64)0
	CALL $69(($3 + [224]), ($3 + [176]))
	*(($5 = (($3 + [48]) + [8]))) = *($4)
	*($3 + [48]) = *($3 + [224])
	$4 = *($5)
	*((($3 + [240]) + [8])) = $4
	*(($5 = (($3 + [256]) + [8]))) = $4
	$6 = *($3 + [48])
	*($3 + [256]) = $6
	*($3 + [240]) = $6
	$4 = *($5)
	*((($3 + [272]) + [8])) = $4
	*((($3 + [64]) + [24])) = $4
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [256])
	*($3 + [80]) = $0
	*($3 + [272]) = $0
	*(($3 + [104])) = (int_64)1397703940
	*($3 + [96]) = (int_64)1500
	*($3 + [92]) = [10800]
	$0 = (int_64)5459781
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$0 = $1
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$0 = $1
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$13 }
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [9162])
	
.LABEL $label$9
	*(($3 + [120])) = (int_64)1397703940
	*($3 + [112]) = (int_64)500
	$0 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$0 = $1
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$0 = $1
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$18 }
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [9162])
	
.LABEL $label$14
	$0 = *($3 + [64])
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($4 = ($3 + [160]))) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*($3 + [128]) = [3000]
	*($3 + [136]) = $0
	*(($5 = (($3 + [32]) + [8]))) = *((($3 + [192]) + [8]))
	*($3 + [32]) = *($3 + [192])
	$0 = *($3 + [208])
	$1 = *($3 + [216])
	$2 = CALL $31(($3 + [16]), ($3 + [176]))
	*(($3 + [8])) = *($5)
	*($3) = *($3 + [32])
	CALL $51(($3 + [64]), $1, $0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL $16(*($2 + [8]))
	
.LABEL $label$19
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$20 }
	$7 = ($3 + [164])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL $16($4)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($3 + [160]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $5
	
.LABEL $label$21
	*($7) = $5
	CALL $16($2)
	
.LABEL $label$20
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$25 }
	CALL $16(*(($3 + [184])))
	
.LABEL $label$25
	$global$0 = ($3 + [288])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [24]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9915])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9915])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = *(($4 + [40]))
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9915])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$1 = *($1)
	*($2 + [8]) = *($4 + [48])
	$4 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert([0], [9915])
	$4 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [8]), [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9915])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $89(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $8($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [120]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9269])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $2, [8])
	*(($3 + [28])) = ($2 + [8])
	*((($3 + [8]) + [24])) = $5
	*(($3 + [48])) = (int_64)1397703940
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	*($3 + [36]) = [10800]
	*($3 + [40]) = (int_64)1500
	$0 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$0 = $1
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$0 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [9162])
	
.LABEL $label$6
	*(($3 + [64])) = (int_64)1397703940
	*($3 + [56]) = (int_64)500
	$0 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$0 = $1
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $1
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [9162])
	
.LABEL $label$11
	$0 = *($3 + [8])
	*(($3 + [88])) = $0
	*(($3 + [96])) = (int_64)-1
	*(($2 = ($3 + [104]))) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*($3 + [72]) = [3000]
	*($3 + [80]) = $0
	CALL $42(($3 + [8]))
	$5 = *($2)
	if ( ($5 == 0) ){ goto $label$16 }
	$6 = ($3 + [108])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL $16($4)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [104]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($6) = $5
	CALL $16($2)
	
.LABEL $label$16
	$global$0 = ($3 + [128])
}

void .FUNC $66 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [496])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$5 = CALL $8($4)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $4)
	
.LABEL $label$1
	*($3 + [488]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9269])
	
.LABEL $label$5
	CALL memcpy(($3 + [488]), $5, [8])
	*(($3 + [472])) = (int_64)0
	$2 = [16]
	*((($3 + [448]) + [16])) = (int_64)0
	*($3 + [456]) = (int_64)0
	*($3 + [448]) = (int_64)0
	$6 = ($5 + [8])
	if ( ((uint_32)($4 + [-8]) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [9269])
	
.LABEL $label$6
	$7 = ($5 + $4)
	CALL memcpy(($3 + [248]), $6, [32])
	$8 = (int_64)0
	$6 = ($3 + [400])
	$4 = [0]
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (($3 + [248]) + $4)
	if ( ($2 <= [2]) ){ goto $label$9 }
	$8 = ((int_64)$8 | (int_64)*($10))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$8 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$8 = ((int_64)$8 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$10 }
	CALL eosio_assert([0], [10178])
	
.LABEL $label$10
	*($6 + [8]) = $9
	*($6) = ((int_64)$8 | (int_64)*($10))
	$2 = [16]
	$6 = ($6 + [16])
	$8 = (int_64)0
	$9 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$11 }
	if ( ($2 <= [2]) ){ goto $label$12 }
	CALL __ashlti3(($3 + [112]), $8, $9, (($2 << [3]) + [-8]))
	$9 = *(($3 + [120]))
	$8 = *($3 + [112])
	
.LABEL $label$12
	*($6) = $8
	*($6 + [8]) = $9
	
.LABEL $label$11
	$2 = ($5 + [40])
	*((($3 + [448]) + [24])) = *((($3 + [400]) + [24]))
	*((($3 + [448]) + [16])) = *((($3 + [400]) + [16]))
	*($3 + [456]) = *($3 + [408])
	*($3 + [448]) = *($3 + [400])
	*($3 + [400]) = [0]
	$8 = (int_64)0
	$4 = [0]
	
.LOOP $label$13:
	if ( ($2 <= $7) ){ goto $label$14 }
	CALL eosio_assert([0], [10222])
	
.LABEL $label$14
	$4 = ($4 & [255])
	$6 = *($2)
	$8 = ((int_64)$8 | (int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $4)))
	$2 = ($2 + [1])
	$4 = ($4 + [7])
	if ( ($6 & [128]) ){ goto $label$13 }
	*($3 + [400]) = $8
	$4 = (($3 + [400]) | [4])
	if ( ((uint_32)($7 - $2) > (uint_32)[32]) ){ goto $label$15 }
	CALL eosio_assert([0], [9269])
	
.LABEL $label$15
	CALL memcpy($4, $2, [33])
	*($3 + [360]) = [0]
	$2 = ($2 + [33])
	$8 = (int_64)0
	$4 = [0]
	
.LOOP $label$16:
	if ( ($2 <= $7) ){ goto $label$17 }
	CALL eosio_assert([0], [10222])
	
.LABEL $label$17
	$4 = ($4 & [255])
	$6 = *($2)
	$8 = ((int_64)$8 | (int_64)(CASTING uint_64)(uint_32 (($6 & [127]) << $4)))
	$2 = ($2 + [1])
	$4 = ($4 + [7])
	if ( ($6 & [128]) ){ goto $label$16 }
	*($3 + [360]) = $8
	$4 = (($3 + [360]) | [4])
	if ( ((uint_32)($7 - $2) > (uint_32)[32]) ){ goto $label$18 }
	CALL eosio_assert([0], [9269])
	
.LABEL $label$18
	CALL memcpy($4, $2, [33])
	*(($3 + [268])) = ($2 + [33])
	*((($3 + [248]) + [24])) = $7
	*(($3 + [288])) = (int_64)1397703940
	*($3 + [256]) = $1
	*($3 + [248]) = $0
	*($3 + [264]) = $5
	*($3 + [276]) = [10800]
	*($3 + [280]) = (int_64)1500
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$8 = $9
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$8 = $9
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$23 }
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	CALL eosio_assert([0], [9162])
	
.LABEL $label$19
	*(($3 + [304])) = (int_64)1397703940
	*($3 + [296]) = (int_64)500
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$8 = $9
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$8 = $9
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$28 }
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert([0], [9162])
	
.LABEL $label$24
	$8 = *($3 + [248])
	*(($3 + [328])) = $8
	*(($3 + [336])) = (int_64)-1
	*(($2 = ($3 + [344]))) = (int_64)0
	*(($3 + [352])) = [0]
	*(($3 + [356])) = [0]
	*(($4 = (($3 + [208]) + [16]))) = *((($3 + [448]) + [16]))
	*(($7 = (($3 + [208]) + [24]))) = *((($3 + [448]) + [24]))
	*(($6 = (($3 + [168]) + [32]))) = *((($3 + [400]) + [32]))
	*(($10 = (($3 + [168]) + [24]))) = *((($3 + [400]) + [24]))
	*(($5 = (($3 + [168]) + [16]))) = *((($3 + [400]) + [16]))
	*(($11 = (($3 + [168]) + [8]))) = *((($3 + [400]) + [8]))
	*($3 + [312]) = [3000]
	*($3 + [320]) = $8
	*($3 + [208]) = *($3 + [448])
	*($3 + [216]) = *($3 + [456])
	*($3 + [168]) = *($3 + [400])
	$8 = *($3 + [488])
	*(($12 = (($3 + [128]) + [32]))) = *((($3 + [360]) + [32]))
	*(($13 = (($3 + [128]) + [24]))) = *((($3 + [360]) + [24]))
	*(($14 = (($3 + [128]) + [16]))) = *((($3 + [360]) + [16]))
	*(($15 = (($3 + [128]) + [8]))) = *((($3 + [360]) + [8]))
	*((($3 + [80]) + [16])) = *($4)
	*((($3 + [80]) + [24])) = *($7)
	*($3 + [128]) = *($3 + [360])
	*($3 + [80]) = *($3 + [208])
	*($3 + [88]) = *($3 + [216])
	*((($3 + [40]) + [32])) = *($6)
	*((($3 + [40]) + [24])) = *($10)
	*((($3 + [40]) + [16])) = *($5)
	*((($3 + [40]) + [8])) = *($11)
	*(($3 + [32])) = *($12)
	*(($3 + [24])) = *($13)
	*(($3 + [16])) = *($14)
	*(($3 + [8])) = *($15)
	*($3 + [40]) = *($3 + [168])
	*($3) = *($3 + [128])
	CALL $41(($3 + [248]), $8, ($3 + [80]), ($3 + [40]), $3)
	$7 = *($2)
	if ( ($7 == 0) ){ goto $label$29 }
	$6 = ($3 + [348])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL $16($4)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($3 + [344]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $7
	
.LABEL $label$30
	*($6) = $7
	CALL $16($2)
	
.LABEL $label$29
	$global$0 = ($3 + [496])
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $62($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $76(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $16($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [16]
	*($2 + [8]) = ($2 + [24])
	*($2 + [36]) = ($1 + [20])
	$4 = ($1 + [16])
	*($2 + [32]) = $4
	*($2 + [40]) = ($1 + [32])
	*($2 + [44]) = ($1 + [44])
	CALL $80(($2 + [32]), ($2 + [8]))
	*($2 + [8]) = ($2 + [24])
	*($2 + [36]) = ($1 + [60])
	$5 = ($1 + [56])
	*($2 + [32]) = $5
	*($2 + [40]) = ($1 + [72])
	*($2 + [44]) = ($1 + [84])
	CALL $80(($2 + [32]), ($2 + [8]))
	$6 = *($2 + [24])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $62($0, $6)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [12]) = $0
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [40]) = $4
	*($2 + [44]) = $5
	*($2 + [32]) = $1
	*($2 + [36]) = ($1 + [8])
	CALL $81(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $0, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9915])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [8]), [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $14($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $22($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $16($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9915])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	$5 = (*($4) + [8])
	*(($4 = ($3 + [4]))) = $5
	$2 = ($2 + [8])
	if ( ((int_32)(*(($3 + [8])) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$5 = *($4)
	
.LABEL $label$2
	CALL memcpy($5, $2, [8])
	*($4) = (*($4) + [8])
	$5 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $5, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($1)
	$1 = *($5 + [4])
	$6 = ($5 + [8])
	$7 = ($5 + [4])
	
.LOOP $label$1:
	$8 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$9 = ((int_64)$4) != (int_64)0
	*($3 + [15]) = (($9) << [7]) | ($8 & [127]))
	if ( ((int_32)(*($6) - $1) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$1 = *($7)
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	$1 = (*($7) + [1])
	*($7) = $1
	if ( $9 ){ goto $label$1 }
	$7 = ($0 + [4])
	if ( ((int_32)(*(($5 + [8])) - $1) > (int_32)[32]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$1 = *(($5 + [4]))
	
.LABEL $label$3
	CALL memcpy($1, $7, [33])
	*(($1 = ($5 + [4]))) = (*($1) + [33])
	$global$0 = ($3 + [16])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($8) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	if ( ((int_32)(*($8) - $4) > (int_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [4]), [2])
	$4 = (*($6) + [2])
	*($6) = $4
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [31]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [31]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2 + [8]) = $0
	*($2 + [16]) = $4
	*($2 + [20]) = ($4 + [16])
	CALL $86(($2 + [16]), ($2 + [8]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[44]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2 + [8]) = $0
	CALL $85($4, ($2 + [8]), [1])
	$7 = *($6 + [4])
	$6 = *($2 + [8])
	if ( ((int_32)(*($6 + [8]) - $7) > (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [9915])
	$7 = *(($6 + [4]))
	
.LABEL $label$5
	CALL memcpy($7, ($4 + [40]), [2])
	*(($6 = ($6 + [4]))) = (*($6) + [2])
	$4 = ($4 + [44])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0 + [8])
	$5 = ($4 + [28])
	$6 = ($4 + [16])
	$7 = ($4 + [4])
	$2 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $2) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9915])
	$2 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($4 = ($3 + [4]))) = (*($4) + [4])
	CALL $82($3, $7)
	CALL $83($3, $6)
	CALL $84($3, $5)
	$0 = *($0 + [12])
	$4 = ($0 + [28])
	$2 = ($0 + [16])
	$5 = ($0 + [4])
	$1 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $1) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [9915])
	$1 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $0, [4])
	*(($0 = ($3 + [4]))) = (*($0) + [4])
	CALL $82($3, $5)
	CALL $83($3, $2)
	CALL $84($3, $4)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [4])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [4])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[44]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$1 = ($1 + [35])
	$5 = *($3)
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	$3 = ($3 + [44])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	*($2) = $1
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$1 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $1) + [18])
	
.LABEL $label$6
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$0 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($0 >> [3]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ((((int_32)uint_32(($0 + [-8]) >> [3]) * (int_32)[6]) + $1) + [6])
	
.LABEL $label$8
	*($2) = $1
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9269])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9269])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $73(*($0 + [8]), $1, [1])
	$5 = *($0 + [12])
	$6 = *($1)
	$3 = *($6 + [4])
	$7 = (int_64)0
	$8 = ($6 + [8])
	$9 = [0]
	
.LOOP $label$3:
	if ( ($3 <= *($8)) ){ goto $label$4 }
	CALL eosio_assert([0], [10222])
	$3 = *(($6 + [4]))
	
.LABEL $label$4
	$4 = *($3)
	$2 = ($3 + [1])
	*(($6 + [4])) = $2
	$3 = ($9 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $3)))
	$9 = ($3 + [7])
	$3 = $2
	if ( ($4 & [128]) ){ goto $label$3 }
	*($5) = $7
	$3 = ($5 + [4])
	if ( ((uint_32)(*(($6 + [8])) - $2) > (uint_32)[32]) ){ goto $label$5 }
	CALL eosio_assert([0], [9269])
	$2 = *(($6 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $2, [33])
	*(($3 = ($6 + [4]))) = (*($3) + [33])
	$0 = *($0 + [16])
	$6 = *($1)
	$3 = *($6 + [4])
	$7 = (int_64)0
	$8 = ($6 + [8])
	$9 = [0]
	
.LOOP $label$6:
	if ( ($3 <= *($8)) ){ goto $label$7 }
	CALL eosio_assert([0], [10222])
	$3 = *(($6 + [4]))
	
.LABEL $label$7
	$4 = *($3)
	$2 = ($3 + [1])
	*(($6 + [4])) = $2
	$3 = ($9 & [255])
	$7 = ((int_64)$7 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $3)))
	$9 = ($3 + [7])
	$3 = $2
	if ( ($4 & [128]) ){ goto $label$6 }
	*($0) = $7
	$3 = ($0 + [4])
	if ( ((uint_32)(*(($6 + [8])) - $2) > (uint_32)[32]) ){ goto $label$8 }
	CALL eosio_assert([0], [9269])
	$2 = *(($6 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $2, [33])
	*(($3 = ($6 + [4]))) = (*($3) + [33])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [9269])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [10178])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10222])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $62($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9269])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [136])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	$6 = CALL db_idx256_find_primary(*($6), *($6 + [8]), (int_64)-6497942746098040832, $3, [2], *($5))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx256_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [140]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040831, $3, *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $88(CALL $87($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9915])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9915])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9269])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9269])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	*($3) = (*($3) + [8])
	$0 = CALL $79(CALL $79($0, ($1 + [16])), ($1 + [40]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $14(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $22($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL $16(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $16($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	if ( ((int_64)*($3 + [8]) == (int_64)*($1 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [8994])
	
.LABEL $label$1
	$4 = *($2)
	$5 = *($3)
	$6 = CALL $7(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$5 = (Rounds 0)($6)
	
.LABEL $label$2
	*($0) = $5
	*($2) = (int_64))(*($2) - $5)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$4 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$4
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $4
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = $4
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $1 ){ goto $label$9 }
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$7
	return 
	
.LABEL $label$5
	CALL eosio_assert([0], [9162])
}

int_64 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($1 + [4])
	if ( ($3 <= [3]) ){ goto $label$3 }
	$1 = *($1)
	if ( ((int_32)CALL $2([8615]) != (int_32)[3]) ){ goto $label$4 }
	if ( (CALL $3($1, [8615], [3]) == 0) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ($3 <= [7]) ){ goto $label$3 }
	if ( ((int_32)CALL $2([8955]) != (int_32)[7]) ){ goto $label$3 }
	if ( (CALL $3($1, [8955], [7]) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8963])
	*(($0 + [36])) = [0]
	*(($0 + [28])) = (int_64)0
	*(($0 + [20])) = (int_64)0
	*(($0 + [12])) = (int_64)0
	*($0 + [4 align=4]) = (int_64)0
	*($0) = [0]
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$2
	*($2 + [28]) = ($3 + [-3])
	*($2 + [24]) = ($1 + [3])
	*($2 + [8]) = *($2 + [24])
	CALL $38(($2 + [40]), ($2 + [8]))
	*(($0 + [36])) = [0]
	*(($0 + [28])) = (int_64)0
	*(($0 + [20])) = (int_64)0
	*(($0 + [12])) = (int_64)0
	*($0 + [4 align=4]) = (int_64)0
	*($0) = [0]
	CALL memcpy(($0 + [4]), ($2 + [40]), [33])
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	*($2 + [36]) = ($3 + [-7])
	*($2 + [32]) = ($1 + [7])
	*($2 + [16]) = *($2 + [32])
	CALL $38(($2 + [40]), ($2 + [16]))
	*(($0 + [36])) = [0]
	*(($0 + [28])) = (int_64)0
	*(($0 + [20])) = (int_64)0
	*(($0 + [12])) = (int_64)0
	*($0 + [4 align=4]) = (int_64)0
	*($0) = [1]
	CALL memcpy(($0 + [4]), ($2 + [40]), [33])
	$global$0 = ($2 + [80])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $14(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $22($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $16($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $16($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9269])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9269])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9269])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $14($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $14(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $16($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $30 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $14($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}