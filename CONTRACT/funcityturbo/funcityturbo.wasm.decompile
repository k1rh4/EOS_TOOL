(data (i32.const 8192) "funcitytoken\00")
(data (i32.const 8205) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8300) "startgame\00")
(data (i32.const 8310) "bidresult\00")
(data (i32.const 8320) "Transfer for pool\00")
(data (i32.const 8338) "the game is not run\00")
(data (i32.const 8358) "the game is ended\00")
(data (i32.const 8376) "cannot repeat bid\00")
(data (i32.const 8394) "The current price has already been bid, try again.\00")
(data (i32.const 8445) "please wait.\00")
(data (i32.const 8458) "burn CITY -- funcity.one\00")
(data (i32.const 8483) "to last user -- funcity.one\00")
(data (i32.const 8511) "funcity1main\00")
(data (i32.const 8524) "The game is not run\00")
(data (i32.const 8544) "eosio.token\00")
(data (i32.const 8556) "turbo pool -- funcity.one\00")
(data (i32.const 8582) "game is not over\00")
(data (i32.const 8599) "only CITY token allowed\00")
(data (i32.const 8623) "quantity invalid\00")
(data (i32.const 8640) "transfer quantity must be greater than zero\00")
(data (i32.const 8684) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8735) "error reading iterator\00")
(data (i32.const 8758) "read\00")
(data (i32.const 8763) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8822) "divide by zero\00")
(data (i32.const 8837) "signed division overflow\00")
(data (i32.const 8862) "multiplication overflow\00")
(data (i32.const 8886) "multiplication underflow\00")
(data (i32.const 8911) "write\00")
(data (i32.const 8917) "attempt to subtract asset with different symbol\00")
(data (i32.const 8965) "subtraction underflow\00")
(data (i32.const 8987) "subtraction overflow\00")
(data (i32.const 9008) "cannot pass end iterator to modify\00")
(data (i32.const 9043) "object passed to modify is not in multi_index\00")
(data (i32.const 9089) "cannot modify objects in table of another contract\00")
(data (i32.const 9140) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9199) "cannot create objects in table of another contract\00")
(data (i32.const 9250) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9299) "invalid symbol name\00")
(data (i32.const 9319) "get\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $47))
(export "_Znwj" (func $45))
(export "_Znaj" (func $46))
(export "_ZdaPv" (func $48))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17732))
(global $global$2 i32 (i32.const 17732))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8735])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8758])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8758])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $53($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9199])
	$5 = CALL _Znwj([136])
	CALL $30($5)
	*($5 + [120]) = $1
	$5 = CALL memcpy($5, *($3), [120])
	*($4 + [128]) = ($4 + [120])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($5 + [8])
	*($4 + [144]) = $5
	*($4 + [152]) = ($5 + [16])
	*($4 + [156]) = ($5 + [32])
	*($4 + [160]) = ($5 + [48])
	*($4 + [164]) = ($5 + [56])
	*($4 + [168]) = ($5 + [64])
	*($4 + [172]) = ($5 + [72])
	*($4 + [176]) = ($5 + [80])
	*($4 + [180]) = ($5 + [88])
	*($4 + [184]) = ($5 + [104])
	CALL $28(($4 + [144]), ($4 + [136]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7035936339212107776, $2, (int_64)7035936339212107776, $4, [120])
	*($5 + [124]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7035936339212107776) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7035936339212107777
	
.LABEL $label$1
	*($4 + [144]) = $5
	*($4) = (int_64)7035936339212107776
	*($4 + [120]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7035936339212107776
	*($3 + [16]) = $6
	*($4 + [144]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($4 + [144]), $4, ($4 + [120]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [192])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [8911])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8911])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8911])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $53($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8911])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8911])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $37(CALL $36($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_64 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = ($0 + [48])
	$3 = *(($0 + [76]))
	if ( ((int_32)$3 == (int_32)*(($0 + [72]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [8684])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [56])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $33($2, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [8684])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($3) + (int_64)1)
	CALL $34($2, ($1 + [8]), *($0))
	$4 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $4
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$0), [8684])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035936339212107776, (int_64)7035936339212107776)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $32($0, $4)
	CALL eosio_assert(((int_32)*($4 + [120]) == (int_32)$0), [8684])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9008])
	CALL $38($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $39($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9250])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9299])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8758])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [8758])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8911])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $44($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $51($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $51($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $49($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $53($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [9199])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [8911])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $42(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9089])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9140])
	CALL eosio_assert([1], [8911])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $60($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $57($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9324])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $57($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9319])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $20($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8758])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17720])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17528]
	$3 = (((int_32)$1 * (int_32)[12]) + [17528])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$1 = ($global$0 - [384])
	$global$0 = $1
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [8511]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($5)
	CALL $17(($1 + [128]), $0)
	CALL eosio_assert(((int_64)*($1 + [184]) == (int_64)1), [8582])
	*($1 + [128]) = ((int_64)*($1 + [128]) + (int_64)1)
	$2 = (int_64)2
	
.LOOP $label$5:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$5 }
	*($1 + [136]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$2 = (int_64)1498696003
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9299])
	*((($1 + [128]) + [24])) = (int_64)383666176772
	*($1 + [144]) = (int_64)100000
	CALL eosio_assert([1], [9250])
	$2 = (int_64)1498696003
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9299])
	*(($1 + [168])) = (int_64)383666176772
	*($1 + [160]) = (int_64)100000
	$2 = CALL current_time()
	*(($1 + [184])) = (int_64)0
	*($1 + [192]) = (int_64)0
	*($1 + [176]) = ((int_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) + (int_64)300) & (int_64)4294967295)
	*($1 + [200]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9250])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [9299])
	*(($1 + [224])) = (int_64)1397703940
	*($1 + [216]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$2 = (int_64)1498696003
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$25 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [9299])
	*(($1 + [240])) = (int_64)383666176772
	*($1 + [232]) = (int_64)0
	CALL memcpy(($1 + [8]), ($1 + [128]), [120])
	CALL memcpy(($1 + [264]), ($1 + [8]), [120])
	CALL $24(($0 + [8]), ($1 + [264]), *($0))
	$9 = *($0)
	$2 = (int_64)6
	
.LOOP $label$26:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$26 }
	$2 = (int_64)0
	$6 = (int_64)59
	$4 = [8300]
	$5 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$2 > (uint_64)(int_64)8) ){ goto $label$32 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$7 = ($7 + [-91])
	goto $label$30 
	
.LABEL $label$32
	$3 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$3 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$27 }
	*($1 + [264]) = $9
	*($1 + [272]) = $5
	*($1) = *($1 + [128])
	*(($4 = CALL _Znwj([16]))) = $9
	*($4 + [8]) = (int_64)3617214756542218240
	*(($1 + [300])) = [0]
	$7 = ($4 + [16])
	*(($1 + [288])) = $7
	*(($1 + [284])) = $7
	*($1 + [280]) = $4
	*($1 + [292 align=4]) = (int_64)0
	CALL $20(($1 + [292]), [8])
	$4 = *($1 + [292])
	CALL eosio_assert(((int_32)(*(($1 + [296])) - $4) > (int_32)[7]), [8911])
	CALL memcpy($4, $1, [8])
	CALL $22(($1 + [248]), ($1 + [264]))
	$4 = *($1 + [248])
	CALL send_inline($4, (*($1 + [252]) - $4))
	$4 = *($1 + [248])
	if ( ($4 == 0) ){ goto $label$33 }
	*($1 + [252]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$33
	$4 = *($1 + [292])
	if ( ($4 == 0) ){ goto $label$34 }
	*(($1 + [296])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$34
	$4 = *($1 + [280])
	if ( ($4 == 0) ){ goto $label$35 }
	*(($1 + [284])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$35
	$global$0 = ($1 + [384])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $57($5)
	CALL read_action_data($2, $5)
	CALL $60($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $57($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8758])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $60($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [480])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8511]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $17(($2 + [160]), $0)
	CALL eosio_assert((int_64)(*($2 + [216]) == 0), [8524])
	if ( ((int_64)*($1) < (int_64)1) ){ goto $label$6 }
	$3 = (int_64)2
	
.LOOP $label$7:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$7 }
	if ( (int_64)(*($2 + [168]) == 0) ){ goto $label$6 }
	$9 = *($0)
	$3 = (int_64)6
	
.LOOP $label$8:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$8 }
	$3 = (int_64)0
	$7 = (int_64)59
	$5 = [8544]
	$6 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$14 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$4 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$6 = ((int_64)$4 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$9 }
	$3 = (int_64)0
	$7 = (int_64)59
	$5 = [8205]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$20 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$8 = ($8 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$10 = ((int_64)$4 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$15 }
	*(($2 + [416])) = [0]
	*($2 + [408]) = (int_64)0
	$5 = CALL $56([8556])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$23 }
	*($2 + [408]) = ($5 << [1])
	$8 = (($2 + [408]) | [1])
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$11 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($2 + [408]) = ($11 | [1])
	*($2 + [416]) = $8
	*($2 + [412]) = $5
	
.LABEL $label$22
	CALL memcpy($8, [8556], $5)
	
.LABEL $label$21
	*(($8 + $5)) = [0]
	*(($8 = (($2 + [432]) + [24]))) = [0]
	*((($2 + [280]) + [24])) = *(($1 + [8]))
	$5 = (($2 + [408]) + [8])
	*(($2 + [320])) = *($5)
	*($5) = [0]
	*($2 + [432]) = $6
	*($2 + [440]) = $10
	*($2 + [448]) = (int_64)0
	*($2 + [280]) = *($0)
	*($2 + [288]) = *((($2 + [160]) + [8]))
	*($2 + [296]) = *($1)
	*($2 + [312]) = *($2 + [408])
	*($2 + [408]) = (int_64)0
	*(($5 = CALL _Znwj([16]))) = $9
	*($5 + [8]) = (int_64)3617214756542218240
	*((($2 + [432]) + [36])) = [0]
	$1 = ($5 + [16])
	*($8) = $1
	*(($2 + [452])) = $1
	*($2 + [448]) = $5
	*($2 + [460 align=4]) = (int_64)0
	$5 = *($2 + [312])
	$8 = ( *((($2 + [280]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($8 + [32])
	$3 = (CASTING uint_64)(uint_32 $8)
	$8 = ($2 + [460])
	
.LOOP $label$24:
	$5 = ($5 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$24 }
	if ( ($5 == 0) ){ goto $label$26 }
	CALL $20($8, $5)
	$8 = *(($2 + [464]))
	$5 = *(($2 + [460]))
	goto $label$25 
	
.LABEL $label$26
	$8 = [0]
	$5 = [0]
	
.LABEL $label$25
	*($2 + [124]) = $5
	*($2 + [120]) = $5
	*($2 + [128]) = $8
	*($2 + [400]) = ($2 + [120])
	*($2 + [424]) = ($2 + [280])
	CALL $23(($2 + [424]), ($2 + [400]))
	CALL $22(($2 + [120]), ($2 + [432]))
	$5 = *($2 + [120])
	CALL send_inline($5, (*($2 + [124]) - $5))
	$5 = *($2 + [120])
	if ( ($5 == 0) ){ goto $label$27 }
	*($2 + [124]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$5 = *($2 + [460])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($2 + [464])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$28
	$5 = *($2 + [448])
	if ( ($5 == 0) ){ goto $label$29 }
	*(($2 + [452])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((*(($2 + [312])) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [320])))
	
.LABEL $label$30
	if ( ((*($2 + [408]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [416])))
	
.LABEL $label$6
	*(($2 + [216])) = (int_64)1
	*($2 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$31:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$31 }
	$3 = (int_64)7
	
.LOOP $label$32:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$32 }
	CALL memcpy(($2 + [280]), ($2 + [160]), [120])
	*($2 + [128]) = (int_64)6112162363668955136
	*($2 + [120]) = $4
	*(($5 = CALL _Znwj([16]))) = $4
	*($5 + [8]) = (int_64)3617214756542218240
	*(($2 + [156])) = [0]
	$8 = ($5 + [16])
	*(($2 + [144])) = $8
	*(($2 + [140])) = $8
	*($2 + [136]) = $5
	*($2 + [148 align=4]) = (int_64)0
	CALL $20(($2 + [148]), [120])
	$5 = *((($2 + [120]) + [32]))
	$8 = *($2 + [148])
	*($2 + [412]) = $8
	*($2 + [408]) = $8
	*($2 + [416]) = $5
	*($2 + [424]) = ($2 + [408])
	*($2 + [436]) = ($2 + [288])
	*($2 + [440]) = (($2 + [280]) + [16])
	*($2 + [444]) = (($2 + [280]) + [32])
	*($2 + [448]) = ($2 + [328])
	*($2 + [452]) = ($2 + [336])
	*($2 + [456]) = ($2 + [344])
	*($2 + [460]) = ($2 + [352])
	*($2 + [464]) = ($2 + [360])
	*($2 + [468]) = ($2 + [368])
	*($2 + [472]) = ($2 + [384])
	*($2 + [432]) = ($2 + [280])
	CALL $28(($2 + [432]), ($2 + [424]))
	CALL $22(($2 + [432]), ($2 + [120]))
	$5 = *($2 + [432])
	CALL send_inline($5, (*($2 + [436]) - $5))
	$5 = *($2 + [432])
	if ( ($5 == 0) ){ goto $label$33 }
	*($2 + [436]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$33
	$5 = *($2 + [148])
	if ( ($5 == 0) ){ goto $label$34 }
	*(($2 + [152])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$5 = *($2 + [136])
	if ( ($5 == 0) ){ goto $label$35 }
	*(($2 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$35
	$5 = CALL memcpy($2, ($2 + [160]), [120])
	CALL memcpy(($5 + [280]), $5, [120])
	CALL $24(($0 + [8]), ($5 + [280]), *($0))
	$global$0 = ($5 + [480])
	return (unreachable)
	
.LABEL $label$5
	CALL $49(($2 + [408]))
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ($1 <= [513]) ){ goto $label$4 }
	$2 = CALL $57($1)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL $27($3, [0], $1)
	if ( ((uint_32)$1 >= (uint_32)[513]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $1)
	CALL $27($3, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $60($2)
	
.LABEL $label$1
	*(($1 = (($3 + [16]) + [8]))) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	*((($3 + [32]) + [8])) = *($1)
	*($3 + [32]) = *($3 + [16])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [32])), (int_32 $5))
	$global$0 = ($3 + [48])
	return [1]
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [480])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$3 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$3 }
	$2 = *($4)
	$7 = CALL $56([8320])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$4 }
	if ( (CALL $52($4, [0], [-1], [8320], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $16($0, $3)
	CALL $17(($5 + [208]), $0)
	CALL eosio_assert((int_64)(*($5 + [264]) == 0), [8338])
	$6 = CALL current_time()
	CALL eosio_assert(((uint_64)*($5 + [256]) > (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8358])
	CALL eosio_assert(((int_64)*($5 + [216]) != (int_64)*($1)), [8376])
	CALL eosio_assert(((int_64)*(($5 + [232])) == (int_64)*($3 + [8])), [8763])
	CALL eosio_assert(((int_64)*($5 + [224]) == (int_64)*($3)), [8394])
	$8 = ($0 + [88])
	$6 = *($1)
	$2 = *(($0 + [116]))
	$9 = *(($0 + [112]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = ($2 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$6) ){ goto $label$9 }
	$2 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$8), [8684])
	goto $label$7 
	
.LABEL $label$8
	$2 = ($0 + [96])
	$4 = CALL db_find_i64(*($8), *($2), (int_64)-2616331349002289152, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $18($8, $4)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$8), [8684])
	
.LABEL $label$7
	$6 = CALL current_time()
	CALL eosio_assert(((uint_64)((int_64)*($7 + [8]) + (int_64)15) <= (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8445])
	$10 = *($0)
	CALL eosio_assert([1], [9008])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$8), [9043])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9089])
	$6 = *($7)
	*($7 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($7)), [9140])
	CALL eosio_assert([1], [8911])
	CALL memcpy(($5 + [336]), $7, [8])
	CALL eosio_assert([1], [8911])
	CALL memcpy((($5 + [336]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), $10, ($5 + [336]), [16])
	$4 = ($0 + [104])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$5()), [9199])
	*(($4 = CALL _Znwj([32])) + [16]) = $8
	*($4) = *($1)
	*($4 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [8911])
	CALL memcpy(($5 + [336]), $4, [8])
	CALL eosio_assert([1], [8911])
	CALL memcpy((($5 + [336]) | [8]), ($4 + [8]), [8])
	$6 = *($4)
	$7 = CALL db_store_i64(*($2), (int_64)-2616331349002289152, $10, $6, ($5 + [336]), [16])
	*($4 + [20]) = $7
	$2 = ($0 + [104])
	if ( (uint_64)($6 <= *($2)) ){ goto $label$11 }
	*($2) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($5 + [168]) = $4
	$6 = *($4)
	*($5 + [336]) = $6
	*($5 + [464]) = $7
	$9 = ($0 + [116])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [120]))) ){ goto $label$13 }
	*($2 + [8]) = $6
	*($2 + [16]) = $7
	*($5 + [168]) = [0]
	*($2) = $4
	*($9) = ($2 + [24])
	$4 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( $4 ){ goto $label$12 }
	goto $label$5 
	
.LABEL $label$13
	CALL $19(($0 + [112]), ($5 + [168]), ($5 + [336]), ($5 + [464]))
	$4 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$7 = ($5 + [224])
	$6 = *($3)
	CALL __multi3(($5 + [16]), $6, (int_64)$6 >> (int_64)63), (int_64)3, (int_64)0)
	$11 = *(($3 + [8]))
	$6 = *((($5 + [16]) + [8]))
	$10 = *($5 + [16])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [8862])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [8886])
	CALL eosio_assert([1], [8822])
	CALL eosio_assert([1], [8837])
	$12 = ((int_64)$10 / (int_64)14)
	$9 = ($5 + [240])
	$13 = *($0)
	$6 = (int_64)6
	
.LOOP $label$14:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	$6 = (int_64)0
	$10 = (int_64)59
	$4 = [8192]
	$14 = (int_64)0
	
.LOOP $label$15:
	$15 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$16 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [-91])
	goto $label$17 
	
.LABEL $label$18
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$15 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$15 }
	$6 = (int_64)4
	
.LOOP $label$19:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$19 }
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$4 = CALL $56([8458])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$22 }
	*($5 + [152]) = ($4 << [1])
	$2 = (($5 + [152]) | [1])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = (($4 + [16]) & [-16])
	$2 = CALL _Znwj($8)
	*($5 + [152]) = ($8 | [1])
	*($5 + [160]) = $2
	*($5 + [156]) = $4
	
.LABEL $label$21
	CALL memcpy($2, [8458], $4)
	
.LABEL $label$20
	*(($2 + $4)) = [0]
	*((($5 + [168]) + [16])) = $11
	*(($2 = (($5 + [336]) + [24]))) = [0]
	$4 = ($5 + [160])
	*(($5 + [200])) = *($4)
	*($4) = [0]
	*($5 + [176]) = $12
	*($5 + [336]) = $14
	*($5 + [344]) = (int_64)4516881727834030080
	*($5 + [352]) = (int_64)0
	*($5 + [168]) = *($0)
	*($5 + [192]) = *($5 + [152])
	*($5 + [152]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $13
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [372])) = [0]
	$8 = ($4 + [16])
	*($2) = $8
	*(($5 + [356])) = $8
	*($5 + [352]) = $4
	*($5 + [364 align=4]) = (int_64)0
	$4 = *($5 + [192])
	$2 = ( *((($5 + [168]) + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($2 + [24])
	$6 = (CASTING uint_64)(uint_32 $2)
	$8 = (($5 + [168]) + [24])
	$2 = (($5 + [336]) + [28])
	
.LOOP $label$23:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$23 }
	if ( ($4 == 0) ){ goto $label$25 }
	CALL $20($2, $4)
	$2 = *(($5 + [368]))
	$4 = *(($5 + [364]))
	goto $label$24 
	
.LABEL $label$25
	$2 = [0]
	$4 = [0]
	
.LABEL $label$24
	*($5 + [468]) = $4
	*($5 + [464]) = $4
	*($5 + [472]) = $2
	CALL eosio_assert(((int_32)($2 - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($5 + [468]), ($5 + [168]), [8])
	$4 = (*($5 + [468]) + [8])
	*($5 + [468]) = $4
	CALL eosio_assert(((int_32)(*($5 + [472]) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($5 + [468]), (($5 + [168]) + [8]), [8])
	$4 = (*($5 + [468]) + [8])
	*($5 + [468]) = $4
	CALL eosio_assert(((int_32)(*($5 + [472]) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($5 + [468]), ($5 + [184]), [8])
	*($5 + [468]) = (*($5 + [468]) + [8])
	CALL $21(($5 + [464]), $8)
	CALL $22(($5 + [464]), ($5 + [336]))
	$4 = *($5 + [464])
	CALL send_inline($4, (*($5 + [468]) - $4))
	$4 = *($5 + [464])
	if ( ($4 == 0) ){ goto $label$26 }
	*($5 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$26
	$4 = *($5 + [364])
	if ( ($4 == 0) ){ goto $label$27 }
	*(($5 + [368])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$4 = *($5 + [352])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($5 + [356])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((*(($5 + [192])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($5 + [200])))
	
.LABEL $label$29
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$30
	$6 = *($3)
	$13 = *(($3 + [8]))
	CALL eosio_assert(((int_64)$11 == (int_64)$13), [8917])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($6 - $12)) > (int_64)-4611686018427387904), [8965])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [8987])
	if ( (int_64)(*($5 + [272]) == 0) ){ goto $label$31 }
	$16 = *($0)
	$6 = (int_64)6
	
.LOOP $label$32:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$32 }
	$6 = (int_64)0
	$10 = (int_64)59
	$4 = [8192]
	$14 = (int_64)0
	
.LOOP $label$33:
	$15 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$34 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$2 = ($2 + [-91])
	goto $label$35 
	
.LABEL $label$36
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$15 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$34
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$33 }
	$6 = (int_64)0
	$15 = (int_64)59
	$4 = [8205]
	$11 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$42 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$2 = ($2 + [-91])
	goto $label$40 
	
.LABEL $label$42
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$38
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$37 }
	*(($5 + [160])) = [0]
	*($5 + [152]) = (int_64)0
	$4 = CALL $56([8483])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$45 }
	*($5 + [152]) = ($4 << [1])
	$2 = (($5 + [152]) | [1])
	if ( $4 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$8 = (($4 + [16]) & [-16])
	$2 = CALL _Znwj($8)
	*($5 + [152]) = ($8 | [1])
	*($5 + [160]) = $2
	*($5 + [156]) = $4
	
.LABEL $label$44
	CALL memcpy($2, [8483], $4)
	
.LABEL $label$43
	*(($2 + $4)) = [0]
	*((($5 + [336]) + [24])) = $13
	*(($2 = (($5 + [168]) + [24]))) = [0]
	$4 = (($5 + [152]) + [8])
	*(($5 + [376])) = *($4)
	*($4) = [0]
	*($5 + [352]) = $12
	*($5 + [168]) = $14
	*($5 + [176]) = $11
	*($5 + [184]) = (int_64)0
	*($5 + [336]) = *($0)
	*($5 + [344]) = *((($5 + [208]) + [8]))
	*($5 + [368]) = *($5 + [152])
	*($5 + [152]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $16
	*($4 + [8]) = (int_64)3617214756542218240
	*((($5 + [168]) + [36])) = [0]
	$8 = ($4 + [16])
	*($2) = $8
	*(($5 + [188])) = $8
	*($5 + [184]) = $4
	*($5 + [196 align=4]) = (int_64)0
	$4 = *($5 + [368])
	$2 = ( *((($5 + [336]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($2 + [32])
	$6 = (CASTING uint_64)(uint_32 $2)
	$2 = ($5 + [196])
	
.LOOP $label$46:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$46 }
	if ( ($4 == 0) ){ goto $label$48 }
	CALL $20($2, $4)
	$2 = *(($5 + [200]))
	$4 = *(($5 + [196]))
	goto $label$47 
	
.LABEL $label$48
	$2 = [0]
	$4 = [0]
	
.LABEL $label$47
	*($5 + [468]) = $4
	*($5 + [464]) = $4
	*($5 + [472]) = $2
	*($5 + [328]) = ($5 + [464])
	*($5 + [456]) = ($5 + [336])
	CALL $23(($5 + [456]), ($5 + [328]))
	CALL $22(($5 + [464]), ($5 + [168]))
	$4 = *($5 + [464])
	CALL send_inline($4, (*($5 + [468]) - $4))
	$4 = *($5 + [464])
	if ( ($4 == 0) ){ goto $label$49 }
	*($5 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$49
	$4 = *($5 + [196])
	if ( ($4 == 0) ){ goto $label$50 }
	*(($5 + [200])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$50
	$4 = *($5 + [184])
	if ( ($4 == 0) ){ goto $label$51 }
	*(($5 + [188])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$51
	if ( ((*(($5 + [368])) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($5 + [376])))
	
.LABEL $label$52
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$31
	$6 = *($5 + [224])
	CALL __multi3($5, $6, (int_64)$6 >> (int_64)63), (int_64)140, (int_64)0)
	*((($5 + [208]) + [8])) = *($1)
	*($9) = *($7)
	*(($9 + [8])) = *(($7 + [8]))
	$4 = ($5 + [232])
	$15 = *($4)
	$6 = *(($5 + [8]))
	$10 = *($5)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [8862])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [8886])
	CALL eosio_assert([1], [8822])
	CALL eosio_assert([1], [8837])
	*($4) = $15
	*($5 + [224]) = ((int_64)$10 / (int_64)100)
	$6 = CALL current_time()
	*(($4 = ($5 + [272]))) = ((int_64)*($4) + (int_64)1)
	*(($5 + [256])) = ((int_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) + (int_64)300) & (int_64)4294967295)
	CALL memcpy(($5 + [32]), ($5 + [208]), [120])
	CALL memcpy(($5 + [336]), ($5 + [32]), [120])
	CALL $24(($0 + [8]), ($5 + [336]), *($0))
	$11 = *($0)
	$6 = (int_64)6
	
.LOOP $label$53:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$53 }
	$6 = (int_64)0
	$15 = (int_64)59
	$4 = [8310]
	$14 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$59 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$2 = ($2 + [-91])
	goto $label$57 
	
.LABEL $label$59
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$55
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$54 }
	$6 = CALL $25($0)
	*((($5 + [336]) + [32])) = *(($3 + [8]))
	*($5 + [336]) = $6
	*($5 + [168]) = $11
	*($5 + [176]) = $14
	*($5 + [344]) = *($1)
	*($5 + [352]) = *(($5 + [272]))
	*($5 + [360]) = *($3)
	*($5 + [376]) = *($5 + [208])
	*(($4 = CALL _Znwj([16]))) = $11
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [204])) = [0]
	$2 = ($4 + [16])
	*(($5 + [192])) = $2
	*(($5 + [188])) = $2
	*($5 + [184]) = $4
	*($5 + [196 align=4]) = (int_64)0
	CALL $20(($5 + [196]), [48])
	$4 = *((($5 + [168]) + [32]))
	$2 = *($5 + [196])
	*($5 + [468]) = $2
	*($5 + [464]) = $2
	*($5 + [472]) = $4
	*($5 + [456]) = ($5 + [464])
	*($5 + [152]) = ($5 + [336])
	CALL $26(($5 + [152]), ($5 + [456]))
	CALL $22(($5 + [464]), ($5 + [168]))
	$4 = *($5 + [464])
	CALL send_inline($4, (*($5 + [468]) - $4))
	$4 = *($5 + [464])
	if ( ($4 == 0) ){ goto $label$60 }
	*($5 + [468]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$60
	$4 = *($5 + [196])
	if ( ($4 == 0) ){ goto $label$61 }
	*(($5 + [200])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$61
	$4 = *($5 + [184])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($5 + [188])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($5 + [480])
	return (unreachable)
	
.LABEL $label$2
	CALL $49(($5 + [152]))
	
.LABEL $label$1
	CALL $49(($5 + [152]))
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9299])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $15(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $60($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $50(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	*(($3 + [112])) = $0
	*(($3 + [120])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*(($3 + [152])) = $0
	*(($3 + [160])) = (int_64)-1
	*(($3 + [168])) = (int_64)0
	*(($3 + [176])) = [0]
	*(($3 + [192])) = $0
	*(($3 + [200])) = (int_64)-1
	*(($3 + [208])) = (int_64)0
	*(($3 + [216])) = [0]
	*($3 + [104]) = $0
	*($3 + [96]) = $0
	*($3 + [144]) = $0
	*($3 + [184]) = $0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$6 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8205]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$9 = ($9 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$6 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [1]
	*($3) = *($3 + [88])
	CALL $3(($3 + [96]), $3)
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)3
	
.LOOP $label$13:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)6111947644295184384 != (int_64)$2) ){ goto $label$14 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [8]) = *($3 + [80])
	CALL $5(($3 + [96]), ($3 + [8]))
	goto $label$5 
	
.LABEL $label$14
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8300]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$4 > (uint_64)(int_64)8) ){ goto $label$20 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [16]) = *($3 + [72])
	CALL $7(($3 + [96]), ($3 + [16]))
	goto $label$5 
	
.LABEL $label$21
	$4 = (int_64)5
	
.LOOP $label$22:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$22 }
	if ( ((int_64)-4157529991795441664 != (int_64)$2) ){ goto $label$23 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $9(($3 + [96]), ($3 + [24]))
	goto $label$5 
	
.LABEL $label$23
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8310]
	$7 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$4 > (uint_64)(int_64)8) ){ goto $label$29 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$9 = ($9 + [-91])
	goto $label$27 
	
.LABEL $label$29
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$24 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$30 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [32]) = *($3 + [56])
	CALL $11(($3 + [96]), ($3 + [32]))
	goto $label$5 
	
.LABEL $label$30
	$4 = (int_64)7
	
.LOOP $label$31:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$31 }
	if ( ((int_64)6112162363668955136 != (int_64)$2) ){ goto $label$5 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [6]
	*($3 + [40]) = *($3 + [48])
	CALL $13(($3 + [96]), ($3 + [40]))
	
.LABEL $label$5
	CALL $14(($3 + [96]))
	CALL $54([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8758])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)383666176772), [8599])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8623])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [8640])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [8]) = (int_64)1
	$3 = ($1 + [8])
	$4 = (int_64)2
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)0
	*((($2 + [8]) + [24])) = (int_64)383666176772
	*($2 + [24]) = (int_64)1000000
	CALL eosio_assert([1], [9250])
	$4 = (int_64)1498696003
	$5 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$4 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [9299])
	*(($2 + [48])) = (int_64)383666176772
	*($2 + [40]) = (int_64)1000000
	CALL eosio_assert([1], [9250])
	$4 = (int_64)1498696003
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9299])
	*(($2 + [104])) = (int_64)1397703940
	*($2 + [64]) = (int_64)1
	*($2 + [56]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$4 = $6
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$16 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	
.LABEL $label$12
	CALL eosio_assert($7, [9299])
	*(($2 + [120])) = (int_64)383666176772
	*($2 + [112]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$4 = (int_64)1498696003
	$5 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$4 = $6
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$21 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$17
	CALL eosio_assert($7, [9299])
	$5 = *(($1 + [36]))
	if ( ((int_32)$5 == (int_32)*(($1 + [32]))) ){ goto $label$23 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)$3), [8684])
	if ( $5 ){ goto $label$22 }
	$5 = ($2 + [8])
	goto $label$22 
	
.LABEL $label$23
	$5 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)7035936339212107776, (int_64)7035936339212107776)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$24 }
	$5 = CALL $32($3, $5)
	CALL eosio_assert(((int_32)*($5 + [120]) == (int_32)$3), [8684])
	goto $label$22 
	
.LABEL $label$24
	$5 = ($2 + [8])
	
.LABEL $label$22
	CALL memcpy($0, $5, [120])
	$global$0 = ($2 + [128])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [48])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9299])
	*($3 + [56]) = (int_64)0
	*($3 + [100]) = $6
	*($3 + [96]) = $6
	*($3 + [104]) = ($6 + $7)
	*($3 + [64]) = ($3 + [96])
	*($3 + [80]) = ($3 + [16])
	CALL $29(($3 + [80]), ($3 + [64]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $60($6)
	
.LABEL $label$8
	*(($1 = (($3 + [64]) + [8]))) = *(($3 + [48]))
	*($3 + [64]) = *($3 + [40])
	$8 = *(($3 + [32]))
	$10 = *((($3 + [16]) + [8]))
	$12 = *(($3 + [56]))
	$13 = *($3 + [16])
	*((($3 + [80]) + [8])) = *($1)
	*($3 + [80]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$14 = *((($3 + [80]) + [8]))
	*((($3 + [96]) + [8])) = $14
	*(($3 + [8])) = $14
	$14 = *($3 + [80])
	*($3) = $14
	*($3 + [96]) = $14
	CALL void $1((int_32 $13), (int_64 $10), (int_64 $8), (int_64 $3), (int_32 $12), (int_64 $5))
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [368])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	$1 = CALL memset($3, [0], [120])
	CALL $30($1)
	*($1 + [132]) = $6
	*($1 + [128]) = $6
	*($1 + [136]) = ($6 + $7)
	*($1 + [120]) = ($1 + [128])
	*($1 + [252]) = ($1 + [8])
	*($1 + [256]) = ($1 + [16])
	*($1 + [260]) = ($1 + [32])
	*($1 + [264]) = ($1 + [48])
	*($1 + [268]) = ($1 + [56])
	*($1 + [272]) = ($1 + [64])
	*($1 + [276]) = ($1 + [72])
	*($1 + [280]) = ($1 + [80])
	*($1 + [284]) = ($1 + [88])
	*($1 + [288]) = ($1 + [104])
	*($1 + [248]) = $1
	CALL $31(($1 + [248]), ($1 + [120]))
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $60($6)
	
.LABEL $label$4
	CALL memcpy(($1 + [128]), $1, [120])
	CALL memcpy(($1 + [248]), ($1 + [128]), [120])
	$6 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($6) + $5))
	
.LABEL $label$5
	CALL void $6((int_32 ($1 + [248])), (int_32 $5))
	$global$0 = ($1 + [368])
	return [1]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8911])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8911])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8911])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8911])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8684])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $33($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8684])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9008])
	CALL $40($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $41($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $53($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8735])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([136])
	CALL $30($5)
	*($5 + [120]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [88])
	*($3 + [72]) = ($5 + [104])
	CALL $31(($3 + [32]), ($3 + [24]))
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)7035936339212107776
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7035936339212107776
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8735])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8758])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [9250])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9299])
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9299])
	*(($1 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9299])
	*(($1 = ($0 + [112]))) = (int_64)1398362884
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [9250])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$21 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert($6, [9299])
	return $0
	
.LABEL $label$17
	CALL eosio_assert([0], [9299])
	return $0
	
.LABEL $label$16
	CALL eosio_assert([0], [9299])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8758])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8758])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8758])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8758])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [8758])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $59($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8214])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9328]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9332])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9328]) = [1]
	$2 = ($2 << [16])
	*([0] + [9332]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9332])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9332]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9328]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9328]) = [1]
	$3 = ($3 << [16])
	*([0] + [9332]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9332])
	
.LABEL $label$10
	*([0] + [9332]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9089])
	$1 = CALL memcpy($1, *($3), [120])
	CALL eosio_assert([1], [9140])
	*($4 + [128]) = ($4 + [120])
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($1 + [8])
	*($4 + [144]) = $1
	*($4 + [152]) = ($1 + [16])
	*($4 + [156]) = ($1 + [32])
	*($4 + [160]) = ($1 + [48])
	*($4 + [164]) = ($1 + [56])
	*($4 + [168]) = ($1 + [64])
	*($4 + [172]) = ($1 + [72])
	*($4 + [176]) = ($1 + [80])
	*($4 + [180]) = ($1 + [88])
	*($4 + [184]) = ($1 + [104])
	CALL $28(($4 + [144]), ($4 + [136]))
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035936339212107776) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7035936339212107777
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $55(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $53 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $54 (int_32 $0)
{
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $57 (int_32 $0)
{
	return CALL $58([9336], $0)
}