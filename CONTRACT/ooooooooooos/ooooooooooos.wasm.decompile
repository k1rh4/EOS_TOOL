(data (i32.const 4) "\e0g\00\00")
(data (i32.const 16) "cannot create objects in table of another contract\00")
(data (i32.const 80) "cannot pass end iterator to erase\00")
(data (i32.const 128) "cannot increment end iterator\00")
(data (i32.const 160) "cannot pass end iterator to modify\00")
(data (i32.const 208) "object passed to modify is not in multi_index\00")
(data (i32.const 256) "cannot modify objects in table of another contract\00")
(data (i32.const 320) "updater cannot change primary key when modifying an object\00")
(data (i32.const 384) "error reading iterator\00")
(data (i32.const 416) "read\00")
(data (i32.const 432) "object passed to erase is not in multi_index\00")
(data (i32.const 480) "cannot erase objects in table of another contract\00")
(data (i32.const 544) "attempt to remove object that was not in multi_index\00")
(data (i32.const 608) "write\00")
(data (i32.const 624) "integer overflow adding team reward total\00")
(data (i32.const 672) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 736) "integer overflow adding team reward balance\00")
(data (i32.const 784) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 848) "cannot decrement iterator at beginning of table\00")
(data (i32.const 896) "price must be great than 0\00")
(data (i32.const 928) "max keys must be great than 0\00")
(data (i32.const 960) " \00")
(data (i32.const 976) "create invate code name length was 0~24\00")
(data (i32.const 1024) "create invate code name was exists\00")
(data (i32.const 1072) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1136) "get\00")
(data (i32.const 1152) "eosio.token\00")
(data (i32.const 1168) "transfer not from eosio.token\00")
(data (i32.const 1200) "transfer not made to this contract\00")
(data (i32.const 1248) "invalid quantity\00")
(data (i32.const 1280) "the game was not start\00")
(data (i32.const 1312) "new keys must be one or more\00")
(data (i32.const 1344) "asset must be EOS\00")
(data (i32.const 1376) "integer overflow adding counter balance\00")
(data (i32.const 1424) "integer overflow adding pot\00")
(data (i32.const 1456) "integer overflow adding sold_keys\00")
(data (i32.const 1504) "user does not exist\00")
(data (i32.const 1536) "integer overflow adding withdraw balance\00")
(data (i32.const 1584) "active\00")
(data (i32.const 1600) "transfer\00")
(data (i32.const 1616) "from LastKing\00")
(data (i32.const 1632) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1696) "invalid symbol name\00")
(data (i32.const 10112) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN7diamond12gamewasstartEv" (func $5))
(export "_ZN7diamond4pingEv" (func $14))
(export "_ZN7diamond13updateBalanceEyyy" (func $16))
(export "_ZN7diamond19updatePlayerBalanceEN5eosio11multi_indexILy12415831944337679008ENS_12playerstableEJEE14const_iteratorEyh" (func $22))
(export "_Z13get_new_pricey" (func $23))
(export "_Z23get_same_level_max_keysy" (func $24))
(export "_Z15get_new_key_numyy" (func $25))
(export "_Z4trimRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $26))
(export "_ZN7diamond16createInvateCodeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy" (func $27))
(export "_ZN7diamond16executeStartGameEy" (func $37))
(export "_ZN7diamond2onERKN5eosio8currency8transferEy" (func $38))
(export "_ZN7diamond8withdrawEyN5eosio5assetE" (func $39))
(export "_ZN7diamond5applyEyy" (func $47))
(export "apply" (func $51))
(export "malloc" (func $52))
(export "free" (func $55))
(export "memchr" (func $65))
(export "memcmp" (func $66))
(export "strlen" (func $67))
(table $0 2 2 anyfunc)
(elem (i32.const 0) $68 $14)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $56([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [416])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [416])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $57($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC _ZN7diamond8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [672])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $19($6, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [672])
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [1504])
	$12 = *($8 + [16])
	if ( (int_64)($12 == 0) ){ goto $label$5 }
	$10 = *($2)
	CALL eosio_assert(((uint_64)((int_64)$10 + (int_64)$12) > (uint_64)$10), [1536])
	*($2) = ((int_64)$10 + (int_64)*(($8 + [16])))
	
.LABEL $label$5
	$9 = *($0 + [8])
	CALL eosio_assert($7, [160])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [208])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [256])
	$10 = (int_64)0
	*($8 + [16]) = (int_64)0
	$12 = *($8)
	CALL eosio_assert([1], [320])
	CALL eosio_assert([1], [608])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($15 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($15 + [16]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, ($15 + [16]), [24])
	$8 = ($0 + [32])
	if ( (uint_64)($12 <= *($8)) ){ goto $label$6 }
	*($8) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *(($0 + [8]))
	$9 = (int_64)59
	$8 = [1584]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$12 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1152]
	$13 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$18 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$13 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1600]
	$14 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$24 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$20
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$19 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([1616])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$28 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $56($7)
	*($15) = ($7 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$27
	CALL memcpy($6, [1616], $8)
	
.LABEL $label$26
	*(($6 + $8)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *(($0 + [8]))
	*($15 + [32]) = *($2)
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($8 = CALL $56([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$6 = ($8 + [16])
	*((($15 + [72]) + [24])) = $6
	*((($15 + [72]) + [20])) = $6
	*($15 + [88]) = $8
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$8 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [72]) + [28])
	
.LOOP $label$29:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$29 }
	if ( ($8 == 0) ){ goto $label$31 }
	CALL $36($6, $8)
	$6 = *(($15 + [104]))
	$8 = *(($15 + [100]))
	goto $label$30 
	
.LABEL $label$31
	$6 = [0]
	$8 = [0]
	
.LABEL $label$30
	*($15 + [132]) = $8
	*($15 + [128]) = $8
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [16])
	CALL $43(($15 + [120]), ($15 + [112]))
	CALL $44(($15 + [128]), ($15 + [72]))
	$8 = *($15 + [128])
	CALL send_inline($8, (*($15 + [132]) - $8))
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$32 }
	*($15 + [132]) = $8
	CALL $57($8)
	
.LABEL $label$32
	$8 = *($15 + [100])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [104])) = $8
	CALL $57($8)
	
.LABEL $label$33
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($15 + [92])) = $8
	CALL $57($8)
	
.LABEL $label$34
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$35 }
	CALL $57(*(($15 + [56])))
	
.LABEL $label$35
	if ( ((*($15) & [1]) == 0) ){ goto $label$36 }
	CALL $57(*(($15 + [8])))
	
.LABEL $label$36
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$25
	CALL $58($15)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($0 + [4])
	$6 = *($7)
	$3 = ($6 + [112])
	$8 = *($3)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = ($6 + [96])
	$5 = CALL db_lowerbound_i64(*($4), *(($6 + [104])), (int_64)8428043235007157248, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $28($4, $5)
	*($10 + [4]) = [0]
	*($10) = $4
	$8 = *(*(CALL $31($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [112])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1072])
	*($1) = *($3)
	*($1 + [8]) = *(*($7 + [4]))
	$6 = ($1 + [16])
	CALL $59($6, *($7 + [8]))
	$7 = *($1 + [16])
	$3 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [24])
	$8 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	$4 = ($9 + $7)
	*($10 + [8]) = $4
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [608])
	CALL memcpy($9, $1, [8])
	$5 = ($9 + [8])
	CALL eosio_assert(((int_32)($4 - $5) > (int_32)[7]), [608])
	CALL memcpy($5, $3, [8])
	*($10 + [4]) = ($9 + [16])
	$6 = CALL $32($10, $6)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($6 + [4]), ($1 + [32]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)8428043235007157248, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $56([56])
	$6 = CALL $33($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [44])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $57(*(($4 + [24])))
	
.LABEL $label$10
	CALL $57($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = *([0] + [4])
	$9 = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	$4 = *($1)
	$5 = *(*($3))
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	$7 = *($1 + [8])
	CALL eosio_assert(((uint_64)((int_64)$7 + (int_64)$5) > (uint_64)$7), [624])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	
.LABEL $label$1
	$6 = ($1 + [16])
	$5 = *(*($3 + [4]))
	if ( (int_64)($5 == 0) ){ goto $label$2 }
	$7 = *($6)
	CALL eosio_assert(((uint_64)((int_64)$7 + (int_64)$5) > (uint_64)$7), [736])
	*($6) = ((int_64)*($6) + (int_64)*(*(($3 + [4]))))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	$3 = $8
	$8 = ($3 + [-32])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [608])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($3 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [608])
	CALL memcpy(($3 + [-16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $8, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = $9
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $56(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $57($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $57($6)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC _Z13get_new_pricey (int_64 $0)
{
	return ((int_64)((int_64)((uint_64)$0 / (uint_64)(int_64)10000) * (int_64)50) + (int_64)1000)
}

void .FUNC _ZN7diamond19updatePlayerBalanceEN5eosio11multi_indexILy12415831944337679008ENS_12playerstableEJEE14const_iteratorEyh (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($4 + [24]) = $2
	*($4 + [23]) = $3
	$1 = *($1 + [4])
	$2 = *($0 + [8])
	*($4 + [12]) = ($4 + [23])
	*($4 + [8]) = ($4 + [24])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [160])
	CALL $17(($0 + [56]), $1, $2, ($4 + [8]))
	*([0] + [4]) = ($4 + [32])
}

int_64 .FUNC _Z15get_new_key_numyy (int_64 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	CALL eosio_assert([1], [896])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3((int_64)10000 - ((uint_64)$1 % (uint_64)(int_64)10000))) != (int_64)0), [928])
	$2 = ((int_64)((int_64)((uint_64)$1 / (uint_64)(int_64)10000) * (int_64)50) + (int_64)1000)
	$4 = ((int_64)$2 * (int_64)$3)
	if ( ((uint_64)$4 >= (uint_64)$0) ){ goto $label$1 }
	return ((int_64)CALL _Z15get_new_key_numyy((int_64))($0 - $4), ((int_64)$3 + (int_64)$1)) + (int_64)$3)
	
.LABEL $label$1
	return ((uint_64)$0 / (uint_64)$2)
}

int_64 .FUNC _Z23get_same_level_max_keysy (int_64 $0)
{
	return (int_64))((int_64)10000 - ((uint_64)$0 % (uint_64)(int_64)10000))
}

void .FUNC _ZN7diamond16createInvateCodeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	*([0] + [4]) = $16
	*($16 + [16]) = $1
	CALL _Z4trimRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($2)
	$13 = *($2)
	$15 = ($13 & [1])
	if ( $15 ){ goto $label$2 }
	$6 = uint_32($13 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	
.LABEL $label$1
	$12 = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( $15 ){ goto $label$5 }
	$12 = uint_32($13 >> [1])
	goto $label$4 
	
.LABEL $label$5
	$12 = *($2 + [4])
	
.LABEL $label$4
	$12 = ($12 <= [25])
	
.LABEL $label$3
	CALL eosio_assert($12, [976])
	$4 = ($0 + [96])
	$12 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)8428043235007157248, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 + [1])
	$12 = CALL $28($4, $12)
	$8 = ($2 + [4])
	$9 = ($2 + [8])
	
.LOOP $label$7:
	$15 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($8) ? uint_32($6 >> [1]) : $15 )
	$10 = *($9)
	$13 = *($12 + [16])
	if ( ($13 & [1]) ){ goto $label$9 }
	$14 = (($12 + [16]) + [1])
	$13 = uint_32($13 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$14 = *(($12 + [24]))
	$13 = *(($12 + [20]))
	
.LABEL $label$8
	$11 = ($6 <= $13)
	$7 = ( $6 ? $13 : $11 )
	if ( ($7 == 0) ){ goto $label$11 }
	$15 = CALL memcmp($14, ( $10 ? $5 : $15 ), $7)
	if ( $15 ){ goto $label$10 }
	
.LABEL $label$11
	$15 = ( [-1] ? $11 : ($13 <= $6) )
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1024])
	CALL eosio_assert([1], [128])
	$12 = CALL db_next_i64(*($12 + [44]), ($16 + [32]))
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$6 }
	$12 = CALL $28($4, $12)
	goto $label$7 
	
.LABEL $label$6
	$1 = *($0 + [8])
	*($16) = $0
	*($16 + [8]) = $2
	*($16 + [4]) = ($16 + [16])
	*($16 + [56]) = $1
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [16])
	*($16 + [32]) = $4
	*($16 + [36]) = $16
	*($16 + [40]) = ($16 + [56])
	*(($12 = CALL $56([56])) + [24]) = [0]
	*($12 + [16 align=4]) = (int_64)0
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = $4
	CALL $29(($16 + [32]), $12)
	*($16 + [48]) = $12
	$1 = *($12)
	*($16 + [32]) = $1
	$13 = *($12 + [44])
	*($16 + [28]) = $13
	$15 = ($0 + [124])
	$6 = *($15)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [128]))) ){ goto $label$13 }
	*($6 + [8]) = $1
	*($6 + [16]) = $13
	*($16 + [48]) = [0]
	*($6) = $12
	*($15) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $30(($0 + [120]), ($16 + [48]), ($16 + [32]), ($16 + [28]))
	
.LABEL $label$12
	$12 = *($16 + [48])
	*($16 + [48]) = [0]
	if ( ($12 == 0) ){ goto $label$14 }
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $57(*(($12 + [24])))
	
.LABEL $label$15
	CALL $57($12)
	
.LABEL $label$14
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, $3, (int_64)0)
	*([0] + [4]) = ($16 + [64])
}

void .FUNC _Z4trimRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = ($6 & [1])
	$6 = *($0)
	$5 = ( *($0 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	$1 = ($0 + [1])
	$2 = ( *($0 + [8]) ? $1 : $6 )
	$6 = $2
	$3 = CALL strlen([960])
	if ( ($3 == 0) ){ goto $label$3 }
	$6 = $2
	
.LOOP $label$4:
	if ( (CALL memchr([960], *($6), $3) == 0) ){ goto $label$3 }
	$4 = [-1]
	$6 = ($6 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - $2)
	
.LABEL $label$2
	$5 = [0]
	CALL $62($0, [0], $4)
	$4 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $4 )
	$4 = ( *(($0 + [8])) ? $1 : $4 )
	$3 = CALL strlen([960])
	if ( ($3 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( ($6 == 0) ){ goto $label$6 }
	$5 = ($4 + $6)
	$6 = ($6 + [-1])
	if ( CALL memchr([960], *(($5 + [-1])), $3) ){ goto $label$9 }
	$6 = ($4 + $6)
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$5 }
	$6 = (($4 + $6) + [-1])
	
.LABEL $label$7
	$5 = (([1] - $4) + $6)
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL $62($0, $5, [-1])
	
.LABEL $label$1
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1632])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1696])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $50($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $68 ()
{
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $32(*($1), ($0 + [32]))
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	$4 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_64)(int_64))($6 - *($1 + [48])) > (uint_64)(int_64)863999) ){ goto $label$1 }
	$7 = *(*($3))
	$7 = *(($1 + [48]))
	$6 = ((int_64)((int_64)$7 * (int_64)5) + (int_64)$6)
	$5 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)43200)
	$6 = ( $5 ? $6 : (uint_64)($5 <= $6) )
	*(($1 + [8])) = ( $6 ? ((int_64)$7 + (int_64)864000) : (uint_64)((int_64))($6 - $7) <= (int_64)864000) )
	
.LABEL $label$1
	$6 = *($1 + [40])
	CALL eosio_assert(((uint_64)((int_64)*(*($3 + [4]) + [16]) + (int_64)$6) > (uint_64)$6), [1376])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [4]) + [16]))
	$6 = *(*($3 + [8]))
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$2 }
	$7 = *($1 + [16])
	CALL eosio_assert(((uint_64)((int_64)((int_64)$7 + (int_64)$6) + (int_64)*(*($3 + [12]))) > (uint_64)$7), [1376])
	*($1 + [16]) = ((int_64)((int_64)((int_64)*(*($3 + [16])) + (int_64)*(*(($3 + [8])))) + (int_64)*(*($3 + [12]))) + (int_64)*($1 + [16]))
	
.LABEL $label$2
	$9 = ($3 + [12])
	$6 = *($1 + [24])
	$8 = ($3 + [4])
	CALL eosio_assert(((uint_64)(int_64))((int_64))((int_64))(((int_64)*(*($8) + [16]) + (int_64)$6) - *(*($3 + [20]))) - *(*($3 + [24]))) - *(*($9))) > (uint_64)$6), [1424])
	*($1 + [24]) = ((int_64))((int_64))((int_64))((int_64))(*(*($8) + [16]) - *(*($3 + [20]))) - *(*($3 + [24]))) - *(*(($3 + [16])))) - *(*($9))) + (int_64)*($1 + [24]))
	$6 = *($1 + [56])
	CALL eosio_assert(((uint_64)((int_64)*(*($3)) + (int_64)$6) > (uint_64)$6), [1456])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	*($1 + [64]) = *(*($3 + [28]))
	*($1 + [72]) = (int_64))(((int_64)*($1 + [72]) + (int_64)1) - *(*($3 + [32])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	$11 = $11
	$3 = ($11 + [-96])
	*([0] + [4]) = $3
	*($10 + [4]) = $3
	*($10) = $3
	*($10 + [8]) = ($11 + [-8])
	CALL $7($10, $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, [88])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [4])
	*($1 + [8]) = *(*($3))
	$2 = *($0)
	$4 = *($3 + [4])
	$8 = ($4 + [72])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [56])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($5, $6)
	*($9 + [4]) = [0]
	*($9) = $5
	$7 = *(*(CALL $15($9) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [72])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1072])
	*($1) = *($8)
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]) + [16])
	$7 = *(*($3 + [16]))
	if ( (int_64)($7 == 0) ){ goto $label$4 }
	$4 = *(*($3 + [20]) + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	*($1 + [48]) = *($4 + [8])
	$7 = *(*(($3 + [16])))
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)0
	
.LABEL $label$3
	*($1 + [64]) = $7
	*($1 + [32]) = *(*($3 + [24]))
	$10 = $10
	$3 = ($10 + [-80])
	*([0] + [4]) = $3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($10 + [-15])
	CALL $18($9, $1)
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912129371872608, *(*($0 + [8])), $7, $3, [65])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [320])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [24])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$5 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$10 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$2
	*($11) = $10
	$6 = ($10 + $3)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [608])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[7]), [608])
	CALL memcpy($7, ($1 + [8]), [8])
	*($11 + [4]) = ($10 + [16])
	$8 = CALL $32($11, $8)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($8 + [4]), $5, [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	CALL db_update_i64(*($1 + [44]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($10)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [16])
}

void .FUNC _ZN7diamond5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1600]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $48(($9 + [16]))
	CALL _ZN7diamond2onERKN5eosio8currency8transferEy($0, ($9 + [16]), $1)
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $57(*(($9 + [56])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$7 }
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	*($9 + [12]) = [0]
	*($9 + [8]) = [1]
	*($9) = *($9 + [8])
	CALL $49($0, $9)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $36($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [608])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [608])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $46(CALL $45($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [176])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [16]) = $0
	*(($3 + [48])) = [0]
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $0
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*($3 + [136]) = $0
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	CALL _ZN7diamond5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $56($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $57($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $56(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $57($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $57($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [480])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [544])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $57($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $57($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $56([88])) + [24]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [32]) = (int_64)0
	$5 = CALL current_time()
	*($6 + [56]) = [1]
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = $0
	*($6 + [40]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $12(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $13(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $57($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN7diamond12gamewasstartEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$1 = ($0 + [136])
	$10 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)4986958867385548800, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $10($1, $10)
	if ( ((int_64)*($5 + [80]) != (int_64)0) ){ goto $label$1 }
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)*($5 + [48])) ){ goto $label$1 }
	$10 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$2 = ($0 + [56])
	$9 = CALL $6($2, $10)
	
.LOOP $label$4:
	CALL eosio_assert([1], [80])
	CALL eosio_assert([1], [128])
	$10 = [0]
	$4 = CALL db_next_i64(*($9 + [76]), ($11 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $6($2, $4)
	
.LABEL $label$5
	CALL $9($2, $9)
	$9 = $10
	if ( $10 ){ goto $label$4 }
	
.LABEL $label$3
	$8 = *($0 + [8])
	CALL eosio_assert([1], [160])
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$1), [208])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$2()), [256])
	*(($5 + [80])) = (int_64)1
	$3 = *($5)
	$6 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($5 + [48])) = $6
	*($5 + [8]) = ((int_64)$6 + (int_64)43200)
	$6 = *($0 + [8])
	*($5) = $6
	$7 = *($5 + [32])
	*($5 + [24]) = $7
	*($5 + [40]) = $7
	*($5 + [16]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [72]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)$6), [320])
	*($11 + [120]) = (($11 + [16]) + [88])
	*($11 + [116]) = ($11 + [16])
	*($11 + [112]) = ($11 + [16])
	CALL $7(($11 + [112]), $5)
	CALL db_update_i64(*($5 + [92]), $8, ($11 + [16]), [88])
	$10 = ($0 + [152])
	if ( (uint_64)($3 <= *($10)) ){ goto $label$1 }
	*($10) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$10 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	$2 = ($0 + [56])
	$9 = CALL $6($2, $10)
	
.LOOP $label$7:
	CALL eosio_assert([1], [80])
	CALL eosio_assert([1], [128])
	$10 = [0]
	$4 = CALL db_next_i64(*($9 + [76]), ($11 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $6($2, $4)
	
.LABEL $label$8
	CALL $9($2, $9)
	$9 = $10
	if ( $10 ){ goto $label$7 }
	
.LABEL $label$6
	$9 = ($0 + [8])
	$8 = *($9)
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$2()), [16])
	$10 = CALL $56([104])
	CALL current_time()
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	*($10 + [40]) = (int_64)0
	CALL current_time()
	*($10 + [64]) = (int_64)1000
	*($10 + [56]) = (int_64)0
	*($10 + [72]) = (int_64)0
	*($10 + [88]) = $1
	*($10) = *($9)
	$3 = CALL current_time()
	*($10 + [80]) = (int_64)0
	$3 = ((int_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) + (int_64)172800) & (int_64)4294967295)
	*($10 + [48]) = $3
	*($10 + [8]) = ((int_64)((int_64)$3 << (int_64)1) + (int_64)77760000)
	*($11 + [120]) = (($11 + [16]) + [88])
	*($11 + [116]) = ($11 + [16])
	*($11 + [112]) = ($11 + [16])
	CALL $7(($11 + [112]), $10)
	$3 = *($10)
	$2 = CALL db_store_i64(*(($0 + [144])), (int_64)4986958867385548800, $8, $3, ($11 + [16]), [88])
	*($10 + [92]) = $2
	$9 = ($0 + [152])
	if ( (uint_64)($3 <= *($9)) ){ goto $label$9 }
	*($9) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($11 + [112]) = $10
	$3 = *($10)
	*($11 + [16]) = $3
	*($11 + [12]) = $2
	$4 = ($0 + [164])
	$9 = *($4)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [168]))) ){ goto $label$11 }
	*($9 + [8]) = $3
	*($9 + [16]) = $2
	*($11 + [112]) = [0]
	*($9) = $10
	*($4) = ($9 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $8(($0 + [160]), ($11 + [112]), ($11 + [16]), ($11 + [12]))
	
.LABEL $label$10
	$10 = *($11 + [112])
	*($11 + [112]) = [0]
	if ( ($10 == 0) ){ goto $label$1 }
	CALL $57($10)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN7diamond4pingEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	float_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [128])
	*([0] + [4]) = $17
	$1 = ($0 + [136])
	$13 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)4986958867385548800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $10($1, $7)
	
.LABEL $label$1
	$8 = *($13 + [8])
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($13 == 0) ){ goto $label$2 }
	if ( ((uint_64)$8 > (uint_64)((int_64)$4 & (int_64)4294967295)) ){ goto $label$2 }
	if ( (int_64)(*($13 + [80]) == 0) ){ goto $label$2 }
	$4 = *($0 + [8])
	CALL eosio_assert([1], [160])
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)$1), [208])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$2()), [256])
	*(($13 + [80])) = (int_64)0
	$8 = *($13)
	CALL eosio_assert([1], [320])
	$2 = (($17 + [16]) + [88])
	*($17 + [120]) = $2
	*($17 + [116]) = ($17 + [16])
	*($17 + [112]) = ($17 + [16])
	CALL $7(($17 + [112]), $13)
	CALL db_update_i64(*($13 + [92]), $4, ($17 + [16]), [88])
	$7 = ($0 + [152])
	if ( (uint_64)($8 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$16 = *($13 + [32])
	$8 = *($13 + [24])
	if ( (int_64)($8 == 0) ){ goto $label$4 }
	if ( (int_64)(*(($13 + [72])) == 0) ){ goto $label$5 }
	$9 = ($0 + [64])
	$7 = CALL db_lowerbound_i64(*($0 + [56]), *($9), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$6 }
	$3 = ($0 + [56])
	CALL $6($3, $7)
	$8 = *(($13 + [72]))
	*($17 + [12]) = [0]
	*($17 + [8]) = $3
	$8 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $8) * (float_64)(float_64)0.3) + (float_64)(float_64)0.5))
	$4 = ( (int_64)1 ? $8 : (int_64)($8 == 0) )
	CALL $15(($17 + [8]))
	$8 = (int_64)0
	$14 = [0]
	
.LOOP $label$7:
	$7 = [0]
	$15 = CALL db_lowerbound_i64(*($3), *($9), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $6($3, $15)
	
.LABEL $label$8
	$15 = *($17 + [12])
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$9 }
	if ( (*($15 + [56]) == 0) ){ goto $label$10 }
	if ( ((uint_64)(CASTING int_64)(int_32 $14) >= (uint_64)$4) ){ goto $label$9 }
	$14 = ($14 + [1])
	$8 = ((int_64)*($15 + [16]) + (int_64)$8)
	
.LABEL $label$10
	CALL $15(($17 + [8]))
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	$15 = CALL db_lowerbound_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $6($3, $15)
	
.LABEL $label$11
	$15 = *($17 + [12])
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$12 }
	if ( (*($15 + [56]) == 0) ){ goto $label$12 }
	$8 = ((int_64)*($15 + [16]) + (int_64)$8)
	
.LABEL $label$12
	$7 = ($13 + [24])
	$10 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 *($7)) * (float_64)(float_64)0.05) + (float_64)(float_64)0.5))
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, $10, (int_64)0)
	$16 = *($7)
	*($17 + [12]) = [0]
	*($17 + [8]) = $3
	$16 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $16) * (float_64)(float_64)0.05) + (float_64)(float_64)0.5))
	$5 = (CASTING float_64)(uint_64 (int_64))((int_64))($16 - $10) - $16))
	CALL $15(($17 + [8]))
	$6 = (CASTING float_64)(uint_64 $8)
	$9 = ($0 + [64])
	$11 = ($0 + [56])
	$12 = ($0 + [8])
	$14 = [0]
	
.LOOP $label$13:
	$15 = [0]
	$7 = CALL db_lowerbound_i64(*($11), *($9), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$15 = CALL $6($3, $7)
	
.LABEL $label$14
	$7 = *($17 + [12])
	if ( ((int_32)$7 == (int_32)$15) ){ goto $label$15 }
	if ( (*($7 + [56]) == 0) ){ goto $label$16 }
	if ( ((uint_64)(CASTING int_64)(int_32 $14) >= (uint_64)$4) ){ goto $label$15 }
	$14 = ($14 + [1])
	$8 = (Rounds 0)(((float_64)$5 * (float_64)((float_64)(CASTING float_64)(uint_64 *($7 + [16])) / (float_64)$6)))
	if ( (int_64)($8 == 0) ){ goto $label$16 }
	CALL _ZN7diamond13updateBalanceEyyy($0, *($7 + [8]), $8, (int_64)0)
	$7 = *($17 + [12])
	*($17 + [16]) = $8
	*($17 + [127]) = [3]
	$8 = *($12)
	*($17 + [116]) = ($17 + [127])
	*($17 + [112]) = ($17 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [160])
	CALL $17($3, $7, $8, ($17 + [112]))
	
.LABEL $label$16
	CALL $15(($17 + [8]))
	goto $label$13 
	
.LABEL $label$15
	$7 = [0]
	$15 = CALL db_lowerbound_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$17 }
	$7 = CALL $6($3, $15)
	
.LABEL $label$17
	$15 = *($17 + [12])
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$4 }
	if ( (*($15 + [56]) == 0) ){ goto $label$4 }
	$8 = (Rounds 0)(((float_64)$5 * (float_64)((float_64)(CASTING float_64)(uint_64 *($15 + [16])) / (float_64)$6)))
	if ( (int_64)($8 == 0) ){ goto $label$4 }
	CALL _ZN7diamond13updateBalanceEyyy($0, *($15 + [8]), $8, (int_64)0)
	$7 = *($17 + [12])
	*($17 + [16]) = $8
	*($17 + [127]) = [3]
	$8 = *(($0 + [8]))
	*($17 + [116]) = ($17 + [127])
	*($17 + [112]) = ($17 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [160])
	CALL $17($3, $7, $8, ($17 + [112]))
	goto $label$4 
	
.LABEL $label$6
	$8 = *(($13 + [24]))
	
.LABEL $label$5
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, $8, (int_64)0)
	
.LABEL $label$4
	$4 = *(($0 + [8]))
	CALL eosio_assert([1], [160])
	CALL eosio_assert(((int_32)*(($13 + [88])) == (int_32)$1), [208])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$2()), [256])
	*(($13 + [24])) = (int_64)0
	*(($13 + [32])) = $16
	$8 = *($13)
	$16 = CALL current_time()
	*(($13 + [80])) = (int_64)0
	*($13 + [40]) = (int_64)0
	*($13 + [56]) = (int_64)0
	*($13 + [64]) = (int_64)1000
	*(($13 + [72])) = (int_64)0
	*($13 + [16]) = (int_64)0
	$16 = ((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($13 + [48]) = ((int_64)$16 + (int_64)1800)
	*(($13 + [8])) = ((int_64)$16 + (int_64)77761800)
	CALL eosio_assert(((int_64)$8 == (int_64)*($13)), [320])
	*($17 + [120]) = $2
	*($17 + [116]) = ($17 + [16])
	*($17 + [112]) = ($17 + [16])
	CALL $7(($17 + [112]), $13)
	CALL db_update_i64(*(($13 + [92])), $4, ($17 + [16]), [88])
	$13 = ($0 + [152])
	if ( (uint_64)($8 <= *($13)) ){ goto $label$2 }
	*($13) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [128])
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [848])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6030912129371872608)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [784])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $6(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN7diamond13updateBalanceEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [8]) = $2
	*($10) = $3
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [672])
	$9 = *($0 + [8])
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $19($6, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [672])
	$9 = *($0 + [8])
	
.LABEL $label$6
	*($10 + [36]) = ($10 + [8])
	*($10 + [32]) = $10
	CALL eosio_assert([1], [160])
	CALL $21($6, $7, $9, ($10 + [32]))
	goto $label$3 
	
.LABEL $label$5
	$9 = *($0 + [8])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [16])
	*(($7 = CALL $56([40])) + [24]) = $6
	*($7 + [8]) = $3
	*($7) = $1
	*($7 + [16]) = $2
	CALL eosio_assert([1], [608])
	CALL memcpy(($10 + [32]), $7, [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($10 + [32]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [608])
	CALL memcpy((($10 + [32]) + [16]), ($7 + [16]), [8])
	$1 = *($7)
	$8 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $9, $1, ($10 + [32]), [24])
	*($7 + [28]) = $8
	$6 = ($0 + [32])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$8 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($10 + [24]) = $7
	$1 = *($7)
	*($10 + [32]) = $1
	*($10 + [20]) = $8
	$5 = ($0 + [44])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [48]))) ){ goto $label$10 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($10 + [24]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $20(($0 + [40]), ($10 + [24]), ($10 + [32]), ($10 + [20]))
	
.LABEL $label$9
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $57($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	$4 = *($1)
	$5 = *(*($3))
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	$6 = *($1 + [32])
	CALL eosio_assert(((uint_64)((int_64)$6 + (int_64)$5) > (uint_64)$6), [624])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	
.LABEL $label$1
	$3 = *(*($3 + [4]))
	if ( ((int_32)$3 == (int_32)[3]) ){ goto $label$2 }
	*($1 + [56]) = $3
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	$8 = $8
	$3 = ($8 + [-80])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($8 + [-15])
	CALL $18($7, $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [65])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $56([104])
	$5 = CALL current_time()
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [8]) = ((int_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)43200)
	$5 = CALL current_time()
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)1000
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = $0
	*($6 + [48]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $11(($8 + [32]), $6)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $57($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [416])
	CALL memcpy(($1 + [56]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $56(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $57($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $57($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $56($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $63($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $57($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN7diamond16executeStartGameEy (int_32 $0, int_64 $1)
{
	CALL _ZN7diamond12gamewasstartEv($0)
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, $1, (int_64)0)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $35($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $61($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $56($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $61($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $57($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $58($7)
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1136])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $36($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [416])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = $1
	*(($0 + [24])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$1 = CALL $34($1, ($0 + [16]))
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	*($0 + [44]) = *(*($2 + [8]))
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $56(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $57(*(($1 + [24])))
	
.LABEL $label$11
	CALL $57($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $57($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [848])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)8428043235007157248)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [784])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $60($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $56(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $57($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $56($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $34($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN7diamond2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$20 = (*([0] + [4]) - [224])
	*([0] + [4]) = $20
	CALL _ZN7diamond4pingEv($0)
	if ( ((int_64)*($1) == (int_64)*($0 + [8])) ){ goto $label$6 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1152]
	$15 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$12 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$16 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$8
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$7 }
	CALL eosio_assert(((int_64)$15 == (int_64)$2), [1168])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [8]))), [1200])
	$12 = ($1 + [24])
	CALL eosio_assert(((int_64)*($12) == (int_64)1397703940), [1344])
	$18 = ($1 + [16])
	$3 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$13 }
	$14 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$3 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$3 = [0]
	
.LABEL $label$13
	CALL eosio_assert($3, [1248])
	$14 = *($18)
	if ( ((int_64)$14 == (int_64)4900) ){ goto $label$20 }
	if ( ((int_64)$14 == (int_64)2) ){ goto $label$19 }
	if ( ((int_64)$14 != (int_64)1) ){ goto $label$18 }
	*(($12 = (($20 + [168]) + [12]))) = *(($18 + [12]))
	*(($3 = (($20 + [168]) + [8]))) = *(($18 + [8]))
	*($20 + [168]) = *($18)
	*($20 + [172]) = *(($18 + [4]))
	$14 = *($1)
	*((($20 + [8]) + [12])) = *($12)
	*((($20 + [8]) + [8])) = *($3)
	*($20 + [12]) = *($20 + [172])
	*($20 + [8]) = *($20 + [168])
	CALL _ZN7diamond8withdrawEyN5eosio5assetE($0, $14, ($20 + [8]))
	goto $label$2 
	
.LABEL $label$20
	$14 = *($1)
	CALL $64(($20 + [152]), ($1 + [32]))
	CALL _ZN7diamond16createInvateCodeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy($0, $14, ($20 + [152]), *(($1 + [16])))
	if ( ((*($20 + [152]) & [1]) == 0) ){ goto $label$4 }
	CALL $57(*($20 + [160]))
	goto $label$3 
	
.LABEL $label$19
	CALL _ZN7diamond12gamewasstartEv($0)
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, (int_64)2, (int_64)0)
	goto $label$5 
	
.LABEL $label$18
	$4 = ($0 + [136])
	$12 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)4986958867385548800, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$23 }
	$17 = CALL $10($4, $12)
	if ( ((int_64)*($17 + [80]) != (int_64)0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$17 = [0]
	
.LABEL $label$22
	CALL eosio_assert([0], [1280])
	
.LABEL $label$21
	*($20 + [144]) = *($1)
	$15 = *($17 + [56])
	$16 = *(($1 + [16]))
	$13 = CALL _Z15get_new_key_numyy($16, $15)
	*($20 + [136]) = $13
	$14 = (int_64)0
	CALL eosio_assert(((int_64)$13 != (int_64)0), [1312])
	*($20 + [128]) = ((int_64)((int_64)((uint_64)((int_64)$13 + (int_64)$15) / (uint_64)(int_64)10000) * (int_64)50) + (int_64)1000)
	CALL eosio_assert([1], [896])
	CALL $64(($20 + [112]), ($1 + [32]))
	*($20 + [104]) = (int_64)0
	*($20 + [100]) = [0]
	$5 = ($0 + [96])
	*($20 + [96]) = $5
	*($20 + [88]) = (int_64)0
	CALL _Z4trimRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($20 + [112]))
	$12 = *($20 + [112])
	if ( (( *($20 + [116]) ? uint_32($12 >> [1]) : ($12 & [1]) ) == 0) ){ goto $label$24 }
	$12 = CALL db_lowerbound_i64(*($5), *(($0 + [104])), (int_64)8428043235007157248, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$25 }
	$12 = CALL $28($5, $12)
	$6 = (($20 + [112]) | [1])
	$10 = ($20 + [120])
	
.LOOP $label$26:
	$9 = ($3 & [1])
	$3 = *($20 + [112])
	$3 = ( *($20 + [116]) ? uint_32($3 >> [1]) : $9 )
	$11 = *($10)
	$18 = *($12 + [16])
	if ( ($18 & [1]) ){ goto $label$28 }
	$19 = (($12 + [16]) + [1])
	$18 = uint_32($18 >> [1])
	goto $label$27 
	
.LABEL $label$28
	$19 = *(($12 + [24]))
	$18 = *(($12 + [20]))
	
.LABEL $label$27
	$7 = ( $3 ? $18 : ($3 <= $18) )
	if ( ($7 == 0) ){ goto $label$31 }
	if ( CALL memcmp($19, ( $11 ? $6 : $9 ), $7) ){ goto $label$30 }
	
.LABEL $label$31
	if ( ($18 <= $3) ){ goto $label$30 }
	if ( ((uint_32)$3 >= (uint_32)$18) ){ goto $label$29 }
	
.LABEL $label$30
	CALL eosio_assert([1], [128])
	$12 = CALL db_next_i64(*($12 + [44]), ($20 + [24]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$25 }
	$12 = CALL $28($5, $12)
	goto $label$26 
	
.LABEL $label$29
	*($20 + [100]) = $12
	*($20 + [96]) = $5
	
.LABEL $label$25
	$12 = *($20 + [100])
	if ( ($12 == 0) ){ goto $label$24 }
	$13 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $16) * (float_64)(float_64)0.06))
	*($20 + [104]) = $13
	*($20 + [88]) = $13
	$13 = *(($0 + [8]))
	*($20 + [24]) = ($20 + [104])
	CALL eosio_assert([1], [160])
	CALL $40($5, $12, $13, ($20 + [24]))
	CALL _ZN7diamond13updateBalanceEyyy($0, *(*($20 + [100]) + [8]), *($20 + [104]), (int_64)0)
	
.LABEL $label$24
	$3 = ($0 + [56])
	$13 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $16) * (float_64)(float_64)0.05))
	*($20 + [80]) = $13
	$16 = (int_64))((int_64))((int_64))($16 - $13) - *($20 + [104])) - *($20 + [88]))
	$12 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$32 }
	CALL $6($3, $12)
	$14 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $16) * (float_64)(float_64)0.65))
	
.LABEL $label$32
	*($20 + [72]) = $14
	*($20 + [68]) = [0]
	*($20 + [64]) = [0]
	if ( (int_64)($14 == 0) ){ goto $label$35 }
	$14 = (int_64)0
	$9 = ($0 + [64])
	$18 = ($0 + [56])
	$12 = CALL db_lowerbound_i64(*($18), *($9), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$36 }
	$12 = CALL $6($3, $12)
	$14 = (int_64)0
	
.LOOP $label$37:
	if ( ((int_32)*($12 + [56]) != (int_32)[1]) ){ goto $label$38 }
	$14 = ((int_64)*($12 + [16]) + (int_64)$14)
	
.LABEL $label$38
	CALL eosio_assert([1], [128])
	$12 = CALL db_next_i64(*($12 + [76]), ($20 + [24]))
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$36 }
	$12 = CALL $6($3, $12)
	goto $label$37 
	
.LABEL $label$36
	$12 = CALL db_lowerbound_i64(*($18), *($9), (int_64)-6030912129371872608, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$33 }
	$8 = (CASTING float_64)(uint_64 $14)
	$18 = ($0 + [8])
	$12 = CALL $6($3, $12)
	if ( (*($12 + [56]) == 0) ){ goto $label$34 }
	$21 = [3]
	goto $label$1 
	
.LABEL $label$35
	*($20 + [72]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $16) * (float_64)(float_64)0.65))
	$21 = [6]
	goto $label$1 
	
.LABEL $label$34
	$21 = [1]
	goto $label$1 
	
.LABEL $label$33
	$21 = [6]
	goto $label$1 
	
.LABEL $label$6
	$21 = [14]
	goto $label$1 
	
.LABEL $label$5
	$21 = [14]
	goto $label$1 
	
.LABEL $label$4
	$21 = [14]
	goto $label$1 
	
.LABEL $label$3
	$21 = [14]
	goto $label$1 
	
.LABEL $label$2
	$21 = [14]
	
.LABEL $label$1
	
.LOOP $label$39:
	goto $label$63 
	
.LABEL $label$66
	$13 = ((int_64)*($12 + [24]) << (int_64)1)
	$16 = *($12 + [32])
	$14 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($20 + [72])) * (float_64)((float_64)(CASTING float_64)(uint_64 *($12 + [16])) / (float_64)$8)))
	if ( ((uint_64)((int_64)$14 + (int_64)$16) >= (uint_64)$13) ){ goto $label$45 }
	$21 = [5]
	goto $label$39 
	
.LABEL $label$65
	*($20 + [24]) = $14
	*($20 + [216]) = [3]
	$16 = *($18)
	*($20 + [196]) = ($20 + [216])
	*($20 + [192]) = ($20 + [24])
	CALL eosio_assert([1], [160])
	CALL $17($3, $12, $16, ($20 + [192]))
	goto $label$49 
	
.LABEL $label$64
	$14 = (int_64)
	*($20 + [24]) = $14($13 - $16))
	*($20 + [216]) = [0]
	$16 = *($18)
	*($20 + [196]) = ($20 + [216])
	*($20 + [192]) = ($20 + [24])
	CALL eosio_assert([1], [160])
	CALL $17($3, $12, $16, ($20 + [192]))
	*($20 + [64]) = (*($20 + [64]) + [1])
	$21 = [0]
	goto $label$39 
	
.LABEL $label$63
	*($20 + [68]) = ((int_64)*($20 + [68]) + (int_64)$14)
	CALL _ZN7diamond13updateBalanceEyyy($0, *($12 + [8]), $14, (int_64)0)
	goto $label$50 
	
.LABEL $label$62
	$12 = CALL $6($3, $12)
	if ( *($12 + [56]) ){ goto $label$48 }
	$21 = [1]
	goto $label$39 
	
.LABEL $label$61
	CALL eosio_assert([1], [128])
	$12 = CALL db_next_i64(*($12 + [76]), ($20 + [24]))
	if ( ((int_32)$12 >= (int_32)[0]) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$60
	$14 = *($20 + [80])
	$16 = (int_64)
	if ( (int_64)($16(*($20 + [72]) - *($20 + [68]))) == 0) ){ goto $label$44 }
	$21 = [7]
	goto $label$39 
	
.LABEL $label$59
	$14 = ((int_64)$14 + (int_64)$16)
	*($20 + [80]) = $14
	$21 = [8]
	goto $label$39 
	
.LABEL $label$58
	CALL _ZN7diamond13updateBalanceEyyy($0, (int_64)7970147488347626400, $14, (int_64)0)
	CALL _ZN7diamond13updateBalanceEyyy($0, *($20 + [144]), *($20 + [88]), *(($1 + [16])))
	$14 = *(($0 + [8]))
	*($20 + [28]) = $0
	*($20 + [36]) = $1
	*($20 + [24]) = ($20 + [144])
	*($20 + [32]) = ($20 + [136])
	*($20 + [40]) = ($20 + [104])
	*($20 + [44]) = ($20 + [96])
	*($20 + [48]) = ($20 + [88])
	*($20 + [216]) = $14
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [16])
	*($20 + [192]) = $3
	*($20 + [196]) = ($20 + [24])
	*($20 + [200]) = ($20 + [216])
	*(($12 = CALL $56([88])) + [24]) = (int_64)0
	*($12 + [16]) = (int_64)0
	*($12 + [32]) = (int_64)0
	$14 = CALL current_time()
	*($12 + [56]) = [1]
	*($12 + [64]) = (int_64)0
	*($12 + [72]) = $3
	*($12 + [40]) = ((int_64)((uint_64)$14 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $41(($20 + [192]), $12)
	*($20 + [208]) = $12
	$14 = *($12)
	*($20 + [192]) = $14
	$18 = *($12 + [76])
	*($20 + [188]) = $18
	$9 = ($0 + [84])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [88]))) ){ goto $label$43 }
	$21 = [15]
	goto $label$39 
	
.LABEL $label$57
	*($3 + [8]) = $14
	*($3 + [16]) = $18
	*($20 + [208]) = [0]
	*($3) = $12
	*($9) = ($3 + [24])
	goto $label$42 
	
.LABEL $label$56
	CALL $13(($0 + [80]), ($20 + [208]), ($20 + [192]), ($20 + [188]))
	$21 = [10]
	goto $label$39 
	
.LABEL $label$55
	$12 = *($20 + [208])
	*($20 + [208]) = [0]
	if ( ($12 == 0) ){ goto $label$41 }
	$21 = [11]
	goto $label$39 
	
.LABEL $label$54
	CALL $57($12)
	$21 = [12]
	goto $label$39 
	
.LABEL $label$53
	$14 = *(($0 + [8]))
	*($20 + [28]) = $1
	*($20 + [24]) = ($20 + [136])
	*($20 + [32]) = ($20 + [72])
	*($20 + [36]) = ($20 + [88])
	*($20 + [40]) = ($20 + [104])
	*($20 + [44]) = ($20 + [68])
	*($20 + [48]) = ($20 + [80])
	*($20 + [52]) = ($20 + [128])
	*($20 + [56]) = ($20 + [64])
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [160])
	CALL $42($4, $17, $14, ($20 + [24]))
	if ( ((*($20 + [112]) & [1]) == 0) ){ goto $label$40 }
	$21 = [13]
	goto $label$39 
	
.LABEL $label$52
	CALL $57(*($20 + [120]))
	$21 = [14]
	goto $label$39 
	
.LABEL $label$51
	*([0] + [4]) = ($20 + [224])
	return 
	
.LABEL $label$50
	$21 = [1]
	goto $label$39 
	
.LABEL $label$49
	$21 = [0]
	goto $label$39 
	
.LABEL $label$48
	$21 = [3]
	goto $label$39 
	
.LABEL $label$47
	$21 = [6]
	goto $label$39 
	
.LABEL $label$46
	$21 = [2]
	goto $label$39 
	
.LABEL $label$45
	$21 = [4]
	goto $label$39 
	
.LABEL $label$44
	$21 = [8]
	goto $label$39 
	
.LABEL $label$43
	$21 = [9]
	goto $label$39 
	
.LABEL $label$42
	$21 = [10]
	goto $label$39 
	
.LABEL $label$41
	$21 = [12]
	goto $label$39 
	
.LABEL $label$40
	$21 = [14]
	goto $label$39 
	$21
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $53([1716], $0)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $54($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10112])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10198]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10200])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10198]) = [1]
	$7 = ($7 << [16])
	*([0] + [10200]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10200])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10200]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10198]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10198]) = [1]
	$3 = ($3 << [16])
	*([0] + [10200]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10200])
	
.LABEL $label$8
	*([0] + [10200]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10100])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9908]
	$1 = (((int_32)$2 * (int_32)[12]) + [9908])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $57 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}