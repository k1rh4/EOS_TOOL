(data (i32.const 8192) "unfind SETTING_ID\00")
(data (i32.const 8210) "not found accessControl\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8320) "accessControl not found \00")
(data (i32.const 8345) "----------to-------------:\00")
(data (i32.const 8372) "eosio.token\00")
(data (i32.const 8384) "transfer\00")
(data (i32.const 8394) "gamebet reward RPG \00")
(data (i32.const 8414) ":\00")
(data (i32.const 8416) "&&\00")
(data (i32.const 8419) "gameid: \00")
(data (i32.const 8428) "oasiswallet5\00")
(data (i32.const 8441) "arpgwallet11\00")
(data (i32.const 8454) "arpgwallet22\00")
(data (i32.const 8467) "oasiswallet3\00")
(data (i32.const 8480) "oasiswallet1\00")
(data (i32.const 8493) "oasiswallet2\00")
(data (i32.const 8506) "oasisbancor1\00")
(data (i32.const 8519) "not support sym\00")
(data (i32.const 8535) "invalid symbol name\00")
(data (i32.const 8555) "invalid supply\00")
(data (i32.const 8570) "max-supply must be positive\00")
(data (i32.const 8598) "user1 account does not exist\00")
(data (i32.const 8627) "user2 account does not exist\00")
(data (i32.const 8656) "user3 account does not exist\00")
(data (i32.const 8685) "user4 account does not exist\00")
(data (i32.const 8714) "user5 account does not exist\00")
(data (i32.const 8743) "user6 account does not exist\00")
(data (i32.const 8772) "user7 account does not exist\00")
(data (i32.const 8801) "user8 account does not exist\00")
(data (i32.const 8830) "user9 account does not exist\00")
(data (i32.const 8859) "token with symbol already exists\00")
(data (i32.const 8892) "amount must be positive\00")
(data (i32.const 8916) "no balance object found\00")
(data (i32.const 8940) "overdrawn balance\00")
(data (i32.const 8958) "not found issuer\00")
(data (i32.const 8975) "refund request not found\00")
(data (i32.const 9000) "refund is not available yet\00")
(data (i32.const 9028) "invalid  account\00")
(data (i32.const 9045) "dividend\00")
(data (i32.const 9054) "today calcloop finished, not accounts\00")
(data (i32.const 9092) "today calcloop finished\00")
(data (i32.const 9116) "memo has more than 256 bytes\00")
(data (i32.const 9145) "token with symbol does not exist, create token before issue\00")
(data (i32.const 9205) "invalid quantity\00")
(data (i32.const 9222) "must issue positive quantity\00")
(data (i32.const 9251) "symbol precision mismatch\00")
(data (i32.const 9277) "quantity exceeds available supply\00")
(data (i32.const 9311) "gamebet reward RPG\00")
(data (i32.const 9330) "sell rpg\00")
(data (i32.const 9339) "issue\00")
(data (i32.const 9345) "gamebet brokerage gameid\00")
(data (i32.const 9370) "memo == null\00")
(data (i32.const 9383) "can\'t transfer RPG\00")
(data (i32.const 9402) "cannot transfer to self\00")
(data (i32.const 9426) "to account does not exist\00")
(data (i32.const 9452) "unfind statstable keys\00")
(data (i32.const 9475) "must transfer positive quantity\00")
(data (i32.const 9507) "unexpected asset symbol input\00")
(data (i32.const 9537) "sellrpg  user1 account does not exist\00")
(data (i32.const 9575) "sellrpg invalid quantity\00")
(data (i32.const 9600) "sellrpg must transfer positive quantity\00")
(data (i32.const 9640) "sellrpg symbol precision mismatch\00")
(data (i32.const 9674) "sellrpg no balance object found\00")
(data (i32.const 9706) "sellrpg overdrawn balance\00")
(data (i32.const 9732) "accountbases not found\00")
(data (i32.const 9755) "oasisbancor2\00")
(data (i32.const 9768) "sell rpg, reserve fund pay out\00")
(data (i32.const 9799) "sell rpg, exchange reserve fund payout\00")
(data (i32.const 9838) "sell rpg fee to player dividend\00")
(data (i32.const 9870) "outEos is zero\00")
(data (i32.const 9885) "sell rpg, get eos\00")
(data (i32.const 9903) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9967) "0123456789\00")
(data (i32.const 9978) "write\00")
(data (i32.const 9984) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10036) "8\'\00\00")
(data (i32.const 10040) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10073) "bancor contract closed\00")
(data (i32.const 10096) "attempt to add asset with different symbol\00")
(data (i32.const 10139) "addition underflow\00")
(data (i32.const 10158) "addition overflow\00")
(data (i32.const 10176) "attempt to subtract asset with different symbol\00")
(data (i32.const 10224) "subtraction underflow\00")
(data (i32.const 10246) "subtraction overflow\00")
(data (i32.const 10267) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10318) "error reading iterator\00")
(data (i32.const 10341) "read\00")
(data (i32.const 10346) "cannot create objects in table of another contract\00")
(data (i32.const 10397) "cannot pass end iterator to modify\00")
(data (i32.const 10432) "object passed to modify is not in multi_index\00")
(data (i32.const 10478) "cannot modify objects in table of another contract\00")
(data (i32.const 10529) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10588) "cannot pass end iterator to erase\00")
(data (i32.const 10622) "cannot increment end iterator\00")
(data (i32.const 10652) "object passed to erase is not in multi_index\00")
(data (i32.const 10697) "cannot erase objects in table of another contract\00")
(data (i32.const 10747) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10800) "get\00")
(data (i32.const 19216) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 19232) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 19248) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_idx64_store" (func $fimport$8 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$10 (param i32)))
(import "env" "printdf" (func $fimport$11 (param f64)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$15 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$22 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$23 (param i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $76))
(export "_ZdlPv" (func $112))
(export "_Znwj" (func $110))
(export "_Znaj" (func $111))
(export "_ZdaPv" (func $113))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $41 $48 $62 $16 $40 $51 $42 $10 $47 $63 $60 $18 $39 $72 $69)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19264))
(global $global$2 i32 (i32.const 19264))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9978])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $95(CALL $94($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9978])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9978])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $95($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9978])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9978])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9978])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9978])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9978])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9978])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9978])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9978])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $115(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $115(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $108(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10808]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10812])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10808]) = [1]
	$2 = ($2 << [16])
	*([0] + [10812]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10812])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10812]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10808]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10808]) = [1]
	$3 = ($3 << [16])
	*([0] + [10812]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10812])
	
.LABEL $label$10
	*([0] + [10812]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_64 .FUNC $130 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $132($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $129($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [19232])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [19216]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [19248]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $131($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $131 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $132 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $135($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $136 (int_32 $0)
{
	return CALL $137([10816], $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $138($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8234])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1, float_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = (int_64)2000000
	$4 = (int_64)4607182418800017408
	if ( ((float_64)$2 < (float_64)(float_64)2e6) ){ goto $label$1 }
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)2e6) ^ (int_32)[1]) ){ goto $label$2 }
	if ( (((float_64)$2 < (float_64)(float_64)11e6) == 0) ){ goto $label$2 }
	$3 = (int_64)11000000
	$4 = (int_64)4606281698874543309
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)11e6) ^ (int_32)[1]) ){ goto $label$3 }
	if ( (((float_64)$2 < (float_64)(float_64)59e6) == 0) ){ goto $label$3 }
	$3 = (int_64)59000000
	$4 = (int_64)4605380978949069210
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)59e6) ^ (int_32)[1]) ){ goto $label$4 }
	if ( (((float_64)$2 < (float_64)(float_64)311e6) == 0) ){ goto $label$4 }
	$3 = (int_64)311000000
	$4 = (int_64)4604480259023595110
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)311e6) ^ (int_32)[1]) ){ goto $label$5 }
	if ( (((float_64)$2 < (float_64)(float_64)1607e6) == 0) ){ goto $label$5 }
	$3 = (int_64)1607000000
	$4 = (int_64)4603579539098121011
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)1607e6) ^ (int_32)[1]) ){ goto $label$6 }
	if ( (((float_64)$2 < (float_64)(float_64)8087e6) == 0) ){ goto $label$6 }
	$3 = (int_64)8087000000
	$4 = (int_64)4602678819172646912
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)8087e6) ^ (int_32)[1]) ){ goto $label$7 }
	if ( (((float_64)$2 < (float_64)(float_64)39191e6) == 0) ){ goto $label$7 }
	$3 = (int_64)39191000000
	$4 = (int_64)4600877379321698714
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)39191e6) ^ (int_32)[1]) ){ goto $label$8 }
	if ( (((float_64)$2 < (float_64)(float_64)179159e6) == 0) ){ goto $label$8 }
	$3 = (int_64)179159000000
	$4 = (int_64)4599075939470750515
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)179159e6) ^ (int_32)[1]) ){ goto $label$9 }
	if ( (((float_64)$2 < (float_64)(float_64)739031e6) == 0) ){ goto $label$9 }
	$3 = (int_64)739031000000
	$4 = (int_64)4596373779694328218
	goto $label$1 
	
.LABEL $label$9
	$3 = (int_64)0
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)739031e6) ^ (int_32)[1]) ){ goto $label$1 }
	$3 = (int_64)100000000000000
	$4 = (int_64)4591870180066957722
	
.LABEL $label$1
	CALL eosio_assert([1], [9984])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$5 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$14 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	
.LABEL $label$10
	CALL eosio_assert($8, [8535])
	*($0 + [8]) = $3
	*($0) = $4
	*(($0 + [16])) = (int_64)1397703940
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $134(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10267])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $50($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10267])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $48 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8535])
	$10 = [0]
	$9 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $11
	$9 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8555])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8892])
	*((($3 + [40]) + [32])) = [0]
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [40]) = *($0)
	$4 = CALL $49(($3 + [40]), $6, [8916])
	CALL eosio_assert(((int_64)*($4) >= (int_64)$8), [8940])
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$7 = *($0)
	*($3) = $7
	$9 = CALL db_find_i64($7, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $19($3, $9)
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$3), [10267])
	
.LABEL $label$11
	$12 = *($10 + [48])
	$11 = *($4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [40])), [10432])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$2()), [10478])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [10176])
	$6 = (int_64)
	*($4) = $6(*($4) - $8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10224])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [10246])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [10529])
	CALL eosio_assert([1], [9978])
	CALL memcpy(($3 + [80]), $4, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($3 + [80]) | [8]), ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), $1, ($3 + [80]), [16])
	$12 = ((float_64)$12 * (float_64)((float_64)(CASTING float_64)(int_64 $8) / (float_64)(CASTING float_64)(int_64 $11)))
	$4 = (($3 + [40]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$12 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10397])
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$3), [10432])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$2()), [10478])
	$7 = *($10)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [16]))), [10096])
	$8 = ((int_64)*($10 + [8]) + (int_64)$8)
	*($10 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [10158])
	*($10 + [56]) = ((float_64)$12 + (float_64)*($10 + [56]))
	*($10 + [48]) = (float_64))(*($10 + [48]) - $12)
	CALL eosio_assert(((int_64)$7 == (int_64)*($10)), [10529])
	*($3 + [160]) = (($3 + [80]) + [72])
	*($3 + [156]) = ($3 + [80])
	*($3 + [152]) = ($3 + [80])
	*($3 + [168]) = ($3 + [152])
	*($3 + [180]) = ($10 + [8])
	*($3 + [176]) = $10
	*($3 + [184]) = ($10 + [24])
	*($3 + [188]) = ($10 + [40])
	*($3 + [192]) = ($10 + [48])
	*($3 + [196]) = ($10 + [56])
	*($3 + [200]) = ($10 + [64])
	*($3 + [204]) = ($10 + [72])
	CALL $28(($3 + [176]), ($3 + [168]))
	CALL db_update_i64(*($10 + [80]), $1, ($3 + [80]), [72])
	if ( (uint_64)($7 <= *(($3 + [16]))) ){ goto $label$13 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*(($4 = ($0 + [200]))) = ((float_64)$12 + (float_64)*($4))
	CALL $11($0, $1)
	CALL $37($0)
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$14 }
	$2 = ($3 + [28])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $10
	
.LABEL $label$15
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$19 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL _ZdlPv($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [64]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($3 + [208])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $124($0, $1, $2, CALL $135($2))
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $44($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $103(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8535])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8555])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8570])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $43(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])), [10267])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8859])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$2()), [10346])
	$4 = CALL _Znwj([56])
	CALL $44($4)
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $45(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $46(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9, int_64 $10, int_32 $11)
{
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$12 = ($global$0 - [112])
	$global$0 = $12
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	$13 = (int_64)0
	$14 = (int_64)59
	$15 = [8506]
	$16 = (int_64)0
	
.LOOP $label$1:
	$17 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$2 }
	$18 = *($15)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$18 = ($18 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$18 = ( ($18 + [-48]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$17 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $18) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($16)
	$13 = *($11 + [8])
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [8519])
	$15 = [0]
	$14 = (uint_64)$13 >> (uint_64)(int_64)8
	$13 = $14)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$17 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$13 = $17
	$18 = [1]
	$19 = $15
	$15 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$13 = $17
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$18 = ((int_32)$15 < (int_32)[6])
	$19 = ($15 + [1])
	$15 = $19
	if ( $18 ){ goto $label$9 }
	$18 = [1]
	$15 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$18 = [0]
	
.LABEL $label$5
	CALL eosio_assert($18, [8535])
	$18 = [0]
	$17 = *($11)
	if ( ((uint_64)((int_64)$17 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$15 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$14 = $13
	$18 = [1]
	$19 = $15
	$15 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$14 = $13
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$18 = ((int_32)$15 < (int_32)[6])
	$19 = ($15 + [1])
	$15 = $19
	if ( $18 ){ goto $label$14 }
	$18 = [1]
	$15 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$18 = [0]
	
.LABEL $label$10
	CALL eosio_assert($18, [8555])
	CALL eosio_assert(((int_64)$17 > (int_64)0), [8570])
	CALL eosio_assert(CALL $fimport$14($2), [8598])
	CALL eosio_assert(CALL $fimport$14($3), [8627])
	CALL eosio_assert(CALL $fimport$14($4), [8656])
	CALL eosio_assert(CALL $fimport$14($5), [8685])
	CALL eosio_assert(CALL $fimport$14($6), [8714])
	CALL eosio_assert(CALL $fimport$14($7), [8743])
	CALL eosio_assert(CALL $fimport$14($8), [8772])
	CALL eosio_assert(CALL $fimport$14($9), [8801])
	CALL eosio_assert(CALL $fimport$14($10), [8830])
	$13 = *($11)
	$14 = *(($11 + [8]))
	*(($12 + [8])) = $14
	*((($12 + [16]) + [8])) = $14
	*($12 + [40]) = $3
	*($12 + [32]) = $2
	*($12 + [48]) = $4
	*($12 + [56]) = $5
	*($12 + [64]) = $6
	*($12 + [72]) = $7
	*($12 + [80]) = $8
	*($12 + [88]) = $9
	*($12 + [96]) = $10
	*($12) = $13
	*($12 + [16]) = $13
	CALL $26($0, $1, ($12 + [32]), [9], $12)
	$global$0 = ($12 + [112])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$6 = ($global$0 - [64])
	$global$0 = $6
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	$7 = (int_64)0
	$8 = (int_64)59
	$9 = [8506]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$12 = *($9)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$12 = ($12 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$12 = ( ($12 + [-48]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $12) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($10)
	$7 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [8519])
	$9 = [0]
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	$7 = $8)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$7 = $11
	$12 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$7 = $11
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $12 ){ goto $label$9 }
	$12 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$12 = [0]
	
.LABEL $label$5
	CALL eosio_assert($12, [8535])
	$12 = [0]
	$11 = *($5)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$9 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $7
	$12 = [1]
	$13 = $9
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$8 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$12 = ((int_32)$9 < (int_32)[6])
	$13 = ($9 + [1])
	$9 = $13
	if ( $12 ){ goto $label$14 }
	$12 = [1]
	$9 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	
.LABEL $label$10
	CALL eosio_assert($12, [8555])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8570])
	CALL eosio_assert(CALL $fimport$14($2), [8598])
	CALL eosio_assert(CALL $fimport$14($3), [8627])
	CALL eosio_assert(CALL $fimport$14($4), [8656])
	$7 = *($5)
	$8 = *(($5 + [8]))
	*(($6 + [8])) = $8
	*((($6 + [16]) + [8])) = $8
	*($6 + [40]) = $3
	*($6 + [32]) = $2
	*($6 + [48]) = $4
	*($6) = $7
	*($6 + [16]) = $7
	CALL $26($0, $1, ($6 + [32]), [3], $6)
	$global$0 = ($6 + [64])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9984])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8535])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8535])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8535])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8535])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $118($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $128 (int_32 $0)
{
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10267])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607572834567340032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10267])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $6 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$0), [10267])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4154159847563875632, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$0), [10267])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10341])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [10341])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = *((*(*($0 + [4])) + [56]))
	$4 = *($0)
	CALL eosio_assert([1], [9984])
	$5 = ($1 + [8])
	$6 = ($1 + [16])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8535])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)2000000
	*($1 + [48]) = (int_64)4579800533065604792
	*($1 + [56]) = (int_64)4607182418800017408
	*($1 + [64]) = (int_64)4591870180066957722
	*($1 + [96]) = [4000]
	*($1 + [24]) = (int_64)0
	*($1 + [72]) = (int_64)4584304132692975288
	CALL eosio_assert([1], [9984])
	$12 = ($1 + [72])
	$13 = ($1 + [24])
	$14 = ($1 + [96])
	$15 = ($1 + [64])
	$16 = ($1 + [56])
	$17 = ($1 + [48])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8535])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)0
	*($1 + [104]) = (int_64)4596373779694328218
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)4591870180066957722
	*($1 + [152]) = (int_64)4606281698874543309
	*($1 + [128]) = (int_64)4591870180066957722
	$10 = $2
	$8 = ($10 + [-160])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-8])
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $13
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $17
	*($3 + [48]) = $16
	*($3 + [52]) = $15
	*($3 + [56]) = $12
	*($3 + [60]) = ($1 + [80])
	*($3 + [64]) = $14
	*($3 + [68]) = ($1 + [104])
	*($3 + [72]) = ($1 + [112])
	*($3 + [76]) = ($1 + [120])
	*($3 + [80]) = ($1 + [128])
	*($3 + [84]) = ($1 + [136])
	*($3 + [88]) = ($1 + [144])
	*($3 + [92]) = ($1 + [152])
	CALL $17(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [164]) = CALL db_store_i64(*($4 + [8]), (int_64)4154159847563875632, *(*($0 + [8])), $7, $8, [152])
	if ( ((uint_64)*($4 + [16]) > (uint_64)$7) ){ goto $label$11 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$11
	$global$0 = ($3 + [96])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [9984])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8535])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8535])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8535])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8535])
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([176])
	CALL $2($5)
	*($5 + [160]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [80])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [112])
	*($3 + [92]) = ($5 + [120])
	*($3 + [96]) = ($5 + [128])
	*($3 + [100]) = ($5 + [136])
	*($3 + [104]) = ($5 + [144])
	*($3 + [108]) = ($5 + [152])
	CALL $100(($3 + [40]), ($3 + [32]))
	*($5 + [164]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $5(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [300]
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [56]) = [2]
	*(($3 = ($0 + [24]))) = (int_64)0
	*(($0 + [32])) = (int_64)-1
	*(($4 = ($0 + [40]))) = (int_64)0
	*(($0 + [48])) = [0]
	$5 = CALL $2(($0 + [64]))
	*(($0 + [232])) = (int_64)0
	*($0 + [224]) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	*(($0 + [260])) = [0]
	*(($0 + [264])) = [1]
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = (int_64)-1
	*(($0 + [296])) = (int_64)0
	*(($0 + [304])) = [0]
	*($0 + [272]) = *($0)
	$6 = ($0 + [16])
	$1 = *($0 + [56])
	$8 = *(($0 + [44]))
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$6), [10267])
	if ( $9 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($6), *($3), (int_64)4154159847563875632, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $3($6, $4) + [160]) == (int_32)$6), [10267])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [8]) = $0
	*($2 + [40]) = $1
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [10346])
	*($2 + [16]) = $6
	*($2 + [20]) = ($2 + [8])
	*($2 + [24]) = ($2 + [40])
	$4 = CALL _Znwj([176])
	CALL $2($4)
	*($4 + [160]) = $6
	CALL $4(($2 + [16]), $4)
	*($2 + [32]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	$7 = *($4 + [164])
	*($2 + [12]) = $7
	$9 = ($0 + [44])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [48]))) ){ goto $label$7 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($2 + [32]) = [0]
	*($8) = $4
	*($9) = ($8 + [24])
	$4 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL $5(($0 + [40]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$4 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$3 = ($0 + [272])
	CALL memcpy($5, CALL $6($6, *(($0 + [56])), [8192]), [160])
	$1 = *(($0 + [264]))
	$8 = *(($0 + [300]))
	$7 = *(($0 + [296]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$11 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$3), [10267])
	if ( $9 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*(($0 + [272])), *(($0 + [280])), (int_64)3607572834567340032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $7($3, $4) + [16]) == (int_32)$3), [10267])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL $fimport$2()), [10346])
	*(($4 = CALL _Znwj([32])) + [16]) = $3
	*($4 + [8]) = [1]
	*($4) = *(($0 + [264]))
	CALL eosio_assert([1], [9978])
	CALL memcpy(($2 + [16]), $4, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($2 + [16]) | [8]), ($4 + [8]), [4])
	$1 = *($4)
	$7 = CALL db_store_i64(*(($0 + [280])), (int_64)3607572834567340032, $10, $1, ($2 + [16]), [12])
	*($4 + [20]) = $7
	$8 = ($0 + [288])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$13 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($2 + [40]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	*($2 + [32]) = $7
	$9 = ($0 + [300])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [304]))) ){ goto $label$15 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($2 + [40]) = [0]
	*($8) = $4
	*($9) = ($8 + [24])
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( $4 ){ goto $label$14 }
	goto $label$8 
	
.LABEL $label$15
	CALL $8(($0 + [296]), ($2 + [40]), ($2 + [16]), ($2 + [32]))
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = CALL $9($3, *(($0 + [264])), [8210])
	*($0 + [312]) = *($4)
	*(($0 + [320])) = *(($4 + [8]))
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [224])
	$5 = *(($0 + [252]))
	$4 = *(($0 + [248]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [10267])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [232])), (int_64)5455799419177145712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $12($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [10267])
	
.LABEL $label$2
	CALL eosio_assert([1], [10588])
	CALL eosio_assert([1], [10622])
	$6 = CALL db_next_i64(*($7 + [20]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $12($3, $6)
	
.LABEL $label$6
	CALL $15($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10652])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [10697])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10747])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [20]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5455799419177145712, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [16])
	$5 = *(($0 + [56]))
	$7 = *(($0 + [44]))
	$6 = *(($0 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$4), [10267])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)4154159847563875632, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $3($4, $8)
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$4), [10267])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [10397])
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$4), [10432])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [10478])
	*($9 + [8]) = (CASTING float_64)(int_64 $1)
	*($9 + [24]) = (CASTING float_64)(int_64 $2)
	$8 = *($9)
	$7 = *(($0 + [56]))
	*($9) = $7
	CALL eosio_assert(((int_32)$8 == (int_32)$7), [10529])
	*($3 + [168]) = ($3 + [152])
	*($3 + [164]) = $3
	*($3 + [160]) = $3
	*($3 + [176]) = ($3 + [160])
	*($3 + [188]) = ($9 + [8])
	*($3 + [184]) = $9
	*($3 + [192]) = ($9 + [16])
	*($3 + [196]) = ($9 + [24])
	*($3 + [200]) = ($9 + [32])
	*($3 + [204]) = ($9 + [48])
	*($3 + [208]) = ($9 + [56])
	*($3 + [212]) = ($9 + [64])
	*($3 + [216]) = ($9 + [72])
	*($3 + [220]) = ($9 + [80])
	*($3 + [224]) = ($9 + [96])
	*($3 + [228]) = ($9 + [104])
	*($3 + [232]) = ($9 + [112])
	*($3 + [236]) = ($9 + [120])
	*($3 + [240]) = ($9 + [128])
	*($3 + [244]) = ($9 + [136])
	*($3 + [248]) = ($9 + [144])
	*($3 + [252]) = ($9 + [152])
	CALL $17(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($9 + [164]), (int_64)0, $3, [152])
	$5 = (CASTING uint_64)(uint_32 $8)
	$9 = ($0 + [32])
	if ( ((uint_64)*($9) > (uint_64)$5) ){ goto $label$5 }
	*($9) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$5
	$global$0 = ($3 + [256])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [272])
	$4 = *($0 + [264])
	$6 = *(($0 + [300]))
	$5 = *(($0 + [296]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [10267])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [280])), (int_64)3607572834567340032, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $7($3, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [10267])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8320])
	CALL eosio_assert($7, [10397])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [10432])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL $fimport$2()), [10478])
	*($8 + [8]) = $1
	$4 = *($8)
	CALL eosio_assert([1], [10529])
	CALL eosio_assert([1], [9978])
	CALL memcpy($2, $8, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy(($2 | [8]), ($8 + [8]), [4])
	CALL db_update_i64(*($8 + [20]), (int_64)0, $2, [12])
	$7 = ($0 + [288])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [224])
	$5 = *(($0 + [252]))
	$4 = *(($0 + [248]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [10267])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [232])), (int_64)5455799419177145712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $12($3, $6) + [16]) == (int_32)$3), [10267])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [224])) == (int_64)CALL $fimport$2()), [10346])
	*(($6 = CALL _Znwj([32])) + [16]) = $3
	*($6) = $1
	*($6 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9978])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [9978])
	$5 = ($6 + [8])
	CALL memcpy((($2 + [16]) | [8]), $5, [8])
	$1 = *($6)
	$4 = ($0 + [232])
	*($6 + [20]) = CALL db_store_i64(*($4), (int_64)5455799419177145712, $8, $1, ($2 + [16]), [16])
	$7 = ($0 + [240])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$6 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$1 = *($4)
	$9 = *($6)
	*($2 + [40]) = *($5)
	*($6 + [24]) = CALL db_idx64_store($1, (int_64)5455799419177145712, $8, $9, ($2 + [40]))
	*($2 + [40]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	$4 = *(($6 + [20]))
	*($2 + [12]) = $4
	$7 = ($0 + [252])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [256]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [40]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL $13(($0 + [248]), ($2 + [40]), ($2 + [16]), ($2 + [12]))
	$6 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10341])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10341])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $49(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8916]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [8940])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [10432])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$2()), [10478])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [10176])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10224])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10246])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10529])
	CALL eosio_assert([1], [9978])
	CALL memcpy(($3 + [48]), $0, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($3 + [48]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [48])) = [0]
	*($2 + [24]) = $1
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$4 = *($0)
	*($2 + [16]) = $4
	$0 = CALL db_find_i64($4, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $19(($2 + [16]), $0)
	CALL eosio_assert(((int_32)*($3 + [76]) == (int_32)($2 + [16])), [10267])
	*($2 + [8]) = ($2 + [56])
	CALL eosio_assert([1], [10397])
	CALL $20(($2 + [16]), $3, ($2 + [8]))
	
.LABEL $label$1
	CALL prints([8345])
	CALL printdf(*($3 + [48]))
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($2 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $29($5)
	*($5 + [76]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	CALL $101(($3 + [32]), ($3 + [24]))
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $96($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $24($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $97($2, $1)
	CALL $99(CALL $98(CALL $98($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $136($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $106($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [104]) = $1
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth($1)
	$4 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8535])
	$7 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8555])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8892])
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	*($3 + [64]) = *($0)
	*($3 + [72]) = $1
	$5 = CALL $52(($3 + [64]), $1, [8958])
	CALL eosio_assert(((int_64)*($5 + [8]) >= (int_64)*($2)), [8940])
	$6 = *($5 + [8])
	$4 = *($2)
	$9 = ((float_64)((float_64)*($5 + [56]) * (float_64)(CASTING float_64)(int_64 $4)) / (float_64)(CASTING float_64)(int_64 $6))
	*($3 + [56]) = $9
	*(($7 = ($0 + [200]))) = (float_64))(*($7) - $9)
	if ( ((int_64)$6 != (int_64)$4) ){ goto $label$12 }
	*($3 + [112]) = $2
	*($3 + [116]) = ($3 + [56])
	CALL $53(($3 + [64]), $5, ($3 + [112]))
	CALL $14($0, *($3 + [104]))
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [64])), [10432])
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$2()), [10478])
	$4 = *($5)
	$7 = ($2 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [16]))), [10176])
	$6 = (int_64)
	*($5 + [8]) = $6(*($5 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10224])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [10246])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [32]))), [10096])
	$6 = ((int_64)*($5 + [24]) + (int_64)*($2))
	*($5 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($5 + [24]) < (int_64)4611686018427387904), [10158])
	*($5 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = *($3 + [56])
	*(($7 = ($5 + [56]))) = (float_64))(*($7) - $9)
	*($5 + [48]) = ((float_64)$9 + (float_64)*($5 + [48]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10529])
	*($3 + [8]) = (($3 + [112]) + [72])
	*($3 + [4]) = ($3 + [112])
	*($3) = ($3 + [112])
	*($3 + [192]) = $3
	*($3 + [20]) = ($5 + [8])
	*($3 + [16]) = $5
	*($3 + [24]) = ($5 + [24])
	*($3 + [28]) = ($5 + [40])
	*($3 + [32]) = ($5 + [48])
	*($3 + [36]) = $7
	*($3 + [40]) = ($5 + [64])
	*($3 + [44]) = ($5 + [72])
	CALL $28(($3 + [16]), ($3 + [192]))
	CALL db_update_i64(*($5 + [80]), (int_64)0, ($3 + [112]), [72])
	$5 = (($3 + [64]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$11 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$5 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$6 = *($0)
	*($3 + [16]) = $6
	$4 = *($3 + [104])
	*($3 + [24]) = $4
	$7 = CALL db_find_i64($6, $4, (int_64)-5001342326447013888, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $54(($3 + [16]), $7)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [16])), [10267])
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [16])), [10432])
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL $fimport$2()), [10478])
	$4 = *($5)
	*($5 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($5 + [24]))), [10096])
	$6 = ((int_64)*($5 + [16]) + (int_64)*($2))
	*($5 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [10158])
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10529])
	*($3 + [200]) = (($3 + [112]) + [28])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [184]) = ($3 + [192])
	*($3 + [4]) = ($5 + [8])
	*($3) = $5
	*($3 + [8]) = ($5 + [16])
	CALL $55($3, ($3 + [184]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($3 + [112]), [28])
	$5 = (($3 + [16]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	goto $label$13 
	
.LABEL $label$14
	$1 = *($0)
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL $fimport$2()), [10346])
	*(($10 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$11 = ($10 + [16])
	$4 = (int_64)5462355
	
.LOOP $label$16:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$4 = $6
	$12 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$4 = $6
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$18 }
	$12 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	
.LABEL $label$15
	CALL eosio_assert($12, [8535])
	*($10 + [32]) = ($3 + [16])
	*($10) = *($3 + [104])
	$4 = CALL current_time()
	*($11) = *($2)
	*($10 + [8]) = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*(($11 + [8])) = *(($2 + [8]))
	*($3 + [200]) = (($3 + [112]) + [28])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [184]) = ($3 + [192])
	*($3 + [4]) = ($10 + [8])
	*($3) = $10
	*($3 + [8]) = $11
	CALL $55($3, ($3 + [184]))
	$4 = *($10)
	$7 = CALL db_store_i64(*((($3 + [16]) + [8])), (int_64)-5001342326447013888, $1, $4, ($3 + [112]), [28])
	*($10 + [36]) = $7
	$5 = ($3 + [32])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$19 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($3) = $10
	$4 = *($10)
	*($3 + [112]) = $4
	*($3 + [192]) = $7
	$5 = *((($3 + [16]) + [28]))
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [48]))) ){ goto $label$21 }
	*($5 + [8]) = $4
	*($5 + [16]) = $7
	*($3) = [0]
	*($5) = $10
	*(($3 + [44])) = ($5 + [24])
	$5 = *($3)
	*($3) = [0]
	if ( $5 ){ goto $label$20 }
	goto $label$13 
	
.LABEL $label$21
	CALL $56(($3 + [40]), $3, ($3 + [112]), ($3 + [192]))
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$4 = CALL current_time()
	*(($3 + [140])) = (int_64)0
	*(($3 + [156])) = (int_64)0
	*(($3 + [164])) = (int_64)0
	*($3 + [124]) = [0]
	*($3 + [128]) = [0]
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [148 align=4]) = (int_64)0
	*($3 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$5 = ($3 + [148])
	$6 = *($0)
	$4 = (int_64)6
	
.LOOP $label$22:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$22 }
	*($3 + [8]) = (int_64)3617214756542218240
	*($3) = $6
	$4 = (int_64)6
	
.LOOP $label$23:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$23 }
	*($3 + [192]) = (int_64)-5001342339331915776
	CALL $57($5, $3, $0, ($3 + [192]), ($3 + [104]))
	$4 = *($3 + [104])
	*(($3 + [132])) = [86400]
	*($3 + [8]) = (int_64)0
	*($3) = $4
	CALL cancel_deferred($3)
	*($3 + [8]) = (int_64)0
	*($3) = *($3 + [104])
	$4 = *($0)
	CALL $58(($3 + [192]), ($3 + [112]))
	$5 = *($3 + [192])
	CALL send_deferred($3, $4, $5, (*($3 + [196]) - $5), [1])
	$5 = *($3 + [192])
	if ( ($5 == 0) ){ goto $label$24 }
	*($3 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	CALL $37($0)
	CALL $59(($3 + [112]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$25 }
	$2 = ($3 + [44])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$29 }
	CALL _ZdlPv($7)
	
.LABEL $label$29
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($3 + [40]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $8
	
.LABEL $label$26
	*($2) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$8 = *($3 + [88])
	if ( ($8 == 0) ){ goto $label$30 }
	$2 = ($3 + [92])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$33 }
	$5 = *(($3 + [88]))
	goto $label$31 
	
.LABEL $label$32
	$5 = $8
	
.LABEL $label$31
	*($2) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$global$0 = ($3 + [208])
}

int_32 .FUNC $52 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)$0), [10267])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749778856088576, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $19($0, $4)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$0), [10267])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [10432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [10478])
	$5 = *($1)
	CALL eosio_assert([1], [9984])
	$6 = (int_64)4673618
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8535])
	*(($1 + [16])) = (int_64)1196446212
	*($1 + [8]) = (int_64)0
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [32]))), [10096])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($7))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [10158])
	$6 = CALL current_time()
	*($1 + [56]) = (int_64)0
	*($1 + [40]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	*($1 + [48]) = ((float_64)*(*($2 + [4])) + (float_64)*($1 + [48]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10529])
	$9 = $3
	$7 = ($9 + [-80])
	$global$0 = $7
	*($4 + [12]) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = ($9 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [40])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	*($4 + [60]) = ($1 + [72])
	CALL $28(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $7, [72])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $136($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$10 = ($9 + [16])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8535])
	*($9 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($9 + [8])
	*($3 + [32]) = $9
	*($3 + [40]) = $10
	CALL $104(($3 + [32]), ($3 + [24]))
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$11 = *($9)
	*($3 + [32]) = $11
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $56($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $139($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $123($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $114($0)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $24(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [9978])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [20])
	CALL $117($6, *(($4 + [4])))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$4 = ($9 + $4)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $136($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9978])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $102($3, $7)
	CALL $102($3, $6)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)4229853544465694720, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $139($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $139($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $136($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10804])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $136($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19200])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19008]
	$3 = (((int_32)$1 * (int_32)[12]) + [19008])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9984])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8535])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8535])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8535])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8535])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10800])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10341])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9984])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8535])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	*($4 + [64]) = (int_64)3617214756542218240
	*($4 + [56]) = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8372]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8384]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$9 }
	*(($4 + [32])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	CALL $115(($4 + [40]), $3)
	$0 = CALL $22(($4 + [72]), ($4 + [56]), $8, $11, ($4 + [8]))
	CALL $23(($4 + [112]), $0)
	$9 = *($4 + [112])
	CALL send_inline($9, (*($4 + [116]) - $9))
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$15 }
	*($4 + [116]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	$9 = *($0 + [28])
	if ( ($9 == 0) ){ goto $label$16 }
	*(($0 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$9 = *($0 + [16])
	if ( ($9 == 0) ){ goto $label$17 }
	*(($0 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [10432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [10478])
	$5 = *($1)
	*($1) = *(*($2))
	CALL eosio_assert([1], [9984])
	$6 = (int_64)4673618
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8535])
	*(($1 + [16])) = (int_64)1196446212
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$6 = (int_64)4673618
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8535])
	*(($1 + [32])) = (int_64)1196446212
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = [0]
	*($1 + [48]) = (int_64)4652007308841189376
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = [0]
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10529])
	$8 = $3
	$2 = ($8 + [-80])
	$global$0 = $2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($8 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [40])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	*($4 + [60]) = ($1 + [72])
	CALL $28(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $2, [72])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($4 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9978])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9978])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $95(CALL $94($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $24($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $25(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $102(*($1), ($0 + [32]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	float_64 $4
	int_32 $5
	float_64 $6
	float_64 $7
	float_64 $8
	int_64 $9
	int_64 $10
	float_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	int_64 $17
	float_64 $18
	int_32 $19
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [9507])
	$4 = *(($1 + [88]))
	$5 = *(($1 + [160]))
	$6 = *(($1 + [72]))
	$7 = *(($1 + [128]))
	$8 = *(($1 + [112]))
	$9 = *($2)
	$10 = *(($1 + [96]))
	CALL $38(($3 + [56]), $2, (CASTING float_64)(int_64 ((int_64)$10 + (int_64)1)))
	$11 = (CASTING float_64)(int_64 $9)
	$12 = ((float_64)$8 * (float_64)$11)
	$13 = ((float_64)$7 * (float_64)$12)
	$14 = (float_64))((float_64)1 - $7)
	$15 = (CASTING float_64)(int_64 $10)
	if ( (((int_32)((float_64)$6 >= (float_64)$15) ^ (int_32)[1]) == 0) ){ goto $label$6 }
	$16 = ((float_64)$6 + (float_64)$13)
	if ( ((int_32)((float_64)$16 < (float_64)$15) ^ (int_32)[1]) ){ goto $label$5 }
	$7 = ((float_64)((float_64)$13 * (float_64)(CASTING float_64)(uint_32 $5)) / (float_64)$7)
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$17 = (int_64)0
	goto $label$1 
	
.LABEL $label$6
	CALL $38(($3 + [32]), $2, $6)
	$9 = *($3 + [40])
	$18 = (CASTING float_64)(int_64 $9)
	$15 = *($3 + [32])
	$13 = ((float_64)$13 * (float_64)$15)
	$16 = ((float_64)$6 + (float_64)$13)
	if ( ((int_32)((float_64)$16 < (float_64)$18) ^ (int_32)[1]) ){ goto $label$4 }
	$6 = CALL $130(((float_64)((float_64)$13 / (float_64)$6) + (float_64)(float_64)1), $7)
	*(($1 + [72])) = $16
	$7 = ((float_64)((float_64)$14 * (float_64)$12) * (float_64)$15)
	*(($2 = ($1 + [80]))) = ((float_64)$7 + (float_64)*($2))
	$6 = ((float_64)$4 * (float_64)((float_64)$6 + (float_64)(float_64)-1))
	*(($1 + [88])) = ((float_64)$4 + (float_64)$6)
	goto $label$3 
	
.LABEL $label$5
	$6 = ((float_64)$6 + (float_64)$13)
	$13 = (float_64)
	$13 = ( $13($15 - $6)) ? (float_64)0 : ((float_64)$13 > (float_64)(float_64)0) 
	$8 = ((float_64)$7 * (float_64)((float_64)((float_64)$8 * (float_64)(float_64))($11 - ((float_64)((float_64)$13) / (float_64)$8) / (float_64)$7))) * (float_64)*($3 + [56])
	$15 = CALL $130(((float_64)((float_64)$8)) / (float_64)$6) + (float_64)(float_64)1), $7)
	*(($1 + [72])) = ((float_64)$6 + (float_64)$8)
	*($0 + [8]) = ((float_64)$13 + (float_64)$8)
	$6 = ((float_64)((float_64)((float_64)$14 * (float_64)$13) / (float_64)$7) + (float_64)((float_64)((float_64)$14 * (float_64)$8) / (float_64)$7))
	*($0 + [16]) = $6
	*(($2 = ($1 + [80]))) = ((float_64)*($2) + (float_64)$6)
	$6 = ((float_64)$6 * (float_64)((float_64)$15 + (float_64)(float_64)-1))
	$7 = ((float_64)((float_64)$13 * (float_64)(CASTING float_64)(uint_32 $5)) / (float_64)$7)
	$6 = ((float_64)$4 + (float_64)$7)
	*(($1 + [88])) = ((float_64)$6 + (float_64)$6)
	*($0) = ((float_64)$7 + (float_64)$6)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$4
	CALL $38(($3 + [8]), $2, (CASTING float_64)(int_64 ((int_64)$9 + (int_64)1)))
	$12 = *($3 + [8])
	$13 = (float_64)
	$13 = ( $13($18 - $6)) ? (float_64)0 : ((float_64)$13 > (float_64)(float_64)0) 
	$16 = CALL $130(((float_64)((float_64)$13) / (float_64)$6) + (float_64)(float_64)1), $7)
	$6 = ((float_64)$6 + (float_64)$13)
	$8 = ((float_64)$7 * (float_64)((float_64)$12 * (float_64)((float_64)$8 * (float_64)(float_64))($11 - ((float_64)((float_64)((float_64)$13 / (float_64)$8) / (float_64)$7) / (float_64)$15))))
	$15 = CALL $130(((float_64)((float_64)$8) / (float_64)$6) + (float_64)(float_64)1), $7)
	*(($1 + [72])) = ((float_64)$6 + (float_64)$8)
	$7 = ((float_64)((float_64)((float_64)$14 * (float_64)$13) / (float_64)$7) + (float_64)((float_64)((float_64)$14 * (float_64)$8) / (float_64)$7))
	*(($2 = ($1 + [80]))) = ((float_64)*($2) + (float_64)$7)
	$4 = ((float_64)$4 * (float_64)((float_64)$15 + (float_64)(float_64)-1))
	$6 = ((float_64)$4 * (float_64)((float_64)$16 + (float_64)(float_64)-1))
	$4 = ((float_64)$4 + (float_64)$6)
	*(($1 + [88])) = ((float_64)$4 + (float_64)$4)
	$13 = ((float_64)$13 + (float_64)$8)
	$6 = ((float_64)$6 + (float_64)$4)
	
.LABEL $label$3
	*($0 + [8]) = $13
	*($0) = $6
	*($0 + [16]) = $7
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$2
	$17 = (Rounds 0)($7)
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$9 = (int_64)4673618
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $10
	$5 = [1]
	$19 = $2
	$2 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$19 = ($2 + [1])
	$2 = $19
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$2 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8535])
	*(($1 + [72])) = $16
	$7 = (CASTING float_64)(int_64 $17)
	*($0) = $7
	*($0 + [8]) = $13
	$6 = ((float_64)$14 * (float_64)$12)
	*($0 + [16]) = $6
	*(($1 + [88])) = ((float_64)$4 + (float_64)$7)
	*(($2 = ($1 + [80]))) = ((float_64)$6 + (float_64)*($2))
	$global$0 = ($3 + [80])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	float_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	float_64 $24
	int_32 $25
	float_64 $26
	float_64 $27
	float_64 $28
	float_64 $29
	int_32 $30
	int_64 $31
	float_64 $32
	int_64 $33
	float_64 $34
	float_64 $35
	float_64 $36
	float_64 $37
	float_64 $38
	int_64 $39
	int_32 $40
	int_32 $41
	int_64 $42
	int_32 $43
	int_32 $44
	$5 = ($global$0 - [576])
	$global$0 = $5
	*($5 + [432]) = $1
	*(($5 + [424])) = [0]
	*($5 + [416]) = (int_64)0
	$6 = CALL $135([8393])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($5 + [416]) = ($6 << [1])
	$7 = (($5 + [416]) | [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [416]) = ($8 | [1])
	*($5 + [424]) = $7
	*($5 + [420]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [8393], $6)
	
.LABEL $label$4
	*(($7 + $6)) = [0]
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	$9 = (CASTING int_64)(int_32 $3)
	$10 = (($5 + [528]) | [1])
	$11 = (($5 + [544]) | [1])
	$12 = (($5 + [312]) | [1])
	$13 = (($5 + [328]) + [24])
	$14 = (($5 + [448]) + [72])
	$15 = (float_64)0
	$16 = ($0 + [136])
	$17 = ($0 + [208])
	$18 = ($0 + [176])
	$19 = (($5 + [328]) + [32])
	$20 = (($5 + [328]) + [28])
	$21 = ($5 + [556])
	$22 = ($5 + [564])
	$23 = (int_64)0
	$24 = (float_64)0
	$25 = [0]
	$26 = (float_64)0
	$27 = (float_64)0
	$28 = (float_64)0
	$29 = (float_64)0
	
.LOOP $label$7:
	$30 = ($2 + ($25 << [3]))
	*($5 + [408]) = *($30)
	$31 = *(($4 + [8]))
	*((($5 + [368]) + [8])) = $31
	$1 = *($4)
	*((($5 + [104]) + [8])) = $31
	*($5 + [104]) = $1
	*($5 + [368]) = $1
	CALL $27(($5 + [384]), $0, ($5 + [104]))
	$32 = *($5 + [384])
	if ( ((float_64)(float_64)|$32| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$1 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$1 = (Rounds 0)($32)
	
.LABEL $label$8
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$31 = (int_64)4673618
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$33 = (uint_64)$31 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$31 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$31 = $33
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$31 = $33
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$31 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$14 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [8535])
	$35 = *((($5 + [384]) + [16]))
	$34 = *((($5 + [384]) + [8]))
	$32 = (float_64)
	$36 = ((float_64)$32((float_64))(((float_64)*($16) * (float_64)(CASTING float_64)(int_64 *($4))) - $34) - $35)
	*($18) = ((float_64)*($18) + (float_64)$36 * (float_64)*($17))))
	*(($7 = (($5 + [328]) + [16]))) = (int_64)-1
	*($13) = (int_64)0
	*($19) = [0]
	$31 = *($5 + [408])
	*((($5 + [328]) + [8])) = $31
	$33 = *($0)
	*($5 + [328]) = $33
	$37 = ((float_64)$32 * (float_64)(float_64)0.16)
	$38 = ((float_64)$32 * (float_64)(float_64)0.14)
	$32 = ((float_64)$32 * (float_64)(float_64)0.6)
	$6 = CALL db_find_i64($33, $31, (int_64)3607749778856088576, $31)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $19(($5 + [328]), $6)
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)($5 + [328])), [10267])
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)($5 + [328])), [10432])
	CALL eosio_assert(((int_64)*($5 + [328]) == (int_64)CALL $fimport$2()), [10478])
	*($6 + [48]) = ((float_64)*($6 + [48]) + (float_64)(CASTING float_64)(int_64 *($4)))
	$31 = *($6)
	CALL eosio_assert([1], [10529])
	*((($5 + [528]) + [8])) = $14
	*($5 + [532]) = ($5 + [448])
	*($5 + [528]) = ($5 + [448])
	*($5 + [312]) = ($5 + [528])
	*((($5 + [544]) + [8])) = ($6 + [24])
	*($21) = ($6 + [40])
	*((($5 + [544]) + [16])) = ($6 + [48])
	*($22) = ($6 + [56])
	*((($5 + [544]) + [24])) = ($6 + [64])
	*((($5 + [544]) + [28])) = ($6 + [72])
	*($5 + [548]) = ($6 + [8])
	*($5 + [544]) = $6
	CALL $28(($5 + [544]), ($5 + [312]))
	CALL db_update_i64(*($6 + [80]), (int_64)0, ($5 + [448]), [72])
	if ( (uint_64)($31 <= *($7)) ){ goto $label$15 }
	*($7) = ( (int_64)-2 ? ((int_64)$31 + (int_64)1) : ((uint_64)$31 > (uint_64)(int_64)-3) )
	goto $label$15 
	
.LABEL $label$16
	$31 = *($0)
	*($5 + [532]) = $4
	*($5 + [528]) = ($5 + [408])
	*($5 + [544]) = $31
	CALL eosio_assert(((int_64)*($5 + [328]) == (int_64)CALL $fimport$2()), [10346])
	*((($5 + [448]) + [8])) = ($5 + [544])
	*($5 + [452]) = ($5 + [528])
	*($5 + [448]) = ($5 + [328])
	$6 = CALL _Znwj([88])
	CALL $29($6)
	*($6 + [76]) = ($5 + [328])
	CALL $30(($5 + [448]), $6)
	*($5 + [312]) = $6
	$31 = *($6)
	*($5 + [448]) = $31
	$3 = *($6 + [80])
	*($5 + [444]) = $3
	$7 = *($20)
	if ( ((uint_32)$7 >= (uint_32)*($19)) ){ goto $label$18 }
	*($7 + [8]) = $31
	*($7 + [16]) = $3
	*($5 + [312]) = [0]
	*($7) = $6
	*($20) = ($7 + [24])
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( $6 ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	CALL $31($13, ($5 + [312]), ($5 + [448]), ($5 + [444]))
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$24 = ((float_64)$24 + (float_64)$36)
	$28 = ((float_64)$28 + (float_64)$35)
	$29 = ((float_64)$29 + (float_64)$34)
	$26 = ((float_64)$26 + (float_64)$37)
	$27 = ((float_64)$27 + (float_64)$38)
	$15 = ((float_64)$15 + (float_64)$32)
	$39 = *($0)
	$31 = (int_64)6
	
.LOOP $label$19:
	$31 = ((int_64)$31 + (int_64)1)
	if ( ((int_64)$31 != (int_64)13) ){ goto $label$19 }
	*(($40 = (($5 + [528]) + [8]))) = [0]
	*($5 + [528]) = (int_64)0
	$6 = CALL $135([8394])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$29 }
	*($5 + [528]) = ($6 << [1])
	$7 = $10
	if ( $6 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$3 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($40) = $7
	*($5 + [528]) = ($3 | [1])
	*($5 + [532]) = $6
	
.LABEL $label$28
	CALL memcpy($7, [8394], $6)
	
.LABEL $label$27
	*(($7 + $6)) = [0]
	*(($41 = (($5 + [312]) + [8]))) = [0]
	*($5 + [312]) = (int_64)0
	CALL $119(($5 + [312]), [40])
	$31 = $23
	
.LOOP $label$30:
	$33 = ((int_64)$31 / (int_64)10)
	CALL $122(($5 + [312]), *(((CASTING uint_32)(uint_64 (int_64))($31 - ((int_64)$33 * (int_64)10))) + [9967])))
	$42 = ((int_64)$31 + (int_64)9)
	$31 = $33
	if ( ((uint_64)$42 > (uint_64)(int_64)18) ){ goto $label$30 }
	$8 = *($41)
	$3 = ($6 & [1])
	$6 = *($5 + [312])
	$44 = uint_32($6 >> [1])
	$43 = *($5 + [316])
	$7 = ( $43 ? $44 : $3 )
	if ( ($7 == 0) ){ goto $label$31 }
	$6 = ( $8 ? $12 : $3 )
	$7 = (($6 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$31 }
	
.LOOP $label$32:
	$3 = *($6)
	*($6) = *($7)
	*($7) = $3
	$7 = ($7 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$32 }
	$6 = *($5 + [312])
	$44 = uint_32($6 >> [1])
	$3 = ($6 & [1])
	$8 = *($41)
	$43 = *($5 + [316])
	
.LABEL $label$31
	$6 = CALL $123(($5 + [528]), ( $8 ? $12 : $3 ), ( $43 ? $44 : $3 ))
	$31 = *($6)
	*($6) = (int_64)0
	$7 = *($6 + [8])
	*($6 + [8]) = [0]
	$33 = *($0)
	$42 = *($5 + [408])
	*(($6 = CALL _Znwj([16]))) = $39
	*($6 + [8]) = (int_64)3617214756542218240
	*(($43 = (($5 + [448]) + [8]))) = $42
	*((($5 + [448]) + [16])) = $1
	*((($5 + [448]) + [24])) = (int_64)1196446212
	*(($3 = (($5 + [448]) + [32]))) = $31
	*(($44 = (($5 + [448]) + [40]))) = $7
	$7 = ($6 + [16])
	*(($8 = (($5 + [544]) + [8]))) = $7
	*($5 + [544]) = $6
	*($5 + [448]) = $33
	*($5 + [548]) = $7
	CALL $32($39, (int_64)-3617168760277827584, ($5 + [544]), ($5 + [448]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($44))
	
.LABEL $label$33
	$6 = *($5 + [544])
	if ( ($6 == 0) ){ goto $label$34 }
	*($5 + [548]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($41))
	
.LABEL $label$35
	if ( ((*($5 + [528]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($40))
	
.LABEL $label$36
	*($5 + [312]) = *($30)
	CALL $33(($5 + [544]), ($5 + [312]))
	$6 = CALL $121(($5 + [544]), [8414])
	$7 = ($6 + [8])
	*($43) = *($7)
	*($5 + [448]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	if ( ((*($5 + [544]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$37
	*($8) = [0]
	*($5 + [544]) = (int_64)0
	CALL $119(($5 + [544]), [40])
	
.LOOP $label$38:
	$31 = ((int_64)$1 / (int_64)10)
	CALL $122(($5 + [544]), *(((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$31 * (int_64)10))) + [9967])))
	$33 = ((int_64)$1 + (int_64)9)
	$1 = $31
	if ( ((uint_64)$33 > (uint_64)(int_64)18) ){ goto $label$38 }
	$6 = ($6 & [1])
	$6 = *($5 + [544])
	$7 = ( *($5 + [548]) ? uint_32($6 >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$39 }
	$6 = ( *($8) ? $11 : $6 )
	$7 = (($6 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$39 }
	
.LOOP $label$40:
	$3 = *($6)
	*($6) = *($7)
	*($7) = $3
	$7 = ($7 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$40 }
	
.LABEL $label$39
	CALL $34(($5 + [528]), ($5 + [448]), ($5 + [544]))
	$6 = *($5 + [528])
	$7 = ($6 & [1])
	CALL $123(($5 + [416]), ( *($40) ? $10 : $7 ), ( *($5 + [532]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($5 + [528]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($40))
	
.LABEL $label$41
	CALL $121(($5 + [416]), [8416])
	if ( (*($5 + [544]) & [1]) ){ goto $label$43 }
	if ( (*($5 + [448]) & [1]) ){ goto $label$42 }
	goto $label$25 
	
.LABEL $label$43
	CALL _ZdlPv(*($8))
	if ( ((*($5 + [448]) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$42
	CALL _ZdlPv(*($43))
	$3 = *($13)
	if ( $3 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	CALL $114(($5 + [528]))
	
.LABEL $label$25
	$3 = *($13)
	if ( ($3 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = *($20)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$22 }
	
.LOOP $label$44:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$45 }
	CALL _ZdlPv($7)
	
.LABEL $label$45
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$44 }
	$6 = *($13)
	goto $label$21 
	
.LABEL $label$23
	$25 = ($25 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 < (int_64)$9) ){ goto $label$7 }
	goto $label$20 
	
.LABEL $label$22
	$6 = $3
	
.LABEL $label$21
	*($20) = $3
	CALL _ZdlPv($6)
	$25 = ($25 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 < (int_64)$9) ){ goto $label$7 }
	
.LABEL $label$20
	if ( (((float_64)$28 < (float_64)(float_64)18446744073709551615) & ((float_64)$28 >= (float_64)(float_64)0)) ){ goto $label$46 }
	$23 = (int_64)0
	goto $label$1 
	
.LABEL $label$46
	$23 = (Rounds 0)($28)
	goto $label$1 
	
.LABEL $label$3
	CALL $114(($5 + [416]))
	
.LABEL $label$2
	$29 = (float_64)0
	$23 = (int_64)0
	$27 = (float_64)0
	$26 = (float_64)0
	$24 = (float_64)0
	$15 = (float_64)0
	
.LABEL $label$1
	*($5 + [448]) = (int_64)0
	*($5 + [456]) = [0]
	$1 = *($5 + [432])
	CALL $119(($5 + [448]), [40])
	
.LOOP $label$47:
	$31 = ((int_64)$1 / (int_64)10)
	CALL $122(($5 + [448]), *(((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$31 * (int_64)10))) + [9967])))
	$33 = ((int_64)$1 + (int_64)9)
	$1 = $31
	if ( ((uint_64)$33 > (uint_64)(int_64)18) ){ goto $label$47 }
	$6 = ($6 & [1])
	$6 = *($5 + [448])
	$7 = ( *($5 + [452]) ? uint_32($6 >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$48 }
	$6 = ( *((($5 + [448]) + [8])) ? (($5 + [448]) | [1]) : $6 )
	$7 = (($6 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = *($6)
	*($6) = *($7)
	*($7) = $3
	$7 = ($7 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$49 }
	
.LABEL $label$48
	$6 = CALL $125(($5 + [448]), [0], [8419])
	$7 = ($6 + [8])
	*((($5 + [544]) + [8])) = *($7)
	*($5 + [544]) = *($6)
	$1 = (int_64)0
	*($6) = (int_64)0
	*($7) = [0]
	if ( ((*($5 + [448]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($5 + [456])))
	
.LABEL $label$50
	$31 = (int_64)59
	$6 = [8428]
	$42 = (int_64)0
	
.LOOP $label$51:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$52 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$7 = ($7 + [-91])
	goto $label$53 
	
.LABEL $label$54
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$52
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$51 }
	*($5 + [304]) = (int_64)1397703940
	if ( (((float_64)$15 < (float_64)(float_64)18446744073709551615) & ((float_64)$15 >= (float_64)(float_64)0)) ){ goto $label$56 }
	$1 = (int_64)0
	goto $label$55 
	
.LABEL $label$56
	$1 = (Rounds 0)($15)
	
.LABEL $label$55
	*($5 + [296]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$1 = $31
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$61 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$7 = [0]
	
.LABEL $label$57
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [280]), ($5 + [544]))
	*((($5 + [88]) + [8])) = *((($5 + [296]) + [8]))
	*($5 + [88]) = *($5 + [296])
	CALL $21($0, $42, ($5 + [88]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$62
	$1 = (int_64)0
	$31 = (int_64)59
	$6 = [8441]
	$42 = (int_64)0
	
.LOOP $label$63:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$64 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$7 = ($7 + [-91])
	goto $label$65 
	
.LABEL $label$66
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$64
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$63 }
	*($5 + [272]) = (int_64)1397703940
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$68 }
	$1 = (int_64)0
	goto $label$67 
	
.LABEL $label$68
	$1 = (Rounds 0)($27)
	
.LABEL $label$67
	*($5 + [264]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$1 = $31
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$73 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$7 = [0]
	
.LABEL $label$69
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [248]), ($5 + [544]))
	*((($5 + [72]) + [8])) = *((($5 + [264]) + [8]))
	*($5 + [72]) = *($5 + [264])
	CALL $21($0, $42, ($5 + [72]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$74
	$1 = (int_64)0
	$31 = (int_64)59
	$6 = [8454]
	$42 = (int_64)0
	
.LOOP $label$75:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$76 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$78 }
	$7 = ($7 + [-91])
	goto $label$77 
	
.LABEL $label$78
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$77
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$76
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$75 }
	*($5 + [240]) = (int_64)1397703940
	if ( (((float_64)$26 < (float_64)(float_64)18446744073709551615) & ((float_64)$26 >= (float_64)(float_64)0)) ){ goto $label$80 }
	$1 = (int_64)0
	goto $label$79 
	
.LABEL $label$80
	$1 = (Rounds 0)($26)
	
.LABEL $label$79
	*($5 + [232]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$83:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$82 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$84 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$84
	$1 = $31
	
.LOOP $label$85:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$82 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$85 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	$7 = [0]
	
.LABEL $label$81
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [216]), ($5 + [544]))
	*((($5 + [56]) + [8])) = *((($5 + [232]) + [8]))
	*($5 + [56]) = *($5 + [232])
	CALL $21($0, $42, ($5 + [56]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$86
	$1 = (int_64)0
	$31 = (int_64)59
	$6 = [8467]
	$42 = (int_64)0
	
.LOOP $label$87:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$88 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$7 = ($7 + [-91])
	goto $label$89 
	
.LABEL $label$90
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$88
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$87 }
	*($5 + [208]) = (int_64)1397703940
	if ( (((float_64)$24 < (float_64)(float_64)18446744073709551615) & ((float_64)$24 >= (float_64)(float_64)0)) ){ goto $label$92 }
	$1 = (int_64)0
	goto $label$91 
	
.LABEL $label$92
	$1 = (Rounds 0)($24)
	
.LABEL $label$91
	*($5 + [200]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$94 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$96 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$96
	$1 = $31
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$94 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$97 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$94
	$7 = [0]
	
.LABEL $label$93
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [184]), ($5 + [544]))
	*((($5 + [40]) + [8])) = *((($5 + [200]) + [8]))
	*($5 + [40]) = *($5 + [200])
	CALL $21($0, $42, ($5 + [40]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$98
	$1 = (int_64)0
	$31 = (int_64)59
	$6 = [8480]
	$42 = (int_64)0
	
.LOOP $label$99:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$100 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$7 = ($7 + [-91])
	goto $label$101 
	
.LABEL $label$102
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$100
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$99 }
	*($5 + [176]) = (int_64)1397703940
	if ( (((float_64)$29 < (float_64)(float_64)18446744073709551615) & ((float_64)$29 >= (float_64)(float_64)0)) ){ goto $label$104 }
	$1 = (int_64)0
	goto $label$103 
	
.LABEL $label$104
	$1 = (Rounds 0)($29)
	
.LABEL $label$103
	*($5 + [168]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$107:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$106 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$108 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$108
	$1 = $31
	
.LOOP $label$109:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$106 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$109 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$106
	$7 = [0]
	
.LABEL $label$105
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [152]), ($5 + [544]))
	*((($5 + [24]) + [8])) = *((($5 + [168]) + [8]))
	*($5 + [24]) = *($5 + [168])
	CALL $21($0, $42, ($5 + [24]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$110 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$110
	$1 = (int_64)0
	$31 = (int_64)59
	$6 = [8493]
	$42 = (int_64)0
	
.LOOP $label$111:
	$33 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$112 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$7 = ($7 + [-91])
	goto $label$113 
	
.LABEL $label$114
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$33 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$112
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$42 = ((int_64)$33 | (int_64)$42)
	$31 = ((int_64)$31 + (int_64)4294967291)
	if ( ((int_64)$31 != (int_64)55834574842) ){ goto $label$111 }
	*($5 + [144]) = (int_64)1397703940
	*($5 + [136]) = $23
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$1 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$117:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$116 }
	$31 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$118 }
	$1 = $31
	$7 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$118
	$1 = $31
	
.LOOP $label$119:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$116 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $7 ){ goto $label$119 }
	$7 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$116
	$7 = [0]
	
.LABEL $label$115
	CALL eosio_assert($7, [8535])
	$6 = CALL $115(($5 + [120]), ($5 + [544]))
	*((($5 + [8]) + [8])) = *((($5 + [136]) + [8]))
	*($5 + [8]) = *($5 + [136])
	CALL $21($0, $42, ($5 + [8]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$120
	$1 = *($5 + [432])
	if ( (int_64)($1 == 0) ){ goto $label$121 }
	*(($3 = ($5 + [480]))) = [0]
	*($5 + [456]) = $1
	*($5 + [464]) = (int_64)-1
	*($5 + [472]) = (int_64)0
	$1 = *($0)
	*($5 + [448]) = $1
	*($5 + [532]) = ($5 + [416])
	*($5 + [528]) = ($5 + [432])
	*($5 + [384]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$2()), [10346])
	*($5 + [332]) = ($5 + [528])
	*($5 + [328]) = ($5 + [448])
	*($5 + [336]) = ($5 + [384])
	*(($6 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32]) = ($5 + [448])
	CALL $35(($5 + [328]), $6)
	*($5 + [312]) = $6
	$1 = *($6)
	*($5 + [328]) = $1
	$4 = *($6 + [36])
	*($5 + [408]) = $4
	$8 = ($5 + [476])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*($3)) ){ goto $label$125 }
	*($7 + [8]) = $1
	*($7 + [16]) = $4
	*($5 + [312]) = [0]
	*($7) = $6
	*($8) = ($7 + [24])
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( ($6 == 0) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$125
	CALL $36(($5 + [472]), ($5 + [312]), ($5 + [328]), ($5 + [408]))
	$6 = *($5 + [312])
	*($5 + [312]) = [0]
	if ( $6 ){ goto $label$123 }
	
.LABEL $label$124
	$3 = *($5 + [472])
	if ( ($3 == 0) ){ goto $label$121 }
	goto $label$122 
	
.LABEL $label$123
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$126
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$127 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$127
	CALL _ZdlPv($6)
	$3 = *($5 + [472])
	if ( ($3 == 0) ){ goto $label$121 }
	
.LABEL $label$122
	$4 = (($5 + [448]) + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$129 }
	
.LOOP $label$130:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$131 }
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$132
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$133
	CALL _ZdlPv($6)
	
.LABEL $label$131
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$130 }
	$6 = *(($5 + [472]))
	goto $label$128 
	
.LABEL $label$129
	$6 = $3
	
.LABEL $label$128
	*($4) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$121
	CALL $37($0)
	if ( (*($5 + [544]) & [1]) ){ goto $label$136 }
	if ( (*($5 + [416]) & [1]) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$136
	CALL _ZdlPv(*($5 + [552]))
	if ( ((*($5 + [416]) & [1]) == 0) ){ goto $label$134 }
	
.LABEL $label$135
	CALL _ZdlPv(*($5 + [424]))
	$global$0 = ($5 + [576])
	return 
	
.LABEL $label$134
	$global$0 = ($5 + [576])
	(unreachable)
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [80]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [88]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8535])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [9116])
	$10 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *($0)
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $43(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [10267])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [9145])
	CALL require_auth(*($11 + [32]))
	$12 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [9205])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [9222])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [9251])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [9277])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [10432])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$2()), [10478])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [10096])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [10158])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [10529])
	*($4 + [192]) = (($4 + [128]) + [40])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($11 + [16])
	*($4 + [208]) = $11
	*($4 + [216]) = $12
	CALL $45(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [128]), [40])
	$5 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$9 = *(($2 + [8]))
	*((($4 + [72]) + [8])) = $9
	$8 = *($12)
	$7 = *($2)
	*((($4 + [8]) + [8])) = $9
	*($4 + [72]) = $7
	*($4 + [8]) = $7
	CALL $70($0, $8, ($4 + [8]), $8)
	$7 = *($12)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$16:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*(($10 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $115(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($10)
	$10 = (($4 + [24]) + [40])
	*(($11 = (($4 + [128]) + [40]))) = *($10)
	*($10) = [0]
	*($4 + [208]) = $5
	$5 = ($5 + [16])
	*($4 + [216]) = $5
	*($4 + [212]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $32($9, (int_64)-3617168760277827584, ($4 + [208]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$17
	$5 = *($4 + [208])
	if ( ($5 == 0) ){ goto $label$18 }
	*($4 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = ($4 + [116])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $11
	
.LABEL $label$20
	*($13) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($4 + [224])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10622])
	$2 = *($0 + [4])
	$3 = *($2 + [24])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)5455799419177145712, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [24]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [10267])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $12($6, CALL $fimport$1(*($6), *($6 + [8]), (int_64)5455799419177145712, $5))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [10267])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [24])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $109(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10318])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $136($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	CALL $105(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5455799419177145712, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [10267])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $12($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)5455799419177145712, $6))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [10267])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9978])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9978])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10652])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [10697])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10747])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $60 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth(*($0))
	*((($2 + [88]) + [32])) = [0]
	*($2 + [96]) = $1
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$3 = *($0)
	*($2 + [88]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-5001342326447013888, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $54(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [88])), [10267])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8975])
	CALL eosio_assert(((uint_32)(*($4 + [8]) + [86400]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000))), [9000])
	*((($2 + [48]) + [32])) = [0]
	*($2 + [56]) = $1
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [48]) = *($0)
	$7 = ($4 + [24])
	$5 = CALL $49(($2 + [48]), (uint_64)*($7) >> (uint_64)(int_64)8), [8916]
	CALL eosio_assert(((int_32)*($5) + [16]) == (int_32)($2 + [48])), [10432])
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$2()), [10478])
	$3 = *($5 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)$3), [10096])
	$8 = ((int_64)*($5) + (int_64)*($4 + [16]))
	*($5) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [10158])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10529])
	CALL eosio_assert([1], [9978])
	CALL memcpy(($2 + [128]), $5, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($2 + [128]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), $1, ($2 + [128]), [16])
	if ( (uint_64)($3 <= *($2 + [64])) ){ goto $label$2 }
	*((($2 + [48]) + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$2
	*((($2 + [8]) + [32])) = [0]
	*($2 + [16]) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = *($0)
	$5 = CALL $52(($2 + [8]), $1, [8958])
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($2 + [8])), [10432])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$2()), [10478])
	$3 = *($5)
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [32]))), [10176])
	$8 = (int_64)
	*($5 + [24]) = $8(*($5 + [24]) - *(($4 + [16]))))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10224])
	CALL eosio_assert(((int_64)*($5 + [24]) < (int_64)4611686018427387904), [10246])
	*($5 + [40]) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)*($5)), [10529])
	*($2 + [208]) = (($2 + [128]) + [72])
	*($2 + [204]) = ($2 + [128])
	*($2 + [200]) = ($2 + [128])
	*($2 + [216]) = ($2 + [200])
	*($2 + [228]) = ($5 + [8])
	*($2 + [224]) = $5
	*($2 + [232]) = ($5 + [24])
	*($2 + [236]) = ($5 + [40])
	*($2 + [240]) = ($5 + [48])
	*($2 + [244]) = ($5 + [56])
	*($2 + [248]) = ($5 + [64])
	*($2 + [252]) = ($5 + [72])
	CALL $28(($2 + [224]), ($2 + [216]))
	CALL db_update_i64(*($5 + [80]), $1, ($2 + [128]), [72])
	if ( (uint_64)($3 <= *($2 + [24])) ){ goto $label$3 }
	*(($2 + [24])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	CALL eosio_assert($6, [10588])
	CALL eosio_assert($6, [10622])
	$5 = CALL db_next_i64(*($4 + [36]), ($2 + [128]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $54(($2 + [88]), $5)
	
.LABEL $label$4
	CALL $61(($2 + [88]), $4)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$5 }
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $0
	
.LABEL $label$6
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$10 }
	$6 = ($2 + [76])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($2 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$0 = *($2 + [112])
	if ( ($0 == 0) ){ goto $label$15 }
	$6 = ($2 + [116])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($2 + [112]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $0
	
.LABEL $label$16
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($2 + [256])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	float_64 $4
	float_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth(*($0))
	*(($2 + [88])) = [0]
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	*($2 + [56]) = *($0)
	*($2 + [48]) = ($0 + [224])
	*($2 + [96]) = (int_64)0
	CALL $64(($2 + [40]), ($2 + [48]), ($2 + [96]))
	if ( (*($2 + [44]) == 0) ){ goto $label$18 }
	$3 = CALL current_time()
	$4 = *(($0 + [192]))
	$5 = *(($0 + [176]))
	$6 = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [-1541548800])
	$7 = (($6 - ((uint_32)$6 % (uint_32)[86400])) + [1541548800])
	$3 = (CASTING int_64)(int_32 $7)
	$9 = *(($2 + [84]))
	$8 = *(($2 + [80]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$19:
	$6 = ($9 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$17 }
	$9 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$18
	CALL prints([9054])
	$6 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$3 = (CASTING int_64)(int_32 ($6 - ((uint_32)($6 + [-1541548800]) % (uint_32)[86400])))
	$9 = *(($2 + [84]))
	$8 = *(($2 + [80]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$20:
	$6 = ($9 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$15 }
	$9 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$20 }
	goto $label$14 
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10267])
	if ( ((int_32)*($10 + [24]) == (int_32)[1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$16
	$9 = (($2 + [56]) + [8])
	$6 = CALL db_find_i64(*($2 + [56]), *($9), (int_64)5455799419167647408, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$10 = CALL $65(($2 + [56]), $6)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10267])
	if ( ((int_32)*($10 + [24]) == (int_32)[1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$21
	$4 = ((float_64)$5 * (float_64)$4)
	*(($6 = ($0 + [184]))) = ((float_64)$4 + (float_64)*($6))
	*(($6 = ($0 + [176]))) = (float_64))(*($6) - $4)
	$11 = *($0)
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$2()), [10346])
	*(($6 = CALL _Znwj([48])) + [32]) = ($2 + [56])
	*($6 + [8]) = $4
	*($6) = $3
	*($6 + [24]) = (int_64)0
	*($6 + [16]) = *(($0 + [200]))
	*($2 + [200]) = (($2 + [96]) + [32])
	*($2 + [196]) = ($2 + [96])
	*($2 + [192]) = ($2 + [96])
	*($2 + [168]) = ($2 + [192])
	*($2 + [4]) = ($6 + [8])
	*($2) = $6
	*($2 + [8]) = ($6 + [16])
	*($2 + [12]) = ($6 + [24])
	*($2 + [16]) = ($6 + [28])
	CALL $66($2, ($2 + [168]))
	$12 = *($6)
	$8 = CALL db_store_i64(*($9), (int_64)5455799419167647408, $11, $12, ($2 + [96]), [32])
	*($6 + [36]) = $8
	$9 = (($2 + [56]) + [16])
	if ( (uint_64)($12 <= *($9)) ){ goto $label$22 }
	*($9) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($2) = $6
	$12 = *($6)
	*($2 + [96]) = $12
	*($2 + [192]) = $8
	$9 = *((($2 + [56]) + [28]))
	if ( ((uint_32)$9 >= (uint_32)*((($2 + [56]) + [32]))) ){ goto $label$12 }
	*($9 + [8]) = $12
	*($9 + [16]) = $8
	*($2) = [0]
	*($9) = $6
	*(($2 + [84])) = ($9 + [24])
	$6 = *($2)
	*($2) = [0]
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$15
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10267])
	if ( $10 ){ goto $label$3 }
	goto $label$13 
	
.LABEL $label$14
	$6 = CALL db_find_i64(*($2 + [56]), *(($2 + [64])), (int_64)5455799419167647408, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $65(($2 + [56]), $6) + [32]) == (int_32)($2 + [56])), [10267])
	$8 = *($2 + [80])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	$12 = *($0)
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$2()), [10346])
	*(($6 = CALL _Znwj([48])) + [32]) = ($2 + [56])
	*($6 + [8]) = (int_64)0
	*($6) = $3
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)1
	*($2 + [200]) = (($2 + [96]) + [32])
	*($2 + [196]) = ($2 + [96])
	*($2 + [192]) = ($2 + [96])
	*($2 + [168]) = ($2 + [192])
	*($2 + [4]) = ($6 + [8])
	*($2) = $6
	*($2 + [8]) = ($6 + [16])
	*($2 + [12]) = ($6 + [24])
	*($2 + [16]) = ($6 + [28])
	CALL $66($2, ($2 + [168]))
	$3 = *($6)
	$8 = CALL db_store_i64(*((($2 + [56]) + [8])), (int_64)5455799419167647408, $12, $3, ($2 + [96]), [32])
	*($6 + [36]) = $8
	$9 = (($2 + [56]) + [16])
	if ( (uint_64)($3 <= *($9)) ){ goto $label$23 }
	*($9) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($2) = $6
	$3 = *($6)
	*($2 + [96]) = $3
	*($2 + [192]) = $8
	$9 = *((($2 + [56]) + [28]))
	if ( ((uint_32)$9 >= (uint_32)*((($2 + [56]) + [32]))) ){ goto $label$9 }
	*($9 + [8]) = $3
	*($9 + [16]) = $8
	*($2) = [0]
	*($9) = $6
	*(($2 + [84])) = ($9 + [24])
	$6 = *($2)
	*($2) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$12
	CALL $67(($2 + [80]), $2, ($2 + [96]), ($2 + [192]))
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	CALL $37($0)
	$9 = *(($2 + [84]))
	$8 = *(($2 + [80]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$24:
	$6 = ($9 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$7 }
	$9 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$24 }
	goto $label$6 
	
.LABEL $label$9
	CALL $67(($2 + [80]), $2, ($2 + [96]), ($2 + [192]))
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	$8 = *($2 + [80])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10267])
	if ( ((int_32)*($10 + [24]) == (int_32)[1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = [0]
	$6 = CALL db_find_i64(*($2 + [56]), *(($2 + [64])), (int_64)5455799419167647408, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$25 }
	$10 = CALL $65(($2 + [56]), $6)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10267])
	
.LABEL $label$25
	if ( ((int_32)*($10 + [24]) != (int_32)[1]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL prints([9092])
	$8 = *($2 + [80])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($2) = *($10 + [28])
	CALL $64(($2 + [96]), ($2 + [48]), $2)
	$3 = *($2 + [96])
	*($2 + [40]) = $3
	$6 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$27 }
	$13 = (($2 + [96]) + [72])
	$14 = ($0 + [8])
	$15 = ($2 + [16])
	$16 = ($2 + [24])
	$17 = ($2 + [32])
	$18 = ($2 + [28])
	$19 = ($2 + [204])
	$20 = ($2 + [212])
	$21 = [0]
	
.LOOP $label$28:
	if ( ((int_32)$21 >= (int_32)*($14)) ){ goto $label$26 }
	$3 = *($6)
	*(($2 + [8])) = $3
	*($15) = (int_64)-1
	*($16) = (int_64)0
	*($17) = [0]
	$12 = *($0)
	*($2) = $12
	$6 = CALL db_find_i64($12, $3, (int_64)3607749778856088576, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	$6 = CALL $19($2, $6)
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)$2), [10267])
	$4 = *($6 + [56])
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$29 }
	if ( ((uint_32)*($6 + [72]) >= (uint_32)$7) ){ goto $label$29 }
	$5 = *(($10 + [16]))
	$22 = *(($10 + [8]))
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*(($6 + [76])) == (int_32)$2), [10432])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$2()), [10478])
	*(($9 = ($6 + [72]))) = $7
	*($6 + [64]) = ((float_64)((float_64)((float_64)$4 * (float_64)$22) / (float_64)$5) + (float_64)*($6 + [64]))
	$3 = *($6)
	CALL eosio_assert([1], [10529])
	*((($2 + [168]) + [8])) = $13
	*($2 + [172]) = ($2 + [96])
	*($2 + [168]) = ($2 + [96])
	*($2 + [184]) = ($2 + [168])
	*((($2 + [192]) + [8])) = ($6 + [24])
	*($19) = ($6 + [40])
	*((($2 + [192]) + [16])) = ($6 + [48])
	*($20) = ($6 + [56])
	*((($2 + [192]) + [24])) = ($6 + [64])
	*((($2 + [192]) + [28])) = $9
	*($2 + [196]) = ($6 + [8])
	*($2 + [192]) = $6
	CALL $28(($2 + [192]), ($2 + [184]))
	CALL db_update_i64(*($6 + [80]), (int_64)0, ($2 + [96]), [72])
	if ( (uint_64)($3 <= *($15)) ){ goto $label$29 }
	*($15) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	CALL $68(($2 + [40]))
	$8 = *($16)
	if ( ($8 == 0) ){ goto $label$30 }
	$6 = *($18)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$34 }
	CALL _ZdlPv($9)
	
.LABEL $label$34
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$33 }
	$6 = *($16)
	goto $label$31 
	
.LABEL $label$32
	$6 = $8
	
.LABEL $label$31
	*($18) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$21 = ($21 + [1])
	$6 = *($2 + [44])
	if ( $6 ){ goto $label$28 }
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10397])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10432])
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$2()), [10478])
	*($10 + [24]) = [1]
	$3 = *($10)
	CALL eosio_assert([1], [10529])
	*($2 + [200]) = (($2 + [96]) + [32])
	*($2 + [196]) = ($2 + [96])
	*($2 + [192]) = ($2 + [96])
	*($2 + [168]) = ($2 + [192])
	*($2 + [4]) = ($10 + [8])
	*($2) = $10
	*($2 + [8]) = ($10 + [16])
	*($2 + [12]) = ($10 + [24])
	*($2 + [16]) = ($10 + [28])
	CALL $66($2, ($2 + [168]))
	CALL db_update_i64(*($10 + [36]), (int_64)0, ($2 + [96]), [32])
	$6 = (($2 + [56]) + [16])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$8 = *($2 + [80])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$26
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10397])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($2 + [56])), [10432])
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$2()), [10478])
	*($10 + [28]) = *(*($2 + [44]) + [8])
	$3 = *($10)
	CALL eosio_assert([1], [10529])
	*($2 + [200]) = (($2 + [96]) + [32])
	*($2 + [196]) = ($2 + [96])
	*($2 + [192]) = ($2 + [96])
	*($2 + [168]) = ($2 + [192])
	*($2 + [4]) = ($10 + [8])
	*($2) = $10
	*($2 + [8]) = ($10 + [16])
	*($2 + [12]) = ($10 + [24])
	*($2 + [16]) = ($10 + [28])
	CALL $66($2, ($2 + [168]))
	CALL db_update_i64(*($10 + [36]), (int_64)0, ($2 + [96]), [32])
	$6 = (($2 + [56]) + [16])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *($2 + [80])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($2 + [84])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$38 }
	CALL _ZdlPv($9)
	
.LABEL $label$38
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($2 + [80]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $8
	
.LABEL $label$35
	*($10) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [224])
}

void .FUNC $62 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$14($1), [9028])
	*(($2 + [104])) = [0]
	*($2 + [80]) = $1
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	$3 = *($0)
	*($2 + [72]) = $3
	$4 = CALL db_find_i64($3, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $19(($2 + [72]), $4)
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)($2 + [72])), [10267])
	$5 = *($4 + [64])
	if ( ((int_32)((float_64)$5 >= (float_64)(float_64)1) ^ (int_32)[1]) ){ goto $label$2 }
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$6 = (int_64)0
	if ( ((int_64)((int_64)0 == 0) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (Rounds 0)($5)
	if ( (int_64)($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*(($4 + [76])) == (int_32)($2 + [72])), [10432])
	CALL eosio_assert(((int_64)*($2 + [72]) == (int_64)CALL $fimport$2()), [10478])
	*(($4 + [64])) = (float_64))($5 - (CASTING float_64)(uint_64 $6))
	$3 = *($4)
	CALL eosio_assert([1], [10529])
	*($2 + [24]) = (($2 + [112]) + [72])
	*($2 + [20]) = ($2 + [112])
	*($2 + [16]) = ($2 + [112])
	*($2 + [192]) = ($2 + [16])
	*($2 + [36]) = ($4 + [8])
	*($2 + [32]) = $4
	*($2 + [40]) = ($4 + [24])
	*($2 + [44]) = ($4 + [40])
	*($2 + [48]) = ($4 + [48])
	*($2 + [52]) = ($4 + [56])
	*($2 + [56]) = ($4 + [64])
	*($2 + [60]) = ($4 + [72])
	CALL $28(($2 + [32]), ($2 + [192]))
	CALL db_update_i64(*($4 + [80]), (int_64)0, ($2 + [112]), [72])
	$4 = ($2 + [88])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8535])
	$3 = (int_64)0
	$7 = (int_64)59
	$4 = [8467]
	$10 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$12 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$11 }
	$3 = (int_64)6
	
.LOOP $label$15:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$15 }
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = $10
	$3 = (int_64)0
	$11 = (int_64)59
	$4 = [8372]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$21 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$8 = ($8 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$7 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$10 = ((int_64)$7 | (int_64)$10)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$16 }
	$3 = (int_64)0
	$11 = (int_64)59
	$4 = [8384]
	$12 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$27 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$22 }
	$3 = (int_64)0
	$7 = (int_64)59
	$4 = [8467]
	$13 = (int_64)0
	
.LOOP $label$28:
	$11 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$29 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [-91])
	goto $label$30 
	
.LABEL $label$31
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$28 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$4 = CALL $135([9045])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*($2) = ($4 << [1])
	$8 = ($2 | [1])
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $8
	*($2 + [4]) = $4
	
.LABEL $label$33
	CALL memcpy($8, [9045], $4)
	
.LABEL $label$32
	*(($8 + $4)) = [0]
	*(($2 + [136])) = (int_64)1397703940
	$4 = ($2 + [8])
	*(($2 + [152])) = *($4)
	*($4) = [0]
	*($2 + [120]) = $1
	*($2 + [112]) = $13
	*($2 + [128]) = $6
	*($2 + [144]) = *($2)
	*($2) = (int_64)0
	$4 = CALL $22(($2 + [32]), ($2 + [16]), $10, $12, ($2 + [112]))
	CALL $23(($2 + [192]), $4)
	$8 = *($2 + [192])
	CALL send_inline($8, (*($2 + [196]) - $8))
	$8 = *($2 + [192])
	if ( ($8 == 0) ){ goto $label$35 }
	*($2 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$36 }
	*(($4 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$37 }
	*(($4 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	if ( ((*(($2 + [144])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($2 + [152])))
	
.LABEL $label$38
	if ( ((*($2) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$39
	*(($4 = ($0 + [184]))) = (float_64))(*($4) - (CASTING float_64)(int_64 $6))
	CALL $37($0)
	
.LABEL $label$2
	$9 = *($2 + [96])
	if ( ($9 == 0) ){ goto $label$40 }
	$0 = ($2 + [100])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$44 }
	CALL _ZdlPv($8)
	
.LABEL $label$44
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($2 + [96]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $9
	
.LABEL $label$41
	*($0) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $114($2)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10341])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9978])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9978])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10341])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [10341])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $87(*($1), ($0 + [32]))
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $115(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $115(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $107($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $114($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [296]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [300])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [296]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [248]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [40]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [44])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $136($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8535])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [10341])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [10341])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $87(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $139($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $88(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $136($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8535])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $89(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $139($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $90(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*((($3 + [16]) + [24])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8535])
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $92(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $139($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [40]))
	*($3 + [48]) = *($3 + [32])
	$8 = *((($3 + [16]) + [8]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $8), (int_64 $3), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $136($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [10341])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $139($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [56])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8535])
	*($3 + [100]) = $6
	*($3 + [96]) = $6
	*($3 + [104]) = ($6 + $7)
	*($3 + [64]) = ($3 + [96])
	*($3 + [80]) = ($3 + [16])
	CALL $93(($3 + [80]), ($3 + [64]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $139($6)
	
.LABEL $label$8
	*(($1 = (($3 + [64]) + [8]))) = *(($3 + [56]))
	*($3 + [64]) = *($3 + [48])
	$8 = *(($3 + [40]))
	$10 = *(($3 + [32]))
	$12 = *((($3 + [16]) + [8]))
	$13 = *($3 + [16])
	*((($3 + [80]) + [8])) = *($1)
	*($3 + [80]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$14 = *((($3 + [80]) + [8]))
	*((($3 + [96]) + [8])) = $14
	*(($3 + [8])) = $14
	$14 = *($3 + [80])
	*($3) = $14
	*($3 + [96]) = $14
	CALL void $1((int_32 $13), (int_64 $12), (int_64 $10), (int_64 $8), (int_64 $3), (int_32 $5))
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [10341])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [10341])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $139($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	$7 = uint_32($6 >> [1])
	$8 = ($4 + [1])
	$6 = CALL $135([9311])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$7 = *($4 + [4])
	$8 = *($4 + [8])
	$6 = CALL $135([9311])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$4 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$8:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$4 }
	$7 = CALL $133($10, [103], $7)
	if ( ($7 == 0) ){ goto $label$4 }
	if ( (CALL $134($7, [9311], $6) == 0) ){ goto $label$9 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$9
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)($7 - $8) == (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = *($0)
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = *($4)
	$7 = CALL $135([9330])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( (CALL $126($4, [0], [-1], [9330], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($4)
	$7 = CALL $135([9339])
	if ( ((int_32)$7 != (int_32)( *(($4 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( (CALL $126($4, [0], [-1], [9339], $7) == 0) ){ goto $label$12 }
	$6 = *($4)
	
.LABEL $label$15
	if ( ($6 & [1]) ){ goto $label$16 }
	$8 = ($4 + [1])
	$7 = uint_32(($6 & [254]) >> [1])
	$6 = CALL $135([9345])
	if ( ($6 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$16
	$7 = *(($4 + [4]))
	$8 = *($4 + [8])
	$6 = CALL $135([9345])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$11 = *($0)
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$12
	$11 = *($0)
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$1 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$17:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $133($10, [103], $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $134($7, [9345], $6) == 0) ){ goto $label$18 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$17 }
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	if ( ((int_32)($7 - $8) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$10
	$11 = *($0)
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9402])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$14($2), [9426])
	$12 = *($3 + [8])
	$7 = [0]
	*(($5 + [136])) = [0]
	$11 = (uint_64)$12 >> (uint_64)(int_64)8
	*($5 + [112]) = $11)
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	*($5 + [104]) = *($0)
	$9 = CALL $73(($5 + [104]), $11, [9452])
	$13 = *($3)
	if ( ((uint_64)((int_64)$13 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$6 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$14 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$11 = $14
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$11 = $14
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$23 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$7 = [0]
	
.LABEL $label$19
	CALL eosio_assert($7, [9205])
	CALL eosio_assert(((int_64)$13 > (int_64)0), [9475])
	CALL eosio_assert(((int_64)$12 == (int_64)*($9 + [8])), [9251])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$25 }
	$6 = uint_32($6 >> [1])
	goto $label$24 
	
.LABEL $label$25
	$6 = *($4 + [4])
	
.LABEL $label$24
	CALL eosio_assert(($6 <= [257]), [9116])
	$6 = *($4)
	$7 = CALL $135([9330])
	if ( ((int_32)$7 != (int_32)( *(($4 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$26 }
	if ( CALL $126($4, [0], [-1], [9330], $7) ){ goto $label$26 }
	$14 = *(($3 + [8]))
	*((($5 + [88]) + [8])) = $14
	$11 = *($3)
	*((($5 + [40]) + [8])) = $14
	*($5 + [88]) = $11
	*($5 + [40]) = $11
	CALL $74($0, $1, ($5 + [40]))
	
.LABEL $label$26
	$6 = ($3 + [8])
	$14 = *($6)
	*((($5 + [72]) + [8])) = $14
	$11 = *($3)
	*((($5 + [24]) + [8])) = $14
	*($5 + [72]) = $11
	*($5 + [24]) = $11
	CALL $75($0, $1, ($5 + [24]))
	$14 = *($6)
	*((($5 + [56]) + [8])) = $14
	$11 = *($3)
	*((($5 + [8]) + [8])) = $14
	*($5 + [8]) = $11
	*($5 + [56]) = $11
	CALL $70($0, $2, ($5 + [8]), $1)
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$2 }
	$10 = ($5 + [132])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$28 }
	
.LOOP $label$29:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$29 }
	$6 = *(($5 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $4
	
.LABEL $label$27
	*($10) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$1
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$32 }
	$6 = uint_32($6 >> [1])
	goto $label$31 
	
.LABEL $label$32
	$6 = *(($4 + [4]))
	
.LABEL $label$31
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9370])
	CALL eosio_assert([0], [9383])
	$global$0 = ($5 + [144])
}

int_32 .FUNC $73 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [10267])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $43($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [10267])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $50(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [10267])
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [10432])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$2()), [10478])
	$1 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [10096])
	$7 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [10158])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10529])
	CALL eosio_assert([1], [9978])
	CALL memcpy(($4 + [64]), $5, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($4 + [64]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [64]), [16])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$1 + (int_64)1)
	$8 = *($4 + [32])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$2()), [10346])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [9984])
	$10 = ($9 + [8])
	$1 = (int_64)5462355
	
.LOOP $label$6:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $7
	$11 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $0 ){ goto $label$8 }
	$11 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($11, [8535])
	*($9 + [16]) = ($4 + [8])
	*(($5 = ($9 + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	CALL eosio_assert([1], [9978])
	CALL memcpy(($4 + [64]), $9, [8])
	CALL eosio_assert([1], [9978])
	CALL memcpy((($4 + [64]) | [8]), $10, [8])
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [64]), [16]
	*($9 + [20]) = $0)
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($4 + [56]) = $9
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	*($4 + [52]) = $0
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$11 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($4 + [56]) = [0]
	*($5) = $9
	*($8) = ($5 + [24])
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $71(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($4 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	
.LABEL $label$12
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [576])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [9903])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8384]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [9755]
	$7 = (int_64)0
	
.LOOP $label$13:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$14 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8384]
	$7 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$23 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$17
	$4 = (int_64)7
	
.LOOP $label$24:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$24 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = CALL $1(($3 + [248]), $0)
	if ( ((int_64)$2 <= (int_64)3607572829840605183) ){ goto $label$39 }
	if ( ((int_64)$2 > (int_64)4729492996716756991) ){ goto $label$38 }
	if ( ((int_64)$2 > (int_64)3626087424883982335) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)3607572829840605184) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)3626087424883949568) ){ goto $label$25 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [64]) = *($3 + [184])
	CALL $77($6, ($3 + [64]))
	goto $label$25 
	
.LABEL $label$39
	if ( ((int_64)$2 <= (int_64)-4994048603321270273) ){ goto $label$37 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$25 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [2]
	*($3 + [32]) = *($3 + [216])
	CALL $78($6, ($3 + [32]))
	goto $label$25 
	
.LABEL $label$38
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)4729492996716756992) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4921564802787365024) ){ goto $label$25 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [3]
	*($3 + [88]) = *($3 + [160])
	CALL $79($6, ($3 + [88]))
	goto $label$25 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4994302213476581376) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4994301902879742271) ){ goto $label$25 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [4]
	*($3 + [96]) = *($3 + [152])
	CALL $80($6, ($3 + [96]))
	goto $label$25 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)3626087424883982336) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)3626087424883998720) ){ goto $label$25 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [120]) = *($3 + [128])
	CALL $81($6, ($3 + [120]))
	goto $label$25 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$25 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [6]
	*($3 + [40]) = *($3 + [208])
	CALL $78($6, ($3 + [40]))
	goto $label$25 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$25 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [7]
	*($3 + [8]) = *($3 + [240])
	CALL $78($6, ($3 + [8]))
	goto $label$25 
	
.LABEL $label$33
	*($3 + [148]) = [0]
	*($3 + [144]) = [8]
	*($3 + [104]) = *($3 + [144])
	CALL $82($6, ($3 + [104]))
	goto $label$25 
	
.LABEL $label$32
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [56]) = *($3 + [192])
	CALL $79($6, ($3 + [56]))
	goto $label$25 
	
.LABEL $label$31
	*($3 + [172]) = [0]
	*($3 + [168]) = [10]
	*($3 + [80]) = *($3 + [168])
	CALL $82($6, ($3 + [80]))
	goto $label$25 
	
.LABEL $label$30
	*($3 + [204]) = [0]
	*($3 + [200]) = [11]
	*($3 + [48]) = *($3 + [200])
	CALL $79($6, ($3 + [48]))
	goto $label$25 
	
.LABEL $label$29
	*($3 + [180]) = [0]
	*($3 + [176]) = [12]
	*($3 + [72]) = *($3 + [176])
	CALL $79($6, ($3 + [72]))
	goto $label$25 
	
.LABEL $label$28
	*($3 + [140]) = [0]
	*($3 + [136]) = [13]
	*($3 + [112]) = *($3 + [136])
	CALL $83($6, ($3 + [112]))
	goto $label$25 
	
.LABEL $label$27
	*($3 + [228]) = [0]
	*($3 + [224]) = [14]
	*($3 + [24]) = *($3 + [224])
	CALL $84($6, ($3 + [24]))
	goto $label$25 
	
.LABEL $label$26
	*($3 + [236]) = [0]
	*($3 + [232]) = [15]
	*($3 + [16]) = *($3 + [232])
	CALL $85($6, ($3 + [16]))
	
.LABEL $label$25
	CALL $86($6)
	
.LABEL $label$4
	CALL $128([0])
	$global$0 = ($3 + [576])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [104])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8535])
	*($3 + [148]) = $6
	*($3 + [144]) = $6
	*($3 + [152]) = ($6 + $7)
	*($3 + [112]) = ($3 + [144])
	*($3 + [128]) = ($3 + [16])
	CALL $91(($3 + [128]), ($3 + [112]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $139($6)
	
.LABEL $label$8
	*(($1 = (($3 + [112]) + [8]))) = *(($3 + [104]))
	*($3 + [112]) = *($3 + [96])
	$8 = *(($3 + [88]))
	$10 = *(($3 + [80]))
	$12 = *(($3 + [72]))
	$13 = *(($3 + [64]))
	$14 = *(($3 + [56]))
	$15 = *(($3 + [48]))
	$16 = *(($3 + [40]))
	$17 = *(($3 + [32]))
	$18 = *((($3 + [16]) + [8]))
	$19 = *($3 + [16])
	*((($3 + [128]) + [8])) = *($1)
	*($3 + [128]) = *($3 + [112])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$20 = *((($3 + [128]) + [8]))
	*((($3 + [144]) + [8])) = $20
	*(($3 + [8])) = $20
	$20 = *($3 + [128])
	*($3) = $20
	*($3 + [144]) = $20
	CALL void $1((int_32 $19), (int_64 $18), (int_64 $17), (int_64 $16), (int_64 $15), (int_64 $14), (int_64 $13), (int_64 $12), (int_64 $10), (int_64 $8), (int_64 $3), (int_32 $5))
	$global$0 = ($3 + [160])
	return [1]
}

void .FUNC $74 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	float_64 $11
	float_64 $12
	int_32 $13
	float_64 $14
	int_32 $15
	float_64 $16
	float_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	float_64 $22
	float_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$14($1), [9537])
	$4 = *($2 + [8])
	CALL require_recipient($1)
	$5 = [0]
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9575])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [9600])
	CALL eosio_assert(((int_64)$4 == (int_64)1196446212), [9640])
	*((($3 + [120]) + [32])) = [0]
	*($3 + [128]) = $1
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [120]) = *($0)
	$2 = CALL $49(($3 + [120]), (uint_64)$4 >> (uint_64)(int_64)8), [9674]
	CALL eosio_assert(((int_64)*($2)) >= (int_64)$7), [9706])
	*((($3 + [80]) + [32])) = [0]
	*($3 + [88]) = $1
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$8 = *($0)
	*($3 + [80]) = $8
	$6 = CALL db_find_i64($8, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $19(($3 + [80]), $6)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [80])), [10267])
	
.LABEL $label$6
	$6 = [0]
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [9732])
	$11 = *($5 + [48])
	$8 = *($2)
	CALL eosio_assert($10, [10397])
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [80])), [10432])
	CALL eosio_assert(((int_64)*($3 + [80]) == (int_64)CALL $fimport$2()), [10478])
	*($5 + [48]) = ((float_64)((float_64)$11 * (float_64)(CASTING float_64)(int_64 (int_64))($8 - $7))) / (float_64)(CASTING float_64)(int_64 $8))
	$8 = *($5)
	CALL eosio_assert([1], [10529])
	*($3 + [32]) = (($3 + [160]) + [72])
	*($3 + [28]) = ($3 + [160])
	*($3 + [24]) = ($3 + [160])
	*($3 + [240]) = ($3 + [24])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	CALL $28(($3 + [40]), ($3 + [240]))
	CALL db_update_i64(*($5 + [80]), (int_64)0, ($3 + [160]), [72])
	$2 = ($3 + [96])
	if ( (uint_64)($8 <= *($2)) ){ goto $label$7 }
	*($2) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$12 = *(($0 + [168]))
	$13 = ($0 + [72])
	$14 = *($13)
	$4 = *(($0 + [96]))
	$15 = *(($0 + [160]))
	$11 = *(($0 + [88]))
	$16 = *(($0 + [128]))
	CALL eosio_assert([1], [9984])
	$17 = (float_64))((float_64)1 - $16)
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	
.LOOP $label$10:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $9
	$5 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $9
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [8535])
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	
.LOOP $label$15:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$8 = $9
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$8 = $9
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$17 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [8535])
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	
.LOOP $label$19:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$8 = $9
	$10 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = $9
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$6 < (int_32)[6])
	$5 = ($6 + [1])
	$6 = $5
	if ( $2 ){ goto $label$21 }
	$10 = [1]
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert($10, [8535])
	$21 = (CASTING float_64)(int_64 $7)
	$22 = (float_64))($11 - $21)
	$23 = ((float_64)(CASTING float_64)(int_64 ((int_64)$4 * (int_64)(CASTING uint_64)(uint_32 $15))) / (float_64)$16)
	if ( ((int_32)((float_64)$11 > (float_64)$23) ^ (int_32)[1]) ){ goto $label$31 }
	if ( ((int_32)((float_64)$22 < (float_64)$23) ^ (int_32)[1]) ){ goto $label$31 }
	$11 = CALL $129(((float_64)$14 * (float_64)((float_64)CALL $130((float_64))((float_64)1 - ((float_64)$22 / (float_64)$11)), ((float_64)(float_64)1 / (float_64)$16)) + (float_64)(float_64)-1))
	$22 = (float_64)
	$23 = ((float_64)(float_64))($21 - $22($11 - $23))
	$22 = ((float_64)$23 / (float_64)(CASTING float_64)(uint_32 $15))
	if ( (((float_64)$22 + (float_64)$11))) < (float_64)(float_64)18446744073709551615) & ((float_64)$22 >= (float_64)(float_64)0)) ){ goto $label$30 }
	$24 = (int_64)0
	goto $label$29 
	
.LABEL $label$31
	if ( (((int_32)((float_64)$22 >= (float_64)$23) ^ (int_32)[1]) == 0) ){ goto $label$32 }
	$25 = (int_64)0
	$26 = (int_64)0
	$24 = (int_64)0
	if ( ((int_32)((float_64)$11 <= (float_64)$23) ^ (int_32)[1]) ){ goto $label$22 }
	$11 = ((float_64)$21 / (float_64)(CASTING float_64)(uint_32 $15))
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$26 }
	$24 = (int_64)0
	goto $label$25 
	
.LABEL $label$32
	$11 = CALL $129(((float_64)$14 * (float_64)((float_64)CALL $130(((float_64)((float_64)(CASTING float_64)(int_64 (int_64))((int_64)0 - $7)) / (float_64)$11) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)$16)) + (float_64)(float_64)-1))
	if ( ((float_64)(float_64)|$11)| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$7 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$30
	$24 = (Rounds 0)($22)
	
.LABEL $label$29
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$8 = $9
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$37 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$6 = [0]
	
.LABEL $label$33
	CALL eosio_assert($6, [8535])
	*($13) = (float_64))(*($13) - $11)
	$16 = ((float_64)$16 * (float_64)$23)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$39 }
	$7 = (int_64)0
	goto $label$38 
	
.LABEL $label$39
	$7 = (Rounds 0)($16)
	
.LABEL $label$38
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$8 = $9
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$44 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$6 = [0]
	
.LABEL $label$40
	CALL eosio_assert($6, [8535])
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$46 }
	$4 = (int_64)0
	goto $label$45 
	
.LABEL $label$46
	$4 = (Rounds 0)($11)
	
.LABEL $label$45
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$8 = $9
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$51 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$6 = [0]
	
.LABEL $label$47
	CALL eosio_assert($6, [8535])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [10096])
	$26 = ((int_64)$4 + (int_64)$7)
	CALL eosio_assert(((int_64)$26 > (int_64)-4611686018427387904), [10139])
	CALL eosio_assert(((int_64)$26 < (int_64)4611686018427387904), [10158])
	*($13) = (float_64))(*($13) - $16)
	$11 = ((float_64)$17 * (float_64)$23)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$53 }
	$7 = (int_64)0
	goto $label$52 
	
.LABEL $label$53
	$7 = (Rounds 0)($11)
	
.LABEL $label$52
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$8 = $9
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$58 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$6 = [0]
	
.LABEL $label$54
	CALL eosio_assert($6, [8535])
	$13 = ($0 + [80])
	goto $label$24 
	
.LABEL $label$28
	$7 = (Rounds 0)($11)
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$8 = $9
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$63 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$6 = [0]
	
.LABEL $label$59
	CALL eosio_assert($6, [8535])
	$25 = (int_64)0
	$26 = $7
	$24 = $7
	$18 = (int_64)1397703940
	goto $label$23 
	
.LABEL $label$26
	$24 = (Rounds 0)($11)
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$67 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$67
	$8 = $9
	
.LOOP $label$68:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$68 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	$6 = [0]
	
.LABEL $label$64
	CALL eosio_assert($6, [8535])
	$23 = (CASTING float_64)(int_64 $24)
	$11 = ((float_64)$16 * (float_64)$23)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$70 }
	$26 = (int_64)0
	goto $label$69 
	
.LABEL $label$70
	$26 = (Rounds 0)($11)
	
.LABEL $label$69
	CALL eosio_assert((uint_64)(((int_64)$26 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$8 = $9
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$75 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$6 = [0]
	
.LABEL $label$71
	CALL eosio_assert($6, [8535])
	*($13) = (float_64))(*($13) - (CASTING float_64)(int_64 $26))
	$11 = ((float_64)$17 * (float_64)$23)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$77 }
	$7 = (int_64)0
	goto $label$76 
	
.LABEL $label$77
	$7 = (Rounds 0)($11)
	
.LABEL $label$76
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$80:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$81 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$81
	$8 = $9
	
.LOOP $label$82:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$79 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$82 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	$6 = [0]
	
.LABEL $label$78
	CALL eosio_assert($6, [8535])
	$13 = ($0 + [80])
	
.LABEL $label$24
	$25 = $7
	
.LABEL $label$23
	*($13) = (float_64))(*($13) - (CASTING float_64)(int_64 $7))
	
.LABEL $label$22
	*(($2 = ($0 + [88]))) = (float_64))(*($2) - $21)
	$11 = ((float_64)$12 * (float_64)(CASTING float_64)(int_64 $24))
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$84 }
	$27 = (int_64)0
	goto $label$83 
	
.LABEL $label$84
	$27 = (Rounds 0)($11)
	
.LABEL $label$83
	CALL eosio_assert((uint_64)(((int_64)$27 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9984])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$87:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$88 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	$8 = $9
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$89 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$86
	$6 = [0]
	
.LABEL $label$85
	CALL eosio_assert($6, [8535])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$18), [10176])
	$28 = (int_64)
	CALL eosio_assert(((int_64)$28($24 - $27)) > (int_64)-4611686018427387904), [10224])
	CALL eosio_assert(((int_64)$28 < (int_64)4611686018427387904), [10246])
	*(($2 = ($0 + [176]))) = ((float_64)*($2) + (float_64)(CASTING float_64)(int_64 $27))
	if ( ((int_64)$26 < (int_64)1) ){ goto $label$99 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8480]
	$4 = (int_64)0
	
.LOOP $label$100:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$101 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$6 = ($6 + [-91])
	goto $label$102 
	
.LABEL $label$103
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$101
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$4 = ((int_64)$7 | (int_64)$4)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$100 }
	$8 = (int_64)6
	
.LOOP $label$104:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$104 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8372]
	$4 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$110 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$6 = ($6 + [-91])
	goto $label$108 
	
.LABEL $label$110
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$106
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$105 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8384]
	$29 = (int_64)0
	
.LOOP $label$111:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$116 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$6 = ($6 + [-91])
	goto $label$114 
	
.LABEL $label$116
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$113
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$112
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$111 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8480]
	$30 = (int_64)0
	
.LOOP $label$117:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$118 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$6 = ($6 + [-91])
	goto $label$119 
	
.LABEL $label$120
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$118
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$117 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [9755]
	$31 = (int_64)0
	
.LOOP $label$121:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$122 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$6 = ($6 + [-91])
	goto $label$123 
	
.LABEL $label$124
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$122
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$31 = ((int_64)$7 | (int_64)$31)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$121 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $135([9768])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$98 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$127 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$126
	CALL memcpy($6, [9768], $2)
	
.LABEL $label$125
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $19
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $31
	*($3 + [160]) = $30
	*($3 + [176]) = $26
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $22(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $23(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$128 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$128
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$129 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$129
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$130 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$130
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$131
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$99 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$99
	if ( ((int_64)$25 < (int_64)1) ){ goto $label$132 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8493]
	$4 = (int_64)0
	
.LOOP $label$133:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$134 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$6 = ($6 + [-91])
	goto $label$135 
	
.LABEL $label$136
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$134
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$4 = ((int_64)$7 | (int_64)$4)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$133 }
	$8 = (int_64)6
	
.LOOP $label$137:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$137 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8372]
	$4 = (int_64)0
	
.LOOP $label$138:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$143 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$6 = ($6 + [-91])
	goto $label$141 
	
.LABEL $label$143
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$142
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$140
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$139
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$138 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8384]
	$29 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$149 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$6 = ($6 + [-91])
	goto $label$147 
	
.LABEL $label$149
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$145
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$144 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8493]
	$30 = (int_64)0
	
.LOOP $label$150:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$151 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$153 }
	$6 = ($6 + [-91])
	goto $label$152 
	
.LABEL $label$153
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$152
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$151
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$150 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [9755]
	$31 = (int_64)0
	
.LOOP $label$154:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$155 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$157 }
	$6 = ($6 + [-91])
	goto $label$156 
	
.LABEL $label$157
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$156
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$155
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$31 = ((int_64)$7 | (int_64)$31)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$154 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $135([9799])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$97 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$160 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$160
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$159
	CALL memcpy($6, [9799], $2)
	
.LABEL $label$158
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $20
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $31
	*($3 + [160]) = $30
	*($3 + [176]) = $25
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $22(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $23(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$161 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$161
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$162 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$162
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$163 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$163
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$164 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$164
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$132
	if ( ((int_64)$27 < (int_64)1) ){ goto $label$165 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$166:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$166 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8372]
	$4 = (int_64)0
	
.LOOP $label$167:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$172 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$6 = ($6 + [-91])
	goto $label$170 
	
.LABEL $label$172
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$171
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$169
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$168
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$167 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8384]
	$29 = (int_64)0
	
.LOOP $label$173:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$178 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$177 }
	$6 = ($6 + [-91])
	goto $label$176 
	
.LABEL $label$178
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$177
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$176
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$175
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$174
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$173 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8467]
	$30 = (int_64)0
	
.LOOP $label$179:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$180 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$182 }
	$6 = ($6 + [-91])
	goto $label$181 
	
.LABEL $label$182
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$181
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$180
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$179 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $135([9838])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$96 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$185 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$184 }
	goto $label$183 
	
.LABEL $label$185
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$184
	CALL memcpy($6, [9838], $2)
	
.LABEL $label$183
	*(($6 + $2)) = [0]
	*(($3 + [184])) = (int_64)1397703940
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $30
	*($3 + [176]) = $27
	*($3 + [160]) = *($0)
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $22(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $23(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$186 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$186
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$187 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$187
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$188 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$188
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$189 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$189
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$165
	CALL eosio_assert(((int_64)$24 > (int_64)0), [9870])
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$190:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$190 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8372]
	$4 = (int_64)0
	
.LOOP $label$191:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$196 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$195 }
	$6 = ($6 + [-91])
	goto $label$194 
	
.LABEL $label$196
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$195
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$194
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$193
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$192
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$191 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8384]
	$29 = (int_64)0
	
.LOOP $label$197:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$202 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$201 }
	$6 = ($6 + [-91])
	goto $label$200 
	
.LABEL $label$202
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$199 }
	goto $label$198 
	
.LABEL $label$201
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$200
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$199
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$198
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$197 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $135([9885])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$203 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$206 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$205 }
	goto $label$204 
	
.LABEL $label$206
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$205
	CALL memcpy($6, [9885], $2)
	
.LABEL $label$204
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $18
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $1
	*($3 + [176]) = $28
	*($3 + [160]) = *($0)
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $22(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $23(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$207 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$207
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$208 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$208
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$209 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$209
	if ( (*(($3 + [192])) & [1]) ){ goto $label$211 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$210 }
	goto $label$95 
	
.LABEL $label$211
	CALL _ZdlPv(*(($3 + [200])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$95 }
	
.LABEL $label$210
	CALL _ZdlPv(*(($3 + [16])))
	CALL $37($0)
	$5 = *($3 + [104])
	if ( $5 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$203
	CALL $114(($3 + [8]))
	
.LABEL $label$98
	CALL $114(($3 + [8]))
	
.LABEL $label$97
	CALL $114(($3 + [8]))
	
.LABEL $label$96
	CALL $114(($3 + [8]))
	
.LABEL $label$95
	CALL $37($0)
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$93 }
	
.LABEL $label$94
	$10 = ($3 + [108])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$92 }
	
.LOOP $label$212:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$213 }
	CALL _ZdlPv($6)
	
.LABEL $label$213
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$212 }
	$2 = *(($3 + [104]))
	*($10) = $5
	CALL _ZdlPv($2)
	$5 = *($3 + [144])
	if ( $5 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$90 }
	goto $label$91 
	
.LABEL $label$92
	*($10) = $5
	CALL _ZdlPv($5)
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$90 }
	
.LABEL $label$91
	$10 = ($3 + [148])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$215 }
	
.LOOP $label$216:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$217 }
	CALL _ZdlPv($6)
	
.LABEL $label$217
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$216 }
	$2 = *(($3 + [144]))
	goto $label$214 
	
.LABEL $label$215
	$2 = $5
	
.LABEL $label$214
	*($10) = $5
	CALL _ZdlPv($2)
	$global$0 = ($3 + [256])
	return 
	
.LABEL $label$90
	$global$0 = ($3 + [256])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [10073])
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8506]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	$5 = *($3 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [8519])
	$7 = [0]
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$5 = $6)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $9
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $9
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$9 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [8535])
	$10 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$7 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$5 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $5
	$10 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $5
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $10 ){ goto $label$14 }
	$10 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [8555])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8570])
	CALL eosio_assert(CALL $fimport$14($2), [8598])
	$5 = *($3)
	$6 = *(($3 + [8]))
	*((($4 + [8]) + [8])) = $6
	*((($4 + [24]) + [8])) = $6
	*($4 + [40]) = $2
	*($4 + [8]) = $5
	*($4 + [24]) = $5
	CALL $26($0, $1, ($4 + [40]), [1], ($4 + [8]))
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [256])
	$global$0 = $1
	$2 = ($0 + [16])
	$3 = *($0 + [56])
	$5 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [10267])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($2), *(($0 + [24])), (int_64)4154159847563875632, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $3($2, $7)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [10267])
	
.LABEL $label$2
	CALL eosio_assert([1], [10397])
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [10432])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [10478])
	*($7 + [24]) = *(($0 + [88]))
	*($7 + [8]) = *(($0 + [72]))
	*($7 + [16]) = *(($0 + [80]))
	*(($7 + [88])) = *(($0 + [152]))
	*($7 + [80]) = *(($0 + [144]))
	*($7 + [136]) = *(($0 + [200]))
	*($7 + [120]) = *(($0 + [184]))
	*($7 + [112]) = *(($0 + [176]))
	$3 = *($7)
	CALL eosio_assert([1], [10529])
	*($1 + [168]) = ($1 + [152])
	*($1 + [164]) = $1
	*($1 + [160]) = $1
	*($1 + [176]) = ($1 + [160])
	*($1 + [188]) = ($7 + [8])
	*($1 + [184]) = $7
	*($1 + [192]) = ($7 + [16])
	*($1 + [196]) = ($7 + [24])
	*($1 + [200]) = ($7 + [32])
	*($1 + [204]) = ($7 + [48])
	*($1 + [208]) = ($7 + [56])
	*($1 + [212]) = ($7 + [64])
	*($1 + [216]) = ($7 + [72])
	*($1 + [220]) = ($7 + [80])
	*($1 + [224]) = ($7 + [96])
	*($1 + [228]) = ($7 + [104])
	*($1 + [232]) = ($7 + [112])
	*($1 + [236]) = ($7 + [120])
	*($1 + [240]) = ($7 + [128])
	*($1 + [244]) = ($7 + [136])
	*($1 + [248]) = ($7 + [144])
	*($1 + [252]) = ($7 + [152])
	CALL $17(($1 + [184]), ($1 + [176]))
	CALL db_update_i64(*($7 + [164]), (int_64)0, $1, [152])
	$7 = ($0 + [32])
	if ( ((uint_64)*($7) > (uint_64)$3) ){ goto $label$1 }
	*($7) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($1 + [256])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $136($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8535])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [10341])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [10341])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $139($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $136($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [10341])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $139($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $32 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $24($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $25(($4 + [72]), ($4 + [64]))
	CALL $23(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $127(($4 + [8]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [10036])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $116($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $119($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL eosio_assert([1], [9984])
	$6 = (int_64)4673618
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8535])
	*(($1 + [16])) = (int_64)1196446212
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9984])
	$6 = (int_64)4673618
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8535])
	*(($1 + [32])) = (int_64)1196446212
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = [0]
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = [0]
	*($1 + [48]) = (CASTING float_64)(int_64 *(*($4 + [4])))
	$9 = $2
	$7 = ($9 + [-80])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($9 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [64])
	*($3 + [60]) = ($1 + [72])
	CALL $28(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749778856088576, *(*($0 + [8])), $6, $7, [72])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [64])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $129 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}