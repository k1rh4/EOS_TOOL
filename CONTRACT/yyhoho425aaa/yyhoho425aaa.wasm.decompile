(data (i32.const 8192) "eosvegascoin\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8214) "eosvegascorp\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8318) "eosvegasopmk\00")
(data (i32.const 8331) "EOS\00")
(data (i32.const 8335) "eosio.token\00")
(data (i32.const 8347) "EOS should be sent by eosio.token\00")
(data (i32.const 8381) "Incorrect token type.\00")
(data (i32.const 8403) "Invalid token symbol\00")
(data (i32.const 8424) "Quantity must be positive\00")
(data (i32.const 8450) "type[\00")
(data (i32.const 8456) "]\00")
(data (i32.const 8459) "seed[\00")
(data (i32.const 8465) "-1\00")
(data (i32.const 8468) "-2\00")
(data (i32.const 8471) "Non-recognized game id\00")
(data (i32.const 8494) "user seed cannot by empty.\00")
(data (i32.const 8521) "bet_cards[\00")
(data (i32.const 8532) "bet_value[\00")
(data (i32.const 8543) "bet_cards cannot be empty\00")
(data (i32.const 8569) "bet_value cannot be empty\00")
(data (i32.const 8595) "bet_cards and bet value should be equal length\00")
(data (i32.const 8642) "pokerdice: your last round is not finished. Please contact admin!\00")
(data (i32.const 8708) "yyhoho425aaa\00")
(data (i32.const 8721) "PokerDice: user pool not found\00")
(data (i32.const 8752) "PokerDice:lackjack:bet must be larger than zero\00: no conversion\00")
(data (i32.const 8816) "PokerDice:totalbet must be equal to betnum\00: out of range\00")
(data (i32.const 8874) "_\00")
(data (i32.const 8876) "PokerDice: seed is incorrect.\00")
(data (i32.const 8906) "PokerDice: nonce does not match.\00")
(data (i32.const 8939) "PokerDice: bet token does not match.\00")
(data (i32.const 8976) "active\00")
(data (i32.const 8983) "transfer\00")
(data (i32.const 8992) "Winner winner chicken dinner! \e5\a4\a7\e5\90\89\e5\a4\a7\e5\88\a9\ef\bc\8c\e4\bb\8a\e6\99\9a\e5\90\83\e9\b8\a1\ef\bc\81- PokerDice.rovegas.com\00")
(data (i32.const 9076) "string is too long to be a valid name\00")
(data (i32.const 9114) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9181) "character is not in allowed character set for names\00")
(data (i32.const 9233) "string is too long to be a valid symbol_code\00")
(data (i32.const 9278) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9331) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9380) "invalid symbol name\00")
(data (i32.const 9400) "write\00")
(data (i32.const 9406) "get\00")
(data (i32.const 9410) "read\00")
(data (i32.const 9415) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9466) "error reading iterator\00")
(data (i32.const 9489) "cannot create objects in table of another contract\00")
(data (i32.const 9540) "cannot pass end iterator to erase\00")
(data (i32.const 9574) "cannot increment end iterator\00")
(data (i32.const 9604) "object passed to erase is not in multi_index\00")
(data (i32.const 9649) "cannot erase objects in table of another contract\00")
(data (i32.const 9699) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9752) "cannot pass end iterator to modify\00")
(data (i32.const 9787) "object passed to modify is not in multi_index\00")
(data (i32.const 9833) "cannot modify objects in table of another contract\00")
(data (i32.const 9884) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18368) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "get_action" (func $fimport$10 (param i32 i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $16))
(export "_Znwj" (func $35))
(export "_ZdlPv" (func $37))
(export "_Znaj" (func $36))
(export "_ZdaPv" (func $38))
(export "_ZnwjSt11align_val_t" (func $39))
(export "_ZnajSt11align_val_t" (func $40))
(export "_ZdlPvSt11align_val_t" (func $41))
(export "_ZdaPvSt11align_val_t" (func $42))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $1 $11 $9)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18625))
(global $global$2 i32 (i32.const 18625))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $71($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [184])) = (int_64)0
	*((($4 + [152]) + [40])) = (int_64)0
	*((($4 + [152]) + [56])) = (int_64)0
	*((($4 + [152]) + [64])) = (int_64)0
	*((($4 + [152]) + [80])) = [0]
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [160]) = [0]
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [320]) = ($4 + [136])
	CALL $23(($4 + [136]), ($4 + [152]))
	CALL eosio_assert(((uint_32)(*($4 + [144]) - *($4 + [140])) > (uint_32)[7]), [9410])
	CALL memcpy(($4 + [168]), *($4 + [140]), [8])
	*($4 + [140]) = (*($4 + [140]) + [8])
	CALL $23(($4 + [136]), (($4 + [152]) + [24]))
	CALL $23(($4 + [136]), ($4 + [188]))
	*($4 + [24]) = ($4 + [152])
	CALL $24(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*((($4 + [24]) + [80])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($3 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $25(($4 + [320]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $74($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL $22(($4 + [80]))
	CALL $26(($4 + [152]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $62 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $71($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9410])
	CALL memcpy(($4 + [120]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [120])
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $74($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [104]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	CALL $22(($4 + [64]))
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $62($3, (int_64)0)
	$4 = CALL $64($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $69(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9944])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $69(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9956]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9960])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9956]) = [1]
	$2 = ($2 << [16])
	*([0] + [9960]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9960])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9960]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9956]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9956]) = [1]
	$3 = ($3 << [16])
	*([0] + [9960]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9960])
	
.LABEL $label$10
	*([0] + [9960]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9410])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), *($0 + [16]))
	CALL $23(*($1), *($0 + [20]))
	CALL $23(*($1), *($0 + [24]))
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9400])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9400])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $44(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $44(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9410])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $15($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $48($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $48($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $43($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	$1 = CALL $44($2, ($1 + [116]))
	$9 = CALL $44(($2 + [16]), ($1 + [104]))
	$8 = CALL $44(($2 + [32]), ($1 + [72]))
	$7 = CALL $44(($2 + [48]), ($1 + [60]))
	$6 = CALL $44(($2 + [64]), ($1 + [48]))
	$5 = CALL $44(($2 + [80]), ($1 + [36]))
	$4 = CALL $44(($2 + [96]), ($1 + [24]))
	$3 = CALL $44(($2 + [112]), $1)
	CALL $34($0, $3, *($1 + [16]), $4, $5, $6, $7, $8, *($1 + [88]), *($1 + [96]), $9, $1)
	if ( (*($1) & [1]) ){ goto $label$15 }
	if ( (*($9) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($7) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23(*($1), (*($0) + [48]))
	$0 = *($0)
	CALL $23(*($1), ($0 + [60]))
	CALL $23(*($1), ($0 + [72]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy(($0 + [88]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [9410])
	CALL memcpy(($0 + [96]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), ($0 + [104]))
	CALL $23(*($1), ($0 + [116]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9400])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9400])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9400])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [116]) & [1]) ){ goto $label$15 }
	if ( (*($0 + [104]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($0 + [124])))
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [112])))
	$1 = [1]
	if ( ((*($0 + [72]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($0 + [72]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($0 + [60]) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [80])))
	if ( ((*($0 + [60]) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [68])))
	$1 = [1]
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [48]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [36]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [56])))
	if ( ((*($0 + [36]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [44])))
	$1 = [1]
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [24]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [32])))
	if ( ((*($0) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($0 + [8]))
	return $0
	
.LABEL $label$1
	return $0
}

void .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18348])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18156]
	$3 = (((int_32)$1 * (int_32)[12]) + [18156])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $68($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $47($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $47($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $58())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $70($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $43 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $74($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $47($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $73($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8232])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $68([8227])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8227], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $58())
	*(CALL $58()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $65($4, ($3 + [12]), $2)
	$5 = CALL $58()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $52($3)
	
.LABEL $label$1
	CALL $53($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $71($1)
	
.LABEL $label$2
	*(CALL $58()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $71(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $74($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $71 (int_32 $0)
{
	return CALL $72([9964], $0)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $57($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = [8708]
	*($2 + [12]) = CALL $68([8708])
	*($2) = *($2 + [8])
	CALL require_auth(*(CALL $2(($2 + [16]), $2)))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)$3), [9415])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-6166753595933851648, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $4($3, $6)
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)$3), [9415])
	
.LABEL $label$2
	CALL eosio_assert([1], [9540])
	CALL eosio_assert([1], [9574])
	$6 = CALL db_next_i64(*($7 + [72]), ($2 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $4($3, $6)
	
.LABEL $label$6
	CALL $10($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $57($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $30(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9466])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $71($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9410])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9410])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $74($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9466])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $71($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [68]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [20])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [44])
	*($3 + [56]) = ($5 + [56])
	CALL $29(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $74($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [56]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [44]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [52])))
	$4 = [1]
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = [1]
	if ( (*($1 + [32]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [8]) & $4) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $46($5, *($3 + [4]))
	*($1 + [20]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	$6 = ($1 + [32])
	CALL $46($6, *($3 + [16]))
	$7 = ($1 + [44])
	CALL $46($7, *($3 + [20]))
	$8 = ($1 + [56])
	CALL $46($8, *($3 + [24]))
	*(($3 = $2) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	$9 = ($1 + [20])
	*($3 + [40]) = $9
	$10 = ($1 + [24])
	*($3 + [44]) = $10
	*($3 + [48]) = $6
	*($3 + [52]) = $7
	*($3 + [56]) = $8
	CALL $31(($3 + [32]), ($3 + [8]))
	$11 = *($3 + [24])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$2 = CALL $71($11)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($11 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $11)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $6
	*($3 + [52]) = $7
	*($3 + [56]) = $8
	CALL $32(($3 + [32]), ($3 + [24]))
	$12 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($4 + [8]), (int_64)-6166753595933851648, *(*($0 + [8])), $12, $2, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$12 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $74($2)
	if ( (uint_64)($12 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9076])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9181])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9114])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9181])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)$3), [9415])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-7122859112739635200, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $7($3, $6)
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)$3), [9415])
	
.LABEL $label$3
	$6 = *($7 + [8])
	$8 = *($0)
	CALL eosio_assert([1], [9752])
	CALL eosio_assert(((int_32)*($7 + [12]) == (int_32)$3), [9787])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9833])
	*($7 + [8]) = (*($7 + [8]) + [1])
	$1 = *($7)
	CALL eosio_assert([1], [9884])
	CALL eosio_assert([1], [9400])
	CALL memcpy($2, $7, [8])
	CALL eosio_assert([1], [9400])
	CALL memcpy(($2 | [8]), ($7 + [8]), [4])
	CALL db_update_i64(*($7 + [16]), $8, $2, [12])
	$5 = ($0 + [88])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [32])
	return $6
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9489])
	*(($6 = CALL _Znwj([24])) + [12]) = $3
	*($6 + [8]) = [1]
	*($6) = $1
	CALL eosio_assert([1], [9400])
	CALL memcpy($2, $6, [8])
	CALL eosio_assert([1], [9400])
	CALL memcpy(($2 | [8]), ($6 + [8]), [4])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [80])), (int_64)-7122859112739635200, $8, $1, $2, [12])
	*($6 + [16]) = $7
	$5 = ($0 + [88])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [24]) = $6
	$1 = *($6)
	*($2) = $1
	*($2 + [20]) = $7
	$4 = ($0 + [100])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [24]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$5 = *($2 + [24])
	$6 = [0]
	*($2 + [24]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $8(($0 + [96]), ($2 + [24]), $2, ($2 + [20]))
	$5 = *($2 + [24])
	$6 = [0]
	*($2 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return $6
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [176]) = $1
	*($5 + [168]) = [8192]
	*($5 + [172]) = CALL $68([8192])
	*($5 + [24]) = *($5 + [168])
	if ( ((int_64)*(CALL $2(($5 + [32]), ($5 + [24]))) == (int_64)$1) ){ goto $label$1 }
	*($5 + [160]) = [8214]
	*($5 + [164]) = CALL $68([8214])
	*($5 + [16]) = *($5 + [160])
	if ( ((int_64)*(CALL $2(($5 + [192]), ($5 + [16]))) == (int_64)$1) ){ goto $label$1 }
	*($5 + [152]) = [8318]
	*($5 + [156]) = CALL $68([8318])
	*($5 + [8]) = *($5 + [152])
	if ( ((int_64)*(CALL $2(($5 + [136]), ($5 + [8]))) == (int_64)$1) ){ goto $label$1 }
	*(($5 + [144])) = [0]
	*($5 + [136]) = (int_64)0
	$6 = CALL $68([8331])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($5 + [136]) = ($6 << [1])
	$7 = (($5 + [136]) | [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [136]) = ($8 | [1])
	*($5 + [144]) = $7
	*($5 + [140]) = $6
	
.LABEL $label$5
	CALL memcpy($7, [8331], $6)
	
.LABEL $label$4
	*(($7 + $6)) = [0]
	*($5 + [128]) = [8335]
	*($5 + [132]) = CALL $68([8335])
	*($5) = *($5 + [128])
	$6 = CALL $2(($5 + [32]), $5)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($6)), [8347])
	$6 = CALL $68([8331])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9233])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = (int_64)0
	
.LOOP $label$10:
	$7 = *(($6 + [8330]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9278])
	
.LABEL $label$11
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$2 
	
.LABEL $label$7
	$1 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	CALL $43(($5 + [136]))
	
.LABEL $label$2
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)((int_64)$1 | (int_64)4)), [8381])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$12 }
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$1 = $2
	$7 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$1 = $2
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$17 }
	$7 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [8403])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [8424])
	$8 = CALL $44(($5 + [112]), $4)
	$10 = ($8 + [1])
	$7 = *($5 + [112])
	$11 = *($8 + [8])
	$4 = *($8 + [4])
	$12 = [0]
	$6 = CALL $68([8450])
	if ( ($6 == 0) ){ goto $label$18 }
	$12 = [0]
	$13 = ($7 & [1])
	$7 = ( $4 ? uint_32($7 >> [1]) : $13 )
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$18 }
	$13 = ( $11 ? $10 : $13 )
	$11 = ($13 + $7)
	$4 = $13
	
.LOOP $label$20:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$19 }
	$7 = CALL $66($4, [116], $7)
	if ( ($7 == 0) ){ goto $label$19 }
	if ( (CALL $67($7, [8450], $6) == 0) ){ goto $label$21 }
	$4 = ($7 + [1])
	$7 = ($11 - $4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$12 = [0]
	$11 = ( [-1] ? ($7 - $13) : ((int_32)$7 == (int_32)$11) )
	if ( (($11 + [1]) <= [2]) ){ goto $label$18 }
	$7 = *($5 + [112])
	$13 = *(($8 + [8]))
	$4 = *(($8 + [4]))
	$12 = [0]
	$6 = CALL $68([8456])
	if ( ($6 == 0) ){ goto $label$18 }
	$12 = [0]
	$15 = ($7 & [1])
	$7 = ( $4 ? uint_32($7 >> [1]) : $15 )
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$18 }
	$15 = ( $13 ? $10 : $15 )
	$13 = ($15 + $7)
	$4 = $15
	
.LOOP $label$22:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$19 }
	$7 = CALL $66($4, [93], $7)
	if ( ($7 == 0) ){ goto $label$19 }
	if ( (CALL $67($7, [8456], $6) == 0) ){ goto $label$23 }
	$4 = ($7 + [1])
	$7 = ($13 - $4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$23
	$12 = [0]
	$6 = ( [-1] ? ($7 - $15) : ((int_32)$7 == (int_32)$13) )
	if ( (($6 + [1]) <= [2]) ){ goto $label$18 }
	$6 = CALL $45(($5 + [32]), $8, ($11 + [5]), (([-5] - $11) + $6), $8)
	$12 = CALL $51($6, [0], [10])
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($6 + [8]))
	goto $label$18 
	
.LABEL $label$19
	$12 = [0]
	
.LABEL $label$18
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$6 = CALL $68([8458])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$28 }
	*($5 + [96]) = ($6 << [1])
	$7 = (($5 + [96]) | [1])
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($5 + [96]) = ($4 | [1])
	*($5 + [104]) = $7
	*($5 + [100]) = $6
	
.LABEL $label$27
	CALL memcpy($7, [8458], $6)
	
.LABEL $label$26
	$4 = [0]
	*(($7 + $6)) = [0]
	$7 = *($5 + [112])
	$13 = ($8 + [8])
	$14 = *($13)
	$15 = ($8 + [4])
	$11 = *($15)
	$6 = CALL $68([8459])
	if ( ($6 == 0) ){ goto $label$31 }
	$4 = ($7 & [1])
	$7 = ( $11 ? uint_32($7 >> [1]) : $4 )
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$30 }
	$14 = ( $14 ? $10 : $4 )
	$11 = ($14 + $7)
	$4 = $14
	
.LOOP $label$32:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$30 }
	$7 = CALL $66($4, [115], $7)
	if ( ($7 == 0) ){ goto $label$30 }
	if ( (CALL $67($7, [8459], $6) == 0) ){ goto $label$33 }
	$4 = ($7 + [1])
	$7 = ($11 - $4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$30 }
	$4 = ($7 - $14)
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$30 }
	
.LABEL $label$31
	$7 = *($5 + [112])
	$11 = *($15)
	$13 = *($13)
	$6 = CALL $68([8456])
	$15 = ($7 & [1])
	$11 = ( $11 ? uint_32($7 >> [1]) : $15 )
	if ( ($11 <= $4) ){ goto $label$34 }
	$7 = $4
	if ( ($6 == 0) ){ goto $label$35 }
	$11 = ($15 + $4)
	$15 = ( $13 ? $10 : $15 )
	$13 = ($15 + $11)
	$7 = ($13 - $11)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$37 }
	$7 = CALL $66($11, [93], $7)
	if ( ($7 == 0) ){ goto $label$37 }
	if ( (CALL $67($7, [8456], $6) == 0) ){ goto $label$36 }
	$11 = ($7 + [1])
	$7 = ($13 - $11)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$38 }
	
.LABEL $label$37
	$7 = $13
	
.LABEL $label$36
	$7 = ( [-1] ? ($7 - $15) : ((int_32)$7 == (int_32)$13) )
	
.LABEL $label$35
	if ( ((uint_32)($7 + [1]) >= (uint_32)[2]) ){ goto $label$29 }
	
.LABEL $label$34
	CALL $49(($5 + [96]), [8465])
	goto $label$24 
	
.LABEL $label$30
	CALL $49(($5 + [96]), [8468])
	goto $label$24 
	
.LABEL $label$29
	CALL $45(($5 + [32]), $8, ($4 + [5]), (([-5] - $4) + $7), $8)
	if ( (*($5 + [96]) & [1]) ){ goto $label$40 }
	*($5 + [96]) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*($5 + [104])) = [0]
	*($5 + [100]) = [0]
	
.LABEL $label$39
	CALL $48(($5 + [96]), [0])
	*((($5 + [96]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [96]) = *($5 + [32])
	goto $label$24 
	
.LABEL $label$25
	CALL $43(($5 + [96]))
	
.LABEL $label$24
	CALL eosio_assert((($12 <= [4]) | ((int_32)$12 == (int_32)[5])), [8471])
	if ( ((int_32)$12 != (int_32)[5]) ){ goto $label$41 }
	$6 = *($5 + [96])
	CALL eosio_assert(((int_32)( *($5 + [100]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [8494])
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$6 = CALL $68([8458])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$44 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$47 }
	*($5 + [80]) = ($6 << [1])
	$7 = (($5 + [80]) | [1])
	if ( $6 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$4 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($5 + [80]) = ($4 | [1])
	*($5 + [88]) = $7
	*($5 + [84]) = $6
	
.LABEL $label$46
	CALL memcpy($7, [8458], $6)
	
.LABEL $label$45
	*(($7 + $6)) = [0]
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$6 = CALL $68([8458])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$43 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$50 }
	*($5 + [64]) = ($6 << [1])
	$7 = (($5 + [64]) | [1])
	if ( $6 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$4 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($4)
	*($5 + [64]) = ($4 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $6
	
.LABEL $label$49
	CALL memcpy($7, [8458], $6)
	
.LABEL $label$48
	*(($7 + $6)) = [0]
	$7 = *($5 + [112])
	$11 = ($8 + [8])
	$12 = *($11)
	$13 = ($8 + [4])
	$4 = *($13)
	$6 = CALL $68([8521])
	if ( ($6 == 0) ){ goto $label$42 }
	$15 = ($7 & [1])
	$7 = ( $4 ? uint_32($7 >> [1]) : $15 )
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$42 }
	$15 = ( $12 ? $10 : $15 )
	$12 = ($15 + $7)
	$4 = $15
	
.LOOP $label$51:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$42 }
	$7 = CALL $66($4, [98], $7)
	if ( ($7 == 0) ){ goto $label$42 }
	if ( (CALL $67($7, [8521], $6) == 0) ){ goto $label$52 }
	$4 = ($7 + [1])
	$7 = ($12 - $4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$51 }
	goto $label$42 
	
.LABEL $label$52
	$7 = ( [-1] ? ($7 - $15) : ((int_32)$7 == (int_32)$12) )
	if ( (($7 + [1]) <= [2]) ){ goto $label$42 }
	$4 = *($5 + [112])
	$12 = *(($8 + [4]))
	$15 = *(($8 + [8]))
	$6 = CALL $68([8456])
	$14 = ($4 & [1])
	$12 = ( $12 ? uint_32($4 >> [1]) : $14 )
	if ( ($12 <= $7) ){ goto $label$42 }
	$4 = $7
	if ( ($6 == 0) ){ goto $label$53 }
	$12 = ($14 + $7)
	$14 = ( $15 ? $10 : $14 )
	$15 = ($14 + $12)
	$4 = ($15 - $12)
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$55 }
	
.LOOP $label$56:
	$4 = (($4 - $6) + [1])
	if ( ($4 == 0) ){ goto $label$55 }
	$4 = CALL $66($12, [93], $4)
	if ( ($4 == 0) ){ goto $label$55 }
	if ( (CALL $67($4, [8456], $6) == 0) ){ goto $label$54 }
	$12 = ($4 + [1])
	$4 = ($15 - $12)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$56 }
	
.LABEL $label$55
	$4 = $15
	
.LABEL $label$54
	$4 = ( [-1] ? ($4 - $14) : ((int_32)$4 == (int_32)$15) )
	
.LABEL $label$53
	if ( (($4 + [1]) <= [2]) ){ goto $label$42 }
	CALL $45(($5 + [32]), $8, ($7 + [10]), (([-10] - $7) + $4), $8)
	if ( (*($5 + [80]) & [1]) ){ goto $label$58 }
	*($5 + [80]) = [0]
	goto $label$57 
	
.LABEL $label$58
	*(*($5 + [88])) = [0]
	*($5 + [84]) = [0]
	
.LABEL $label$57
	CALL $48(($5 + [80]), [0])
	*((($5 + [80]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [80]) = *($5 + [32])
	goto $label$42 
	
.LABEL $label$44
	CALL $43(($5 + [80]))
	
.LABEL $label$43
	CALL $43(($5 + [64]))
	
.LABEL $label$42
	$7 = *($5 + [112])
	$12 = *($11)
	$4 = *($13)
	$6 = CALL $68([8532])
	if ( ($6 == 0) ){ goto $label$59 }
	$11 = ($7 & [1])
	$7 = ( $4 ? uint_32($7 >> [1]) : $11 )
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$59 }
	$11 = ( $12 ? $10 : $11 )
	$12 = ($11 + $7)
	$4 = $11
	
.LOOP $label$60:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$59 }
	$7 = CALL $66($4, [98], $7)
	if ( ($7 == 0) ){ goto $label$59 }
	if ( (CALL $67($7, [8532], $6) == 0) ){ goto $label$61 }
	$4 = ($7 + [1])
	$7 = ($12 - $4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$7 = ( [-1] ? ($7 - $11) : ((int_32)$7 == (int_32)$12) )
	if ( (($7 + [1]) <= [2]) ){ goto $label$59 }
	$4 = *($5 + [112])
	$12 = *(($8 + [4]))
	$11 = *(($8 + [8]))
	$6 = CALL $68([8456])
	$13 = ($4 & [1])
	$12 = ( $12 ? uint_32($4 >> [1]) : $13 )
	if ( ($12 <= $7) ){ goto $label$59 }
	$4 = $7
	if ( ($6 == 0) ){ goto $label$62 }
	$12 = ($10 + $7)
	$10 = ( $11 ? $10 : $13 )
	$11 = ($10 + $12)
	$4 = ($11 - $12)
	if ( ((int_32)$4 < (int_32)$6) ){ goto $label$64 }
	
.LOOP $label$65:
	$4 = (($4 - $6) + [1])
	if ( ($4 == 0) ){ goto $label$64 }
	$4 = CALL $66($12, [93], $4)
	if ( ($4 == 0) ){ goto $label$64 }
	if ( (CALL $67($4, [8456], $6) == 0) ){ goto $label$63 }
	$12 = ($4 + [1])
	$4 = ($11 - $12)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$65 }
	
.LABEL $label$64
	$4 = $11
	
.LABEL $label$63
	$4 = ( [-1] ? ($4 - $10) : ((int_32)$4 == (int_32)$11) )
	
.LABEL $label$62
	if ( (($4 + [1]) <= [2]) ){ goto $label$59 }
	CALL $45(($5 + [32]), $8, ($7 + [10]), (([-10] - $7) + $4), $8)
	if ( (*($5 + [64]) & [1]) ){ goto $label$67 }
	*($5 + [64]) = [0]
	goto $label$66 
	
.LABEL $label$67
	*(*($5 + [72])) = [0]
	*($5 + [68]) = [0]
	
.LABEL $label$66
	CALL $48(($5 + [64]), [0])
	*((($5 + [64]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [64]) = *($5 + [32])
	
.LABEL $label$59
	$6 = [1]
	$7 = [1]
	$4 = *($5 + [80])
	$12 = CALL $68([8458])
	if ( ((int_32)$12 != (int_32)( *($5 + [84]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$68 }
	$7 = ((int_32)CALL $50(($5 + [80]), [0], [-1], [8458], $12) != (int_32)[0])
	
.LABEL $label$68
	CALL eosio_assert($7, [8543])
	$7 = *($5 + [64])
	$4 = CALL $68([8458])
	if ( ((int_32)$4 != (int_32)( *($5 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$69 }
	$6 = ((int_32)CALL $50(($5 + [64]), [0], [-1], [8458], $4) != (int_32)[0])
	
.LABEL $label$69
	CALL eosio_assert($6, [8569])
	$6 = *($5 + [64])
	$6 = *($5 + [80])
	CALL eosio_assert(((int_32)( *($5 + [84]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)( *($5 + [68]) ? uint_32($6 >> [1]) : ($6 & [1]) )), [8595])
	$1 = *($5 + [176])
	*($5 + [60]) = CALL $3($0, $1)
	$11 = ($0 + [32])
	$7 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$71 }
	
.LOOP $label$73:
	$6 = ($7 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$72 }
	$7 = $6
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$71 }
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$11), [9415])
	goto $label$70 
	
.LABEL $label$71
	$4 = [0]
	$6 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-6166753595933851648, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$70 }
	$4 = CALL $4($11, $6)
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$11), [9415])
	
.LABEL $label$70
	CALL eosio_assert(($4 == 0), [8642])
	$1 = *($0)
	*($5 + [44]) = $3
	*($5 + [36]) = ($5 + [136])
	*($5 + [32]) = ($5 + [176])
	*($5 + [40]) = ($5 + [60])
	*($5 + [48]) = ($5 + [96])
	*($5 + [52]) = ($5 + [80])
	*($5 + [56]) = ($5 + [64])
	*($5 + [216]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9489])
	*($5 + [192]) = $11
	*($5 + [196]) = ($5 + [32])
	*($5 + [200]) = ($5 + [216])
	*(($6 = CALL _Znwj([80]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [64]) = [0]
	*($6 + [68]) = $11
	CALL $5(($5 + [192]), $6)
	*($5 + [208]) = $6
	$1 = *($6)
	*($5 + [192]) = $1
	$3 = *($6 + [72])
	*($5 + [188]) = $3
	$4 = ($0 + [60])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$76 }
	*($7 + [8]) = $1
	*($7 + [16]) = $3
	*($5 + [208]) = [0]
	*($7) = $6
	*($4) = ($7 + [24])
	$6 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $6 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	CALL $6(($0 + [56]), ($5 + [208]), ($5 + [192]), ($5 + [188]))
	$6 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($6 == 0) ){ goto $label$74 }
	
.LABEL $label$75
	if ( (*($6 + [56]) & [1]) ){ goto $label$83 }
	if ( (*($6 + [44]) & [1]) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	CALL _ZdlPv(*(($6 + [64])))
	if ( ((*($6 + [44]) & [1]) == 0) ){ goto $label$81 }
	
.LABEL $label$82
	CALL _ZdlPv(*(($6 + [52])))
	$7 = [1]
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$7 = [1]
	if ( (*($6 + [32]) & [1]) ){ goto $label$79 }
	
.LABEL $label$80
	if ( ((*($6 + [8]) & $7) == 0) ){ goto $label$77 }
	goto $label$78 
	
.LABEL $label$79
	CALL _ZdlPv(*(($6 + [40])))
	if ( ((*($6 + [8]) & $7) == 0) ){ goto $label$77 }
	
.LABEL $label$78
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$77
	CALL _ZdlPv($6)
	
.LABEL $label$74
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$84
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$41
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($5 + [104]))
	
.LABEL $label$85
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($8 + [8])))
	
.LABEL $label$12
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [144]))
	
.LABEL $label$1
	$global$0 = ($5 + [224])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $12($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9400])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9400])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $28(CALL $27($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9406])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $12($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9410])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	*($3 + [64]) = [8335]
	*($3 + [68]) = CALL $68([8335])
	*($3 + [32]) = *($3 + [64])
	CALL $2(($3 + [72]), ($3 + [32]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [64]) = [8983]
	*($3 + [68]) = CALL $68([8983])
	*($3 + [24]) = *($3 + [64])
	CALL $2(($3 + [72]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [1]
	*($3) = *($3 + [56])
	CALL $17($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)6714450476239536128) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-6165810340236361728) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [8]) = *($3 + [48])
	CALL $18($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [3]
	*($3 + [16]) = *($3 + [40])
	CALL $19($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $59([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $71($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [152]) + [24])) = (int_64)0
	*((($4 + [152]) + [40])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [240]) = ($4 + [136])
	*($4 + [24]) = ($4 + [152])
	CALL $20(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [144])
	*($4 + [8]) = *($4 + [136])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [224])
	*($4 + [40]) = $1
	*($4 + [240]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($3 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $21(($4 + [240]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $74($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL $22(($4 + [80]))
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [192])))
	
.LABEL $label$10
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [9604])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9649])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9699])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [52])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [40])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [64])))
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($5 + [52])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($5 + [40])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$17 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [72]))
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_64 $9, int_32 $10, int_32 $11)
{
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	$12 = ($global$0 - [256])
	$global$0 = $12
	*($12 + [208]) = [8708]
	*($12 + [212]) = CALL $68([8708])
	*($12 + [32]) = *($12 + [208])
	CALL require_auth(*(CALL $2(($12 + [216]), ($12 + [32]))))
	CALL require_recipient($2)
	$13 = ($0 + [32])
	$15 = *(($0 + [60]))
	$14 = *(($0 + [56]))
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$2 }
	
.LOOP $label$4:
	$16 = ($15 + [-24])
	$17 = *($16)
	if ( ((int_64)*($17) == (int_64)$2) ){ goto $label$3 }
	$15 = $16
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($17 + [68]) == (int_32)$13), [9415])
	goto $label$1 
	
.LABEL $label$2
	$17 = [0]
	$16 = CALL db_find_i64(*($13), *(($0 + [40])), (int_64)-6166753595933851648, $2)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$1 }
	$17 = CALL $4($13, $16)
	CALL eosio_assert(((int_32)*($17 + [68]) == (int_32)$13), [9415])
	
.LABEL $label$1
	$18 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($18, [8721])
	CALL eosio_assert(((int_64)*($17 + [24]) != (int_64)0), [8752])
	CALL eosio_assert(((int_64)*($17 + [24]) == (int_64)$8), [8816])
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$6 }
	$16 = uint_32($16 >> [1])
	$19 = ($4 + [1])
	goto $label$5 
	
.LABEL $label$6
	$16 = *($4 + [4])
	$19 = *($4 + [8])
	
.LABEL $label$5
	$20 = [0]
	$14 = [0]
	$15 = CALL $68([8874])
	if ( ($15 == 0) ){ goto $label$7 }
	$21 = ($19 + $16)
	if ( ((int_32)$16 < (int_32)$15) ){ goto $label$9 }
	$14 = $19
	
.LOOP $label$10:
	$16 = (($16 - $15) + [1])
	if ( ($16 == 0) ){ goto $label$9 }
	$16 = CALL $66($14, [95], $16)
	if ( ($16 == 0) ){ goto $label$9 }
	if ( (CALL $67($16, [8874], $15) == 0) ){ goto $label$8 }
	$14 = ($16 + [1])
	$16 = ($21 - $14)
	if ( ((int_32)$16 >= (int_32)$15) ){ goto $label$10 }
	
.LABEL $label$9
	$16 = $21
	
.LABEL $label$8
	$14 = ( [-1] ? ($16 - $19) : ((int_32)$16 == (int_32)$21) )
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$14 > (int_32)[0]), [8876])
	$21 = CALL $45(($12 + [192]), $4, [0], $14, $4)
	CALL eosio_assert(((int_32)CALL $51($21, [0], [10]) == (int_32)*($17 + [20])), [8906])
	$16 = ($16 & [1])
	$16 = *($17 + [8])
	$14 = ($16 & [1])
	$16 = *($10)
	$19 = uint_32($16 >> [1])
	$4 = ( *($10 + [4]) ? $19 : $14 )
	if ( ((int_32)$4 != (int_32)( *(($17 + [12])) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$11 }
	$16 = ( *(($17 + [16])) ? (($17 + [8]) + [1]) : $16 )
	$15 = ($10 + [1])
	if ( $14 ){ goto $label$14 }
	if ( ($4 == 0) ){ goto $label$13 }
	$14 = ([0] - $19)
	
.LOOP $label$15:
	if ( ((int_32)*($15) != (int_32)*($16)) ){ goto $label$12 }
	$20 = [1]
	$16 = ($16 + [1])
	$15 = ($15 + [1])
	$14 = ($14 + [1])
	if ( $14 ){ goto $label$15 }
	goto $label$11 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$13 }
	$20 = (CALL $67(( *($10 + [8]) ? $15 : $14 ), $16, $4) == 0)
	goto $label$11 
	
.LABEL $label$13
	$20 = [1]
	goto $label$11 
	
.LABEL $label$12
	$20 = [0]
	
.LABEL $label$11
	CALL eosio_assert($20, [8939])
	$16 = *($10)
	$15 = CALL $68([8331])
	if ( ((int_32)$15 != (int_32)( *(($10 + [4])) ? uint_32($16 >> [1]) : ($16 & [1]) )) ){ goto $label$16 }
	if ( CALL $50($10, [0], [-1], [8331], $15) ){ goto $label$16 }
	$16 = CALL $68([8331])
	if ( ($16 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9233])
	goto $label$19 
	
.LABEL $label$20
	if ( ($16 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$8 = (int_64)0
	
.LOOP $label$21:
	$15 = *(($16 + [8330]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9278])
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$21 }
	$22 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$18
	$22 = (int_64)4
	
.LABEL $label$17
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9331])
	$8 = (uint_64)$22 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$23 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$8 = $23
	$15 = [1]
	$14 = $16
	$16 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$8 = $23
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$16 < (int_32)[6])
	$14 = ($16 + [1])
	$16 = $14
	if ( $15 ){ goto $label$27 }
	$15 = [1]
	$16 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$15 = [0]
	
.LABEL $label$23
	CALL eosio_assert($15, [9380])
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$16 }
	$8 = *($0)
	*($12 + [136]) = [8976]
	*($12 + [140]) = CALL $68([8976])
	*($12 + [24]) = *($12 + [136])
	$23 = *(CALL $2(($12 + [144]), ($12 + [24])))
	*($12 + [120]) = [8335]
	*($12 + [124]) = CALL $68([8335])
	*($12 + [16]) = *($12 + [120])
	$14 = CALL $2(($12 + [128]), ($12 + [16]))
	*($12 + [104]) = [8983]
	*($12 + [108]) = CALL $68([8983])
	*($12 + [8]) = *($12 + [104])
	$10 = CALL $2(($12 + [112]), ($12 + [8]))
	*(($12 + [48])) = [0]
	*($12 + [40]) = (int_64)0
	$16 = CALL $68([8992])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$31 }
	*($12 + [40]) = ($16 << [1])
	$15 = (($12 + [40]) | [1])
	if ( $16 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$4 = (($16 + [16]) & [-16])
	$15 = CALL _Znwj($4)
	*($12 + [40]) = ($4 | [1])
	*($12 + [48]) = $15
	*($12 + [44]) = $16
	
.LABEL $label$30
	CALL memcpy($15, [8992], $16)
	
.LABEL $label$29
	*(($15 + $16)) = [0]
	*((($12 + [56]) + [24])) = $22
	$16 = ($12 + [48])
	*(($12 + [96])) = *($16)
	*($16) = [0]
	*($12 + [64]) = $2
	*($12 + [72]) = $9
	*($12 + [56]) = *($0)
	*($12 + [88]) = *($12 + [40])
	*($12 + [40]) = (int_64)0
	*($12 + [152]) = *($14)
	*($12 + [160]) = *($10)
	*(($16 = CALL _Znwj([16]))) = $8
	*($16 + [8]) = $23
	*((($12 + [152]) + [36])) = [0]
	$15 = ($16 + [16])
	*((($12 + [152]) + [24])) = $15
	*(($12 + [172])) = $15
	*($12 + [168]) = $16
	*($12 + [180 align=4]) = (int_64)0
	$16 = *($12 + [88])
	$15 = ( *((($12 + [56]) + [36])) ? uint_32($16 >> [1]) : ($16 & [1]) )
	$16 = ($15 + [32])
	$8 = (CASTING uint_64)(uint_32 $15)
	$15 = ($12 + [180])
	
.LOOP $label$32:
	$16 = ($16 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$32 }
	if ( ($16 == 0) ){ goto $label$34 }
	CALL $12($15, $16)
	$15 = *(($12 + [184]))
	$16 = *(($12 + [180]))
	goto $label$33 
	
.LABEL $label$34
	$15 = [0]
	$16 = [0]
	
.LABEL $label$33
	*($12 + [244]) = $16
	*($12 + [240]) = $16
	*($12 + [248]) = $15
	*($12 + [224]) = ($12 + [240])
	*($12 + [232]) = ($12 + [56])
	CALL $13(($12 + [232]), ($12 + [224]))
	CALL $14(($12 + [240]), ($12 + [152]))
	$16 = *($12 + [240])
	CALL send_inline($16, (*($12 + [244]) - $16))
	$16 = *($12 + [240])
	if ( ($16 == 0) ){ goto $label$35 }
	*($12 + [244]) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$35
	$16 = *($12 + [180])
	if ( ($16 == 0) ){ goto $label$36 }
	*(($12 + [184])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$36
	$16 = *($12 + [168])
	if ( ($16 == 0) ){ goto $label$37 }
	*(($12 + [172])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$37
	if ( ((*(($12 + [88])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($12 + [96])))
	
.LABEL $label$38
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($12 + [48])))
	goto $label$16 
	
.LABEL $label$28
	CALL $43(($12 + [40]))
	
.LABEL $label$16
	CALL eosio_assert($18, [9540])
	CALL eosio_assert($18, [9574])
	$16 = CALL db_next_i64(*($17 + [72]), ($12 + [56]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$39 }
	CALL $4($13, $16)
	
.LABEL $label$39
	CALL $10($13, $17)
	if ( ((*($12 + [192]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($21 + [8]))
	
.LABEL $label$40
	$global$0 = ($12 + [256])
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $57($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9400])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9400])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9400])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9400])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $74($0)
	
.LABEL $label$1
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_64 $9, int_32 $10, int_32 $11)
{
	int_32 $12
	int_32 $13
	int_32 $14
	$12 = ($global$0 - [128])
	$global$0 = $12
	$0 = *($0 + [4])
	$13 = *($0 + [4])
	$14 = (*($0) + int_32($13 >> [1]))
	$0 = *($0)
	if ( (($13 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($14) + $0))
	
.LABEL $label$1
	$11 = CALL $44($12, $11)
	$10 = CALL $44(($12 + [16]), $10)
	$7 = CALL $44(($12 + [32]), $7)
	$6 = CALL $44(($12 + [48]), $6)
	$5 = CALL $44(($12 + [64]), $5)
	$4 = CALL $44(($12 + [80]), $4)
	$3 = CALL $44(($12 + [96]), $3)
	$1 = CALL $44(($12 + [112]), $1)
	CALL void $14((int_32 $1), (int_32 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_64 $9), (int_64 $10), (int_32 $11), (int_32 $0))
	if ( (*($11) & [1]) ){ goto $label$16 }
	if ( (*($10) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($10 + [8]))
	$0 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($7) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($6) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($5) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($1) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($12 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($12 + [128])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $71($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9944])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $71($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9400])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $33(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9400])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9400])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $33(*($1), *($0 + [16]))
	CALL $33(*($1), *($0 + [20]))
	CALL $33(*($1), *($0 + [24]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9400])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9400])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [64])))
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [52])))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [40])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [12])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = *($0)
	$0 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$8 }
	*($2) = ($0 + $1)
	
.LABEL $label$8
}

int_32 .FUNC $58 ()
{
	return [9948]
}

void .FUNC $59 (int_32 $0)
{
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $60($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $63 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $61($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $63($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $58()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $63($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18369]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $62($0, (int_64)0)
	*(CALL $58()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $63($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $63($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $63($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $63($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18369])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $63($0)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $63($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8205]))
	$8 = (int_64)0
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $63($0)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $63($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18369]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $62($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18369]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18369]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $63($0) + [18369]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $58()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $58()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $58()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $67(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $54($1, $0, [8859])
	CALL $55()
	(unreachable)
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $54($1, $0, [8800])
	CALL $56()
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $68($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $47($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $55 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $56 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $57 (int_32 $0)
{
	CALL abort()
	(unreachable)
}