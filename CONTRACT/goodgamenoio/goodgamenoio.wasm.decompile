(data (i32.const 4) "\80f\00\00")
(data (i32.const 16) "cannot pass end iterator to modify\00")
(data (i32.const 64) "object passed to modify is not in multi_index\00")
(data (i32.const 112) "cannot modify objects in table of another contract\00")
(data (i32.const 176) "updater cannot change primary key when modifying an object\00")
(data (i32.const 240) "gg_delay_1\00")
(data (i32.const 256) "active\00")
(data (i32.const 272) "settle\00")
(data (i32.const 288) "write\00")
(data (i32.const 304) "error reading iterator\00")
(data (i32.const 336) "read\00")
(data (i32.const 352) "gg_delay_2\00")
(data (i32.const 368) "cannot increment end iterator\00")
(data (i32.const 400) "\e8\b4\a6\e6\88\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 416) "\e4\bd\99\e9\a2\9d\e4\b8\8d\e8\b6\b3\00")
(data (i32.const 432) "eosio.token\00")
(data (i32.const 448) "transfer\00")
(data (i32.const 464) "from eos2TeamFight\00")
(data (i32.const 512) "get\00")
(data (i32.const 528) "Lack of conditions\00")
(data (i32.const 560) "cannot create objects in table of another contract\00")
(data (i32.const 624) "\e6\88\98\e9\98\9f\e5\90\8d\e7\a7\b0\e6\9c\89\e9\87\8d\e5\a4\8d\ef\bc\81\00")
(data (i32.const 656) "\e6\9d\a1\e4\bb\b6\e4\b8\8d\e6\bb\a1\e8\b6\b3!\00")
(data (i32.const 688) "\e6\b8\b8\e6\88\8f\e6\9c\aa\e5\bc\80\e5\a7\8b\ef\bc\81\00")
(data (i32.const 720) "\e6\9d\a1\e4\bb\b6\e4\b8\8d\e6\bb\a1\e8\b6\b3\ef\bc\81\00")
(data (i32.const 752) "reset  delay settle\t\00")
(data (i32.const 784) "d\00\00\00\00\00\00\00\19\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\002\00\00\00\00\00\00\00\ff\ff\ff\ff\00\00\00\00K\00\00\00\00\00\00\00")
(data (i32.const 832) "keybuy! \00")
(data (i32.const 848) "\t airdrop_balance:\00")
(data (i32.const 880) "\e8\b4\a6\e5\8f\b7\e6\95\b0\e6\8d\ae\e6\9c\aa\e5\8f\91\e7\8e\b0\00")
(data (i32.const 912) "\e9\82\80\e8\af\b7\e8\b4\a6\e5\8f\b7\e6\95\b0\e6\8d\ae\e6\9c\aa\e5\8f\91\e7\8e\b0\00")
(data (i32.const 944) "invite! \00")
(data (i32.const 960) "reset game!\t\00")
(data (i32.const 976) "mode:\00")
(data (i32.const 992) "\t\00")
(data (i32.const 1008) "num:\00")
(data (i32.const 1024) "\tidx:\00")
(data (i32.const 1040) "unable to find key\00")
(data (i32.const 1072) "set delay settle\t\00")
(data (i32.const 1104) "settle! \00")
(data (i32.const 1120) "clean counters\t\00")
(data (i32.const 1136) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1200) "transfer  \00")
(data (i32.const 1216) " -> \00")
(data (i32.const 1232) "\n\00")
(data (i32.const 1248) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1312) "invalid symbol name\00")
(data (i32.const 1344) "build counters\00")
(data (i32.const 9760) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "cancel_deferred" (func $fimport$2 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$16 (param f64)))
(import "env" "printi" (func $fimport$17 (param i64)))
(import "env" "printn" (func $fimport$18 (param i64)))
(import "env" "prints" (func $fimport$19 (param i32)))
(import "env" "printui" (func $fimport$20 (param i64)))
(import "env" "read_action_data" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$22 (param i64)))
(import "env" "require_auth2" (func $fimport$23 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$24 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio9TeamFight9resettimeEv" (func $5))
(export "_ZN5eosio9TeamFight5delayEv" (func $21))
(export "_ZN5eosio9TeamFight8withdrawEyNS_5assetEy" (func $22))
(export "_ZN5eosio9TeamFight10teamcreateEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y" (func $35))
(export "_ZN5eosio9TeamFight8teamjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $44))
(export "_ZN5eosio9TeamFight6keybuyEymy" (func $47))
(export "_ZN5eosio9TeamFight6inviteEyyy" (func $57))
(export "_ZN5eosio9TeamFight6settleEy" (func $60))
(export "_ZN5eosio9TeamFight2onERKNS_8currency8transferEy" (func $70))
(export "_ZN5eosio9TeamFight5applyEyy" (func $74))
(export "apply" (func $87))
(export "malloc" (func $91))
(export "free" (func $94))
(export "memcmp" (func $103))
(export "strlen" (func $104))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $105 $5 $22 $35 $57 $47 $44 $60 $21)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $99($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $95($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $96($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9744])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9552]
	$1 = (((int_32)$2 * (int_32)[12]) + [9552])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9852])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $96 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $97 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [240])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [560])
	*(($4 = CALL $95([160])) + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL current_time()
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [40]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [48]) = ((int_64)*($4 + [32]) + (int_64)86400)
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)10000
	*($4 + [136]) = (int_64)1000000
	*($4 + [144]) = $1
	*($4 + [128]) = (int_64)2
	*($4) = *(*($3))
	*($4 + [16]) = (int_64)0
	*($8 + [152]) = ($8 + [144])
	*($8 + [148]) = $8
	*($8 + [144]) = $8
	*($8 + [160]) = ($8 + [144])
	*($8 + [172]) = ($4 + [8])
	*($8 + [168]) = $4
	*($8 + [176]) = ($4 + [16])
	*($8 + [180]) = ($4 + [24])
	*($8 + [184]) = ($4 + [32])
	*($8 + [188]) = ($4 + [40])
	*($8 + [192]) = ($4 + [48])
	*($8 + [196]) = ($4 + [56])
	*($8 + [200]) = ($4 + [64])
	*($8 + [204]) = ($4 + [72])
	*($8 + [208]) = ($4 + [80])
	*($8 + [212]) = ($4 + [88])
	*($8 + [216]) = ($4 + [96])
	*($8 + [220]) = ($4 + [104])
	*($8 + [224]) = ($4 + [112])
	*($8 + [228]) = ($4 + [120])
	$3 = ($4 + [128])
	*($8 + [232]) = $3
	*($8 + [236]) = ($4 + [136])
	CALL $7(($8 + [168]), ($8 + [160]))
	$5 = *($4 + [128])
	*($4 + [148]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, $2, $5, $8, [144])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [168]) = $4
	$5 = *($3)
	*($8) = $5
	$6 = *($4 + [148])
	*($8 + [144]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [168]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $20(($1 + [24]), ($8 + [168]), $8, ($8 + [144]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $96($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [240])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $92([1360], $0)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $93($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9760])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9846]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9848])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9846]) = [1]
	$7 = ($7 << [16])
	*([0] + [9848]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9848])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9848]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9846]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9846]) = [1]
	$3 = ($3 << [16])
	*([0] + [9848]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9848])
	
.LABEL $label$8
	*([0] + [9848]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $95(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $96(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $96(*(($1 + [16])))
	
.LABEL $label$12
	CALL $96($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $96($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [4])))
	$5 = *($1 + [128])
	*($1 + [72]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [72])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3 + [4]))) * (float_64)(float_64)0)))
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$9 = ($1 + [8])
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	$10 = ($1 + [16])
	*($3 + [32]) = $10
	$11 = ($1 + [24])
	*($3 + [36]) = $11
	$6 = ($1 + [32])
	*($3 + [40]) = $6
	$7 = ($1 + [40])
	*($3 + [44]) = $7
	$12 = ($1 + [48])
	*($3 + [48]) = $12
	$13 = ($1 + [56])
	*($3 + [52]) = $13
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$8 = ($1 + [72])
	*($3 + [60]) = $8
	$15 = ($1 + [80])
	*($3 + [64]) = $15
	$16 = ($1 + [88])
	*($3 + [68]) = $16
	$17 = ($1 + [96])
	*($3 + [72]) = $17
	$18 = ($1 + [108])
	*($3 + [76]) = $18
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [32]) = $10
	*($3 + [36]) = $11
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	*($3 + [48]) = $12
	*($3 + [24]) = $1
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $8
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3)))
	$5 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$6 = ($1 + [16])
	*($3 + [32]) = $6
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [80])
	*($3 + [64]) = $15
	$16 = ($1 + [88])
	*($3 + [68]) = $16
	$17 = ($1 + [96])
	*($3 + [72]) = $17
	$18 = ($1 + [108])
	*($3 + [76]) = $18
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $6
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [24]) = $1
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $33(*($1), *($0 + [4]))
	CALL $33(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [336])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [20]) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	*(($0 + [24])) = [0]
	$3 = ($0 + [20])
	$4 = CALL strlen([496])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$7 = ($3 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$7 = CALL $95($5)
	*(($0 + [20])) = ($5 | [1])
	*(($0 + [28])) = $7
	*(($0 + [24])) = $4
	
.LABEL $label$3
	CALL memcpy($7, [496], $4)
	
.LABEL $label$2
	*(($7 + $4)) = [0]
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = [1]
	$6 = CALL current_time()
	*($0 + [56]) = $1
	*($0 + [48]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8) = *($2 + [4])
	*($8 + [12]) = ($0 + [8])
	*($8 + [8]) = $0
	*($8 + [16]) = $3
	*($8 + [20]) = ($0 + [32])
	*($8 + [24]) = ($0 + [40])
	*($8 + [28]) = ($0 + [48])
	CALL $43(($8 + [8]), $8)
	*($0 + [60]) = *(*($2 + [8]))
	*([0] + [4]) = ($8 + [32])
	return $0
	
.LABEL $label$1
	CALL $97($3)
	return (unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $27(*($1), *($0 + [4]))
	CALL $27(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [288])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($2)
	$2 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	*(($4 = *($1))) = (*($4) + [4])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
}

void .FUNC _ZN5eosio9TeamFight6keybuyEymy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [400])
	*([0] + [4]) = $22
	*($22 + [152]) = $1
	*($22 + [148]) = $2
	*($22 + [136]) = $3
	CALL require_auth($1)
	$4 = ($0 + [48])
	$2 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $6($4, $12)
	
.LABEL $label$1
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$3 }
	$12 = [0]
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [368])
	$2 = CALL db_next_i64(*($2 + [148]), ($22 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $6($4, $2)
	goto $label$2 
	
.LABEL $label$3
	$12 = $2
	
.LABEL $label$2
	if ( ((uint_64)*($12 + [48]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$5 }
	$3 = *($22 + [136])
	$2 = [0]
	$12 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $6($4, $12)
	
.LABEL $label$6
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$8 }
	$12 = [0]
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [368])
	$2 = CALL db_next_i64(*($2 + [148]), ($22 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $6($4, $2)
	goto $label$7 
	
.LABEL $label$8
	$12 = $2
	
.LABEL $label$7
	if ( ((uint_64)*($12 + [40]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [688])
	
.LABEL $label$4
	*($22 + [112]) = (int_64)-1
	$6 = [0]
	*($22 + [120]) = [0]
	$3 = *($22 + [152])
	$1 = *($0)
	*($22 + [96]) = $1
	*($22 + [104]) = $3
	*(($22 + [124])) = [0]
	*(($22 + [128])) = [0]
	$2 = [0]
	$12 = CALL db_lowerbound_i64($1, $3, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $23(($22 + [96]), $12)
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [720])
	$2 = CALL db_lowerbound_i64(*($22 + [96]), *(($22 + [104])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $23(($22 + [96]), $2)
	
.LABEL $label$10
	$2 = [0]
	$12 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$11 }
	$2 = CALL $6($4, $12)
	
.LABEL $label$11
	if ( ((int_64)*($22 + [136]) != (int_64)2) ){ goto $label$13 }
	$5 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [368])
	$12 = *($6 + [140])
	$6 = [0]
	$12 = CALL db_next_i64($12, ($22 + [160]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $23(($22 + [96]), $12)
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [368])
	$2 = CALL db_next_i64(*($2 + [148]), ($22 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $6($4, $2)
	goto $label$12 
	
.LABEL $label$13
	$5 = $2
	
.LABEL $label$12
	$2 = *($22 + [148])
	$3 = (CASTING uint_64)(uint_32 $2)
	*($22 + [88]) = ((int_64)(uint_64)((int_64)((int_64)$3 * (int_64)(CASTING uint_64)(uint_32 ($2 + [-1]))) * (int_64)100) >> (uint_64)(int_64)1) + (int_64)((int_64)$3 * (int_64)*($5 + [120])))
	$12 = ($22 + [104])
	CALL eosio_assert(((uint_64)*(CALL $23(($22 + [96]), CALL $fimport$7(*($22 + [96]), *($12), (int_64)3607749778735104000, (int_64)0)) + [16]) >= (uint_64)*($22 + [88])), [416])
	$2 = [0]
	$12 = CALL db_lowerbound_i64(*($22 + [96]), *($12), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	$2 = CALL $23(($22 + [96]), $12)
	
.LABEL $label$15
	$3 = *($0)
	*($22 + [160]) = ($22 + [88])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [16])
	CALL $48(($22 + [96]), $2, $3, ($22 + [160]))
	$3 = *($0)
	*($22 + [164]) = ($22 + [88])
	*($22 + [160]) = ($22 + [148])
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [16])
	CALL $49(($22 + [96]), $6, $3, ($22 + [160]))
	$2 = *($6 + [96])
	if ( ($2 & [1]) ){ goto $label$18 }
	if ( uint_32($2 >> [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( (*(($6 + [100])) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	*(($22 + [192])) = [0]
	*($22 + [176]) = (int_64)-1
	$3 = *($0)
	*($22 + [160]) = $3
	*($22 + [168]) = $3
	*($22 + [184]) = (int_64)0
	$2 = CALL db_lowerbound_i64($3, $3, (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$17 = (($6 + [96]) + [1])
	$21 = CALL $36(($22 + [160]), $2)
	$13 = ($6 + [96])
	$14 = ($6 + [100])
	$18 = ($6 + [104])
	
.LOOP $label$21:
	$2 = ($2 & [1])
	$2 = *($13)
	$11 = ($2 & [1])
	$2 = *($21 + [8])
	$16 = uint_32($2 >> [1])
	$15 = ( *(($21 + [12])) ? $16 : $11 )
	if ( ((int_32)$15 != (int_32)( *($14) ? uint_32($2 >> [1]) : $2 )) ){ goto $label$22 }
	$12 = (($21 + [8]) + [1])
	$2 = ( *($18) ? $17 : $2 )
	if ( ($11 == 0) ){ goto $label$23 }
	if ( ($15 == 0) ){ goto $label$20 }
	if ( (CALL memcmp(( *(($21 + [16])) ? $12 : $11 ), $2, $15) == 0) ){ goto $label$20 }
	goto $label$22 
	
.LABEL $label$23
	if ( ($15 == 0) ){ goto $label$20 }
	$11 = ([0] - $16)
	
.LOOP $label$24:
	if ( ((int_32)*($12) != (int_32)*($2)) ){ goto $label$22 }
	$2 = ($2 + [1])
	$12 = ($12 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$24 }
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert([1], [368])
	$2 = CALL db_next_i64(*($21 + [60]), ($22 + [328]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$21 = CALL $36(($22 + [160]), $2)
	goto $label$21 
	
.LABEL $label$20
	$3 = *($0)
	*($22 + [328]) = ($22 + [148])
	CALL $50(($22 + [160]), $21, $3, ($22 + [328]))
	
.LABEL $label$19
	$11 = *($22 + [184])
	if ( ($11 == 0) ){ goto $label$16 }
	$21 = (($22 + [160]) + [28])
	$12 = *($21)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	$12 = ($12 + [-24])
	$2 = *($12)
	*($12) = [0]
	if ( ($2 == 0) ){ goto $label$28 }
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$29 }
	CALL $96(*(($2 + [28])))
	
.LABEL $label$29
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$30 }
	CALL $96(*(($2 + [16])))
	
.LABEL $label$30
	CALL $96($2)
	
.LABEL $label$28
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$27 }
	$2 = *(($22 + [184]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $11
	
.LABEL $label$25
	*($21) = $11
	CALL $96($2)
	
.LABEL $label$16
	$3 = *($0)
	*($22 + [164]) = ($22 + [148])
	*($22 + [160]) = ($22 + [88])
	*($22 + [168]) = ($22 + [152])
	*($22 + [172]) = ($22 + [136])
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [16])
	CALL $51($4, $5, $3, ($22 + [160]))
	CALL prints([752])
	if ( ((int_64)*($22 + [136]) != (int_64)1) ){ goto $label$48 }
	*(($22 + [80])) = [0]
	*($22 + [72]) = (int_64)0
	$2 = CALL strlen([240])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$47 }
	*($22 + [72]) = ($2 << [1])
	$11 = (($22 + [72]) | [1])
	$12 = $11
	if ( $2 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	*(($22 + [48])) = [0]
	*($22 + [40]) = (int_64)0
	$2 = CALL strlen([352])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$44 }
	*($22 + [40]) = ($2 << [1])
	$11 = (($22 + [40]) | [1])
	$12 = $11
	if ( $2 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$47
	$11 = (($2 + [16]) & [-16])
	$12 = CALL $95($11)
	*($22 + [72]) = ($11 | [1])
	*($22 + [80]) = $12
	*($22 + [76]) = $2
	$11 = (($22 + [72]) | [1])
	
.LABEL $label$46
	CALL memcpy($12, [240], $2)
	
.LABEL $label$45
	*(($12 + $2)) = [0]
	$2 = ( *($22 + [80]) ? $11 : (*($22 + [72]) & [1]) )
	$12 = [-1]
	
.LOOP $label$49:
	$11 = ($2 + $12)
	$21 = ($12 + [1])
	$12 = $21
	if ( *(($11 + [1])) ){ goto $label$49 }
	$9 = (CASTING uint_64)(uint_32 $21)
	$3 = (int_64)0
	$1 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$50:
	$20 = (int_64)0
	if ( ((uint_64)$3 >= (uint_64)$9) ){ goto $label$51 }
	$12 = *($2)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$12 = ($12 + [165])
	goto $label$52 
	
.LABEL $label$53
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$55 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$54 
	
.LABEL $label$55
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$54
	$2 = ($2 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$50 }
	*($22 + [168]) = (int_64)0
	*($22 + [160]) = $19
	CALL cancel_deferred(($22 + [160]))
	if ( ((*($22 + [72]) & [1]) == 0) ){ goto $label$56 }
	CALL $96(*(($22 + [80])))
	
.LABEL $label$56
	*(($22 + [64])) = [0]
	*($22 + [60]) = [0]
	$3 = *($22 + [136])
	*($22 + [56]) = [0]
	$1 = *($0)
	$2 = CALL strlen([240])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$41 }
	*($22 + [56]) = ($2 << [1])
	$12 = (($22 + [56]) | [1])
	if ( $2 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$44
	$11 = (($2 + [16]) & [-16])
	$12 = CALL $95($11)
	*($22 + [40]) = ($11 | [1])
	*($22 + [48]) = $12
	*($22 + [44]) = $2
	$11 = (($22 + [40]) | [1])
	
.LABEL $label$43
	CALL memcpy($12, [352], $2)
	
.LABEL $label$42
	*(($12 + $2)) = [0]
	$2 = ( *($22 + [48]) ? $11 : (*($22 + [40]) & [1]) )
	$12 = [-1]
	
.LOOP $label$57:
	$11 = ($2 + $12)
	$21 = ($12 + [1])
	$12 = $21
	if ( *(($11 + [1])) ){ goto $label$57 }
	$9 = (CASTING uint_64)(uint_32 $21)
	$3 = (int_64)0
	$1 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$58:
	$20 = (int_64)0
	if ( ((uint_64)$3 >= (uint_64)$9) ){ goto $label$59 }
	$12 = *($2)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$12 = ($12 + [165])
	goto $label$60 
	
.LABEL $label$61
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$63 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$62 
	
.LABEL $label$63
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$62
	$2 = ($2 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$58 }
	*($22 + [168]) = (int_64)0
	*($22 + [160]) = $19
	CALL cancel_deferred(($22 + [160]))
	if ( ((*($22 + [40]) & [1]) == 0) ){ goto $label$64 }
	CALL $96(*(($22 + [48])))
	
.LABEL $label$64
	*(($22 + [32])) = [0]
	*($22 + [28]) = [0]
	$3 = *($22 + [136])
	*($22 + [24]) = [0]
	$1 = *($0)
	$2 = CALL strlen([352])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$38 }
	*($22 + [24]) = ($2 << [1])
	$12 = (($22 + [24]) | [1])
	if ( $2 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$41
	$11 = (($2 + [16]) & [-16])
	$12 = CALL $95($11)
	*($22 + [56]) = ($11 | [1])
	*($22 + [64]) = $12
	*($22 + [60]) = $2
	
.LABEL $label$40
	CALL memcpy($12, [240], $2)
	
.LABEL $label$39
	*(($12 + $2)) = [0]
	CALL $8($0, $1, $3, ($22 + [56]), (int_64))(*(CALL $6($4, CALL $fimport$7(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($22 + [56]) & [1]) == 0) ){ goto $label$35 }
	CALL $96(*($22 + [64]))
	goto $label$35 
	
.LABEL $label$38
	$11 = (($2 + [16]) & [-16])
	$12 = CALL $95($11)
	*($22 + [24]) = ($11 | [1])
	*($22 + [32]) = $12
	*($22 + [28]) = $2
	
.LABEL $label$37
	CALL memcpy($12, [352], $2)
	
.LABEL $label$36
	$11 = [0]
	*(($12 + $2)) = [0]
	$2 = [0]
	$12 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$65 }
	$2 = CALL $6($4, $12)
	
.LABEL $label$65
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [368])
	$2 = CALL db_next_i64(*($2 + [148]), ($22 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$66 }
	$11 = CALL $6($4, $2)
	
.LABEL $label$66
	CALL $8($0, $1, $3, ($22 + [24]), (int_64))(*($11 + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($22 + [24]) & [1]) == 0) ){ goto $label$35 }
	CALL $96(*($22 + [32]))
	
.LABEL $label$35
	if ( (CALL is_account(*($6 + [8])) == 0) ){ goto $label$67 }
	$12 = [0]
	*($22 + [184]) = [0]
	$3 = *(($6 + [8]))
	$1 = *($0)
	*($22 + [160]) = $1
	*($22 + [168]) = $3
	*($22 + [176]) = (int_64)-1
	*(($22 + [188])) = [0]
	*(($22 + [192])) = [0]
	$2 = CALL db_lowerbound_i64($1, $3, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$68 }
	$12 = CALL $23(($22 + [160]), $2)
	
.LABEL $label$68
	if ( ((int_64)*($22 + [136]) != (int_64)2) ){ goto $label$70 }
	$2 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [368])
	$12 = CALL db_next_i64(*($12 + [140]), ($22 + [328]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$69 }
	$2 = CALL $23(($22 + [160]), $12)
	goto $label$69 
	
.LABEL $label$70
	$2 = $12
	
.LABEL $label$69
	$3 = *($0)
	*($22 + [328]) = ($22 + [88])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [16])
	CALL $52(($22 + [160]), $2, $3, ($22 + [328]))
	$11 = *($22 + [184])
	if ( ($11 == 0) ){ goto $label$67 }
	$21 = ($22 + [188])
	$2 = *($21)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$72 }
	
.LOOP $label$73:
	$2 = ($2 + [-24])
	$12 = *($2)
	*($2) = [0]
	if ( ($12 == 0) ){ goto $label$74 }
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$75 }
	CALL $96(*(($12 + [104])))
	
.LABEL $label$75
	CALL $96($12)
	
.LABEL $label$74
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$73 }
	$2 = *(($22 + [184]))
	goto $label$71 
	
.LABEL $label$72
	$2 = $11
	
.LABEL $label$71
	*($21) = $11
	CALL $96($2)
	
.LABEL $label$67
	$3 = (int_64)
	*($22 + [16]) = $3(*($5 + [112]) - *($22 + [148])))
	if ( (int_64)($3 == 0) ){ goto $label$76 }
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$76 }
	$10 = ($0 + [8])
	$21 = CALL $53($10, $2)
	$13 = (($22 + [160]) + [8])
	$14 = (($22 + [160]) + [16])
	$15 = ($22 + [184])
	$16 = ($22 + [188])
	$17 = ($22 + [192])
	$18 = ($22 + [340])
	
.LOOP $label$77:
	$3 = *($21)
	*($13) = $3
	*($14) = (int_64)-1
	$12 = [0]
	*($15) = [0]
	$1 = *($0)
	*($22 + [160]) = $1
	*($16) = [0]
	*($17) = [0]
	$2 = CALL db_lowerbound_i64($1, $3, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$78 }
	$12 = CALL $23(($22 + [160]), $2)
	
.LABEL $label$78
	*($22 + [308]) = $12
	*($22 + [304]) = ($22 + [160])
	if ( ((int_64)*($22 + [136]) != (int_64)2) ){ goto $label$80 }
	$2 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [368])
	$12 = CALL db_next_i64(*(*($22 + [308]) + [140]), ($22 + [328]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$81 }
	$2 = CALL $23(*($22 + [304]), $12)
	
.LABEL $label$81
	*($22 + [308]) = $2
	goto $label$79 
	
.LABEL $label$80
	$2 = $12
	
.LABEL $label$79
	$3 = *($0)
	*((($22 + [328]) + [8])) = ($22 + [304])
	*($18) = ($22 + [152])
	*((($22 + [328]) + [16])) = ($22 + [148])
	*($22 + [332]) = ($22 + [16])
	*($22 + [328]) = ($22 + [88])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [16])
	CALL $54(($22 + [160]), $2, $3, ($22 + [328]))
	$11 = *($15)
	if ( ($11 == 0) ){ goto $label$82 }
	$2 = *($16)
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$84 }
	$2 = $11
	goto $label$83 
	
.LABEL $label$84
	
.LOOP $label$85:
	$2 = ($2 + [-24])
	$12 = *($2)
	*($2) = [0]
	if ( ($12 == 0) ){ goto $label$86 }
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$87 }
	CALL $96(*(($12 + [104])))
	
.LABEL $label$87
	CALL $96($12)
	
.LABEL $label$86
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$85 }
	$2 = *($15)
	
.LABEL $label$83
	*($16) = $11
	CALL $96($2)
	
.LABEL $label$82
	CALL eosio_assert([1], [368])
	$2 = CALL db_next_i64(*($21 + [12]), ($22 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$76 }
	$21 = CALL $53($10, $2)
	goto $label$77 
	
.LABEL $label$76
	if ( ((uint_64)(CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) % (uint_32)[1001])) > (uint_64)*($5 + [88])) ){ goto $label$88 }
	$3 = *($5 + [80])
	$2 = [784]
	$1 = *($6 + [40])
	if ( ((uint_64)$1 <= (uint_64)(int_64)1009999) ){ goto $label$89 }
	$2 = [800]
	if ( ((uint_64)$1 <= (uint_64)(int_64)10009999) ){ goto $label$89 }
	$2 = [816]
	if ( ((uint_64)$1 > (uint_64)(int_64)42949672959999) ){ goto $label$88 }
	
.LABEL $label$89
	*($22 + [8]) = ((float_64)(CASTING float_64)(uint_64 $3) * (float_64)((float_64)(CASTING float_64)(uint_64 *($2 + [8])) / (float_64)(float_64)100))
	$3 = *($0)
	*($22 + [160]) = ($22 + [8])
	CALL eosio_assert($7, [16])
	CALL $55(($22 + [96]), $6, $3, ($22 + [160]))
	$1 = *($0)
	CALL eosio_assert($8, [16])
	CALL eosio_assert(((int_32)*($5 + [144]) == (int_32)$4), [64])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [112])
	*(($2 = ($5 + [80]))) = (Rounds 0)((float_64))((CASTING float_64)(uint_64 *($2)) - *($22 + [8])))
	$3 = *($22 + [152])
	*(($5 + [88])) = (int_64)0
	*($5 + [96]) = $3
	$3 = *($5 + [128])
	CALL eosio_assert([1], [176])
	*($22 + [312]) = (($22 + [160]) + [144])
	*($22 + [308]) = ($22 + [160])
	*($22 + [304]) = ($22 + [160])
	*($22 + [320]) = ($22 + [304])
	*($22 + [332]) = ($5 + [8])
	*($22 + [328]) = $5
	*($22 + [336]) = ($5 + [16])
	*($22 + [340]) = ($5 + [24])
	*($22 + [344]) = ($5 + [32])
	*($22 + [348]) = ($5 + [40])
	*($22 + [352]) = ($5 + [48])
	*($22 + [356]) = ($5 + [56])
	*($22 + [360]) = ($5 + [64])
	*($22 + [364]) = ($5 + [72])
	*($22 + [368]) = $2
	*($22 + [372]) = ($5 + [88])
	*($22 + [376]) = ($5 + [96])
	*($22 + [380]) = ($5 + [104])
	*($22 + [384]) = ($5 + [112])
	*($22 + [388]) = ($5 + [120])
	*($22 + [392]) = ($5 + [128])
	*($22 + [396]) = ($5 + [136])
	CALL $7(($22 + [328]), ($22 + [320]))
	CALL db_update_i64(*($5 + [148]), $1, ($22 + [160]), [144])
	$2 = ($0 + [64])
	if ( (uint_64)($3 <= *($2)) ){ goto $label$88 }
	*($2) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$88
	CALL prints([832])
	$11 = *($22 + [120])
	if ( ($11 == 0) ){ goto $label$90 }
	$0 = ($22 + [124])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$92 }
	
.LOOP $label$93:
	$2 = ($2 + [-24])
	$12 = *($2)
	*($2) = [0]
	if ( ($12 == 0) ){ goto $label$94 }
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$95 }
	CALL $96(*(($12 + [104])))
	
.LABEL $label$95
	CALL $96($12)
	
.LABEL $label$94
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$93 }
	$2 = *(($22 + [120]))
	goto $label$91 
	
.LABEL $label$92
	$2 = $11
	
.LABEL $label$91
	*($0) = $11
	CALL $96($2)
	
.LABEL $label$90
	*([0] + [4]) = ($22 + [400])
	return (unreachable)
	
.LABEL $label$34
	CALL $97(($22 + [24]))
	
.LABEL $label$33
	CALL $97(($22 + [56]))
	
.LABEL $label$32
	CALL $97(($22 + [40]))
	
.LABEL $label$31
	CALL $97(($22 + [72]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [32]) = (*($1 + [32]) + [1])
	$3 = *($1)
	CALL eosio_assert([1], [176])
	*(($11 = $10) + [16]) = [0]
	*($11) = ($11 + [16])
	$5 = ($1 + [8])
	*($11 + [28]) = $5
	*($11 + [24]) = $1
	$6 = ($1 + [20])
	*($11 + [32]) = $6
	$4 = ($1 + [32])
	*($11 + [36]) = $4
	$7 = ($1 + [40])
	*($11 + [40]) = $7
	$8 = ($1 + [48])
	*($11 + [44]) = $8
	CALL $40(($11 + [24]), $11)
	$9 = *($11 + [16])
	if ( ($9 <= [513]) ){ goto $label$2 }
	$10 = CALL malloc($9)
	goto $label$1 
	
.LABEL $label$2
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$1
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $9)
	*($11 + [16]) = $11
	*($11 + [28]) = $5
	*($11 + [32]) = $6
	*($11 + [36]) = $4
	*($11 + [40]) = $7
	*($11 + [44]) = $8
	*($11 + [24]) = $1
	CALL $41(($11 + [24]), ($11 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$3 }
	CALL free($10)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$5 = *($1 + [128])
	$6 = ($1 + [96])
	CALL $98($6, *($3))
	*($1 + [108]) = [1]
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [128])), [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$14 = ($1 + [56])
	*($3 + [52]) = $14
	$15 = ($1 + [64])
	*($3 + [56]) = $15
	$16 = ($1 + [72])
	*($3 + [60]) = $16
	$17 = ($1 + [80])
	*($3 + [64]) = $17
	$18 = ($1 + [88])
	*($3 + [68]) = $18
	*($3 + [72]) = $6
	$7 = ($1 + [108])
	*($3 + [76]) = $7
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	*($3 + [72]) = $6
	*($3 + [76]) = $7
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC _ZN5eosio9TeamFight8teamjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	CALL require_auth($1)
	if ( ((int_64)$3 == (int_64)2) ){ goto $label$1 }
	*((($12 + [48]) + [32])) = [0]
	*($12 + [64]) = (int_64)-1
	$3 = *($0)
	*($12 + [48]) = $3
	*($12 + [56]) = $1
	*($12 + [72]) = (int_64)0
	$7 = [0]
	$11 = CALL db_lowerbound_i64($3, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	CALL $23(($12 + [48]), $11)
	$7 = [0]
	$11 = CALL db_lowerbound_i64(*($12 + [48]), *(($12 + [56])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $23(($12 + [48]), $11)
	
.LABEL $label$3
	$11 = *($7 + [96])
	if ( ($11 & [1]) ){ goto $label$5 }
	$7 = uint_32($11 >> [1])
	goto $label$4 
	
.LABEL $label$5
	$7 = *(($7 + [100]))
	
.LABEL $label$4
	$7 = ($7 == 0)
	
.LABEL $label$2
	CALL eosio_assert($7, [656])
	*((($12 + [8]) + [32])) = [0]
	*($12 + [24]) = (int_64)-1
	$1 = *($0)
	*($12 + [8]) = $1
	*($12 + [16]) = $1
	*($12 + [32]) = (int_64)0
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$4 = ($2 + [1])
	$9 = CALL $36(($12 + [8]), $7)
	$8 = ($2 + [4])
	
.LOOP $label$8:
	$7 = ($7 & [1])
	$7 = *($2)
	$10 = ($7 & [1])
	$7 = *($9 + [8])
	$5 = uint_32($7 >> [1])
	$6 = ( *(($9 + [12])) ? $5 : $10 )
	if ( ((int_32)$6 != (int_32)( *($8) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$9 }
	$11 = (($9 + [8]) + [1])
	$7 = ( *(($2 + [8])) ? $4 : $7 )
	if ( ($10 == 0) ){ goto $label$10 }
	if ( ($6 == 0) ){ goto $label$7 }
	if ( (CALL memcmp(( *(($9 + [16])) ? $11 : $10 ), $7, $6) == 0) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$7 }
	$10 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_32)*($11) != (int_32)*($7)) ){ goto $label$9 }
	$7 = ($7 + [1])
	$11 = ($11 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([1], [368])
	$7 = CALL db_next_i64(*($9 + [60]), ($12 + [88]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $36(($12 + [8]), $7)
	goto $label$8 
	
.LABEL $label$7
	$7 = [0]
	$11 = CALL db_lowerbound_i64(*($12 + [48]), *(($12 + [56])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $23(($12 + [48]), $11)
	
.LABEL $label$12
	$1 = *($0)
	*($12 + [88]) = $2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [16])
	CALL $45(($12 + [48]), $7, $1, ($12 + [88]))
	CALL $46(($12 + [8]), $9, *($0))
	
.LABEL $label$6
	$10 = *($12 + [32])
	if ( ($10 == 0) ){ goto $label$13 }
	$9 = (($12 + [8]) + [28])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$18 }
	CALL $96(*(($7 + [28])))
	
.LABEL $label$18
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL $96(*(($7 + [16])))
	
.LABEL $label$19
	CALL $96($7)
	
.LABEL $label$17
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$16 }
	$7 = *(($12 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$7 = $10
	
.LABEL $label$14
	*($9) = $10
	CALL $96($7)
	
.LABEL $label$13
	$10 = *($12 + [72])
	if ( ($10 == 0) ){ goto $label$1 }
	$9 = ($12 + [76])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$7 = ($7 + [-24])
	$11 = *($7)
	*($7) = [0]
	if ( ($11 == 0) ){ goto $label$23 }
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$24 }
	CALL $96(*(($11 + [104])))
	
.LABEL $label$24
	CALL $96($11)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$22 }
	$7 = *(($12 + [72]))
	goto $label$20 
	
.LABEL $label$21
	$7 = $10
	
.LABEL $label$20
	*($9) = $10
	CALL $96($7)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	*($12 + [104]) = $1
	$11 = CALL current_time()
	*(($12 + [68])) = [0]
	*(($12 + [72])) = [0]
	*($12 + [52]) = [0]
	*($12 + [56]) = [0]
	*($12 + [60]) = [0]
	*($12 + [64]) = [0]
	*($12 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($12 + [76]) = [0]
	*(($12 + [80])) = [0]
	*(($12 + [84])) = [0]
	*($12 + [88]) = [0]
	*(($12 + [92])) = [0]
	*(($12 + [96])) = [0]
	$5 = ($12 + [76])
	$11 = (int_64)0
	$6 = (int_64)59
	$10 = [256]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$6 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($12 + [24]) = $7
	*($12 + [16]) = $1
	$11 = (int_64)0
	$6 = (int_64)59
	$10 = [272]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$12 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$9 = ($9 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($12 + [112]) = $7
	*($12 + [8]) = $2
	CALL $9($5, ($12 + [16]), ($12 + [104]), ($12 + [112]), ($12 + [8]))
	$10 = *($3)
	*(($12 + [60])) = $4
	if ( ($10 & [1]) ){ goto $label$14 }
	$10 = ($3 + [1])
	goto $label$13 
	
.LABEL $label$14
	$10 = *($3 + [8])
	
.LABEL $label$13
	$9 = [-1]
	
.LOOP $label$15:
	$3 = ($10 + $9)
	$5 = ($9 + [1])
	$9 = $5
	if ( *(($3 + [1])) ){ goto $label$15 }
	$1 = (CASTING uint_64)(uint_32 $5)
	$11 = (int_64)0
	$8 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$16:
	$6 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$1) ){ goto $label$17 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [165])
	goto $label$18 
	
.LABEL $label$19
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$21 }
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$6 = ((int_64)$6 & (int_64)15)
	
.LABEL $label$20
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$6 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	*($12 + [16]) = $7
	*($12 + [24]) = (int_64)0
	$11 = *($12 + [104])
	CALL $10(($12 + [112]), ($12 + [40]))
	$10 = *($12 + [112])
	CALL send_deferred(($12 + [16]), $11, $10, (*($12 + [116]) - $10), [0])
	$10 = *($12 + [112])
	if ( ($10 == 0) ){ goto $label$22 }
	*($12 + [116]) = $10
	CALL $96($10)
	
.LABEL $label$22
	CALL $11(($12 + [40]))
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $95(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $95([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $13(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [288])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $96($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $96($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $96($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0 + [24])
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [304])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $7)
	*($9 + [20]) = $4
	*($9 + [16]) = $4
	*($9 + [24]) = ($4 + $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($7 = CALL $95([160])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	$5 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [32]) = $5
	$6 = CALL current_time()
	*($7 + [48]) = ((int_64)$5 + (int_64)86400)
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	*($7 + [72]) = (int_64)0
	*($7 + [80]) = (int_64)0
	*($7 + [88]) = (int_64)0
	*($7 + [40]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [96]) = (int_64)0
	*($7 + [104]) = (int_64)0
	*($7 + [112]) = (int_64)0
	*($7 + [120]) = (int_64)10000
	*($7 + [128]) = (int_64)1
	*($7 + [136]) = (int_64)1000000
	*($7 + [144]) = $0
	*($9 + [32]) = ($9 + [16])
	*($9 + [44]) = ($7 + [8])
	*($9 + [40]) = $7
	*($9 + [48]) = ($7 + [16])
	*($9 + [52]) = ($7 + [24])
	*($9 + [56]) = ($7 + [32])
	*($9 + [60]) = ($7 + [40])
	*($9 + [64]) = ($7 + [48])
	*($9 + [68]) = ($7 + [56])
	*($9 + [72]) = ($7 + [64])
	*($9 + [76]) = ($7 + [72])
	*($9 + [80]) = ($7 + [80])
	*($9 + [84]) = ($7 + [88])
	*($9 + [88]) = ($7 + [96])
	*($9 + [92]) = ($7 + [104])
	*($9 + [96]) = ($7 + [112])
	*($9 + [100]) = ($7 + [120])
	*($9 + [104]) = ($7 + [128])
	*($9 + [108]) = ($7 + [136])
	CALL $19(($9 + [40]), ($9 + [32]))
	*($7 + [148]) = $1
	*($9 + [32]) = $7
	$5 = *($7 + [128])
	*($9 + [40]) = $5
	$8 = *($7 + [148])
	*($9 + [12]) = $8
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $8
	*($9 + [32]) = [0]
	*($4) = $7
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $20(($0 + [24]), ($9 + [32]), ($9 + [40]), ($9 + [12]))
	
.LABEL $label$8
	$4 = *($9 + [32])
	*($9 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $96($4)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [112])
	return $7
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN5eosio9TeamFight9resettimeEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [272])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$1 = ($0 + [48])
	$6 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6($1, $5)
	
.LABEL $label$1
	$7 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [16])
	CALL eosio_assert(((int_32)*($6 + [144]) == (int_32)$1), [64])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [112])
	$8 = *($6 + [128])
	$10 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [40]) = $10
	*($6 + [48]) = ((int_64)$10 + (int_64)86400)
	CALL eosio_assert(((int_64)$8 == (int_64)*($6 + [128])), [176])
	*($11 + [184]) = (($11 + [32]) + [144])
	*($11 + [180]) = ($11 + [32])
	*($11 + [176]) = ($11 + [32])
	*($11 + [192]) = ($11 + [176])
	*($11 + [204]) = ($6 + [8])
	*($11 + [200]) = $6
	*($11 + [208]) = ($6 + [16])
	*($11 + [212]) = ($6 + [24])
	*($11 + [216]) = ($6 + [32])
	*($11 + [220]) = ($6 + [40])
	*($11 + [224]) = ($6 + [48])
	*($11 + [228]) = ($6 + [56])
	*($11 + [232]) = ($6 + [64])
	*($11 + [236]) = ($6 + [72])
	*($11 + [240]) = ($6 + [80])
	*($11 + [244]) = ($6 + [88])
	*($11 + [248]) = ($6 + [96])
	*($11 + [252]) = ($6 + [104])
	*($11 + [256]) = ($6 + [112])
	*($11 + [260]) = ($6 + [120])
	*($11 + [264]) = ($6 + [128])
	*($11 + [268]) = ($6 + [136])
	CALL $7(($11 + [200]), ($11 + [192]))
	CALL db_update_i64(*($6 + [148]), $7, ($11 + [32]), [144])
	$6 = ($0 + [64])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$2 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*((($11 + [16]) + [8])) = [0]
	*($11 + [16]) = (int_64)0
	$6 = CALL strlen([240])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($11 + [16]) = ($6 << [1])
	$4 = (($11 + [16]) | [1])
	$5 = $4
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$4 = (($6 + [16]) & [-16])
	$5 = CALL $95($4)
	*($11 + [16]) = ($4 | [1])
	*($11 + [24]) = $5
	*($11 + [20]) = $6
	$4 = (($11 + [16]) | [1])
	
.LABEL $label$6
	CALL memcpy($5, [240], $6)
	
.LABEL $label$5
	*(($5 + $6)) = [0]
	$6 = ( *($11 + [24]) ? $4 : (*($11 + [16]) & [1]) )
	$5 = [-1]
	
.LOOP $label$8:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$8 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$9:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$10 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$14 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*($11 + [40]) = (int_64)0
	*($11 + [32]) = $9
	CALL cancel_deferred(($11 + [32]))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $96(*(($11 + [24])))
	
.LABEL $label$15
	*($11 + [4 align=4]) = (int_64)0
	*($11) = [0]
	$8 = *($0)
	$6 = CALL strlen([240])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	*($11) = ($6 << [1])
	$5 = ($11 | [1])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$4 = (($6 + [16]) & [-16])
	$5 = CALL $95($4)
	*($11) = ($4 | [1])
	*($11 + [8]) = $5
	*($11 + [4]) = $6
	
.LABEL $label$17
	CALL memcpy($5, [240], $6)
	
.LABEL $label$16
	*(($5 + $6)) = [0]
	CALL $8($0, $8, (int_64)1, $11, (int_64))(*(CALL $6($1, CALL $fimport$7(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($11) & [1]) == 0) ){ goto $label$19 }
	CALL $96(*($11 + [8]))
	
.LABEL $label$19
	*([0] + [4]) = ($11 + [272])
	return (unreachable)
	
.LABEL $label$4
	CALL $97(($11 + [16]))
	
.LABEL $label$3
	CALL $97($11)
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [288])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [288])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [288])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [288])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [288])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [288])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [288])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $17(CALL $18($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [288])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $17($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $12($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $13($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $14($4, $1)
	CALL $16(CALL $15(CALL $15($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $96($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $96($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $96($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $96($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $96($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $96($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $96($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $96($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $95($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $96($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1248])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1312])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $86($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [288])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [288])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [8]) = *(*($3))
	$5 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [80])
	*($3 + [64]) = $15
	$16 = ($1 + [88])
	*($3 + [68]) = $16
	$17 = ($1 + [96])
	*($3 + [72]) = $17
	$18 = ($1 + [108])
	*($3 + [76]) = $18
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [24]) = $1
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [8]) = *(*($3))
	$5 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [80])
	*($3 + [64]) = $15
	$16 = ($1 + [88])
	*($3 + [68]) = $16
	$17 = ($1 + [96])
	*($3 + [72]) = $17
	$18 = ($1 + [108])
	*($3 + [76]) = $18
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [24]) = $1
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [176])
	*(($3 = $11) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [20])
	*($3 + [32]) = $7
	$8 = ($1 + [32])
	*($3 + [36]) = $8
	$5 = ($1 + [40])
	*($3 + [40]) = $5
	$9 = ($1 + [48])
	*($3 + [44]) = $9
	CALL $40(($3 + [24]), $3)
	$10 = *($3 + [16])
	if ( ($10 <= [513]) ){ goto $label$2 }
	$11 = CALL malloc($10)
	goto $label$1 
	
.LABEL $label$2
	$11 = ($11 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$1
	*($3 + [4]) = $11
	*($3) = $11
	*($3 + [8]) = ($11 + $10)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $5
	*($3 + [44]) = $9
	*($3 + [24]) = $1
	CALL $41(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$3 }
	CALL free($11)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [96])
	$20 = $21
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	*($1 + [72]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [72])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.4)))
	$5 = *($1 + [128])
	*($1 + [80]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [80])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.02)))
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3 + [4])))
	*($1 + [104]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [104])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0)))
	*($1 + [64]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [64])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.2)))
	$17 = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [4])))
	*($1 + [112]) = $17
	$17 = ((int_64)((int_64)$17 * (int_64)100) + (int_64)10000)
	*($1 + [120]) = $17
	*($1 + [16]) = *(*($3 + [8]))
	$14 = ($1 + [16])
	$13 = ($1 + [120])
	$12 = ($1 + [112])
	$11 = ($1 + [64])
	$10 = ($1 + [104])
	$9 = ($1 + [88])
	$8 = ($1 + [80])
	$7 = ($1 + [72])
	$6 = ($1 + [56])
	$4 = ($1 + [128])
	if ( ((int_64)*(*($3 + [12])) != (int_64)1) ){ goto $label$2 }
	$19 = ($1 + [40])
	$18 = ($1 + [48])
	$17 = ((int_64)((int_64)$17 * (int_64)30) + (int_64)86400)
	$16 = *($1 + [40])
	$15 = *($1 + [48])
	if ( ((uint_64)(int_64))($15 - $16) > (uint_64)$17) ){ goto $label$1 }
	$15 = ((int_64)((int_64)*(*(($3 + [4]))) * (int_64)30) + (int_64)$15)
	*($18) = $15
	if ( ((uint_64)(int_64))($15 - $16) <= (uint_64)$17) ){ goto $label$1 }
	*($18) = ((int_64)$17 + (int_64)$16)
	goto $label$1 
	
.LABEL $label$2
	$18 = ($1 + [48])
	$19 = ($1 + [40])
	
.LABEL $label$1
	CALL eosio_assert([1], [176])
	$21 = $21
	$3 = ($21 + [-144])
	*([0] + [4]) = $3
	*($20 + [4]) = $3
	*($20) = $3
	*($20 + [8]) = $21
	*($20 + [16]) = $20
	*($20 + [32]) = $14
	*($20 + [44]) = $19
	*($20 + [48]) = $18
	*($20 + [24]) = $1
	*($20 + [28]) = ($1 + [8])
	*($20 + [36]) = ($1 + [24])
	*($20 + [40]) = ($1 + [32])
	*($20 + [52]) = $6
	*($20 + [56]) = $11
	*($20 + [60]) = $7
	*($20 + [64]) = $8
	*($20 + [68]) = $9
	*($20 + [72]) = ($1 + [96])
	*($20 + [76]) = $10
	*($20 + [80]) = $12
	*($20 + [84]) = $13
	*($20 + [88]) = $4
	*($20 + [92]) = ($1 + [136])
	CALL $7(($20 + [24]), ($20 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $3, [144])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($20 + [96])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [120]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [120])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.1)))
	*($1 + [88]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *($1 + [88])) + (float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.1)))
	$5 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$14 = ($1 + [56])
	*($3 + [52]) = $14
	$15 = ($1 + [64])
	*($3 + [56]) = $15
	$16 = ($1 + [72])
	*($3 + [60]) = $16
	$17 = ($1 + [80])
	*($3 + [64]) = $17
	$7 = ($1 + [88])
	*($3 + [68]) = $7
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $7
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [304])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $95([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [336])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $96($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [96])
	$24 = $25
	*([0] + [4]) = $25
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$7 = ($1 + [32])
	$4 = ($1 + [128])
	$6 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.2) / (float_64)(CASTING float_64)(uint_64 *(*($3 + [4])))))
	$23 = *($1 + [32])
	$5 = *($1 + [128])
	if ( ((int_64)*(*(*($3 + [8]) + [4])) != (int_64)*(*($3 + [12]))) ){ goto $label$1 }
	$23 = (int_64))($23 - *(*($3 + [16])))
	
.LABEL $label$1
	$23 = ((int_64)$23 * (int_64)$6)
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)$23)
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)$23)
	CALL eosio_assert([1], [176])
	*($24 + [16]) = [0]
	*($24) = ($24 + [16])
	$10 = ($1 + [8])
	*($24 + [28]) = $10
	*($24 + [24]) = $1
	$11 = ($1 + [16])
	*($24 + [32]) = $11
	$12 = ($1 + [24])
	*($24 + [36]) = $12
	*($24 + [40]) = $7
	$13 = ($1 + [40])
	*($24 + [44]) = $13
	$8 = ($1 + [48])
	*($24 + [48]) = $8
	$14 = ($1 + [56])
	*($24 + [52]) = $14
	$15 = ($1 + [64])
	*($24 + [56]) = $15
	$16 = ($1 + [72])
	*($24 + [60]) = $16
	$17 = ($1 + [80])
	*($24 + [64]) = $17
	$18 = ($1 + [88])
	*($24 + [68]) = $18
	$19 = ($1 + [96])
	*($24 + [72]) = $19
	$20 = ($1 + [108])
	*($24 + [76]) = $20
	$21 = ($1 + [112])
	*($24 + [80]) = $21
	$9 = ($1 + [120])
	*($24 + [84]) = $9
	*($24 + [88]) = $4
	CALL $28(($24 + [24]), $24)
	$22 = *($24 + [16])
	if ( ($22 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($22)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($25 - (($22 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($24 + [4]) = $3
	*($24) = $3
	*($24 + [8]) = ($3 + $22)
	*($24 + [16]) = $24
	*($24 + [28]) = $10
	*($24 + [32]) = $11
	*($24 + [36]) = $12
	*($24 + [40]) = $7
	*($24 + [44]) = $13
	*($24 + [48]) = $8
	*($24 + [24]) = $1
	*($24 + [52]) = $14
	*($24 + [56]) = $15
	*($24 + [60]) = $16
	*($24 + [64]) = $17
	*($24 + [68]) = $18
	*($24 + [72]) = $19
	*($24 + [76]) = $20
	*($24 + [80]) = $21
	*($24 + [84]) = $9
	*($24 + [88]) = $4
	CALL $29(($24 + [24]), ($24 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $3, $22)
	if ( ($22 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($24 + [96])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [512])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $13($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [336])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $95(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $96($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $96($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio9TeamFight6inviteEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [80]) = $2
	$5 = ($0 + [48])
	$6 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6($5, $7)
	
.LABEL $label$1
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$3 }
	$7 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [368])
	$6 = CALL db_next_i64(*($6 + [148]), ($8 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $6($5, $6)
	goto $label$2 
	
.LABEL $label$3
	$7 = $6
	
.LABEL $label$2
	if ( ((uint_64)*($7 + [48]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$5 }
	$6 = [0]
	$7 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $6($5, $7)
	
.LABEL $label$6
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$8 }
	$7 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [368])
	$6 = CALL db_next_i64(*($6 + [148]), ($8 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $6($5, $6)
	goto $label$7 
	
.LABEL $label$8
	$7 = $6
	
.LABEL $label$7
	if ( ((uint_64)*($7 + [40]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [688])
	
.LABEL $label$4
	CALL require_auth($1)
	$6 = [0]
	*((($8 + [40]) + [32])) = [0]
	*($8 + [48]) = $1
	*($8 + [56]) = (int_64)-1
	$3 = *($0)
	*($8 + [40]) = $3
	*($8 + [64]) = (int_64)0
	$5 = [0]
	$7 = CALL db_lowerbound_i64($3, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	CALL $23(($8 + [40]), $7)
	$5 = [1]
	
.LABEL $label$9
	CALL eosio_assert($5, [880])
	*($8 + [16]) = (int_64)-1
	*($8 + [24]) = [0]
	$1 = *($8 + [80])
	$3 = *($0)
	*($8) = $3
	*($8 + [8]) = $1
	*(($8 + [28])) = [0]
	*(($8 + [32])) = [0]
	$5 = CALL db_lowerbound_i64($3, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $23($8, $5)
	$6 = [1]
	
.LABEL $label$10
	CALL eosio_assert($6, [912])
	$6 = [0]
	$5 = [0]
	$7 = ($8 + [48])
	$4 = CALL db_lowerbound_i64(*($8 + [40]), *($7), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $23(($8 + [40]), $4)
	
.LABEL $label$11
	$1 = *($0)
	*($8 + [88]) = ($8 + [80])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [16])
	CALL $58(($8 + [40]), $5, $1, ($8 + [88]))
	$5 = CALL db_lowerbound_i64(*($8 + [40]), *($7), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$6 = CALL $23(($8 + [40]), $5)
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [368])
	$5 = [0]
	$6 = CALL db_next_i64(*($6 + [140]), ($8 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $23(($8 + [40]), $6)
	
.LABEL $label$13
	$1 = *($0)
	*($8 + [88]) = ($8 + [80])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [16])
	CALL $59(($8 + [40]), $5, $1, ($8 + [88]))
	CALL prints([944])
	$5 = *($8 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	$7 = ($8 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL $96(*(($6 + [104])))
	
.LABEL $label$19
	CALL $96($6)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($8 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $5
	
.LABEL $label$15
	*($7) = $5
	CALL $96($0)
	
.LABEL $label$14
	$5 = *($8 + [64])
	if ( ($5 == 0) ){ goto $label$20 }
	$7 = ($8 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $96(*(($6 + [104])))
	
.LABEL $label$25
	CALL $96($6)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$23 }
	$0 = *(($8 + [64]))
	goto $label$21 
	
.LABEL $label$22
	$0 = $5
	
.LABEL $label$21
	*($7) = $5
	CALL $96($0)
	
.LABEL $label$20
	*([0] + [4]) = ($8 + [96])
}

void .FUNC _ZN5eosio9TeamFight10teamcreateEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_y (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	*($14 + [96]) = $1
	CALL require_auth($1)
	if ( ((int_64)$4 == (int_64)2) ){ goto $label$2 }
	*((($14 + [56]) + [32])) = [0]
	*($14 + [72]) = (int_64)-1
	$4 = *($0)
	*($14 + [56]) = $4
	*($14 + [64]) = $1
	*($14 + [80]) = (int_64)0
	$11 = [0]
	$12 = CALL db_lowerbound_i64($4, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	CALL $23(($14 + [56]), $12)
	$11 = [1]
	$12 = ($14 + [64])
	if ( ((uint_64)*(CALL $23(($14 + [56]), CALL $fimport$7(*($14 + [56]), *($12), (int_64)3607749778735104000, (int_64)0)) + [16]) > (uint_64)(int_64)999999) ){ goto $label$3 }
	$11 = ((int_32)*(CALL $23(($14 + [56]), CALL $fimport$7(*($14 + [56]), *($12), (int_64)3607749778735104000, (int_64)0)) + [108]) != (int_32)[0])
	
.LABEL $label$3
	CALL eosio_assert($11, [528])
	*((($14 + [16]) + [32])) = [0]
	*($14 + [32]) = (int_64)-1
	$1 = *($0)
	*($14 + [16]) = $1
	*($14 + [24]) = $1
	*($14 + [40]) = (int_64)0
	$11 = CALL db_lowerbound_i64($1, $1, (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$5 = ($2 + [1])
	$9 = CALL $36(($14 + [16]), $11)
	$8 = ($2 + [4])
	
.LOOP $label$5:
	$13 = [1]
	$11 = ($11 & [1])
	$11 = *($2)
	$10 = ($11 & [1])
	$11 = *($9 + [8])
	$6 = uint_32($11 >> [1])
	$7 = ( *(($9 + [12])) ? $6 : $10 )
	if ( ((int_32)$7 != (int_32)( *($8) ? uint_32($11 >> [1]) : $11 )) ){ goto $label$6 }
	$12 = (($9 + [8]) + [1])
	$11 = ( *(($2 + [8])) ? $5 : $11 )
	if ( ($10 == 0) ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$8 }
	$13 = ((int_32)CALL memcmp(( *(($9 + [16])) ? $12 : $10 ), $11, $7) != (int_32)[0])
	goto $label$6 
	
.LABEL $label$8
	$13 = [0]
	goto $label$6 
	
.LABEL $label$7
	$13 = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	$10 = ([0] - $6)
	
.LOOP $label$10:
	if ( ((int_32)*($12) != (int_32)*($11)) ){ goto $label$9 }
	$11 = ($11 + [1])
	$12 = ($12 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$9
	$13 = [1]
	
.LABEL $label$6
	CALL eosio_assert($13, [624])
	CALL eosio_assert([1], [368])
	$11 = CALL db_next_i64(*($9 + [60]), $14)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$4 }
	$9 = CALL $36(($14 + [16]), $11)
	goto $label$5 
	
.LABEL $label$4
	$1 = *($0)
	*($14 + [4]) = $2
	*($14 + [8]) = $3
	*($14) = ($14 + [96])
	*($14 + [12]) = ($14 + [56])
	*($14 + [136]) = $1
	CALL eosio_assert(((int_64)*($14 + [16]) == (int_64)CALL $fimport$3()), [560])
	*($14 + [116]) = $14
	*($14 + [112]) = ($14 + [16])
	*($14 + [120]) = ($14 + [136])
	*(($11 = CALL $95([72])) + [16]) = [0]
	*($11 + [8 align=4]) = (int_64)0
	*($11 + [20]) = [0]
	*(($11 + [28])) = [0]
	*(($11 + [24])) = [0]
	$12 = CALL strlen([496])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$13 }
	*(($11 + [20])) = ($12 << [1])
	$10 = ($11 + [21])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$9 = (($12 + [16]) & [-16])
	$10 = CALL $95($9)
	*(($11 + [20])) = ($9 | [1])
	*($11 + [28]) = $10
	*($11 + [24]) = $12
	
.LABEL $label$12
	CALL memcpy($10, [496], $12)
	
.LABEL $label$11
	*(($10 + $12)) = [0]
	*($11 + [40]) = (int_64)0
	*($11 + [32]) = [1]
	*($11 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($11 + [56]) = ($14 + [16])
	CALL $37(($14 + [112]), $11)
	*($14 + [128]) = $11
	$1 = *($11)
	*($14 + [112]) = $1
	$10 = *($11 + [60])
	*($14 + [108]) = $10
	$9 = ($14 + [44])
	$12 = *($9)
	if ( ((uint_32)$12 >= (uint_32)*(($14 + [48]))) ){ goto $label$15 }
	*($12 + [8]) = $1
	*($12 + [16]) = $10
	*($14 + [128]) = [0]
	*($12) = $11
	*($9) = ($12 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $38(($14 + [40]), ($14 + [128]), ($14 + [112]), ($14 + [108]))
	
.LABEL $label$14
	$11 = *($14 + [128])
	$12 = [0]
	*($14 + [128]) = [0]
	if ( ($11 == 0) ){ goto $label$16 }
	if ( ((*($11 + [20]) & [1]) == 0) ){ goto $label$17 }
	CALL $96(*(($11 + [28])))
	
.LABEL $label$17
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL $96(*(($11 + [16])))
	
.LABEL $label$18
	CALL $96($11)
	
.LABEL $label$16
	$11 = CALL db_lowerbound_i64(*($14 + [56]), *(($14 + [64])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$19 }
	$12 = CALL $23(($14 + [56]), $11)
	
.LABEL $label$19
	$1 = *($0)
	*($14) = $2
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [16])
	CALL $39(($14 + [56]), $12, $1, $14)
	$10 = *($14 + [40])
	if ( ($10 == 0) ){ goto $label$20 }
	$9 = (($14 + [16]) + [28])
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = ($12 + [-24])
	$11 = *($12)
	*($12) = [0]
	if ( ($11 == 0) ){ goto $label$24 }
	if ( ((*($11 + [20]) & [1]) == 0) ){ goto $label$25 }
	CALL $96(*(($11 + [28])))
	
.LABEL $label$25
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL $96(*(($11 + [16])))
	
.LABEL $label$26
	CALL $96($11)
	
.LABEL $label$24
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$23 }
	$11 = *(($14 + [40]))
	goto $label$21 
	
.LABEL $label$22
	$11 = $10
	
.LABEL $label$21
	*($9) = $10
	CALL $96($11)
	
.LABEL $label$20
	$10 = *($14 + [80])
	if ( ($10 == 0) ){ goto $label$2 }
	$9 = ($14 + [84])
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$28 }
	
.LOOP $label$29:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$30 }
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$31 }
	CALL $96(*(($12 + [104])))
	
.LABEL $label$31
	CALL $96($12)
	
.LABEL $label$30
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$29 }
	$11 = *(($14 + [80]))
	goto $label$27 
	
.LABEL $label$28
	$11 = $10
	
.LABEL $label$27
	*($9) = $10
	CALL $96($11)
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $97(($11 + [20]))
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $27(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [288])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [64])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2)
	$2 = *($0 + [48])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [1])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$5 = *($1 + [128])
	$21 = *($3)
	CALL prints([848])
	CALL printdf(*($21))
	*($1 + [64]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [64]))))
	*($1 + [120]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [120]))))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [128])), [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$14 = ($1 + [56])
	*($3 + [52]) = $14
	$6 = ($1 + [64])
	*($3 + [56]) = $6
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [80])
	*($3 + [64]) = $16
	$17 = ($1 + [88])
	*($3 + [68]) = $17
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$7 = ($1 + [120])
	*($3 + [84]) = $7
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $14
	*($3 + [56]) = $6
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $7
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC _ZN5eosio9TeamFight5delayEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	*(($10 + [88])) = [0]
	*($10 + [80]) = (int_64)0
	$5 = CALL strlen([240])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*($10 + [80]) = ($5 << [1])
	$3 = (($10 + [80]) | [1])
	$4 = $3
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $95($3)
	*($10 + [80]) = ($3 | [1])
	*($10 + [88]) = $4
	*($10 + [84]) = $5
	$3 = (($10 + [80]) | [1])
	
.LABEL $label$8
	CALL memcpy($4, [240], $5)
	
.LABEL $label$7
	*(($4 + $5)) = [0]
	$5 = ( *($10 + [88]) ? $3 : (*($10 + [80]) & [1]) )
	$4 = [-1]
	
.LOOP $label$10:
	$3 = ($5 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$10 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$11:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$2) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$16 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$15 
	
.LABEL $label$16
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$15
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$11 }
	*($10 + [104]) = (int_64)0
	*($10 + [96]) = $8
	CALL cancel_deferred(($10 + [96]))
	if ( ((*($10 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL $96(*(($10 + [88])))
	
.LABEL $label$17
	*(($10 + [72])) = [0]
	*($10 + [64]) = (int_64)0
	$5 = CALL strlen([352])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($10 + [64]) = ($5 << [1])
	$3 = (($10 + [64]) | [1])
	$4 = $3
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $95($3)
	*($10 + [64]) = ($3 | [1])
	*($10 + [72]) = $4
	*($10 + [68]) = $5
	$3 = (($10 + [64]) | [1])
	
.LABEL $label$19
	CALL memcpy($4, [352], $5)
	
.LABEL $label$18
	*(($4 + $5)) = [0]
	$5 = ( *($10 + [72]) ? $3 : (*($10 + [64]) & [1]) )
	$4 = [-1]
	
.LOOP $label$21:
	$3 = ($5 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$21 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$22:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$2) ){ goto $label$23 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$27 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$26
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$22 }
	*($10 + [104]) = (int_64)0
	*($10 + [96]) = $8
	CALL cancel_deferred(($10 + [96]))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$28 }
	CALL $96(*(($10 + [72])))
	
.LABEL $label$28
	$4 = ($0 + [48])
	$7 = *(CALL $6($4, CALL $fimport$7(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48])
	$6 = CALL current_time()
	$9 = *($0)
	if ( ((uint_64)$7 <= (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$36 }
	*(($10 + [56])) = [0]
	*($10 + [48]) = (int_64)0
	$5 = CALL strlen([240])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$35 }
	*($10 + [48]) = ($5 << [1])
	$3 = (($10 + [48]) | [1])
	if ( $5 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	*(($10 + [40])) = [0]
	*($10 + [32]) = (int_64)0
	$5 = CALL strlen([240])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($10 + [32]) = ($5 << [1])
	$3 = (($10 + [32]) | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$35
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $95($1)
	*($10 + [48]) = ($1 | [1])
	*($10 + [56]) = $3
	*($10 + [52]) = $5
	
.LABEL $label$34
	CALL memcpy($3, [240], $5)
	
.LABEL $label$33
	*(($3 + $5)) = [0]
	CALL $8($0, $9, (int_64)1, ($10 + [48]), (int_64))(*(CALL $6($4, CALL $fimport$7(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$29 }
	CALL $96(*($10 + [56]))
	goto $label$29 
	
.LABEL $label$32
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $95($1)
	*($10 + [32]) = ($1 | [1])
	*($10 + [40]) = $3
	*($10 + [36]) = $5
	
.LABEL $label$31
	CALL memcpy($3, [240], $5)
	
.LABEL $label$30
	*(($3 + $5)) = [0]
	CALL $8($0, $9, (int_64)1, ($10 + [32]), (int_64)0)
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$29 }
	CALL $96(*($10 + [40]))
	
.LABEL $label$29
	$3 = [0]
	$5 = [0]
	$1 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$37 }
	$5 = CALL $6($4, $1)
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [368])
	$5 = CALL db_next_i64(*($5 + [148]), ($10 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$38 }
	$3 = CALL $6($4, $5)
	
.LABEL $label$38
	$7 = *($3 + [48])
	$6 = CALL current_time()
	$9 = *($0)
	if ( ((uint_64)$7 <= (uint_64)((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$46 }
	*(($10 + [24])) = [0]
	*($10 + [16]) = (int_64)0
	$5 = CALL strlen([352])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$45 }
	*($10 + [16]) = ($5 << [1])
	$3 = (($10 + [16]) | [1])
	if ( $5 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	*(($10 + [8])) = [0]
	*($10) = (int_64)0
	$5 = CALL strlen([352])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$42 }
	*($10) = ($5 << [1])
	$4 = ($10 | [1])
	if ( $5 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$45
	$1 = (($5 + [16]) & [-16])
	$3 = CALL $95($1)
	*($10 + [16]) = ($1 | [1])
	*($10 + [24]) = $3
	*($10 + [20]) = $5
	
.LABEL $label$44
	CALL memcpy($3, [352], $5)
	
.LABEL $label$43
	$1 = [0]
	*(($3 + $5)) = [0]
	$5 = [0]
	$3 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$47 }
	$5 = CALL $6($4, $3)
	
.LABEL $label$47
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [368])
	$5 = CALL db_next_i64(*($5 + [148]), ($10 + [96]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$48 }
	$1 = CALL $6($4, $5)
	
.LABEL $label$48
	CALL $8($0, $9, (int_64)2, ($10 + [16]), (int_64))(*($1 + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$39 }
	CALL $96(*($10 + [24]))
	goto $label$39 
	
.LABEL $label$42
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $95($3)
	*($10) = ($3 | [1])
	*($10 + [8]) = $4
	*($10 + [4]) = $5
	
.LABEL $label$41
	CALL memcpy($4, [352], $5)
	
.LABEL $label$40
	*(($4 + $5)) = [0]
	CALL $8($0, $9, (int_64)2, $10, (int_64)0)
	if ( ((*($10) & [1]) == 0) ){ goto $label$39 }
	CALL $96(*($10 + [8]))
	
.LABEL $label$39
	*([0] + [4]) = ($10 + [112])
	return (unreachable)
	
.LABEL $label$6
	CALL $97(($10 + [80]))
	
.LABEL $label$5
	CALL $97(($10 + [64]))
	
.LABEL $label$4
	CALL $97(($10 + [48]))
	
.LABEL $label$3
	CALL $97(($10 + [32]))
	
.LABEL $label$2
	CALL $97(($10 + [16]))
	
.LABEL $label$1
	CALL $97($10)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $95(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $96($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $96($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $95([152])
	$6 = CALL $30($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4 + [128])
	*($8 + [8]) = $5
	$1 = *($4 + [140])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL $96(*(($4 + [104])))
	
.LABEL $label$10
	CALL $96($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN5eosio9TeamFight8withdrawEyNS_5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$5 = [0]
	*(($13 + [136])) = [0]
	*($13 + [112]) = $1
	*($13 + [120]) = (int_64)-1
	$8 = *($0)
	*($13 + [104]) = $8
	*($13 + [128]) = (int_64)0
	$7 = [0]
	$12 = CALL db_lowerbound_i64($8, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $23(($13 + [104]), $12)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [400])
	$7 = CALL db_lowerbound_i64(*($13 + [104]), *(($13 + [112])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $23(($13 + [104]), $7)
	
.LABEL $label$2
	if ( ((int_64)$3 != (int_64)2) ){ goto $label$4 }
	$7 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [368])
	$5 = CALL db_next_i64(*($5 + [140]), ($13 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $23(($13 + [104]), $5)
	goto $label$3 
	
.LABEL $label$4
	$7 = $5
	
.LABEL $label$3
	CALL eosio_assert(((uint_64)*($7 + [120]) >= (uint_64)*($2)), [416])
	$1 = *($0)
	*($13 + [16]) = $2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [16])
	CALL $24(($13 + [104]), $7, $1, ($13 + [16]))
	$4 = *($0)
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [256]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$3 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$3 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [432]
	$10 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$3 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$3 | (int_64)$10)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$11 }
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [448]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$3 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$3 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	$12 = [0]
	$7 = CALL db_lowerbound_i64(*($13 + [104]), *((($13 + [104]) + [8])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$23 }
	$12 = CALL $23(($13 + [104]), $7)
	
.LABEL $label$23
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$7 = CALL strlen([464])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$27 }
	*($13) = ($7 << [1])
	$5 = ($13 | [1])
	if ( $7 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $95($6)
	*($13) = ($6 | [1])
	*($13 + [8]) = $5
	*($13 + [4]) = $7
	
.LABEL $label$26
	CALL memcpy($5, [464], $7)
	
.LABEL $label$25
	*(($5 + $7)) = [0]
	$1 = *($12)
	*((($13 + [16]) + [24])) = *(($2 + [8]))
	*((($13 + [16]) + [20])) = *(($2 + [4]))
	*((($13 + [16]) + [28])) = *(($2 + [12]))
	*($13 + [16]) = *($0)
	*($13 + [24]) = $1
	*($13 + [32]) = *($2)
	$7 = ($13 + [8])
	*(($13 + [56])) = *($7)
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($7) = [0]
	*($13 + [64]) = $10
	*($13 + [72]) = $11
	*(($7 = CALL $95([16]))) = $4
	*($7 + [8]) = $9
	*((($13 + [64]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($13 + [64]) + [24])) = $5
	*((($13 + [64]) + [20])) = $5
	*($13 + [80]) = $7
	*($13 + [92]) = [0]
	*((($13 + [64]) + [36])) = [0]
	$7 = *($13 + [48])
	$5 = ( *((($13 + [16]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$1 = (CASTING uint_64)(uint_32 $5)
	$5 = (($13 + [64]) + [28])
	
.LOOP $label$28:
	$7 = ($7 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$28 }
	if ( ($7 == 0) ){ goto $label$30 }
	CALL $13($5, $7)
	$5 = *(($13 + [96]))
	$7 = *(($13 + [92]))
	goto $label$29 
	
.LABEL $label$30
	$5 = [0]
	$7 = [0]
	
.LABEL $label$29
	*($13 + [164]) = $7
	*($13 + [160]) = $7
	*($13 + [168]) = $5
	*($13 + [144]) = ($13 + [160])
	*($13 + [152]) = ($13 + [16])
	CALL $25(($13 + [152]), ($13 + [144]))
	CALL $26(($13 + [160]), ($13 + [64]))
	$7 = *($13 + [160])
	CALL send_inline($7, (*($13 + [164]) - $7))
	$7 = *($13 + [160])
	if ( ($7 == 0) ){ goto $label$31 }
	*($13 + [164]) = $7
	CALL $96($7)
	
.LABEL $label$31
	$7 = *($13 + [92])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($13 + [96])) = $7
	CALL $96($7)
	
.LABEL $label$32
	$7 = *($13 + [80])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($13 + [84])) = $7
	CALL $96($7)
	
.LABEL $label$33
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $96(*(($13 + [56])))
	
.LABEL $label$34
	if ( ((*($13) & [1]) == 0) ){ goto $label$35 }
	CALL $96(*(($13 + [8])))
	
.LABEL $label$35
	$2 = *($13 + [128])
	if ( ($2 == 0) ){ goto $label$36 }
	$0 = ($13 + [132])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$38 }
	
.LOOP $label$39:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$40 }
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$41 }
	CALL $96(*(($5 + [104])))
	
.LABEL $label$41
	CALL $96($5)
	
.LABEL $label$40
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$39 }
	$7 = *(($13 + [128]))
	goto $label$37 
	
.LABEL $label$38
	$7 = $2
	
.LABEL $label$37
	*($0) = $2
	CALL $96($7)
	
.LABEL $label$36
	*([0] + [4]) = ($13 + [176])
	return (unreachable)
	
.LABEL $label$24
	CALL $97($13)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [288])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$3 = *($3)
	*($1 + [56]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [120]) = (int_64))(*($1 + [120]) - *($3))
	$5 = *($1 + [128])
	*($1 + [48]) = (int_64)0
	*($1 + [80]) = (int_64)0
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$11 = ($1 + [8])
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	$12 = ($1 + [16])
	*($3 + [32]) = $12
	$13 = ($1 + [24])
	*($3 + [36]) = $13
	$14 = ($1 + [32])
	*($3 + [40]) = $14
	$15 = ($1 + [40])
	*($3 + [44]) = $15
	$9 = ($1 + [48])
	*($3 + [48]) = $9
	$7 = ($1 + [56])
	*($3 + [52]) = $7
	$16 = ($1 + [64])
	*($3 + [56]) = $16
	$17 = ($1 + [72])
	*($3 + [60]) = $17
	$10 = ($1 + [80])
	*($3 + [64]) = $10
	$8 = ($1 + [88])
	*($3 + [68]) = $8
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $11
	*($3 + [32]) = $12
	*($3 + [36]) = $13
	*($3 + [40]) = $14
	*($3 + [44]) = $15
	*($3 + [48]) = $9
	*($3 + [24]) = $1
	*($3 + [52]) = $7
	*($3 + [56]) = $16
	*($3 + [60]) = $17
	*($3 + [64]) = $10
	*($3 + [68]) = $8
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [288])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [288])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [288])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [288])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $17(CALL $18($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [40]) = (int_64)0
	$3 = *($1)
	CALL eosio_assert([1], [176])
	*(($11 = $10) + [16]) = [0]
	*($11) = ($11 + [16])
	$5 = ($1 + [8])
	*($11 + [28]) = $5
	*($11 + [24]) = $1
	$6 = ($1 + [20])
	*($11 + [32]) = $6
	$7 = ($1 + [32])
	*($11 + [36]) = $7
	$4 = ($1 + [40])
	*($11 + [40]) = $4
	$8 = ($1 + [48])
	*($11 + [44]) = $8
	CALL $40(($11 + [24]), $11)
	$9 = *($11 + [16])
	if ( ($9 <= [513]) ){ goto $label$2 }
	$10 = CALL malloc($9)
	goto $label$1 
	
.LABEL $label$2
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$1
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $9)
	*($11 + [16]) = $11
	*($11 + [28]) = $5
	*($11 + [32]) = $6
	*($11 + [36]) = $7
	*($11 + [40]) = $4
	*($11 + [44]) = $8
	*($11 + [24]) = $1
	CALL $41(($11 + [24]), ($11 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$3 }
	CALL free($10)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [112]) = (int_64)0
	$4 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($22 = $21) + [16]) = [0]
	*($22) = ($22 + [16])
	$8 = ($1 + [8])
	*($22 + [28]) = $8
	*($22 + [24]) = $1
	$9 = ($1 + [16])
	*($22 + [32]) = $9
	$10 = ($1 + [24])
	*($22 + [36]) = $10
	$5 = ($1 + [32])
	*($22 + [40]) = $5
	$6 = ($1 + [40])
	*($22 + [44]) = $6
	$11 = ($1 + [48])
	*($22 + [48]) = $11
	$12 = ($1 + [56])
	*($22 + [52]) = $12
	$13 = ($1 + [64])
	*($22 + [56]) = $13
	$14 = ($1 + [72])
	*($22 + [60]) = $14
	$15 = ($1 + [80])
	*($22 + [64]) = $15
	$16 = ($1 + [88])
	*($22 + [68]) = $16
	$17 = ($1 + [96])
	*($22 + [72]) = $17
	$18 = ($1 + [108])
	*($22 + [76]) = $18
	$7 = ($1 + [112])
	*($22 + [80]) = $7
	$19 = ($1 + [120])
	*($22 + [84]) = $19
	$3 = ($1 + [128])
	*($22 + [88]) = $3
	CALL $28(($22 + [24]), $22)
	$20 = *($22 + [16])
	if ( ($20 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($20)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($20 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $20)
	*($22 + [16]) = $22
	*($22 + [28]) = $8
	*($22 + [32]) = $9
	*($22 + [36]) = $10
	*($22 + [40]) = $5
	*($22 + [44]) = $6
	*($22 + [48]) = $11
	*($22 + [24]) = $1
	*($22 + [52]) = $12
	*($22 + [56]) = $13
	*($22 + [60]) = $14
	*($22 + [64]) = $15
	*($22 + [68]) = $16
	*($22 + [72]) = $17
	*($22 + [76]) = $18
	*($22 + [80]) = $7
	*($22 + [84]) = $19
	*($22 + [88]) = $3
	CALL $29(($22 + [24]), ($22 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $21, $20)
	if ( ($20 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$5 = *($1 + [128])
	$3 = *(($3 + [8]))
	$22 = (Rounds 0)(((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.8) / (float_64)(CASTING float_64)(uint_64 *((*(($3 + [4])) + [40])))) * (float_64)(CASTING float_64)(uint_64 *(CALL $23($3, CALL $fimport$7(*($3), *($3 + [8]), (int_64)3607749778735104000, (int_64)0)) + [32]))))
	*($1 + [120]) = ((int_64)$22 + (int_64)*($1 + [120]))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$22)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [128])), [176])
	*(($3 = $23) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$7 = ($1 + [56])
	*($3 + [52]) = $7
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [80])
	*($3 + [64]) = $16
	$17 = ($1 + [88])
	*($3 + [68]) = $17
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($3 + [4]) = $23
	*($3) = $23
	*($3 + [8]) = ($23 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $7
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $23, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.2))
	*($1 + [120]) = ((int_64)$22 + (int_64)*($1 + [120]))
	$5 = *($1 + [128])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$22)
	CALL eosio_assert([1], [176])
	*(($3 = $23) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$7 = ($1 + [56])
	*($3 + [52]) = $7
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [80])
	*($3 + [64]) = $16
	$17 = ($1 + [88])
	*($3 + [68]) = $17
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($3 + [4]) = $23
	*($3) = $23
	*($3 + [8]) = ($23 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $7
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $23, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	$22 = $23
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$5 = *($1 + [128])
	$17 = *($3 + [4])
	CALL prints([1120])
	*($1 + [72]) = (int_64)0
	*($1 + [112]) = (int_64)0
	*($1 + [104]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [120]) = (int_64)10000
	*($1 + [96]) = (int_64)0
	*($1 + [24]) = *(*($3))
	*($1) = *($17)
	*($1 + [8]) = *($1 + [16])
	*($1 + [16]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	$19 = *(*($3 + [8]))
	if ( ((int_64)$19 == (int_64)1) ){ goto $label$3 }
	$18 = (int_64)600
	if ( ((int_64)$19 == (int_64)2) ){ goto $label$2 }
	$19 = *($1 + [32])
	goto $label$1 
	
.LABEL $label$3
	$18 = (int_64)3600
	
.LABEL $label$2
	$19 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)$18) & (int_64)4294967295)
	*($1 + [32]) = $19
	
.LABEL $label$1
	$17 = ($1 + [64])
	$15 = ($1 + [56])
	$14 = ($1 + [8])
	$13 = ($1 + [16])
	$12 = ($1 + [24])
	$11 = ($1 + [96])
	$10 = ($1 + [120])
	$9 = ($1 + [88])
	$8 = ($1 + [104])
	$7 = ($1 + [72])
	$6 = ($1 + [112])
	$4 = ($1 + [128])
	*($1 + [40]) = $19
	$16 = ($1 + [40])
	$18 = *(*(($3 + [8])))
	if ( ((int_64)$18 == (int_64)1) ){ goto $label$6 }
	$20 = (int_64)7200
	if ( ((int_64)$18 == (int_64)2) ){ goto $label$5 }
	$21 = ($1 + [48])
	goto $label$4 
	
.LABEL $label$6
	$20 = (int_64)86400
	
.LABEL $label$5
	*($1 + [48]) = ((int_64)$20 + (int_64)$19)
	$21 = ($1 + [48])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [128]))), [176])
	$23 = $23
	$3 = ($23 + [-144])
	*([0] + [4]) = $3
	*($22 + [4]) = $3
	*($22) = $3
	*($22 + [8]) = $23
	*($22 + [16]) = $22
	*($22 + [28]) = $14
	*($22 + [24]) = $1
	*($22 + [32]) = $13
	*($22 + [36]) = $12
	*($22 + [40]) = ($1 + [32])
	*($22 + [44]) = $16
	*($22 + [48]) = $21
	*($22 + [52]) = $15
	*($22 + [56]) = $17
	*($22 + [60]) = $7
	*($22 + [64]) = ($1 + [80])
	*($22 + [68]) = $9
	*($22 + [72]) = $11
	*($22 + [76]) = $8
	*($22 + [80]) = $6
	*($22 + [84]) = $10
	*($22 + [88]) = $4
	*($22 + [92]) = ($1 + [136])
	CALL $7(($22 + [24]), ($22 + [16]))
	CALL db_update_i64(*($1 + [148]), $2, $3, [144])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$22 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.8) / (float_64)(CASTING float_64)(uint_32 *((*(($3 + [4])) + [32])))))
	*($1 + [120]) = ((int_64)$22 + (int_64)*($1 + [120]))
	$5 = *($1 + [128])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$22)
	CALL eosio_assert([1], [176])
	*(($3 = $23) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$7 = ($1 + [56])
	*($3 + [52]) = $7
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [80])
	*($3 + [64]) = $16
	$17 = ($1 + [88])
	*($3 + [68]) = $17
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($3 + [4]) = $23
	*($3) = $23
	*($3 + [8]) = ($23 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $7
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $23, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [96])
	$24 = $25
	*([0] + [4]) = $25
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$7 = ((int_64)*($1 + [120]) + (int_64)*(*(*($3) + [4]) + [72]))
	*($1 + [120]) = $7
	$5 = *($1 + [128])
	$9 = ((int_64)*($1 + [80]) + (int_64)*(*(*($3) + [4]) + [72]))
	*($1 + [80]) = $9
	$8 = ($1 + [80])
	$6 = ($1 + [120])
	$4 = ($1 + [128])
	if ( ((int_64)*(*($3 + [4])) != (int_64)2) ){ goto $label$1 }
	*($6) = ((int_64)*(*(*($3) + [4]) + [64]) + (int_64)$7)
	*($8) = ((int_64)*(*(*($3) + [4]) + [64]) + (int_64)$9)
	
.LABEL $label$1
	CALL eosio_assert([1], [176])
	*($24 + [16]) = [0]
	*($24) = ($24 + [16])
	*($24 + [24]) = $1
	$10 = ($1 + [8])
	*($24 + [28]) = $10
	$11 = ($1 + [16])
	*($24 + [32]) = $11
	$12 = ($1 + [24])
	*($24 + [36]) = $12
	$13 = ($1 + [32])
	*($24 + [40]) = $13
	$14 = ($1 + [40])
	*($24 + [44]) = $14
	$15 = ($1 + [48])
	*($24 + [48]) = $15
	$16 = ($1 + [56])
	*($24 + [52]) = $16
	$17 = ($1 + [64])
	*($24 + [56]) = $17
	$18 = ($1 + [72])
	*($24 + [60]) = $18
	*($24 + [64]) = $8
	$19 = ($1 + [88])
	*($24 + [68]) = $19
	$20 = ($1 + [96])
	*($24 + [72]) = $20
	$21 = ($1 + [108])
	*($24 + [76]) = $21
	$22 = ($1 + [112])
	*($24 + [80]) = $22
	*($24 + [84]) = $6
	*($24 + [88]) = $4
	CALL $28(($24 + [24]), $24)
	$23 = *($24 + [16])
	if ( ($23 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($23)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($25 - (($23 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($24 + [4]) = $3
	*($24) = $3
	*($24 + [8]) = ($3 + $23)
	*($24 + [16]) = $24
	*($24 + [28]) = $10
	*($24 + [32]) = $11
	*($24 + [36]) = $12
	*($24 + [40]) = $13
	*($24 + [44]) = $14
	*($24 + [48]) = $15
	*($24 + [24]) = $1
	*($24 + [52]) = $16
	*($24 + [56]) = $17
	*($24 + [60]) = $18
	*($24 + [64]) = $8
	*($24 + [68]) = $19
	*($24 + [72]) = $20
	*($24 + [76]) = $21
	*($24 + [80]) = $22
	*($24 + [84]) = $6
	*($24 + [88]) = $4
	CALL $29(($24 + [24]), ($24 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $3, $23)
	if ( ($23 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($24 + [96])
}

void .FUNC _ZN5eosio9TeamFight6settleEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [416])
	*([0] + [4]) = $21
	*($21 + [184]) = $1
	CALL require_auth(*($0))
	$2 = ($0 + [48])
	$20 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$20 = CALL $6($2, $10)
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$3 }
	$10 = [0]
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [148]), ($21 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $6($2, $20)
	goto $label$2 
	
.LABEL $label$3
	$10 = $20
	
.LABEL $label$2
	if ( ((uint_64)*($10 + [48]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$4 }
	CALL prints([960])
	CALL prints([976])
	CALL printui(*($21 + [184]))
	CALL prints([992])
	$20 = [0]
	$10 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$20 = CALL $6($2, $10)
	
.LABEL $label$5
	*($21 + [176]) = $2
	*($21 + [180]) = $20
	if ( ((int_64)*($21 + [184]) != (int_64)2) ){ goto $label$6 }
	$10 = [0]
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*(*($21 + [180]) + [148]), ($21 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $6(*($21 + [176]), $20)
	
.LABEL $label$7
	*($21 + [180]) = $10
	if ( ((int_64)*($21 + [184]) != (int_64)2) ){ goto $label$6 }
	$20 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$6 }
	$3 = ($0 + [8])
	$17 = CALL $53($3, $20)
	$13 = (($21 + [192]) + [8])
	$14 = (($21 + [192]) + [16])
	$19 = ($21 + [216])
	$15 = ($21 + [220])
	$18 = ($21 + [224])
	$8 = [0]
	
.LOOP $label$8:
	$1 = *($17)
	*($13) = $1
	*($14) = (int_64)-1
	$10 = [0]
	*($19) = [0]
	$16 = *($0)
	*($21 + [192]) = $16
	*($15) = [0]
	*($18) = [0]
	$20 = [0]
	$9 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$20 = CALL $23(($21 + [192]), $9)
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [140]), ($21 + [344]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$10
	$1 = *($10 + [32])
	$9 = *($19)
	if ( ($9 == 0) ){ goto $label$11 }
	$20 = *($15)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$15 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$16
	CALL $96($10)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$14 }
	$20 = *($19)
	goto $label$12 
	
.LABEL $label$13
	$20 = $9
	
.LABEL $label$12
	*($15) = $9
	CALL $96($20)
	
.LABEL $label$11
	if ( (int_64)($1 == 0) ){ goto $label$17 }
	$1 = *($17)
	*($13) = $1
	*($14) = (int_64)-1
	$10 = [0]
	*($19) = [0]
	$16 = *($0)
	*($21 + [192]) = $16
	*($15) = [0]
	*($18) = [0]
	$20 = [0]
	$9 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$18 }
	$20 = CALL $23(($21 + [192]), $9)
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [140]), ($21 + [344]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$19 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$19
	$1 = ((int_64)*($10 + [32]) + (int_64)(CASTING uint_64)(uint_32 $8))
	$9 = *($19)
	if ( ($9 == 0) ){ goto $label$20 }
	$20 = *($15)
	if ( ((int_32)$20 != (int_32)$9) ){ goto $label$22 }
	$20 = $9
	goto $label$21 
	
.LABEL $label$22
	
.LOOP $label$23:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$24 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$25
	CALL $96($10)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$23 }
	$20 = *($19)
	
.LABEL $label$21
	*($15) = $9
	CALL $96($20)
	
.LABEL $label$20
	$8 = (CASTING uint_32)(uint_64 $1)
	
.LABEL $label$17
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($17 + [12]), ($21 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$26 }
	$17 = CALL $53($3, $20)
	goto $label$8 
	
.LABEL $label$26
	if ( ((int_32)$8 <= (int_32)[0]) ){ goto $label$6 }
	$1 = CALL current_time()
	CALL prints([1008])
	CALL printi((CASTING int_64)(int_32 $8))
	CALL prints([1024])
	$13 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) % (uint_32)$8)
	CALL printui((CASTING uint_64)(uint_32 $13))
	CALL prints([992])
	$20 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$6 }
	$17 = CALL $53($3, $20)
	$14 = (($21 + [192]) + [8])
	$18 = (($21 + [192]) + [16])
	$19 = ($21 + [216])
	$15 = ($21 + [220])
	$8 = ($21 + [224])
	
.LOOP $label$27:
	$1 = *($17)
	*($14) = $1
	*($18) = (int_64)-1
	*($19) = [0]
	$16 = *($0)
	*($21 + [192]) = $16
	*($15) = [0]
	*($8) = [0]
	$20 = [0]
	$10 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$28 }
	$20 = CALL $23(($21 + [192]), $10)
	
.LABEL $label$28
	$10 = [0]
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [140]), ($21 + [344]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$29 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$29
	$1 = *($10 + [32])
	$9 = *($19)
	if ( ($9 == 0) ){ goto $label$30 }
	$20 = *($15)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$33:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$34 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$35 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$35
	CALL $96($10)
	
.LABEL $label$34
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$33 }
	$20 = *($19)
	goto $label$31 
	
.LABEL $label$32
	$20 = $9
	
.LABEL $label$31
	*($15) = $9
	CALL $96($20)
	
.LABEL $label$30
	if ( (int_64)($1 == 0) ){ goto $label$37 }
	$1 = *($17)
	*($14) = $1
	*($18) = (int_64)-1
	$10 = [0]
	*($19) = [0]
	$16 = *($0)
	*($21 + [192]) = $16
	*($15) = [0]
	*($8) = [0]
	$20 = [0]
	$9 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$38 }
	$20 = CALL $23(($21 + [192]), $9)
	
.LABEL $label$38
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [140]), ($21 + [344]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$39 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$39
	$13 = (CASTING uint_32)(uint_64 (int_64))((CASTING uint_64)(uint_32 $13) - *($10 + [32])))
	$9 = *($19)
	if ( ($9 == 0) ){ goto $label$40 }
	$20 = *($15)
	if ( ((int_32)$20 != (int_32)$9) ){ goto $label$42 }
	$20 = $9
	goto $label$41 
	
.LABEL $label$42
	
.LOOP $label$43:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$44 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$45 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$45
	CALL $96($10)
	
.LABEL $label$44
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$43 }
	$20 = *($19)
	
.LABEL $label$41
	*($15) = $9
	CALL $96($20)
	
.LABEL $label$40
	if ( ($13 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($17 + [12]), ($21 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$6 }
	$17 = CALL $53($3, $20)
	goto $label$27 
	
.LABEL $label$36
	$16 = *($0)
	$20 = *($21 + [180])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL eosio_assert(((int_32)*($20 + [144]) == (int_32)$2), [64])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [112])
	*($20 + [16]) = *($17)
	$1 = *($20 + [128])
	CALL eosio_assert([1], [176])
	*($21 + [136]) = (($21 + [192]) + [144])
	*($21 + [132]) = ($21 + [192])
	*($21 + [128]) = ($21 + [192])
	*($21 + [88]) = ($21 + [128])
	*($21 + [348]) = ($20 + [8])
	*($21 + [344]) = $20
	*($21 + [352]) = ($20 + [16])
	*($21 + [356]) = ($20 + [24])
	*($21 + [360]) = ($20 + [32])
	*($21 + [364]) = ($20 + [40])
	*($21 + [368]) = ($20 + [48])
	*($21 + [372]) = ($20 + [56])
	*($21 + [376]) = ($20 + [64])
	*($21 + [380]) = ($20 + [72])
	*($21 + [384]) = ($20 + [80])
	*($21 + [388]) = ($20 + [88])
	*($21 + [392]) = ($20 + [96])
	*($21 + [396]) = ($20 + [104])
	*($21 + [400]) = ($20 + [112])
	*($21 + [404]) = ($20 + [120])
	*($21 + [408]) = ($20 + [128])
	*($21 + [412]) = ($20 + [136])
	CALL $7(($21 + [344]), ($21 + [88]))
	CALL db_update_i64(*($20 + [148]), $16, ($21 + [192]), [144])
	$20 = ($0 + [64])
	if ( (uint_64)($1 <= *($20)) ){ goto $label$6 }
	*($20) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	if ( (CALL is_account(*(*($21 + [180]) + [16])) == 0) ){ goto $label$46 }
	$1 = *($0)
	*($21 + [192]) = $1
	$16 = *(*($21 + [180]) + [16])
	*($21 + [200]) = $16
	*($21 + [208]) = (int_64)-1
	$10 = [0]
	*($21 + [216]) = [0]
	*(($21 + [220])) = [0]
	*(($21 + [224])) = [0]
	$20 = CALL db_lowerbound_i64($1, $16, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$47 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$47
	if ( ((int_64)*($21 + [184]) != (int_64)2) ){ goto $label$49 }
	$20 = [0]
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [368])
	$10 = CALL db_next_i64(*($10 + [140]), ($21 + [344]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$48 }
	$20 = CALL $23(($21 + [192]), $10)
	goto $label$48 
	
.LABEL $label$49
	$20 = $10
	
.LABEL $label$48
	$1 = *($0)
	*($21 + [348]) = ($21 + [184])
	*($21 + [344]) = ($21 + [176])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $61(($21 + [192]), $20, $1, ($21 + [344]))
	$9 = *($21 + [216])
	if ( ($9 == 0) ){ goto $label$46 }
	$19 = ($21 + [220])
	$20 = *($19)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$51 }
	
.LOOP $label$52:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$53 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$54 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$54
	CALL $96($10)
	
.LABEL $label$53
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$52 }
	$20 = *(($21 + [216]))
	goto $label$50 
	
.LABEL $label$51
	$20 = $9
	
.LABEL $label$50
	*($19) = $9
	CALL $96($20)
	
.LABEL $label$46
	if ( ((int_64)*($21 + [184]) != (int_64)1) ){ goto $label$55 }
	$1 = *(*($21 + [180]) + [64])
	if ( (int_64)($1 == 0) ){ goto $label$55 }
	*($21 + [168]) = (uint_64)$1 >> (uint_64)(int_64)1)
	*((($21 + [128]) + [32])) = [0]
	*($21 + [144]) = (int_64)-1
	$1 = *($0)
	*($21 + [128]) = $1
	*($21 + [136]) = $1
	*($21 + [152]) = (int_64)0
	$20 = CALL db_lowerbound_i64($1, $1, (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$56 }
	CALL $36(($21 + [128]), $20)
	$10 = (($21 + [128]) + [8])
	$20 = CALL $62(($21 + [128]), *(CALL $36(($21 + [128]), CALL $fimport$7(*($21 + [128]), *($10), (int_64)-3851386921959817216, (int_64)0))), [1040])
	*($21 + [192]) = *($20)
	$17 = (($21 + [192]) + [8])
	CALL $102($17, ($20 + [8]))
	$14 = (($21 + [192]) + [20])
	CALL $102($14, ($20 + [20]))
	*((($21 + [192]) + [48])) = *(($20 + [48]))
	*(($19 = (($21 + [192]) + [40]))) = *(($20 + [40]))
	*($21 + [224]) = *($20 + [32])
	$20 = CALL $62(($21 + [128]), *(CALL $36(($21 + [128]), CALL $fimport$7(*($21 + [128]), *($10), (int_64)-3851386921959817216, (int_64)0))), [1040])
	*($21 + [344]) = *($20)
	$13 = (($21 + [344]) + [8])
	CALL $102($13, ($20 + [8]))
	$18 = (($21 + [344]) + [20])
	CALL $102($18, ($20 + [20]))
	*((($21 + [344]) + [48])) = *(($20 + [48]))
	*((($21 + [344]) + [40])) = *(($20 + [40]))
	*($21 + [376]) = *($20 + [32])
	$20 = CALL db_lowerbound_i64(*($21 + [128]), *($10), (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$57 }
	$9 = (($21 + [344]) + [32])
	$20 = CALL $36(($21 + [128]), $20)
	$15 = (($21 + [192]) + [32])
	$8 = ($15 + [16])
	
.LOOP $label$58:
	if ( ((uint_64)*($20 + [40]) <= (uint_64)*($19)) ){ goto $label$59 }
	*($21 + [192]) = *($20)
	CALL $98($17, ($20 + [8]))
	CALL $98($14, ($20 + [20]))
	*($8) = *(($20 + [48]))
	*(($15 + [8])) = *(($20 + [40]))
	*($15) = *($20 + [32])
	
.LABEL $label$59
	$10 = ($20 + [32])
	if ( ((uint_32)*($10) <= (uint_32)*((($21 + [344]) + [32]))) ){ goto $label$60 }
	*($21 + [344]) = *($20)
	CALL $98($13, ($20 + [8]))
	CALL $98($18, ($20 + [20]))
	*(($9 + [16])) = *(($10 + [16]))
	*(($9 + [8])) = *(($10 + [8]))
	*($9) = *($10)
	
.LABEL $label$60
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($20 + [60]), ($21 + [88]))
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$57 }
	$20 = CALL $36(($21 + [128]), $20)
	goto $label$58 
	
.LABEL $label$57
	*($21 + [104]) = (int_64)-1
	*($21 + [112]) = [0]
	$1 = *($21 + [192])
	$16 = *($0)
	*($21 + [88]) = $16
	*($21 + [96]) = $1
	*(($21 + [116])) = [0]
	*(($21 + [120])) = [0]
	$20 = [0]
	$10 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$61 }
	$20 = CALL $23(($21 + [88]), $10)
	
.LABEL $label$61
	$1 = *($0)
	*($21 + [48]) = ($21 + [168])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $63(($21 + [88]), $20, $1, ($21 + [48]))
	*(($21 + [104])) = (int_64)-1
	$1 = *($21 + [344])
	*(($21 + [96])) = $1
	$16 = *($0)
	*($21 + [88]) = $16
	$9 = *($21 + [112])
	if ( ($9 == 0) ){ goto $label$62 }
	$19 = ($21 + [116])
	$20 = *($19)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$64 }
	
.LOOP $label$65:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$66 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$67 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$67
	CALL $96($10)
	
.LABEL $label$66
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$65 }
	$20 = *(($21 + [112]))
	goto $label$63 
	
.LABEL $label$64
	$20 = $9
	
.LABEL $label$63
	*($19) = $9
	CALL $96($20)
	*(($21 + [120])) = [0]
	*(($21 + [112])) = (int_64)0
	$1 = *(($21 + [96]))
	$16 = *($21 + [88])
	
.LABEL $label$62
	*(($21 + [120])) = [0]
	*(($21 + [112])) = (int_64)0
	$20 = [0]
	$10 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$68 }
	$20 = CALL $23(($21 + [88]), $10)
	
.LABEL $label$68
	$1 = *($0)
	*($21 + [48]) = ($21 + [168])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $64(($21 + [88]), $20, $1, ($21 + [48]))
	$20 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$69 }
	$6 = ($13 + [1])
	$5 = ($17 + [1])
	$4 = ($0 + [8])
	$19 = CALL $53($4, $20)
	$15 = (($21 + [48]) + [8])
	$8 = (($21 + [48]) + [16])
	$17 = ($21 + [72])
	$13 = ($21 + [76])
	$3 = (($21 + [48]) + [32])
	$11 = (($21 + [192]) + [12])
	$12 = ($21 + [232])
	
.LOOP $label$70:
	$1 = *($19)
	*($15) = $1
	*($8) = (int_64)-1
	*($17) = [0]
	$16 = *($0)
	*($21 + [48]) = $16
	*($13) = [0]
	*($3) = [0]
	$20 = [0]
	$10 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$71 }
	$20 = CALL $23(($21 + [48]), $10)
	
.LABEL $label$71
	$10 = *($20 + [96])
	if ( ($10 & [1]) ){ goto $label$74 }
	if ( uint_32($10 >> [1]) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	if ( (*(($20 + [100])) == 0) ){ goto $label$72 }
	
.LABEL $label$73
	$9 = [0]
	$20 = CALL db_lowerbound_i64(*($21 + [48]), *($15), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$75 }
	$9 = CALL $23(($21 + [48]), $20)
	
.LABEL $label$75
	$20 = ($20 & [1])
	$20 = *((($21 + [192]) + [8]))
	$14 = ($20 & [1])
	$20 = *($9 + [96])
	$7 = uint_32($20 >> [1])
	$18 = ( *(($9 + [100])) ? $7 : $14 )
	if ( ((int_32)$18 != (int_32)( *($11) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$76 }
	$20 = ( *((($21 + [192]) + [16])) ? $5 : $20 )
	$10 = (($9 + [96]) + [1])
	if ( $14 ){ goto $label$79 }
	if ( ($18 == 0) ){ goto $label$78 }
	$9 = ([0] - $7)
	
.LOOP $label$80:
	if ( ((int_32)*($10) != (int_32)*($20)) ){ goto $label$76 }
	$20 = ($20 + [1])
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	if ( ($18 == 0) ){ goto $label$78 }
	if ( CALL memcmp(( *(($9 + [104])) ? $10 : $14 ), $20, $18) ){ goto $label$76 }
	if ( ((int_64)(*($12) == 0) == 0) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	if ( (int_64)(*($12) == 0) ){ goto $label$76 }
	
.LABEL $label$77
	if ( (int_64)(*(CALL $23(($21 + [48]), CALL $fimport$7(*($21 + [48]), *($15), (int_64)3607749778735104000, (int_64)0)) + [32]) == 0) ){ goto $label$76 }
	$20 = [0]
	$10 = CALL db_lowerbound_i64(*($21 + [48]), *($15), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$81 }
	$20 = CALL $23(($21 + [48]), $10)
	
.LABEL $label$81
	$1 = *($0)
	*((($21 + [32]) + [8])) = ($21 + [48])
	*($21 + [36]) = ($21 + [192])
	*($21 + [32]) = ($21 + [168])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $65(($21 + [48]), $20, $1, ($21 + [32]))
	
.LABEL $label$76
	$9 = [0]
	$20 = CALL db_lowerbound_i64(*($21 + [48]), *($15), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$82 }
	$9 = CALL $23(($21 + [48]), $20)
	
.LABEL $label$82
	$20 = ($20 & [1])
	$20 = *((($21 + [344]) + [8]))
	$14 = ($20 & [1])
	$20 = *($9 + [96])
	$7 = uint_32($20 >> [1])
	$18 = ( *(($9 + [100])) ? $7 : $14 )
	if ( ((int_32)$18 != (int_32)( *((($21 + [344]) + [12])) ? uint_32($20 >> [1]) : $20 )) ){ goto $label$72 }
	$20 = ( *((($21 + [344]) + [16])) ? $6 : $20 )
	$10 = (($9 + [96]) + [1])
	if ( $14 ){ goto $label$85 }
	if ( ($18 == 0) ){ goto $label$84 }
	$9 = ([0] - $7)
	
.LOOP $label$86:
	if ( ((int_32)*($10) != (int_32)*($20)) ){ goto $label$72 }
	$20 = ($20 + [1])
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	if ( ($18 == 0) ){ goto $label$84 }
	if ( CALL memcmp(( *(($9 + [104])) ? $10 : $14 ), $20, $18) ){ goto $label$72 }
	if ( ((uint_32)*((($21 + [344]) + [32])) > (uint_32)[1]) ){ goto $label$83 }
	goto $label$72 
	
.LABEL $label$84
	if ( (*((($21 + [344]) + [32])) <= [2]) ){ goto $label$72 }
	
.LABEL $label$83
	$20 = [0]
	$10 = CALL db_lowerbound_i64(*($21 + [48]), *($15), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$87 }
	$20 = CALL $23(($21 + [48]), $10)
	
.LABEL $label$87
	$1 = *($0)
	*($21 + [36]) = ($21 + [344])
	*($21 + [32]) = ($21 + [168])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $66(($21 + [48]), $20, $1, ($21 + [32]))
	
.LABEL $label$72
	$9 = *($17)
	if ( ($9 == 0) ){ goto $label$88 }
	$20 = *($13)
	if ( ((int_32)$20 != (int_32)$9) ){ goto $label$90 }
	$20 = $9
	goto $label$89 
	
.LABEL $label$90
	
.LOOP $label$91:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$92 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$93 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$93
	CALL $96($10)
	
.LABEL $label$92
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$91 }
	$20 = *($17)
	
.LABEL $label$89
	*($13) = $9
	CALL $96($20)
	
.LABEL $label$88
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($19 + [12]), ($21 + [48]))
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$69 }
	$19 = CALL $53($4, $20)
	goto $label$70 
	
.LABEL $label$69
	$9 = *($21 + [112])
	if ( ($9 == 0) ){ goto $label$94 }
	$19 = ($21 + [116])
	$20 = *($19)
	if ( ((int_32)$20 == (int_32)$9) ){ goto $label$96 }
	
.LOOP $label$97:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$98 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$99 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$99
	CALL $96($10)
	
.LABEL $label$98
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$97 }
	$20 = *(($21 + [112]))
	goto $label$95 
	
.LABEL $label$96
	$20 = $9
	
.LABEL $label$95
	*($19) = $9
	CALL $96($20)
	
.LABEL $label$94
	if ( ((*(($21 + [364])) & [1]) == 0) ){ goto $label$100 }
	CALL $96(*(($21 + [372])))
	
.LABEL $label$100
	if ( ((*(($21 + [352])) & [1]) == 0) ){ goto $label$101 }
	CALL $96(*(($21 + [360])))
	
.LABEL $label$101
	if ( ((*(($21 + [212])) & [1]) == 0) ){ goto $label$102 }
	CALL $96(*(($21 + [220])))
	
.LABEL $label$102
	if ( ((*(($21 + [200])) & [1]) == 0) ){ goto $label$56 }
	CALL $96(*(($21 + [208])))
	
.LABEL $label$56
	$9 = *($21 + [152])
	if ( ($9 == 0) ){ goto $label$55 }
	$19 = (($21 + [128]) + [28])
	$10 = *($19)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$104 }
	
.LOOP $label$105:
	$10 = ($10 + [-24])
	$20 = *($10)
	*($10) = [0]
	if ( ($20 == 0) ){ goto $label$106 }
	if ( ((*($20 + [20]) & [1]) == 0) ){ goto $label$107 }
	CALL $96(*(($20 + [28])))
	
.LABEL $label$107
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$108 }
	CALL $96(*(($20 + [16])))
	
.LABEL $label$108
	CALL $96($20)
	
.LABEL $label$106
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$105 }
	$20 = *(($21 + [152]))
	goto $label$103 
	
.LABEL $label$104
	$20 = $9
	
.LABEL $label$103
	*($19) = $9
	CALL $96($20)
	
.LABEL $label$55
	$20 = *($21 + [180])
	*($21 + [128]) = *($20 + [56])
	$1 = *($0)
	*($21 + [196]) = $0
	*($21 + [192]) = ($21 + [128])
	*($21 + [200]) = ($21 + [184])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $67($2, $20, $1, ($21 + [192]))
	$20 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4455936897818034176, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$109 }
	$8 = ($0 + [8])
	$19 = CALL $53($8, $20)
	$13 = (($21 + [192]) + [8])
	$14 = (($21 + [192]) + [16])
	$15 = ($21 + [216])
	$17 = ($21 + [220])
	$18 = ($21 + [224])
	
.LOOP $label$110:
	$1 = *($19)
	*($13) = $1
	*($14) = (int_64)-1
	$10 = [0]
	*($15) = [0]
	$16 = *($0)
	*($21 + [192]) = $16
	*($17) = [0]
	*($18) = [0]
	$20 = CALL db_lowerbound_i64($16, $1, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$111 }
	$10 = CALL $23(($21 + [192]), $20)
	
.LABEL $label$111
	if ( ((int_64)*($21 + [184]) != (int_64)2) ){ goto $label$113 }
	$20 = [0]
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [368])
	$10 = CALL db_next_i64(*($10 + [140]), ($21 + [344]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$112 }
	$20 = CALL $23(($21 + [192]), $10)
	goto $label$112 
	
.LABEL $label$113
	$20 = $10
	
.LABEL $label$112
	$1 = *($0)
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [16])
	CALL $68(($21 + [192]), $20, $1)
	$9 = *($15)
	if ( ($9 == 0) ){ goto $label$114 }
	$20 = *($17)
	if ( ((int_32)$20 != (int_32)$9) ){ goto $label$116 }
	$20 = $9
	goto $label$115 
	
.LABEL $label$116
	
.LOOP $label$117:
	$20 = ($20 + [-24])
	$10 = *($20)
	*($20) = [0]
	if ( ($10 == 0) ){ goto $label$118 }
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$119 }
	CALL $96(*(($10 + [104])))
	
.LABEL $label$119
	CALL $96($10)
	
.LABEL $label$118
	if ( ((int_32)$9 != (int_32)$20) ){ goto $label$117 }
	$20 = *($15)
	
.LABEL $label$115
	*($17) = $9
	CALL $96($20)
	
.LABEL $label$114
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($19 + [12]), ($21 + [192]))
	if ( ((int_32)$20 <= (int_32)[-1]) ){ goto $label$109 }
	$19 = CALL $53($8, $20)
	goto $label$110 
	
.LABEL $label$109
	if ( ((int_64)*($21 + [184]) != (int_64)1) ){ goto $label$120 }
	*(($21 + [224])) = [0]
	*($21 + [208]) = (int_64)-1
	$1 = *($0)
	*($21 + [192]) = $1
	*($21 + [200]) = $1
	*($21 + [216]) = (int_64)0
	$20 = CALL db_lowerbound_i64($1, $1, (int_64)-3851386921959817216, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$121 }
	$20 = CALL $36(($21 + [192]), $20)
	CALL $69(($21 + [192]), $20, *($0))
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($20 + [60]), ($21 + [344]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$121 }
	
.LOOP $label$122:
	$20 = CALL $36(($21 + [192]), $20)
	CALL $69(($21 + [192]), $20, *($0))
	CALL eosio_assert([1], [368])
	$20 = CALL db_next_i64(*($20 + [60]), ($21 + [344]))
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$122 }
	
.LABEL $label$121
	$9 = *($21 + [216])
	if ( ($9 == 0) ){ goto $label$120 }
	$19 = (($21 + [192]) + [28])
	$10 = *($19)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$124 }
	
.LOOP $label$125:
	$10 = ($10 + [-24])
	$20 = *($10)
	*($10) = [0]
	if ( ($20 == 0) ){ goto $label$126 }
	if ( ((*($20 + [20]) & [1]) == 0) ){ goto $label$127 }
	CALL $96(*(($20 + [28])))
	
.LABEL $label$127
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$128 }
	CALL $96(*(($20 + [16])))
	
.LABEL $label$128
	CALL $96($20)
	
.LABEL $label$126
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$125 }
	$20 = *(($21 + [216]))
	goto $label$123 
	
.LABEL $label$124
	$20 = $9
	
.LABEL $label$123
	*($19) = $9
	CALL $96($20)
	
.LABEL $label$120
	CALL prints([1072])
	$1 = *($0)
	$16 = *($21 + [184])
	if ( ((int_64)$16 != (int_64)1) ){ goto $label$137 }
	*(($21 + [24])) = [0]
	*($21 + [16]) = (int_64)0
	$20 = CALL strlen([240])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$130 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$136 }
	*($21 + [16]) = ($20 << [1])
	$10 = (($21 + [16]) | [1])
	if ( $20 ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	*(($21 + [8])) = [0]
	*($21) = (int_64)0
	$20 = CALL strlen([352])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$129 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$133 }
	*($21) = ($20 << [1])
	$10 = ($21 | [1])
	if ( $20 ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$136
	$9 = (($20 + [16]) & [-16])
	$10 = CALL $95($9)
	*($21 + [16]) = ($9 | [1])
	*($21 + [24]) = $10
	*($21 + [20]) = $20
	
.LABEL $label$135
	CALL memcpy($10, [240], $20)
	
.LABEL $label$134
	*(($10 + $20)) = [0]
	CALL $8($0, $1, (int_64)1, ($21 + [16]), (int_64))(*(CALL $6($2, CALL $fimport$7(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)) + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($21 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $96(*($21 + [24]))
	goto $label$4 
	
.LABEL $label$133
	$9 = (($20 + [16]) & [-16])
	$10 = CALL $95($9)
	*($21) = ($9 | [1])
	*($21 + [8]) = $10
	*($21 + [4]) = $20
	
.LABEL $label$132
	CALL memcpy($10, [352], $20)
	
.LABEL $label$131
	$9 = [0]
	*(($10 + $20)) = [0]
	$20 = [0]
	$10 = CALL db_lowerbound_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$138 }
	$20 = CALL $6($2, $10)
	
.LABEL $label$138
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [368])
	$20 = CALL db_next_i64(*($20 + [148]), ($21 + [192]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$139 }
	$9 = CALL $6($2, $20)
	
.LABEL $label$139
	CALL $8($0, $1, $16, $21, (int_64))(*($9 + [48]) - ((int_64)((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	if ( ((*($21) & [1]) == 0) ){ goto $label$4 }
	CALL $96(*($21 + [8]))
	goto $label$4 
	
.LABEL $label$130
	CALL $97(($21 + [16]))
	
.LABEL $label$129
	CALL $97($21)
	
.LABEL $label$4
	CALL prints([1104])
	*([0] + [4]) = ($21 + [416])
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.2))
	*($1 + [120]) = ((int_64)$22 + (int_64)*($1 + [120]))
	$5 = *($1 + [128])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)$22)
	CALL eosio_assert([1], [176])
	*(($3 = $23) + [16]) = [0]
	*($3) = ($3 + [16])
	$8 = ($1 + [8])
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$7 = ($1 + [56])
	*($3 + [52]) = $7
	$14 = ($1 + [64])
	*($3 + [56]) = $14
	$15 = ($1 + [72])
	*($3 + [60]) = $15
	$16 = ($1 + [80])
	*($3 + [64]) = $16
	$17 = ($1 + [88])
	*($3 + [68]) = $17
	$18 = ($1 + [96])
	*($3 + [72]) = $18
	$19 = ($1 + [108])
	*($3 + [76]) = $19
	$20 = ($1 + [112])
	*($3 + [80]) = $20
	$6 = ($1 + [120])
	*($3 + [84]) = $6
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$23 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$23 = ($23 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $23
	
.LABEL $label$1
	*($3 + [4]) = $23
	*($3) = $23
	*($3 + [8]) = ($23 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $7
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $6
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $23, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($23)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [1136])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3851386921959817216, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $36($0, $5)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [1136])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $95(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $96($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $95($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $105 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [240])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [560])
	*(($4 = CALL $95([160])) + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL current_time()
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [40]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [48]) = ((int_64)*($4 + [32]) + (int_64)86400)
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)10000
	*($4 + [136]) = (int_64)1000000
	*($4 + [144]) = $1
	*($4 + [128]) = (int_64)1
	*($4) = *(*($3))
	*($4 + [16]) = (int_64)0
	*($8 + [152]) = ($8 + [144])
	*($8 + [148]) = $8
	*($8 + [144]) = $8
	*($8 + [160]) = ($8 + [144])
	*($8 + [172]) = ($4 + [8])
	*($8 + [168]) = $4
	*($8 + [176]) = ($4 + [16])
	*($8 + [180]) = ($4 + [24])
	*($8 + [184]) = ($4 + [32])
	*($8 + [188]) = ($4 + [40])
	*($8 + [192]) = ($4 + [48])
	*($8 + [196]) = ($4 + [56])
	*($8 + [200]) = ($4 + [64])
	*($8 + [204]) = ($4 + [72])
	*($8 + [208]) = ($4 + [80])
	*($8 + [212]) = ($4 + [88])
	*($8 + [216]) = ($4 + [96])
	*($8 + [220]) = ($4 + [104])
	*($8 + [224]) = ($4 + [112])
	*($8 + [228]) = ($4 + [120])
	$3 = ($4 + [128])
	*($8 + [232]) = $3
	*($8 + [236]) = ($4 + [136])
	CALL $7(($8 + [168]), ($8 + [160]))
	$5 = *($4 + [128])
	*($4 + [148]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, $2, $5, $8, [144])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [168]) = $4
	$5 = *($3)
	*($8) = $5
	$6 = *($4 + [148])
	*($8 + [144]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [168]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $20(($1 + [24]), ($8 + [168]), $8, ($8 + [144]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $96($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [240])
}

int_32 .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*($4 + [24]) = $1
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	$2 = ($0 + [48])
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($2, $3)
	goto $label$1 
	
.LABEL $label$2
	CALL prints([1344])
	*($4 + [16]) = ($4 + [24])
	CALL $89(($4 + [8]), $2, $1, ($4 + [16]))
	$1 = *($4 + [24])
	*($4 + [16]) = ($4 + [24])
	CALL $90(($4 + [8]), $2, $1, ($4 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL _ZN5eosio9TeamFight5applyEyy(CALL $88(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $102(($5 + [16]), ($1 + [8]))
	CALL $102($5, ($1 + [20]))
	$3 = *($1 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $102(($5 + [48]), ($5 + [16]))
	CALL $102(($5 + [32]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [48])), (int_32 ($5 + [32])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $96(*($5 + [40]))
	
.LABEL $label$2
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $96(*($5 + [56]))
	
.LABEL $label$3
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	CALL $96(*($5 + [8]))
	
.LABEL $label$4
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $96(*($5 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $102($5, ($1 + [8]))
	$3 = *($1 + [24])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $102(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 $3), (int_64 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $96(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $96(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [336])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [336])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [336])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [336])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	$22 = *($0 + [4])
	*($1 + [128]) = (int_64)1
	*($1) = *(*($22))
	$2 = *($0)
	*($1 + [16]) = *(*($22) + [16])
	*(($22 = $21) + [16]) = [0]
	*($22) = ($22 + [16])
	$5 = ($1 + [8])
	*($22 + [28]) = $5
	*($22 + [24]) = $1
	$4 = ($1 + [16])
	*($22 + [32]) = $4
	$6 = ($1 + [24])
	*($22 + [36]) = $6
	$7 = ($1 + [32])
	*($22 + [40]) = $7
	$8 = ($1 + [40])
	*($22 + [44]) = $8
	$9 = ($1 + [48])
	*($22 + [48]) = $9
	$10 = ($1 + [56])
	*($22 + [52]) = $10
	$11 = ($1 + [64])
	*($22 + [56]) = $11
	$12 = ($1 + [72])
	*($22 + [60]) = $12
	$13 = ($1 + [80])
	*($22 + [64]) = $13
	$14 = ($1 + [88])
	*($22 + [68]) = $14
	$15 = ($1 + [96])
	*($22 + [72]) = $15
	$16 = ($1 + [108])
	*($22 + [76]) = $16
	$17 = ($1 + [112])
	*($22 + [80]) = $17
	$18 = ($1 + [120])
	*($22 + [84]) = $18
	$3 = ($1 + [128])
	*($22 + [88]) = $3
	CALL $28(($22 + [24]), $22)
	$19 = *($22 + [16])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($19)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $19)
	*($22 + [16]) = $22
	*($22 + [28]) = $5
	*($22 + [24]) = $1
	*($22 + [32]) = $4
	*($22 + [36]) = $6
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $18
	*($22 + [88]) = $3
	CALL $29(($22 + [24]), ($22 + [16]))
	$20 = *(($1 + [128]))
	*($1 + [140]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $20, $21, $19)
	if ( ($19 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($20 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($22 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$21 = (*([0] + [4]) - [96])
	*([0] + [4]) = $21
	$22 = *($0 + [4])
	*($1 + [128]) = (int_64)2
	*($1) = *(*($22))
	$2 = *($0)
	*(($22 = $21) + [16]) = [0]
	*($22) = ($22 + [16])
	$4 = ($1 + [8])
	*($22 + [28]) = $4
	*($22 + [24]) = $1
	$5 = ($1 + [16])
	*($22 + [32]) = $5
	$6 = ($1 + [24])
	*($22 + [36]) = $6
	$7 = ($1 + [32])
	*($22 + [40]) = $7
	$8 = ($1 + [40])
	*($22 + [44]) = $8
	$9 = ($1 + [48])
	*($22 + [48]) = $9
	$10 = ($1 + [56])
	*($22 + [52]) = $10
	$11 = ($1 + [64])
	*($22 + [56]) = $11
	$12 = ($1 + [72])
	*($22 + [60]) = $12
	$13 = ($1 + [80])
	*($22 + [64]) = $13
	$14 = ($1 + [88])
	*($22 + [68]) = $14
	$15 = ($1 + [96])
	*($22 + [72]) = $15
	$16 = ($1 + [108])
	*($22 + [76]) = $16
	$17 = ($1 + [112])
	*($22 + [80]) = $17
	$18 = ($1 + [120])
	*($22 + [84]) = $18
	$3 = ($1 + [128])
	*($22 + [88]) = $3
	CALL $28(($22 + [24]), $22)
	$19 = *($22 + [16])
	if ( ($19 <= [513]) ){ goto $label$2 }
	$21 = CALL malloc($19)
	goto $label$1 
	
.LABEL $label$2
	$21 = ($21 - (($19 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$1
	*($22 + [4]) = $21
	*($22) = $21
	*($22 + [8]) = ($21 + $19)
	*($22 + [16]) = $22
	*($22 + [28]) = $4
	*($22 + [24]) = $1
	*($22 + [32]) = $5
	*($22 + [36]) = $6
	*($22 + [40]) = $7
	*($22 + [44]) = $8
	*($22 + [48]) = $9
	*($22 + [52]) = $10
	*($22 + [56]) = $11
	*($22 + [60]) = $12
	*($22 + [64]) = $13
	*($22 + [68]) = $14
	*($22 + [72]) = $15
	*($22 + [76]) = $16
	*($22 + [80]) = $17
	*($22 + [84]) = $18
	*($22 + [88]) = $3
	CALL $29(($22 + [24]), ($22 + [16]))
	$20 = *(($1 + [128]))
	*($1 + [140]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $20, $21, $19)
	if ( ($19 <= [513]) ){ goto $label$3 }
	CALL free($21)
	
.LABEL $label$3
	if ( (uint_64)($20 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($22 + [96])
}

void .FUNC _ZN5eosio9TeamFight2onERKNS_8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$4 = *($0)
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)$4) ){ goto $label$3 }
	$8 = [0]
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	*($9 + [24]) = $3
	*($9 + [16]) = $4
	*($9 + [40]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $3, (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	CALL $23(($9 + [16]), $5)
	$5 = CALL db_lowerbound_i64(*($9 + [16]), *(($9 + [24])), (int_64)3607749778735104000, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $23(($9 + [16]), $5)
	
.LABEL $label$6
	$4 = *($0)
	*($9 + [64]) = $1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [16])
	CALL $71(($9 + [16]), $8, $4, ($9 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$3 = *($0)
	*($9 + [8]) = $1
	*($9 + [80]) = $3
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$3()), [560])
	*($9 + [68]) = ($9 + [8])
	*($9 + [64]) = ($9 + [16])
	*($9 + [72]) = ($9 + [80])
	*(($8 = CALL $95([152])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*(($8 + [104])) = [0]
	*($8 + [96 align=4]) = (int_64)0
	$5 = CALL strlen([496])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$9 }
	*(($8 + [96])) = ($5 << [1])
	$7 = ($8 + [97])
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$6 = (($5 + [16]) & [-16])
	$7 = CALL $95($6)
	*(($8 + [96])) = ($6 | [1])
	*($8 + [104]) = $7
	*($8 + [100]) = $5
	
.LABEL $label$8
	CALL memcpy($7, [496], $5)
	
.LABEL $label$7
	*(($7 + $5)) = [0]
	*($8 + [112]) = (int_64)0
	*($8 + [108]) = [0]
	*($8 + [120]) = (int_64)0
	*($8 + [128]) = (int_64)1
	*($8 + [136]) = ($9 + [16])
	CALL $72(($9 + [64]), $8)
	*($9 + [88]) = $8
	$4 = *($8 + [128])
	*($9 + [64]) = $4
	$7 = *($8 + [140])
	*($9 + [60]) = $7
	$6 = ($9 + [44])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($9 + [48]))) ){ goto $label$11 }
	*($5 + [8]) = $4
	*($5 + [16]) = $7
	*($9 + [88]) = [0]
	*($5) = $8
	*($6) = ($5 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $31(($9 + [40]), ($9 + [88]), ($9 + [64]), ($9 + [60]))
	
.LABEL $label$10
	$8 = *($9 + [88])
	*($9 + [88]) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$13 }
	CALL $96(*(($8 + [104])))
	
.LABEL $label$13
	CALL $96($8)
	
.LABEL $label$12
	$4 = *($0)
	*($9 + [8]) = $1
	*($9 + [80]) = $4
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)CALL $fimport$3()), [560])
	*($9 + [68]) = ($9 + [8])
	*($9 + [64]) = ($9 + [16])
	*($9 + [72]) = ($9 + [80])
	*(($8 = CALL $95([152])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*(($8 + [104])) = [0]
	*($8 + [96 align=4]) = (int_64)0
	$5 = CALL strlen([496])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$16 }
	*(($8 + [96])) = ($5 << [1])
	$7 = ($8 + [97])
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($5 + [16]) & [-16])
	$7 = CALL $95($6)
	*(($8 + [96])) = ($6 | [1])
	*($8 + [104]) = $7
	*($8 + [100]) = $5
	
.LABEL $label$15
	CALL memcpy($7, [496], $5)
	
.LABEL $label$14
	*(($7 + $5)) = [0]
	*($8 + [112]) = (int_64)0
	*($8 + [108]) = [0]
	*($8 + [120]) = (int_64)0
	*($8 + [128]) = (int_64)1
	*($8 + [136]) = ($9 + [16])
	CALL $73(($9 + [64]), $8)
	*($9 + [88]) = $8
	$4 = *($8 + [128])
	*($9 + [64]) = $4
	$7 = *($8 + [140])
	*($9 + [60]) = $7
	$6 = ($9 + [44])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($9 + [48]))) ){ goto $label$18 }
	*($5 + [8]) = $4
	*($5 + [16]) = $7
	*($9 + [88]) = [0]
	*($5) = $8
	*($6) = ($5 + [24])
	goto $label$17 
	
.LABEL $label$18
	CALL $31(($9 + [40]), ($9 + [88]), ($9 + [64]), ($9 + [60]))
	
.LABEL $label$17
	$8 = *($9 + [88])
	*($9 + [88]) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$20 }
	CALL $96(*(($8 + [104])))
	
.LABEL $label$20
	CALL $96($8)
	
.LABEL $label$19
	$3 = *($0)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$3()), [560])
	*(($8 = CALL $95([24])) + [8]) = ($0 + [8])
	*($8) = *($1)
	CALL eosio_assert([1], [288])
	CALL memcpy(($9 + [64]), $8, [8])
	$4 = *($8)
	$7 = CALL db_store_i64(*(($0 + [16])), (int_64)-4455936897818034176, $3, $4, ($9 + [64]), [8])
	*($8 + [12]) = $7
	$5 = ($0 + [24])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$21 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($9 + [80]) = $8
	$4 = *($8)
	*($9 + [64]) = $4
	*($9 + [88]) = $7
	$6 = ($0 + [36])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$23 }
	*($5 + [8]) = $4
	*($5 + [16]) = $7
	*($9 + [80]) = [0]
	*($5) = $8
	*($6) = ($5 + [24])
	goto $label$22 
	
.LABEL $label$23
	CALL $56(($0 + [32]), ($9 + [80]), ($9 + [64]), ($9 + [88]))
	
.LABEL $label$22
	$8 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($8 == 0) ){ goto $label$4 }
	CALL $96($8)
	
.LABEL $label$4
	$4 = *($1 + [8])
	$3 = *($1)
	CALL prints([1200])
	CALL printn($3)
	CALL prints([1216])
	CALL printn($4)
	CALL prints([1232])
	$1 = *($9 + [40])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($9 + [44])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$25 }
	
.LOOP $label$26:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$27 }
	if ( ((*($0 + [96]) & [1]) == 0) ){ goto $label$28 }
	CALL $96(*(($0 + [104])))
	
.LABEL $label$28
	CALL $96($0)
	
.LABEL $label$27
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$26 }
	$8 = *(($9 + [40]))
	goto $label$24 
	
.LABEL $label$25
	$8 = $1
	
.LABEL $label$24
	*($5) = $1
	CALL $96($8)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $97(($8 + [96]))
	
.LABEL $label$1
	CALL $97(($8 + [96]))
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*((*($3) + [16])))
	$5 = *($1 + [128])
	CALL eosio_assert([1], [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$6 = ($1 + [16])
	*($3 + [32]) = $6
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [32])
	*($3 + [40]) = $9
	$10 = ($1 + [40])
	*($3 + [44]) = $10
	$11 = ($1 + [48])
	*($3 + [48]) = $11
	$12 = ($1 + [56])
	*($3 + [52]) = $12
	$13 = ($1 + [64])
	*($3 + [56]) = $13
	$14 = ($1 + [72])
	*($3 + [60]) = $14
	$15 = ($1 + [80])
	*($3 + [64]) = $15
	$16 = ($1 + [88])
	*($3 + [68]) = $16
	$17 = ($1 + [96])
	*($3 + [72]) = $17
	$18 = ($1 + [108])
	*($3 + [76]) = $18
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $6
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [24]) = $1
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [32])) = (int_64)1397703940
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [1248])
	$7 = (int_64)5459781
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [1312])
	*($10 + [40]) = (int_64)0
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $85(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [32]))
	$7 = *($10 + [16])
	*($10 + [48]) = *($10 + [24])
	$4 = *(($10 + [40]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $7), (int_64 $10), (int_32 $4), (int_64 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [72]) = ($1 + $0)
	*($2 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [336])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [68]) = ($1 + [8])
	CALL $33(($2 + [64]), (($2 + [8]) + [8]))
	CALL $33(($2 + [64]), ($2 + [28]))
	CALL eosio_assert(((uint_32)(*($2 + [72]) - *($2 + [68])) > (uint_32)[7]), [336])
	CALL memcpy(($2 + [40]), *($2 + [68]), [8])
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $84(($2 + [64]), ($2 + [8]))
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $96(*(($2 + [36])))
	
.LABEL $label$6
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $96(*(($2 + [24])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC _ZN5eosio9TeamFight5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [448]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $75(($9 + [128]))
	CALL _ZN5eosio9TeamFight2onERKNS_8currency8transferEy($0, ($9 + [128]), $6)
	if ( ((*($9 + [160]) & [1]) == 0) ){ goto $label$7 }
	CALL $96(*(($9 + [168])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-3851378324190265345) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-9026201598807769088) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4994301883677933568) ){ goto $label$7 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [1]
	*($9 + [56 align=4]) = *($9 + [64])
	CALL $82($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)5377982950824476671) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-3851378324190265344) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [2]
	*($9) = *($9 + [120])
	CALL $76($0, $9)
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3851382123293671424) ){ goto $label$7 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [3]
	*($9 + [8 align=4]) = *($9 + [112])
	CALL $77($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)5377982950824476672) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)8428183958969122816) ){ goto $label$7 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [4]
	*($9 + [40 align=4]) = *($9 + [80])
	CALL $81($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [100]) = [0]
	*($9 + [96]) = [5]
	*($9 + [24 align=4]) = *($9 + [96])
	CALL $79($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [108]) = [0]
	*($9 + [104]) = [6]
	*($9 + [16 align=4]) = *($9 + [104])
	CALL $78($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [92]) = [0]
	*($9 + [88]) = [7]
	*($9 + [32 align=4]) = *($9 + [88])
	CALL $80($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [76]) = [0]
	*($9 + [72]) = [8]
	*($9 + [48 align=4]) = *($9 + [72])
	CALL $82($0, ($9 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [176])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [96])
	*([0] + [4]) = $22
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [64])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [112])
	$5 = *($1 + [128])
	$6 = ($1 + [96])
	CALL $98($6, *($3))
	*($1 + [108]) = [1]
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)-1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [128])), [176])
	*(($3 = $22) + [16]) = [0]
	*($3) = ($3 + [16])
	$9 = ($1 + [8])
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [32])
	*($3 + [40]) = $11
	$12 = ($1 + [40])
	*($3 + [44]) = $12
	$13 = ($1 + [48])
	*($3 + [48]) = $13
	$14 = ($1 + [56])
	*($3 + [52]) = $14
	$15 = ($1 + [64])
	*($3 + [56]) = $15
	$16 = ($1 + [72])
	*($3 + [60]) = $16
	$17 = ($1 + [80])
	*($3 + [64]) = $17
	$18 = ($1 + [88])
	*($3 + [68]) = $18
	*($3 + [72]) = $6
	$7 = ($1 + [108])
	*($3 + [76]) = $7
	$19 = ($1 + [112])
	*($3 + [80]) = $19
	$20 = ($1 + [120])
	*($3 + [84]) = $20
	$4 = ($1 + [128])
	*($3 + [88]) = $4
	CALL $28(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$22 = CALL malloc($21)
	goto $label$1 
	
.LABEL $label$2
	$22 = ($22 - (($21 + [15]) & [-16]))
	*([0] + [4]) = $22
	
.LABEL $label$1
	*($3 + [4]) = $22
	*($3) = $22
	*($3 + [8]) = ($22 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [32]) = $8
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [24]) = $1
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	*($3 + [72]) = $6
	*($3 + [76]) = $7
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $4
	CALL $29(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [140]), $2, $22, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL free($22)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [96])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $95([72])
	$6 = CALL $42($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [60])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL $96(*(($4 + [28])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $96(*(($4 + [16])))
	
.LABEL $label$11
	CALL $96($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$11 = *($0 + [4])
	*($1) = *(*($11))
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $98($3, *($11 + [4]))
	$4 = ($1 + [20])
	CALL $98($4, *($11 + [8]))
	$11 = *($11 + [12])
	*($1 + [40]) = *(CALL $23($11, CALL $fimport$7(*($11), *($11 + [8]), (int_64)3607749778735104000, (int_64)0)) + [32])
	*(($11 = $10) + [16]) = [0]
	*($11) = ($11 + [16])
	*($11 + [28]) = $3
	*($11 + [24]) = $1
	*($11 + [32]) = $4
	$6 = ($1 + [32])
	*($11 + [36]) = $6
	$5 = ($1 + [40])
	*($11 + [40]) = $5
	$7 = ($1 + [48])
	*($11 + [44]) = $7
	CALL $40(($11 + [24]), $11)
	$8 = *($11 + [16])
	if ( ($8 <= [513]) ){ goto $label$2 }
	$10 = CALL malloc($8)
	goto $label$1 
	
.LABEL $label$2
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$1
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $8)
	*($11 + [16]) = $11
	*($11 + [28]) = $3
	*($11 + [24]) = $1
	*($11 + [32]) = $4
	*($11 + [36]) = $6
	*($11 + [40]) = $5
	*($11 + [44]) = $7
	CALL $41(($11 + [24]), ($11 + [16]))
	$9 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-3851386921959817216, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$3 }
	CALL free($10)
	
.LABEL $label$3
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [336])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $33(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [336])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $83(($2 + [48]), $2)
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $96(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [336])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [336])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [4])
	CALL eosio_assert(((uint_32)($1 + [-12]) > (uint_32)[7]), [336])
	$5 = ($8 + [24])
	CALL memcpy($5, ($6 + [12]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$6 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $6), (int_32 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $33(*($1), *($0 + [48]))
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [336])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [64])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $100($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $95($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $100($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $96($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $97($7)
	return (unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [96 align=4]) = (int_64)0
	$14 = ($0 + [96])
	$15 = CALL strlen([496])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$1 }
	$13 = ($0 + [88])
	$12 = ($0 + [80])
	$11 = ($0 + [72])
	$10 = ($0 + [64])
	$9 = ($0 + [56])
	$8 = ($0 + [48])
	$7 = ($0 + [40])
	$6 = ($0 + [32])
	$5 = ($0 + [24])
	$4 = ($0 + [16])
	$3 = ($0 + [8])
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$4 }
	*($14) = ($15 << [1])
	$17 = ($14 + [1])
	if ( $15 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$16 = (($15 + [16]) & [-16])
	$17 = CALL $95($16)
	*(($0 + [96])) = ($16 | [1])
	*(($0 + [104])) = $17
	*(($0 + [100])) = $15
	
.LABEL $label$3
	CALL memcpy($17, [496], $15)
	
.LABEL $label$2
	*(($17 + $15)) = [0]
	*($0 + [112]) = (int_64)0
	*($0 + [108]) = [0]
	*($0 + [120]) = (int_64)0
	*($0 + [128]) = (int_64)1
	*($0 + [136]) = $1
	*($18) = *($2 + [4])
	*($18 + [12]) = $3
	*($18 + [8]) = $0
	*($18 + [16]) = $4
	*($18 + [20]) = $5
	*($18 + [24]) = $6
	*($18 + [28]) = $7
	*($18 + [32]) = $8
	*($18 + [36]) = $9
	*($18 + [40]) = $10
	*($18 + [44]) = $11
	*($18 + [48]) = $12
	*($18 + [52]) = $13
	*($18 + [56]) = $14
	*($18 + [60]) = ($0 + [108])
	*($18 + [64]) = ($0 + [112])
	*($18 + [68]) = ($0 + [120])
	*($18 + [72]) = ($0 + [128])
	CALL $32(($18 + [8]), $18)
	*($0 + [140]) = *(*($2 + [8]))
	*([0] + [4]) = ($18 + [80])
	return $0
	
.LABEL $label$1
	CALL $97($14)
	return (unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $95(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL $96(*(($1 + [104])))
	
.LABEL $label$11
	CALL $96($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $96($6)
	
.LABEL $label$12
	(unreachable)
}