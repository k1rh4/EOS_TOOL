(data (i32.const 4) "\f0\85\00\00")
(data (i32.const 16) "funddeposit\00")
(data (i32.const 32) "\e6\8a\b5\e6\8a\bc\e9\a2\9d\e5\ba\a6\e4\b8\8d\e8\83\bd\e4\bd\8e\e4\ba\8e\00")
(data (i32.const 64) "\e4\b8\aaVVV\00")
(data (i32.const 80) "xteameos1111\00")
(data (i32.const 96) "active\00")
(data (i32.const 112) "iindadaofund\00")
(data (i32.const 128) "fund deposit\00")
(data (i32.const 144) "cannot create objects in table of another contract\00")
(data (i32.const 208) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 272) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 336) "cannot pass end iterator to modify\00")
(data (i32.const 384) "object passed to modify is not in multi_index\00")
(data (i32.const 432) "cannot modify objects in table of another contract\00")
(data (i32.const 496) "attempt to add asset with different symbol\00")
(data (i32.const 544) "addition underflow\00")
(data (i32.const 576) "addition overflow\00")
(data (i32.const 608) "updater cannot change primary key when modifying an object\00")
(data (i32.const 672) "write\00")
(data (i32.const 688) "invalid symbol name\00")
(data (i32.const 720) "\e6\8a\b5\e6\8a\bc\e7\9a\84\e4\bb\a3\e5\b8\81\e5\bf\85\e9\a1\bb\e6\98\afVVV\00")
(data (i32.const 752) "error reading iterator\00")
(data (i32.const 784) "read\00")
(data (i32.const 800) "get\00")
(data (i32.const 816) "continuing deposit\00")
(data (i32.const 848) "quantity must be positive\00")
(data (i32.const 880) "you are not a fundation member\00")
(data (i32.const 912) "quantity\'s symbol must be VVV\00")
(data (i32.const 944) "\e5\9f\ba\e9\87\91\e4\bc\9a\e5\b7\b2\e7\bb\8f\e6\b2\a1\e4\ba\ba\e4\ba\86\00")
(data (i32.const 976) "\e9\9d\9e\e5\9f\ba\e9\87\91\e4\bc\9a\e6\88\90\e5\91\98\00")
(data (i32.const 1008) " \e4\bd\a0\e6\98\af\e5\80\99\e9\80\89\e4\ba\ba\ef\bc\8c\e6\9a\82\e6\97\b6\e4\b8\8d\e8\83\bd\e9\80\80\e5\87\ba\00")
(data (i32.const 1056) "\e5\9f\ba\e9\87\91\e4\bc\9a\e6\88\90\e5\91\98\e8\a1\a8\e6\95\b0\e6\8d\ae\e6\9c\aa\e4\bf\9d\e6\8c\81\e4\b8\80\e8\87\b4\ef\bc\9f\00")
(data (i32.const 1104) "\e7\90\86\e4\ba\8b\e4\bc\9a\e6\88\90\e5\91\98\e8\af\b7\e5\85\88\e9\80\80\e5\87\ba\e7\90\86\e4\ba\8b\e4\bc\9a\00")
(data (i32.const 1152) "quit the fundation\00")
(data (i32.const 1184) "cannot pass end iterator to erase\00")
(data (i32.const 1232) "cannot increment end iterator\00")
(data (i32.const 1264) "object passed to erase is not in multi_index\00")
(data (i32.const 1312) "cannot erase objects in table of another contract\00")
(data (i32.const 1376) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1440) "councli init\00")
(data (i32.const 1456) "iindateam111\00")
(data (i32.const 1472) "please join in foundation\00")
(data (i32.const 1504) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e6\98\af\e5\b8\b8\e5\8a\a1\e7\90\86\e4\ba\8b\e4\ba\86\00")
(data (i32.const 1536) "Non-foundation member\00")
(data (i32.const 1568) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e6\88\90\e4\b8\ba\e7\ab\9e\e9\80\89\e8\80\85\e4\ba\86\00")
(data (i32.const 1600) "\e5\8f\82\e9\80\89\e4\ba\ba\e6\95\b0\e8\bf\87\e5\b0\91,\e6\9a\82\e6\97\b6\e4\b8\8d\e4\ba\a7\e7\94\9f\e6\96\b0\e7\9a\84\e7\90\86\e4\ba\8b\e4\bc\9a\00")
(data (i32.const 1664) "tmpVec size:\00")
(data (i32.const 1680) "\e7\90\86\e4\ba\8b\e4\bc\9a\e4\b8\8d\e5\ad\98\e5\9c\a8\ef\bc\8c\e6\b2\a1\e6\9c\89\e5\88\9d\e5\a7\8b\e5\8c\96\e5\b8\b8\e5\8a\a1\e7\90\86\e4\ba\8b\ef\bc\9f\00")
(data (i32.const 1744) "\e5\9f\ba\e9\87\91\e4\bc\9a\e6\88\90\e5\91\98\e8\a1\a8\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 1776) "exit councli\00")
(data (i32.const 1792) "\e7\90\86\e4\ba\8b\e4\bc\9a\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 1824) "\e5\8f\aa\e6\9c\89\e6\89\a7\e8\a1\8c\e7\90\86\e4\ba\8b\e6\89\8d\e8\83\bd\e9\80\80\e5\87\ba\e7\90\86\e4\ba\8b\e4\bc\9a\00")
(data (i32.const 1872) "vote for candidates\00")
(data (i32.const 1904) "\e8\b6\85\e8\bf\87\e9\80\89\e4\b8\be\e6\8a\95\e7\a5\a8\e6\88\aa\e6\ad\a2\e6\97\a5\e6\9c\9f\00")
(data (i32.const 1936) "\e6\9c\80\e5\a4\9a\e5\8f\aa\e8\83\bd\e6\8a\95\e4\b8\89\e4\ba\ba\00")
(data (i32.const 1968) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e6\8a\95\e5\ae\8c\e7\a5\a8\e4\ba\86\00")
(data (i32.const 2000) "can\'t vote again\00")
(data (i32.const 2032) "\e8\a2\ab\e6\8a\95\e7\a5\a8\e8\80\85\e6\9c\aa\e5\8f\82\e9\80\89\00")
(data (i32.const 2064) "\e4\bd\a0\e6\8a\b5\e6\8a\bc\e7\9a\84\e6\95\b0\e9\87\8f\e4\b8\8d\e5\a4\9f\00")
(data (i32.const 2096) " \e6\99\ae\e9\80\9a\e6\8f\90\e8\ae\ae\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 2128) "\e5\bd\93\e5\89\8d\e6\8f\90\e8\ae\ae\e4\b8\8d\e5\9c\a8\e6\8a\95\e7\a5\a8\e7\8a\b6\e6\80\81\e4\b8\ad,\e6\97\a0\e9\9c\80\e6\8a\95\e7\a5\a8\00")
(data (i32.const 2176) "\e8\b6\85\e8\bf\87\e6\8a\95\e7\a5\a8\e6\88\aa\e6\ad\a2\e6\97\a5\e6\9c\9f\00")
(data (i32.const 2208) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e5\af\b9\e8\af\a5\e6\8f\90\e6\a1\88\e6\8a\95\e8\bf\87\e7\a5\a8\00")
(data (i32.const 2240) "\e9\9d\9e\e6\99\ae\e9\80\9a\e6\8f\90\e6\a1\88\00")
(data (i32.const 2256) "\e5\9f\ba\e9\87\91\e4\bc\9a\e6\88\90\e5\91\98\e6\95\b0\e4\b8\ba0\ef\bc\9f\ef\bc\9f\ef\bc\9f\00")
(data (i32.const 2288) "_P\00")
(data (i32.const 2304) " normal proposal is not existed\00")
(data (i32.const 2336) "\e8\af\a5\e6\8f\90\e6\a1\88\e5\b7\b2\e6\88\90\e4\b8\ba\e5\8e\86\e5\8f\b2\e6\8f\90\e6\a1\88\00")
(data (i32.const 2368) "\e9\9d\9e\e6\a3\80\e4\b8\be\e6\8f\90\e8\ae\ae\00")
(data (i32.const 2384) "the state of proposal is not in WATING\00")
(data (i32.const 2432) "\e9\9d\9e\e6\89\a7\e8\a1\8c\e7\90\86\e4\ba\8b\e6\88\96\e5\b8\b8\e5\8a\a1\e7\90\86\e4\ba\8b\00")
(data (i32.const 2464) "\e5\b7\b2\e7\bb\8f\e8\ae\be\e7\bd\ae\e8\bf\87\e8\af\a5\e5\b8\81\e7\a7\8d\00")
(data (i32.const 2496) "%A %c\00")
(data (i32.const 2512) "\e6\8f\90\e8\ae\aeid: \00")
(data (i32.const 2528) "  \e6\97\b6\e9\97\b4 :\00")
(data (i32.const 2544) " \e7\90\86\e4\ba\8b\e4\bc\9a\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 2576) "launch\00")
(data (i32.const 2592) "\e5\8f\91\e8\b5\b7\e6\8f\90\e8\ae\ae\e7\9a\84\e6\88\aa\e6\ad\a2\e6\97\a5\e6\9c\9f\e6\9c\89\e8\af\af\00")
(data (i32.const 2640) "join invest\00")
(data (i32.const 2656) " quantity must be positive\00")
(data (i32.const 2688) "\e6\8f\90\e6\a1\88\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 2704) "\e9\9d\9e\e6\8a\95\e8\b5\84\e6\8f\90\e6\a1\88\00")
(data (i32.const 2720) "\e6\8f\90\e6\a1\88\e5\b7\b2\e8\bf\87\e9\9b\86\e8\b5\84\e9\98\b6\e6\ae\b5\00")
(data (i32.const 2752) "\e8\b6\85\e8\bf\87\e6\8a\95\e8\b5\84\e6\88\aa\e6\ad\a2\e6\97\a5\e6\9c\9f\00")
(data (i32.const 2784) "\e8\b6\85\e8\bf\87\e6\8a\95\e8\b5\84\e5\8d\95\e4\ba\ba\e9\99\90\e9\a2\9d\00")
(data (i32.const 2816) "\e5\b7\ae\e5\80\bc:\00")
(data (i32.const 2832) "\e8\b6\85\e8\bf\87\e6\8a\95\e8\b5\84\e7\9b\ae\e6\a0\87\00")
(data (i32.const 2864) "\e9\80\9a\e8\af\81\e7\ac\a6\e5\8f\b7\e4\b8\8d\e5\9c\a8\e6\8c\87\e5\ae\9a\e8\8c\83\e5\9b\b4\e5\86\85\00")
(data (i32.const 2912) "join invest proposal\00")
(data (i32.const 2944) "\e8\b6\85\e8\bf\87\e5\8d\95\e4\ba\ba\e6\8a\95\e8\b5\84\e9\99\90\e9\a2\9d\00")
(data (i32.const 2976) "singleton does not exist\00")
(data (i32.const 3008) "examine\00")
(data (i32.const 3024) "support\00")
(data (i32.const 3040) "\e6\8f\90\e6\a1\88id\e6\9c\89\e8\af\af\00")
(data (i32.const 3056) "\e6\8f\90\e6\a1\88\e5\b7\b2\e4\b8\8d\e5\9c\a8\e6\8f\b4\e5\8a\a9\e9\98\b6\e6\ae\b5\00")
(data (i32.const 3088) "\e8\be\93\e5\85\a5\e7\9a\84\e9\87\91\e9\a2\9d\e6\95\b0\e9\87\8f\e5\bf\85\e9\a1\bb\e4\b8\ba\e6\ad\a3\e6\95\b0\00")
(data (i32.const 3136) "aid failure investment\00")
(data (i32.const 3168) "\e9\9d\9e\e9\80\80\e6\ac\be\e7\8a\b6\e6\80\81\00")
(data (i32.const 3184) "\e4\bd\a0\e6\9c\aa\e6\8a\95\e8\b5\84\e8\af\a5\e6\8f\90\e6\a1\88\00")
(data (i32.const 3216) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e5\ae\8c\e6\88\90\e9\80\80\e6\ac\be\00")
(data (i32.const 3248) "Proposals for a refund\00")
(data (i32.const 3280) "evaluate\00")
(data (i32.const 3296) "investment is not existed\00")
(data (i32.const 3328) "You have been rated\00")
(data (i32.const 3360) "\e6\8f\90\e6\a1\88\e4\b8\8d\e5\9c\a8\e6\89\a7\e8\a1\8c\e4\b8\ad\00")
(data (i32.const 3392) "\e6\8f\90\e5\8f\96\e8\b6\85\e9\a2\9d\00")
(data (i32.const 3408) "\e5\bd\93\e5\89\8d\e7\9a\84\e6\8f\90\e5\8f\96\e7\94\b3\e8\af\b7\e8\bf\98\e5\9c\a8\e5\ae\a1\e6\a0\b8\e4\b8\ad\ef\bc\8c\e6\97\a0\e6\b3\95\e5\86\8d\e6\ac\a1\e7\94\b3\e8\af\b7\00")
(data (i32.const 3472) "daocouncli11\00")
(data (i32.const 3488) "\e6\8f\90\e5\8f\96\e7\94\b3\e8\af\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 3520) "\e5\ae\a1\e6\a0\b8\e5\ae\8c\e6\af\95\00")
(data (i32.const 3536) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e5\ae\a1\e6\a0\b8\e8\bf\87\e4\ba\86\00")
(data (i32.const 3568) "\e6\8f\90\e5\8f\96\e7\94\b3\e8\af\b7\e6\9c\aa\e9\80\9a\e8\bf\87\e6\88\96\e5\bd\93\e5\89\8d\e6\8f\90\e5\8f\96\e5\b7\b2\e7\bb\8f\e5\ae\8c\e6\88\90\00")
(data (i32.const 3632) "\e8\b5\84\e9\87\91\e6\8f\90\e5\8f\96\00")
(data (i32.const 3648) "report\00")
(data (i32.const 3664) "\e6\94\b6\e7\9b\8a\e5\b8\81\e7\a7\8d\e8\b7\9f\e6\8f\90\e6\a1\88\e6\8c\87\e5\ae\9a\e7\9a\84\e5\b8\81\e7\a7\8d\e4\b8\8d\e4\b8\80\e8\87\b4\00")
(data (i32.const 3712) "reporting incomes\00")
(data (i32.const 3744) "claim\00")
(data (i32.const 3760) "\e6\8a\95\e8\b5\84\e6\8f\90\e6\a1\88\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 3792) "\e4\bd\a0\e6\9c\aa\e5\8f\82\e4\b8\8e\e5\bd\93\e5\89\8d\e6\8a\95\e8\b5\84\e6\8f\90\e6\a1\88 \00")
(data (i32.const 3824) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e9\a2\86\e5\8f\96\e8\bf\87\00")
(data (i32.const 3856) "\e8\af\a5\e6\8f\90\e6\a1\88\e8\bf\98\e6\b2\a1\e6\b1\87\e6\8a\a5\e6\94\b6\e5\85\a5\00")
(data (i32.const 3888) "\e6\94\b6\e5\85\a5\e6\b1\87\e6\8a\a5\e6\9c\9f\e5\8f\b7\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 3920) "closure\00")
(data (i32.const 3936) "the investID is error\00")
(data (i32.const 3968) "The status of the proposal is not EXECUTING\00")
(data (i32.const 4016) "agreeclosure\00")
(data (i32.const 4032) " the investment is not existed\00")
(data (i32.const 4064) "\e9\9d\9e\e6\8a\95\e8\b5\84\e7\b1\bb\e5\9e\8b\00")
(data (i32.const 4080) "You\'re not involved in the investment\00")
(data (i32.const 4128) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e5\af\b9\e9\a1\b9\e7\9b\ae\e7\bb\93\e6\9d\9f\e8\a1\a8\e8\bf\87\e6\80\81\00")
(data (i32.const 4176) "onerror\00")
(data (i32.const 4192) "eosio\00")
(data (i32.const 4208) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 12672) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 12768) "%llu\00")
(data (i32.const 12784) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13248) "0123456789ABCDEF")
(data (i32.const 13264) "-+   0X0x\00")
(data (i32.const 13280) "(null)\00")
(data (i32.const 13296) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13328) "inf\00")
(data (i32.const 13344) "INF\00")
(data (i32.const 13360) "nan\00")
(data (i32.const 13376) "NAN\00")
(data (i32.const 13392) ".\00")
(data (i32.const 13408) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13504) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 15360) "UTC\00")
(data (i32.const 15376) "\1f\1e\1f\1e\1f\1f\1e\1f\1e\1f\1f\1d")
(data (i32.const 15392) "+%lld\00")
(data (i32.const 15408) "%+.2d%.2d\00")
(data (i32.const 15424) "strftime %Z not supported.\00")
(data (i32.const 15456) "/home/xteam/eos/contracts/musl/upstream/src/time/strftime.c\00")
(data (i32.const 15520) "__strftime_fmt_1\00")
(data (i32.const 15552) "%lld\00")
(data (i32.const 15568) "%*lld\00")
(data (i32.const 15584) "%0*lld\00")
(data (i32.const 15600) "-\00")
(data (i32.const 15616) "%H:%M:%S\00")
(data (i32.const 15632) "%H:%M\00")
(data (i32.const 15648) "%Y-%m-%d\00")
(data (i32.const 15664) "%m/%d/%y\00")
(data (i32.const 15680) "%\00")
(data (i32.const 15712) "\t\00")
(data (i32.const 15728) "\n\00")
(data (i32.const 15744) "ASCII\00")
(data (i32.const 15760) "UTF-8\00")
(data (i32.const 15776) "^[yY]\00^[nN]\00yes\00no\00")
(data (i32.const 15808) "Sun\00Mon\00Tue\00Wed\00Thu\00Fri\00Sat\00Sunday\00Monday\00Tuesday\00Wednesday\00Thursday\00Friday\00Saturday\00Jan\00Feb\00Mar\00Apr\00May\00Jun\00Jul\00Aug\00Sep\00Oct\00Nov\00Dec\00January\00February\00March\00April\00May\00June\00July\00August\00September\00October\00November\00December\00AM\00PM\00%a %b %e %T %Y\00%m/%d/%y\00%H:%M:%S\00%I:%M:%S %p\00\00\00%m/%d/%y\000123456789\00%a %b %e %T %Y\00%H:%M:%S\00")
(data (i32.const 16128) ".\00\00")
(data (i32.const 16160) "C\00")
(data (i32.const 16164) "\08D\00\00")
(data (i32.const 16176) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 16212) "h?\00\00")
(data (i32.const 16232) "\05\00\00\00\00\00\00\00\00\00\00\00%\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00&\00\00\00\'\00\00\00\08@\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 17416) "\05\00\00\00\00\00\00\00\00\00\00\00%\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00\'\00\00\00\a0D\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 17568) "\00\00\00\00\80\de(\00\80\c8M\00\00\a7v\00\004\9e\00\80\12\c7\00\80\9f\ee\00\00~\17\01\80\\@\01\80\e9g\01\00\c8\90\01\00U\b8\01")
(data (i32.const 17616) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 17888) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "db_find_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$22 (param i32 i32)))
(import "env" "memcpy" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$26 (param f64)))
(import "env" "prints" (func $fimport$27 (param i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "printsf" (func $fimport$29 (param f32)))
(import "env" "printui" (func $fimport$30 (param i64)))
(import "env" "read_action_data" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$32 (param i64)))
(import "env" "require_auth2" (func $fimport$33 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$34 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$35 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN3dao11funddepositEyN5eosio5assetE" (func $5))
(export "_ZN3dao10add_memberEy" (func $9))
(export "_ZN3dao10condepositEyN5eosio5assetE" (func $42))
(export "_ZN3dao8exitfundEy" (func $43))
(export "_ZN3dao11councliinitERKy" (func $52))
(export "_ZN3dao8compaignERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $57))
(export "_ZN3dao10updatecounERKy" (func $59))
(export "_ZN3dao11exitcouncliERKy" (func $69))
(export "_ZN3dao11votecouncliEyNSt3__16vectorIyNS0_9allocatorIyEEEE" (func $71))
(export "_ZN3dao4voteEyyh" (func $78))
(export "_ZN3dao7processEy" (func $93))
(export "_ZN3dao6accuseEyyy" (func $95))
(export "_ZN3dao10setrewardsEyy" (func $97))
(export "_ZN3dao10setcouncliEymyyy" (func $98))
(export "_ZN3dao8settokenENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy" (func $99))
(export "_ZN3dao11removetokenENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy" (func $101))
(export "_ZN3dao10setdepositEy" (func $102))
(export "_ZN3dao11settimeparaEyy" (func $103))
(export "_ZN3dao11setcountimeEm" (func $104))
(export "_ZN3dao12dao_strftimeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $105))
(export "_ZN3dao22get_default_parametersEv" (func $107))
(export "_ZN3dao12clearglobalsEm" (func $108))
(export "_ZN3dao12clearcouncliEy" (func $110))
(export "_ZN3dao4initEy" (func $112))
(export "_ZN3dao6launchEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEhS6_S6_yyS6_S6_m" (func $113))
(export "_ZN3dao6investEyyN5eosio5assetE" (func $120))
(export "_ZN3dao14get_token_addrEy" (func $128))
(export "_ZN3dao9timedtaskEy" (func $129))
(export "_ZN3dao7supportEyyN5eosio5assetE" (func $141))
(export "_ZN3dao6refundEyy" (func $145))
(export "_ZN3dao8evaluateEyRKyRKh" (func $147))
(export "_ZN3dao11drawrequestEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEy" (func $152))
(export "_ZN3dao9agreedrawEyyh" (func $168))
(export "_ZN3dao4drawEyy" (func $171))
(export "_ZN3dao7reportsEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy" (func $175))
(export "_ZN3dao6incomeEyyN5eosio5assetE" (func $184))
(export "_ZN3dao8claimingEymy" (func $194))
(export "_ZN3dao7closureEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_" (func $203))
(export "_ZN3dao12agreeclosureEyy" (func $204))
(export "_ZN3dao5clearEm" (func $207))
(export "apply" (func $208))
(export "malloc" (func $242))
(export "free" (func $245))
(export "_ZNSt3__19to_stringEy" (func $256))
(export "snprintf" (func $261))
(export "vsnprintf" (func $262))
(export "__errno_location" (func $264))
(export "vfprintf" (func $265))
(export "__lockfile" (func $267))
(export "__unlockfile" (func $268))
(export "__fwritex" (func $269))
(export "strerror" (func $271))
(export "strnlen" (func $272))
(export "wctomb" (func $273))
(export "__signbitl" (func $274))
(export "__fpclassifyl" (func $275))
(export "frexpl" (func $276))
(export "wcrtomb" (func $277))
(export "memchr" (func $278))
(export "__lctrans" (func $279))
(export "__lctrans_impl" (func $280))
(export "__mo_lookup" (func $281))
(export "strcmp" (func $282))
(export "__towrite" (func $283))
(export "memcmp" (func $284))
(export "strlen" (func $285))
(export "gmtime" (func $286))
(export "__gmtime_r" (func $287))
(export "__secs_to_tm" (func $288))
(export "strftime" (func $289))
(export "__strftime_l" (func $290))
(export "strtoul" (func $291))
(export "__strftime_fmt_1" (func $292))
(export "__tm_to_secs" (func $294))
(export "abs" (func $295))
(export "__assert_fail" (func $296))
(export "__nl_langinfo_l" (func $297))
(export "fprintf" (func $298))
(export "fflush" (func $299))
(export "__ofl_lock" (func $300))
(export "__ofl_unlock" (func $301))
(export "__unlock" (func $302))
(export "__lock" (func $303))
(export "__stdio_close" (func $304))
(export "__stdout_write" (func $305))
(export "__stdio_seek" (func $306))
(export "__stdio_write" (func $307))
(export "__year_to_secs" (func $308))
(export "__month_to_secs" (func $309))
(export "__shlim" (func $310))
(export "__intscan" (func $311))
(export "__shgetc" (func $312))
(export "__uflow" (func $313))
(export "__toread" (func $314))
(table $0 41 41 anyfunc)
(elem (i32.const 0) $315 $52 $204 $120 $93 $194 $103 $152 $98 $203 $78 $5 $101 $110 $141 $69 $102 $57 $42 $95 $184 $112 $113 $168 $97 $171 $175 $108 $129 $43 $145 $207 $99 $147 $104 $71 $263 $304 $305 $306 $307)



int_32 .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [784])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$8 = ((int_32)(*($0 + [4]) - $9) / (int_32)[80])
	$7 = ($8 + [1])
	if ( ((uint_32)$7 >= (uint_32)[53687092]) ){ goto $label$2 }
	$6 = [53687091]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[80])
	if ( ((uint_32)$9 > (uint_32)[26843544]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$6 = ( $7 ? $9 : ($9 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $246(((int_32)$6 * (int_32)[80]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	*(($9 = ($7 + ((int_32)$8 * (int_32)[80])))) = *($1)
	*(($9 + [8])) = *(($1 + [8]))
	CALL $260(($9 + [16]), ($1 + [16]))
	*(($9 + [48])) = *(($1 + [48]))
	*(($9 + [44])) = *(($1 + [44]))
	*(($9 + [36])) = *(($1 + [36]))
	*($9 + [28 align=4]) = *($1 + [28 align=4])
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($4 = ($9 + [60]))) = [0]
	$5 = (*(($1 + [56])) - *($1 + [52]))
	$3 = int_32($5 >> [4])
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($9 + [52])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$5 }
	$5 = CALL $246($5)
	*($2) = $5
	*($8) = $5
	*($4) = ($5 + ($3 << [4]))
	$4 = *(($1 + [52]))
	$3 = (*(($1 + [56])) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($5, $4, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$6
	$3 = ($7 + ((int_32)$6 * (int_32)[80]))
	*($9 + [64]) = *($1 + [64])
	CALL $260(($9 + [68]), ($1 + [68]))
	$4 = ($9 + [80])
	$1 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	$5 = ([0] - $1)
	$1 = ($6 + [-28])
	
.LOOP $label$9:
	*(($9 + [-72])) = *(($1 + [-44]))
	*(($9 + [-80])) = *(($1 + [-52]))
	$6 = ($1 + [-36])
	*(($9 + [-64])) = *($6)
	$7 = ($1 + [-28])
	*(($9 + [-56])) = *($7)
	*($6) = [0]
	*(($1 + [-32])) = [0]
	*($7) = [0]
	*(($9 + [-32])) = *(($1 + [-4]))
	*(($9 + [-36])) = *(($1 + [-8]))
	*(($9 + [-44])) = *(($1 + [-16]))
	*(($9 + [-52])) = *(($1 + [-24]))
	*(($6 = ($9 + [-28]))) = [0]
	*(($7 = ($9 + [-24]))) = [0]
	*(($8 = ($9 + [-20]))) = [0]
	*($6) = *($1)
	*($7) = *(($1 + [4]))
	$6 = ($1 + [8])
	*($8) = *($6)
	*($6) = [0]
	*($1) = (int_64)0
	*(($9 + [-16])) = *(($1 + [12]))
	$6 = ($1 + [24])
	*(($9 + [-4])) = *($6)
	$7 = ($1 + [20])
	*(($9 + [-8])) = *($7)
	$8 = ($1 + [16])
	*(($9 + [-12])) = *($8)
	*($8) = [0]
	*($7) = [0]
	*($6) = [0]
	$9 = ($9 + [-80])
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $5) != (int_32)[-28]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$7 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$7 = $1
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$6 = ([0] - $7)
	$1 = ($1 + [-64])
	
.LOOP $label$11:
	if ( ((*(($1 + [52])) & [1]) == 0) ){ goto $label$12 }
	CALL $247(*(($1 + [60])))
	
.LABEL $label$12
	$9 = *(($1 + [36]))
	if ( ($9 == 0) ){ goto $label$13 }
	*(($1 + [40])) = $9
	CALL $247($9)
	
.LABEL $label$13
	if ( ((*($1) & [1]) == 0) ){ goto $label$14 }
	CALL $247(*(($1 + [8])))
	
.LABEL $label$14
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $6) != (int_32)[-64]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $247($7)
	
.LABEL $label$15
	return (unreachable)
	
.LABEL $label$5
	CALL $259($2)
	(unreachable)
}

void .FUNC $6 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $246($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $29($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $38(($9 + [72]), ($9 + [64]))
	CALL $39(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $247($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $247($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $247($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $247($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $259(($9 + [8]))
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [752])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $4)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	$7 = ($6 + $4)
	*($8 + [40]) = $7
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($6)
	$7 = *(($8 + [40]))
	$6 = *($8 + [36])
	
.LABEL $label$7
	*(($4 = CALL $246([32])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $6) > (uint_32)[7]), [784])
	CALL memcpy($4, $6, [8])
	*($8 + [36]) = ($6 + [8])
	CALL $182(($8 + [32]), ($4 + [8]))
	*($4 + [24]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $178(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [12])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $247(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	$6 = *(($1 + [8]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $247($6)
	
.LABEL $label$10
	CALL $247($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6 + [4])
	$7 = ($1 + [12])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($3) = *($6)
	CALL $260(($3 + [4]), ($6 + [4]))
	$5 = (*($7) + [16])
	*($7) = $5
	$4 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [8])
	CALL $180($4, $6)
	$5 = *($7)
	
.LABEL $label$1
	$7 = *($4)
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = *($7 + [4])
	$3 = ( *(($7 + [8])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = (($3 + $6) + [4])
	$8 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($6)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($9) = $7
	*($9 + [8]) = ($7 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($7, $1, [8])
	*($9 + [4]) = ($7 + [8])
	CALL $181($9, $4)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4995815919012806656, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC _ZN3dao4drawEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [192])
	*([0] + [4]) = $21
	CALL require_auth($2)
	CALL $96($0, $2)
	$14 = [0]
	*(($21 + [120])) = [0]
	*($21 + [96]) = $1
	*($21 + [104]) = (int_64)-1
	*($21 + [112]) = (int_64)0
	$2 = *($0)
	*($21 + [88]) = $2
	$15 = CALL db_find_i64($2, $1, (int_64)4921564679018381312, $1)
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$2 }
	$14 = CALL $153(($21 + [88]), $15)
	CALL eosio_assert(((int_32)*($14 + [100]) == (int_32)($21 + [88])), [272])
	*($21 + [84]) = $14
	*($21 + [80]) = ($21 + [88])
	$3 = (($21 + [80]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($21 + [84]) = [0]
	*($21 + [80]) = ($21 + [88])
	$3 = (($21 + [80]) | [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [3488])
	CALL eosio_assert(((int_32)*(($14 + [56])) == (int_32)[2]), [3568])
	$9 = *(($0 + [272]))
	$13 = *(($0 + [276]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$3 }
	$14 = ($13 + [-24])
	$11 = ([0] - $9)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$3 }
	$13 = $14
	$15 = ($14 + [-24])
	$14 = $15
	if ( ((int_32)($15 + $11) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = ($0 + [248])
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$6 }
	$20 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [204]) == (int_32)$4), [272])
	goto $label$5 
	
.LABEL $label$6
	$20 = [0]
	$14 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$20 = CALL $79($4, $14)
	CALL eosio_assert(((int_32)*($20 + [204]) == (int_32)$4), [272])
	
.LABEL $label$5
	CALL eosio_assert([1], [208])
	$2 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$15 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$15 = [0]
	
.LABEL $label$7
	CALL eosio_assert($15, [688])
	$5 = *((*($3) + [16]))
	if ( (*($20 + [112]) & [1]) ){ goto $label$13 }
	$15 = (($20 + [112]) + [1])
	goto $label$12 
	
.LABEL $label$13
	$15 = *(($20 + [120]))
	
.LABEL $label$12
	$14 = [-1]
	
.LOOP $label$14:
	$13 = ($15 + $14)
	$11 = ($14 + [1])
	$14 = $11
	if ( *(($13 + [1])) ){ goto $label$14 }
	if ( ($11 == 0) ){ goto $label$16 }
	$16 = (CASTING uint_64)(uint_32 $11)
	$2 = (int_64)8
	$17 = (int_64)0
	
.LOOP $label$17:
	$14 = *($15)
	if ( ((uint_32)(($14 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$18
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$16 = ((int_64)$16 + (int_64)-1)
	if ( ((int_64)$16 != (int_64)0) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$17 = (int_64)0
	
.LABEL $label$15
	$6 = ((int_64)$17 | (int_64)4)
	$7 = *(($0 + [144]))
	$12 = *(($0 + [140]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$19 }
	
.LOOP $label$20:
	$15 = ( *($12 + [8]) ? ($12 + [1]) : (*($12) & [1]) )
	$14 = [-1]
	$13 = [0]
	
.LOOP $label$21:
	$8 = $13
	$13 = ($8 + [1])
	$11 = ($15 + $14)
	$9 = ($14 + [1])
	$14 = $9
	if ( *(($11 + [1])) ){ goto $label$21 }
	if ( ($9 == 0) ){ goto $label$23 }
	$16 = (CASTING uint_64)(uint_32 $8)
	$17 = (int_64)0
	$2 = (int_64)8
	
.LOOP $label$24:
	$14 = *($15)
	if ( ((uint_32)(($14 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$25
	$15 = ($15 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$16 = ((int_64)$16 + (int_64)-1)
	if ( ((int_64)$16 != (int_64)0) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$17 = (int_64)0
	
.LABEL $label$22
	if ( ((int_64)((int_64)$17 | (int_64)4) == (int_64)$6) ){ goto $label$19 }
	$12 = ($12 + [24])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$20 }
	$12 = $7
	
.LABEL $label$19
	CALL eosio_assert(((int_32)$12 != (int_32)$7), [2864])
	$10 = *($12 + [16])
	*(($21 + [56])) = [0]
	*($21 + [48]) = (int_64)0
	$14 = CALL strlen([3632])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$29 }
	*($21 + [48]) = ($14 << [1])
	$15 = (($21 + [48]) | [1])
	if ( $14 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$13 = (($14 + [16]) & [-16])
	$15 = CALL $246($13)
	*($21 + [48]) = ($13 | [1])
	*($21 + [56]) = $15
	*($21 + [52]) = $14
	
.LABEL $label$28
	CALL memcpy($15, [3632], $14)
	
.LABEL $label$27
	*(($15 + $14)) = [0]
	CALL _ZN3dao12dao_strftimeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(($21 + [64]), $14, $1, ($21 + [48]))
	if ( ((*($21 + [48]) & [1]) == 0) ){ goto $label$30 }
	CALL $247(*($21 + [56]))
	
.LABEL $label$30
	$2 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$1 = (int_64)0
	
.LOOP $label$31:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$32 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$15 = ($15 + [165])
	goto $label$33 
	
.LABEL $label$34
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$32
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$17 | (int_64)$1)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$31 }
	$2 = (int_64)0
	$17 = (int_64)59
	$14 = [96]
	$18 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$40 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$15 = ($15 + [165])
	goto $label$38 
	
.LABEL $label$40
	$16 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$36
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$35 }
	$2 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$19 = (int_64)0
	
.LOOP $label$41:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$42 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$15 = ($15 + [165])
	goto $label$43 
	
.LABEL $label$44
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$42
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$41 }
	*(($15 = ($21 + [24]))) = $6
	*($21) = $19
	*($21 + [16]) = $5
	*($21 + [8]) = *((*($3) + [48]))
	CALL $260(($21 + [32]), ($21 + [64]))
	*(($14 = CALL $246([16]))) = $1
	*($14 + [8]) = $18
	*($21 + [176]) = $14
	$14 = ($14 + [16])
	*($21 + [184]) = $14
	*($21 + [180]) = $14
	*($21 + [128]) = *($21)
	*($21 + [136]) = *($21 + [8])
	*((($21 + [128]) + [24])) = *($15)
	*($21 + [144]) = *($21 + [16])
	$14 = ($21 + [40])
	*(($15 = (($21 + [128]) + [40]))) = *($14)
	*($21 + [160]) = *($21 + [32])
	*($21 + [32]) = [0]
	*(($21 + [36])) = [0]
	*($14) = [0]
	CALL $6($10, (int_64)-3617168760277827584, ($21 + [176]), ($21 + [128]))
	if ( ((*($21 + [160]) & [1]) == 0) ){ goto $label$45 }
	CALL $247(*($15))
	
.LABEL $label$45
	$14 = *($21 + [176])
	if ( ($14 == 0) ){ goto $label$46 }
	*($21 + [180]) = $14
	CALL $247($14)
	
.LABEL $label$46
	if ( ((*(($21 + [32])) & [1]) == 0) ){ goto $label$47 }
	CALL $247(*(($21 + [40])))
	
.LABEL $label$47
	$2 = *($0)
	*($21 + [128]) = ($21 + [80])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [336])
	CALL $172($4, $20, $2, ($21 + [128]))
	$2 = *($0)
	$14 = *($21 + [84])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [336])
	CALL $173(($21 + [88]), $14, $2)
	if ( ((*($21 + [64]) & [1]) == 0) ){ goto $label$48 }
	CALL $247(*($21 + [72]))
	
.LABEL $label$48
	$13 = *($21 + [112])
	if ( ($13 == 0) ){ goto $label$49 }
	$11 = ($21 + [116])
	$14 = *($11)
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$51 }
	
.LOOP $label$52:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$53 }
	CALL $157($15)
	CALL $247($15)
	
.LABEL $label$53
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$52 }
	$14 = *(($21 + [112]))
	goto $label$50 
	
.LABEL $label$51
	$14 = $13
	
.LABEL $label$50
	*($11) = $13
	CALL $247($14)
	
.LABEL $label$49
	*([0] + [4]) = ($21 + [192])
	return (unreachable)
	
.LABEL $label$26
	CALL $248(($21 + [48]))
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$3 = *($3)
	*($1 + [44]) = [4]
	*($1 + [136]) = (int_64))(*($1 + [136]) - *((*($3 + [4]) + [16])))
	$4 = *($1)
	CALL eosio_assert([1], [608])
	*(($3 = $6)) = [0]
	CALL $82($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $83($3, $1)
	CALL db_update_i64(*($1 + [208]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $246([40])
	$6 = CALL $37($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $246 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12764])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $246(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [12])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $247(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-16])
	if ( ((int_32)($1 + $6) != (int_32)[-12]) ){ goto $label$14 }
	$1 = *(($2 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $247($1)
	
.LABEL $label$11
	CALL $247($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $247($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [784])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [784])
	$5 = (($8 + [8]) + [16])
	CALL memcpy($5, ($6 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($5)
	$4 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ($6 & [255])), (int_32 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC _ZN3dao11funddepositEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [128])
	*([0] + [4]) = $16
	CALL prints([16])
	CALL require_auth($1)
	CALL _ZNSt3__19to_stringEy(($16 + [48]), ((uint_64)*(($0 + [80])) / (uint_64)(int_64)10000))
	$8 = CALL $254(($16 + [48]), [0], [32])
	$4 = ($8 + [8])
	*((($16 + [72]) + [8])) = *($4)
	*($16 + [72]) = *($8)
	*($8) = [0]
	*(($8 + [4])) = [0]
	*($4) = [0]
	$8 = CALL $253(($16 + [72]), [64])
	$4 = ($8 + [8])
	*((($16 + [32]) + [8])) = *($4)
	*($16 + [32]) = *($8)
	*($8) = [0]
	*(($8 + [4])) = [0]
	*($4) = [0]
	if ( ((*($16 + [72]) & [1]) == 0) ){ goto $label$1 }
	CALL $247(*($16 + [80]))
	
.LABEL $label$1
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($16 + [56]))
	
.LABEL $label$2
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)*(($0 + [80]))), ( *($16 + [40]) ? (($16 + [32]) | [1]) : (*($16 + [32]) & [1]) ))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1448498692), [720])
	$11 = (int_64)0
	$13 = (int_64)59
	$8 = [80]
	$9 = (int_64)0
	
.LOOP $label$3:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$4 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$3 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [96]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$11 = (int_64)0
	$13 = (int_64)59
	$8 = [112]
	$14 = (int_64)0
	
.LOOP $label$13:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$14 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$4 = ($4 + [165])
	goto $label$15 
	
.LABEL $label$16
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$13 }
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	$8 = CALL strlen([128])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$20 }
	*($16) = ($8 << [1])
	$4 = ($16 | [1])
	if ( $8 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$15 = (($8 + [16]) & [-16])
	$4 = CALL $246($15)
	*($16) = ($15 | [1])
	*($16 + [8]) = $4
	*($16 + [4]) = $8
	
.LABEL $label$19
	CALL memcpy($4, [128], $8)
	
.LABEL $label$18
	*(($4 + $8)) = [0]
	*(($4 = (($16 + [16]) + [8]))) = *(($2 + [8]))
	*($16 + [16]) = *($2)
	$15 = *($16)
	*($16) = [0]
	$5 = *($16 + [8])
	$6 = *($16 + [4])
	*($16 + [4]) = [0]
	*($16 + [8]) = [0]
	*(($8 = CALL $246([16]))) = $1
	*($8 + [8]) = $12
	$7 = ($8 + [16])
	*($16 + [56]) = $7
	*($16 + [48]) = $8
	*($16 + [80]) = $14
	*($16 + [72]) = $1
	*($16 + [52]) = $7
	*(($16 + [96])) = *($4)
	*($16 + [88]) = *($16 + [16])
	*($16 + [104]) = $15
	*(($16 + [108])) = $6
	*(($8 = ($16 + [112]))) = $5
	CALL $6($9, (int_64)-3617168760277827584, ($16 + [48]), ($16 + [72]))
	if ( ((*($16 + [104]) & [1]) == 0) ){ goto $label$21 }
	CALL $247(*($8))
	
.LABEL $label$21
	$8 = *($16 + [48])
	if ( ($8 == 0) ){ goto $label$22 }
	*($16 + [52]) = $8
	CALL $247($8)
	
.LABEL $label$22
	if ( ((*($16) & [1]) == 0) ){ goto $label$23 }
	CALL $247(*(($16 + [8])))
	
.LABEL $label$23
	$8 = [0]
	*(($16 + [104])) = [0]
	*($16 + [88]) = (int_64)-1
	*($16 + [96]) = (int_64)0
	$11 = *($0)
	*($16 + [72]) = $11
	*($16 + [80]) = $1
	$4 = CALL db_find_i64($11, $1, (int_64)6820307092563673088, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$25 }
	$8 = CALL $7(($16 + [72]), $4)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($16 + [72])), [272])
	$13 = *($0)
	CALL eosio_assert([1], [336])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($16 + [72])), [384])
	CALL eosio_assert(((int_64)*($16 + [72]) == (int_64)CALL $fimport$13()), [432])
	$11 = *($8)
	$4 = ($8 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($4)), [496])
	$10 = ((int_64)*($8 + [8]) + (int_64)*($2))
	*($8 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [576])
	CALL eosio_assert(((int_64)$11 == (int_64)*($8)), [608])
	CALL eosio_assert([1], [672])
	CALL memcpy(($16 + [48]), $8, [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($16 + [48]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($16 + [48]) + [16]), $4, [8])
	CALL db_update_i64(*($8 + [28]), $13, ($16 + [48]), [24])
	$8 = (($16 + [72]) + [16])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$24 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	goto $label$24 
	
.LABEL $label$25
	$13 = *($0)
	CALL eosio_assert(((int_64)*($16 + [72]) == (int_64)CALL $fimport$13()), [144])
	*(($4 = CALL $246([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [208])
	$6 = ($4 + [16])
	$5 = ($4 + [8])
	$11 = (int_64)5462355
	
.LOOP $label$27:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$15 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	CALL eosio_assert($15, [688])
	*($4 + [24]) = ($16 + [72])
	*($4) = $1
	*(($5 + [12])) = *(($2 + [12]))
	*(($5 + [8])) = *(($2 + [8]))
	*(($5 + [4])) = *(($2 + [4]))
	*($5) = *($2)
	CALL eosio_assert([1], [672])
	CALL memcpy(($16 + [48]), $4, [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($16 + [48]) | [8]), $5, [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($16 + [48]) + [16]), $6, [8])
	$11 = *($4)
	$2 = CALL db_store_i64(*((($16 + [72]) + [8])), (int_64)6820307092563673088, $13, $11, ($16 + [48]), [24])
	*($4 + [28]) = $2
	$8 = (($16 + [72]) + [16])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$30 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	*($16) = $4
	$11 = *($4)
	*($16 + [48]) = $11
	*($16 + [124]) = $2
	$15 = ($16 + [100])
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*(($16 + [104]))) ){ goto $label$32 }
	*($8 + [8]) = $11
	*($8 + [16]) = $2
	*($16) = [0]
	*($8) = $4
	*($15) = ($8 + [24])
	goto $label$31 
	
.LABEL $label$32
	CALL $8(($16 + [96]), $16, ($16 + [48]), ($16 + [124]))
	
.LABEL $label$31
	$8 = *($16)
	*($16) = [0]
	if ( ($8 == 0) ){ goto $label$33 }
	CALL $247($8)
	
.LABEL $label$33
	*(($8 = ($0 + [56]))) = (*($8) + [1])
	CALL _ZN3dao10add_memberEy($0, $1)
	
.LABEL $label$24
	CALL $10(($0 + [208]), $3, *($0))
	$0 = *($16 + [96])
	if ( ($0 == 0) ){ goto $label$34 }
	$2 = ($16 + [100])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$36 }
	
.LOOP $label$37:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	CALL $247($4)
	
.LABEL $label$38
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$37 }
	$8 = *(($16 + [96]))
	goto $label$35 
	
.LABEL $label$36
	$8 = $0
	
.LABEL $label$35
	*($2) = $0
	CALL $247($8)
	
.LABEL $label$34
	if ( ((*($16 + [32]) & [1]) == 0) ){ goto $label$39 }
	CALL $247(*(($16 + [40])))
	
.LABEL $label$39
	*([0] + [4]) = ($16 + [128])
	return (unreachable)
	
.LABEL $label$17
	CALL $248($16)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($2 = CALL memcpy($0, $1, [96])) + [96 align=4]) = (int_64)0
	*(($2 + [104])) = [0]
	$0 = (*(($1 + [100])) - *($1 + [96]))
	$5 = int_32($0 >> [3])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$4 }
	$0 = CALL $246($0)
	*(($2 + [96])) = $0
	*(($2 + [104])) = ($0 + ($5 << [3]))
	*(($5 = ($2 + [100]))) = $0
	$3 = *(($1 + [96]))
	$4 = (*(($1 + [100])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($0, $3, $4)
	*($5) = (*($5) + $4)
	
.LABEL $label$5
	*($2 + [108 align=4]) = (int_64)0
	*(($2 + [116])) = [0]
	$0 = (*(($1 + [112])) - *($1 + [108]))
	$5 = int_32($0 >> [3])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$0 = CALL $246($0)
	*(($2 + [108])) = $0
	*(($2 + [116])) = ($0 + ($5 << [3]))
	*(($5 = ($2 + [112]))) = $0
	$3 = *(($1 + [108]))
	$4 = (*(($1 + [112])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($0, $3, $4)
	*($5) = (*($5) + $4)
	
.LABEL $label$6
	*($2 + [120 align=4]) = (int_64)0
	*(($2 + [128])) = [0]
	$0 = (*(($1 + [124])) - *($1 + [120]))
	$5 = int_32($0 >> [3])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$0 = CALL $246($0)
	*(($2 + [120])) = $0
	*(($2 + [128])) = ($0 + ($5 << [3]))
	*(($5 = ($2 + [124]))) = $0
	$3 = *(($1 + [120]))
	$4 = (*(($1 + [124])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($0, $3, $4)
	*($5) = (*($5) + $4)
	
.LABEL $label$7
	*($2 + [132 align=4]) = (int_64)0
	*(($2 + [140])) = [0]
	$0 = (*(($1 + [136])) - *($1 + [132]))
	$3 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL $246($0)
	*(($4 = ($2 + [136]))) = $5
	*(($2 + [140])) = ($5 + ((int_32)$3 * (int_32)[24]))
	*(($2 + [132])) = $5
	$3 = *(($1 + [136]))
	$0 = *(($1 + [132]))
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $260($5, $0)
	*($5 + [16]) = *(($0 + [16]))
	$5 = (*($4) + [24])
	*($4) = $5
	$0 = ($0 + [24])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$8
	CALL memcpy(($2 + [144]), ($1 + [144]), [40])
	CALL $260(($2 + [184]), ($1 + [184]))
	return $2
	
.LABEL $label$4
	CALL $259(($2 + [96]))
	
.LABEL $label$3
	CALL $259(($2 + [108]))
	
.LABEL $label$2
	CALL $259(($2 + [120]))
	
.LABEL $label$1
	CALL $259(($2 + [132]))
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $247($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [24])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $50($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [784])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [784])
	CALL memcpy(($7 + [8]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC __errno_location ()
{
	return [15308]
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $266 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [12784]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $270(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13264]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13296]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13302] ? [13297] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13266] ? [13264] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13299]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $264()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13264]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13264]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13248])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13264])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13280] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13264]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13360] ? [13376] : $30 ) ? ( [13328] ? [13344] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13264]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13265]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13264] ? [13269] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13248])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13248])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13248])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13392], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13392], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13392], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $270(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $270(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $270(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $270(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $270(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $270(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $270(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $270(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $270(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $260($6, ($1 + [12]))
	$4 = *($1 + [24])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $260(($6 + [16]), $6)
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($6 + [16])), (int_32 $4), (int_64 $1))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($6 + [24]))
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC _ZN3dao8exitfundEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [224])
	*([0] + [4]) = $17
	*($17 + [152]) = $1
	CALL require_auth($1)
	$10 = [0]
	CALL eosio_assert(((int_32)*(($0 + [56])) != (int_32)[0]), [944])
	*((($17 + [112]) + [32])) = [0]
	*($17 + [120]) = $1
	*($17 + [128]) = (int_64)-1
	*($17 + [136]) = (int_64)0
	$15 = *($0)
	*($17 + [112]) = $15
	$9 = [0]
	$6 = CALL db_find_i64($15, $1, (int_64)6820307092563673088, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $7(($17 + [112]), $6)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)($17 + [112])), [272])
	
.LABEL $label$1
	$2 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($2, [976])
	*((($17 + [72]) + [32])) = [0]
	$1 = *($0)
	*($17 + [72]) = $1
	*($17 + [88]) = (int_64)-1
	*($17 + [96]) = (int_64)0
	*($17 + [80]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)4730634643120193536, *($17 + [152]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $44(($17 + [72]), $6)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($17 + [72])), [272])
	
.LABEL $label$2
	CALL eosio_assert(($10 == 0), [1008])
	*(($17 + [64])) = [0]
	*($17 + [48]) = (int_64)-1
	$1 = *($0)
	*($17 + [32]) = $1
	*($17 + [40]) = $1
	*($17 + [56]) = (int_64)0
	$10 = [0]
	$6 = CALL db_find_i64($1, $1, (int_64)-4157500442420445184, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $33(($17 + [32]), $6)
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)($17 + [32])), [272])
	
.LABEL $label$3
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [1056])
	$1 = *($0)
	*($17 + [160]) = ($17 + [152])
	CALL eosio_assert($6, [336])
	CALL $45(($17 + [32]), $10, $1, ($17 + [160]))
	$3 = *(($0 + [352]))
	$5 = *(($0 + [356]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$10 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$5:
	if ( (int_64)(*(*($10)) == 0) ){ goto $label$4 }
	$5 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = ($0 + [328])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$10), [272])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $46($10, $6)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$10), [272])
	
.LABEL $label$7
	$6 = *(($6 + [12]))
	$10 = *($6 + [8])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$1 = *($17 + [152])
	
.LOOP $label$10:
	if ( ((int_64)*($10) != (int_64)$1) ){ goto $label$11 }
	if ( ((int_32)(*(($10 + [8])) & [255]) != (int_32)[2]) ){ goto $label$9 }
	
.LABEL $label$11
	$10 = ($10 + [16])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$10 }
	$10 = $6
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$10 == (int_32)$6), [1104])
	
.LABEL $label$6
	$5 = ($0 + [8])
	$1 = (int_64)0
	$15 = (int_64)59
	$10 = [80]
	$11 = (int_64)0
	
.LOOP $label$12:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$13 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$12 }
	$1 = (int_64)0
	$15 = (int_64)59
	$10 = [112]
	$12 = (int_64)0
	
.LOOP $label$16:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$17 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$17
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$16 }
	$1 = (int_64)0
	$13 = (int_64)59
	$10 = [96]
	$14 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$25 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$25
	$15 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$21
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$20 }
	$1 = (int_64)0
	$15 = (int_64)59
	$10 = [112]
	$16 = (int_64)0
	
.LOOP $label$26:
	$13 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$27 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$27
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$13 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$26 }
	*(($17 + [8])) = [0]
	*($17) = (int_64)0
	$10 = CALL strlen([1152])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$33 }
	*($17) = ($10 << [1])
	$6 = ($17 | [1])
	if ( $10 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$4 = (($10 + [16]) & [-16])
	$6 = CALL $246($4)
	*($17) = ($4 | [1])
	*($17 + [8]) = $6
	*($17 + [4]) = $10
	
.LABEL $label$32
	CALL memcpy($6, [1152], $10)
	
.LABEL $label$31
	*(($6 + $10)) = [0]
	*(($6 = ($17 + [24]))) = *(($9 + [16]))
	$1 = *($17 + [152])
	*($17 + [16]) = *($9 + [8])
	$4 = *($17)
	*($17) = [0]
	$3 = *($17 + [8])
	$7 = *($17 + [4])
	*($17 + [4]) = [0]
	*($17 + [8]) = [0]
	*(($10 = CALL $246([16]))) = $12
	*($10 + [8]) = $14
	$8 = ($10 + [16])
	*($17 + [216]) = $8
	*($17 + [208]) = $10
	*($17 + [168]) = $1
	*($17 + [160]) = $16
	*($17 + [212]) = $8
	*(($17 + [184])) = *($6)
	*($17 + [176]) = *($17 + [16])
	*($17 + [192]) = $4
	*(($17 + [196])) = $7
	*(($10 = ($17 + [200]))) = $3
	CALL $6($11, (int_64)-3617168760277827584, ($17 + [208]), ($17 + [160]))
	if ( ((*($17 + [192]) & [1]) == 0) ){ goto $label$34 }
	CALL $247(*($10))
	
.LABEL $label$34
	$10 = *($17 + [208])
	if ( ($10 == 0) ){ goto $label$35 }
	*($17 + [212]) = $10
	CALL $247($10)
	
.LABEL $label$35
	if ( ((*($17) & [1]) == 0) ){ goto $label$36 }
	CALL $247(*(($17 + [8])))
	
.LABEL $label$36
	$10 = ($0 + [56])
	$6 = *($10)
	if ( ($6 == 0) ){ goto $label$37 }
	*($10) = ($6 + [-1])
	
.LABEL $label$37
	CALL $10(($0 + [208]), $5, *($0))
	CALL eosio_assert($2, [1184])
	CALL eosio_assert($2, [1232])
	$10 = CALL db_next_i64(*($9 + [28]), ($17 + [160]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$38 }
	CALL $7(($17 + [112]), $10)
	
.LABEL $label$38
	CALL $47(($17 + [112]), $9)
	$5 = *($17 + [56])
	if ( ($5 == 0) ){ goto $label$39 }
	$4 = ($17 + [60])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$41 }
	
.LOOP $label$42:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$43 }
	$0 = *($6 + [8])
	if ( ($0 == 0) ){ goto $label$44 }
	*(($6 + [12])) = $0
	CALL $247($0)
	
.LABEL $label$44
	CALL $247($6)
	
.LABEL $label$43
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$42 }
	$10 = *(($17 + [56]))
	goto $label$40 
	
.LABEL $label$41
	$10 = $5
	
.LABEL $label$40
	*($4) = $5
	CALL $247($10)
	
.LABEL $label$39
	$0 = *($17 + [96])
	if ( ($0 == 0) ){ goto $label$45 }
	$5 = ($17 + [100])
	$10 = *($5)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$47 }
	
.LOOP $label$48:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$50 }
	CALL $247(*(($6 + [16])))
	
.LABEL $label$50
	CALL $247($6)
	
.LABEL $label$49
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$48 }
	$10 = *(($17 + [96]))
	goto $label$46 
	
.LABEL $label$47
	$10 = $0
	
.LABEL $label$46
	*($5) = $0
	CALL $247($10)
	
.LABEL $label$45
	$0 = *($17 + [136])
	if ( ($0 == 0) ){ goto $label$51 }
	$5 = ($17 + [140])
	$10 = *($5)
	if ( ((int_32)$10 == (int_32)$0) ){ goto $label$53 }
	
.LOOP $label$54:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	CALL $247($6)
	
.LABEL $label$55
	if ( ((int_32)$0 != (int_32)$10) ){ goto $label$54 }
	$10 = *(($17 + [136]))
	goto $label$52 
	
.LABEL $label$53
	$10 = $0
	
.LABEL $label$52
	*($5) = $0
	CALL $247($10)
	
.LABEL $label$51
	*([0] + [4]) = ($17 + [224])
	return (unreachable)
	
.LABEL $label$30
	CALL $248($17)
}

void .FUNC _ZN3dao10condepositEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [112])
	*([0] + [4]) = $15
	CALL prints([816])
	CALL require_auth($1)
	$11 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [848])
	CALL eosio_assert((uint_64)(((int_64)*($2 + [8]) ^ (int_64)1448498688) <= (int_64)256), [912])
	$13 = (int_64)59
	$8 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	$11 = (int_64)0
	$10 = (int_64)59
	$8 = [96]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$10 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$3 = ($3 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$5 }
	$11 = (int_64)0
	$13 = (int_64)59
	$8 = [112]
	$14 = (int_64)0
	
.LOOP $label$11:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$12 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([128])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$18 }
	*($15) = ($8 << [1])
	$3 = ($15 | [1])
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$4 = (($8 + [16]) & [-16])
	$3 = CALL $246($4)
	*($15) = ($4 | [1])
	*($15 + [8]) = $3
	*($15 + [4]) = $8
	
.LABEL $label$17
	CALL memcpy($3, [128], $8)
	
.LABEL $label$16
	*(($3 + $8)) = [0]
	*(($3 = (($15 + [16]) + [8]))) = *(($2 + [8]))
	*($15 + [16]) = *($2)
	$4 = *($15)
	*($15) = [0]
	$5 = *($15 + [8])
	$6 = *($15 + [4])
	*($15 + [4]) = [0]
	*($15 + [8]) = [0]
	*(($8 = CALL $246([16]))) = $1
	*($8 + [8]) = $12
	$7 = ($8 + [16])
	*($15 + [40]) = $7
	*($15 + [32]) = $8
	*($15 + [72]) = $14
	*($15 + [64]) = $1
	*($15 + [36]) = $7
	*(($15 + [88])) = *($3)
	*($15 + [80]) = *($15 + [16])
	*($15 + [96]) = $4
	*(($15 + [100])) = $6
	*(($8 = ($15 + [104]))) = $5
	CALL $6($9, (int_64)-3617168760277827584, ($15 + [32]), ($15 + [64]))
	if ( ((*($15 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL $247(*($8))
	
.LABEL $label$19
	$8 = *($15 + [32])
	if ( ($8 == 0) ){ goto $label$20 }
	*($15 + [36]) = $8
	CALL $247($8)
	
.LABEL $label$20
	if ( ((*($15) & [1]) == 0) ){ goto $label$21 }
	CALL $247(*(($15 + [8])))
	
.LABEL $label$21
	*(($15 + [96])) = [0]
	*($15 + [80]) = (int_64)-1
	*($15 + [88]) = (int_64)0
	$11 = *($0)
	*($15 + [64]) = $11
	*($15 + [72]) = $1
	$8 = [0]
	$3 = CALL db_find_i64($11, $1, (int_64)6820307092563673088, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$22 }
	$8 = CALL $7(($15 + [64]), $3)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($15 + [64])), [272])
	
.LABEL $label$22
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [880])
	$13 = *($0)
	CALL eosio_assert($3, [336])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($15 + [64])), [384])
	CALL eosio_assert(((int_64)*($15 + [64]) == (int_64)CALL $fimport$13()), [432])
	$11 = *($8)
	$3 = ($8 + [16])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($3)), [496])
	$10 = ((int_64)*($8 + [8]) + (int_64)*($2))
	*($8 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [576])
	CALL eosio_assert(((int_64)$11 == (int_64)*($8)), [608])
	CALL eosio_assert([1], [672])
	CALL memcpy(($15 + [32]), $8, [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($15 + [32]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [672])
	CALL memcpy((($15 + [32]) + [16]), $3, [8])
	CALL db_update_i64(*($8 + [28]), $13, ($15 + [32]), [24])
	$8 = (($15 + [64]) + [16])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$23 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$2 = *($15 + [88])
	if ( ($2 == 0) ){ goto $label$24 }
	$0 = ($15 + [92])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL $247($3)
	
.LABEL $label$28
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$27 }
	$8 = *(($15 + [88]))
	goto $label$25 
	
.LABEL $label$26
	$8 = $2
	
.LABEL $label$25
	*($0) = $2
	CALL $247($8)
	
.LABEL $label$24
	*([0] + [4]) = ($15 + [112])
	return (unreachable)
	
.LABEL $label$15
	CALL $248($15)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $247($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $247($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $48(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$4 = *($1)
	$5 = *(($1 + [12]))
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	$9 = *(*($3))
	
.LOOP $label$3:
	if ( ((int_64)*($8) == (int_64)$9) ){ goto $label$2 }
	$8 = ($8 + [8])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$3 }
	$9 = $4
	goto $label$1 
	
.LABEL $label$2
	$9 = $4
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$9 = $4
	$3 = ($8 + [8])
	$6 = ($5 - $3)
	$5 = int_32($6 >> [3])
	if ( ($5 == 0) ){ goto $label$4 }
	CALL memmove($8, $3, $6)
	$9 = *($1)
	
.LABEL $label$4
	*(($1 + [12])) = ($8 + ($5 << [3]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$9), [608])
	$8 = [8]
	$3 = ($1 + [8])
	$6 = *($1 + [8])
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	$8 = (($7 & [-8]) + $8)
	
.LABEL $label$6
	if ( ($8 <= [513]) ){ goto $label$8 }
	$5 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$5 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$7
	*($10) = $5
	*($10 + [8]) = ($5 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [672])
	CALL memcpy($5, $1, [8])
	*($10 + [4]) = ($5 + [8])
	CALL $21($10, $3)
	CALL db_update_i64(*($1 + [24]), $2, $5, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([40])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	$4 = CALL $27(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($6 + [20]), *($4 + [4]), [4])
	*($6 + [28]) = $1
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $51(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($4 + [16])))
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	*(($5 = $4) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*((($5 + [8]) + [24])) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [208])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [688])
	*(($5 + [48])) = [0]
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [84]) = $0
	*($5 + [80]) = $0
	*($5 + [88]) = ($0 + $2)
	*($5 + [96]) = ($5 + [80])
	*($5 + [104]) = ($5 + [8])
	CALL $232(($5 + [104]), ($5 + [96]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $233(($5 + [80]), ($5 + [8]))
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($5 + [48])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [112])
	return [1]
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $234 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $260(($4 + [32]), ($1 + [16]))
	CALL $260(($4 + [16]), ($1 + [28]))
	CALL $260($4, ($1 + [40]))
	CALL $235($0, $3, $2, ($4 + [32]), ($4 + [16]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $247(*($4 + [8]))
	
.LABEL $label$1
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($4 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [48])
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*(($6 + [44])) = *(($1 + [28]))
	*(($5 = (($6 + [32]) + [8]))) = *(($1 + [24]))
	*($6 + [32]) = *($1 + [16])
	*($6 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $260(($6 + [16]), ($1 + [32]))
	$4 = *($1 + [48])
	*((($6 + [48]) + [8])) = *($5)
	*($6 + [48]) = *($6 + [32])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($5 = (($6 + [80]) + [8]))) = *((($6 + [48]) + [8]))
	*($6 + [80]) = *($6 + [48])
	CALL $260(($6 + [64]), ($6 + [16]))
	*(($6 + [8])) = *($5)
	*($6) = *($6 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $6), (int_32 ($6 + [64])), (int_32 $4), (int_64 $1))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($6 + [72]))
	
.LABEL $label$2
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($6 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $250($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $27(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [784])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $230(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $246(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $259($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $247($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $167($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [784])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [784])
	CALL memcpy(($7 + [8]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[80]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$4 = ((int_32)($7 - $6) / (int_32)[80])
	$5 = ($4 + $1)
	if ( ((uint_32)$5 >= (uint_32)[53687092]) ){ goto $label$3 }
	$7 = [53687091]
	$8 = ((int_32)($8 - $6) / (int_32)[80])
	if ( ((uint_32)$8 > (uint_32)[26843544]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $246(((int_32)$7 * (int_32)[80]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*((($7 = CALL memset($7, [0], [80])) + [24])) = [0]
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [52]) = [0]
	*(($7 + [56])) = [0]
	*(($7 + [60])) = [0]
	*($7 + [68]) = [0]
	*(($7 + [72])) = [0]
	*(($7 + [76])) = [0]
	$7 = (*($8) + [80])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[80]))
	$8 = ($8 + ((int_32)$4 * (int_32)[80]))
	$6 = $8
	
.LOOP $label$8:
	*((($7 = CALL memset($6, [0], [80])) + [24])) = [0]
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [52]) = [0]
	*(($7 + [56])) = [0]
	*(($7 + [60])) = [0]
	*($7 + [68]) = [0]
	*(($7 + [72])) = [0]
	*(($7 + [76])) = [0]
	$6 = ($7 + [80])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$3 = ([0] - $7)
	$7 = ($1 + [-28])
	
.LOOP $label$11:
	*(($8 + [-72])) = *(($7 + [-44]))
	*(($8 + [-80])) = *(($7 + [-52]))
	$1 = ($7 + [-36])
	*(($8 + [-64])) = *($1)
	$4 = ($7 + [-28])
	*(($8 + [-56])) = *($4)
	*($1) = [0]
	*(($7 + [-32])) = [0]
	*($4) = [0]
	*(($8 + [-32])) = *(($7 + [-4]))
	*(($8 + [-36])) = *(($7 + [-8]))
	*(($8 + [-44])) = *(($7 + [-16]))
	*(($8 + [-52])) = *(($7 + [-24]))
	*(($1 = ($8 + [-28]))) = [0]
	*(($4 = ($8 + [-24]))) = [0]
	*(($5 = ($8 + [-20]))) = [0]
	*($1) = *($7)
	*($4) = *(($7 + [4]))
	$1 = ($7 + [8])
	*($5) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	*(($8 + [-16])) = *(($7 + [12]))
	$1 = ($7 + [24])
	*(($8 + [-4])) = *($1)
	$4 = ($7 + [20])
	*(($8 + [-8])) = *($4)
	$5 = ($7 + [16])
	*(($8 + [-12])) = *($5)
	*($5) = [0]
	*($4) = [0]
	*($1) = [0]
	$8 = ($8 + [-80])
	$7 = ($7 + [-80])
	if ( ((int_32)($7 + $3) != (int_32)[-28]) ){ goto $label$11 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $7
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$12 }
	$1 = ([0] - $4)
	$7 = ($7 + [-64])
	
.LOOP $label$13:
	if ( ((*(($7 + [52])) & [1]) == 0) ){ goto $label$14 }
	CALL $247(*(($7 + [60])))
	
.LABEL $label$14
	$8 = *(($7 + [36]))
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [40])) = $8
	CALL $247($8)
	
.LABEL $label$15
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL $247(*(($7 + [8])))
	
.LABEL $label$16
	$7 = ($7 + [-80])
	if ( ((int_32)($7 + $1) != (int_32)[-64]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$1 }
	CALL $247($4)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$2 = *($0 + [4])
	$5 = ((int_32)($2 - $4) / (int_32)[80])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$1 }
	CALL $165($0, ($1 - $5))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$5 <= (uint_32)$1) ){ goto $label$2 }
	$1 = ((int_32)$1 * (int_32)[80])
	$3 = ($4 + $1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$4 = (([0] - $4) - $1)
	$1 = ($2 + [-64])
	
.LOOP $label$4:
	if ( ((*(($1 + [52])) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($1 + [60])))
	
.LABEL $label$5
	$5 = *(($1 + [36]))
	if ( ($5 == 0) ){ goto $label$6 }
	*(($1 + [40])) = $5
	CALL $247($5)
	
.LABEL $label$6
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($1 + [8])))
	
.LABEL $label$7
	$1 = ($1 + [-80])
	if ( ((int_32)($1 + $4) != (int_32)[-64]) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $3
	
.LABEL $label$2
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27($0, ($1 + [68]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [784])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $166($0, ($1 + [52]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$2 = CALL $163($0, ($1 + [8]))
	$4 = *($2 + [4])
	$6 = [0]
	$5 = (int_64)0
	$3 = ($2 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($2 + [8]))), [800])
	$4 = *($3)
	$0 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($0 >> [7]) ){ goto $label$1 }
	CALL $164(($1 + [88]), (CASTING uint_32)(uint_64 $5))
	$4 = *(($1 + [92]))
	$0 = *($1 + [88])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $163($2, $0)
	$0 = ($0 + [80])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	return $2
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($3), ($6 + [8]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23($0, ($1 + [68]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $161($0, ($1 + [52]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC strftime (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	return CALL __strftime_l($0, $1, $2, $3, [0])
}

void .FUNC $230 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL $260($4, $1)
	$2 = *($1 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $260(($4 + [16]), $4)
	CALL void $1((int_32 ($4 + [16])), (int_32 $2), (int_64 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $244 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12758]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12760])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12758]) = [1]
	$7 = ($7 << [16])
	*([0] + [12760]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12760])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12760]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12758]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12758]) = [1]
	$3 = ($3 << [16])
	*([0] + [12760]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12760])
	
.LABEL $label$8
	*([0] + [12760]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$9 = *($3 + [4])
	$4 = *($1)
	if ( ((int_32)*(*($3)) != (int_32)[1]) ){ goto $label$2 }
	$5 = (*($5) + [1])
	*(($5 = ($1 + [40]))) = $5
	$7 = ((float_64)(CASTING float_64)(uint_32 $5) / (float_64)(CASTING float_64)(uint_32 (*(($9 + [16])) + [3])))
	if ( (((float_64)$7 < (float_64)(float_64)0.6) | ((float_64)$7 != (float_64)$7)) ){ goto $label$1 }
	*(($1 + [56])) = [2]
	goto $label$1 
	
.LABEL $label$2
	$5 = (*($5) + [1])
	*(($5 = ($1 + [44]))) = $5
	$7 = ((float_64)(CASTING float_64)(uint_32 $5) / (float_64)(CASTING float_64)(uint_32 (*(($9 + [16])) + [3])))
	if ( (((float_64)$7 <= (float_64)(float_64)0.4) | ((float_64)$7 != (float_64)$7)) ){ goto $label$1 }
	*(($1 + [56])) = [1]
	
.LABEL $label$1
	*($10) = *(*($3 + [8]))
	*($10 + [8]) = *(*($3))
	$3 = ($1 + [64])
	$9 = *($3)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [68]))) ){ goto $label$4 }
	*($9) = *($10)
	*(($9 + [8])) = *(($10 + [8]))
	*($3) = (*($3) + [16])
	goto $label$3 
	
.LABEL $label$4
	CALL $170(($1 + [60]), $10)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($10) = [8]
	$5 = CALL $158($10, ($1 + [8]))
	$3 = *($5)
	$9 = *($1 + [88])
	$6 = *(($1 + [92]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($6 - $9) / (int_32)[80]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	*($5) = $3
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $158($5, $9)
	$9 = ($9 + [80])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = *($10)
	if ( ($9 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($10 + [4]) = $3
	*($10) = $3
	*($10 + [8]) = ($3 + $9)
	CALL $159($10, $1)
	CALL db_update_i64(*($1 + [104]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN3dao9agreedrawEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $2
	*($7 + [71]) = $3
	CALL require_auth($2)
	CALL $96($0, $2)
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$2 = *($0)
	*($7 + [24]) = $2
	*($7 + [32]) = $1
	$5 = [0]
	$3 = CALL db_find_i64($2, $1, (int_64)4921564679018381312, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $153(($7 + [24]), $3)
	CALL eosio_assert(((int_32)*($5 + [100]) == (int_32)($7 + [24])), [272])
	
.LABEL $label$1
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [3488])
	CALL eosio_assert((*(($5 + [56])) == 0), [3520])
	$6 = *(($5 + [64]))
	$3 = *(($5 + [60]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	$1 = *($7 + [72])
	
.LOOP $label$3:
	if ( ((int_64)*($3) == (int_64)$1) ){ goto $label$2 }
	$3 = ($3 + [16])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$3 }
	$3 = $6
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 == (int_32)$6), [3536])
	$1 = *($0)
	*($7 + [12]) = $0
	*($7 + [8]) = ($7 + [71])
	*($7 + [16]) = ($7 + [72])
	CALL eosio_assert($4, [336])
	CALL $169(($7 + [24]), $5, $1, ($7 + [8]))
	$5 = *($7 + [48])
	if ( ($5 == 0) ){ goto $label$4 }
	$0 = ($7 + [52])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $157($6)
	CALL $247($6)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($7 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $5
	CALL $247($3)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [80])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12656])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12464]
	$1 = (((int_32)$2 * (int_32)[12]) + [12464])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC _ZN3dao7reportsEymNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	*($8 + [32]) = $1
	CALL prints([3648])
	CALL require_auth($4)
	*(($8 + [24])) = [0]
	*(($8 + [28])) = [0]
	*($8 + [20]) = [0]
	*($8 + [16]) = $2
	CALL $249((($8 + [16]) | [4]), $3)
	$5 = *(($0 + [312]))
	$7 = *(($0 + [316]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	$3 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$1 }
	$7 = $3
	$2 = ($3 + [-24])
	$3 = $2
	if ( ((int_32)($2 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [288])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$3), [272])
	$1 = *($0)
	if ( $2 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$2 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)-4995815919012806656, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL $176($3, $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$3), [272])
	$1 = *($0)
	
.LABEL $label$6
	*($8 + [48]) = ($8 + [16])
	CALL eosio_assert([1], [336])
	CALL $179($3, $2, $1, ($8 + [48]))
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	
.LABEL $label$4
	*($8 + [12]) = ($8 + [16])
	*($8 + [8]) = ($8 + [32])
	*($8 + [72]) = $1
	CALL eosio_assert(((int_64)*(($0 + [288])) == (int_64)CALL $fimport$13()), [144])
	*($8 + [48]) = $3
	*($8 + [52]) = ($8 + [8])
	*($8 + [56]) = ($8 + [72])
	*(($2 = CALL $246([32])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [20]) = $3
	CALL $177(($8 + [48]), $2)
	*($8 + [64]) = $2
	$1 = *($2)
	*($8 + [48]) = $1
	$7 = *($2 + [24])
	*($8 + [44]) = $7
	$6 = ($0 + [316])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [320]))) ){ goto $label$9 }
	*($3 + [8]) = $1
	*($3 + [16]) = $7
	*($8 + [64]) = [0]
	*($3) = $2
	*($6) = ($3 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $178(($0 + [312]), ($8 + [64]), ($8 + [48]), ($8 + [44]))
	
.LABEL $label$8
	$7 = *($8 + [64])
	*($8 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$6 = *($7 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	$0 = ($7 + [12])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$12 }
	$2 = ([0] - $6)
	$3 = ($3 + [-12])
	
.LOOP $label$13:
	if ( ((*($3) & [1]) == 0) ){ goto $label$14 }
	CALL $247(*(($3 + [8])))
	
.LABEL $label$14
	$3 = ($3 + [-16])
	if ( ((int_32)($3 + $2) != (int_32)[-12]) ){ goto $label$13 }
	$3 = *(($7 + [8]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $6
	
.LABEL $label$11
	*($0) = $6
	CALL $247($3)
	
.LABEL $label$10
	CALL $247($7)
	
.LABEL $label$3
	if ( ((*($8 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL $247(*(($8 + [28])))
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [80])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $243([4272], $0)
}

int_32 .FUNC __secs_to_tm (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = [-1]
	if ( ((uint_64)((int_64)$0 + (int_64)67908586910515200) > (uint_64)(int_64)135817173789408000) ){ goto $label$1 }
	$0 = ((int_64)$0 + (int_64)-951868800)
	$4 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)86400))
	$0 = ((int_64)(CASTING int_64)(int_32 int_32($4 >> [31])) + (int_64)((int_64)$0 / (int_64)86400))
	$10 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)146097))
	$9 = ( ($10 + [146097]) ? $10 : ((int_32)$10 < (int_32)[0]) )
	$6 = (((int_32)$9 / (int_32)[36524]) - (($9 + [-146096]) <= [36524]))
	$9 = (((int_32)$6 * (int_32)[-36524]) + $9)
	$2 = (((int_32)$9 / (int_32)[1461]) - (($9 + [-36525]) <= [1461]))
	$9 = (((int_32)$2 * (int_32)[-1461]) + $9)
	$8 = (((int_32)$9 / (int_32)[365]) - (($9 + [-1460]) <= [365]))
	$3 = (((int_32)$8 * (int_32)[-365]) + $9)
	$5 = ((int_64)((int_64)$0 + (int_64)3) % (int_64)7)
	$0 = ((int_64)(CASTING uint_64)(uint_32 int_32($10 >> [31])) + (int_64)((int_64)$0 / (int_64)146097))
	$7 = [0]
	if ( $8 ){ goto $label$2 }
	$7 = (($6 == 0) | ((int_32)$2 != (int_32)[0]))
	
.LABEL $label$2
	$0 = ((int_64)(CASTING int_64)(int_32 ((($2 << [2]) + ((int_32)$6 * (int_32)[100])) + $8)) + (int_64)((int_64)((int_64)$0 << (int_64)32) >> (int_64)32) * (int_64)400))
	$9 = $3
	$10 = [0]
	if ( ((int_32)$3 < (int_32)[31]) ){ goto $label$3 }
	$10 = [0]
	$8 = [31]
	$9 = $3
	
.LOOP $label$4:
	$6 = ($10 + [15377])
	$10 = ($10 + [1])
	$8 = *($6)
	$9 = ($9 - $8)
	if ( ((int_32)$9 >= (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = ((int_32)$10 > (int_32)[9])
	$0 = ((int_64)$0 + (int_64)(CASTING uint_64)(uint_32 $8))
	if ( ((uint_64)((int_64)$0 + (int_64)2147483748) > (uint_64)(int_64)4294967295) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $5)
	*($1 + [24]) = ( ($6 + [7]) ? $6 : ((int_32)$6 < (int_32)[0]) )
	$11 = ( [366] ? [365] : $7 )
	$6 = (($3 + $7) + [59])
	*($1 + [28]) = ($6 - ( [0] ? $11 : ((int_32)$6 < (int_32)$11) ))
	*($1 + [20]) = ((int_64)$0 + (int_64)100)
	*($1 + [12]) = ($9 + [1])
	$9 = ( ($4 + [86400]) ? $4 : ((int_32)$4 < (int_32)[0]) )
	*($1 + [8]) = ((int_32)$9 / (int_32)[3600])
	*($1 + [4]) = ((int_32)((int_32)$9 / (int_32)[60]) % (int_32)[60])
	*($1 + [16]) = (( ($10 + [-12]) ? $10 : $8 ) + [2])
	*($1) = ((int_32)$9 % (int_32)[60])
	$11 = [0]
	
.LABEL $label$1
	return $11
}

int_32 .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $244($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12672])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	$4 = ($1 + [8])
	CALL $249($4, *($5 + [4]))
	*($1 + [20]) = [0]
	$5 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [12])
	$6 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [20])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [672])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	$4 = CALL $23($8, $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)4730634643120193536, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN3dao10updatecounERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	$15 = [0]
	*(($16 + [128])) = [0]
	*($16 + [112]) = (int_64)-1
	*($16 + [120]) = (int_64)0
	$7 = *($0)
	*($16 + [96]) = $7
	*($16 + [104]) = $7
	*($16 + [88]) = [0]
	*($16 + [80]) = (int_64)0
	$5 = CALL db_lowerbound_i64($7, $7, (int_64)4730634643120193536, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$15 = CALL $44(($16 + [96]), $5)
	
.LOOP $label$3:
	$7 = *($15)
	*(($6 = (($16 + [40]) + [8]))) = *(($15 + [20]))
	*($16 + [40]) = $7
	$5 = *($16 + [84])
	if ( ((uint_32)$5 >= (uint_32)*((($16 + [80]) + [8]))) ){ goto $label$5 }
	*($5) = *($16 + [40])
	*(($5 + [8])) = *($6)
	*($16 + [84]) = ($5 + [16])
	goto $label$4 
	
.LABEL $label$5
	CALL $60(($16 + [80]), ($16 + [40]))
	
.LABEL $label$4
	CALL eosio_assert([1], [1232])
	$15 = CALL db_next_i64(*($15 + [28]), ($16 + [40]))
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$6 }
	$15 = CALL $44(($16 + [96]), $15)
	goto $label$3 
	
.LABEL $label$6
	$15 = *($16 + [80])
	$5 = *($16 + [84])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((uint_32)int_32(($5 - $15) >> [4]) >= (uint_32)(*(($0 + [16])) + [2])), [1600])
	CALL $61(*($16 + [80]), *($16 + [84]))
	$14 = *(($0 + [352]))
	$6 = *(($0 + [356]))
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$7 }
	$15 = ($6 + [-24])
	$4 = ([0] - $14)
	
.LOOP $label$8:
	if ( (int_64)(*(*($15)) == 0) ){ goto $label$7 }
	$6 = $15
	$5 = ($15 + [-24])
	$15 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = ($0 + [328])
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$10 }
	$15 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)$5), [272])
	goto $label$9 
	
.LABEL $label$10
	$15 = [0]
	$6 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$15 = CALL $46($5, $6)
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)$5), [272])
	
.LABEL $label$9
	$6 = *($16 + [80])
	$4 = *($16 + [84])
	CALL prints([1664])
	CALL printui((CASTING uint_64)(uint_32 int_32(($4 - $6) >> [4])))
	$4 = [0]
	$6 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($6, [1680])
	$7 = *($0)
	*($16 + [40]) = $0
	*($16 + [44]) = ($16 + [80])
	CALL eosio_assert($6, [336])
	CALL $62($5, $15, $7, ($16 + [40]))
	$15 = ($0 + [32])
	*(($0 + [20])) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)*($15))
	*(($0 + [24])) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)*($15))
	$15 = CALL db_lowerbound_i64(*($16 + [96]), *(($16 + [104])), (int_64)4730634643120193536, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $44(($16 + [96]), $15)
	
.LOOP $label$12:
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1232])
	$15 = [0]
	$6 = CALL db_next_i64(*($5 + [28]), ($16 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$15 = CALL $44(($16 + [96]), $6)
	
.LABEL $label$13
	CALL $63(($16 + [96]), $5)
	$5 = $15
	if ( $15 ){ goto $label$12 }
	
.LABEL $label$11
	*((($16 + [40]) + [32])) = [0]
	*($16 + [56]) = (int_64)-1
	$7 = *($0)
	*($16 + [40]) = $7
	*($16 + [48]) = $7
	*($16 + [64]) = (int_64)0
	$15 = CALL db_find_i64($7, $7, (int_64)-4157500442420445184, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$14 }
	$4 = CALL $33(($16 + [40]), $15)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)($16 + [40])), [272])
	
.LABEL $label$14
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1744])
	$3 = *(($4 + [12]))
	$14 = *($4 + [8])
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$15 }
	$8 = ($16 + [8])
	$9 = ($16 + [16])
	$10 = ($16 + [24])
	$12 = ($16 + [28])
	$13 = ($16 + [32])
	
.LOOP $label$16:
	$7 = *($14)
	*($8) = $7
	*($9) = (int_64)-1
	*($10) = [0]
	$11 = *($0)
	*($16) = $11
	*($12) = [0]
	*($13) = [0]
	$15 = CALL db_find_i64($11, $7, (int_64)-2507753063930920960, *($14))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$22 }
	$15 = CALL $64($16, $15)
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)$16), [272])
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1232])
	$5 = CALL db_next_i64(*($15 + [24]), ($16 + [136]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$23 }
	CALL $64($16, $5)
	
.LABEL $label$23
	CALL $65($16, $15)
	$4 = *($10)
	if ( ($4 == 0) ){ goto $label$17 }
	$15 = *($12)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$24:
	$15 = ($15 + [-24])
	$5 = *($15)
	*($15) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	$6 = *($5 + [8])
	if ( ($6 == 0) ){ goto $label$26 }
	*(($5 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$26
	CALL $247($5)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$24 }
	$15 = *($10)
	goto $label$20 
	
.LABEL $label$22
	$4 = *($10)
	if ( ($4 == 0) ){ goto $label$17 }
	$15 = *($12)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$19 }
	
.LOOP $label$27:
	$15 = ($15 + [-24])
	$5 = *($15)
	*($15) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	$6 = *($5 + [8])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($5 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$29
	CALL $247($5)
	
.LABEL $label$28
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$27 }
	$15 = *($10)
	goto $label$18 
	
.LABEL $label$21
	$15 = $4
	
.LABEL $label$20
	*($12) = $4
	CALL $247($15)
	goto $label$17 
	
.LABEL $label$19
	$15 = $4
	
.LABEL $label$18
	*($12) = $4
	CALL $247($15)
	
.LABEL $label$17
	$14 = ($14 + [8])
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$15
	*(($0 + [72])) = [0]
	CALL $10(($0 + [208]), $2, *($0))
	$4 = *($16 + [64])
	if ( ($4 == 0) ){ goto $label$30 }
	$14 = ($16 + [68])
	$15 = *($14)
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$15 = ($15 + [-24])
	$5 = *($15)
	*($15) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	$6 = *($5 + [8])
	if ( ($6 == 0) ){ goto $label$35 }
	*(($5 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$35
	CALL $247($5)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$15) ){ goto $label$33 }
	$15 = *(($16 + [64]))
	goto $label$31 
	
.LABEL $label$32
	$15 = $4
	
.LABEL $label$31
	*($14) = $4
	CALL $247($15)
	
.LABEL $label$30
	$15 = *($16 + [80])
	if ( ($15 == 0) ){ goto $label$36 }
	*($16 + [84]) = $15
	CALL $247($15)
	
.LABEL $label$36
	$6 = *($16 + [120])
	if ( ($6 == 0) ){ goto $label$37 }
	$4 = ($16 + [124])
	$15 = *($4)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$39 }
	
.LOOP $label$40:
	$15 = ($15 + [-24])
	$5 = *($15)
	*($15) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$42 }
	CALL $247(*(($5 + [16])))
	
.LABEL $label$42
	CALL $247($5)
	
.LABEL $label$41
	if ( ((int_32)$6 != (int_32)$15) ){ goto $label$40 }
	$15 = *(($16 + [120]))
	goto $label$38 
	
.LABEL $label$39
	$15 = $6
	
.LABEL $label$38
	*($4) = $6
	CALL $247($15)
	
.LABEL $label$37
	*([0] + [4]) = ($16 + [144])
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13408])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13504]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13504]
	return .LABEL $label$1
}

void .FUNC $270 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $240 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$11 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	CALL $260(($13 + [64]), $2)
	CALL $260(($13 + [48]), $4)
	CALL $260(($13 + [32]), $5)
	CALL $260(($13 + [16]), $8)
	CALL $260($13, $9)
	CALL void $11((int_32 $1), (int_64 ($13 + [64])), (int_32 $3), (int_32 ($13 + [48])), (int_32 ($13 + [32])), (int_32 $6), (int_64 $7), (int_64 ($13 + [16])), (int_32 $13), (int_32 $10), (int_32 $0))
	if ( ((*($13) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($13 + [8]))
	
.LABEL $label$2
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($13 + [24]))
	
.LABEL $label$3
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $247(*($13 + [40]))
	
.LABEL $label$4
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*($13 + [56]))
	
.LABEL $label$5
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*($13 + [72]))
	
.LABEL $label$6
	*([0] + [4]) = ($13 + [80])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $246(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $259($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $247($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $247(*(($1 + [16])))
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $247($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN3dao11councliinitERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	CALL prints([1440])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	*($11 + [32]) = (int_64)-1
	$6 = [0]
	*($11 + [40]) = [0]
	$7 = *($0)
	*($11 + [16]) = $7
	$8 = *($1)
	*($11 + [24]) = $8
	*(($11 + [44])) = [0]
	*(($11 + [48])) = [0]
	$2 = CALL db_find_i64($7, $8, (int_64)6820307092563673088, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $7(($11 + [16]), $2) + [24]) == (int_32)($11 + [16])), [272])
	$6 = [1]
	
.LABEL $label$5
	CALL eosio_assert($6, [1472])
	$3 = *(($0 + [352]))
	$5 = *(($0 + [356]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	$6 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$7:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$6 }
	$5 = $6
	$2 = ($6 + [-24])
	$6 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [328])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$13 }
	$2 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$6), [272])
	$8 = *($0)
	if ( $2 ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$2 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$11 }
	$2 = CALL $46($6, $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$6), [272])
	$8 = *($0)
	
.LABEL $label$12
	*($11 + [64]) = $1
	CALL eosio_assert([1], [336])
	CALL $54($6, $2, $8, ($11 + [64]))
	$5 = *($11 + [40])
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = *($0)
	
.LABEL $label$10
	*($11 + [8]) = $1
	*($11 + [88]) = $8
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL $fimport$13()), [144])
	*($11 + [64]) = $6
	*($11 + [68]) = ($11 + [8])
	*($11 + [72]) = ($11 + [88])
	*(($2 = CALL $246([32])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [20]) = $6
	CALL $53(($11 + [64]), $2)
	*($11 + [80]) = $2
	$8 = *($2)
	*($11 + [64]) = $8
	$5 = *($2 + [24])
	*($11 + [60]) = $5
	$4 = ($0 + [356])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [360]))) ){ goto $label$15 }
	*($6 + [8]) = $8
	*($6 + [16]) = $5
	*($11 + [80]) = [0]
	*($6) = $2
	*($4) = ($6 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $49(($0 + [352]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$14
	$6 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	$2 = *($6 + [8])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($6 + [12])) = $2
	CALL $247($2)
	
.LABEL $label$17
	CALL $247($6)
	
.LABEL $label$16
	$5 = *($11 + [40])
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$4 = ($11 + [44])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $247($2)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($11 + [40]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $5
	
.LABEL $label$18
	*($4) = $5
	CALL $247($6)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = (int_64)0
	$2 = *($0)
	$6 = *($6)
	*(($9 = $10) + [8]) = [0]
	*($9) = *($6)
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($9)
	*(($8 + [8])) = *(($9 + [8]))
	$8 = (*($6) + [16])
	*($6) = $8
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $55($5, $9)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)uint_32(($4 + [-16]) >> [4]) * (int_32)[9]) + $6) + [9])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $56($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)4986949636963958784, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$4 = *($1)
	$7 = ($1 + [12])
	$6 = *($7)
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$1 }
	$9 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)*($8) == (int_64)$9) ){ goto $label$1 }
	$8 = ($8 + [16])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$2 }
	$8 = $6
	
.LABEL $label$1
	$5 = ($1 + [8])
	CALL eosio_assert(((int_32)$8 == (int_32)$6), [1504])
	*($10 + [8]) = [0]
	*($10) = *(*($3))
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [16]))) ){ goto $label$4 }
	*($8) = *($10)
	*(($8 + [8])) = *(($10 + [8]))
	*(($8 = ($1 + [12]))) = (*($8) + [16])
	goto $label$3 
	
.LABEL $label$4
	CALL $55($5, $10)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$8 = [8]
	$3 = *(($1 + [8]))
	$6 = *(($1 + [12]))
	$7 = ($6 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$6 }
	$8 = ((((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[9]) + $8) + [9])
	
.LABEL $label$6
	if ( ($8 <= [513]) ){ goto $label$8 }
	$6 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$7
	*($10) = $6
	*($10 + [8]) = ($6 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [672])
	CALL memcpy($6, $1, [8])
	*($10 + [4]) = ($6 + [8])
	CALL $56($10, $5)
	CALL db_update_i64(*($1 + [24]), $2, $6, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($3), ($6 + [8]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN3dao8compaignERKyRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL require_auth(*($1))
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = [0]
	$5 = *($0)
	*($7 + [48]) = $5
	$6 = *($1)
	*($7 + [56]) = $6
	*(($7 + [76])) = [0]
	*((($7 + [48]) + [32])) = [0]
	$4 = [0]
	$3 = CALL db_find_i64($5, $6, (int_64)6820307092563673088, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $7(($7 + [48]), $3) + [24]) == (int_32)($7 + [48])), [272])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [1536])
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$6 = *($0)
	*($7 + [8]) = $6
	*($7 + [16]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)4730634643120193536, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $44(($7 + [8]), $4) + [24]) == (int_32)($7 + [8])), [272])
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	CALL eosio_assert($4, [1568])
	$6 = *($0)
	*($7 + [4]) = $2
	*($7) = $1
	*($7 + [120]) = $6
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$13()), [144])
	*($7 + [100]) = $7
	*($7 + [96]) = ($7 + [8])
	*($7 + [104]) = ($7 + [120])
	*(($1 = CALL $246([40])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [24]) = ($7 + [8])
	CALL $58(($7 + [96]), $1)
	*($7 + [112]) = $1
	$6 = *($1)
	*($7 + [96]) = $6
	$2 = *($1 + [28])
	*($7 + [92]) = $2
	$3 = ($7 + [36])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($7 + [40]))) ){ goto $label$5 }
	*($4 + [8]) = $6
	*($4 + [16]) = $2
	*($7 + [112]) = [0]
	*($4) = $1
	*($3) = ($4 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $51(($7 + [32]), ($7 + [112]), ($7 + [96]), ($7 + [92]))
	
.LABEL $label$4
	$1 = *($7 + [112])
	*($7 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($1 + [16])))
	
.LABEL $label$7
	CALL $247($1)
	
.LABEL $label$6
	*(($1 = ($0 + [72]))) = (*($1) + [1])
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$8 }
	$2 = ($7 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL $247(*(($1 + [16])))
	
.LABEL $label$13
	CALL $247($1)
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($7 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $4
	
.LABEL $label$9
	*($2) = $4
	CALL $247($0)
	
.LABEL $label$8
	$4 = *($7 + [72])
	if ( ($4 == 0) ){ goto $label$14 }
	$2 = ($7 + [76])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $247($1)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($7 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $4
	
.LABEL $label$15
	*($2) = $4
	CALL $247($0)
	
.LABEL $label$14
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $247 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*(($1 + [56])) = [3]
	$3 = *($1)
	*(($6 = ($1 + [36]))) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = ($1 + [8])
	$8 = *(($1 + [92]))
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [96]))) ){ goto $label$3 }
	*($8) = *($10)
	*(($8 + [8])) = *(($10 + [8]))
	CALL $260(($8 + [16]), ($1 + [24]))
	*(($8 + [48])) = *(($6 + [20]))
	*(($8 + [44])) = *(($6 + [16]))
	*(($8 + [36])) = *(($6 + [8]))
	*($8 + [28 align=4]) = *($6)
	*($8 + [52]) = [0]
	*(($8 + [56])) = [0]
	*(($8 + [60])) = [0]
	$6 = (*(($1 + [64])) - *(($1 + [60])))
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = CALL $246($6)
	*(($8 + [52])) = $6
	*(($8 + [60])) = ($6 + ($7 << [4]))
	*(($7 = ($8 + [56]))) = $6
	$4 = *(($1 + [60]))
	$5 = (*(($1 + [64])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $4, $5)
	*($7) = (*($7) + $5)
	
.LABEL $label$4
	*($8 + [64]) = *(($1 + [72]))
	CALL $260(($8 + [68]), ($1 + [76]))
	*(($8 = ($1 + [92]))) = (*($8) + [80])
	$8 = ($1 + [88])
	goto $label$2 
	
.LABEL $label$3
	$8 = ($1 + [88])
	CALL $174($8, $10)
	
.LABEL $label$2
	*(($1 + [64])) = *(($1 + [60]))
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [608])
	*($11) = [8]
	$6 = CALL $158($11, $10)
	$10 = *($8)
	$7 = *(($1 + [92]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($7 - $10) / (int_32)[80]))
	$8 = *($6)
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	*($6) = $8
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $158($6, $10)
	$10 = ($10 + [80])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$7 }
	
.LABEL $label$6
	$10 = *($11)
	if ( ($10 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($11 + [4]) = $8
	*($11) = $8
	*($11 + [8]) = ($8 + $10)
	CALL $159($11, $1)
	CALL db_update_i64(*($1 + [104]), $2, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $259(($8 + [52]))
}

void .FUNC _ZN3dao11drawrequestEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	*($11 + [64]) = $1
	*($11 + [56]) = $2
	CALL require_auth($2)
	CALL $96($0, $2)
	$6 = *(($0 + [272]))
	$8 = *(($0 + [276]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$1 }
	$10 = ($8 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$8 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [248])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	$10 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$9), [272])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $79($9, $8)
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$9), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2688])
	CALL eosio_assert((((*($10 + [44]) + [-3]) & [255]) <= [2]), [3360])
	CALL eosio_assert(((uint_64)*($3) <= (uint_64)*($10 + [136])), [3392])
	*(($9 = ($11 + [48]))) = [0]
	*($11 + [32]) = (int_64)-1
	*($11 + [40]) = (int_64)0
	$2 = *($0)
	*($11 + [16]) = $2
	*($11 + [24]) = $1
	$10 = CALL db_find_i64($2, $1, (int_64)4921564679018381312, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $153(($11 + [16]), $10)
	CALL eosio_assert(((int_32)*($10 + [100]) == (int_32)($11 + [16])), [272])
	CALL eosio_assert(((int_32)*(($10 + [56])) != (int_32)[0]), [3408])
	$1 = *($0)
	*($11 + [4]) = $3
	*($11 + [8]) = $4
	*($11) = ($11 + [56])
	CALL eosio_assert([1], [336])
	CALL $154(($11 + [16]), $10, $1, $11)
	$8 = *($11 + [40])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = *($0)
	*($11 + [8]) = $3
	*($11 + [12]) = $4
	*($11 + [4]) = ($11 + [56])
	*($11) = ($11 + [64])
	*($11 + [104]) = $1
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)CALL $fimport$13()), [144])
	*($11 + [84]) = $11
	*($11 + [80]) = ($11 + [16])
	*($11 + [88]) = ($11 + [104])
	*(($10 = CALL $246([112])) + [32]) = [0]
	*($10 + [24 align=4]) = (int_64)0
	*($10 + [60]) = [0]
	*($10 + [64]) = [0]
	*($10 + [68]) = [0]
	*($10 + [76]) = [0]
	*($10 + [80]) = [0]
	*($10 + [84]) = [0]
	*($10 + [88]) = [0]
	*($10 + [92]) = [0]
	*($10 + [96]) = [0]
	*($10 + [100]) = ($11 + [16])
	CALL $155(($11 + [80]), $10)
	*($11 + [96]) = $10
	$1 = *($10)
	*($11 + [80]) = $1
	$7 = *($10 + [104])
	*($11 + [76]) = $7
	$0 = ($11 + [44])
	$8 = *($0)
	if ( ((uint_32)$8 >= (uint_32)*($9)) ){ goto $label$9 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($11 + [96]) = [0]
	*($8) = $10
	*($0) = ($8 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $156(($11 + [40]), ($11 + [96]), ($11 + [80]), ($11 + [76]))
	
.LABEL $label$8
	$10 = *($11 + [96])
	*($11 + [96]) = [0]
	if ( ($10 == 0) ){ goto $label$10 }
	CALL $157($10)
	CALL $247($10)
	
.LABEL $label$10
	$8 = *($11 + [40])
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($11 + [44])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $157($9)
	CALL $247($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$13 }
	$10 = *(($11 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$10 = $8
	
.LABEL $label$11
	*($7) = $8
	CALL $247($10)
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [112])
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $246([112])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [60]) = [0]
	*($6 + [64]) = [0]
	*($6 + [68]) = [0]
	*($6 + [76]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84]) = [0]
	*($6 + [88]) = [0]
	*($6 + [92]) = [0]
	*($6 + [96]) = [0]
	*($6 + [100]) = $0
	CALL $162(($8 + [32]), $6)
	*($6 + [104]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [104])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $156(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $157($4)
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $151 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*((($13 = $12) + [40])) = [0]
	*($13 + [32]) = (int_64)0
	$4 = *($1)
	*($13 + [24]) = $4
	$7 = (($13 + [24]) + [8])
	$10 = (*(($1 + [12])) - *($1 + [8]))
	$5 = int_32($10 >> [3])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$10 = CALL $246($10)
	*((($13 + [24]) + [8])) = $10
	*(($8 = (($13 + [24]) + [12]))) = $10
	$9 = ($10 + ($5 << [3]))
	*(($13 + [40])) = $9
	$6 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($10, $6, $5)
	$5 = ($10 + $5)
	*($8) = $5
	goto $label$5 
	
.LABEL $label$7
	$3 = *($3)
	goto $label$4 
	
.LABEL $label$6
	$5 = $10
	
.LABEL $label$5
	$3 = *($3)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$4 }
	*(($13 + [36])) = ($5 + [8])
	*($5) = *($3)
	if ( $10 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $77($7, $3)
	$10 = *($13 + [32])
	if ( ($10 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($13 + [36])) = $10
	CALL $247($10)
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$10 = [8]
	$7 = *(($1 + [8]))
	$3 = *(($1 + [12]))
	$9 = ($3 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$8:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	$10 = (($9 & [-8]) + $10)
	
.LABEL $label$9
	if ( ($10 <= [513]) ){ goto $label$11 }
	$12 = CALL malloc($10)
	goto $label$10 
	
.LABEL $label$11
	$12 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$10
	*($13 + [8]) = $12
	*($13 + [16]) = ($12 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [672])
	CALL memcpy($12, $1, [8])
	*($13 + [12]) = ($12 + [8])
	CALL $21(($13 + [8]), $5)
	CALL db_update_i64(*($1 + [24]), $2, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$12 }
	CALL free($12)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($13 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $259($7)
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $157($1)
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $247($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $157 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [88])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [92])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-64])
	
.LOOP $label$4:
	if ( ((*(($5 + [52])) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($5 + [60])))
	
.LABEL $label$5
	$3 = *(($5 + [36]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [40])) = $3
	CALL $247($3)
	
.LABEL $label$6
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($5 + [8])))
	
.LABEL $label$7
	$5 = ($5 + [-80])
	if ( ((int_32)($5 + $2) != (int_32)[-64]) ){ goto $label$4 }
	$5 = *(($0 + [88]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $247($5)
	
.LABEL $label$1
	if ( ((*(($0 + [76])) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*(($0 + [84])))
	
.LABEL $label$8
	$5 = *(($0 + [60]))
	if ( ($5 == 0) ){ goto $label$9 }
	*(($0 + [64])) = $5
	CALL $247($5)
	
.LABEL $label$9
	if ( ((*(($0 + [24])) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($0 + [32])))
	
.LABEL $label$10
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [8]) = *(*($3))
	*(($1 + [16])) = *(*($3 + [4]))
	$4 = *($1)
	CALL $249(($1 + [24]), *($3 + [8]))
	$7 = CALL current_time()
	$8 = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [72])) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	$7 = (int_64)59
	$3 = [3472]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($3)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [165])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*(($1 + [56])) = [0]
	*(($1 + [48])) = $9
	*(($1 + [64])) = *(($1 + [60]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($12) = [8]
	$5 = CALL $158($12, ($1 + [8]))
	$3 = *($5)
	$11 = *($1 + [88])
	$6 = *(($1 + [92]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($6 - $11) / (int_32)[80]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	*($5) = $3
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $158($5, $11)
	$11 = ($11 + [80])
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$7 }
	
.LABEL $label$6
	$11 = *($12)
	if ( ($11 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($11)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $11)
	CALL $159($12, $1)
	CALL db_update_i64(*($1 + [104]), $2, $3, $11)
	if ( ($11 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	*($1 + [8]) = *(*($5 + [4]))
	*(($1 + [16])) = *(*($5 + [8]))
	CALL $249(($1 + [24]), *($5 + [12]))
	$6 = CALL current_time()
	$7 = (int_64)0
	*(($1 + [40])) = (int_64)0
	*(($1 + [72])) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	$6 = (int_64)59
	$5 = [3472]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($5)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [165])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*(($1 + [56])) = [0]
	*(($1 + [48])) = $8
	*($11) = [8]
	$3 = CALL $158($11, ($1 + [8]))
	$5 = *($3)
	$10 = *($1 + [88])
	$4 = *(($1 + [92]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $10) / (int_32)[80]))
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	*($3) = $5
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $158($3, $10)
	$10 = ($10 + [80])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$7 }
	
.LABEL $label$6
	$10 = *($11)
	if ( ($10 <= [513]) ){ goto $label$9 }
	$5 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$8
	*($11 + [4]) = $5
	*($11) = $5
	*($11 + [8]) = ($5 + $10)
	CALL $159($11, $1)
	$7 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($2 + [8]), (int_64)4921564679018381312, *(*($0 + [8])), $7, $5, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($5)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$5 = (*($0) + [16])
	*($0) = $5
	$3 = *($1 + [16])
	$6 = (CASTING uint_64)(uint_32 ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($0) = $5
	$3 = *(($1 + [16]))
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($3 + $5)
	*($0) = $5
	
.LABEL $label$2
	*($0) = ($5 + [21])
	$5 = ($5 + [30])
	$2 = *($1 + [52])
	$3 = *(($1 + [56]))
	$4 = ($3 - $2)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	$5 = (((int_32)uint_32(($4 + [-16]) >> [4]) * (int_32)[9]) + $5)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($5 + [-9])
	
.LABEL $label$4
	$5 = ($5 + [4])
	*($0) = $5
	$3 = *($1 + [68])
	$6 = (CASTING uint_64)(uint_32 ( *(($1 + [72])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($0) = $5
	$1 = *(($1 + [68]))
	$1 = ( *(($1 + [72])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$7 }
	*($0) = ($1 + $5)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$2 = CALL $160($0, ($1 + [8]))
	$5 = *($2 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [92])) - *($1 + [88])) / (int_32)[80]))
	$0 = ($2 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$4 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($4) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($2 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($0), ($7 + [15]), [1])
	$5 = (*($0) + [1])
	*($0) = $5
	if ( $4 ){ goto $label$1 }
	$5 = *(($1 + [92]))
	$0 = *(($1 + [88]))
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $160($2, $0)
	$0 = ($0 + [80])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $2
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$3 = *($3)
	$4 = *($1)
	$8 = ($1 + [12])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($6) = *($3)
	CALL $260(($6 + [4]), ($3 + [4]))
	*($8) = (*($8) + [16])
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	CALL $180($7, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$8 = *($7)
	$5 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 int_32(($5 - $8) >> [4]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = *($8 + [4])
	$6 = ( *(($8 + [8])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$3 = (($6 + $3) + [4])
	$9 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [16])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$8 }
	$8 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$7
	*($10) = $8
	*($10 + [8]) = ($8 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($10 + [4]) = ($8 + [8])
	CALL $181($10, $7)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($8)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [52]) = $1
	*($9 + [48]) = $1
	*($9 + [56]) = ($1 + $3)
	*($9 + [64]) = ($9 + [48])
	*($9 + [72]) = ($9 + [8])
	CALL $231(($9 + [72]), ($9 + [64]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [40]))
	$6 = *(($9 + [32]))
	$5 = *(($9 + [24]))
	$3 = *(($9 + [16]))
	$4 = *($9 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$8 = *((*($1) + $8))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $3), (int_32 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [80])
	return [1]
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$3 = *($0)
	$5 = int_32(($6 - $3) >> [4])
	$4 = ($5 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$8 = ($8 - $3)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($8 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $246(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $259($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($5 << [4]))
	$6 = $8
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($1 + [-16])
	*(($8 + [-16])) = *($3)
	$4 = ($1 + [-4])
	*(($8 + [-4])) = *($4)
	$5 = ($1 + [-8])
	*(($8 + [-8])) = *($5)
	$1 = ($1 + [-12])
	*(($8 + [-12])) = *($1)
	*($5) = [0]
	*($1) = [0]
	*($4) = [0]
	$8 = ($8 + [-16])
	$1 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	$7 = *(($0 + [4]))
	$3 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$3 = $7
	
.LABEL $label$10
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($7 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $247(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-16])
	if ( ((int_32)($1 + $6) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $247($3)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC _ZN3dao11exitcouncliERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL prints([1776])
	CALL require_auth(*($1))
	$2 = *(($0 + [352]))
	$7 = *(($0 + [356]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [328])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$4), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $46($4, $7)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$4), [272])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [1792])
	$5 = *($0)
	*($8 + [8]) = $1
	CALL eosio_assert($7, [336])
	CALL $70($4, $6, $5, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = int_32(($1 - $0) >> [4])
	if ( ((uint_32)$10 > (uint_32)[5]) ){ goto $label$9 }
	$7 = [1]
	goto $label$1 
	
.LABEL $label$11
	$4 = ($0 + [8])
	$3 = *($4)
	$10 = ($1 + [-8])
	$6 = *($10)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$1 }
	*($4) = $6
	$5 = *($0)
	$6 = ($1 + [-16])
	*($0) = *($6)
	*($10) = $3
	*($6) = $5
	goto $label$1 
	
.LABEL $label$10
	$4 = ($1 + [-16])
	$3 = ($1 + [-8])
	$10 = *($3)
	$1 = *(($0 + [8]))
	$6 = *(($0 + [24]))
	if ( ((uint_32)$6 <= (uint_32)$1) ){ goto $label$6 }
	if ( ((uint_32)$10 <= (uint_32)$6) ){ goto $label$4 }
	$5 = *($0)
	*($0) = *($4)
	*(($0 + [8])) = $10
	*($4) = $5
	*($3) = $1
	goto $label$1 
	
.LABEL $label$9
	$7 = *(($0 + [40]))
	$6 = *(($0 + [8]))
	$10 = *(($0 + [24]))
	if ( ((uint_32)$10 <= (uint_32)$6) ){ goto $label$5 }
	if ( ((uint_32)$7 <= (uint_32)$10) ){ goto $label$3 }
	*(($0 + [8])) = $7
	*(($0 + [40])) = $6
	$5 = *($0)
	$7 = ($0 + [32])
	*($0) = *($7)
	*($7) = $5
	goto $label$2 
	
.LABEL $label$8
	CALL $67($0, ($0 + [16]), ($0 + [32]), ($1 + [-16]))
	goto $label$1 
	
.LABEL $label$7
	$10 = ($0 + [48])
	CALL $67($0, ($0 + [16]), ($0 + [32]), $10)
	$6 = ($0 + [56])
	$8 = *($6)
	$4 = ($1 + [-8])
	$3 = *($4)
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$1 }
	*($6) = $3
	$5 = *($10)
	$3 = ($1 + [-16])
	*($10) = *($3)
	*($4) = $8
	*($3) = $5
	$6 = ($0 + [40])
	$4 = *($6)
	$10 = *($6)
	if ( ((uint_32)$10 <= (uint_32)$4) ){ goto $label$1 }
	*($6) = $10
	*(($0 + [56])) = $4
	$6 = ($0 + [32])
	$5 = *($6)
	$4 = ($0 + [48])
	$2 = *($4)
	*($6) = $2
	*($4) = $5
	$4 = ($0 + [24])
	$3 = *($4)
	if ( ((uint_32)$10 <= (uint_32)$3) ){ goto $label$1 }
	*($4) = $10
	*(($0 + [40])) = $3
	$4 = ($0 + [16])
	*($6) = *($4)
	*($4) = $2
	$6 = ($0 + [8])
	$3 = *($6)
	if ( ((uint_32)$10 <= (uint_32)$3) ){ goto $label$1 }
	*($4) = *($0)
	*($0) = $2
	*($6) = $10
	*(($0 + [24])) = $3
	goto $label$1 
	
.LABEL $label$6
	if ( ((uint_32)$10 <= (uint_32)$6) ){ goto $label$1 }
	*(($1 = ($0 + [24]))) = $10
	$10 = ($0 + [16])
	$5 = *($10)
	*($10) = *($4)
	*($3) = $6
	*($4) = $5
	$4 = ($0 + [8])
	$3 = *($4)
	$6 = *($1)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$1 }
	*($4) = $6
	*($1) = $3
	$5 = *($0)
	*($0) = *($10)
	*($10) = $5
	goto $label$1 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$10) ){ goto $label$2 }
	*(($3 = ($0 + [24]))) = $7
	*(($0 + [40])) = $10
	$10 = ($0 + [16])
	$5 = *($10)
	$4 = ($0 + [32])
	$2 = *($4)
	*($10) = $2
	*($4) = $5
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$2 }
	*($10) = *($0)
	*($0) = $2
	*(($0 + [8])) = $7
	*($3) = $6
	goto $label$2 
	
.LABEL $label$4
	*(($0 + [8])) = $6
	*(($6 = ($0 + [24]))) = $1
	$5 = *($0)
	$10 = ($0 + [16])
	*($0) = *($10)
	*($10) = $5
	$0 = *($3)
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$1 }
	*($10) = *($4)
	*($6) = $0
	*($4) = $5
	*($3) = $1
	goto $label$1 
	
.LABEL $label$3
	*(($0 + [8])) = $10
	*(($4 = ($0 + [24]))) = $6
	$5 = *($0)
	$10 = ($0 + [16])
	*($0) = *($10)
	*($10) = $5
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$2 }
	*($4) = $7
	*(($0 + [40])) = $6
	$7 = ($0 + [32])
	*($10) = *($7)
	*($7) = $5
	
.LABEL $label$2
	$10 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$14 }
	$7 = ($0 + [32])
	$8 = [0]
	$9 = [0]
	
.LOOP $label$15:
	$10 = *(($7 + [8]))
	$3 = $10
	$4 = *(($3 + [8]))
	if ( ((uint_32)$4 <= (uint_32)$10) ){ goto $label$16 }
	*($3 + [8]) = $10
	$5 = *($3)
	*($3) = *($7)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$17 }
	$10 = $8
	
.LOOP $label$19:
	$7 = ($0 + $10)
	$6 = *(($7 + [24]))
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$18 }
	*(($7 + [40])) = $6
	*(($7 + [32])) = *(($7 + [16]))
	$10 = ($10 + [-16])
	if ( ((int_32)$10 != (int_32)[-32]) ){ goto $label$19 }
	$7 = (($0 + $10) + [32])
	goto $label$17 
	
.LABEL $label$18
	$7 = ($7 + [32])
	
.LABEL $label$17
	*($7 + [8]) = $4
	*($7) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$13 }
	
.LABEL $label$16
	$8 = ($8 + [16])
	$7 = $3
	$10 = ($3 + [16])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = [1]
	goto $label$12 
	
.LABEL $label$13
	$10 = ((int_32)($3 + [16]) == (int_32)$1)
	$7 = [0]
	
.LABEL $label$12
	$7 = ($10 | $7)
	
.LABEL $label$1
	$10
	return ($7 & [1])
}

void .FUNC $248 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [784])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [784])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$7
	CALL $247($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $25(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $66(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = *(($2 + [8]))
	$4 = *(($0 + [8]))
	$10 = *(($1 + [8]))
	if ( ((uint_32)$10 <= (uint_32)$4) ){ goto $label$5 }
	if ( ((uint_32)$5 <= (uint_32)$10) ){ goto $label$4 }
	$9 = *($0)
	*($0) = *($2)
	*(($0 + [8])) = $5
	*($2) = $9
	*(($2 + [8])) = $4
	$11 = [1]
	goto $label$3 
	
.LABEL $label$5
	$11 = [0]
	if ( ((uint_32)$5 <= (uint_32)$10) ){ goto $label$2 }
	*(($4 = ($1 + [8]))) = $5
	$9 = *($1)
	*($1) = *($2)
	*(($5 = ($2 + [8]))) = $10
	*($2) = $9
	$11 = [1]
	$7 = ($0 + [8])
	$6 = *($7)
	$8 = *($4)
	if ( ((uint_32)$8 <= (uint_32)$6) ){ goto $label$1 }
	*($7) = $8
	$9 = *($0)
	*($0) = *($1)
	*($4) = $6
	*($1) = $9
	$10 = *($5)
	$11 = [2]
	goto $label$1 
	
.LABEL $label$4
	*(($0 + [8])) = $10
	$9 = *($0)
	*($0) = *($1)
	*(($5 = ($1 + [8]))) = $4
	*($1) = $9
	$11 = [1]
	$8 = ($2 + [8])
	$10 = *($8)
	if ( ((uint_32)$10 <= (uint_32)$4) ){ goto $label$1 }
	*($1) = *($2)
	*($5) = $10
	*($2) = $9
	*($8) = $4
	$11 = [2]
	
.LABEL $label$3
	$10 = $4
	goto $label$1 
	
.LABEL $label$2
	$10 = $5
	
.LABEL $label$1
	$5 = ($3 + [8])
	$4 = *($5)
	if ( ((uint_32)$4 <= (uint_32)$10) ){ goto $label$8 }
	*(($8 = ($2 + [8]))) = $4
	$9 = *($2)
	*($2) = *($3)
	*($5) = $10
	*($3) = $9
	$3 = *(($1 + [8]))
	$10 = *($8)
	if ( ((uint_32)$10 <= (uint_32)$3) ){ goto $label$7 }
	*(($5 = ($1 + [8]))) = $10
	$9 = *($1)
	*($1) = *($2)
	*(($2 + [8])) = $3
	*($2) = $9
	$10 = ($0 + [8])
	$3 = *($10)
	$2 = *($5)
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	$9 = *($0)
	*($0) = *($1)
	*($10) = $2
	*($1) = $9
	*($5) = $3
	$11 = ($11 + [3])
	
.LABEL $label$8
	return $11
	
.LABEL $label$7
	return ($11 + [1])
	
.LABEL $label$6
	return ($11 + [2])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	
.LOOP $label$1:
	$4 = ($1 + [-32])
	$3 = ($1 + [-8])
	$2 = ($1 + [-16])
	
.LOOP $label$11:
	$5 = $0
	
.LOOP $label$14:
	$0 = ($1 - $5)
	$14 = int_32($0 >> [4])
	if ( ((uint_32)$14 <= (uint_32)[5]) ){ goto $label$10 }
	if ( ((int_32)$0 <= (int_32)[111]) ){ goto $label$9 }
	$7 = (((int_32)$14 / (int_32)[2]) << [4])
	$15 = ($5 + $7)
	if ( ((int_32)$0 < (int_32)[15985]) ){ goto $label$23 }
	$14 = ($15 + $0)
	$0 = (((int_32)$14 / (int_32)[4]) << [4])
	$8 = ($5 + $0)
	$13 = CALL $67($5, $8, $15, $14)
	$11 = ($14 + [8])
	$9 = *($11)
	$0 = *($3)
	if ( ((uint_32)$0 <= (uint_32)$9) ){ goto $label$22 }
	*($11) = $0
	$12 = *($14)
	*($14) = *($2)
	*($3) = $9
	*($2) = $12
	$0 = (($5 + $7) + [8])
	$7 = *($0)
	$9 = *($11)
	if ( ((uint_32)$9 <= (uint_32)$7) ){ goto $label$20 }
	*($0) = $9
	$12 = *($15)
	*($15) = *($14)
	*($11) = $7
	*($14) = $12
	$14 = ($8 + [8])
	$11 = *($14)
	$7 = *($0)
	if ( ((uint_32)$7 <= (uint_32)$11) ){ goto $label$17 }
	*($14) = $7
	$12 = *($8)
	*($8) = *($15)
	*($0) = $11
	*($15) = $12
	$11 = ($5 + [8])
	$9 = *($11)
	$7 = *($14)
	if ( ((uint_32)$7 <= (uint_32)$9) ){ goto $label$16 }
	$12 = *($5)
	*($5) = *($8)
	*($11) = $7
	*($8) = $12
	*($14) = $9
	$13 = ($13 + [4])
	goto $label$15 
	
.LABEL $label$23
	$14 = *($3)
	$11 = ($5 + [8])
	$8 = *($11)
	$0 = (($5 + $7) + [8])
	$7 = *($0)
	if ( ((uint_32)$7 <= (uint_32)$8) ){ goto $label$21 }
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$19 }
	$12 = *($5)
	*($5) = *($2)
	*($11) = $14
	*($2) = $12
	*($3) = $8
	$13 = [1]
	goto $label$15 
	
.LABEL $label$22
	$0 = (($5 + $7) + [8])
	goto $label$15 
	
.LABEL $label$21
	$13 = [0]
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$15 }
	*($0) = $14
	$12 = *($15)
	*($15) = *($2)
	*($3) = $7
	*($2) = $12
	$13 = [1]
	$7 = *($11)
	$14 = *($0)
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$15 }
	$12 = *($5)
	*($5) = *($15)
	*($11) = $14
	*($15) = $12
	*($0) = $7
	goto $label$18 
	
.LABEL $label$20
	$13 = ($13 + [1])
	goto $label$15 
	
.LABEL $label$19
	*($11) = $7
	$12 = *($5)
	*($5) = *($15)
	*($0) = $8
	*($15) = $12
	$13 = [1]
	$14 = *($3)
	if ( ((uint_32)$14 <= (uint_32)$8) ){ goto $label$15 }
	*($0) = $14
	*($15) = *($2)
	*($3) = $8
	*($2) = $12
	
.LABEL $label$18
	$13 = [2]
	goto $label$15 
	
.LABEL $label$17
	$13 = ($13 + [2])
	goto $label$15 
	
.LABEL $label$16
	$13 = ($13 + [3])
	
.LABEL $label$15
	$7 = *($0)
	$10 = ($5 + [8])
	$8 = *($10)
	if ( ((uint_32)$8 > (uint_32)$7) ){ goto $label$24 }
	$0 = $4
	
.LOOP $label$26:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$25 }
	$14 = ($0 + [8])
	$11 = ($0 + [-16])
	$0 = $11
	$14 = *($14)
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$26 }
	goto $label$13 
	
.LABEL $label$25
	$9 = ($5 + [16])
	$7 = *($3)
	if ( ((uint_32)$8 > (uint_32)$7) ){ goto $label$27 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$3 }
	$9 = ($5 + [32])
	
.LOOP $label$29:
	$0 = ($9 + [-8])
	$14 = *($0)
	if ( ((uint_32)$8 > (uint_32)$14) ){ goto $label$28 }
	$9 = ($9 + [16])
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$29 }
	goto $label$3 
	
.LABEL $label$28
	*($0) = $7
	$0 = ($9 + [-16])
	$12 = *($0)
	*($0) = *($2)
	*($3) = $14
	*($2) = $12
	
.LABEL $label$27
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$3 }
	$14 = $2
	
.LOOP $label$30:
	$0 = ($9 + [-16])
	$7 = *($10)
	
.LOOP $label$31:
	$11 = ($0 + [24])
	$5 = ($0 + [16])
	$0 = $5
	$8 = *($11)
	if ( ((uint_32)$7 <= (uint_32)$8) ){ goto $label$31 }
	$9 = ($5 + [16])
	
.LOOP $label$32:
	$0 = ($14 + [-8])
	$11 = ($14 + [-16])
	$14 = $11
	$0 = *($0)
	if ( ((uint_32)$7 > (uint_32)$0) ){ goto $label$32 }
	if ( ((uint_32)$5 >= (uint_32)$11) ){ goto $label$14 }
	$12 = *($5)
	*($5) = *($11)
	*(($5 + [8])) = $0
	*($11) = $12
	*(($11 + [8])) = $8
	$14 = $11
	goto $label$30 
	
.LABEL $label$24
	$0 = $2
	goto $label$12 
	
.LABEL $label$13
	*($10) = $14
	$12 = *($5)
	$0 = ($11 + [16])
	*($5) = *($0)
	*(($11 + [24])) = $8
	*($0) = $12
	$13 = ($13 + [1])
	
.LABEL $label$12
	$10 = ($5 + [16])
	if ( ((uint_32)$10 >= (uint_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$14 = ($10 + [-16])
	$7 = *(($15 + [8]))
	
.LOOP $label$35:
	$11 = ($14 + [24])
	$8 = ($14 + [16])
	$14 = $8
	$9 = *($11)
	if ( ((uint_32)$9 > (uint_32)$7) ){ goto $label$35 }
	$10 = ($8 + [16])
	
.LOOP $label$36:
	$14 = ($0 + [-8])
	$11 = ($0 + [-16])
	$0 = $11
	$14 = *($14)
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$36 }
	if ( ((uint_32)$8 > (uint_32)$11) ){ goto $label$37 }
	$12 = *($8)
	*($8) = *($11)
	*(($8 + [8])) = $14
	*($11) = $12
	*(($11 + [8])) = $9
	$15 = ( $11 ? $15 : ((int_32)$15 == (int_32)$8) )
	$13 = ($13 + [1])
	$0 = $11
	goto $label$34 
	
.LABEL $label$37
	$10 = $8
	
.LABEL $label$33
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$38 }
	$7 = ($10 + [8])
	$11 = *($7)
	$0 = ($15 + [8])
	$14 = *($0)
	if ( ((uint_32)$14 <= (uint_32)$11) ){ goto $label$38 }
	$12 = *($10)
	*($10) = *($15)
	*($7) = $14
	*($15) = $12
	*($0) = $11
	$13 = ($13 + [1])
	
.LABEL $label$38
	if ( $13 ){ goto $label$40 }
	$14 = CALL $68($5, $10)
	$0 = ($10 + [16])
	if ( CALL $68($0, $1) ){ goto $label$39 }
	if ( $14 ){ goto $label$11 }
	
.LABEL $label$40
	if ( ((int_32)($10 - $5) >= (int_32)($1 - $10)) ){ goto $label$2 }
	CALL $61($5, $10)
	$0 = ($10 + [16])
	goto $label$11 
	
.LABEL $label$39
	$1 = $10
	$0 = $5
	if ( ($14 == 0) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$10
	goto $label$3 
	
.LABEL $label$41
	$14 = ($5 + [8])
	$7 = *($14)
	$0 = *($3)
	if ( ((uint_32)$0 <= (uint_32)$7) ){ goto $label$3 }
	*($14) = $0
	$12 = *($5)
	$0 = ($1 + [-16])
	*($5) = *($0)
	*($3) = $7
	*($0) = $12
	return 
	
.LABEL $label$9
	$0 = *(($5 + [40]))
	$7 = *(($5 + [8]))
	$14 = *(($5 + [24]))
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$44 }
	if ( ((uint_32)$0 <= (uint_32)$14) ){ goto $label$43 }
	*(($5 + [8])) = $0
	*(($5 + [40])) = $7
	$12 = *($5)
	$0 = ($5 + [32])
	*($5) = *($0)
	*($0) = $12
	goto $label$42 
	
.LABEL $label$44
	if ( ((uint_32)$0 <= (uint_32)$14) ){ goto $label$42 }
	*(($8 = ($5 + [24]))) = $0
	*(($5 + [40])) = $14
	$14 = ($5 + [16])
	$12 = *($14)
	$11 = ($5 + [32])
	$6 = *($11)
	*($14) = $6
	*($11) = $12
	if ( ((uint_32)$0 <= (uint_32)$7) ){ goto $label$42 }
	*($14) = *($5)
	*($5) = $6
	*(($5 + [8])) = $0
	*($8) = $7
	goto $label$42 
	
.LABEL $label$43
	*(($5 + [8])) = $14
	*(($11 = ($5 + [24]))) = $7
	$12 = *($5)
	$14 = ($5 + [16])
	*($5) = *($14)
	*($14) = $12
	if ( ((uint_32)$0 <= (uint_32)$7) ){ goto $label$42 }
	*($11) = $0
	*(($5 + [40])) = $7
	$0 = ($5 + [32])
	*($14) = *($0)
	*($0) = $12
	
.LABEL $label$42
	$14 = ($5 + [48])
	if ( ((int_32)$14 == (int_32)$1) ){ goto $label$3 }
	$0 = ($5 + [32])
	$9 = [0]
	
.LOOP $label$45:
	$7 = *(($0 + [8]))
	$8 = $14
	$14 = ($8 + [8])
	$11 = *($14)
	if ( ((uint_32)$11 <= (uint_32)$7) ){ goto $label$46 }
	*($14) = $7
	$12 = *($8)
	*($8) = *($0)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$49 }
	$14 = $9
	
.LOOP $label$50:
	$0 = ($5 + $14)
	$7 = *(($0 + [24]))
	if ( ((uint_32)$11 <= (uint_32)$7) ){ goto $label$48 }
	*(($0 + [40])) = $7
	*(($0 + [32])) = *(($0 + [16]))
	$14 = ($14 + [-16])
	if ( ((int_32)$14 != (int_32)[-32]) ){ goto $label$50 }
	$0 = (($5 + $14) + [32])
	
.LABEL $label$49
	$14 = $5
	goto $label$47 
	
.LABEL $label$48
	$14 = ($0 + [32])
	$0 = $14
	
.LABEL $label$47
	*($14 + [8]) = $11
	*($0) = $12
	
.LABEL $label$46
	$9 = ($9 + [16])
	$0 = $8
	$14 = ($8 + [16])
	if ( ((int_32)$14 != (int_32)$1) ){ goto $label$45 }
	goto $label$3 
	
.LABEL $label$8
	$0 = *($3)
	$7 = *(($5 + [8]))
	$14 = *(($5 + [24]))
	if ( ((uint_32)$14 <= (uint_32)$7) ){ goto $label$5 }
	if ( ((uint_32)$0 <= (uint_32)$14) ){ goto $label$4 }
	$12 = *($5)
	*($5) = *($2)
	*(($5 + [8])) = $0
	*($2) = $12
	*($3) = $7
	return 
	
.LABEL $label$7
	CALL $67($5, ($5 + [16]), ($5 + [32]), $2)
	return 
	
.LABEL $label$6
	$0 = ($5 + [48])
	CALL $67($5, ($5 + [16]), ($5 + [32]), $0)
	$14 = ($5 + [56])
	$11 = *($14)
	$7 = *($3)
	if ( ((uint_32)$7 <= (uint_32)$11) ){ goto $label$3 }
	*($14) = $7
	$12 = *($0)
	$7 = ($1 + [-16])
	*($0) = *($7)
	*($3) = $11
	*($7) = $12
	$14 = ($5 + [40])
	$7 = *($14)
	$0 = *($14)
	if ( ((uint_32)$0 <= (uint_32)$7) ){ goto $label$3 }
	*($14) = $0
	*(($5 + [56])) = $7
	$14 = ($5 + [32])
	$12 = *($14)
	$7 = ($5 + [48])
	$6 = *($7)
	*($14) = $6
	*($7) = $12
	$7 = ($5 + [24])
	$11 = *($7)
	if ( ((uint_32)$0 <= (uint_32)$11) ){ goto $label$3 }
	*($7) = $0
	*(($5 + [40])) = $11
	$7 = ($5 + [16])
	*($14) = *($7)
	*($7) = $6
	$14 = ($5 + [8])
	$11 = *($14)
	if ( ((uint_32)$0 <= (uint_32)$11) ){ goto $label$3 }
	*($7) = *($5)
	*($5) = $6
	*($14) = $0
	*(($5 + [24])) = $11
	return 
	
.LABEL $label$5
	if ( ((uint_32)$0 <= (uint_32)$14) ){ goto $label$3 }
	*(($7 = ($5 + [24]))) = $0
	$0 = ($5 + [16])
	$12 = *($0)
	*($0) = *($2)
	*($3) = $14
	*($2) = $12
	$11 = ($5 + [8])
	$8 = *($11)
	$14 = *($7)
	if ( ((uint_32)$14 <= (uint_32)$8) ){ goto $label$3 }
	*($11) = $14
	*($7) = $8
	$12 = *($5)
	*($5) = *($0)
	*($0) = $12
	return 
	
.LABEL $label$4
	*(($5 + [8])) = $14
	*(($14 = ($5 + [24]))) = $7
	$12 = *($5)
	$0 = ($5 + [16])
	*($5) = *($0)
	*($0) = $12
	$11 = *($3)
	if ( ((uint_32)$11 <= (uint_32)$7) ){ goto $label$3 }
	*($0) = *($2)
	*($14) = $11
	*($2) = $12
	*($3) = $7
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $61(($10 + [16]), $1)
	$1 = $10
	$0 = $5
	goto $label$1 
	$14
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($4 + [16])))
	
.LABEL $label$7
	CALL $247($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($4 + [16])))
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	$15 = $16
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$10 = *($3)
	$4 = *($1)
	$8 = ($1 + [12])
	$12 = *($8)
	$13 = *($1 + [8])
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($13 + [16])
	if ( (*($13 + [8]) == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = ($12 - $6)
	$7 = int_32($12 >> [4])
	if ( ($7 == 0) ){ goto $label$2 }
	CALL memmove($13, $6, $12)
	$12 = ($13 + ($7 << [4]))
	*($8) = $12
	if ( *(($13 + [8])) ){ goto $label$5 }
	
.LABEL $label$4
	$13 = $6
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [12])) = $13
	
.LABEL $label$1
	$5 = ($1 + [8])
	$9 = ($10 + [16])
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)[-2]) ){ goto $label$6 }
	$6 = [0]
	$10 = ($15 + [8])
	$11 = ($1 + [16])
	$8 = ($1 + [12])
	$13 = [0]
	
.LOOP $label$7:
	$7 = *($7)
	$7 = *(($3 + [4]))
	if ( ((uint_32)$13 >= (uint_32)int_32((*($7 + [4]) - $7) >> [4])) ){ goto $label$8 }
	*($10) = ( [1] ? [2] : ($13 <= $12) )
	*($15) = *(($7 + $6))
	$12 = *($8)
	if ( ((uint_32)$12 >= (uint_32)*($11)) ){ goto $label$10 }
	*($12) = *($15)
	*(($12 + [8])) = *($10)
	*($8) = (*($8) + [16])
	goto $label$9 
	
.LABEL $label$10
	CALL $55($5, $15)
	
.LABEL $label$9
	$12 = *($9)
	
.LABEL $label$8
	$6 = ($6 + [16])
	$13 = ($13 + [1])
	if ( ($13 <= ($12 + [2])) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$13 = [8]
	$12 = *(($1 + [8]))
	$6 = *(($1 + [12]))
	$7 = ($6 - $12)
	$14 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$11:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$12 }
	$13 = ((((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[9]) + $13) + [9])
	
.LABEL $label$12
	if ( ($13 <= [513]) ){ goto $label$14 }
	$6 = CALL malloc($13)
	goto $label$13 
	
.LABEL $label$14
	$6 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$13
	*($15) = $6
	*($15 + [8]) = ($6 + $13)
	CALL eosio_assert(((int_32)$13 > (int_32)[7]), [672])
	CALL memcpy($6, $1, [8])
	*($15 + [4]) = ($6 + [8])
	CALL $56($15, $5)
	CALL db_update_i64(*($1 + [24]), $2, $6, $13)
	if ( ($13 <= [513]) ){ goto $label$15 }
	CALL free($6)
	
.LABEL $label$15
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($15 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [784])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $228 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [352]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [356])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [12])) = $3
	CALL $247($3)
	
.LABEL $label$6
	CALL $247($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [352]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $247($5)
	
.LABEL $label$1
	CALL $229(($0 + [312]))
	$3 = *(($0 + [272]))
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($0 + [276])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $88($2)
	CALL $247($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($0 + [272]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($1) = $3
	CALL $247($5)
	
.LABEL $label$7
	$3 = *(($0 + [232]))
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($0 + [236])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $16($2)
	CALL $247($2)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($0 + [232]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $3
	
.LABEL $label$13
	*($1) = $3
	CALL $247($5)
	
.LABEL $label$12
	CALL $16(($0 + [8]))
	return $0
}

int_32 .FUNC $229 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [12])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-16])
	if ( ((int_32)($7 + $4) != (int_32)[-12]) ){ goto $label$9 }
	$7 = *(($2 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $247($7)
	
.LABEL $label$6
	CALL $247($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $247($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $92($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [784])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [784])
	CALL memcpy(($7 + [8]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	if ( ((*($0 + [192]) & [1]) == 0) ){ goto $label$1 }
	CALL $247(*(($0 + [200])))
	
.LABEL $label$1
	$1 = *($0 + [176])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [180])) = $1
	CALL $247($1)
	
.LABEL $label$2
	if ( ((*($0 + [164]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*(($0 + [172])))
	
.LABEL $label$3
	if ( ((*($0 + [112]) & [1]) == 0) ){ goto $label$4 }
	CALL $247(*(($0 + [120])))
	
.LABEL $label$4
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($0 + [100])))
	
.LABEL $label$5
	$1 = *($0 + [80])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($0 + [84])) = $1
	CALL $247($1)
	
.LABEL $label$6
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($0 + [40])))
	
.LABEL $label$7
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*(($0 + [16])))
	
.LABEL $label$8
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $88($1)
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $247($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27($0, ($1 + [192]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27($0, ($1 + [32]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [784])
	CALL memcpy(($1 + [44]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [784])
	CALL memcpy(($1 + [56]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27(CALL $89($0, ($1 + [80])), ($1 + [92]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27($0, ($1 + [112]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [160]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $90(CALL $27($0, ($1 + [164])), ($1 + [176]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [188]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($3), ($6 + [8]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23($0, ($1 + [192]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23(CALL $84($0, ($1 + [80])), ($1 + [92]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [112]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $85(CALL $23($0, ($1 + [164])), ($1 + [176]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [188]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [8])
	*($0) = $6
	$3 = *($1 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$3 = *(($1 + [8]))
	$3 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$2
	$6 = ($6 + [8])
	*($0) = $6
	$3 = *($1 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	$3 = *(($1 + [32]))
	$3 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$4
	*($0) = ($6 + [26])
	$6 = ($6 + [35])
	$2 = *($1 + [80])
	$3 = *(($1 + [84]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	$6 = (((int_32)uint_32(($4 + [-16]) >> [4]) * (int_32)[9]) + $6)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($6 + [-9])
	
.LABEL $label$6
	*($0) = $6
	$3 = *($1 + [92])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [96])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	*($0) = $6
	$3 = *(($1 + [92]))
	$3 = ( *(($1 + [96])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$9 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$9
	$6 = ($6 + [8])
	*($0) = $6
	$3 = *($1 + [112])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$10:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	*($0) = $6
	$3 = *(($1 + [112]))
	$3 = ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$11 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$11
	$6 = ($6 + [36])
	*($0) = $6
	$3 = *($1 + [164])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [168])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	*($0) = $6
	$3 = *(($1 + [164]))
	$3 = ( *(($1 + [168])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$13 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$13
	$2 = *($1 + [176])
	$3 = *(($1 + [180]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	$3 = ($4 + [-24])
	$6 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $6) + [24])
	
.LABEL $label$15
	$6 = ($6 + [4])
	*($0) = $6
	$3 = *($1 + [192])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [196])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$16:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$16 }
	*($0) = $6
	$1 = *(($1 + [192]))
	$1 = ( *(($1 + [196])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$17 }
	*($0) = ($1 + $6)
	
.LABEL $label$17
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	float_32 $10
	float_32 $11
	float_64 $12
	float_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*(($15 = ( ($8 = ($1 + [64])) ? ($6 = ($1 + [72])) : ((int_32)*(*($3)) == (int_32)[1]) ))) = ((int_64)*($15) + (int_64)1)
	$5 = *($3 + [8])
	$4 = *($1)
	*(($15 = $16)) = *(*($3 + [4]))
	*($15 + [8]) = *(*($3))
	$14 = ($1 + [84])
	$7 = *($14)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [88]))) ){ goto $label$2 }
	*($7) = *($15)
	*(($7 + [8])) = *(($15 + [8]))
	*($14) = (*($14) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $81(($1 + [80]), $15)
	
.LABEL $label$1
	$14 = ($5 + [56])
	CALL eosio_assert(((int_32)*($14) != (int_32)[0]), [2256])
	$7 = *($14)
	CALL prints([2288])
	$10 = (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_32 $7) * (float_64)(float_64)0.8))
	CALL printsf($10)
	$11 = (CASTING float_32)(uint_64 *($8))
	if ( ((((float_32)$11 < (float_32)$10) | (((float_32)$11 != (float_32)$11) | ((float_32)$10 != (float_32)$10))) == 0) ){ goto $label$6 }
	$12 = ((float_64)(CASTING float_64)(uint_32 *($14)) * (float_64)(float_64)0.2)
	$13 = (CASTING float_64)(uint_64 *($6))
	if ( (((float_64)$13 < (float_64)$12) | (((float_64)$13 != (float_64)$13) | ((float_64)$12 != (float_64)$12))) ){ goto $label$3 }
	*($1 + [44]) = [9]
	$8 = *(($5 + [108]))
	$14 = *(($5 + [104]))
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$7 }
	$9 = *(*(($3 + [12])))
	
.LOOP $label$8:
	if ( ((int_64)*($14) == (int_64)$9) ){ goto $label$7 }
	$14 = ($14 + [8])
	if ( ((int_32)$8 != (int_32)$14) ){ goto $label$8 }
	$14 = $8
	
.LABEL $label$7
	$7 = ($14 + [8])
	$6 = ($8 - $7)
	$8 = int_32($6 >> [3])
	if ( ($8 == 0) ){ goto $label$9 }
	CALL memmove($14, $7, $6)
	
.LABEL $label$9
	$7 = ($5 + [8])
	*(($5 + [108])) = ($14 + ($8 << [3]))
	$3 = *(($3 + [12]))
	$8 = ($5 + [120])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)*(($5 + [124]))) ){ goto $label$5 }
	*($8) = ($14 + [8])
	*($14) = *($3)
	goto $label$4 
	
.LABEL $label$6
	*($1 + [44]) = [3]
	goto $label$3 
	
.LABEL $label$5
	CALL $77(($5 + [116]), $3)
	
.LABEL $label$4
	CALL $10(($5 + [208]), $7, *($5))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($15) = [0]
	CALL $82($15, $1)
	$3 = *($15)
	if ( ($3 <= [513]) ){ goto $label$11 }
	$14 = CALL malloc($3)
	goto $label$10 
	
.LABEL $label$11
	$14 = ($16 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$10
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $3)
	CALL $83($15, $1)
	CALL db_update_i64(*($1 + [208]), $2, $14, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL free($14)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($15 + [16])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [800])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $183($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$5 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $5) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[3]), [784])
	CALL memcpy($4, *($5), [4])
	*($5) = (*($5) + [4])
	CALL $27($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$3 = *($6 + [4])
	$4 = ($1 + [12])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($6 + [8])
	*($4) = $8
	*($6) = *($3)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $77($5, $3)
	$8 = *($4)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-5065729676194533744, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $25(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $150(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN3dao6refundEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [112])
	*([0] + [4]) = $18
	*($18 + [40]) = $1
	CALL require_auth($2)
	$4 = *(($0 + [272]))
	$10 = *(($0 + [276]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$10 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [248])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [204]) == (int_32)$3), [272])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$11 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $79($3, $11)
	CALL eosio_assert(((int_32)*($5 + [204]) == (int_32)$3), [272])
	
.LABEL $label$3
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [3040])
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)[2]), [3168])
	$11 = *(($5 + [180]))
	$10 = *($5 + [176])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$5 }
	$10 = ($10 + [24])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$6 }
	$10 = $11
	
.LABEL $label$5
	*($18 + [32]) = $10
	CALL eosio_assert(((int_32)$10 != (int_32)$11), [3184])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)*($10 + [8]) != (int_64)0), [3216])
	$16 = (int_64)59
	$11 = [80]
	$12 = (int_64)0
	
.LOOP $label$7:
	$14 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$8 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$8
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$14 | (int_64)$12)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$7 }
	$1 = (int_64)0
	$16 = (int_64)59
	$11 = [112]
	$13 = (int_64)0
	
.LOOP $label$11:
	$14 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$12 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$12
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$11 }
	$1 = (int_64)0
	$14 = (int_64)59
	$11 = [96]
	$15 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$20 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$20
	$16 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$16
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$15 }
	$1 = (int_64)0
	$16 = (int_64)59
	$11 = [112]
	$17 = (int_64)0
	
.LOOP $label$21:
	$14 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$22 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$6 = ($6 + [165])
	goto $label$23 
	
.LABEL $label$24
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$21 }
	*(($18 + [8])) = [0]
	*($18) = (int_64)0
	$11 = CALL strlen([3248])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$28 }
	*($18) = ($11 << [1])
	$6 = ($18 | [1])
	if ( $11 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$7 = (($11 + [16]) & [-16])
	$6 = CALL $246($7)
	*($18) = ($7 | [1])
	*($18 + [8]) = $6
	*($18 + [4]) = $11
	
.LABEL $label$27
	CALL memcpy($6, [3248], $11)
	
.LABEL $label$26
	*(($6 + $11)) = [0]
	*(($6 = ($18 + [24]))) = *(($10 + [16]))
	*($18 + [16]) = *($10 + [8])
	$10 = *($18)
	*($18) = [0]
	$7 = *($18 + [8])
	$8 = *($18 + [4])
	*($18 + [4]) = [0]
	*($18 + [8]) = [0]
	*(($11 = CALL $246([16]))) = $13
	*($11 + [8]) = $15
	$9 = ($11 + [16])
	*($18 + [104]) = $9
	*($18 + [96]) = $11
	*($18 + [56]) = $2
	*($18 + [48]) = $17
	*($18 + [100]) = $9
	*(($18 + [72])) = *($6)
	*($18 + [64]) = *($18 + [16])
	*($18 + [80]) = $10
	*(($18 + [84])) = $8
	*(($11 = ($18 + [88]))) = $7
	CALL $6($12, (int_64)-3617168760277827584, ($18 + [96]), ($18 + [48]))
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$29 }
	CALL $247(*($11))
	
.LABEL $label$29
	$11 = *($18 + [96])
	if ( ($11 == 0) ){ goto $label$30 }
	*($18 + [100]) = $11
	CALL $247($11)
	
.LABEL $label$30
	if ( ((*($18) & [1]) == 0) ){ goto $label$31 }
	CALL $247(*(($18 + [8])))
	
.LABEL $label$31
	$1 = *($0)
	*($18 + [52]) = $0
	*($18 + [48]) = ($18 + [32])
	*($18 + [56]) = ($18 + [40])
	CALL eosio_assert($4, [336])
	CALL $146($3, $5, $1, ($18 + [48]))
	*([0] + [4]) = ($18 + [112])
	return (unreachable)
	
.LABEL $label$25
	CALL $248($18)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$6 = ($1 + [8])
	$5 = *($3)
	$4 = *($1)
	$7 = *(($1 + [12]))
	$3 = *($1 + [8])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$3 }
	$9 = *($5)
	
.LOOP $label$4:
	if ( ((int_64)*($3) == (int_64)$9) ){ goto $label$3 }
	$3 = ($3 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [16]))) ){ goto $label$5 }
	*(($1 + [12])) = ($7 + [8])
	*($7) = *($5)
	goto $label$1 
	
.LABEL $label$5
	CALL $36($6, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$3 = [8]
	$5 = *(($1 + [8]))
	$7 = *(($1 + [12]))
	$8 = ($7 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($10) = $7
	*($10 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($7, $1, [8])
	*($10 + [4]) = ($7 + [8])
	CALL $21($10, $6)
	CALL db_update_i64(*($1 + [24]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN3dao8evaluateEyRKyRKh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [48]) = $1
	CALL prints([3280])
	CALL require_auth($1)
	CALL $96($0, $1)
	$1 = *($2)
	$4 = *(($0 + [272]))
	$7 = *(($0 + [276]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [248])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$6), [272])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $79($6, $7)
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$6), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [3296])
	*(($6 = (($9 + [8]) + [32]))) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$1 = *($0)
	*($9 + [8]) = $1
	*($9 + [16]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-5065729676194533744, *($2))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $148(($9 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($9 + [8])), [272])
	$6 = *(($7 + [12]))
	$8 = *($7 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	$1 = *($9 + [48])
	
.LOOP $label$9:
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$8 }
	$8 = ($8 + [8])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$9 }
	$8 = $6
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 == (int_32)$6), [3328])
	$1 = *($0)
	*($9 + [64]) = ($9 + [48])
	CALL eosio_assert([1], [336])
	CALL $151(($9 + [8]), $7, $1, ($9 + [64]))
	$5 = *($9 + [32])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = *($0)
	*($9) = $2
	*($9 + [4]) = ($9 + [48])
	*($9 + [88]) = $1
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$13()), [144])
	*($9 + [68]) = $9
	*($9 + [64]) = ($9 + [8])
	*($9 + [72]) = ($9 + [88])
	*(($8 = CALL $246([32])) + [16]) = [0]
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [20]) = ($9 + [8])
	CALL $149(($9 + [64]), $8)
	*($9 + [80]) = $8
	$1 = *($8)
	*($9 + [64]) = $1
	$5 = *($8 + [24])
	*($9 + [60]) = $5
	$0 = ($9 + [36])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*($6)) ){ goto $label$11 }
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	*($9 + [80]) = [0]
	*($7) = $8
	*($0) = ($7 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $150(($9 + [32]), ($9 + [80]), ($9 + [64]), ($9 + [60]))
	
.LABEL $label$10
	$8 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	$6 = *($8 + [8])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($8 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$13
	CALL $247($8)
	
.LABEL $label$12
	$5 = *($9 + [32])
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$0 = ($9 + [36])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	$7 = *($6 + [8])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($6 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$18
	CALL $247($6)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$16 }
	$8 = *(($9 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$8 = $5
	
.LABEL $label$14
	*($0) = $5
	CALL $247($8)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$10 = (int_64)
	*($1 + [136]) = $10(*($1 + [136]) - *(*(*($3)) + [8])))
	$5 = *($3 + [4])
	$4 = *($1)
	*($1 + [144]) = (int_64))(*($1 + [144]) - *(*(*($3)) + [8]))
	$8 = $4
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$1 }
	$7 = *(($5 + [108]))
	$11 = *(($5 + [104]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$2 }
	$8 = *(*(($3 + [8])))
	
.LOOP $label$3:
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$2 }
	$11 = ($11 + [8])
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$3 }
	$11 = $7
	
.LABEL $label$2
	$6 = ($11 + [8])
	$9 = ($7 - $6)
	$7 = int_32($9 >> [3])
	if ( ($7 == 0) ){ goto $label$4 }
	CALL memmove($11, $6, $9)
	
.LABEL $label$4
	$6 = ($5 + [8])
	*(($5 + [108])) = ($11 + ($7 << [3]))
	$11 = *(($3 + [8]))
	$9 = ($5 + [120])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [124]))) ){ goto $label$6 }
	*($9) = ($7 + [8])
	*($7) = *($11)
	goto $label$5 
	
.LABEL $label$6
	CALL $124(($5 + [116]), $11)
	
.LABEL $label$5
	CALL $10(($5 + [208]), $6, *($5))
	*($1 + [44]) = [8]
	$8 = *($1)
	
.LABEL $label$1
	*(*(*($3)) + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [608])
	*($12) = [0]
	CALL $82($12, $1)
	$3 = *($12)
	if ( ($3 <= [513]) ){ goto $label$8 }
	$11 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$11 = ($13 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$7
	*($12 + [4]) = $11
	*($12) = $11
	*($12 + [8]) = ($11 + $3)
	CALL $83($12, $1)
	CALL db_update_i64(*($1 + [208]), $2, $11, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($11)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

void .FUNC _ZN3dao7supportEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	*($16 + [56]) = $1
	*($16 + [48]) = $2
	CALL require_auth($2)
	CALL prints([3024])
	$4 = *(($0 + [272]))
	$7 = *(($0 + [276]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$10 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$7 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [248])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$10 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$5), [272])
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$5 }
	$10 = CALL $79($5, $10)
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$5), [272])
	goto $label$3 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$3
	*($16 + [44]) = $10
	*($16 + [40]) = $5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [3040])
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)[1]), [3056])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [3088])
	$14 = (int_64)59
	$10 = [80]
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$7 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$6 }
	$1 = (int_64)0
	$12 = (int_64)59
	$10 = [96]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$15 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$15
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$11
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$10 }
	$1 = (int_64)0
	$14 = (int_64)59
	$10 = [112]
	$15 = (int_64)0
	
.LOOP $label$16:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$17 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$17
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$12 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$16 }
	*(($16 + [16])) = [0]
	*($16 + [8]) = (int_64)0
	$10 = CALL strlen([3136])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$23 }
	*($16 + [8]) = ($10 << [1])
	$6 = (($16 + [8]) | [1])
	if ( $10 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$7 = (($10 + [16]) & [-16])
	$6 = CALL $246($7)
	*($16 + [8]) = ($7 | [1])
	*($16 + [16]) = $6
	*($16 + [12]) = $10
	
.LABEL $label$22
	CALL memcpy($6, [3136], $10)
	
.LABEL $label$21
	*(($6 + $10)) = [0]
	*(($6 = (($16 + [24]) + [8]))) = *(($3 + [8]))
	$1 = *($16 + [48])
	*($16 + [24]) = *($3)
	$7 = *($16 + [8])
	*($16 + [8]) = [0]
	$4 = *($16 + [16])
	$8 = *($16 + [12])
	*($16 + [12]) = [0]
	*($16 + [16]) = [0]
	*(($10 = CALL $246([16]))) = $2
	*($10 + [8]) = $13
	$9 = ($10 + [16])
	*($16 + [128]) = $9
	*($16 + [120]) = $10
	*($16 + [72]) = $15
	*($16 + [64]) = $1
	*($16 + [124]) = $9
	*(($16 + [88])) = *($6)
	*($16 + [80]) = *($16 + [24])
	*($16 + [96]) = $7
	*(($16 + [100])) = $8
	*(($10 = ($16 + [104]))) = $4
	CALL $6($11, (int_64)-3617168760277827584, ($16 + [120]), ($16 + [64]))
	if ( ((*($16 + [96]) & [1]) == 0) ){ goto $label$24 }
	CALL $247(*($10))
	
.LABEL $label$24
	$10 = *($16 + [120])
	if ( ($10 == 0) ){ goto $label$25 }
	*($16 + [124]) = $10
	CALL $247($10)
	
.LABEL $label$25
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL $247(*(($16 + [16])))
	
.LABEL $label$26
	$1 = *($0)
	$10 = *($16 + [44])
	*($16 + [64]) = $3
	*($16 + [76]) = $0
	*($16 + [68]) = ($16 + [48])
	*($16 + [72]) = ($16 + [40])
	*($16 + [80]) = ($16 + [56])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [336])
	CALL $142($5, $10, $1, ($16 + [64]))
	*($16 + [80]) = (int_64)-1
	*($16 + [88]) = [0]
	$1 = *($16 + [48])
	$14 = *($0)
	*($16 + [64]) = $14
	*($16 + [72]) = $1
	*(($6 = ($16 + [92]))) = [0]
	*(($7 = (($16 + [64]) + [32]))) = [0]
	$10 = CALL db_find_i64($14, $1, (int_64)-7517780640625561600, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$29 }
	$10 = CALL $117(($16 + [64]), $10)
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)($16 + [64])), [272])
	$1 = *($0)
	*($16 + [120]) = ($16 + [56])
	CALL eosio_assert([1], [336])
	CALL $144(($16 + [64]), $10, $1, ($16 + [120]))
	$5 = *($16 + [88])
	if ( $5 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$1 = *($0)
	*($16 + [4]) = ($16 + [56])
	*($16) = ($16 + [48])
	*($16 + [8]) = $1
	CALL eosio_assert(((int_64)*($16 + [64]) == (int_64)CALL $fimport$13()), [144])
	*($16 + [124]) = $16
	*($16 + [120]) = ($16 + [64])
	*($16 + [128]) = ($16 + [8])
	*(($10 = CALL $246([32])) + [16]) = [0]
	*($10 + [8 align=4]) = (int_64)0
	*($10 + [20]) = ($16 + [64])
	CALL $143(($16 + [120]), $10)
	*($16 + [136]) = $10
	$1 = *($10)
	*($16 + [120]) = $1
	$5 = *($10 + [24])
	*($16 + [116]) = $5
	$6 = *($6)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$31 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($16 + [136]) = [0]
	*($6) = $10
	*(($16 + [92])) = ($6 + [24])
	goto $label$30 
	
.LABEL $label$31
	CALL $119(($16 + [88]), ($16 + [136]), ($16 + [120]), ($16 + [116]))
	
.LABEL $label$30
	$10 = *($16 + [136])
	*($16 + [136]) = [0]
	if ( ($10 == 0) ){ goto $label$32 }
	$6 = *($10 + [8])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($10 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$33
	CALL $247($10)
	
.LABEL $label$32
	$5 = *($16 + [88])
	if ( ($5 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$0 = ($16 + [92])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$35 }
	
.LOOP $label$36:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$37 }
	$7 = *($6 + [8])
	if ( ($7 == 0) ){ goto $label$38 }
	*(($6 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$38
	CALL $247($6)
	
.LABEL $label$37
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$36 }
	$10 = *(($16 + [88]))
	goto $label$34 
	
.LABEL $label$35
	$10 = $5
	
.LABEL $label$34
	*($0) = $5
	CALL $247($10)
	
.LABEL $label$27
	*([0] + [4]) = ($16 + [144])
	return (unreachable)
	
.LABEL $label$20
	CALL $248(($16 + [8]))
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [16 align=4]) = (int_64)0
	*(($3 = ($0 + [24]))) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)0
	*($0) = (int_64)8333509946893840784
	*($0 + [8]) = (int_64)-3772709285037867008
	*($0 + [16]) = *($1)
	*(($0 + [20])) = *($1 + [4])
	*($3) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	CALL $29($5, [8])
	$1 = *($5)
	CALL eosio_assert(((int_32)(*($5 + [4]) - $1) > (int_32)[7]), [672])
	CALL memcpy($1, $2, [8])
	$1 = *($0 + [28])
	if ( ($1 == 0) ){ goto $label$1 }
	*($4) = $1
	CALL $247($1)
	*(($0 + [36])) = [0]
	*(($0 + [28])) = (int_64)0
	
.LABEL $label$1
	*(($0 + [28])) = *($5)
	*(($0 + [36])) = *(($5 + [8]))
	*([0] + [4]) = ($5 + [16])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6 + [4])
	$3 = ($1 + [12])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($5 + [8])
	*($3) = $8
	*($5) = *($6)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $36($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-7517780640625561600, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [136]) = ((int_64)*($1 + [136]) + (int_64)*(*($3)))
	$5 = *($3 + [12])
	$4 = *($1)
	*($1 + [144]) = ((int_64)*($1 + [144]) + (int_64)*(*($3)))
	$6 = *(($6 + [180]))
	$6 = *(*($3 + [8]) + [4])
	$9 = *($6 + [176])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$3 }
	$10 = *(*(($3 + [4])))
	
.LOOP $label$4:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$3 }
	$9 = ($9 + [24])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($9 + [16]))), [496])
	$10 = ((int_64)*($9 + [8]) + (int_64)*($6))
	*($9 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [576])
	goto $label$1 
	
.LABEL $label$2
	*(($11 + [24])) = (int_64)1398362884
	*($11 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$10 = (int_64)5462355
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [688])
	*($11 + [8]) = *(*(($3 + [4])))
	$9 = *($3)
	*(($11 + [28])) = *(($9 + [12]))
	*(($7 = (($11 + [8]) + [16]))) = *(($9 + [8]))
	*((($11 + [8]) + [12])) = *(($9 + [4]))
	*($11 + [16]) = *($9)
	$6 = ($1 + [180])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)*(($1 + [184]))) ){ goto $label$11 }
	*($9) = *($11 + [8])
	*(($9 + [16])) = *($7)
	*(($9 + [8])) = *((($11 + [8]) + [8]))
	*($6) = (*($6) + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $125(($1 + [176]), ($11 + [8]))
	
.LABEL $label$10
	*($1 + [160]) = (*($1 + [160]) + [1])
	
.LABEL $label$1
	if ( (uint_64)(*(($1 + [136])) <= *($1 + [128])) ){ goto $label$12 }
	*($1 + [44]) = [3]
	$7 = ($5 + [208])
	CALL $126(($11 + [8]), $7)
	$6 = *(($11 + [132]))
	$9 = *($11 + [128])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	$10 = *(*($3 + [16]))
	
.LOOP $label$14:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$13 }
	$9 = ($9 + [8])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = $6
	
.LABEL $label$13
	$3 = ($9 + [8])
	$8 = ($6 - $3)
	$6 = int_32($8 >> [3])
	if ( ($6 == 0) ){ goto $label$15 }
	CALL memmove($9, $3, $8)
	
.LABEL $label$15
	*(($11 + [132])) = ($9 + ($6 << [3]))
	CALL $10($7, ($11 + [8]), *($5))
	if ( ((*($11 + [192]) & [1]) == 0) ){ goto $label$16 }
	CALL $247(*(($11 + [200])))
	
.LABEL $label$16
	$3 = *($11 + [140])
	if ( ($3 == 0) ){ goto $label$17 }
	$5 = ($11 + [144])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$19 }
	$6 = ([0] - $3)
	$9 = ($9 + [-24])
	
.LOOP $label$20:
	if ( ((*($9) & [1]) == 0) ){ goto $label$21 }
	CALL $247(*(($9 + [8])))
	
.LABEL $label$21
	$9 = ($9 + [-24])
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$20 }
	$9 = *(($11 + [140]))
	goto $label$18 
	
.LABEL $label$19
	$9 = $3
	
.LABEL $label$18
	*($5) = $3
	CALL $247($9)
	
.LABEL $label$17
	$9 = *(($11 + [128]))
	if ( ($9 == 0) ){ goto $label$22 }
	*(($11 + [132])) = $9
	CALL $247($9)
	
.LABEL $label$22
	$9 = *($11 + [116])
	if ( ($9 == 0) ){ goto $label$23 }
	*(($11 + [120])) = $9
	CALL $247($9)
	
.LABEL $label$23
	$9 = *($11 + [104])
	if ( ($9 == 0) ){ goto $label$12 }
	*(($11 + [108])) = $9
	CALL $247($9)
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($11 + [8]) = [0]
	CALL $82(($11 + [8]), $1)
	$6 = *($11 + [8])
	if ( ($6 <= [513]) ){ goto $label$25 }
	$9 = CALL malloc($6)
	goto $label$24 
	
.LABEL $label$25
	$9 = ($12 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$24
	*($11 + [12]) = $9
	*($11 + [8]) = $9
	*($11 + [16]) = ($9 + $6)
	CALL $83(($11 + [8]), $1)
	CALL db_update_i64(*($1 + [208]), $2, $9, $6)
	if ( ($6 <= [513]) ){ goto $label$26 }
	CALL free($9)
	
.LABEL $label$26
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$27 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*([0] + [4]) = ($11 + [208])
}

void .FUNC $72 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$3 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $1
	$5 = [0]
	$2 = CALL db_find_i64($3, $1, (int_64)6820307092563673088, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $7(($6 + [8]), $2)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($6 + [8])), [272])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [976])
	CALL eosio_assert(((uint_64)*($5 + [8]) >= (uint_64)*(($0 + [80]))), [2064])
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $247($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $247($5)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [20]) = (*($1 + [20]) + [1])
	$3 = *($1)
	CALL eosio_assert([1], [608])
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [12])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [8])
	$4 = ($1 + [20])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	$5 = CALL $23($9, $5)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($5 + [4]), $4, [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	CALL db_update_i64(*($1 + [28]), $2, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$4 = *($1)
	$5 = ($1 + [12])
	$7 = *($5)
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$1 }
	$9 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)*($8) != (int_64)$9) ){ goto $label$3 }
	if ( ((int_32)(*(($8 + [8])) & [255]) == (int_32)[1]) ){ goto $label$1 }
	
.LABEL $label$3
	$8 = ($8 + [16])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$2 }
	$8 = $7
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)$7), [1824])
	$5 = ($8 + [16])
	$3 = (*($5) - $5)
	$7 = int_32($3 >> [4])
	if ( ($7 == 0) ){ goto $label$4 }
	CALL memmove($8, $5, $3)
	
.LABEL $label$4
	$5 = ($8 + ($7 << [4]))
	*(($3 = ($1 + [12]))) = $5
	$8 = [8]
	$6 = ($1 + [8])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)*(($7 + [8])) == (int_32)[2]) ){ goto $label$6 }
	$7 = ($7 + [16])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$5 }
	*(($7 + [8])) = [1]
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$5 = *($1 + [8])
	$7 = *($3)
	$3 = ($7 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	
.LOOP $label$8:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$9 }
	$8 = ((((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[9]) + $8) + [9])
	
.LABEL $label$9
	if ( ($8 <= [513]) ){ goto $label$11 }
	$7 = CALL malloc($8)
	goto $label$10 
	
.LABEL $label$11
	$7 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$10
	*($10) = $7
	*($10 + [8]) = ($7 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [672])
	CALL memcpy($7, $1, [8])
	*($10 + [4]) = ($7 + [8])
	CALL $56($10, $6)
	CALL db_update_i64(*($1 + [24]), $2, $7, $8)
	if ( ($8 <= [513]) ){ goto $label$12 }
	CALL free($7)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN3dao11votecouncliEyNSt3__16vectorIyNS0_9allocatorIyEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	*($16 + [96]) = $1
	CALL require_auth($1)
	CALL prints([1872])
	CALL $72($0, $1)
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$14() / (uint_64)(int_64)1000000)) <= (uint_32)*(($0 + [24]))), [1904])
	CALL eosio_assert((int_32((*($2 + [4]) - *($2)) >> [3]) <= [4]), [1936])
	*((($16 + [56]) + [32])) = [0]
	*($16 + [72]) = (int_64)-1
	*($16 + [80]) = (int_64)0
	$8 = *($0)
	*($16 + [56]) = $8
	*($16 + [64]) = $8
	*(($9 = (($16 + [16]) + [32]))) = [0]
	*($16 + [24]) = $1
	*($16 + [16]) = $8
	*($16 + [32]) = (int_64)-1
	*($16 + [40]) = (int_64)0
	$3 = *($2 + [4])
	$14 = *($2)
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$1 }
	$4 = (($16 + [16]) + [24])
	$10 = (($16 + [56]) + [8])
	$12 = (($16 + [56]) + [28])
	$13 = [0]
	$15 = [0]
	
.LOOP $label$2:
	$1 = *($14)
	if ( ((int_32)$15 == (int_32)$13) ){ goto $label$3 }
	$2 = ($15 + [-24])
	$5 = ([0] - $13)
	
.LOOP $label$4:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$3 }
	$15 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$15 == (int_32)$13) ){ goto $label$12 }
	$13 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)($16 + [56])), [272])
	if ( $13 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = CALL db_find_i64(*($16 + [56]), *($10), (int_64)4730634643120193536, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$13 = CALL $44(($16 + [56]), $2)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)($16 + [56])), [272])
	
.LABEL $label$11
	$1 = *($16 + [96])
	$7 = *($4)
	$11 = (($16 + [16]) + [28])
	$15 = *($11)
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$13 }
	$2 = ($15 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$14:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$13 }
	$15 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$9 }
	$15 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)($16 + [16])), [272])
	if ( $15 ){ goto $label$6 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([0], [2032])
	goto $label$5 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*($16 + [16]), *((($16 + [16]) + [8])), (int_64)-2507753063930920960, $1)
	if ( ((int_32)$2 >= (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = *($0)
	CALL eosio_assert([1], [336])
	CALL $73(($16 + [56]), $13, $1)
	$1 = *($0)
	*($16 + [12]) = $14
	*($16 + [8]) = ($16 + [96])
	*($16 + [136]) = $1
	CALL eosio_assert(((int_64)*($16 + [16]) == (int_64)CALL $fimport$13()), [144])
	*((($16 + [112]) + [8])) = ($16 + [136])
	*($16 + [116]) = ($16 + [8])
	*($16 + [112]) = ($16 + [16])
	*(($2 = CALL $246([32])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [20]) = ($16 + [16])
	CALL $74(($16 + [112]), $2)
	*($16 + [128]) = $2
	$1 = *($2)
	*($16 + [112]) = $1
	$15 = *($2 + [24])
	*($16 + [108]) = $15
	$6 = *($11)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$16 }
	*($6 + [8]) = $1
	*($6 + [16]) = $15
	*($16 + [128]) = [0]
	*($6) = $2
	*($11) = ($6 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $66($4, ($16 + [128]), ($16 + [112]), ($16 + [108]))
	
.LABEL $label$15
	$2 = *($16 + [128])
	*($16 + [128]) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = *($2 + [8])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($2 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$17
	CALL $247($2)
	goto $label$5 
	
.LABEL $label$7
	$15 = CALL $64(($16 + [16]), $2)
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)($16 + [16])), [272])
	
.LABEL $label$6
	$6 = ($15 + [12])
	CALL eosio_assert((int_32((*($6) - *($15 + [8])) >> [3]) <= [3]), [1968])
	$6 = *($6)
	$2 = *($15 + [8])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$18 }
	$1 = *($14)
	
.LOOP $label$19:
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$18 }
	$2 = ($2 + [8])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$19 }
	$2 = $6
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$2 == (int_32)$6), [2000])
	$1 = *($0)
	CALL eosio_assert([1], [336])
	CALL $75(($16 + [56]), $13, $1)
	$1 = *($0)
	*($16 + [112]) = $14
	CALL eosio_assert([1], [336])
	CALL $76(($16 + [16]), $15, $1, ($16 + [112]))
	
.LABEL $label$5
	$14 = ($14 + [8])
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$20 }
	$13 = *((($16 + [56]) + [24]))
	$15 = *($12)
	goto $label$2 
	
.LABEL $label$20
	$5 = *($16 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$14 = ($16 + [44])
	$2 = *($14)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	$15 = *($6 + [8])
	if ( ($15 == 0) ){ goto $label$25 }
	*(($6 + [12])) = $15
	CALL $247($15)
	
.LABEL $label$25
	CALL $247($6)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($16 + [40]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $5
	
.LABEL $label$21
	*($14) = $5
	CALL $247($2)
	
.LABEL $label$1
	$15 = *($16 + [80])
	if ( ($15 == 0) ){ goto $label$26 }
	$5 = ($16 + [84])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL $247(*(($6 + [16])))
	
.LABEL $label$31
	CALL $247($6)
	
.LABEL $label$30
	if ( ((int_32)$15 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($16 + [80]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $15
	
.LABEL $label$27
	*($5) = $15
	CALL $247($2)
	
.LABEL $label$26
	*([0] + [4]) = ($16 + [144])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$5 = *($3)
	$4 = *($1)
	$8 = ($1 + [12])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($5)
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $77($8, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $21($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$3 = *($6 + [4])
	$4 = ($1 + [12])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($6 + [8])
	*($4) = $8
	*($6) = *($3)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $77($5, $3)
	$8 = *($4)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507753063930920960, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [20]) = (*($1 + [20]) + [1])
	$3 = *($1)
	CALL eosio_assert([1], [608])
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [12])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [8])
	$4 = ($1 + [20])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	$5 = CALL $23($9, $5)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($5 + [4]), $4, [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	CALL db_update_i64(*($1 + [28]), $2, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN3dao4voteEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($8 + [40]) = $1
	*($8 + [32]) = $2
	*($8 + [31]) = $3
	CALL require_auth($2)
	$4 = *(($0 + [272]))
	$7 = *(($0 + [276]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$3 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$1 }
	$7 = $3
	$6 = ($3 + [-24])
	$3 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [248])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$5), [272])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$3 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $79($5, $3)
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$5), [272])
	
.LABEL $label$3
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [2096])
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)[6]), [2128])
	CALL eosio_assert(((uint_32)*($7 + [48]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$14() / (uint_64)(int_64)1000000))), [2176])
	CALL $72($0, $2)
	$6 = *(($7 + [84]))
	$3 = *($7 + [80])
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($3) == (int_64)$2) ){ goto $label$5 }
	$3 = ($3 + [16])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$6 }
	$3 = $6
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$3 == (int_32)$6), [2208])
	CALL eosio_assert(((int_32)*($7 + [56]) != (int_32)[0]), [2240])
	$2 = *($0)
	*($8 + [16]) = $0
	*($8 + [12]) = ($8 + [32])
	*($8 + [8]) = ($8 + [31])
	*($8 + [20]) = ($8 + [40])
	CALL eosio_assert($4, [336])
	CALL $80($5, $7, $2, ($8 + [8]))
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $246([216])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84]) = [0]
	*($6 + [88]) = [0]
	*($6 + [92]) = [0]
	*($6 + [96]) = [0]
	*($6 + [100]) = [0]
	*($6 + [112]) = [0]
	*($6 + [116]) = [0]
	*($6 + [120]) = [0]
	*($6 + [164]) = [0]
	*($6 + [168]) = [0]
	*($6 + [172]) = [0]
	*($6 + [176]) = [0]
	*($6 + [180]) = [0]
	*($6 + [184]) = [0]
	*($6 + [192]) = [0]
	*($6 + [196]) = [0]
	*($6 + [200]) = [0]
	*($6 + [204]) = $0
	CALL $86(($8 + [32]), $6)
	*($6 + [208]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [208])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $87(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $88($4)
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL memcpy($0, $1, [96])
	$0 = *($2 + [96])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($2 + [100])) = $0
	CALL $247($0)
	*(($3 = ($2 + [104]))) = [0]
	*(($2 + [96])) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$3 = ($2 + [104])
	
.LABEL $label$1
	$0 = ($1 + [96])
	*(($2 + [96])) = *($0)
	*(($2 + [100])) = *(($1 + [100]))
	$4 = ($1 + [104])
	*($3) = *($4)
	*($4) = [0]
	*($0) = (int_64)0
	$0 = *($2 + [108])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($2 + [112])) = $0
	CALL $247($0)
	*(($3 = ($2 + [116]))) = [0]
	*(($2 + [108])) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$3 = ($2 + [116])
	
.LABEL $label$3
	$0 = ($1 + [108])
	*(($2 + [108])) = *($0)
	*(($2 + [112])) = *(($1 + [112]))
	$4 = ($1 + [116])
	*($3) = *($4)
	*($4) = [0]
	*($0) = (int_64)0
	$0 = *($2 + [120])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($2 + [124])) = $0
	CALL $247($0)
	*(($3 = ($2 + [128]))) = [0]
	*(($2 + [120])) = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$3 = ($2 + [128])
	
.LABEL $label$5
	$0 = ($1 + [120])
	*(($2 + [120])) = *($0)
	*(($2 + [124])) = *(($1 + [124]))
	$4 = ($1 + [128])
	*($3) = *($4)
	*($4) = [0]
	*($0) = (int_64)0
	$3 = *($2 + [132])
	if ( ($3 == 0) ){ goto $label$10 }
	$5 = ($2 + [136])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	$4 = ([0] - $3)
	$0 = ($0 + [-24])
	
.LOOP $label$11:
	if ( ((*($0) & [1]) == 0) ){ goto $label$12 }
	CALL $247(*(($0 + [8])))
	
.LABEL $label$12
	$0 = ($0 + [-24])
	if ( ((int_32)($0 + $4) != (int_32)[-24]) ){ goto $label$11 }
	$0 = *(($2 + [132]))
	goto $label$8 
	
.LABEL $label$10
	$3 = ($2 + [140])
	$5 = ($2 + [136])
	goto $label$7 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*(($2 + [136])) = $3
	CALL $247($0)
	*(($3 = ($2 + [140]))) = [0]
	*(($2 + [132])) = (int_64)0
	
.LABEL $label$7
	$0 = ($1 + [132])
	*(($2 + [132])) = *($0)
	*($5) = *(($1 + [136]))
	$4 = ($1 + [140])
	*($3) = *($4)
	*($4) = [0]
	*($0) = (int_64)0
	CALL memcpy(($2 + [144]), ($1 + [144]), [40])
	$4 = ($1 + [184])
	$0 = ($2 + [184])
	if ( (*($2 + [184]) & [1]) ){ goto $label$14 }
	*($0) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*(($2 + [192]))) = [0]
	*(($2 + [188])) = [0]
	
.LABEL $label$13
	CALL $251($0, [0])
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	*(($1 + [188])) = [0]
	*(($1 + [184])) = [0]
	*(($1 + [192])) = [0]
	return $2
}

void .FUNC $259 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $258 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $246($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $247($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [784])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [4])
	CALL eosio_assert(((uint_32)($1 + [-12]) > (uint_32)[7]), [784])
	$5 = ($8 + [24])
	CALL memcpy($5, ($6 + [12]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$6 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $6), (int_32 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $246(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $247($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $250 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $246($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $247($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $253 (int_32 $0, int_32 $1)
{
	return CALL $252($0, $1, CALL $285($1))
}

int_32 .FUNC $252 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $250($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $255 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $250($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $254 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $255($0, $1, $2, CALL $285($2))
}

int_32 .FUNC $257 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $258($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12768], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $257(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $257(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC _ZN3dao10setcouncliEymyyy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1456]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$7 = *(($0 + [272]))
	$14 = *(($0 + [276]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$5 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$5 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [248])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$8 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [204]) == (int_32)$6), [272])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$14 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $79($6, $14)
	CALL eosio_assert(((int_32)*($9 + [204]) == (int_32)$6), [272])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [2304])
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)[3]), [2384])
	*(($0 + [20])) = $3
	*(($0 + [16])) = $2
	*(($0 + [24])) = $4
	*(($0 + [32])) = $5
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

void .FUNC _ZN3dao8settokenENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [32])
	*([0] + [4]) = $19
	$14 = (int_64)0
	$13 = (int_64)59
	$17 = [1456]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$18 = *($17)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$18 = ($18 + [165])
	goto $label$3 
	
.LABEL $label$4
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$17 = ($17 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($15)
	$10 = ($0 + [144])
	$4 = *($10)
	$3 = ($0 + [140])
	$18 = *($3)
	if ( ((int_32)$18 == (int_32)$4) ){ goto $label$6 }
	$5 = ($1 + [1])
	$11 = ($1 + [4])
	$12 = ($1 + [8])
	
.LOOP $label$8:
	$17 = ($17 & [1])
	$17 = *($1)
	$6 = ($17 & [1])
	$17 = *($18)
	$7 = uint_32($17 >> [1])
	$8 = ( *($18 + [4]) ? $7 : $6 )
	if ( ((int_32)$8 != (int_32)( *($11) ? uint_32($17 >> [1]) : $17 )) ){ goto $label$9 }
	$9 = ( *($12) ? $5 : $17 )
	if ( $6 ){ goto $label$11 }
	if ( ($8 == 0) ){ goto $label$10 }
	$17 = [0]
	
.LOOP $label$12:
	if ( ((int_32)*((($18 + $17) + [1])) != (int_32)*(($9 + $17))) ){ goto $label$9 }
	$17 = ($17 + [1])
	if ( ((int_32)$7 != (int_32)$17) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$10 }
	if ( CALL memcmp(( *($18 + [8]) ? ($18 + [1]) : $6 ), $9, $8) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_64)*($18 + [16]) == (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$9
	$18 = ($18 + [24])
	if ( ((int_32)$18 != (int_32)$4) ){ goto $label$8 }
	$18 = $4
	
.LABEL $label$7
	$17 = *(($0 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$17 = $18
	
.LABEL $label$5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)$18 == (int_32)$17), [2464])
	*($19 + [16]) = [0]
	*($19 + [8]) = (int_64)0
	CALL $249(($19 + [8]), $1)
	*($19 + [24]) = $2
	$17 = *($10)
	if ( ((uint_32)$17 >= (uint_32)*(($0 + [148]))) ){ goto $label$14 }
	CALL $260($17, ($19 + [8]))
	*($17 + [16]) = *(($19 + [24]))
	*(($17 = ($0 + [144]))) = (*($17) + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $100($3, ($19 + [8]))
	
.LABEL $label$13
	CALL $10(($0 + [208]), $7, *($0))
	if ( ((*($19 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $247(*(($19 + [16])))
	
.LABEL $label$15
	*([0] + [4]) = ($19 + [32])
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	$2 = *($1)
	CALL $260(($6 + [64]), ($1 + [8]))
	$3 = *($1 + [20])
	CALL $260(($6 + [48]), ($1 + [24]))
	CALL $260(($6 + [32]), ($1 + [36]))
	$4 = *($1 + [56])
	$5 = *($1 + [48])
	CALL $260(($6 + [16]), ($1 + [64]))
	CALL $260($6, ($1 + [76]))
	CALL $240($0, $2, ($6 + [64]), $3, ($6 + [48]), ($6 + [32]), $5, $4, ($6 + [16]), $6, *($1 + [88]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL $247(*($6 + [8]))
	
.LABEL $label$1
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($6 + [24]))
	
.LABEL $label$2
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($6 + [40]))
	
.LABEL $label$3
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $247(*($6 + [56]))
	
.LABEL $label$4
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*($6 + [72]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27(*($1), (*($0) + [36]))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $27(*($1), ($0 + [64]))
	CALL $27(*($1), ($0 + [76]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($0 + [88]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [44]) = [7]
	$4 = *($1)
	$7 = *(($5 + [108]))
	$5 = *($3)
	$10 = *(($5 + [104]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$1 }
	$8 = *(*(($3 + [4])))
	
.LOOP $label$2:
	if ( ((int_64)*($10) == (int_64)$8) ){ goto $label$1 }
	$10 = ($10 + [8])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$2 }
	$10 = $7
	
.LABEL $label$1
	$6 = ($10 + [8])
	$9 = ($7 - $6)
	$7 = int_32($9 >> [3])
	if ( ($7 == 0) ){ goto $label$3 }
	CALL memmove($10, $6, $9)
	
.LABEL $label$3
	$6 = ($5 + [8])
	*(($5 + [108])) = ($10 + ($7 << [3]))
	$7 = *(($3 + [4]))
	$3 = ($5 + [120])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)*(($5 + [124]))) ){ goto $label$5 }
	*($3) = ($10 + [8])
	*($10) = *($7)
	goto $label$4 
	
.LABEL $label$5
	CALL $77(($5 + [116]), $7)
	
.LABEL $label$4
	CALL $10(($5 + [208]), $6, *($5))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($11) = [0]
	CALL $82($11, $1)
	$7 = *($11)
	if ( ($7 <= [513]) ){ goto $label$7 }
	$10 = CALL malloc($7)
	goto $label$6 
	
.LABEL $label$7
	$10 = ($12 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$6
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $7)
	CALL $83($11, $1)
	CALL db_update_i64(*($1 + [208]), $2, $10, $7)
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL free($10)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC _ZN3dao6accuseEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9 + [8]) = $2
	CALL require_auth($3)
	CALL $96($0, $3)
	$4 = *(($0 + [272]))
	$8 = *(($0 + [276]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [248])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$6), [272])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $79($6, $8)
	CALL eosio_assert(((int_32)*($7 + [204]) == (int_32)$6), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2304])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)[4]), [2368])
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)[3]), [2384])
	CALL _ZN3dao11exitcouncliERKy($0, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $96 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [352]))
	$6 = *(($0 + [356]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( (int_64)(*(*($5)) == 0) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [328])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)$5), [272])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $46($5, $6)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)$5), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1792])
	$4 = *(($4 + [12]))
	$5 = *($4 + [8])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($5) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_32)(*(($5 + [8])) & [255]) != (int_32)[2]) ){ goto $label$5 }
	
.LABEL $label$7
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$5 = $4
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$5 != (int_32)$4), [2432])
	return [1]
}

void .FUNC _ZN3dao10setrewardsEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1456]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [272]))
	$11 = *(($0 + [276]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [248])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [204]) == (int_32)$3), [272])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $79($3, $11)
	CALL eosio_assert(((int_32)*($6 + [204]) == (int_32)$3), [272])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [2304])
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)[3]), [2384])
	*(($0 + [64])) = $2
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $91($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [688])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [688])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $247($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $246(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $259($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $247($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC _ZN3dao7processEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	*($11 + [8]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1456]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [272]))
	$10 = *(($0 + [276]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [248])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$4), [272])
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	$5 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $79($4, $5)
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$4), [272])
	
.LABEL $label$7
	$3 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($3, [2304])
	$2 = *(($0 + [108]))
	$5 = *(($0 + [104]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$9 }
	$5 = ($5 + [8])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$10 }
	$5 = $2
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$5 != (int_32)$2), [2336])
	$7 = *($0)
	*($11) = $0
	*($11 + [4]) = ($11 + [8])
	CALL eosio_assert($3, [336])
	CALL $94($4, $10, $7, $11)
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $41(CALL $40($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $41($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [44]) = [1]
	$4 = *($1)
	$3 = *($3)
	*($1 + [188]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)*(($3 + [88])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*(($3 = $6)) = [0]
	CALL $82($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $83($3, $1)
	CALL db_update_i64(*($1 + [208]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [44]) = [5]
	$3 = *($1)
	CALL eosio_assert([1], [608])
	*(($6 = $5)) = [0]
	CALL $82($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $83($6, $1)
	CALL db_update_i64(*($1 + [208]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [44]) = [2]
	$3 = *($1)
	CALL eosio_assert([1], [608])
	*(($6 = $5)) = [0]
	CALL $82($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $83($6, $1)
	CALL db_update_i64(*($1 + [208]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($9 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $246(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$3 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $140($9, $1, $2)
	$4 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$5 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$6 = ($7 + [-4])
	*($1) = *($6)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$6 = ($7 + [8])
	*($1) = *($6)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $5) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $247($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $247($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $247($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $136($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $29($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $137($4, $1)
	CALL $139(CALL $138(CALL $138($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $247($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $247($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $247($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $247($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $247($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $247($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $247($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $247($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $246($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	*(($2 = $3) + [108]) = $0
	*($2 + [96]) = *($1)
	*($2 + [100]) = *($1 + [4])
	$0 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $1)
	
.LABEL $label$1
	*(($2 + [16])) = [0]
	*(($2 + [28])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [20]) = [0]
	*($2 + [24]) = [0]
	*(($2 + [32])) = [0]
	*($2 + [36]) = [0]
	*(($2 + [40])) = [0]
	*(($2 + [44])) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = [0]
	*(($2 + [68])) = [0]
	*(($2 + [72])) = [0]
	*($2 + [76]) = [0]
	*(($2 + [80])) = [0]
	*(($2 + [84])) = [0]
	*($2 + [88]) = [0]
	*($2 + [116]) = $0
	*($2 + [112]) = $0
	*($2 + [120]) = ($0 + $1)
	*($2 + [128]) = ($2 + [112])
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy($2, *($2 + [116]), [8])
	*($2 + [116]) = (*($2 + [116]) + [8])
	CALL $27(($2 + [112]), ($2 + [8]))
	CALL eosio_assert(((int_32)*($2 + [120]) != (int_32)*($2 + [116])), [784])
	CALL memcpy(($2 + [20]), *($2 + [116]), [1])
	*($2 + [116]) = (*($2 + [116]) + [1])
	CALL $27(($2 + [112]), ($2 + [24]))
	*($2 + [136]) = $2
	CALL $238(($2 + [136]), ($2 + [128]))
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($0)
	
.LABEL $label$4
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [108])
	CALL $239(($2 + [112]), $2)
	if ( ((*($2 + [76]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($2 + [84])))
	
.LABEL $label$5
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($2 + [72])))
	
.LABEL $label$6
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($2 + [44])))
	
.LABEL $label$7
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*(($2 + [32])))
	
.LABEL $label$8
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $247(*(($2 + [16])))
	
.LABEL $label$9
	*([0] + [4]) = ($2 + [144])
	return [1]
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [36]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([16216])
}

int_32 .FUNC $263 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

int_32 .FUNC __month_to_secs (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *((($0 << [2]) + [17568]))
	return ( ( ($2 + [86400]) ? $2 : $1 ) ? $2 : ((int_32)$0 > (int_32)[1]) )
}

int_64 .FUNC __year_to_secs (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = (*([0] + [4]) - [16])
	if ( ((uint_64)((int_64)$0 + (int_64)-2) > (uint_64)(int_64)136) ){ goto $label$10 }
	$4 = (CASTING uint_32)(uint_64 $0)
	$3 = ($4 + [-68])
	$2 = int_32($3 >> [2])
	if ( (($3 & [3]) == 0) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$8 }
	*($1) = [0]
	goto $label$8 
	
.LABEL $label$10
	if ( $1 ){ goto $label$11 }
	*($2 + [12]) = [0]
	$1 = ($2 + [12])
	
.LABEL $label$11
	$4 = [0]
	$0 = ((int_64)$0 + (int_64)-100)
	$2 = (CASTING uint_32)(uint_64 ((int_64)$0 % (int_64)400))
	$3 = (int_32($2 >> [31]) + (CASTING uint_32)(uint_64 ((int_64)$0 / (int_64)400)))
	$2 = ( ($2 + [400]) ? $2 : ((int_32)$2 < (int_32)[0]) )
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((int_32)$2 < (int_32)[200]) ){ goto $label$6 }
	if ( ((int_32)$2 < (int_32)[300]) ){ goto $label$5 }
	$4 = [3]
	$2 = ($2 + [-300])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$9
	$2 = ($2 + [-1])
	if ( ($1 == 0) ){ goto $label$8 }
	*($1) = [1]
	
.LABEL $label$8
	return (CASTING int_64)(int_32 ((((int_32)$4 * (int_32)[31536000]) + ((int_32)$2 * (int_32)[86400])) + [2087447296]))
	
.LABEL $label$7
	$2 = [1]
	goto $label$2 
	
.LABEL $label$6
	$4 = ((int_32)$2 > (int_32)[99])
	$2 = ( ($2 + [-100]) ? $2 : $4 )
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = [2]
	$2 = ($2 + [-200])
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = uint_32($2 >> [2])
	$2 = (($2 & [3]) == 0)
	goto $label$1 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	*($1) = $2
	return ((int_64)((int_64)((int_64)$0 * (int_64)31536000) + (int_64)((int_64)(CASTING int_64)(int_32 (((((int_32)$3 * (int_32)[97]) - $2) + ((int_32)$4 * (int_32)[24])) + $5)) * (int_64)86400)) + (int_64)946771200)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $266([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $266($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $266($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [928])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [4176]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [4192]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [4208])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [4176]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $209(($9 + [560]), $0)
	if ( ((int_64)$2 <= (int_64)3688066731363794943) ){ goto $label$56 }
	if ( ((int_64)$2 > (int_64)5606348217378668543) ){ goto $label$55 }
	if ( ((int_64)$2 <= (int_64)4923678705747338111) ){ goto $label$53 }
	if ( ((int_64)$2 <= (int_64)4982480069499813887) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)4982480069499813888) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)4982834236889645056) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)4986949636806390272) ){ goto $label$22 }
	*($9 + [556]) = [0]
	*($9 + [552]) = [1]
	*($9) = *($9 + [552])
	CALL $210($4, $9)
	goto $label$22 
	
.LABEL $label$56
	if ( ((int_64)$2 <= (int_64)-4417057682011324417) ){ goto $label$54 }
	if ( ((int_64)$2 <= (int_64)-3772709285037867009) ){ goto $label$52 }
	if ( ((int_64)$2 <= (int_64)-2507761364705715201) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)-2507761364705715200) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)3607854064299147264) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)3688066711195922080) ){ goto $label$22 }
	*($9 + [452]) = [0]
	*($9 + [448]) = [2]
	*($9 + [104 align=4]) = *($9 + [448])
	CALL $220($4, ($9 + [104]))
	goto $label$22 
	
.LABEL $label$55
	if ( ((int_64)$2 <= (int_64)6295352688150315007) ){ goto $label$51 }
	if ( ((int_64)$2 <= (int_64)8417589614679687167) ){ goto $label$47 }
	if ( ((int_64)$2 == (int_64)8417589614679687168) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)8428113298167169024) ){ goto $label$22 }
	*($9 + [508]) = [0]
	*($9 + [504]) = [3]
	*($9 + [48 align=4]) = *($9 + [504])
	CALL $214($4, ($9 + [48]))
	goto $label$22 
	
.LABEL $label$54
	if ( ((int_64)$2 > (int_64)-4995815906127904769) ){ goto $label$50 }
	if ( ((int_64)$2 > (int_64)-5001342339331915777) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)-8523849321785851904) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-5915331450302889984) ){ goto $label$22 }
	*($9 + [340]) = [0]
	*($9 + [336]) = [4]
	*($9 + [216 align=4]) = *($9 + [336])
	CALL $217($4, ($9 + [216]))
	goto $label$22 
	
.LABEL $label$53
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$45 }
	if ( ((int_64)$2 == (int_64)3688066731363794944) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)4921564929938423808) ){ goto $label$22 }
	*($9 + [396]) = [0]
	*($9 + [392]) = [5]
	*($9 + [160 align=4]) = *($9 + [392])
	CALL $223($4, ($9 + [160]))
	goto $label$22 
	
.LABEL $label$52
	if ( ((int_64)$2 > (int_64)-4417017204164263937) ){ goto $label$44 }
	if ( ((int_64)$2 == (int_64)-4417057682011324416) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)-4417020468302328832) ){ goto $label$22 }
	*($9 + [316]) = [0]
	*($9 + [312]) = [6]
	*($9 + [240 align=4]) = *($9 + [312])
	CALL $220($4, ($9 + [240]))
	goto $label$22 
	
.LABEL $label$51
	if ( ((int_64)$2 > (int_64)6254687459993452543) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)5606361045814096384) ){ goto $label$22 }
	*($9 + [412]) = [0]
	*($9 + [408]) = [7]
	*($9 + [144 align=4]) = *($9 + [408])
	CALL $222($4, ($9 + [144]))
	goto $label$22 
	
.LABEL $label$50
	if ( ((int_64)$2 > (int_64)-4417316094588185601) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)-4995815906127904768) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-4417316094871896064) ){ goto $label$22 }
	*($9 + [380]) = [0]
	*($9 + [376]) = [8]
	*($9 + [176 align=4]) = *($9 + [376])
	CALL $224($4, ($9 + [176]))
	goto $label$22 
	
.LABEL $label$49
	if ( ((int_64)$2 == (int_64)4923678705747338112) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4929626698778935296) ){ goto $label$22 }
	*($9 + [460]) = [0]
	*($9 + [456]) = [9]
	*($9 + [96 align=4]) = *($9 + [456])
	CALL $219($4, ($9 + [96]))
	goto $label$22 
	
.LABEL $label$48
	if ( ((int_64)$2 == (int_64)-3772709285037867008) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-2507766120631500800) ){ goto $label$22 }
	*($9 + [428]) = [0]
	*($9 + [424]) = [10]
	*($9 + [128 align=4]) = *($9 + [424])
	CALL $221($4, ($9 + [128]))
	goto $label$22 
	
.LABEL $label$47
	if ( ((int_64)$2 == (int_64)6295352688150315008) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)6820302146597270016) ){ goto $label$22 }
	*($9 + [532]) = [0]
	*($9 + [528]) = [11]
	*($9 + [24 align=4]) = *($9 + [528])
	CALL $212($4, ($9 + [24]))
	goto $label$22 
	
.LABEL $label$46
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4997502813781973504) ){ goto $label$22 }
	*($9 + [324]) = [0]
	*($9 + [320]) = [12]
	*($9 + [232 align=4]) = *($9 + [320])
	CALL $226($4, ($9 + [232]))
	goto $label$22 
	
.LABEL $label$45
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4923678638745461472) ){ goto $label$22 }
	*($9 + [284]) = [0]
	*($9 + [280]) = [13]
	*($9 + [272 align=4]) = *($9 + [280])
	CALL $217($4, ($9 + [272]))
	goto $label$22 
	
.LABEL $label$44
	if ( ((int_64)$2 == (int_64)-4417017204164263936) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4131108868577034240) ){ goto $label$22 }
	*($9 + [468]) = [0]
	*($9 + [464]) = [14]
	*($9 + [88 align=4]) = *($9 + [464])
	CALL $214($4, ($9 + [88]))
	goto $label$22 
	
.LABEL $label$43
	if ( ((int_64)$2 == (int_64)6254687459993452544) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)6295350939734006784) ){ goto $label$22 }
	*($9 + [540]) = [0]
	*($9 + [536]) = [15]
	*($9 + [16 align=4]) = *($9 + [536])
	CALL $210($4, ($9 + [16]))
	goto $label$22 
	
.LABEL $label$42
	if ( ((int_64)$2 == (int_64)-4417316094588185600) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4417304085339422720) ){ goto $label$22 }
	*($9 + [332]) = [0]
	*($9 + [328]) = [16]
	*($9 + [224 align=4]) = *($9 + [328])
	CALL $217($4, ($9 + [224]))
	goto $label$22 
	
.LABEL $label$41
	*($9 + [548]) = [0]
	*($9 + [544]) = [17]
	*($9 + [8 align=4]) = *($9 + [544])
	CALL $211($4, ($9 + [8]))
	goto $label$22 
	
.LABEL $label$40
	*($9 + [524]) = [0]
	*($9 + [520]) = [18]
	*($9 + [32 align=4]) = *($9 + [520])
	CALL $212($4, ($9 + [32]))
	goto $label$22 
	
.LABEL $label$39
	*($9 + [372]) = [0]
	*($9 + [368]) = [19]
	*($9 + [184 align=4]) = *($9 + [368])
	CALL $225($4, ($9 + [184]))
	goto $label$22 
	
.LABEL $label$38
	*($9 + [404]) = [0]
	*($9 + [400]) = [20]
	*($9 + [152 align=4]) = *($9 + [400])
	CALL $214($4, ($9 + [152]))
	goto $label$22 
	
.LABEL $label$37
	*($9 + [484]) = [0]
	*($9 + [480]) = [21]
	*($9 + [72 align=4]) = *($9 + [480])
	CALL $217($4, ($9 + [72]))
	goto $label$22 
	
.LABEL $label$36
	*($9 + [516]) = [0]
	*($9 + [512]) = [22]
	*($9 + [40 align=4]) = *($9 + [512])
	CALL $213($4, ($9 + [40]))
	goto $label$22 
	
.LABEL $label$35
	*($9 + [420]) = [0]
	*($9 + [416]) = [23]
	*($9 + [136 align=4]) = *($9 + [416])
	CALL $221($4, ($9 + [136]))
	goto $label$22 
	
.LABEL $label$34
	*($9 + [388]) = [0]
	*($9 + [384]) = [24]
	*($9 + [168 align=4]) = *($9 + [384])
	CALL $220($4, ($9 + [168]))
	goto $label$22 
	
.LABEL $label$33
	*($9 + [436]) = [0]
	*($9 + [432]) = [25]
	*($9 + [120 align=4]) = *($9 + [432])
	CALL $220($4, ($9 + [120]))
	goto $label$22 
	
.LABEL $label$32
	*($9 + [492]) = [0]
	*($9 + [488]) = [26]
	*($9 + [64 align=4]) = *($9 + [488])
	CALL $216($4, ($9 + [64]))
	goto $label$22 
	
.LABEL $label$31
	*($9 + [292]) = [0]
	*($9 + [288]) = [27]
	*($9 + [264 align=4]) = *($9 + [288])
	CALL $227($4, ($9 + [264]))
	goto $label$22 
	
.LABEL $label$30
	*($9 + [364]) = [0]
	*($9 + [360]) = [28]
	*($9 + [192 align=4]) = *($9 + [360])
	CALL $217($4, ($9 + [192]))
	goto $label$22 
	
.LABEL $label$29
	*($9 + [356]) = [0]
	*($9 + [352]) = [29]
	*($9 + [200 align=4]) = *($9 + [352])
	CALL $217($4, ($9 + [200]))
	goto $label$22 
	
.LABEL $label$28
	*($9 + [444]) = [0]
	*($9 + [440]) = [30]
	*($9 + [112 align=4]) = *($9 + [440])
	CALL $220($4, ($9 + [112]))
	goto $label$22 
	
.LABEL $label$27
	*($9 + [300]) = [0]
	*($9 + [296]) = [31]
	*($9 + [256 align=4]) = *($9 + [296])
	CALL $227($4, ($9 + [256]))
	goto $label$22 
	
.LABEL $label$26
	*($9 + [348]) = [0]
	*($9 + [344]) = [32]
	*($9 + [208 align=4]) = *($9 + [344])
	CALL $226($4, ($9 + [208]))
	goto $label$22 
	
.LABEL $label$25
	*($9 + [500]) = [0]
	*($9 + [496]) = [33]
	*($9 + [56 align=4]) = *($9 + [496])
	CALL $215($4, ($9 + [56]))
	goto $label$22 
	
.LABEL $label$24
	*($9 + [308]) = [0]
	*($9 + [304]) = [34]
	*($9 + [248 align=4]) = *($9 + [304])
	CALL $227($4, ($9 + [248]))
	goto $label$22 
	
.LABEL $label$23
	*($9 + [476]) = [0]
	*($9 + [472]) = [35]
	*($9 + [80 align=4]) = *($9 + [472])
	CALL $218($4, ($9 + [80]))
	
.LABEL $label$22
	CALL $228($4)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [928])
}

int_32 .FUNC $209 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [208])
	*([0] + [4]) = $6
	*($0) = $1
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*(($0 + [148])) = [0]
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*($0 + [208]) = $1
	*(($0 + [216])) = $1
	*(($0 + [224])) = (int_64)-1
	*(($0 + [232])) = [0]
	*(($0 + [236])) = [0]
	*(($0 + [240])) = [0]
	*($0 + [248]) = $1
	*(($0 + [256])) = $1
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = [0]
	*(($0 + [276])) = [0]
	*(($0 + [280])) = [0]
	*($0 + [288]) = $1
	*(($0 + [296])) = $1
	*(($0 + [304])) = (int_64)-1
	*(($0 + [312])) = [0]
	*(($0 + [316])) = [0]
	*(($0 + [320])) = [0]
	*($0 + [328]) = $1
	*(($0 + [336])) = $1
	*(($0 + [344])) = (int_64)-1
	*(($0 + [352])) = [0]
	*(($0 + [356])) = [0]
	*(($0 + [360])) = [0]
	$5 = ($0 + [8])
	$2 = CALL db_find_i64($1, $1, (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = ($0 + [208])
	CALL eosio_assert(((int_32)*(CALL $11($3, $2) + [200]) == (int_32)$3), [272])
	CALL $126(($6 + [8]), $3)
	goto $label$1 
	
.LABEL $label$2
	*((($6 + [8]) + [104])) = (int_64)0
	*((($6 + [8]) + [112])) = (int_64)0
	*((($6 + [8]) + [128])) = (int_64)0
	*((($6 + [8]) + [136])) = [0]
	*($6 + [104]) = (int_64)0
	*($6 + [128]) = (int_64)0
	*((($6 + [8]) + [140])) = [0]
	*($6 + [192]) = [0]
	*(($6 + [196])) = [0]
	*((($6 + [8]) + [192])) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = [4]
	$1 = CALL current_time()
	*($6 + [32]) = (int_64)15552000
	*($6 + [20]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [15552000])
	
.LABEL $label$1
	CALL $241($5, ($6 + [8]))
	if ( ((*($6 + [192]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*(($6 + [200])))
	
.LABEL $label$3
	$2 = *($6 + [140])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($6 + [144])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$5 = ($5 + [-24])
	
.LOOP $label$7:
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*(($5 + [8])))
	
.LABEL $label$8
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$7 }
	$5 = *(($6 + [140]))
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $247($5)
	
.LABEL $label$4
	$5 = *($6 + [128])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [132])) = $5
	CALL $247($5)
	
.LABEL $label$9
	$5 = *($6 + [116])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($6 + [120])) = $5
	CALL $247($5)
	
.LABEL $label$10
	$5 = *($6 + [104])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [108])) = $5
	CALL $247($5)
	
.LABEL $label$11
	*([0] + [4]) = ($6 + [208])
	return $0
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [688])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [688])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $247($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN3dao7closureEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL prints([3920])
	CALL require_auth($2)
	$6 = *(($0 + [272]))
	$10 = *(($0 + [276]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [248])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$4 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [204]) == (int_32)$8), [272])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $79($8, $10)
	CALL eosio_assert(((int_32)*($9 + [204]) == (int_32)$8), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [3936])
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)[4]), [3968])
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $202($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [784])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $206 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $88($4)
	CALL $247($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $88($4)
	CALL $247($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [208]))
}

void .FUNC _ZN3dao5clearEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1456]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$10 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [248]), *(($0 + [256])), (int_64)-5915097263704637440, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$3 = ($0 + [248])
	$5 = CALL $79($3, $5)
	
.LOOP $label$6:
	$10 = ($10 + [1])
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$5 }
	$2 = [0]
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [1184])
	CALL eosio_assert($4, [1232])
	$4 = CALL db_next_i64(*($5 + [208]), ($11 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $79($3, $4)
	
.LABEL $label$7
	CALL $206($3, $5)
	$5 = $2
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$5
	*(($0 + [40])) = (int_64)0
	*(($0 + [108])) = *(($0 + [104]))
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
	*([0] + [4]) = ($11 + [16])
}

void .FUNC _ZN3dao12agreeclosureEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL require_auth($2)
	CALL prints([4016])
	$5 = *(($0 + [272]))
	$8 = *(($0 + [276]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [248])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$3), [272])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $79($3, $7)
	CALL eosio_assert(((int_32)*($8 + [204]) == (int_32)$3), [272])
	
.LABEL $label$3
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [4032])
	CALL eosio_assert((*($8 + [56]) == 0), [4064])
	$4 = *(($8 + [180]))
	$7 = *($8 + [176])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$5 }
	$7 = ($7 + [24])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$6 }
	$7 = $4
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$7 != (int_32)$4), [4080])
	$4 = *(($8 + [84]))
	$7 = *($8 + [80])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$7 }
	$7 = ($7 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	$7 = $4
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$7 == (int_32)$4), [4128])
	$2 = *($0)
	CALL eosio_assert($5, [336])
	CALL $205($3, $8, $2)
	$6 = (PROMOTE float_64)(float_32 ((float_32)(CASTING float_32)(uint_64 *($8 + [64])) / (float_32)(CASTING float_32)(uint_32 *($8 + [160]))))
	if ( (((float_64)$6 < (float_64)(float_64)0.85) | ((float_64)$6 != (float_64)$6)) ){ goto $label$9 }
	CALL eosio_assert($5, [1184])
	CALL eosio_assert($5, [1232])
	$7 = CALL db_next_i64(*($8 + [208]), ($9 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $79($3, $7)
	
.LABEL $label$10
	CALL $206($3, $8)
	*(($7 = ($0 + [40]))) = ((int_64)*($7) + (int_64)-1)
	*(($7 = ($0 + [48]))) = ((int_64)*($7) + (int_64)1)
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $205 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)1)
	$3 = *($1)
	CALL eosio_assert([1], [608])
	*(($6 = $5)) = [0]
	CALL $82($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $4)
	CALL $83($6, $1)
	CALL db_update_i64(*($1 + [208]), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[3]), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [4])
	*($6) = (*($6) + [4])
	CALL $23($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN3dao9timedtaskEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_32 $28
	$28 = (*([0] + [4]) - [432])
	*([0] + [4]) = $28
	$6 = (int_64)0
	$27 = (int_64)59
	$24 = [1456]
	$22 = (int_64)0
	
.LOOP $label$1:
	$26 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($24)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [165])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$26 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$2
	$24 = ($24 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$22 = ((int_64)$26 | (int_64)$22)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($22)
	CALL prints([3008])
	$2 = *(($0 + [132]))
	$23 = *(($0 + [128]))
	if ( ((int_32)$23 == (int_32)$2) ){ goto $label$5 }
	$4 = ($0 + [208])
	$3 = ($0 + [248])
	$5 = (($28 + [16]) + [108])
	$10 = ($0 + [272])
	$11 = ($0 + [276])
	$12 = ($0 + [256])
	$13 = (($28 + [216]) + [124])
	$14 = (($28 + [216]) + [120])
	$15 = (($28 + [16]) + [100])
	$16 = (($28 + [16]) + [96])
	$17 = ($28 + [132])
	$18 = (($28 + [16]) + [112])
	$19 = (($28 + [16]) + [184])
	$21 = (($28 + [16]) + [132])
	$20 = (($28 + [16]) + [192])
	
.LOOP $label$6:
	$6 = *($23)
	$7 = *($10)
	$25 = *($11)
	if ( ((int_32)$25 == (int_32)$7) ){ goto $label$7 }
	$24 = ($25 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$8:
	if ( ((int_64)*(*($24)) == (int_64)$6) ){ goto $label$7 }
	$25 = $24
	$9 = ($24 + [-24])
	$24 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$25 == (int_32)$7) ){ goto $label$10 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [204]) == (int_32)$3), [272])
	goto $label$9 
	
.LABEL $label$10
	$24 = [0]
	$9 = CALL db_find_i64(*($3), *($12), (int_64)-5915097263704637440, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$24 = CALL $79($3, $9)
	CALL eosio_assert(((int_32)*($24 + [204]) == (int_32)$3), [272])
	
.LABEL $label$9
	$9 = *($24 + [44])
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$12 }
	if ( $9 ){ goto $label$11 }
	if ( ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= *($24 + [48])) ){ goto $label$11 }
	if ( ((uint_64)*($24 + [136]) >= (uint_64)*($24 + [128])) ){ goto $label$11 }
	$6 = *($0)
	*($28 + [216]) = $0
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [336])
	CALL $130($3, $24, $6, ($28 + [216]))
	goto $label$11 
	
.LABEL $label$12
	if ( ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= *($24 + [188])) ){ goto $label$11 }
	if ( ((uint_64)*($24 + [136]) >= (uint_64)*($24 + [128])) ){ goto $label$11 }
	CALL $126(($28 + [216]), $4)
	$25 = *($13)
	$9 = *($14)
	if ( ((int_32)$9 == (int_32)$25) ){ goto $label$13 }
	$6 = *($23)
	
.LOOP $label$14:
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$13 }
	$9 = ($9 + [8])
	if ( ((int_32)$25 != (int_32)$9) ){ goto $label$14 }
	$9 = $25
	
.LABEL $label$13
	$8 = ($9 + [8])
	$7 = ($25 - $8)
	$25 = int_32($7 >> [3])
	if ( ($25 == 0) ){ goto $label$15 }
	CALL memmove($9, $8, $7)
	
.LABEL $label$15
	*($13) = ($9 + ($25 << [3]))
	CALL $10($4, ($28 + [216]), *($0))
	if ( ((int_64)*(($24 + [136])) == (int_64)0) ){ goto $label$17 }
	$6 = *($0)
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [336])
	CALL $132($3, $24, $6)
	goto $label$16 
	
.LABEL $label$17
	CALL $126(($28 + [16]), $4)
	$25 = *($15)
	$9 = *($16)
	if ( ((int_32)$9 == (int_32)$25) ){ goto $label$18 }
	$6 = *($23)
	
.LOOP $label$19:
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$18 }
	$9 = ($9 + [8])
	if ( ((int_32)$25 != (int_32)$9) ){ goto $label$19 }
	$9 = $25
	
.LABEL $label$18
	$8 = ($9 + [8])
	$7 = ($25 - $8)
	$25 = int_32($7 >> [3])
	if ( ($25 == 0) ){ goto $label$20 }
	CALL memmove($9, $8, $7)
	
.LABEL $label$20
	*($15) = ($9 + ($25 << [3]))
	$9 = *($18)
	if ( ((uint_32)$9 >= (uint_32)*($17)) ){ goto $label$22 }
	*($18) = ($9 + [8])
	*($9) = *($23)
	goto $label$21 
	
.LABEL $label$22
	CALL $36($5, $23)
	
.LABEL $label$21
	CALL $10($4, ($28 + [16]), *($0))
	$6 = *($0)
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [336])
	CALL $131($3, $24, $6)
	if ( ((*($19) & [1]) == 0) ){ goto $label$23 }
	CALL $247(*($20))
	
.LABEL $label$23
	$25 = *($21)
	if ( ($25 == 0) ){ goto $label$24 }
	$8 = (($28 + [16]) + [136])
	$24 = *($8)
	if ( ((int_32)$24 == (int_32)$25) ){ goto $label$26 }
	$9 = ([0] - $25)
	$24 = ($24 + [-24])
	
.LOOP $label$27:
	if ( ((*($24) & [1]) == 0) ){ goto $label$28 }
	CALL $247(*(($24 + [8])))
	
.LABEL $label$28
	$24 = ($24 + [-24])
	if ( ((int_32)($24 + $9) != (int_32)[-24]) ){ goto $label$27 }
	$24 = *($21)
	goto $label$25 
	
.LABEL $label$26
	$24 = $25
	
.LABEL $label$25
	*($8) = $25
	CALL $247($24)
	
.LABEL $label$24
	$24 = *((($28 + [16]) + [120]))
	if ( ($24 == 0) ){ goto $label$29 }
	*((($28 + [16]) + [124])) = $24
	CALL $247($24)
	
.LABEL $label$29
	$24 = *($5)
	if ( ($24 == 0) ){ goto $label$30 }
	*($18) = $24
	CALL $247($24)
	
.LABEL $label$30
	$24 = *($16)
	if ( ($24 == 0) ){ goto $label$16 }
	*($15) = $24
	CALL $247($24)
	
.LABEL $label$16
	if ( ((*((($28 + [216]) + [184])) & [1]) == 0) ){ goto $label$31 }
	CALL $247(*((($28 + [216]) + [192])))
	
.LABEL $label$31
	$8 = (($28 + [216]) + [132])
	$25 = *($8)
	if ( ($25 == 0) ){ goto $label$32 }
	$7 = (($28 + [216]) + [136])
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$25) ){ goto $label$34 }
	$9 = ([0] - $25)
	$24 = ($24 + [-24])
	
.LOOP $label$35:
	if ( ((*($24) & [1]) == 0) ){ goto $label$36 }
	CALL $247(*(($24 + [8])))
	
.LABEL $label$36
	$24 = ($24 + [-24])
	if ( ((int_32)($24 + $9) != (int_32)[-24]) ){ goto $label$35 }
	$24 = *($8)
	goto $label$33 
	
.LABEL $label$34
	$24 = $25
	
.LABEL $label$33
	*($7) = $25
	CALL $247($24)
	
.LABEL $label$32
	$24 = *($14)
	if ( ($24 == 0) ){ goto $label$37 }
	*($13) = $24
	CALL $247($24)
	
.LABEL $label$37
	$24 = *((($28 + [216]) + [108]))
	if ( ($24 == 0) ){ goto $label$38 }
	*((($28 + [216]) + [112])) = $24
	CALL $247($24)
	
.LABEL $label$38
	$24 = *((($28 + [216]) + [96]))
	if ( ($24 == 0) ){ goto $label$11 }
	*((($28 + [216]) + [100])) = $24
	CALL $247($24)
	
.LABEL $label$11
	$23 = ($23 + [8])
	if ( ((int_32)$23 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= *(($0 + [20]))) ){ goto $label$39 }
	CALL _ZN3dao10updatecounERKy($0, $24)
	
.LABEL $label$39
	*($28 + [8]) = ((int_64)$1 + (int_64)1)
	$6 = CALL current_time()
	*(($28 + [244])) = [0]
	*(($28 + [248])) = [0]
	*($28 + [228]) = [0]
	*($28 + [232]) = [0]
	*($28 + [236]) = [0]
	*($28 + [240]) = [0]
	*($28 + [216]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($28 + [252]) = [0]
	*(($28 + [256])) = [0]
	*(($28 + [260])) = [0]
	*($28 + [264]) = [0]
	*(($28 + [268])) = [0]
	*(($28 + [272])) = [0]
	$25 = ($28 + [252])
	$6 = (int_64)0
	$27 = (int_64)59
	$24 = [1456]
	$22 = (int_64)0
	
.LOOP $label$40:
	$26 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$41 }
	$9 = *($24)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$9 = ($9 + [165])
	goto $label$42 
	
.LABEL $label$43
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$26 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$41
	$24 = ($24 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$22 = ((int_64)$26 | (int_64)$22)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$40 }
	$6 = (int_64)0
	$26 = (int_64)59
	$24 = [96]
	$1 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$49 }
	$9 = *($24)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$9 = ($9 + [165])
	goto $label$47 
	
.LABEL $label$49
	$27 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$27 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$27 = ((int_64)((int_64)$27 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$45
	$24 = ($24 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$27 | (int_64)$1)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$44 }
	*($28 + [24]) = $1
	*($28 + [16]) = $22
	*((($24 = CALL $246([16])) + [12])) = *((($28 + [16]) + [12]))
	*(($24 + [4])) = *($28 + [20])
	*($28 + [416]) = $24
	*($24) = *($28 + [16])
	$9 = ($24 + [16])
	*($28 + [424]) = $9
	*(($24 + [8])) = *($28 + [24])
	*($28 + [420]) = $9
	CALL $133($25, ($28 + [416]), ($28 + [8]))
	$24 = *($28 + [416])
	if ( ($24 == 0) ){ goto $label$50 }
	*($28 + [420]) = $24
	CALL $247($24)
	
.LABEL $label$50
	*(($28 + [236])) = *(($0 + [96]))
	$6 = (int_64)0
	$27 = (int_64)59
	$24 = [1456]
	$22 = (int_64)0
	
.LOOP $label$51:
	$26 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$52 }
	$9 = *($24)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$9 = ($9 + [165])
	goto $label$53 
	
.LABEL $label$54
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$26 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$27 & (int_64)4294967295))
	
.LABEL $label$52
	$24 = ($24 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$22 = ((int_64)$26 | (int_64)$22)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$51 }
	*($28 + [24]) = (int_64)0
	*($28 + [16]) = $22
	$6 = *($0)
	CALL $134(($28 + [416]), ($28 + [216]))
	$24 = *($28 + [416])
	CALL send_deferred(($28 + [16]), $6, $24, (*($28 + [420]) - $24), [1])
	$24 = *($28 + [416])
	if ( ($24 == 0) ){ goto $label$55 }
	*($28 + [420]) = $24
	CALL $247($24)
	
.LABEL $label$55
	CALL $135(($28 + [216]))
	*([0] + [4]) = ($28 + [432])
}

int_64 .FUNC _ZN3dao14get_token_addrEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$2 = *(($0 + [144]))
	$6 = *(($0 + [140]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	
.LOOP $label$2:
	$8 = ( *($6 + [8]) ? ($6 + [1]) : (*($6) & [1]) )
	$0 = [-1]
	$7 = [0]
	
.LOOP $label$3:
	$3 = $7
	$7 = ($3 + [1])
	$5 = ($8 + $0)
	$4 = ($0 + [1])
	$0 = $4
	if ( *(($5 + [1])) ){ goto $label$3 }
	if ( ($4 == 0) ){ goto $label$5 }
	$9 = (CASTING uint_64)(uint_32 $3)
	$11 = (int_64)0
	$10 = (int_64)8
	
.LOOP $label$6:
	$0 = *($8)
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$11 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$10 & (int_64)4294967288)) | (int_64)$11)
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)8)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$11 = (int_64)0
	
.LABEL $label$4
	if ( ((int_64)((int_64)$11 | (int_64)4) == (int_64)$1) ){ goto $label$1 }
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$2 }
	$6 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)$2), [2864])
	return *($6 + [16])
}

int_32 .FUNC gmtime (int_32 $0)
{
	return CALL __gmtime_r($0, [15316])
}

int_32 .FUNC __gmtime_r (int_32 $0, int_32 $1)
{
	if ( ((int_32)CALL __secs_to_tm(*($0), $1) <= (int_32)[-1]) ){ goto $label$1 }
	*($1 + [40]) = [15360]
	*($1 + [32 align=4]) = (int_64)0
	return $1
	
.LABEL $label$1
	*(CALL __errno_location()) = [75]
	return [0]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $247($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN3dao10add_memberEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($6 + [48]) = $1
	*(($4 = (($6 + [8]) + [32]))) = [0]
	*($6 + [24]) = (int_64)-1
	$1 = *($0)
	*($6 + [8]) = $1
	*($6 + [16]) = $1
	*($6 + [32]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)-4157500442420445184, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL $33(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)($6 + [8])), [272])
	$1 = *($0)
	*($6 + [64]) = ($6 + [48])
	CALL eosio_assert([1], [336])
	CALL $34(($6 + [8]), $3, $1, ($6 + [64]))
	$2 = *($6 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($6) = ($6 + [48])
	*($6 + [88]) = $1
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$13()), [144])
	*($6 + [68]) = $6
	*($6 + [64]) = ($6 + [8])
	*($6 + [72]) = ($6 + [88])
	*(($0 = CALL $246([32])) + [16]) = [0]
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [20]) = ($6 + [8])
	CALL $32(($6 + [64]), $0)
	*($6 + [80]) = $0
	$1 = *($0)
	*($6 + [64]) = $1
	$2 = *($0 + [24])
	*($6 + [60]) = $2
	$5 = ($6 + [36])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*($4)) ){ goto $label$5 }
	*($3 + [8]) = $1
	*($3 + [16]) = $2
	*($6 + [80]) = [0]
	*($3) = $0
	*($5) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $35(($6 + [32]), ($6 + [80]), ($6 + [64]), ($6 + [60]))
	
.LABEL $label$4
	$0 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$3 = *($0 + [8])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($0 + [12])) = $3
	CALL $247($3)
	
.LABEL $label$7
	CALL $247($0)
	
.LABEL $label$6
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($3 + [12])) = $4
	CALL $247($4)
	
.LABEL $label$12
	CALL $247($3)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $2
	
.LABEL $label$8
	*($5) = $2
	CALL $247($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$6 = ($1 + [8])
	$5 = *($3)
	$4 = *($1)
	$7 = *(($1 + [12]))
	$3 = *($1 + [8])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$3 }
	$9 = *($5)
	
.LOOP $label$4:
	if ( ((int_64)*($3) == (int_64)$9) ){ goto $label$3 }
	$3 = ($3 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [16]))) ){ goto $label$5 }
	*(($1 + [12])) = ($7 + [8])
	*($7) = *($5)
	goto $label$1 
	
.LABEL $label$5
	CALL $124($6, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$3 = [8]
	$5 = *(($1 + [8]))
	$7 = *(($1 + [12]))
	$8 = ($7 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$3 = (($8 & [-8]) + $3)
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($10) = $7
	*($10 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($7, $1, [8])
	*($10 + [4]) = ($7 + [8])
	CALL $21($10, $6)
	CALL db_update_i64(*($1 + [24]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6 + [4])
	$3 = ($1 + [12])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($5 + [8])
	*($3) = $8
	*($5) = *($6)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $124($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-7517780640625561600, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [204]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	*($1 + [136]) = ((int_64)*($1 + [136]) + (int_64)*(*($3)))
	$5 = *($3 + [12])
	$4 = *($1)
	*($1 + [144]) = ((int_64)*($1 + [144]) + (int_64)*(*($3)))
	$6 = *(($6 + [180]))
	$6 = *(*($3 + [8]) + [4])
	$9 = *($6 + [176])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$3 }
	$10 = *(*(($3 + [4])))
	
.LOOP $label$4:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$3 }
	$9 = ($9 + [24])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($9 + [16]))), [496])
	$10 = ((int_64)*($9 + [8]) + (int_64)*($6))
	*($9 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [576])
	CALL eosio_assert(((uint_64)*($9 + [8]) <= (uint_64)*(*(*(($3 + [8])) + [4]) + [152])), [2944])
	goto $label$1 
	
.LABEL $label$2
	*(($11 + [24])) = (int_64)1398362884
	*($11 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$10 = (int_64)5462355
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [688])
	*($11 + [8]) = *(*(($3 + [4])))
	$9 = *($3)
	*(($11 + [28])) = *(($9 + [12]))
	*(($7 = (($11 + [8]) + [16]))) = *(($9 + [8]))
	*((($11 + [8]) + [12])) = *(($9 + [4]))
	*($11 + [16]) = *($9)
	$6 = ($1 + [180])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)*(($1 + [184]))) ){ goto $label$11 }
	*($9) = *($11 + [8])
	*(($9 + [16])) = *($7)
	*(($9 + [8])) = *((($11 + [8]) + [8]))
	*($6) = (*($6) + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $125(($1 + [176]), ($11 + [8]))
	
.LABEL $label$10
	*($1 + [160]) = (*($1 + [160]) + [1])
	
.LABEL $label$1
	if ( (uint_64)(*(($1 + [136])) <= *($1 + [128])) ){ goto $label$12 }
	*($1 + [44]) = [3]
	$7 = ($5 + [208])
	CALL $126(($11 + [8]), $7)
	$6 = *(($11 + [132]))
	$9 = *($11 + [128])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	$10 = *(*($3 + [16]))
	
.LOOP $label$14:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$13 }
	$9 = ($9 + [8])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = $6
	
.LABEL $label$13
	$3 = ($9 + [8])
	$8 = ($6 - $3)
	$6 = int_32($8 >> [3])
	if ( ($6 == 0) ){ goto $label$15 }
	CALL memmove($9, $3, $8)
	
.LABEL $label$15
	*(($11 + [132])) = ($9 + ($6 << [3]))
	CALL $10($7, ($11 + [8]), *($5))
	if ( ((*($11 + [192]) & [1]) == 0) ){ goto $label$16 }
	CALL $247(*(($11 + [200])))
	
.LABEL $label$16
	$3 = *($11 + [140])
	if ( ($3 == 0) ){ goto $label$17 }
	$5 = ($11 + [144])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$19 }
	$6 = ([0] - $3)
	$9 = ($9 + [-24])
	
.LOOP $label$20:
	if ( ((*($9) & [1]) == 0) ){ goto $label$21 }
	CALL $247(*(($9 + [8])))
	
.LABEL $label$21
	$9 = ($9 + [-24])
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$20 }
	$9 = *(($11 + [140]))
	goto $label$18 
	
.LABEL $label$19
	$9 = $3
	
.LABEL $label$18
	*($5) = $3
	CALL $247($9)
	
.LABEL $label$17
	$9 = *(($11 + [128]))
	if ( ($9 == 0) ){ goto $label$22 }
	*(($11 + [132])) = $9
	CALL $247($9)
	
.LABEL $label$22
	$9 = *($11 + [116])
	if ( ($9 == 0) ){ goto $label$23 }
	*(($11 + [120])) = $9
	CALL $247($9)
	
.LABEL $label$23
	$9 = *($11 + [104])
	if ( ($9 == 0) ){ goto $label$12 }
	*(($11 + [108])) = $9
	CALL $247($9)
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	*($11 + [8]) = [0]
	CALL $82(($11 + [8]), $1)
	$6 = *($11 + [8])
	if ( ($6 <= [513]) ){ goto $label$25 }
	$9 = CALL malloc($6)
	goto $label$24 
	
.LABEL $label$25
	$9 = ($12 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$24
	*($11 + [12]) = $9
	*($11 + [8]) = $9
	*($11 + [16]) = ($9 + $6)
	CALL $83(($11 + [8]), $1)
	CALL db_update_i64(*($1 + [208]), $2, $9, $6)
	if ( ($6 <= [513]) ){ goto $label$26 }
	CALL free($9)
	
.LABEL $label$26
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$27 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*([0] + [4]) = ($11 + [208])
}

void .FUNC _ZN3dao6investEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [144])
	*([0] + [4]) = $18
	*($18 + [56]) = $1
	*($18 + [48]) = $2
	CALL prints([2640])
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [2656])
	$7 = *(($0 + [272]))
	$11 = *(($0 + [276]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$1 }
	$12 = ($11 + [-24])
	$9 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$2) ){ goto $label$1 }
	$11 = $12
	$13 = ($12 + [-24])
	$12 = $13
	if ( ((int_32)($13 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [248])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$4 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [204]) == (int_32)$4), [272])
	goto $label$3 
	
.LABEL $label$4
	$12 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $2)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$5 }
	$12 = CALL $79($4, $12)
	CALL eosio_assert(((int_32)*($12 + [204]) == (int_32)$4), [272])
	goto $label$3 
	
.LABEL $label$5
	$12 = [0]
	
.LABEL $label$3
	*($18 + [44]) = $12
	*($18 + [40]) = $4
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2688])
	CALL eosio_assert((*($12 + [56]) == 0), [2704])
	CALL eosio_assert((*($12 + [44]) == 0), [2720])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$14() / (uint_64)(int_64)1000000)) <= (uint_32)*($12 + [48])), [2752])
	$2 = *($3)
	CALL eosio_assert(((uint_64)$2 <= (uint_64)*($12 + [152])), [2784])
	$14 = *($12 + [136])
	$15 = *($12 + [128])
	CALL prints([2816])
	CALL printui((int_64))($15 - $14))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)(int_64))(*($12 + [128]) - *($12 + [136]))), [2832])
	$5 = *(($0 + [144]))
	$10 = *(($0 + [140]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	$16 = *($3 + [8])
	
.LOOP $label$7:
	$13 = ( *($10 + [8]) ? ($10 + [1]) : (*($10) & [1]) )
	$12 = [-1]
	$11 = [0]
	
.LOOP $label$8:
	$6 = $11
	$11 = ($6 + [1])
	$9 = ($13 + $12)
	$7 = ($12 + [1])
	$12 = $7
	if ( *(($9 + [1])) ){ goto $label$8 }
	if ( ($7 == 0) ){ goto $label$10 }
	$14 = (CASTING uint_64)(uint_32 $6)
	$15 = (int_64)0
	$2 = (int_64)8
	
.LOOP $label$11:
	$12 = *($13)
	if ( ((uint_32)(($12 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$15 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$15)
	
.LABEL $label$12
	$13 = ($13 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$14 = ((int_64)$14 + (int_64)-1)
	if ( ((int_64)$14 != (int_64)0) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$15 = (int_64)0
	
.LABEL $label$9
	if ( ((int_64)((int_64)$15 | (int_64)4) == (int_64)$16) ){ goto $label$6 }
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$7 }
	$10 = $5
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$10 != (int_32)$5), [2864])
	$8 = *($10 + [16])
	$2 = (int_64)0
	$15 = (int_64)59
	$12 = [96]
	$16 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$18 }
	$13 = *($12)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$13 = ($13 + [165])
	goto $label$16 
	
.LABEL $label$18
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$13 }
	$2 = (int_64)0
	$14 = (int_64)59
	$12 = [112]
	$17 = (int_64)0
	
.LOOP $label$19:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$20 }
	$13 = *($12)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$13 = ($13 + [165])
	goto $label$21 
	
.LABEL $label$22
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$20
	$12 = ($12 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$19 }
	*(($18 + [16])) = [0]
	*($18 + [8]) = (int_64)0
	$12 = CALL strlen([2912])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$26 }
	*($18 + [8]) = ($12 << [1])
	$13 = (($18 + [8]) | [1])
	if ( $12 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$11 = (($12 + [16]) & [-16])
	$13 = CALL $246($11)
	*($18 + [8]) = ($11 | [1])
	*($18 + [16]) = $13
	*($18 + [12]) = $12
	
.LABEL $label$25
	CALL memcpy($13, [2912], $12)
	
.LABEL $label$24
	*(($13 + $12)) = [0]
	*(($13 = (($18 + [24]) + [8]))) = *(($3 + [8]))
	$2 = *($18 + [56])
	*($18 + [24]) = *($3)
	$11 = *($18 + [8])
	*($18 + [8]) = [0]
	$9 = *($18 + [16])
	$7 = *($18 + [12])
	*($18 + [12]) = [0]
	*($18 + [16]) = [0]
	*(($12 = CALL $246([16]))) = $1
	*($12 + [8]) = $16
	$6 = ($12 + [16])
	*($18 + [136]) = $6
	*($18 + [128]) = $12
	*($18 + [88]) = $17
	*($18 + [80]) = $2
	*($18 + [132]) = $6
	*(($18 + [104])) = *($13)
	*($18 + [96]) = *($18 + [24])
	*($18 + [112]) = $11
	*(($18 + [116])) = $7
	*(($12 = ($18 + [120]))) = $9
	CALL $6($8, (int_64)-3617168760277827584, ($18 + [128]), ($18 + [80]))
	if ( ((*($18 + [112]) & [1]) == 0) ){ goto $label$27 }
	CALL $247(*($12))
	
.LABEL $label$27
	$12 = *($18 + [128])
	if ( ($12 == 0) ){ goto $label$28 }
	*($18 + [132]) = $12
	CALL $247($12)
	
.LABEL $label$28
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$29 }
	CALL $247(*(($18 + [16])))
	
.LABEL $label$29
	CALL eosio_assert([1], [208])
	$2 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$13 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$13 = [0]
	
.LABEL $label$30
	CALL eosio_assert($13, [688])
	$2 = *($0)
	$12 = *($18 + [44])
	*($18 + [80]) = $3
	*($18 + [92]) = $0
	*($18 + [84]) = ($18 + [56])
	*($18 + [88]) = ($18 + [40])
	*($18 + [96]) = ($18 + [48])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [336])
	CALL $121($4, $12, $2, ($18 + [80]))
	*($18 + [96]) = (int_64)-1
	*($18 + [104]) = [0]
	$2 = *($18 + [56])
	$14 = *($0)
	*($18 + [80]) = $14
	*($18 + [88]) = $2
	*(($13 = ($18 + [108]))) = [0]
	*(($11 = (($18 + [80]) + [32]))) = [0]
	$12 = CALL db_find_i64($14, $2, (int_64)-7517780640625561600, $2)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$37 }
	$12 = CALL $117(($18 + [80]), $12)
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)($18 + [80])), [272])
	$2 = *($0)
	*($18 + [128]) = ($18 + [48])
	CALL eosio_assert([1], [336])
	CALL $123(($18 + [80]), $12, $2, ($18 + [128]))
	$9 = *($18 + [104])
	if ( $9 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$2 = *($0)
	*($18 + [4]) = ($18 + [48])
	*($18) = ($18 + [56])
	*($18 + [8]) = $2
	CALL eosio_assert(((int_64)*($18 + [80]) == (int_64)CALL $fimport$13()), [144])
	*($18 + [132]) = $18
	*($18 + [128]) = ($18 + [80])
	*($18 + [136]) = ($18 + [8])
	*(($12 = CALL $246([32])) + [16]) = [0]
	*($12 + [8 align=4]) = (int_64)0
	*($12 + [20]) = ($18 + [80])
	CALL $122(($18 + [128]), $12)
	*($18 + [72]) = $12
	$2 = *($12)
	*($18 + [128]) = $2
	$9 = *($12 + [24])
	*($18 + [68]) = $9
	$13 = *($13)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$39 }
	*($13 + [8]) = $2
	*($13 + [16]) = $9
	*($18 + [72]) = [0]
	*($13) = $12
	*(($18 + [108])) = ($13 + [24])
	goto $label$38 
	
.LABEL $label$39
	CALL $119(($18 + [104]), ($18 + [72]), ($18 + [128]), ($18 + [68]))
	
.LABEL $label$38
	$12 = *($18 + [72])
	*($18 + [72]) = [0]
	if ( ($12 == 0) ){ goto $label$40 }
	$13 = *($12 + [8])
	if ( ($13 == 0) ){ goto $label$41 }
	*(($12 + [12])) = $13
	CALL $247($13)
	
.LABEL $label$41
	CALL $247($12)
	
.LABEL $label$40
	$9 = *($18 + [104])
	if ( ($9 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$7 = ($18 + [108])
	$12 = *($7)
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$43 }
	
.LOOP $label$44:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$45 }
	$11 = *($13 + [8])
	if ( ($11 == 0) ){ goto $label$46 }
	*(($13 + [12])) = $11
	CALL $247($11)
	
.LABEL $label$46
	CALL $247($13)
	
.LABEL $label$45
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$44 }
	$12 = *(($18 + [104]))
	goto $label$42 
	
.LABEL $label$43
	$12 = $9
	
.LABEL $label$42
	*($7) = $9
	CALL $247($12)
	
.LABEL $label$35
	*([0] + [4]) = ($18 + [144])
	return (unreachable)
	
.LABEL $label$23
	CALL $248(($18 + [8]))
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [200]) == (int_32)$1), [272])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $11($1, $2)
	CALL eosio_assert(((int_32)*($3 + [200]) == (int_32)$1), [272])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [2976])
	CALL $127($0, $3)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $247($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$1 = CALL memcpy($1, $3, [96])
	$3 = *(*($0 + [4]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $17(($1 + [96]), *($3 + [96]), *(($3 + [100])))
	CALL $17(($1 + [108]), *($3 + [108]), *(($3 + [112])))
	CALL $17(($1 + [120]), *($3 + [120]), *(($3 + [124])))
	CALL $18(($1 + [132]), *($3 + [132]), *(($3 + [136])))
	
.LABEL $label$1
	CALL memcpy(($1 + [144]), ($3 + [144]), [40])
	CALL $249(($1 + [184]), ($3 + [184]))
	*($5) = [0]
	CALL $19($5, $1)
	$4 = *($5)
	if ( ($4 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $4)
	CALL $20($5, $1)
	*($1 + [204]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), (int_64)7235159550150574080, $3, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$5 }
	*(($2 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $16($1)
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $247($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( ((*($0 + [184]) & [1]) == 0) ){ goto $label$1 }
	CALL $247(*(($0 + [192])))
	
.LABEL $label$1
	$1 = *($0 + [132])
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($0 + [136])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	$2 = ([0] - $1)
	$4 = ($4 + [-24])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $2) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [132]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL $247($4)
	
.LABEL $label$2
	$4 = *($0 + [120])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($0 + [124])) = $4
	CALL $247($4)
	
.LABEL $label$7
	$4 = *($0 + [108])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [112])) = $4
	CALL $247($4)
	
.LABEL $label$8
	$4 = *($0 + [96])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($0 + [100])) = $4
	CALL $247($4)
	
.LABEL $label$9
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $247($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $246($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $259($0)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [200]) == (int_32)$0), [272])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $11($0, $3)
	CALL eosio_assert(((int_32)*($3 + [200]) == (int_32)$0), [272])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [336])
	CALL $12($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $13($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [752])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $246([216])) + [96 align=4]) = (int_64)0
	*($5 + [104 align=4]) = (int_64)0
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128 align=4]) = (int_64)0
	*($5 + [136]) = [0]
	*($5 + [140]) = [0]
	*($5 + [184]) = [0]
	*($5 + [188]) = [0]
	*($5 + [192]) = [0]
	*($5 + [200]) = $0
	CALL $24(($7 + [32]), $5)
	*($5 + [204]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159550150574080
	$6 = *($5 + [204])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159550150574080
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $16($4)
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$1 = CALL memcpy($1, $3, [96])
	$3 = *($3)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $17(($1 + [96]), *($3 + [96]), *(($3 + [100])))
	CALL $17(($1 + [108]), *($3 + [108]), *(($3 + [112])))
	CALL $17(($1 + [120]), *($3 + [120]), *(($3 + [124])))
	CALL $18(($1 + [132]), *($3 + [132]), *(($3 + [136])))
	
.LABEL $label$1
	CALL memcpy(($1 + [144]), ($3 + [144]), [40])
	CALL $249(($1 + [184]), ($3 + [184]))
	CALL eosio_assert([1], [608])
	*($5) = [0]
	CALL $19($5, $1)
	$4 = *($5)
	if ( ($4 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $4)
	CALL $20($5, $1)
	CALL db_update_i64(*($1 + [204]), $2, $3, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$5 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [144])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $246([216])) + [96 align=4]) = (int_64)0
	*($3 + [104 align=4]) = (int_64)0
	*($3 + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136]) = [0]
	*($3 + [140]) = [0]
	*($3 + [184]) = [0]
	*($3 + [188]) = [0]
	*($3 + [192]) = [0]
	*($3 + [200]) = $1
	CALL $14(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7235159550150574080
	$4 = *($3 + [204])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7235159550150574080
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $15(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $16($3)
	CALL $247($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$3 = *($0 + [4])
	*($1) = (int_64)0
	$2 = *($0)
	*((($11 = $12) + [24])) = (int_64)1398362884
	*($11 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$9 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [688])
	*($11 + [8]) = [0]
	$8 = *($3)
	*(($7 = (($11 + [8]) + [16]))) = *(($8 + [8]))
	*($11 + [16]) = *($8)
	$8 = ($1 + [28])
	$10 = *($8)
	if ( ((uint_32)$10 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($10) = *($11 + [8])
	*(($10 + [16])) = *($7)
	*(($10 + [8])) = *((($11 + [8]) + [8]))
	$10 = (*($8) + [24])
	*($8) = $10
	$7 = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	$7 = ($1 + [24])
	CALL $189($7, ($11 + [8]))
	$10 = *($8)
	
.LABEL $label$6
	*($1 + [8]) = [1]
	*($1 + [16]) = *(*($3))
	$5 = ($1 + [16])
	$4 = ($1 + [8])
	$3 = *($7)
	$6 = ($10 - $3)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	$8 = [20]
	
.LOOP $label$8:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$9 }
	$8 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $8) + [20])
	
.LABEL $label$9
	if ( ($8 <= [513]) ){ goto $label$11 }
	$10 = CALL malloc($8)
	goto $label$10 
	
.LABEL $label$11
	$10 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$10
	*($11 + [8]) = $10
	$3 = ($10 + $8)
	*($11 + [16]) = $3
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [672])
	CALL memcpy($10, $1, [8])
	$12 = ($10 + [8])
	CALL eosio_assert(((int_32)($3 - $12) > (int_32)[3]), [672])
	CALL memcpy($12, $4, [4])
	$12 = ($10 + [12])
	CALL eosio_assert(((int_32)($3 - $12) > (int_32)[7]), [672])
	CALL memcpy($12, $5, [8])
	*($11 + [12]) = ($10 + [20])
	CALL $190(($11 + [8]), $7)
	$9 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)8417589619692510480, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$12 }
	CALL free($10)
	
.LABEL $label$12
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$13 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-24])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $249($6, $1)
	*(($6 + [16])) = *(($1 + [16]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$12:
	CALL $260($1, $7)
	*($1 + [16]) = *(($7 + [16]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-24])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $247(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $247($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $246($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $260($6, $1)
	*($6 + [16]) = *(($1 + [16]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $259($0)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [84])
	*($0) = $6
	$3 = *($1 + [96])
	$4 = *(($1 + [100]))
	$2 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($2 & [-8]) + $6)
	
.LABEL $label$2
	*($0) = $6
	$3 = *($1 + [108])
	$4 = *(($1 + [112]))
	$2 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	$6 = (($2 & [-8]) + $6)
	
.LABEL $label$4
	*($0) = $6
	$3 = *($1 + [120])
	$4 = *(($1 + [124]))
	$2 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$6 = (($2 & [-8]) + $6)
	
.LABEL $label$6
	*($0) = $6
	$4 = *($1 + [132])
	$2 = *(($1 + [136]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($2 - $4) / (int_32)[24]))
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $6
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$10:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	*($0) = $6
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$11 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$11
	$6 = ($6 + [8])
	*($0) = $6
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = ($6 + [36])
	*($0) = $6
	$4 = *($1 + [184])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [188])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	*($0) = $6
	$4 = *(($1 + [184]))
	$4 = ( *(($1 + [188])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$13 }
	*($0) = ($4 + $6)
	
.LABEL $label$13
	return $0
}

void .FUNC _ZN3dao6incomeEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [128])
	*([0] + [4]) = $18
	CALL require_auth($2)
	$6 = *(($0 + [272]))
	$10 = *(($0 + [276]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$8 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$10 = $11
	$12 = ($11 + [-24])
	$11 = $12
	if ( ((int_32)($12 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$12 = ($0 + [248])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [204]) == (int_32)$12), [272])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$10 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $79($12, $10)
	CALL eosio_assert(((int_32)*($11 + [204]) == (int_32)$12), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [2688])
	if ( (*($11 + [192]) & [1]) ){ goto $label$6 }
	$12 = (($11 + [192]) + [1])
	goto $label$5 
	
.LABEL $label$6
	$12 = *(($11 + [200]))
	
.LABEL $label$5
	$11 = [-1]
	
.LOOP $label$7:
	$10 = ($12 + $11)
	$8 = ($11 + [1])
	$11 = $8
	if ( *(($10 + [1])) ){ goto $label$7 }
	if ( ($8 == 0) ){ goto $label$9 }
	$13 = (CASTING uint_64)(uint_32 $8)
	$14 = (int_64)8
	$15 = (int_64)0
	
.LOOP $label$10:
	$11 = *($12)
	if ( ((uint_32)(($11 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$15 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$14 & (int_64)4294967288)) | (int_64)$15)
	
.LABEL $label$11
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)8)
	$13 = ((int_64)$13 + (int_64)-1)
	if ( ((int_64)$13 != (int_64)0) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$15 = (int_64)0
	
.LABEL $label$8
	$16 = *($3 + [8])
	CALL eosio_assert(((int_64)((int_64)$15 | (int_64)4) == (int_64)$16), [3664])
	$4 = *(($0 + [144]))
	$9 = *(($0 + [140]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$12 = ( *($9 + [8]) ? ($9 + [1]) : (*($9) & [1]) )
	$11 = [-1]
	$10 = [0]
	
.LOOP $label$14:
	$5 = $10
	$10 = ($5 + [1])
	$8 = ($12 + $11)
	$6 = ($11 + [1])
	$11 = $6
	if ( *(($8 + [1])) ){ goto $label$14 }
	if ( ($6 == 0) ){ goto $label$16 }
	$13 = (CASTING uint_64)(uint_32 $5)
	$15 = (int_64)0
	$14 = (int_64)8
	
.LOOP $label$17:
	$11 = *($12)
	if ( ((uint_32)(($11 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$15 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$14 & (int_64)4294967288)) | (int_64)$15)
	
.LABEL $label$18
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)8)
	$13 = ((int_64)$13 + (int_64)-1)
	if ( ((int_64)$13 != (int_64)0) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$15 = (int_64)0
	
.LABEL $label$15
	if ( ((int_64)((int_64)$15 | (int_64)4) == (int_64)$16) ){ goto $label$12 }
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$13 }
	$9 = $4
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [2864])
	$7 = *($9 + [16])
	$14 = (int_64)0
	$15 = (int_64)59
	$11 = [96]
	$16 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$24 }
	$12 = *($11)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$12 = ($12 + [165])
	goto $label$22 
	
.LABEL $label$24
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$20
	$11 = ($11 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$13 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$19 }
	$14 = (int_64)0
	$13 = (int_64)59
	$11 = [112]
	$17 = (int_64)0
	
.LOOP $label$25:
	$15 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$26 }
	$12 = *($11)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$12 = ($12 + [165])
	goto $label$27 
	
.LABEL $label$28
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$26
	$11 = ($11 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$15 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$25 }
	*(($18 + [24])) = [0]
	*($18 + [16]) = (int_64)0
	$11 = CALL strlen([3712])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$32 }
	*($18 + [16]) = ($11 << [1])
	$12 = (($18 + [16]) | [1])
	if ( $11 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$10 = (($11 + [16]) & [-16])
	$12 = CALL $246($10)
	*($18 + [16]) = ($10 | [1])
	*($18 + [24]) = $12
	*($18 + [20]) = $11
	
.LABEL $label$31
	CALL memcpy($12, [3712], $11)
	
.LABEL $label$30
	*(($12 + $11)) = [0]
	*(($12 = (($18 + [32]) + [8]))) = *(($3 + [8]))
	*($18 + [32]) = *($3)
	$10 = *($18 + [16])
	*($18 + [16]) = [0]
	$8 = *($18 + [24])
	$6 = *($18 + [20])
	*($18 + [20]) = [0]
	*($18 + [24]) = [0]
	*(($11 = CALL $246([16]))) = $2
	*($11 + [8]) = $16
	$5 = ($11 + [16])
	*($18 + [112]) = $5
	*($18 + [104]) = $11
	*($18 + [56]) = $17
	*($18 + [48]) = $2
	*($18 + [108]) = $5
	*(($18 + [72])) = *($12)
	*($18 + [64]) = *($18 + [32])
	*($18 + [80]) = $10
	*(($18 + [84])) = $6
	*(($11 = ($18 + [88]))) = $8
	CALL $6($7, (int_64)-3617168760277827584, ($18 + [104]), ($18 + [48]))
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$33 }
	CALL $247(*($11))
	
.LABEL $label$33
	$11 = *($18 + [104])
	if ( ($11 == 0) ){ goto $label$34 }
	*($18 + [108]) = $11
	CALL $247($11)
	
.LABEL $label$34
	if ( ((*($18 + [16]) & [1]) == 0) ){ goto $label$35 }
	CALL $247(*(($18 + [24])))
	
.LABEL $label$35
	*(($12 = ($18 + [80]))) = [0]
	*($18 + [64]) = (int_64)-1
	$14 = *($0)
	*($18 + [48]) = $14
	*($18 + [56]) = $1
	*($18 + [72]) = (int_64)0
	$11 = CALL db_find_i64($14, $1, (int_64)8417589619692510480, (int_64)0)
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$38 }
	$11 = CALL $186(($18 + [48]), $11)
	CALL eosio_assert(((int_32)*($11 + [36]) == (int_32)($18 + [48])), [272])
	$14 = *($0)
	*($18 + [104]) = $3
	CALL eosio_assert([1], [336])
	CALL $187(($18 + [48]), $11, $14, ($18 + [104]))
	$8 = *($18 + [72])
	if ( $8 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$14 = *($0)
	*($18 + [8]) = $3
	*($18 + [16]) = $14
	CALL eosio_assert(((int_64)*($18 + [48]) == (int_64)CALL $fimport$13()), [144])
	*($18 + [108]) = ($18 + [8])
	*($18 + [104]) = ($18 + [48])
	*($18 + [112]) = ($18 + [16])
	*(($11 = CALL $246([48])) + [32]) = [0]
	*($11 + [24 align=4]) = (int_64)0
	*($11 + [36]) = ($18 + [48])
	CALL $185(($18 + [104]), $11)
	*($18 + [120]) = $11
	$14 = *($11)
	*($18 + [104]) = $14
	$8 = *($11 + [40])
	*($18 + [100]) = $8
	$6 = ($18 + [76])
	$10 = *($6)
	if ( ((uint_32)$10 >= (uint_32)*($12)) ){ goto $label$40 }
	*($10 + [8]) = $14
	*($10 + [16]) = $8
	*($18 + [120]) = [0]
	*($10) = $11
	*($6) = ($10 + [24])
	goto $label$39 
	
.LABEL $label$40
	CALL $188(($18 + [72]), ($18 + [120]), ($18 + [104]), ($18 + [100]))
	
.LABEL $label$39
	$11 = *($18 + [120])
	*($18 + [120]) = [0]
	if ( ($11 == 0) ){ goto $label$41 }
	$12 = *($11 + [24])
	if ( ($12 == 0) ){ goto $label$42 }
	*(($11 + [28])) = $12
	CALL $247($12)
	
.LABEL $label$42
	CALL $247($11)
	
.LABEL $label$41
	$8 = *($18 + [72])
	if ( ($8 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$6 = (($18 + [48]) + [28])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$44 }
	
.LOOP $label$45:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$46 }
	$10 = *($12 + [24])
	if ( ($10 == 0) ){ goto $label$47 }
	*(($12 + [28])) = $10
	CALL $247($10)
	
.LABEL $label$47
	CALL $247($12)
	
.LABEL $label$46
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$45 }
	$11 = *(($18 + [72]))
	goto $label$43 
	
.LABEL $label$44
	$11 = $8
	
.LABEL $label$43
	*($6) = $8
	CALL $247($11)
	
.LABEL $label$36
	*([0] + [4]) = ($18 + [128])
	return (unreachable)
	
.LABEL $label$29
	CALL $248(($18 + [16]))
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$4 = *($1)
	*((($12 = $13) + [24])) = (int_64)1398362884
	*($12 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$10 = (int_64)5462355
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [688])
	*($12 + [8]) = *($1 + [8])
	$9 = *($3)
	*(($12 + [28])) = *(($9 + [12]))
	*(($8 = (($12 + [8]) + [16]))) = *(($9 + [8]))
	*((($12 + [8]) + [12])) = *(($9 + [4]))
	*($12 + [16]) = *($9)
	$11 = ($1 + [28])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($9) = *($12 + [8])
	*(($9 + [16])) = *($8)
	*(($9 + [8])) = *((($12 + [8]) + [8]))
	*($11) = (*($11) + [24])
	$8 = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	$8 = ($1 + [24])
	CALL $189($8, ($12 + [8]))
	
.LABEL $label$6
	$5 = ($1 + [8])
	*(($9 = ($1 + [8]))) = (*($9) + [1])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$6 = ($1 + [16])
	$3 = *($8)
	$11 = *(($1 + [28]))
	$7 = ($11 - $3)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	$9 = [20]
	
.LOOP $label$8:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$9 }
	$9 = ((((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $9) + [20])
	
.LABEL $label$9
	if ( ($9 <= [513]) ){ goto $label$11 }
	$11 = CALL malloc($9)
	goto $label$10 
	
.LABEL $label$11
	$11 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$10
	*($12 + [8]) = $11
	$3 = ($11 + $9)
	*($12 + [16]) = $3
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [672])
	CALL memcpy($11, $1, [8])
	$13 = ($11 + [8])
	CALL eosio_assert(((int_32)($3 - $13) > (int_32)[3]), [672])
	CALL memcpy($13, $5, [4])
	$13 = ($11 + [12])
	CALL eosio_assert(((int_32)($3 - $13) > (int_32)[7]), [672])
	CALL memcpy($13, $6, [8])
	*($12 + [12]) = ($11 + [20])
	CALL $190(($12 + [8]), $8)
	CALL db_update_i64(*($1 + [40]), $2, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$12 }
	CALL free($11)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [32])
}

int_32 .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($6 + [24])) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [56]) = ($1 + $3)
	*($6 + [48]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [784])
	CALL memcpy(($6 + [8]), $1, [8])
	*($6 + [52]) = ($1 + [8])
	$7 = (($6 + [8]) + [8])
	CALL $25(($6 + [48]), $7)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = [0]
	*($6 + [40]) = [0]
	$4 = *($6 + [8])
	*($6 + [32]) = (int_64)0
	$7 = (*(($6 + [20])) - *($7))
	$3 = int_32($7 >> [3])
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$6 }
	$1 = CALL $246($7)
	*((($6 + [32]) + [8])) = ($1 + ($3 << [3]))
	*($6 + [32]) = $1
	*($6 + [36]) = $1
	$7 = *((($6 + [8]) + [8]))
	$3 = (*(($6 + [20])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $7, $3)
	$1 = (*($6 + [36]) + $3)
	*($6 + [36]) = $1
	
.LABEL $label$7
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($3) + $5))
	
.LABEL $label$8
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$1 = ($1 - *($6 + [32]))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$5 }
	$1 = CALL $246($1)
	*(($6 + [56])) = ($1 + ($2 << [3]))
	*($6 + [48]) = $1
	*($6 + [52]) = $1
	$7 = *($6 + [32])
	$2 = (*($6 + [36]) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $7, $2)
	*($6 + [52]) = ($1 + $2)
	
.LABEL $label$9
	CALL void $3((int_32 $4), (int_64 ($6 + [48])), (int_32 $5))
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($6 + [52]) = $1
	CALL $247($1)
	
.LABEL $label$10
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*($6 + [36]) = $1
	CALL $247($1)
	
.LABEL $label$11
	$1 = *(($6 + [16]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($6 + [20])) = $1
	CALL $247($1)
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [64])
	return [1]
	
.LABEL $label$6
	CALL $259(($6 + [32]))
	
.LABEL $label$5
	CALL $259(($6 + [48]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $246([48])
	$6 = CALL $191($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $188(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [28])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = int_32((*($0 + [4]) - $8) >> [4])
	$4 = ($5 + [1])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = (*($0 + [8]) - $8)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$8 = int_32($8 >> [3])
	$6 = ( $4 ? $8 : ($8 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$4 = CALL $246(($6 << [4]))
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($8 = ($4 + ($5 << [4])))) = *($1)
	CALL $260(($8 + [4]), ($1 + [4]))
	$2 = ($4 + ($6 << [4]))
	$3 = ($8 + [16])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($6 + [-16])
	*(($8 + [-16])) = *($1)
	$4 = ($6 + [-4])
	*(($8 + [-4])) = *($4)
	$5 = ($6 + [-8])
	*(($8 + [-8])) = *($5)
	$6 = ($6 + [-12])
	*(($8 + [-12])) = *($6)
	*($5) = [0]
	*($6) = [0]
	*($4) = [0]
	$8 = ($8 + [-16])
	$6 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$8 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$1 = $7
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$9 }
	$6 = ([0] - $1)
	$8 = ($7 + [-12])
	
.LOOP $label$10:
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL $247(*(($8 + [8])))
	
.LABEL $label$11
	$8 = ($8 + [-16])
	if ( ((int_32)($8 + $6) != (int_32)[-12]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $247($1)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = (*(($6 + [4])) + [8])
	$3 = ($1 + [12])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($5 + [8])
	*($3) = $8
	*($5) = *($6)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $36($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-7517780640625561600, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $25(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $119(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [4])
	*($1 + [24]) = *(*($3))
	$2 = *($0)
	*($1) = *(*($3 + [4]) + [8])
	CALL $249(($1 + [8]), *($3 + [8]))
	*($1 + [56]) = [0]
	*($1 + [48]) = *(*($3 + [12]))
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [112]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($1 + [104]) = $8
	CALL $249(($1 + [112]), *($3 + [16]))
	$7 = *(*($3 + [20]))
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)0
	*($1 + [128]) = ((int_64)$7 * (int_64)10000)
	CALL $249(($1 + [32]), *($3 + [24]))
	CALL $249(($1 + [164]), *($3 + [28]))
	$5 = *($3 + [32])
	*($1 + [44]) = [0]
	*($1 + [152]) = ((int_64)*($5) * (int_64)10000)
	CALL $249(($1 + [192]), *($3 + [36]))
	*($10) = [0]
	CALL $82($10, $1)
	$4 = *($10)
	if ( ($4 <= [513]) ){ goto $label$6 }
	$5 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$5
	*($10 + [4]) = $5
	*($10) = $5
	*($10 + [8]) = ($5 + $4)
	CALL $83($10, $1)
	$7 = *($1)
	*($1 + [208]) = CALL db_store_i64(*($2 + [8]), (int_64)-5915097263704637440, *(*($0 + [8])), $7, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$7 }
	CALL free($5)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$6 = *($0 + [4])
	*($1) = *(*($6) + [8])
	$2 = *($0)
	CALL $249(($1 + [8]), *($6 + [4]))
	*($1 + [24]) = *(*($6 + [8]))
	CALL $249(($1 + [32]), *($6 + [12]))
	$3 = *($6 + [16])
	*($1 + [44]) = [6]
	*($1 + [64]) = (int_64)0
	*($1 + [48]) = *($3)
	*($1 + [56]) = *(*($6 + [20]))
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $249(($1 + [192]), *($6 + [24]))
	*(($6 = $5)) = [0]
	CALL $82($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $83($6, $1)
	$4 = *($1)
	*($1 + [208]) = CALL db_store_i64(*($2 + [8]), (int_64)-5915097263704637440, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN3dao4initEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1456]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*(($0 + [16])) = [4]
	*($0 + [8]) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [24])) = *(($0 + [20]))
	*(($0 + [64])) = $1
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

void .FUNC _ZN3dao6launchEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEhS6_S6_yyS6_S6_m (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	*($12 + [80]) = $1
	*($12 + [79]) = $3
	*($12 + [64]) = $6
	*($12 + [56]) = $7
	*($12 + [52]) = $10
	CALL prints([2576])
	CALL require_auth($1)
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$14() / (uint_64)(int_64)1000000)) <= $10), [2592])
	CALL $72($0, $1)
	$11 = ($0 + [248])
	$1 = *($0)
	if ( ($3 == 0) ){ goto $label$6 }
	*($12 + [12]) = $2
	*($12 + [20]) = $9
	*($12 + [32]) = $5
	*($12 + [16]) = ($12 + [80])
	*($12 + [24]) = ($12 + [52])
	*($12 + [28]) = ($12 + [79])
	*($12 + [8]) = $0
	*($12 + [120]) = $1
	CALL eosio_assert(((int_64)*($11) == (int_64)CALL $fimport$13()), [144])
	*($12 + [96]) = $11
	*($12 + [100]) = ($12 + [8])
	*($12 + [104]) = ($12 + [120])
	*(($10 = CALL $246([216])) + [16]) = [0]
	*($10 + [8 align=4]) = (int_64)0
	*($10 + [32]) = [0]
	*($10 + [36]) = [0]
	*($10 + [40]) = [0]
	*($10 + [80]) = [0]
	*($10 + [84]) = [0]
	*($10 + [88]) = [0]
	*($10 + [92]) = [0]
	*($10 + [96]) = [0]
	*($10 + [100]) = [0]
	*($10 + [112]) = [0]
	*($10 + [116]) = [0]
	*($10 + [120]) = [0]
	*($10 + [164]) = [0]
	*($10 + [168]) = [0]
	*($10 + [172]) = [0]
	*($10 + [176]) = [0]
	*($10 + [180]) = [0]
	*($10 + [184]) = [0]
	*($10 + [192]) = [0]
	*($10 + [196]) = [0]
	*($10 + [200]) = [0]
	*($10 + [204]) = $11
	CALL $115(($12 + [96]), $10)
	*($12) = $10
	$1 = *($10)
	*($12 + [96]) = $1
	$3 = *($10 + [208])
	*($12 + [112]) = $3
	$2 = ($0 + [276])
	$11 = *($2)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [280]))) ){ goto $label$5 }
	*($11 + [8]) = $1
	*($11 + [16]) = $3
	*($12) = [0]
	*($11) = $10
	*($2) = ($11 + [24])
	goto $label$4 
	
.LABEL $label$6
	*($12 + [16]) = $2
	*($12 + [24]) = $4
	*($12 + [32]) = $9
	*($12 + [8]) = ($12 + [80])
	*($12 + [20]) = ($12 + [52])
	*($12 + [28]) = ($12 + [64])
	*($12 + [12]) = $0
	*($12 + [36]) = $8
	*($12 + [40]) = ($12 + [56])
	*($12 + [44]) = $5
	*($12 + [120]) = $1
	CALL eosio_assert(((int_64)*($11) == (int_64)CALL $fimport$13()), [144])
	*($12 + [96]) = $11
	*($12 + [100]) = ($12 + [8])
	*($12 + [104]) = ($12 + [120])
	*(($10 = CALL $246([216])) + [16]) = [0]
	*($10 + [8 align=4]) = (int_64)0
	*($10 + [32]) = [0]
	*($10 + [36]) = [0]
	*($10 + [40]) = [0]
	*($10 + [80]) = [0]
	*($10 + [84]) = [0]
	*($10 + [88]) = [0]
	*($10 + [92]) = [0]
	*($10 + [96]) = [0]
	*($10 + [100]) = [0]
	*($10 + [112]) = [0]
	*($10 + [116]) = [0]
	*($10 + [120]) = [0]
	*($10 + [164]) = [0]
	*($10 + [168]) = [0]
	*($10 + [172]) = [0]
	*($10 + [176]) = [0]
	*($10 + [180]) = [0]
	*($10 + [184]) = [0]
	*($10 + [192]) = [0]
	*($10 + [196]) = [0]
	*($10 + [200]) = [0]
	*($10 + [204]) = $11
	CALL $114(($12 + [96]), $10)
	*($12) = $10
	$1 = *($10)
	*($12 + [96]) = $1
	$3 = *($10 + [208])
	*($12 + [112]) = $3
	$2 = ($0 + [276])
	$11 = *($2)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [280]))) ){ goto $label$3 }
	*($11 + [8]) = $1
	*($11 + [16]) = $3
	*($12) = [0]
	*($11) = $10
	*($2) = ($11 + [24])
	goto $label$2 
	
.LABEL $label$5
	CALL $87(($0 + [272]), $12, ($12 + [96]), ($12 + [112]))
	
.LABEL $label$4
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$1 }
	CALL $88($10)
	CALL $247($10)
	goto $label$1 
	
.LABEL $label$3
	CALL $87(($0 + [272]), $12, ($12 + [96]), ($12 + [112]))
	
.LABEL $label$2
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$7 }
	CALL $88($10)
	CALL $247($10)
	
.LABEL $label$7
	$10 = ($0 + [8])
	$3 = ($0 + [132])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [136]))) ){ goto $label$8 }
	*($3) = ($11 + [8])
	*($11) = *($10)
	goto $label$1 
	
.LABEL $label$8
	CALL $36(($0 + [128]), $10)
	
.LABEL $label$1
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = [0]
	$1 = *($12 + [80])
	$7 = *($0)
	*($12 + [8]) = $7
	*($12 + [16]) = $1
	*(($11 = ($12 + [36]))) = [0]
	*(($3 = (($12 + [8]) + [32]))) = [0]
	$10 = CALL db_find_i64($7, $1, (int_64)-7517780640625561600, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$10 }
	$10 = CALL $117(($12 + [8]), $10)
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)($12 + [8])), [272])
	$1 = *($0)
	*($12 + [96]) = $0
	CALL eosio_assert([1], [336])
	CALL $118(($12 + [8]), $10, $1, ($12 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$1 = *($0)
	*($12 + [4]) = $0
	*($12) = ($12 + [80])
	*($12 + [120]) = $1
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)CALL $fimport$13()), [144])
	*($12 + [100]) = $12
	*($12 + [96]) = ($12 + [8])
	*($12 + [104]) = ($12 + [120])
	*(($10 = CALL $246([32])) + [16]) = [0]
	*($10 + [8 align=4]) = (int_64)0
	*($10 + [20]) = ($12 + [8])
	CALL $116(($12 + [96]), $10)
	*($12 + [112]) = $10
	$1 = *($10)
	*($12 + [96]) = $1
	$2 = *($10 + [24])
	*($12 + [92]) = $2
	$11 = *($11)
	if ( ((uint_32)$11 >= (uint_32)*($3)) ){ goto $label$12 }
	*($11 + [8]) = $1
	*($11 + [16]) = $2
	*($12 + [112]) = [0]
	*($11) = $10
	*(($12 + [36])) = ($11 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $119(($12 + [32]), ($12 + [112]), ($12 + [96]), ($12 + [92]))
	
.LABEL $label$11
	$10 = *($12 + [112])
	*($12 + [112]) = [0]
	if ( ($10 == 0) ){ goto $label$9 }
	$11 = *($10 + [8])
	if ( ($11 == 0) ){ goto $label$13 }
	*(($10 + [12])) = $11
	CALL $247($11)
	
.LABEL $label$13
	CALL $247($10)
	
.LABEL $label$9
	$10 = ($0 + [8])
	$3 = ($0 + [108])
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [112]))) ){ goto $label$15 }
	*($3) = ($11 + [8])
	*($11) = *($10)
	goto $label$14 
	
.LABEL $label$15
	CALL $36(($0 + [104]), $10)
	
.LABEL $label$14
	*(($11 = ($0 + [8]))) = ((int_64)*($11) + (int_64)1)
	*(($11 = ($0 + [40]))) = ((int_64)*($11) + (int_64)1)
	CALL $10(($0 + [208]), $10, *($0))
	$3 = *($12 + [32])
	if ( ($3 == 0) ){ goto $label$16 }
	$2 = ($12 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$10 = *($0)
	*($0) = [0]
	if ( ($10 == 0) ){ goto $label$20 }
	$11 = *($10 + [8])
	if ( ($11 == 0) ){ goto $label$21 }
	*(($10 + [12])) = $11
	CALL $247($11)
	
.LABEL $label$21
	CALL $247($10)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($12 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$0 = $3
	
.LABEL $label$17
	*($2) = $3
	CALL $247($0)
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [128])
}

void .FUNC _ZN3dao12clearcouncliEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1456]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [352]))
	$10 = *(($0 + [356]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( (int_64)(*(*($5)) == 0) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [328])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [272])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$10 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)4986949636963958784, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $46($2, $10)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [272])
	
.LABEL $label$7
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [2544])
	CALL eosio_assert($10, [1184])
	CALL eosio_assert($10, [1232])
	$10 = CALL db_next_i64(*($5 + [24]), ($11 + [8]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	CALL $46($2, $10)
	
.LABEL $label$9
	CALL $111($2, $5)
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1376])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$7
	CALL $247($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$3 = (*($3) + [8])
	$4 = *($1)
	$5 = ($1 + [12])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($5) = ($8 + [8])
	*($8) = *($3)
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $36($8, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $21($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [16212]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [16212]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC abs (int_32 $0)
{
	int_32 $1
	$1 = int_32($0 >> [31])
	return ((int_32)($0 + $1) ^ (int_32)$1)
}

int_64 .FUNC __tm_to_secs (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [20])
	$1 = *($0 + [16])
	if ( ($1 <= [12]) ){ goto $label$2 }
	$2 = ((int_32)$1 % (int_32)[12])
	$6 = ( ($2 + [12]) ? $2 : ((int_32)$2 < (int_32)[0]) )
	$7 = ((int_64)(CASTING int_64)(int_32 (int_32($2 >> [31]) + ((int_32)$1 / (int_32)[12]))) + (int_64)$7)
	goto $label$1 
	
.LABEL $label$2
	$6 = $1
	
.LABEL $label$1
	$7 = CALL __year_to_secs($7, ($8 + [12]))
	$1 = CALL __month_to_secs($6, *($8 + [12]))
	$2 = *($0 + [12])
	$3 = *($0 + [8])
	$4 = *($0 + [4])
	$5 = *($0)
	*([0] + [4]) = ($8 + [16])
	return ((int_64)$5 + (int_64)((int_64)((int_64)((int_64)((int_64)$7 + (int_64)(CASTING int_64)(int_32 $1)) + (int_64)((int_64)(CASTING int_64)(int_32 ($2 + [-1])) * (int_64)86400)) + (int_64)((int_64)$3 * (int_64)3600)) + (int_64)((int_64)$4 * (int_64)60)))
}

int_32 .FUNC __nl_langinfo_l (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((int_32)$0 != (int_32)[14]) ){ goto $label$1 }
	return ( [15760] ? [15744] : *([0]) )
	
.LABEL $label$1
	$2 = int_32($0 >> [16])
	$3 = ($0 & [65535])
	if ( ((int_32)$3 != (int_32)[65535]) ){ goto $label$9 }
	if ( ((int_32)$2 > (int_32)[5]) ){ goto $label$9 }
	$0 = ($1 + ($2 << [2]))
	if ( (*($0) == 0) ){ goto $label$8 }
	return (*($0) + [8])
	
.LABEL $label$9
	$5 = [16144]
	$0 = ($2 + [-1])
	if ( ((uint_32)$0 > (uint_32)[4]) ){ goto $label$2 }
	goto $label$10 
	
.LABEL $label$10
	$0 = [16128]
	if ( ((uint_32)$3 <= (uint_32)[1]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$8
	return [16160]
	
.LABEL $label$7
	$0 = [15808]
	if ( ((uint_32)$3 <= (uint_32)[49]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$6
	$5 = [16144]
	if ( $3 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	$0 = [15776]
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = *($0)
	$5 = ($0 + [1])
	$0 = $5
	if ( $4 ){ goto $label$13 }
	$0 = $5
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( (*($5) == 0) ){ goto $label$2 }
	$5 = CALL __lctrans($5, *(($1 + ($2 << [2]))))
	
.LABEL $label$2
	$0
	return $5
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [16164]), [16176], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC strtoul (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_32 .FUNC __strftime_l (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [128])
	*([0] + [4]) = $14
	if ( ($1 == 0) ){ goto $label$4 }
	$5 = [0]
	$9 = ($3 + [20])
	
.LOOP $label$6:
	$13 = *($2)
	if ( ((int_32)$13 == (int_32)[37]) ){ goto $label$8 }
	if ( ($13 == 0) ){ goto $label$3 }
	*(($0 + $5)) = $13
	$5 = ($5 + [1])
	goto $label$7 
	
.LABEL $label$8
	$13 = *($2 + [1])
	if ( ((int_32)$13 == (int_32)[45]) ){ goto $label$11 }
	if ( ((int_32)$13 == (int_32)[95]) ){ goto $label$11 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$10 }
	
.LABEL $label$11
	$11 = int_32(($13 << [24]) >> [24])
	$8 = ($2 + [2])
	$13 = *($2 + [2])
	goto $label$9 
	
.LABEL $label$10
	$8 = ($2 + [1])
	$11 = [0]
	
.LABEL $label$9
	$7 = ($13 & [255])
	$6 = ( ($8 + [1]) ? $8 : ((int_32)$7 == (int_32)[43]) )
	$12 = CALL strtoul($6, ($14 + [12]), [10])
	$10 = [0]
	$8 = *($14 + [12])
	$13 = *($8)
	$2 = ($13 + [-67])
	if ( ((uint_32)$2 > (uint_32)[22]) ){ goto $label$12 }
	if ( ((([1] << $2) & [4194329]) == 0) ){ goto $label$12 }
	$10 = ( $12 ? ( $12 ? [1] : ((int_32)$8 == (int_32)$6) ) : $12 )
	
.LABEL $label$12
	if ( ((int_32)$13 == (int_32)[79]) ){ goto $label$15 }
	if ( ((int_32)$13 != (int_32)[69]) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = ($8 + [1])
	$13 = *($8 + [1])
	goto $label$13 
	
.LABEL $label$14
	$2 = $8
	
.LABEL $label$13
	$13 = CALL __strftime_fmt_1(($14 + [16]), ($14 + [124]), int_32(($13 << [24]) >> [24]), $3, $4, $11)
	if ( ($13 == 0) ){ goto $label$5 }
	if ( $10 ){ goto $label$17 }
	$12 = *($14 + [124])
	goto $label$16 
	
.LABEL $label$17
	
.LOOP $label$19:
	$8 = *($13)
	if ( ((int_32)$8 == (int_32)[43]) ){ goto $label$20 }
	if ( ((int_32)$8 == (int_32)[45]) ){ goto $label$20 }
	if ( ((int_32)$8 != (int_32)[48]) ){ goto $label$18 }
	if ( (*(($13 + [1])) == 0) ){ goto $label$18 }
	
.LABEL $label$20
	*($14 + [124]) = (*($14 + [124]) + [-1])
	$13 = ($13 + [1])
	goto $label$19 
	
.LABEL $label$18
	$8 = [43]
	$12 = *($9)
	if ( ((int_32)$7 != (int_32)[43]) ){ goto $label$23 }
	if ( ((int_32)$12 > (int_32)[8099]) ){ goto $label$22 }
	
.LABEL $label$23
	$8 = [45]
	if ( ((int_32)$12 > (int_32)[-1901]) ){ goto $label$21 }
	
.LABEL $label$22
	$10 = ($10 + [-1])
	*(($0 + $5)) = $8
	$5 = ($5 + [1])
	
.LABEL $label$21
	$12 = *($14 + [124])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$16 }
	if ( ((uint_32)$10 <= (uint_32)$12) ){ goto $label$16 }
	$8 = ($10 + [-1])
	
.LOOP $label$24:
	*(($0 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$16 }
	$10 = ((uint_32)$8 > (uint_32)$12)
	$8 = ($8 + [-1])
	if ( $10 ){ goto $label$24 }
	
.LABEL $label$16
	$8 = ($1 - $5)
	if ( ((uint_32)$12 <= (uint_32)$8) ){ goto $label$25 }
	*($14 + [124]) = $8
	$12 = $8
	
.LABEL $label$25
	CALL memcpy(($0 + $5), $13, $12)
	$5 = ($12 + $5)
	
.LABEL $label$7
	$2 = ($2 + [1])
	if ( ($5 <= $1) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($1 == 0) ){ goto $label$4 }
	$5 = ( ($1 + [-1]) ? $5 : ((int_32)$5 == (int_32)$1) )
	$13 = [0]
	goto $label$2 
	
.LABEL $label$4
	$13 = [0]
	goto $label$1 
	
.LABEL $label$3
	$13 = $5
	
.LABEL $label$2
	*(($0 + $5)) = [0]
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [128])
	return $13
}

int_32 .FUNC $293 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [24])
	$1 = *($0 + [28])
	$3 = (([371] - $1) + $2)
	$4 = ((((uint_32)($3 + [-2]) % (uint_32)[7]) <= [3]) + ((uint_32)(($1 + [7]) - ((uint_32)($2 + [6]) % (uint_32)[7])) / (uint_32)[7]))
	if ( ((int_32)$4 == (int_32)[53]) ){ goto $label$4 }
	if ( $4 ){ goto $label$3 }
	$1 = ((uint_32)(([6] - $1) + $2) % (uint_32)[7])
	if ( ((int_32)$1 == (int_32)[4]) ){ goto $label$5 }
	$4 = [52]
	if ( ((int_32)$1 != (int_32)[5]) ){ goto $label$3 }
	$0 = ($0 + [-1])
	$0 = ((int_32)*($0 + [20]) % (int_32)[400])
	$0 = (( ($0 + [-2001]) ? $0 : ((int_32)$0 > (int_32)[2147481747]) ) + [1900])
	if ( ($0 & [3]) ){ goto $label$3 }
	$1 = ((int_32)$0 % (int_32)[400])
	if ( ((int_32)$0 % (int_32)[100]) ){ goto $label$5 }
	if ( $1 ){ goto $label$3 }
	
.LABEL $label$5
	return [53]
	
.LABEL $label$4
	$4 = ((uint_32)$3 % (uint_32)[7])
	if ( ((int_32)$4 == (int_32)[4]) ){ goto $label$2 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$6 }
	$0 = *($0 + [20])
	$0 = (( ($0 + [-2000]) ? $0 : ((int_32)$0 > (int_32)[2147481747]) ) + [1900])
	if ( ($0 & [3]) ){ goto $label$6 }
	$1 = ((int_32)$0 % (int_32)[400])
	if ( ((int_32)$0 % (int_32)[100]) ){ goto $label$1 }
	$4 = [53]
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$4 = [1]
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return [53]
	
.LABEL $label$1
	return [53]
}

int_32 .FUNC __strftime_fmt_1 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	$13 = [0]
	$7 = ($2 + [-37])
	if ( ((uint_32)$7 > (uint_32)[85]) ){ goto $label$1 }
	$12 = [15664]
	$10 = [48]
	$11 = [131112]
	goto $label$48 
	
.LABEL $label$50
	$6 = *($3 + [20])
	$9 = ((int_64)$6 + (int_64)1900)
	$13 = *($3 + [28])
	if ( ((int_32)$13 > (int_32)[2]) ){ goto $label$11 }
	$8 = ((int_64)$6 + (int_64)1899)
	$13 = CALL $293($3)
	goto $label$10 
	
.LABEL $label$49
	$13 = [15600]
	$0 = *($3 + [16])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$24 }
	$13 = ($0 + [131086])
	goto $label$25 
	
.LABEL $label$48
	*($1) = [1]
	$13 = [15680]
	goto $label$1 
	
.LABEL $label$47
	$13 = [15600]
	$0 = *($3 + [24])
	if ( ((uint_32)$0 > (uint_32)[6]) ){ goto $label$24 }
	$13 = ($0 + [131079])
	goto $label$25 
	
.LABEL $label$46
	$13 = [15600]
	$0 = *($3 + [16])
	if ( ((uint_32)$0 > (uint_32)[11]) ){ goto $label$24 }
	$13 = ($0 + [131098])
	goto $label$25 
	
.LABEL $label$45
	$9 = ((int_64)((int_64)*($3 + [20]) + (int_64)1900) / (int_64)100)
	goto $label$13 
	
.LABEL $label$44
	$12 = [15648]
	goto $label$15 
	
.LABEL $label$43
	$9 = *($3 + [8])
	goto $label$13 
	
.LABEL $label$42
	$10 = [48]
	$13 = [2]
	$3 = *($3 + [8])
	if ( ($3 == 0) ){ goto $label$7 }
	$9 = (CASTING int_64)(int_32 $3)
	$9 = ( ((int_64)$9 + (int_64)-12) ? $9 : ((int_32)$3 > (int_32)[12]) )
	goto $label$3 
	
.LABEL $label$41
	$9 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$40
	$12 = [15632]
	goto $label$15 
	
.LABEL $label$39
	$9 = *($3)
	goto $label$13 
	
.LABEL $label$38
	$12 = [15616]
	goto $label$15 
	
.LABEL $label$37
	$9 = (CASTING uint_64)(uint_32 ((uint_32)((*($3 + [28]) + [7]) - *($3 + [24])) / (uint_32)[7]))
	goto $label$13 
	
.LABEL $label$36
	$9 = (CASTING int_64)(int_32 CALL $293($3))
	goto $label$13 
	
.LABEL $label$35
	$9 = (CASTING uint_64)(uint_32 ((uint_32)((*($3 + [28]) + [7]) - ((uint_32)(*($3 + [24]) + [6]) % (uint_32)[7])) / (uint_32)[7]))
	goto $label$13 
	
.LABEL $label$34
	$11 = [131114]
	goto $label$16 
	
.LABEL $label$33
	$9 = ((int_64)*($3 + [20]) + (int_64)1900)
	if ( ((int_64)$9 < (int_64)10000) ){ goto $label$8 }
	*($14 + [48]) = $9
	*($1) = CALL snprintf($0, [100], [15392], ($14 + [48]))
	goto $label$2 
	
.LABEL $label$32
	$13 = [15600]
	$0 = *($3 + [24])
	if ( ((uint_32)$0 > (uint_32)[6]) ){ goto $label$24 }
	$13 = ($0 + [131072])
	goto $label$25 
	
.LABEL $label$31
	$10 = [95]
	
.LABEL $label$30
	$9 = *($3 + [12])
	goto $label$4 
	
.LABEL $label$29
	$9 = (CASTING int_64)(int_32 (*($3 + [28]) + [1]))
	$10 = [48]
	$13 = [3]
	goto $label$3 
	
.LABEL $label$28
	$9 = (CASTING int_64)(int_32 (*($3 + [16]) + [1]))
	goto $label$13 
	
.LABEL $label$27
	*($1) = [1]
	$13 = [15728]
	goto $label$1 
	
.LABEL $label$26
	$13 = ( [131111] ? [131110] : ((int_32)*($3 + [8]) > (int_32)[11]) )
	
.LABEL $label$25
	$13 = CALL __nl_langinfo_l($13, $4)
	
.LABEL $label$24
	*($1) = CALL strlen($13)
	goto $label$1 
	
.LABEL $label$23
	$11 = [131115]
	goto $label$16 
	
.LABEL $label$22
	$9 = (int_64))(CALL __tm_to_secs($3) - *($3 + [36]))
	goto $label$18 
	
.LABEL $label$21
	*($1) = [1]
	$13 = [15712]
	goto $label$1 
	
.LABEL $label$20
	$9 = *($3 + [24])
	$9 = ( (int_64)7 ? $9 : (int_64)($9 == 0) )
	goto $label$18 
	
.LABEL $label$19
	$9 = *($3 + [24])
	
.LABEL $label$18
	$10 = [48]
	$13 = [1]
	goto $label$3 
	
.LABEL $label$17
	$11 = [131113]
	
.LABEL $label$16
	$12 = CALL __nl_langinfo_l($11, $4)
	
.LABEL $label$15
	$13 = CALL __strftime_l($0, [100], $12, $3, $4)
	*($1) = $13
	$13 = ( $0 ? [0] : $13 )
	goto $label$1 
	
.LABEL $label$14
	$9 = (int_64)$9 >> (int_64)63
	$9 = ((int_64)((int_64)*($3 + [20]) + (int_64)1900) % (int_64)100)
	$9 = ((int_64)((int_64)$9 + (int_64)$9)) ^ (int_64)$9)
	
.LABEL $label$13
	$10 = [48]
	goto $label$4 
	
.LABEL $label$12
	if ( ((int_32)*($3 + [32]) <= (int_32)[-1]) ){ goto $label$6 }
	$13 = *($3 + [36])
	*($14 + [64]) = ((int_32)$13 / (int_32)[3600])
	*($14 + [68]) = ((int_32)CALL abs(((int_32)$13 % (int_32)[3600])) / (int_32)[60])
	*($1) = CALL snprintf($0, [100], [15408], ($14 + [64]))
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_32)$13 < (int_32)[361]) ){ goto $label$9 }
	$13 = CALL $293($3)
	$8 = $9
	$9 = ((int_64)$6 + (int_64)1901)
	
.LABEL $label$10
	$9 = ( $9 ? $8 : ((int_32)$13 == (int_32)[1]) )
	
.LABEL $label$9
	$10 = [48]
	$13 = [4]
	if ( ((int_32)$2 != (int_32)[103]) ){ goto $label$3 }
	$9 = ((int_64)$9 % (int_64)100)
	goto $label$4 
	
.LABEL $label$8
	$10 = [48]
	$13 = [4]
	goto $label$3 
	
.LABEL $label$7
	$9 = (int_64)12
	goto $label$3 
	
.LABEL $label$6
	*($1) = [0]
	$13 = [15696]
	goto $label$1 
	
.LABEL $label$5
	CALL __assert_fail([15424], [15456], [190], [15520])
	
.LABEL $label$4
	$13 = [2]
	
.LABEL $label$3
	$3 = ( $5 ? $10 : $5 )
	if ( ((int_32)$3 == (int_32)[95]) ){ goto $label$52 }
	if ( ((int_32)$3 != (int_32)[45]) ){ goto $label$51 }
	*($14 + [16]) = $9
	*($1) = CALL snprintf($0, [100], [15552], ($14 + [16]))
	goto $label$2 
	
.LABEL $label$52
	*($14 + [40]) = $9
	*($14 + [32]) = $13
	*($1) = CALL snprintf($0, [100], [15568], ($14 + [32]))
	goto $label$2 
	
.LABEL $label$51
	*($14 + [8]) = $9
	*($14) = $13
	*($1) = CALL snprintf($0, [100], [15584], $14)
	
.LABEL $label$2
	$13 = $0
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [80])
	$7
	(unreachable)
	return $13
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $246($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $247($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [800])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $29($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [784])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $235 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$6 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL $260(($8 + [32]), $3)
	CALL $260(($8 + [16]), $4)
	CALL $260($8, $5)
	CALL void $6((int_32 $1), (int_64 $2), (int_64 ($8 + [32])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $0))
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	CALL $247(*($8 + [8]))
	
.LABEL $label$2
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $247(*($8 + [24]))
	
.LABEL $label$3
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $247(*($8 + [40]))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [17617])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [17617])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [17617]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [17617]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [17888]))
	$10 = *(($13 + [17617]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [17617]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [17617]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [17617]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [17617])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [17617])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [672])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23($0, ($1 + [184]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $22(CALL $21(CALL $21(CALL $21($0, ($1 + [96])), ($1 + [108])), ($1 + [120])), ($1 + [132]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [148]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [156]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = CALL $23($0, $7)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($5 + [4]), ($7 + [16]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [800])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $31($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [784])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27($0, ($1 + [184]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26(CALL $25(CALL $25(CALL $25($0, ($1 + [96])), ($1 + [108])), ($1 + [120])), ($1 + [132]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [144]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [148]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [152]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [156]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [784])
	CALL memcpy(($1 + [160]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $28($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $251($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $246($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $251($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $247($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $248($7)
	return (unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$6 = *($1 + [4])
	$7 = ((int_32)($6 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $30($1, ($4 - $7))
	$6 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($6 + [-24])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$6 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = CALL $27($0, $7)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([16216])
	return [16224]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

void .FUNC $315 ()
{
	(unreachable)
}

void .FUNC _ZN3dao11removetokenENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [1456]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$14 = ($14 + [165])
	goto $label$3 
	
.LABEL $label$4
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$3 = *(($0 + [144]))
	$15 = *(($0 + [140]))
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$6 }
	$4 = ($1 + [1])
	$8 = ($1 + [4])
	$9 = ($1 + [8])
	
.LOOP $label$8:
	$14 = ($14 & [1])
	$14 = *($1)
	$5 = ($14 & [1])
	$14 = *($15)
	$16 = uint_32($14 >> [1])
	$6 = ( *($15 + [4]) ? $16 : $5 )
	if ( ((int_32)$6 != (int_32)( *($8) ? uint_32($14 >> [1]) : $14 )) ){ goto $label$9 }
	$7 = ( *($9) ? $4 : $14 )
	if ( $5 ){ goto $label$11 }
	if ( ($6 == 0) ){ goto $label$10 }
	$14 = [0]
	
.LOOP $label$12:
	if ( ((int_32)*((($15 + $14) + [1])) != (int_32)*(($7 + $14))) ){ goto $label$9 }
	$14 = ($14 + [1])
	if ( ((int_32)$16 != (int_32)$14) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ($6 == 0) ){ goto $label$10 }
	if ( CALL memcmp(( *($15 + [8]) ? ($15 + [1]) : $5 ), $7, $6) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_64)*($15 + [16]) == (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$9
	$15 = ($15 + [24])
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$8 }
	$15 = $3
	
.LABEL $label$7
	$16 = *(($0 + [144]))
	goto $label$5 
	
.LABEL $label$6
	$16 = $15
	
.LABEL $label$5
	$5 = ($0 + [8])
	if ( ((int_32)($15 + [24]) == (int_32)$16) ){ goto $label$15 }
	$7 = ($16 + [-24])
	
.LOOP $label$16:
	if ( (*($15) & [1]) ){ goto $label$18 }
	*($15) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($15 + [8]))) = [0]
	*(($15 + [4])) = [0]
	
.LABEL $label$17
	CALL $251($15, [0])
	$14 = ($15 + [24])
	$11 = *($14)
	*(($15 + [28])) = [0]
	*($14) = [0]
	$16 = ($15 + [32])
	*(($15 + [8])) = *($16)
	*($15) = $11
	*($16) = [0]
	*(($15 + [16])) = *(($15 + [40]))
	$15 = $14
	if ( ((int_32)$7 != (int_32)$14) ){ goto $label$16 }
	$16 = *(($0 + [144]))
	if ( ((int_32)$16 != (int_32)$14) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$14 = $15
	
.LABEL $label$14
	
.LOOP $label$19:
	$15 = ($16 + [-24])
	if ( ((*($15) & [1]) == 0) ){ goto $label$20 }
	CALL $247(*(($16 + [-16])))
	
.LABEL $label$20
	$16 = $15
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$19 }
	
.LABEL $label$13
	*(($0 + [144])) = $14
	CALL $10(($0 + [208]), $5, *($0))
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $246(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[24]))
	CALL $260($6, $1)
	*($6 + [16]) = *($1 + [16])
	$2 = ($4 + ((int_32)$5 * (int_32)[24]))
	$3 = ($6 + [24])
	$5 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$4 = ([0] - $5)
	$5 = ($1 + [-24])
	
.LOOP $label$7:
	*(($6 + [-24])) = *($5)
	$1 = ($5 + [8])
	*(($6 + [-16])) = *($1)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($1) = [0]
	*(($6 + [-8])) = *(($5 + [16]))
	$6 = ($6 + [-24])
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$6 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $247(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $6) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $247($1)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN3dao11settimeparaEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1456]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($0 + [96])) = $2
	*(($0 + [88])) = $1
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

void .FUNC _ZN3dao10setdepositEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1456]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*(($0 + [80])) = ((int_64)$1 * (int_64)10000)
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

void .FUNC _ZN3dao12dao_strftimeEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [224])
	*([0] + [4]) = $7
	*($7 + [220]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL strftime(($7 + [80]), [128], [2496], CALL $286(($7 + [220])))
	*(($7 + [72])) = [0]
	*($7 + [64]) = (int_64)0
	$4 = CALL strlen(($7 + [80]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($7 + [64]) = ($4 << [1])
	$5 = (($7 + [64]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$6 = CALL $246($5)
	*($7 + [64]) = ($5 | [1])
	*($7 + [72]) = $6
	*($7 + [68]) = $4
	$5 = (($7 + [64]) | [1])
	
.LABEL $label$3
	CALL memcpy($6, ($7 + [80]), $4)
	
.LABEL $label$2
	*(($6 + $4)) = [0]
	CALL $106(($7 + [16]), $3, [2512])
	CALL _ZNSt3__19to_stringEy($7, $2)
	$4 = *($7)
	$6 = ($4 & [1])
	$4 = CALL $252(($7 + [16]), ( *($7 + [8]) ? ($7 | [1]) : $6 ), ( *($7 + [4]) ? uint_32($4 >> [1]) : $6 ))
	$6 = ($4 + [8])
	*((($7 + [32]) + [8])) = *($6)
	*($7 + [32]) = *($4)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($6) = [0]
	$4 = CALL $253(($7 + [32]), [2528])
	$6 = ($4 + [8])
	*((($7 + [48]) + [8])) = *($6)
	*($7 + [48]) = *($4)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($6) = [0]
	$4 = *($7 + [64])
	$6 = ($4 & [1])
	$4 = CALL $252(($7 + [48]), ( *($7 + [72]) ? $5 : $6 ), ( *($7 + [68]) ? uint_32($4 >> [1]) : $6 ))
	$2 = *($4)
	*($4) = (int_64)0
	*($0) = $2
	$4 = ($4 + [8])
	*(($0 + [8])) = *($4)
	*($4) = [0]
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*($7 + [56]))
	
.LABEL $label$5
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*($7 + [40]))
	
.LABEL $label$6
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($7 + [8])))
	
.LABEL $label$7
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $247(*($7 + [24]))
	
.LABEL $label$8
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL $247(*(($7 + [72])))
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $248(($7 + [64]))
}

void .FUNC _ZN3dao11setcountimeEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1456]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	*(($0 + [20])) = $1
	CALL $10(($0 + [208]), ($0 + [8]), *($0))
}

void .FUNC _ZN3dao22get_default_parametersEv (int_32 $0, int_32 $1)
{
	int_64 $2
	*($0 + [96 align=4]) = (int_64)0
	*($0 + [120 align=4]) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = [0]
	*(($0 + [140])) = [0]
	*($0 + [184]) = [0]
	*(($0 + [188])) = [0]
	*(($0 + [192])) = [0]
	*($0) = (int_64)0
	*($0 + [8]) = [4]
	$2 = CALL current_time()
	*($0 + [24]) = (int_64)15552000
	*($0 + [12]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [15552000])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $246($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $252($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $248($0)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [1264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1312])
	$6 = ($0 + [28])
	$5 = *($6)
	CALL eosio_assert(((int_32)$5 != (int_32)*($0 + [24])), [1376])
	$4 = ($5 + [-24])
	$6 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$2 = ([0] - $6)
	
.LOOP $label$4:
	$6 = ($4 + [24])
	$3 = *($6)
	*($6) = [0]
	$5 = *($4)
	*($4) = $3
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($5)
	CALL $247($5)
	
.LABEL $label$5
	*(($4 + [16])) = *(($4 + [40]))
	*(($4 + [8])) = *(($4 + [32]))
	$4 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$4 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $16($4)
	CALL $247($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $6
	CALL db_remove_i64(*($1 + [204]))
}

void .FUNC _ZN3dao12clearglobalsEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1456]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$3 = ($0 + [208])
	$2 = *(($0 + [236]))
	if ( ((int_32)$2 == (int_32)*(($0 + [232]))) ){ goto $label$7 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [200]) == (int_32)$3), [272])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $11($3, $2)
	CALL eosio_assert(((int_32)*($2 + [200]) == (int_32)$3), [272])
	
.LABEL $label$6
	CALL eosio_assert([1], [1184])
	CALL eosio_assert([1], [1232])
	$0 = CALL db_next_i64(*($2 + [204]), ($8 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL $11($3, $0)
	
.LABEL $label$8
	CALL $109($3, $2)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [208])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [688])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [784])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [784])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [784])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [784])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($2 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($3 = $4) + [76]) = $0
	*($3 + [64]) = *($1)
	*($3 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [48]) = [0]
	*(($3 + [52])) = [0]
	*(($3 + [56])) = [0]
	*($3 + [80]) = $1
	$4 = ($1 + $0)
	*($3 + [88]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [784])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [784])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [84]) = ($1 + [16])
	CALL $27(($3 + [80]), (($3 + [8]) + [16]))
	CALL $27(($3 + [80]), ($3 + [36]))
	CALL $27(($3 + [80]), ($3 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $234(($3 + [80]), ($3 + [8]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $247(*(($3 + [56])))
	
.LABEL $label$5
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($3 + [44])))
	
.LABEL $label$6
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($3 + [32])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [96])
	return [1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $29($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [672])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [672])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $41(CALL $40($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $246(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $247($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [688])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$3 = *($3)
	$4 = *($1)
	$5 = ($1 + [12])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($5) = ($8 + [8])
	*($8) = *($3)
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $36($8, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [672])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $21($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = (int_64)0
	$2 = *($0)
	$6 = *($6)
	$3 = ($1 + [12])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	$8 = ($5 + [8])
	*($3) = $8
	*($5) = *($6)
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $36($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $21($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157500442420445184, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $25(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$2 = ($3 + $1)
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$3 }
	$5 = [178956970]
	$6 = ((int_32)($6 - $4) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$6 }
	$5 = ($6 << [1])
	$5 = ( $2 ? $5 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$6 = CALL $246(((int_32)$5 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$6 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($5 + [8]))) = (int_64)0
	*($5) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($4) = [0]
	$5 = (*($6) + [24])
	*($6) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$2 = ($6 + ((int_32)$5 * (int_32)[24]))
	$6 = ($6 + ((int_32)$3 * (int_32)[24]))
	$5 = $6
	
.LOOP $label$8:
	*($5) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*(($5 + [8])) = (int_64)0
	$5 = ($5 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-24])
	
.LOOP $label$11:
	*(($6 + [-24])) = *($1)
	$4 = ($1 + [8])
	*(($6 + [-16])) = *($4)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	*(($6 + [-8])) = *(($1 + [16]))
	$6 = ($6 + [-24])
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $4
	
.LABEL $label$9
	*($0) = $6
	*(($0 + [4])) = $5
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	$1 = ([0] - $3)
	$5 = ($4 + [-24])
	
.LOOP $label$13:
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL $247(*(($5 + [8])))
	
.LABEL $label$14
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $247($3)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $246(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $247($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($7 + [8]), $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [784])
	$8 = (($7 + [8]) + [8])
	CALL memcpy($8, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [784])
	$4 = (($7 + [8]) + [16])
	CALL memcpy($4, ($5 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = *($4)
	$3 = *($7 + [8])
	*($7 + [40]) = *($8)
	*($7 + [39]) = $1
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($7 + [40])), (int_32 ($7 + [39])), (int_32 $6))
	*([0] + [4]) = ($7 + [48])
	return [1]
}

int_32 .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [208])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [688])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $237(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [784])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[3]), [784])
	CALL memcpy(($3 + [8]), $2, [4])
	*($3 + [52]) = ($1 + [12])
	CALL $27(($3 + [48]), ($3 + [12]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [784])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $236(($3 + [48]), $3)
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*(($3 + [20])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*(($6 + [16])) = [0]
	*($6) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [32]) = ($1 + $3)
	*($6 + [24]) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [784])
	CALL memcpy($6, $1, [8])
	*($6 + [28]) = ($1 + [8])
	$7 = ($6 + [8])
	CALL $27(($6 + [24]), $7)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$4 = *($6)
	CALL $260(($6 + [24]), $7)
	*($6 + [40]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 + [40])), (int_32 ($6 + [24])), (int_32 $5))
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $247(*($6 + [32]))
	
.LABEL $label$6
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $247(*(($6 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [48])
	return [1]
}

int_32 .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [784])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $246(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $247($6)
	
.LABEL $label$11
	CALL $247($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $247($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $247($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $196 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [432])
	$8 = *($3)
	$4 = *($1)
	$9 = ($1 + [12])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($6) = *($8)
	*(($6 + [16])) = *(($8 + [16]))
	*(($6 + [8])) = *(($8 + [8]))
	*($9) = (*($9) + [24])
	$9 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [8])
	CALL $199($9, $8)
	
.LABEL $label$1
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [608])
	$5 = ($1 + [24])
	$6 = *($9)
	$8 = *(($1 + [12]))
	$7 = ($8 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	$3 = [28]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$5 }
	$8 = (((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($3 + [-20])
	
.LABEL $label$4
	$6 = ($8 + [8])
	if ( ($6 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($12 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($11) = $3
	*($11 + [8]) = ($3 + $6)
	CALL eosio_assert(((int_32)($8 + [8]) > (int_32)[7]), [672])
	CALL memcpy($3, $1, [8])
	*($11 + [4]) = ($3 + [8])
	$8 = CALL $200($11, $9)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($8 + [4]), $5, [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	CALL db_update_i64(*($1 + [36]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$2 = *($0)
	$6 = *($8 + [4])
	$4 = ($1 + [12])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($7) = *($6)
	*(($7 + [16])) = *(($6 + [16]))
	*(($7 + [8])) = *(($6 + [8]))
	$6 = (*($4) + [24])
	*($4) = $6
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	CALL $199($7, $6)
	$6 = *($4)
	
.LABEL $label$1
	*($1 + [24]) = *(*($8 + [8]))
	$3 = ($1 + [24])
	$4 = *($7)
	$5 = ($6 - $4)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$8 = [28]
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$5 }
	$6 = (((int_32)((uint_32)($5 + [-24]) / (uint_32)[24]) * (int_32)[20]) + $8)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($8 + [-20])
	
.LABEL $label$4
	$4 = ($6 + [8])
	if ( ($4 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($4)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($10) = $8
	*($10 + [8]) = ($8 + $4)
	CALL eosio_assert(((int_32)($6 + [8]) > (int_32)[7]), [672])
	CALL memcpy($8, $1, [8])
	*($10 + [4]) = ($8 + [8])
	$6 = CALL $200($10, $7)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($6 + [4]), $3, [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$9 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)5455799419163115520, *(*($0 + [8])), $9, $8, $4)
	if ( ($4 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN3dao8claimingEymy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	float_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	float_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [240])
	*([0] + [4]) = $21
	*($21 + [144]) = $1
	CALL prints([3744])
	CALL require_auth($3)
	$8 = *(($0 + [272]))
	$13 = *(($0 + [276]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$1 }
	$14 = ($13 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$1 }
	$13 = $14
	$15 = ($14 + [-24])
	$14 = $15
	if ( ((int_32)($15 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$14 = ($0 + [248])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$4 }
	$10 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$14), [272])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$15 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-5915097263704637440, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $79($14, $15)
	CALL eosio_assert(((int_32)*($10 + [204]) == (int_32)$14), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [3760])
	$15 = *(($10 + [180]))
	$14 = *($10 + [176])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($14) == (int_64)$3) ){ goto $label$5 }
	$14 = ($14 + [24])
	if ( ((int_32)$15 != (int_32)$14) ){ goto $label$6 }
	$14 = $15
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$14 != (int_32)$15), [3792])
	*((($21 + [104]) + [32])) = [0]
	*($21 + [120]) = (int_64)-1
	*($21 + [128]) = (int_64)0
	$16 = *($0)
	*($21 + [104]) = $16
	*($21 + [112]) = $3
	$15 = CALL db_find_i64($16, $3, (int_64)5455799419163115520, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$22 }
	$4 = CALL $195(($21 + [104]), $15)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($21 + [104])), [272])
	$13 = *(($4 + [12]))
	$15 = *($4 + [8])
	if ( ((int_32)$15 == (int_32)$13) ){ goto $label$23 }
	
.LOOP $label$24:
	if ( ((int_32)*($15) == (int_32)$2) ){ goto $label$23 }
	$15 = ($15 + [24])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$24 }
	$15 = $13
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$15 == (int_32)$13), [3824])
	$1 = *($14 + [8])
	$16 = *($10 + [144])
	CALL prints([2288])
	$5 = ((float_64)(CASTING float_64)(int_64 $1) / (float_64)(CASTING float_64)(uint_64 $16))
	CALL printdf($5)
	*($21 + [80]) = (int_64)-1
	*($21 + [88]) = [0]
	$1 = *($21 + [144])
	$16 = *($0)
	*($21 + [64]) = $16
	*($21 + [72]) = $1
	*((($21 + [64]) + [28])) = [0]
	*(($21 + [96])) = [0]
	$15 = [0]
	$14 = CALL db_find_i64($16, $1, (int_64)8417589619692510480, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$25 }
	$15 = CALL $186(($21 + [64]), $14)
	CALL eosio_assert(((int_32)*($15 + [36]) == (int_32)($21 + [64])), [272])
	
.LABEL $label$25
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [3856])
	$15 = *(($15 + [28]))
	$14 = *($15 + [24])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$26 }
	
.LOOP $label$27:
	if ( ((int_32)*($14) == (int_32)$2) ){ goto $label$26 }
	$14 = ($14 + [24])
	if ( ((int_32)$15 != (int_32)$14) ){ goto $label$27 }
	$14 = $15
	
.LABEL $label$26
	CALL eosio_assert(((int_32)$14 != (int_32)$15), [3888])
	$18 = *(($14 + [16]))
	*(($21 + [56])) = $18
	$1 = *($14 + [8])
	*($21 + [48]) = $1
	*($21 + [48]) = (Rounds 0)(((float_64)((float_64)$5 * (float_64)(float_64)0.8) * (float_64)(CASTING float_64)(int_64 $1)))
	$6 = *(($0 + [144]))
	$12 = *(($0 + [140]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$15 = ( *($12 + [8]) ? ($12 + [1]) : (*($12) & [1]) )
	$14 = [-1]
	$13 = [0]
	
.LOOP $label$30:
	$7 = $13
	$13 = ($7 + [1])
	$10 = ($15 + $14)
	$8 = ($14 + [1])
	$14 = $8
	if ( *(($10 + [1])) ){ goto $label$30 }
	if ( ($8 == 0) ){ goto $label$32 }
	$16 = (CASTING uint_64)(uint_32 $7)
	$17 = (int_64)0
	$1 = (int_64)8
	
.LOOP $label$33:
	$14 = *($15)
	if ( ((uint_32)(($14 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$1 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$34
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)8)
	$16 = ((int_64)$16 + (int_64)-1)
	if ( ((int_64)$16 != (int_64)0) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$17 = (int_64)0
	
.LABEL $label$31
	if ( ((int_64)((int_64)$17 | (int_64)4) == (int_64)$18) ){ goto $label$28 }
	$12 = ($12 + [24])
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$29 }
	$12 = $6
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$12 != (int_32)$6), [2864])
	$9 = *($12 + [16])
	$1 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$18 = (int_64)0
	
.LOOP $label$35:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$36 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$15 = ($15 + [165])
	goto $label$37 
	
.LABEL $label$38
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$36
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$35 }
	$1 = (int_64)0
	$17 = (int_64)59
	$14 = [96]
	$19 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$44 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$15 = ($15 + [165])
	goto $label$42 
	
.LABEL $label$44
	$16 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$40
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$39 }
	$1 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$20 = (int_64)0
	
.LOOP $label$45:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$46 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$15 = ($15 + [165])
	goto $label$47 
	
.LABEL $label$48
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$46
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$45 }
	*(($21 + [24])) = [0]
	*($21 + [16]) = (int_64)0
	$14 = CALL strlen([3744])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$21 }
	*($21 + [16]) = ($14 << [1])
	$15 = (($21 + [16]) | [1])
	if ( $14 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$16 = *($14 + [8])
	$17 = *($10 + [144])
	*($21 + [80]) = (int_64)-1
	*($21 + [88]) = [0]
	$1 = *($21 + [144])
	$18 = *($0)
	*($21 + [64]) = $18
	*($21 + [72]) = $1
	*((($21 + [64]) + [28])) = [0]
	*((($21 + [64]) + [32])) = [0]
	$5 = (CASTING float_64)(uint_64 $17)
	$11 = (CASTING float_64)(int_64 $16)
	$15 = [0]
	$14 = CALL db_find_i64($18, $1, (int_64)8417589619692510480, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$49 }
	$15 = CALL $186(($21 + [64]), $14)
	CALL eosio_assert(((int_32)*($15 + [36]) == (int_32)($21 + [64])), [272])
	
.LABEL $label$49
	$5 = ((float_64)$11 / (float_64)$5)
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [3856])
	$15 = *(($15 + [28]))
	$14 = *($15 + [24])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$50 }
	
.LOOP $label$51:
	if ( ((int_32)*($14) == (int_32)$2) ){ goto $label$50 }
	$14 = ($14 + [24])
	if ( ((int_32)$15 != (int_32)$14) ){ goto $label$51 }
	$14 = $15
	
.LABEL $label$50
	CALL eosio_assert(((int_32)$14 != (int_32)$15), [3888])
	$18 = *(($14 + [16]))
	*(($21 + [56])) = $18
	$1 = *($14 + [8])
	*($21 + [48]) = $1
	*($21 + [48]) = (Rounds 0)(((float_64)((float_64)$5 * (float_64)(float_64)0.8) * (float_64)(CASTING float_64)(int_64 $1)))
	$6 = *(($0 + [144]))
	$12 = *(($0 + [140]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$52 }
	
.LOOP $label$53:
	$15 = ( *($12 + [8]) ? ($12 + [1]) : (*($12) & [1]) )
	$14 = [-1]
	$13 = [0]
	
.LOOP $label$54:
	$7 = $13
	$13 = ($7 + [1])
	$10 = ($15 + $14)
	$8 = ($14 + [1])
	$14 = $8
	if ( *(($10 + [1])) ){ goto $label$54 }
	if ( ($8 == 0) ){ goto $label$56 }
	$16 = (CASTING uint_64)(uint_32 $7)
	$17 = (int_64)0
	$1 = (int_64)8
	
.LOOP $label$57:
	$14 = *($15)
	if ( ((uint_32)(($14 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$1 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$58
	$15 = ($15 + [1])
	$1 = ((int_64)$1 + (int_64)8)
	$16 = ((int_64)$16 + (int_64)-1)
	if ( ((int_64)$16 != (int_64)0) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$17 = (int_64)0
	
.LABEL $label$55
	if ( ((int_64)((int_64)$17 | (int_64)4) == (int_64)$18) ){ goto $label$52 }
	$12 = ($12 + [24])
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$53 }
	$12 = $6
	
.LABEL $label$52
	CALL eosio_assert(((int_32)$12 != (int_32)$6), [2864])
	$9 = *($12 + [16])
	$1 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$18 = (int_64)0
	
.LOOP $label$59:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$60 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$15 = ($15 + [165])
	goto $label$61 
	
.LABEL $label$62
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$60
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$59 }
	$1 = (int_64)0
	$17 = (int_64)59
	$14 = [96]
	$19 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$68 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$15 = ($15 + [165])
	goto $label$66 
	
.LABEL $label$68
	$16 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$64
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$19 = ((int_64)$16 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$63 }
	$1 = (int_64)0
	$16 = (int_64)59
	$14 = [112]
	$20 = (int_64)0
	
.LOOP $label$69:
	$17 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$70 }
	$15 = *($14)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$15 = ($15 + [165])
	goto $label$71 
	
.LABEL $label$72
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$70
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$69 }
	*(($21 + [24])) = [0]
	*($21 + [16]) = (int_64)0
	$14 = CALL strlen([3744])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$18 }
	*($21 + [16]) = ($14 << [1])
	$15 = (($21 + [16]) | [1])
	if ( $14 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$21
	$13 = (($14 + [16]) & [-16])
	$15 = CALL $246($13)
	*($21 + [16]) = ($13 | [1])
	*($21 + [24]) = $15
	*($21 + [20]) = $14
	
.LABEL $label$20
	CALL memcpy($15, [3744], $14)
	
.LABEL $label$19
	*(($15 + $14)) = [0]
	*(($15 = (($21 + [32]) + [8]))) = *((($21 + [48]) + [8]))
	*($21 + [32]) = *($21 + [48])
	$13 = *($21 + [16])
	*($21 + [16]) = [0]
	$10 = *($21 + [24])
	$8 = *($21 + [20])
	*($21 + [20]) = [0]
	*($21 + [24]) = [0]
	*(($14 = CALL $246([16]))) = $18
	*($14 + [8]) = $19
	$7 = ($14 + [16])
	*($21 + [232]) = $7
	*($21 + [224]) = $14
	*($21 + [184]) = $3
	*($21 + [176]) = $20
	*($21 + [228]) = $7
	*(($21 + [200])) = *($15)
	*($21 + [192]) = *($21 + [32])
	*($21 + [208]) = $13
	*(($21 + [212])) = $8
	*(($14 = ($21 + [216]))) = $10
	CALL $6($9, (int_64)-3617168760277827584, ($21 + [224]), ($21 + [176]))
	if ( ((*($21 + [208]) & [1]) == 0) ){ goto $label$73 }
	CALL $247(*($14))
	
.LABEL $label$73
	$14 = *($21 + [224])
	if ( ($14 == 0) ){ goto $label$74 }
	*($21 + [228]) = $14
	CALL $247($14)
	
.LABEL $label$74
	if ( ((*($21 + [16]) & [1]) == 0) ){ goto $label$75 }
	CALL $247(*(($21 + [24])))
	
.LABEL $label$75
	*(($21 + [192])) = (int_64)1398362884
	*($21 + [184]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	
.LOOP $label$80:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$80 }
	
.LABEL $label$79
	$15 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$15 = [0]
	
.LABEL $label$76
	CALL eosio_assert($15, [688])
	*(($21 + [196])) = *((($21 + [48]) + [12]))
	*(($21 + [192])) = *(($21 + [56]))
	*((($21 + [176]) + [12])) = *($21 + [52])
	*($21 + [176]) = $2
	*($21 + [184]) = *($21 + [48])
	$1 = *($0)
	*($21 + [228]) = ($21 + [48])
	*($21 + [224]) = ($21 + [176])
	CALL eosio_assert([1], [336])
	CALL $196(($21 + [104]), $4, $1, ($21 + [224]))
	$10 = *($21 + [88])
	if ( ($10 == 0) ){ goto $label$11 }
	$8 = (($21 + [64]) + [28])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$15 }
	
.LOOP $label$81:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$82 }
	$13 = *($15 + [24])
	if ( ($13 == 0) ){ goto $label$83 }
	*(($15 + [28])) = $13
	CALL $247($13)
	
.LABEL $label$83
	CALL $247($15)
	
.LABEL $label$82
	if ( ((int_32)$10 != (int_32)$14) ){ goto $label$81 }
	$14 = *(($21 + [88]))
	goto $label$14 
	
.LABEL $label$18
	$13 = (($14 + [16]) & [-16])
	$15 = CALL $246($13)
	*($21 + [16]) = ($13 | [1])
	*($21 + [24]) = $15
	*($21 + [20]) = $14
	
.LABEL $label$17
	CALL memcpy($15, [3744], $14)
	
.LABEL $label$16
	*(($15 + $14)) = [0]
	*(($15 = ($21 + [8]))) = *((($21 + [48]) + [8]))
	*($21) = *($21 + [48])
	$13 = *($21 + [16])
	*($21 + [16]) = [0]
	$10 = *($21 + [24])
	$8 = *($21 + [20])
	*($21 + [20]) = [0]
	*($21 + [24]) = [0]
	*(($14 = CALL $246([16]))) = $18
	*($14 + [8]) = $19
	$7 = ($14 + [16])
	*($21 + [232]) = $7
	*($21 + [224]) = $14
	*($21 + [184]) = $3
	*($21 + [176]) = $20
	*($21 + [228]) = $7
	*(($21 + [200])) = *($15)
	*($21 + [192]) = *($21)
	*($21 + [208]) = $13
	*(($21 + [212])) = $8
	*(($14 = ($21 + [216]))) = $10
	CALL $6($9, (int_64)-3617168760277827584, ($21 + [224]), ($21 + [176]))
	if ( ((*($21 + [208]) & [1]) == 0) ){ goto $label$84 }
	CALL $247(*($14))
	
.LABEL $label$84
	$14 = *($21 + [224])
	if ( ($14 == 0) ){ goto $label$85 }
	*($21 + [228]) = $14
	CALL $247($14)
	
.LABEL $label$85
	if ( ((*($21 + [16]) & [1]) == 0) ){ goto $label$86 }
	CALL $247(*(($21 + [24])))
	
.LABEL $label$86
	*(($21 + [192])) = (int_64)1398362884
	*($21 + [184]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$90 }
	
.LOOP $label$91:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$88 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$91 }
	
.LABEL $label$90
	$15 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$15 = [0]
	
.LABEL $label$87
	CALL eosio_assert($15, [688])
	*(($21 + [196])) = *((($21 + [48]) + [12]))
	*(($21 + [192])) = *(($21 + [56]))
	*((($21 + [176]) + [12])) = *($21 + [52])
	*($21 + [176]) = $2
	*($21 + [184]) = *($21 + [48])
	$1 = *($0)
	*($21 + [20]) = ($21 + [176])
	*($21 + [16]) = ($21 + [144])
	*($21 + [24]) = ($21 + [48])
	*($21 + [168]) = $1
	CALL eosio_assert(((int_64)*($21 + [104]) == (int_64)CALL $fimport$13()), [144])
	*($21 + [228]) = ($21 + [16])
	*($21 + [224]) = ($21 + [104])
	*($21 + [232]) = ($21 + [168])
	*(($14 = CALL $246([48])) + [16]) = [0]
	*($14 + [8 align=4]) = (int_64)0
	*($14 + [32]) = ($21 + [104])
	CALL $197(($21 + [224]), $14)
	*($21 + [160]) = $14
	$1 = *($14)
	*($21 + [224]) = $1
	$13 = *($14 + [36])
	*($21 + [156]) = $13
	$10 = ($21 + [132])
	$15 = *($10)
	if ( ((uint_32)$15 >= (uint_32)*(($21 + [136]))) ){ goto $label$93 }
	*($15 + [8]) = $1
	*($15 + [16]) = $13
	*($21 + [160]) = [0]
	*($15) = $14
	*($10) = ($15 + [24])
	goto $label$92 
	
.LABEL $label$93
	CALL $198(($21 + [128]), ($21 + [160]), ($21 + [224]), ($21 + [156]))
	
.LABEL $label$92
	$14 = *($21 + [160])
	*($21 + [160]) = [0]
	if ( ($14 == 0) ){ goto $label$94 }
	$15 = *($14 + [8])
	if ( ($15 == 0) ){ goto $label$95 }
	*(($14 + [12])) = $15
	CALL $247($15)
	
.LABEL $label$95
	CALL $247($14)
	
.LABEL $label$94
	$10 = *($21 + [88])
	if ( ($10 == 0) ){ goto $label$11 }
	$8 = (($21 + [64]) + [28])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$13 }
	
.LOOP $label$96:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$97 }
	$13 = *($15 + [24])
	if ( ($13 == 0) ){ goto $label$98 }
	*(($15 + [28])) = $13
	CALL $247($13)
	
.LABEL $label$98
	CALL $247($15)
	
.LABEL $label$97
	if ( ((int_32)$10 != (int_32)$14) ){ goto $label$96 }
	$14 = *(($21 + [88]))
	goto $label$12 
	
.LABEL $label$15
	$14 = $10
	
.LABEL $label$14
	*($8) = $10
	CALL $247($14)
	$10 = *($21 + [128])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$14 = $10
	
.LABEL $label$12
	*($8) = $10
	CALL $247($14)
	
.LABEL $label$11
	$10 = *($21 + [128])
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = ($21 + [132])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$100 }
	
.LOOP $label$101:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$102 }
	$13 = *($15 + [8])
	if ( ($13 == 0) ){ goto $label$103 }
	*(($15 + [12])) = $13
	CALL $247($13)
	
.LABEL $label$103
	CALL $247($15)
	
.LABEL $label$102
	if ( ((int_32)$10 != (int_32)$14) ){ goto $label$101 }
	$14 = *(($21 + [128]))
	goto $label$99 
	
.LABEL $label$100
	$14 = $10
	
.LABEL $label$99
	*($8) = $10
	CALL $247($14)
	
.LABEL $label$9
	*([0] + [4]) = ($21 + [240])
	return (unreachable)
	
.LABEL $label$8
	CALL $248(($21 + [16]))
	
.LABEL $label$7
	CALL $248(($21 + [16]))
	(unreachable)
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [752])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $246([48])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [32]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [784])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	$4 = CALL $201(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [784])
	CALL memcpy(($6 + [24]), *($4 + [4]), [8])
	*($6 + [36]) = $1
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $198(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $247($7)
	
.LABEL $label$10
	CALL $247($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [800])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $193($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [784])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $246(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [688])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [688])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $247($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [672])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [672])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	*(($0 + [32])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [784])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]), [784])
	CALL memcpy(($0 + [8]), *($1 + [4]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]), [784])
	CALL memcpy(($0 + [16]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	CALL $192($1, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}