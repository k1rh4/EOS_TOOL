(data (i32.const 4) "\10n\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "check\00")
(data (i32.const 160) "claim\00")
(data (i32.const 176) "erasedata\00")
(data (i32.const 192) "cannot pass end iterator to erase\00")
(data (i32.const 240) "cannot increment end iterator\00")
(data (i32.const 272) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 336) "object passed to erase is not in multi_index\00")
(data (i32.const 384) "cannot erase objects in table of another contract\00")
(data (i32.const 448) "attempt to remove object that was not in multi_index\00")
(data (i32.const 512) "error reading iterator\00")
(data (i32.const 544) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 608) "invalid symbol name\00")
(data (i32.const 640) "read\00")
(data (i32.const 656) "sorry,profit share can\'t be found!\00")
(data (i32.const 704) "you are not an game user,play quickly!\00")
(data (i32.const 752) "you can\'t claim this shareid,maybe you had claimed it!\00")
(data (i32.const 816) "round of this profit share has expired,don\'t worry,just wait for next profit!\00")
(data (i32.const 896) "in claim time cooldown\00")
(data (i32.const 928) "active\00")
(data (i32.const 944) "claim profit sharing reward\00")
(data (i32.const 976) "cannot pass end iterator to modify\00")
(data (i32.const 1024) "cannot create objects in table of another contract\00")
(data (i32.const 1088) "write\00")
(data (i32.const 1104) "object passed to modify is not in multi_index\00")
(data (i32.const 1152) "cannot modify objects in table of another contract\00")
(data (i32.const 1216) "attempt to add asset with different symbol\00")
(data (i32.const 1264) "addition underflow\00")
(data (i32.const 1296) "addition overflow\00")
(data (i32.const 1328) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1392) "fairubetubet\00")
(data (i32.const 1408) "attempt to subtract asset with different symbol\00")
(data (i32.const 1456) "subtraction underflow\00")
(data (i32.const 1488) "subtraction overflow\00")
(data (i32.const 1520) "check fail,you are not an game user,play quickly!\00")
(data (i32.const 1584) "check fail,please wait for next day!\00")
(data (i32.const 1632) "new day,please get reward afer play!\00")
(data (i32.const 1680) "check in reward!\00")
(data (i32.const 1712) "get\00")
(data (i32.const 1728) "Invalid token transfer\00")
(data (i32.const 1760) "Quantity must be positive\00")
(data (i32.const 1792) "quantity must be more than single card!\00")
(data (i32.const 1840) "quantity must be multiple of single card!\00")
(data (i32.const 1888) "quantity must be positive!\00")
(data (i32.const 1920) "quantity of cards must be less than 6!\00")
(data (i32.const 1968) "please wait a moment\00")
(data (i32.const 2000) "ubetubetdev1\00")
(data (i32.const 2016) "UBET token air drop!\00")
(data (i32.const 2048) "ref UBET token air drop!\00")
(data (i32.const 2080) "+\1c\00\00\00\00\00\00-\1c\00\00\00\00\00\003\1c\00\00\00\00\00\00=\1c\00\00\00\00\00\00E\1c\00\00\00\00\00\00K\1c\00\00\00\00\00\00O\1c\00\00\00\00\00\00U\1c\00\00\00\00\00\00s\1c\00\00\00\00\00\00\81\1c\00\00\00\00\00\00\8b\1c\00\00\00\00\00\00\8d\1c\00\00\00\00\00\00\99\1c\00\00\00\00\00\00\a3\1c\00\00\00\00\00\00\a5\1c\00\00\00\00\00\00\b5\1c\00\00\00\00\00\00\b7\1c\00\00\00\00\00\00\c9\1c\00\00\00\00\00\00\e1\1c\00\00\00\00\00\00\f3\1c\00\00\00\00\00\00\f9\1c\00\00\00\00\00\00\t\1d\00\00\00\00\00\00\1b\1d\00\00\00\00\00\00!\1d\00\00\00\00\00\00#\1d\00\00\00\00\00\005\1d\00\00\00\00\00\009\1d\00\00\00\00\00\00?\1d\00\00\00\00\00\00A\1d\00\00\00\00\00\00K\1d\00\00\00\00\00\00S\1d\00\00\00\00\00\00]\1d\00\00\00\00\00\00c\1d\00\00\00\00\00\00i\1d\00\00\00\00\00\00q\1d\00\00\00\00\00\00u\1d\00\00\00\00\00\00{\1d\00\00\00\00\00\00}\1d\00\00\00\00\00\00\87\1d\00\00\00\00\00\00\89\1d\00\00\00\00\00\00\95\1d\00\00\00\00\00\00\99\1d\00\00\00\00\00\00\9f\1d\00\00\00\00\00\00\a5\1d\00\00\00\00\00\00\a7\1d\00\00\00\00\00\00\b3\1d\00\00\00\00\00\00\b7\1d\00\00\00\00\00\00\c5\1d\00\00\00\00\00\00\d7\1d\00\00\00\00\00\00\db\1d\00\00\00\00\00\00\e1\1d\00\00\00\00\00\00\f5\1d\00\00\00\00\00\00\f9\1d\00\00\00\00\00\00\01\1e\00\00\00\00\00\00\07\1e\00\00\00\00\00\00\0b\1e\00\00\00\00\00\00\13\1e\00\00\00\00\00\00\17\1e\00\00\00\00\00\00%\1e\00\00\00\00\00\00+\1e\00\00\00\00\00\00/\1e\00\00\00\00\00\00=\1e\00\00\00\00\00\00I\1e\00\00\00\00\00\00M\1e\00\00\00\00\00\00O\1e\00\00\00\00\00\00m\1e\00\00\00\00\00\00q\1e\00\00\00\00\00\00\89\1e\00\00\00\00\00\00\8f\1e\00\00\00\00\00\00\95\1e\00\00\00\00\00\00\a1\1e\00\00\00\00\00\00\ad\1e\00\00\00\00\00\00\bb\1e\00\00\00\00\00\00\c1\1e\00\00\00\00\00\00\c5\1e\00\00\00\00\00\00\c7\1e\00\00\00\00\00\00\cb\1e\00\00\00\00\00\00\dd\1e\00\00\00\00\00\00\e3\1e\00\00\00\00\00\00\ef\1e\00\00\00\00\00\00\f7\1e\00\00\00\00\00\00\fd\1e\00\00\00\00\00\00\01\1f\00\00\00\00\00\00\0d\1f\00\00\00\00\00\00\0f\1f\00\00\00\00\00\00\1b\1f\00\00\00\00\00\009\1f\00\00\00\00\00\00I\1f\00\00\00\00\00\00K\1f\00\00\00\00\00\00Q\1f\00\00\00\00\00\00g\1f\00\00\00\00\00\00u\1f\00\00\00\00\00\00{\1f\00\00\00\00\00\00\85\1f\00\00\00\00\00\00\91\1f\00\00\00\00\00\00\97\1f\00\00\00\00\00\00\99\1f\00\00\00\00\00\00\9d\1f\00\00\00\00\00\00\a5\1f\00\00\00\00\00\00\af\1f\00\00\00\00\00\00")
(data (i32.const 2880) "shit happens again!\00")
(data (i32.const 2912) "shit happens again\00")
(data (i32.const 2944) "top 1,lucky reward!\00")
(data (i32.const 2976) "top 2,lucky reward!\00")
(data (i32.const 3008) "top 3,lucky reward!\00")
(data (i32.const 3040) "ubetubetfee1\00")
(data (i32.const 3056) "reward fee!\00")
(data (i32.const 3072) "next primary key in table is at autoincrement limit\00")
(data (i32.const 3136) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 3200) "cannot decrement iterator at beginning of table\00")
(data (i32.const 3248) "good lucky,air drop UBET token,enjoy!\00")
(data (i32.const 11696) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$21 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $116))
(export "free" (func $119))
(export "llabs" (func $126))
(export "memcmp" (func $127))
(export "strlen" (func $128))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $129 $9 $13 $7 $11)



void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	$4 = *($1)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1328])
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $5, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3) + [88]))
	$4 = *($1)
	CALL eosio_assert([1], [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = ($2 + [160])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($2 + [144])
	$4 = CALL db_lowerbound_i64(*($3), *(($2 + [152])), (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $29($3, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $3
	$6 = *(*(CALL $96(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [160])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [3072])
	*($1) = *($5)
	$5 = *(*($0 + [4]) + [4])
	*($1 + [8]) = *($5 + [96])
	*(($1 + [16])) = *(($5 + [104]))
	*($1 + [24]) = *(*(*($0 + [4]) + [4]) + [64])
	$5 = *($0 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$0 = *($0 + [12])
	*($1 + [48]) = *($0)
	*(($1 + [56])) = *(($0 + [8]))
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [72]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($2 + [48]))
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [84]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4373710607929573376)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $29(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$4 = *($1)
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	$4 = CALL $120([96])
	$6 = CALL $60($4)
	*($4 + [80]) = $1
	CALL $94($3, $6)
	*($8 + [104]) = (($8 + [16]) + [80])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $95(($8 + [96]), $6)
	$5 = *($4)
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)-4373710607929573376, $2, $5, ($8 + [16]), [80])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [84])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [96]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $62(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $121($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = (int_64)0
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)1)
	$4 = *($1)
	$3 = *($3)
	*($1 + [80]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($3 + [40]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $120(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $121($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$3 = CALL current_time()
	*($0 + [96]) = (int_64)0
	*(($4 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [72]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [112]) = $1
	$5 = *($2 + [4])
	*($0) = (int_64)0
	*(($0 + [8])) = (int_64)1
	*(($0 + [16])) = (int_64)0
	*($0 + [88]) = (int_64)0
	$4 = *($2)
	$5 = *($5)
	$3 = CALL current_time()
	*($0 + [56]) = *($5 + [8])
	*($0 + [80]) = ((int_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($5 + [40]))
	*($6 + [120]) = ($6 + [112])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $46(($6 + [112]), $0)
	$3 = *($0)
	*($0 + [116]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $3, $6, [112])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [128])
	return $0
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $121 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11788])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([64])
	CALL $39($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $40(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $120($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $120([32])
	$6 = CALL $44($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$3 = CALL current_time()
	*($0 + [96]) = (int_64)0
	*(($4 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [72]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [112]) = $1
	CALL $49(*($2 + [4]), $0)
	*($0 + [116]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [640])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $124 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [608])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $65(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $66(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $121(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [192])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$5 = [0]
	*(($14 + [168])) = [0]
	*($14 + [144]) = $1
	*($14 + [152]) = (int_64)-1
	$10 = *($0)
	*($14 + [136]) = $10
	*($14 + [160]) = (int_64)0
	$2 = [0]
	$8 = CALL db_lowerbound_i64($10, $1, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $30(($14 + [136]), $8)
	
.LABEL $label$1
	$3 = ($0 + [104])
	$8 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $34($3, $8)
	
.LABEL $label$2
	$6 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($6, [1520])
	CALL eosio_assert(((int_64)((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) > (int_64)*($2 + [96])), [1584])
	CALL eosio_assert(((int_64)*($2 + [64]) > (int_64)*($2 + [96])), [1632])
	*($14 + [128]) = (int_64)361939227908
	*($14 + [120]) = (int_64)10000
	CALL eosio_assert([1], [544])
	$10 = (int_64)1413825109
	$8 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [608])
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [928]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$13 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	*($14 + [72]) = $11
	*($14 + [64]) = $13
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [1392]
	$11 = (int_64)0
	
.LOOP $label$14:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$15 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$14 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [128]
	$13 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$23 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$4 = ($4 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$8 = CALL strlen([1680])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($14) = ($8 << [1])
	$4 = ($14 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($8 + [16]) & [-16])
	$4 = CALL $120($7)
	*($14) = ($7 | [1])
	*($14 + [8]) = $4
	*($14 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($4, [1680], $8)
	
.LABEL $label$25
	*(($4 + $8)) = [0]
	*(($14 + [36])) = *($14 + [124])
	*($14 + [24]) = $1
	*(($14 + [44])) = *(($14 + [132]))
	*(($14 + [40])) = *((($14 + [120]) + [8]))
	*($14 + [16]) = *($0)
	*($14 + [32]) = *($14 + [120])
	$8 = ($14 + [8])
	*(($14 + [56])) = *($8)
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $32(($14 + [80]), ($14 + [64]), $11, $13, ($14 + [16]))
	CALL $33(($14 + [176]), $8)
	$4 = *($14 + [176])
	CALL send_inline($4, (*($14 + [180]) - $4))
	$4 = *($14 + [176])
	if ( ($4 == 0) ){ goto $label$28 }
	*($14 + [180]) = $4
	CALL $121($4)
	
.LABEL $label$28
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($8 + [32])) = $4
	CALL $121($4)
	
.LABEL $label$29
	$4 = *($8 + [16])
	if ( ($4 == 0) ){ goto $label$30 }
	*(($8 + [20])) = $4
	CALL $121($4)
	
.LABEL $label$30
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$31 }
	CALL $121(*(($14 + [56])))
	
.LABEL $label$31
	if ( ((*($14) & [1]) == 0) ){ goto $label$32 }
	CALL $121(*(($14 + [8])))
	
.LABEL $label$32
	$10 = *($0)
	*($14 + [20]) = $0
	*($14 + [16]) = ($14 + [120])
	CALL eosio_assert($6, [976])
	CALL $63(($14 + [136]), $2, $10, ($14 + [16]))
	*($14 + [16]) = ($14 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [976])
	CALL $64($3, $5, (int_64)0, ($14 + [16]))
	$0 = *($14 + [160])
	if ( ($0 == 0) ){ goto $label$33 }
	$2 = ($14 + [164])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$35 }
	
.LOOP $label$36:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$37 }
	CALL $121($4)
	
.LABEL $label$37
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$36 }
	$8 = *(($14 + [160]))
	goto $label$34 
	
.LABEL $label$35
	$8 = $0
	
.LABEL $label$34
	*($2) = $0
	CALL $121($8)
	
.LABEL $label$33
	*([0] + [4]) = ($14 + [192])
	return (unreachable)
	
.LABEL $label$24
	CALL $122($14)
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($0 + [8]) = (int_64)100000000
	*($0) = $1
	*($0 + [16]) = (int_64)5
	*($0 + [24]) = (int_64)10
	*($0 + [32]) = (int_64)432000
	*($0 + [40]) = (int_64)604800
	*($0 + [48]) = (int_64)86400
	*($0 + [56]) = (int_64)86400
	*($0 + [64]) = (int_64)100
	*($0 + [72]) = (int_64)10000
	*($0 + [80]) = (int_64)100000
	*($0 + [88]) = (int_64)3
	*($0 + [96]) = (int_64)101
	*($0 + [104]) = $1
	*(($0 + [112])) = $1
	*(($0 + [120])) = (int_64)-1
	*(($0 + [128])) = [0]
	*(($0 + [132])) = [0]
	*(($0 + [136])) = [0]
	*($0 + [144]) = $1
	*(($0 + [152])) = $1
	*(($0 + [160])) = (int_64)-1
	*(($0 + [168])) = [0]
	*(($0 + [172])) = [0]
	*(($0 + [176])) = [0]
	*($0 + [184]) = $1
	*(($0 + [192])) = $1
	*(($0 + [200])) = (int_64)-1
	*(($0 + [208])) = [0]
	*(($0 + [212])) = [0]
	*(($0 + [216])) = [0]
	*($0 + [224]) = $1
	*(($0 + [232])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = [0]
	*(($0 + [252])) = [0]
	*(($0 + [256])) = [0]
	$7 = ($0 + [104])
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	*($11 + [60]) = CALL $34($7, $5)
	*($11 + [56]) = $7
	$7 = (($11 + [56]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($11 + [60]) = [0]
	*($11 + [56]) = $7
	$1 = *($0)
	*($11) = $0
	CALL $108(($11 + [16]), $7, $1, $11)
	*($11 + [56]) = *($11 + [16])
	$7 = (($11 + [56]) | [4])
	
.LABEL $label$1
	$1 = *(*($7) + [8])
	$2 = *(($0 + [248]))
	$6 = *(($0 + [252]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$3 }
	$7 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$7 = ($0 + [224])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$7 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [152]) == (int_32)$7), [272])
	if ( $5 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $16($7, $5) + [152]) == (int_32)$7), [272])
	goto $label$5 
	
.LABEL $label$6
	$1 = *($0)
	*($11) = ($11 + [56])
	CALL $109(($11 + [16]), $7, $1, $11)
	
.LABEL $label$5
	$6 = ($0 + [184])
	$4 = *($0)
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [2000]
	$9 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$9 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	*(($11 + [48])) = [0]
	*($11 + [32]) = (int_64)-1
	*($11 + [24]) = $9
	*($11 + [16]) = $4
	*($11 + [40]) = (int_64)0
	$7 = CALL db_lowerbound_i64($4, $9, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	CALL $30(($11 + [16]), $7)
	$6 = *($11 + [40])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = *($0)
	*($11 + [8]) = $0
	CALL $110($11, $6, $1, ($11 + [8]))
	CALL $111($11, ($11 + [16]), *($0), ($11 + [8]))
	$6 = *($11 + [40])
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$3 = ($11 + [44])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL $121($5)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$17 }
	$7 = *(($11 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$7 = $6
	
.LABEL $label$15
	*($3) = $6
	CALL $121($7)
	
.LABEL $label$12
	*([0] + [4]) = ($11 + [64])
	return $0
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$1 }
	$5 = *($3 + [8])
	$9 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [1728])
	$3 = ((int_64)$8 > (int_64)0)
	CALL eosio_assert($3, [1760])
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$1 }
	$6 = *($0 + [72])
	$2 = ((uint_64)$8 / (uint_64)$6)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [1792])
	CALL eosio_assert((int_64)(((uint_64)$8 % (uint_64)$6) == 0), [1840])
	CALL eosio_assert($3, [1888])
	CALL eosio_assert((uint_64)($2 <= *($0 + [64])), [1920])
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$1 }
	$9 = [0]
	$3 = [1]
	$8 = (int_64)1
	
.LOOP $label$7:
	*(($7 = (($10 + [32]) + [8]))) = $5
	*($10 + [32]) = $6
	CALL $125(($10 + [16]), $4)
	*(($10 + [8])) = *($7)
	*($10) = *($10 + [32])
	$9 = ($9 | ((int_64)$8 == (int_64)$2))
	CALL $69($0, $1, $10, ($10 + [16]), $3, ((int_64)$2 > (int_64)1), ($9 & [1]))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $121(*((($10 + [16]) + [8])))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 <= (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [336])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [72]), $0)
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)4851652232166244352) ){ goto $label$47 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $10($4, ($9 + [16]))
	goto $label$47 
	
.LABEL $label$50
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)6182744256758677504) ){ goto $label$47 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $14($4, ($9 + [32]))
	goto $label$47 
	
.LABEL $label$49
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $8($4, ($9 + [8]))
	goto $label$47 
	
.LABEL $label$48
	*($9 + [52]) = [0]
	*($9 + [48]) = [4]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $12($4, ($9 + [24]))
	
.LABEL $label$47
	CALL $15($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [336])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [252])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $121($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [248]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $121($4)
	
.LABEL $label$1
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [212])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $121($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [208]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $121($4)
	
.LABEL $label$6
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [172])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $121($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [168]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $121($4)
	
.LABEL $label$11
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $121($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [128]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $121($4)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $120([168])
	$4 = CALL $26($6)
	*($6 + [152]) = $0
	CALL $27(($8 + [32]), $4)
	*($6 + [156]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [156])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $28(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $121($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $121($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [156]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [640])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [272])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$3 = *(($0 + [168]))
	$6 = *(($0 + [172]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$7 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$6 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [144])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$7), [272])
	*($12 + [252]) = $5
	*($12 + [248]) = $7
	$7 = (($12 + [248]) | [4])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)-4373710607929573376, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $29($7, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$7), [272])
	*($12 + [252]) = $5
	*($12 + [248]) = $7
	$7 = (($12 + [248]) | [4])
	goto $label$3 
	
.LABEL $label$5
	$5 = [0]
	*($12 + [252]) = [0]
	*($12 + [248]) = $7
	$7 = (($12 + [248]) | [4])
	
.LABEL $label$3
	$6 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [656])
	*((($12 + [208]) + [32])) = [0]
	*($12 + [224]) = (int_64)-1
	$2 = *($0)
	*($12 + [208]) = $2
	*($12 + [216]) = $1
	*($12 + [232]) = (int_64)0
	$5 = [0]
	$4 = CALL db_lowerbound_i64($2, $1, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $30(($12 + [208]), $4)
	
.LABEL $label$6
	*($12 + [204]) = $5
	*($12 + [200]) = ($12 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [704])
	*((($12 + [160]) + [32])) = [0]
	*($12 + [176]) = (int_64)-1
	*($12 + [184]) = (int_64)0
	$2 = *($0)
	*($12 + [160]) = $2
	*($12 + [168]) = $1
	$5 = CALL db_find_i64($2, $1, (int_64)4921565091335241728, *(*($7)))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $31(($12 + [160]), $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($12 + [160])), [272])
	
.LABEL $label$7
	CALL eosio_assert(($6 == 0), [752])
	CALL eosio_assert((uint_64)(((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= *(*($7) + [72])), [816])
	CALL eosio_assert(((int_64)((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) > (int_64)*(*($12 + [204]) + [80])), [896])
	$7 = *($7)
	*(($12 + [156])) = *(($7 + [60]))
	*(($12 + [152])) = *(($7 + [56]))
	*($12 + [144]) = *($7 + [48])
	*($12 + [148]) = *(($7 + [52]))
	CALL $36(($12 + [128]), $0, $1, (int_64)361939227908)
	$2 = *($12 + [128])
	*($12 + [124]) = ((int_64)$2 == (int_64)*(*($12 + [204]) + [16]))
	*($12 + [144]) = ((int_64)((int_64)$2 * (int_64)*($12 + [144])) / (int_64)10000)
	$2 = *($0)
	$7 = *($12 + [204])
	*($12 + [20]) = $0
	*($12 + [16]) = ($12 + [144])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [976])
	CALL $37(($12 + [208]), $7, $2, ($12 + [16]))
	$2 = *($0)
	*($12 + [20]) = ($12 + [200])
	*($12 + [16]) = ($12 + [248])
	*($12 + [24]) = ($12 + [144])
	*($12 + [28]) = ($12 + [124])
	CALL $38(($12 + [80]), ($12 + [160]), $2, ($12 + [16]))
	$2 = (int_64)0
	if ( ((int_64)*($12 + [144]) <= (int_64)0) ){ goto $label$9 }
	$11 = *($0)
	$8 = (int_64)59
	$7 = [928]
	$9 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$15 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$5 = ($5 + [165])
	goto $label$13 
	
.LABEL $label$15
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$11
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$10 }
	*($12 + [72]) = $9
	*($12 + [64]) = $11
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$21 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$5 = ($5 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$16 }
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$11 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$27 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$5 = ($5 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$23
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$22 }
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	$7 = CALL strlen([944])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$30 }
	*($12) = ($7 << [1])
	$5 = ($12 | [1])
	if ( $7 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $120($6)
	*($12) = ($6 | [1])
	*($12 + [8]) = $5
	*($12 + [4]) = $7
	
.LABEL $label$29
	CALL memcpy($5, [944], $7)
	
.LABEL $label$28
	*(($5 + $7)) = [0]
	*(($12 + [36])) = *($12 + [148])
	*($12 + [24]) = $1
	*(($12 + [44])) = *(($12 + [156]))
	*(($12 + [40])) = *((($12 + [144]) + [8]))
	*($12 + [16]) = *($0)
	*($12 + [32]) = *($12 + [144])
	$7 = ($12 + [8])
	*(($12 + [56])) = *($7)
	*($12 + [48]) = *($12)
	*($12) = [0]
	*($12 + [4]) = [0]
	*($7) = [0]
	$7 = CALL $32(($12 + [80]), ($12 + [64]), $9, $11, ($12 + [16]))
	CALL $33(($12 + [256]), $7)
	$5 = *($12 + [256])
	CALL send_inline($5, (*($12 + [260]) - $5))
	$5 = *($12 + [256])
	if ( ($5 == 0) ){ goto $label$31 }
	*($12 + [260]) = $5
	CALL $121($5)
	
.LABEL $label$31
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$32 }
	*(($7 + [32])) = $5
	CALL $121($5)
	
.LABEL $label$32
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$33 }
	*(($7 + [20])) = $5
	CALL $121($5)
	
.LABEL $label$33
	if ( ((*(($12 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $121(*(($12 + [56])))
	
.LABEL $label$34
	if ( ((*($12) & [1]) == 0) ){ goto $label$35 }
	CALL $121(*(($12 + [8])))
	
.LABEL $label$35
	$5 = ($0 + [104])
	$7 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$36 }
	$7 = CALL $34($5, $0)
	
.LABEL $label$36
	*($12 + [16]) = ($12 + [144])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [976])
	CALL $35($5, $7, (int_64)0, ($12 + [16]))
	
.LABEL $label$9
	$0 = *($12 + [184])
	if ( ($0 == 0) ){ goto $label$37 }
	$6 = ($12 + [188])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	CALL $121($5)
	
.LABEL $label$41
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($12 + [184]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $0
	
.LABEL $label$38
	*($6) = $0
	CALL $121($7)
	
.LABEL $label$37
	$0 = *($12 + [232])
	if ( ($0 == 0) ){ goto $label$42 }
	$6 = ($12 + [236])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$44 }
	
.LOOP $label$45:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$46 }
	CALL $121($5)
	
.LABEL $label$46
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$45 }
	$7 = *(($12 + [232]))
	goto $label$43 
	
.LABEL $label$44
	$7 = $0
	
.LABEL $label$43
	*($6) = $0
	CALL $121($7)
	
.LABEL $label$42
	*([0] + [4]) = ($12 + [272])
	return (unreachable)
	
.LABEL $label$8
	CALL $122($12)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [640])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [640])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [96])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$4 = CALL db_lowerbound_i64(*($0 + [224]), *(($0 + [232])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$15 = ($0 + [224])
	$1 = CALL $16($15, $4)
	CALL eosio_assert([1], [192])
	CALL eosio_assert([1], [240])
	$4 = CALL db_next_i64(*($1 + [156]), ($16 + [48]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $16($15, $4)
	
.LABEL $label$4
	CALL $17($15, $1)
	*($16 + [64]) = (int_64)-1
	*($16 + [72]) = [0]
	*($16 + [48]) = *($0)
	*($16 + [56]) = *($1)
	*(($5 = (($16 + [48]) + [28]))) = [0]
	*((($16 + [48]) + [32])) = [0]
	if ( (int_64)(*($0 + [64]) == 0) ){ goto $label$2 }
	$6 = (($16 + [48]) + [8])
	$8 = (($16 + [8]) + [24])
	$9 = ($16 + [24])
	$10 = (($16 + [8]) + [32])
	$12 = ($0 + [64])
	$13 = [0]
	$3 = [0]
	$14 = (int_64)1
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$5 }
	$17 = [2]
	goto $label$1 
	
.LABEL $label$5
	$17 = [19]
	goto $label$1 
	
.LABEL $label$3
	$17 = [28]
	goto $label$1 
	
.LABEL $label$2
	$17 = [28]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$54 
	
.LABEL $label$60
	$15 = *($8)
	goto $label$13 
	
.LABEL $label$59
	$15 = $3
	$17 = [16]
	goto $label$6 
	
.LABEL $label$58
	*($2) = $3
	CALL $121($15)
	$17 = [17]
	goto $label$6 
	
.LABEL $label$57
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((uint_64)$14 > (uint_64)*($12)) ){ goto $label$12 }
	$17 = [18]
	goto $label$6 
	
.LABEL $label$56
	$13 = *((($16 + [48]) + [24]))
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$25 }
	$17 = [19]
	goto $label$6 
	
.LABEL $label$55
	$15 = ($3 + [-24])
	$2 = ([0] - $13)
	$17 = [0]
	goto $label$6 
	
.LABEL $label$54
	if ( ((int_64)*(*($15)) == (int_64)$14) ){ goto $label$27 }
	$17 = [1]
	goto $label$6 
	
.LABEL $label$53
	$3 = $15
	$4 = ($15 + [-24])
	$15 = $4
	if ( ((int_32)($4 + $2) != (int_32)[-24]) ){ goto $label$26 }
	$17 = [2]
	goto $label$6 
	
.LABEL $label$52
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$24 }
	$17 = [3]
	goto $label$6 
	
.LABEL $label$51
	$15 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [48])), [272])
	goto $label$23 
	
.LABEL $label$50
	$15 = [0]
	$4 = CALL db_find_i64(*($16 + [48]), *($6), (int_64)-4812882902415048704, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$22 }
	$17 = [32]
	goto $label$6 
	
.LABEL $label$49
	$15 = CALL $18(($16 + [48]), $4)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [48])), [272])
	$17 = [4]
	goto $label$6 
	
.LABEL $label$48
	$7 = *($15 + [8])
	*($8) = (int_64)0
	*((($16 + [8]) + [8])) = $7
	*($9) = (int_64)-1
	*($10) = [0]
	$11 = *($0)
	*($16 + [8]) = $11
	$4 = CALL db_find_i64($11, $7, (int_64)-3020378119786725376, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$21 }
	$17 = [5]
	goto $label$6 
	
.LABEL $label$47
	$4 = CALL $19(($16 + [8]), $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($16 + [8])), [272])
	CALL eosio_assert([1], [192])
	CALL eosio_assert([1], [240])
	$3 = CALL db_next_i64(*($4 + [52]), ($16 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$17 = [6]
	goto $label$6 
	
.LABEL $label$46
	CALL $19(($16 + [8]), $3)
	$17 = [7]
	goto $label$6 
	
.LABEL $label$45
	CALL $20(($16 + [8]), $4)
	$17 = [8]
	goto $label$6 
	
.LABEL $label$44
	$4 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($4, [192])
	CALL eosio_assert($4, [240])
	$4 = CALL db_next_i64(*($15 + [28]), ($16 + [88]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$17 = [9]
	goto $label$6 
	
.LABEL $label$43
	CALL $18(($16 + [48]), $4)
	$17 = [10]
	goto $label$6 
	
.LABEL $label$42
	CALL $21(($16 + [48]), $15)
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$18 }
	$17 = [11]
	goto $label$6 
	
.LABEL $label$41
	$2 = (($16 + [8]) + [28])
	$15 = *($2)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$15 }
	$17 = [12]
	goto $label$6 
	
.LABEL $label$40
	$15 = ($15 + [-24])
	$4 = *($15)
	*($15) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	$17 = [13]
	goto $label$6 
	
.LABEL $label$39
	CALL $121($4)
	$17 = [14]
	goto $label$6 
	
.LABEL $label$38
	if ( ((int_32)$3 != (int_32)$15) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$37
	$3 = *($16 + [72])
	if ( ($3 == 0) ){ goto $label$11 }
	$17 = [21]
	goto $label$6 
	
.LABEL $label$36
	$2 = ($16 + [76])
	$15 = *($2)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$10 }
	$17 = [22]
	goto $label$6 
	
.LABEL $label$35
	$17 = [23]
	goto $label$6 
	
.LABEL $label$34
	$15 = ($15 + [-24])
	$4 = *($15)
	*($15) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$17 = [24]
	goto $label$6 
	
.LABEL $label$33
	CALL $121($4)
	$17 = [25]
	goto $label$6 
	
.LABEL $label$32
	if ( ((int_32)$3 != (int_32)$15) ){ goto $label$9 }
	$17 = [26]
	goto $label$6 
	
.LABEL $label$31
	$15 = *(($16 + [72]))
	goto $label$7 
	
.LABEL $label$30
	$15 = $3
	$17 = [27]
	goto $label$6 
	
.LABEL $label$29
	*($2) = $3
	CALL $121($15)
	$17 = [28]
	goto $label$6 
	
.LABEL $label$28
	*([0] + [4]) = ($16 + [96])
	return 
	
.LABEL $label$27
	$17 = [2]
	goto $label$6 
	
.LABEL $label$26
	$17 = [0]
	goto $label$6 
	
.LABEL $label$25
	$17 = [2]
	goto $label$6 
	
.LABEL $label$24
	$17 = [31]
	goto $label$6 
	
.LABEL $label$23
	$17 = [4]
	goto $label$6 
	
.LABEL $label$22
	$17 = [4]
	goto $label$6 
	
.LABEL $label$21
	$17 = [8]
	goto $label$6 
	
.LABEL $label$20
	$17 = [7]
	goto $label$6 
	
.LABEL $label$19
	$17 = [10]
	goto $label$6 
	
.LABEL $label$18
	$17 = [17]
	goto $label$6 
	
.LABEL $label$17
	$17 = [15]
	goto $label$6 
	
.LABEL $label$16
	$17 = [12]
	goto $label$6 
	
.LABEL $label$15
	$17 = [30]
	goto $label$6 
	
.LABEL $label$14
	$17 = [14]
	goto $label$6 
	
.LABEL $label$13
	$17 = [16]
	goto $label$6 
	
.LABEL $label$12
	$17 = [20]
	goto $label$6 
	
.LABEL $label$11
	$17 = [28]
	goto $label$6 
	
.LABEL $label$10
	$17 = [29]
	goto $label$6 
	
.LABEL $label$9
	$17 = [23]
	goto $label$6 
	
.LABEL $label$8
	$17 = [25]
	goto $label$6 
	
.LABEL $label$7
	$17 = [27]
	goto $label$6 
	$17
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $120([32])) + [16]) = $1
	CALL $101(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	$6 = CALL $120([40])
	$5 = CALL current_time()
	*($6 + [24]) = $0
	*($6 + [16]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((uint_32)$4 > (uint_32)[3]), [640])
	CALL memcpy($6, $7, [4])
	CALL eosio_assert(((uint_32)($4 + [-4]) > (uint_32)[7]), [640])
	CALL memcpy(($6 + [8]), ($7 + [4]), [8])
	CALL eosio_assert(((uint_32)($4 + [-12]) > (uint_32)[7]), [640])
	CALL memcpy(($6 + [16]), ($7 + [12]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $120([64])
	$6 = CALL $22($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [52])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $120($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $121($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1088])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1088])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1088])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1088])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1088])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $54(*($1), ($0 + [32]))
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1088])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1088])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $120([128])
	$6 = CALL $47($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [116])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $48(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $57 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$1 = CALL current_time()
	*($0 + [104]) = (int_64)0
	*(($2 = ($0 + [112]))) = (int_64)1397703940
	*($0 + [64]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [128]))) = (int_64)1397703940
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [144]))) = (int_64)1397703940
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [160]))) = (int_64)1397703940
	*($0 + [152]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [176]))) = (int_64)1397703940
	*($0 + [168]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [608])
	*($0 + [184]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $117([3288], $0)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $118($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11696])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$0 = *($0)
	$4 = ($0 + [200])
	$6 = *($4)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($0 + [184])
	$3 = CALL db_lowerbound_i64(*($2), *(($0 + [192])), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $103($2, $3)
	*($9 + [12]) = [0]
	*($9 + [8]) = $2
	$6 = *(*(CALL $104(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [200])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [3072])
	*($1) = *($4)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [2000]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$4 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$3 }
	*($1 + [8]) = $7
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [104]))), [1408])
	$5 = (int_64)
	*($1 + [96]) = $5(*($1 + [96]) - *($3)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1456])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [1488])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [120]) = ($6 + [112])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $46(($6 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $6, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2000]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($1 + [8]) = $7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2000]
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*($1) = $7
	$3 = $10
	$4 = ($3 + [-192])
	*([0] + [4]) = $4
	*($9 + [4]) = $4
	*($9) = $4
	*($9 + [8]) = $3
	CALL $42($9, $1)
	$6 = *($1)
	*($1 + [196]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020376800539705344, *(*($0 + [8])), $6, $4, [192])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2)
	CALL $114(*($2 + [4]), $0)
	CALL eosio_assert([1], [1088])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1088])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([32])
	CALL $113($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([208])
	CALL $57($3)
	*($3 + [192]) = $1
	CALL $112(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [196])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11782]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11784])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11782]) = [1]
	$7 = ($7 << [16])
	*([0] + [11784]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11784])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11784]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11782]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11782]) = [1]
	$3 = ($3 << [16])
	*([0] + [11784]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11784])
	
.LABEL $label$8
	*([0] + [11784]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11672])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11480]
	$1 = (((int_32)$2 * (int_32)[12]) + [11480])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $120([96])
	$4 = CALL $60($6)
	*($6 + [80]) = $0
	CALL $61(($8 + [32]), $4)
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$3 = CALL current_time()
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($4 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [16]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [48]) = $1
	CALL $56(*($2 + [4]), $0)
	*($0 + [52]) = *(*($2 + [8]))
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	$2 = *($0)
	*($1) = *(*(*($4 + [4]) + [4]) + [16])
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [1088])
	CALL memcpy($5, $1, [4])
	CALL eosio_assert([1], [1088])
	CALL memcpy(($5 | [4]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1088])
	CALL memcpy(($5 | [12]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-4812882902415048704, *(*($0 + [8])), $3, $5, [20])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1) = *(*(*($4) + [4]) + [8])
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$4 = *($4 + [8])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [40]))), [1216])
	$3 = ((int_64)*($1 + [32]) + (int_64)*($4))
	*($1 + [32]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1296])
	*($5 + [56]) = ($5 + [48])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $105(($5 + [48]), $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020378119786725376, *(*($0 + [8])), $3, $5, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $121($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $121($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [336])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [384])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [448])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $121($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $121($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$3 = CALL current_time()
	*($0 + [32]) = (int_64)0
	*(($4 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [24]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [48]) = $1
	CALL $24(*($2 + [4]), $0)
	*($0 + [52]) = *(*($2 + [8]))
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$1 = CALL current_time()
	*($0 + [40]) = (int_64)0
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [24]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [96]))) = (int_64)1397703940
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [128]))) = (int_64)1397703940
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [608])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [192])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	$4 = CALL $120([168])
	$6 = CALL $26($4)
	*($4 + [152]) = $1
	*($4) = *(*(*($3) + [4]) + [8])
	*($8 + [184]) = (($8 + [16]) + [152])
	*($8 + [180]) = ($8 + [16])
	*($8 + [176]) = ($8 + [16])
	CALL $90(($8 + [176]), $6)
	$5 = *($4)
	*($4 + [156]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, $2, $5, ($8 + [16]), [152])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [176]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [156])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [176]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $28(($1 + [24]), ($8 + [176]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [176])
	*($8 + [176]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $121($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [192])
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [464])
	*([0] + [4]) = $17
	*($17 + [440]) = $1
	CALL require_auth($1)
	$7 = ($0 + [104])
	$16 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$16 = CALL $34($7, $10)
	
.LABEL $label$1
	*($17 + [432]) = $7
	*($17 + [436]) = $16
	*((($17 + [416]) + [8])) = *(($2 + [8]))
	*($17 + [416]) = *($2)
	$1 = *($16 + [8])
	$8 = *(($0 + [248]))
	$11 = *(($0 + [252]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$2 }
	$16 = ($11 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$3:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$2 }
	$11 = $16
	$10 = ($16 + [-24])
	$16 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$16 = ($0 + [224])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$5 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$16), [272])
	*($17 + [412]) = $10
	goto $label$4 
	
.LABEL $label$5
	$10 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$6 }
	$10 = CALL $16($16, $10)
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)$16), [272])
	*($17 + [412]) = $10
	goto $label$4 
	
.LABEL $label$6
	*($17 + [412]) = [0]
	
.LABEL $label$4
	*($17 + [408]) = $16
	$10 = *($17 + [412])
	*($17 + [128]) = ($17 + [416])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [976])
	CALL $70($16, $10, (int_64)0, ($17 + [128]))
	$1 = *($17 + [440])
	$14 = *($0)
	*($17 + [368]) = $14
	*($17 + [384]) = (int_64)-1
	*($17 + [392]) = [0]
	*($17 + [376]) = $1
	*((($17 + [368]) + [28])) = [0]
	*((($17 + [368]) + [32])) = [0]
	$16 = [0]
	$10 = CALL db_find_i64($14, $1, (int_64)-3020378119786725376, *(*($17 + [436]) + [8]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$16 = CALL $19(($17 + [368]), $10)
	CALL eosio_assert(((int_32)*($16 + [48]) == (int_32)($17 + [368])), [272])
	
.LABEL $label$7
	*($17 + [344]) = (int_64)-1
	$1 = *($0)
	*($17 + [328]) = $1
	*($17 + [336]) = *(*($17 + [436]) + [8])
	*($17 + [352]) = [0]
	*((($17 + [328]) + [28])) = [0]
	*((($17 + [328]) + [32])) = [0]
	*($17 + [132]) = ($17 + [408])
	*($17 + [128]) = ($17 + [440])
	CALL $71(($17 + [240]), ($17 + [328]), $1, ($17 + [128]))
	if ( ($16 == 0) ){ goto $label$9 }
	CALL eosio_assert((((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($16 + [24])) > (uint_64)*($0 + [16])) | $5), [1968])
	$1 = *($0)
	*($17 + [128]) = $2
	CALL eosio_assert([1], [976])
	CALL $73(($17 + [368]), $16, $1, ($17 + [128]))
	goto $label$8 
	
.LABEL $label$9
	$1 = *($0)
	*($17 + [136]) = $2
	*($17 + [132]) = ($17 + [440])
	*($17 + [128]) = ($17 + [432])
	CALL $72(($17 + [240]), ($17 + [368]), $1, ($17 + [128]))
	
.LABEL $label$8
	*($17 + [320]) = (int_64)361939227908
	$1 = *($2)
	*($17 + [312]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [544])
	$1 = (uint_64)*($17 + [320]) >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$10 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [608])
	$10 = [0]
	$16 = *($17 + [436])
	*($17 + [128]) = ($17 + [312])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [976])
	CALL $74($7, $16, (int_64)0, ($17 + [128]))
	$11 = (($17 + [312]) + [8])
	*(($16 = (($17 + [296]) + [8]))) = *($11)
	*($17 + [296]) = *($17 + [312])
	*(($9 = (($17 + [280]) + [8]))) = *($11)
	*($17 + [280]) = *($17 + [312])
	*($17 + [296]) = ((int_64)*($17 + [296]) / (int_64)10)
	CALL eosio_assert(((int_64)*($16) == (int_64)*($9)), [1408])
	$1 = (int_64)
	*($17 + [280]) = $1(*($17 + [280]) - *($17 + [296])))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1456])
	CALL eosio_assert(((int_64)*($17 + [280]) < (int_64)4611686018427387904), [1488])
	*($17 + [256]) = (int_64)-1
	*($17 + [264]) = [0]
	$1 = *($17 + [440])
	$14 = *($0)
	*($17 + [240]) = $14
	*($17 + [248]) = $1
	*((($17 + [240]) + [28])) = [0]
	*((($17 + [240]) + [32])) = [0]
	$16 = CALL db_lowerbound_i64($14, $1, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL $30(($17 + [240]), $16)
	CALL eosio_assert((((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($9 + [64])) > (uint_64)*($0 + [16])) | $5), [1968])
	$1 = *($0)
	*($17 + [132]) = $2
	*($17 + [128]) = ($17 + [280])
	CALL eosio_assert([1], [976])
	CALL $79(($17 + [240]), $9, $1, ($17 + [128]))
	*($17 + [152]) = [0]
	$1 = *($0)
	*($17 + [128]) = $1
	$14 = *($9 + [8])
	*($17 + [136]) = $14
	*($17 + [144]) = (int_64)-1
	*((($17 + [128]) + [28])) = [0]
	*((($17 + [128]) + [32])) = [0]
	$16 = CALL db_lowerbound_i64($1, $14, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$21 }
	$10 = CALL $30(($17 + [128]), $16)
	
.LABEL $label$21
	$1 = *($0)
	*($17 + [200]) = ($17 + [296])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [976])
	CALL $80(($17 + [128]), $10, $1, ($17 + [200]))
	$11 = *($17 + [152])
	if ( ($11 == 0) ){ goto $label$15 }
	$7 = ($17 + [156])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$19 }
	
.LOOP $label$22:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL $121($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$22 }
	$16 = *(($17 + [152]))
	goto $label$18 
	
.LABEL $label$20
	if ( (*($3) & [1]) ){ goto $label$25 }
	$16 = ($3 + [1])
	goto $label$24 
	
.LABEL $label$25
	$16 = *($3 + [8])
	
.LABEL $label$24
	$10 = [-1]
	
.LOOP $label$26:
	$11 = ($16 + $10)
	$9 = ($10 + [1])
	$10 = $9
	if ( *(($11 + [1])) ){ goto $label$26 }
	$15 = (CASTING uint_64)(uint_32 $9)
	$1 = (int_64)0
	$14 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$27:
	$12 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$15) ){ goto $label$28 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$10 = ($10 + [165])
	goto $label$29 
	
.LABEL $label$30
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$32 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$31 
	
.LABEL $label$32
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$31
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$27 }
	*($17 + [184]) = $13
	*(($17 + [160])) = [0]
	*($17 + [136]) = $13
	*($17 + [144]) = (int_64)-1
	$14 = *($0)
	*($17 + [128]) = $14
	$1 = (int_64)0
	*($17 + [152]) = (int_64)0
	$16 = CALL db_lowerbound_i64($14, $13, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$17 }
	$11 = CALL $30(($17 + [128]), $16)
	goto $label$16 
	
.LABEL $label$19
	$16 = $11
	
.LABEL $label$18
	*($7) = $11
	CALL $121($16)
	goto $label$15 
	
.LABEL $label$17
	$14 = (int_64)59
	$16 = [2000]
	$13 = (int_64)0
	
.LOOP $label$33:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$34 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$10 = ($10 + [165])
	goto $label$35 
	
.LABEL $label$36
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$34
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$33 }
	*($17 + [184]) = $13
	$11 = [0]
	
.LABEL $label$16
	$1 = *($0)
	*($17 + [200]) = $0
	*($17 + [204]) = ($17 + [440])
	CALL $75(($17 + [448]), ($0 + [184]), $1, ($17 + [200]))
	$1 = *($0)
	*($17 + [212]) = $2
	*($17 + [204]) = ($17 + [440])
	*($17 + [200]) = ($17 + [184])
	*($17 + [208]) = ($17 + [280])
	CALL $76(($17 + [448]), ($17 + [240]), $1, ($17 + [200]))
	$9 = *($17 + [452])
	$1 = (int_64)0
	$14 = (int_64)59
	$16 = [2000]
	$15 = *($17 + [184])
	$13 = (int_64)0
	
.LOOP $label$37:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$38 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$10 = ($10 + [165])
	goto $label$39 
	
.LABEL $label$40
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$38
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$37 }
	if ( ((int_64)$15 != (int_64)$13) ){ goto $label$45 }
	*(($17 + [232])) = [0]
	*($17 + [216]) = (int_64)-1
	$1 = *($0)
	*($17 + [200]) = $1
	*($17 + [208]) = $15
	*($17 + [224]) = (int_64)0
	$16 = [0]
	$10 = CALL db_lowerbound_i64($1, $15, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$46 }
	$16 = CALL $30(($17 + [200]), $10)
	
.LABEL $label$46
	$1 = *($0)
	*($17 + [448]) = ($17 + [296])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [976])
	CALL $77(($17 + [200]), $16, $1, ($17 + [448]))
	$11 = *($17 + [224])
	if ( ($11 == 0) ){ goto $label$42 }
	$7 = ($17 + [228])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$44 }
	
.LOOP $label$47:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$48 }
	CALL $121($10)
	
.LABEL $label$48
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$47 }
	$16 = *(($17 + [224]))
	goto $label$43 
	
.LABEL $label$45
	$1 = *($0)
	*($17 + [200]) = ($17 + [296])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [976])
	CALL $78(($17 + [128]), $11, $1, ($17 + [200]))
	$11 = *($17 + [152])
	if ( $11 ){ goto $label$41 }
	goto $label$15 
	
.LABEL $label$44
	$16 = $11
	
.LABEL $label$43
	*($7) = $11
	CALL $121($16)
	
.LABEL $label$42
	$11 = *($17 + [152])
	if ( ($11 == 0) ){ goto $label$15 }
	
.LABEL $label$41
	$7 = ($17 + [156])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$50 }
	
.LOOP $label$51:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$52 }
	CALL $121($10)
	
.LABEL $label$52
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$51 }
	$16 = *(($17 + [152]))
	goto $label$49 
	
.LABEL $label$50
	$16 = $11
	
.LABEL $label$49
	*($7) = $11
	CALL $121($16)
	
.LABEL $label$15
	if ( ((uint_64)*(*($17 + [436]) + [64]) >= (uint_64)((uint_64)((int_64)*($0 + [8]) * (int_64)200000) / (uint_64)(int_64)100)) ){ goto $label$55 }
	if ( ((int_32)$6 ^ (int_32)[1]) ){ goto $label$55 }
	$1 = (CASTING int_64)(int_32 $4)
	*($17 + [280]) = ((int_64)*($17 + [280]) * (int_64)$1)
	*($17 + [296]) = ((int_64)*($17 + [296]) * (int_64)$1)
	$15 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$16 = [928]
	$13 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$61 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$10 = ($10 + [165])
	goto $label$59 
	
.LABEL $label$61
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$57
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$56 }
	*($17 + [192]) = $13
	*($17 + [184]) = $15
	$1 = (int_64)0
	$14 = (int_64)59
	$16 = [1392]
	$13 = (int_64)0
	
.LOOP $label$62:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$63 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$10 = ($10 + [165])
	goto $label$64 
	
.LABEL $label$65
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$63
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$62 }
	$1 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$15 = (int_64)0
	
.LOOP $label$66:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$71 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$10 = ($10 + [165])
	goto $label$69 
	
.LABEL $label$71
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$68
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$67
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$66 }
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	$16 = CALL strlen([2016])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$54 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$74 }
	*($17 + [112]) = ($16 << [1])
	$10 = (($17 + [112]) | [1])
	if ( $16 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$11 = (($16 + [16]) & [-16])
	$10 = CALL $120($11)
	*($17 + [112]) = ($11 | [1])
	*($17 + [120]) = $10
	*($17 + [116]) = $16
	
.LABEL $label$73
	CALL memcpy($10, [2016], $16)
	
.LABEL $label$72
	*(($10 + $16)) = [0]
	*(($17 + [148])) = *($17 + [284])
	*($17 + [128]) = *($0)
	*($17 + [136]) = *($17 + [440])
	*(($17 + [156])) = *(($17 + [292]))
	*(($17 + [152])) = *((($17 + [280]) + [8]))
	*($17 + [144]) = *($17 + [280])
	$16 = (($17 + [112]) + [8])
	*(($17 + [168])) = *($16)
	*($17 + [160]) = *($17 + [112])
	*($17 + [112]) = [0]
	*($17 + [116]) = [0]
	*($16) = [0]
	$16 = CALL $32(($17 + [200]), ($17 + [184]), $13, $15, ($17 + [128]))
	CALL $33(($17 + [448]), $16)
	$10 = *($17 + [448])
	CALL send_inline($10, (*($17 + [452]) - $10))
	$10 = *($17 + [448])
	if ( ($10 == 0) ){ goto $label$75 }
	*($17 + [452]) = $10
	CALL $121($10)
	
.LABEL $label$75
	$10 = *($16 + [28])
	if ( ($10 == 0) ){ goto $label$76 }
	*(($16 + [32])) = $10
	CALL $121($10)
	
.LABEL $label$76
	$10 = *($16 + [16])
	if ( ($10 == 0) ){ goto $label$77 }
	*(($16 + [20])) = $10
	CALL $121($10)
	
.LABEL $label$77
	if ( ((*(($17 + [160])) & [1]) == 0) ){ goto $label$78 }
	CALL $121(*(($17 + [168])))
	
.LABEL $label$78
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$79 }
	CALL $121(*(($17 + [120])))
	
.LABEL $label$79
	$15 = *($0)
	$1 = (int_64)0
	$12 = (int_64)59
	$16 = [928]
	$13 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$85 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$10 = ($10 + [165])
	goto $label$83 
	
.LABEL $label$85
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$81
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$80 }
	*($17 + [192]) = $13
	*($17 + [184]) = $15
	$1 = (int_64)0
	$14 = (int_64)59
	$16 = [1392]
	$13 = (int_64)0
	
.LOOP $label$86:
	$12 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$87 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$10 = ($10 + [165])
	goto $label$88 
	
.LABEL $label$89
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$87
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$86 }
	$1 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$15 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$95 }
	$10 = *($16)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$10 = ($10 + [165])
	goto $label$93 
	
.LABEL $label$95
	$14 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$91
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$90 }
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	$16 = CALL strlen([2048])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$53 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$98 }
	*($17 + [112]) = ($16 << [1])
	$10 = (($17 + [112]) | [1])
	if ( $16 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$11 = (($16 + [16]) & [-16])
	$10 = CALL $120($11)
	*($17 + [112]) = ($11 | [1])
	*($17 + [120]) = $10
	*($17 + [116]) = $16
	
.LABEL $label$97
	CALL memcpy($10, [2048], $16)
	
.LABEL $label$96
	*(($10 + $16)) = [0]
	$1 = *(($9 + [8]))
	*(($17 + [148])) = *($17 + [300])
	*($17 + [136]) = $1
	*(($17 + [152])) = *((($17 + [296]) + [8]))
	*(($17 + [156])) = *(($17 + [308]))
	*($17 + [128]) = *($0)
	*($17 + [144]) = *($17 + [296])
	$16 = (($17 + [112]) + [8])
	*(($17 + [168])) = *($16)
	*($17 + [160]) = *($17 + [112])
	*($17 + [112]) = [0]
	*($17 + [116]) = [0]
	*($16) = [0]
	$16 = CALL $32(($17 + [200]), ($17 + [184]), $13, $15, ($17 + [128]))
	CALL $33(($17 + [448]), $16)
	$10 = *($17 + [448])
	CALL send_inline($10, (*($17 + [452]) - $10))
	$10 = *($17 + [448])
	if ( ($10 == 0) ){ goto $label$99 }
	*($17 + [452]) = $10
	CALL $121($10)
	
.LABEL $label$99
	$10 = *($16 + [28])
	if ( ($10 == 0) ){ goto $label$100 }
	*(($16 + [32])) = $10
	CALL $121($10)
	
.LABEL $label$100
	$10 = *($16 + [16])
	if ( ($10 == 0) ){ goto $label$101 }
	*(($16 + [20])) = $10
	CALL $121($10)
	
.LABEL $label$101
	if ( ((*(($17 + [160])) & [1]) == 0) ){ goto $label$102 }
	CALL $121(*(($17 + [168])))
	
.LABEL $label$102
	if ( ((*($17 + [112]) & [1]) == 0) ){ goto $label$55 }
	CALL $121(*(($17 + [120])))
	
.LABEL $label$55
	*($17 + [200]) = ((int_64)(CASTING int_64)(int_32 (CALL tapos_block_prefix() + CALL $fimport$20())) + (int_64)*($0 + [96]))
	CALL sha256(($17 + [200]), [4], ($17 + [128]))
	$1 = ((int_64)CALL llabs(*($17 + [128])) % (int_64)1024)
	$10 = CALL $120([800])
	$16 = [0]
	
.LOOP $label$103:
	*(($10 + $16)) = *(($16 + [2080]))
	$16 = ($16 + [8])
	if ( ((int_32)$16 != (int_32)[800]) ){ goto $label$103 }
	*((($17 + [72]) + [16])) = (int_64)0
	*($17 + [80]) = (int_64)0
	*($17 + [96]) = [0]
	$14 = *($17 + [440])
	$1 = ((int_64)$1 + (int_64)1)
	*($17 + [72]) = $1
	$16 = CALL $120([800])
	$11 = ($16 + [800])
	*((($17 + [72]) + [36])) = $11
	*($17 + [100]) = $16
	CALL memcpy($16, $10, [800])
	*(($9 = (($17 + [72]) + [32]))) = $11
	CALL $81($0, $14, ($17 + [72]))
	$16 = *($17 + [100])
	if ( ($16 == 0) ){ goto $label$104 }
	*($9) = $16
	CALL $121($16)
	
.LABEL $label$104
	CALL $82($0)
	*(($11 = (($17 + [56]) + [8]))) = *(($2 + [8]))
	$14 = *($17 + [440])
	*($17 + [56]) = *($2)
	*($17 + [16]) = $1
	*($17 + [24]) = (int_64)0
	*((($17 + [16]) + [16])) = (int_64)0
	*($17 + [40]) = [0]
	$16 = CALL $120([800])
	$9 = ($16 + [800])
	*((($17 + [16]) + [36])) = $9
	*($17 + [44]) = $16
	CALL memcpy($16, $10, [800])
	*((($17 + [16]) + [32])) = $9
	*(($17 + [8])) = *($11)
	*($17) = *($17 + [56])
	CALL $83($0, $14, $17, ($17 + [16]))
	$16 = *($17 + [44])
	if ( ($16 == 0) ){ goto $label$105 }
	*(($17 + [48])) = $16
	CALL $121($16)
	
.LABEL $label$105
	if ( ($10 == 0) ){ goto $label$106 }
	CALL $121($10)
	
.LABEL $label$106
	$0 = *($17 + [264])
	if ( ($0 == 0) ){ goto $label$107 }
	$11 = ($17 + [268])
	$16 = *($11)
	if ( ((int_32)$16 == (int_32)$0) ){ goto $label$109 }
	
.LOOP $label$110:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$111 }
	CALL $121($10)
	
.LABEL $label$111
	if ( ((int_32)$0 != (int_32)$16) ){ goto $label$110 }
	$16 = *(($17 + [264]))
	goto $label$108 
	
.LABEL $label$109
	$16 = $0
	
.LABEL $label$108
	*($11) = $0
	CALL $121($16)
	
.LABEL $label$107
	$0 = *($17 + [352])
	if ( ($0 == 0) ){ goto $label$112 }
	$11 = ($17 + [356])
	$16 = *($11)
	if ( ((int_32)$16 == (int_32)$0) ){ goto $label$114 }
	
.LOOP $label$115:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$116 }
	CALL $121($10)
	
.LABEL $label$116
	if ( ((int_32)$0 != (int_32)$16) ){ goto $label$115 }
	$16 = *(($17 + [352]))
	goto $label$113 
	
.LABEL $label$114
	$16 = $0
	
.LABEL $label$113
	*($11) = $0
	CALL $121($16)
	
.LABEL $label$112
	$0 = *($17 + [392])
	if ( ($0 == 0) ){ goto $label$117 }
	$11 = ($17 + [396])
	$16 = *($11)
	if ( ((int_32)$16 == (int_32)$0) ){ goto $label$119 }
	
.LOOP $label$120:
	$16 = ($16 + [-24])
	$10 = *($16)
	*($16) = [0]
	if ( ($10 == 0) ){ goto $label$121 }
	CALL $121($10)
	
.LABEL $label$121
	if ( ((int_32)$0 != (int_32)$16) ){ goto $label$120 }
	$16 = *(($17 + [392]))
	goto $label$118 
	
.LABEL $label$119
	$16 = $0
	
.LABEL $label$118
	*($11) = $0
	CALL $121($16)
	
.LABEL $label$117
	*([0] + [4]) = ($17 + [464])
	return (unreachable)
	
.LABEL $label$54
	CALL $122(($17 + [112]))
	
.LABEL $label$53
	CALL $122(($17 + [112]))
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1712])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $50($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [640])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([128])
	CALL $115($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $48(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [640])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [640])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $68($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $123($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $120($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $123($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $121($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $122($7)
	return (unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $125(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $125(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $121(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $121(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [640])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $60 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [608])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [544])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [608])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)1)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	$3 = *($3 + [4])
	*($1 + [96]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($3 + [56]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $5, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [200])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [184])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [192])), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $103($5, $6)
	*($9 + [12]) = [0]
	*($9 + [8]) = $5
	$7 = *(*(CALL $104(($9 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [200])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [3072])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	$4 = $10
	$10 = ($4 + [-16])
	*([0] + [4]) = $10
	CALL eosio_assert([1], [1088])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert([1], [1088])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	$7 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $7, $10, [16])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	$2 = *($0)
	*($1) = *(*($4 + [4]))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($4 + [8])))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	$4 = *($4 + [12])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($1 + [160]))), [1216])
	$3 = ((int_64)*($1 + [152]) + (int_64)*($4))
	*($1 + [152]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [1296])
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	$3 = *($1)
	*($1 + [196]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020376800539705344, *(*($0 + [8])), $3, $5, [192])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [512])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $120([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [640])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [640])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $120(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $121($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1088])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [20]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $103(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [208])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [128]))), [1216])
	$5 = ((int_64)*($1 + [120]) + (int_64)*($3))
	*($1 + [120]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [200]) = ($6 + [192])
	*($6 + [196]) = $6
	*($6 + [192]) = $6
	CALL $42(($6 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $6, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [208])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [208])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [128]))), [1216])
	$5 = ((int_64)*($1 + [120]) + (int_64)*($3))
	*($1 + [120]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [200]) = ($6 + [192])
	*($6 + [196]) = $6
	*($6 + [192]) = $6
	CALL $42(($6 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $6, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [208])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [208])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [128]))), [1216])
	$5 = ((int_64)*($1 + [120]) + (int_64)*($3))
	*($1 + [120]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [200]) = ($6 + [192])
	*($6 + [196]) = $6
	*($6 + [192]) = $6
	CALL $42(($6 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $6, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [208])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [192])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	$4 = CALL $120([168])
	$6 = CALL $26($4)
	*($4 + [152]) = $1
	*($4 + [16]) = (int_64)0
	*($4) = *(*(*($3) + [4]) + [8])
	*($4 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8 + [184]) = (($8 + [16]) + [152])
	*($8 + [180]) = ($8 + [16])
	*($8 + [176]) = ($8 + [16])
	CALL $90(($8 + [176]), $6)
	$5 = *($4)
	*($4 + [156]) = CALL db_store_i64(*($1 + [8]), (int_64)7035924439720001536, $2, $5, ($8 + [16]), [152])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [176]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [156])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [176]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $28(($1 + [24]), ($8 + [176]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [176])
	*($8 + [176]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $121($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [192])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [104]))), [1216])
	$5 = ((int_64)*($1 + [96]) + (int_64)*($3))
	*($1 + [96]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [120]) = ($6 + [112])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $46(($6 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $6, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [72]) = *(*($3))
	$5 = *($3 + [4])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	*($1 + [80]) = *(*($3 + [8]))
	*($1 + [104]) = *(*($3 + [12]))
	$5 = *($3 + [16])
	*($1 + [88]) = *($5)
	*(($1 + [96])) = *(($5 + [8]))
	*($1 + [112]) = *(*($3 + [20]))
	*($1 + [136]) = *(*($3 + [24]))
	$5 = *($3 + [28])
	*($1 + [120]) = *($5)
	*(($1 + [128])) = *(($5 + [8]))
	*($1 + [144]) = *(*($3 + [32]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [168]) = ($6 + [152])
	*($6 + [164]) = $6
	*($6 + [160]) = $6
	CALL $90(($6 + [160]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $6, [152])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [448])
	*([0] + [4]) = $24
	$4 = ($0 + [104])
	$16 = [0]
	$20 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$1 }
	$16 = CALL $34($4, $20)
	
.LABEL $label$1
	*($24 + [424]) = $4
	$7 = *(($0 + [248]))
	$17 = *(($0 + [252]))
	*($24 + [428]) = $16
	$19 = *($16 + [8])
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$2 }
	$20 = ($17 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$3:
	if ( ((int_64)*(*($20)) == (int_64)$19) ){ goto $label$2 }
	$17 = $20
	$14 = ($20 + [-24])
	$20 = $14
	if ( ((int_32)($14 + $6) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($0 + [224])
	if ( ((int_32)$17 == (int_32)$7) ){ goto $label$5 }
	$7 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$5), [272])
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	$20 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035924439720001536, $19)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $16($5, $20)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$5), [272])
	
.LABEL $label$4
	if ( (uint_64)(*($7 + [16]) <= *($0 + [64])) ){ goto $label$13 }
	if ( ((int_64)((uint_64)*($16 + [48]) % (uint_64)(int_64)100) != (int_64)0) ){ goto $label$14 }
	$20 = ($3 + [16])
	$21 = *($20)
	$19 = *($3 + [8])
	if ( ((int_64)$19 != (int_64)0) ){ goto $label$15 }
	$19 = (int_64)0
	if ( ((int_64)$21 != (int_64)0) ){ goto $label$15 }
	$19 = ((int_64)*($3) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$19 = ((int_64)((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19
	$19 = ((int_64)(uint_64)$19 * (int_64)-7723592293110705685)
	*(($3 + [8])) = $19 >> (uint_64)(int_64)31) ^ (int_64)$19))
	$21 = ((int_64)$19 + (int_64)-7046029254386353131)
	$21 = ((int_64)((int_64)(uint_64)$21 >> (uint_64)(int_64)30) ^ (int_64)$21) * (int_64)-4658895280553007687
	$21 = ((int_64)((int_64)(uint_64)$21) >> (uint_64)(int_64)27) ^ (int_64)$21
	$21 = ((int_64)(uint_64)$21 * (int_64)-7723592293110705685)
	*(($3 + [16])) = $21 >> (uint_64)(int_64)31) ^ (int_64)$21))
	
.LABEL $label$15
	$15 = ((int_64)$19 ^ (int_64)$21)
	*($20) = (rotl((int_64) $15))
	*(($3 + [8])) = ((int_64)((int_64)(rotl((int_64) $19)) ^ (int_64)24) ^ (int_64)$15)
	*($0 + [96]) = ((int_64)((int_64)$19 + (int_64)$21) + (int_64)*($0 + [96]))
	
.LABEL $label$14
	$19 = *($7 + [40])
	$8 = *(($7 + [48]))
	*($24 + [416]) = $8
	$21 = ((uint_64)((int_64)$19 * (int_64)*($0 + [24])) / (uint_64)(int_64)100)
	*($24 + [408]) = $21
	*($24 + [384]) = (int_64)-1
	$14 = [0]
	*($24 + [392]) = [0]
	$11 = *($0)
	*($24 + [368]) = $11
	$13 = *($16 + [8])
	*($24 + [376]) = $13
	*((($24 + [368]) + [28])) = [0]
	*((($24 + [368]) + [32])) = [0]
	*($24 + [360]) = $8
	$9 = ((int_64)$19 / (int_64)20)
	$10 = (int_64)
	*($24 + [352]) = $10((int_64))($19 - $9) - $21))
	*((($24 + [304]) + [24])) = *(($3 + [24]))
	*(($17 = (($24 + [304]) + [16]))) = *(($3 + [16]))
	*((($24 + [304]) + [8])) = *(($3 + [8]))
	*($24 + [304]) = *($3)
	*($24 + [332]) = [0]
	*((($24 + [304]) + [32])) = [0]
	*(($24 + [340])) = [0]
	$6 = (*(($3 + [32])) - *($3 + [28]))
	$20 = int_32($6 >> [3])
	if ( ($20 == 0) ){ goto $label$16 }
	if ( ((uint_32)$20 >= (uint_32)[536870912]) ){ goto $label$8 }
	$14 = CALL $120($6)
	*((($24 + [304]) + [28])) = $14
	*(($6 = (($24 + [304]) + [32]))) = $14
	*(($24 + [340])) = ($14 + ($20 << [3]))
	$16 = *(($3 + [28]))
	$20 = (*(($3 + [32])) - $16)
	if ( ((int_32)$20 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($14, $16, $20)
	*($6) = ($14 + $20)
	
.LABEL $label$16
	$19 = ((int_64)*($24 + [304]) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$19 = ((int_64)((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19
	$23 = ((int_64)(uint_64)$19 * (int_64)-7723592293110705685)
	$19 = ((int_64)$23 >> (uint_64)(int_64)31) ^ (int_64)$19
	$19 = ((int_64)((int_64)(uint_64)$19) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$12 = ((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19) * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$19)
	$22 = *(($0 + [64]))
	$15 = *($17)
	$18 = *($24 + [312])
	
.LOOP $label$17:
	if ( ((int_64)$18 == (int_64)0) ){ goto $label$19 }
	$21 = $15
	$19 = $18
	goto $label$18 
	
.LABEL $label$19
	$20 = (int_64)($15 == 0)
	$19 = ( $23 ? (int_64)0 : $20 )
	$21 = ( $12 ? $15 : $20 )
	
.LABEL $label$18
	$15 = ((int_64)$19 ^ (int_64)$21)
	$18 = ((int_64)((int_64)(rotl((int_64) $19)) ^ (int_64)24) ^ (int_64)$15)
	$15 = (rotl((int_64) $15))
	$19 = ((int_64)((uint_64)((int_64)$19 + (int_64)$21) % (uint_64)$22) + (int_64)1)
	if ( (int_64)($19 == 0) ){ goto $label$17 }
	*(($24 + [320])) = $15
	*(($24 + [312])) = $18
	if ( ($14 == 0) ){ goto $label$20 }
	*(($24 + [336])) = $14
	CALL $121($14)
	
.LABEL $label$20
	*($24 + [344]) = $19
	$20 = [0]
	$14 = CALL db_find_i64($11, $13, (int_64)-4812882902415048704, $19)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$21 }
	$20 = CALL $18(($24 + [368]), $14)
	CALL eosio_assert(((int_32)*($20 + [24]) == (int_32)($24 + [368])), [272])
	
.LABEL $label$21
	*($24 + [296]) = *($20 + [8])
	*($24 + [352]) = ((int_64)$10 / (int_64)2)
	*($24 + [288]) = $8
	*($24 + [280]) = $10
	*((($24 + [232]) + [24])) = *(($3 + [24]))
	*(($17 = (($24 + [232]) + [16]))) = *(($3 + [16]))
	*((($24 + [232]) + [8])) = *(($3 + [8]))
	*($24 + [232]) = *($3)
	*($24 + [260]) = [0]
	*((($24 + [232]) + [32])) = [0]
	*(($24 + [268])) = [0]
	$20 = (*(($3 + [32])) - *(($3 + [28])))
	$14 = int_32($20 >> [3])
	if ( ($14 == 0) ){ goto $label$22 }
	if ( ((uint_32)$14 >= (uint_32)[536870912]) ){ goto $label$7 }
	$20 = CALL $120($20)
	*((($24 + [232]) + [28])) = $20
	*(($6 = (($24 + [232]) + [32]))) = $20
	*(($24 + [268])) = ($20 + ($14 << [3]))
	$16 = *(($3 + [28]))
	$14 = (*(($3 + [32])) - $16)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($20, $16, $14)
	*($6) = (*($6) + $14)
	
.LABEL $label$22
	$19 = ((int_64)*($24 + [232]) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$19 = ((int_64)((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19
	$12 = ((int_64)(uint_64)$19 * (int_64)-7723592293110705685)
	$19 = ((int_64)$12 >> (uint_64)(int_64)31) ^ (int_64)$19
	$19 = ((int_64)((int_64)(uint_64)$19) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$11 = ((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19) * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$19)
	$22 = *(($0 + [64]))
	$15 = *($17)
	$18 = *($24 + [240])
	$23 = *($24 + [344])
	
.LOOP $label$23:
	if ( ((int_64)$18 == (int_64)0) ){ goto $label$25 }
	$21 = $15
	$19 = $18
	goto $label$24 
	
.LABEL $label$25
	$20 = (int_64)($15 == 0)
	$19 = ( $12 ? (int_64)0 : $20 )
	$21 = ( $11 ? $15 : $20 )
	
.LABEL $label$24
	$15 = ((int_64)$19 ^ (int_64)$21)
	$18 = ((int_64)((int_64)(rotl((int_64) $19)) ^ (int_64)24) ^ (int_64)$15)
	$15 = (rotl((int_64) $15))
	$19 = ((int_64)((uint_64)((int_64)$19 + (int_64)$21) % (uint_64)$22) + (int_64)1)
	if ( ((int_64)$19 == (int_64)$23) ){ goto $label$23 }
	if ( (int_64)($19 == 0) ){ goto $label$23 }
	*(($24 + [248])) = $15
	*(($24 + [240])) = $18
	$20 = *($24 + [260])
	if ( ($20 == 0) ){ goto $label$26 }
	*(($24 + [264])) = $20
	CALL $121($20)
	
.LABEL $label$26
	*($24 + [272]) = $19
	$16 = *(($24 + [392]))
	$17 = *(($24 + [396]))
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$27 }
	$20 = ($17 + [-24])
	$6 = ([0] - $16)
	
.LOOP $label$28:
	if ( ((int_64)*(*($20)) == (int_64)$19) ){ goto $label$27 }
	$17 = $20
	$14 = ($20 + [-24])
	$20 = $14
	if ( ((int_32)($14 + $6) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$30 }
	$20 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [24]) == (int_32)($24 + [368])), [272])
	goto $label$29 
	
.LABEL $label$30
	$20 = [0]
	$14 = CALL db_find_i64(*($24 + [368]), *(($24 + [376])), (int_64)-4812882902415048704, $19)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$29 }
	$20 = CALL $18(($24 + [368]), $14)
	CALL eosio_assert(((int_32)*($20 + [24]) == (int_32)($24 + [368])), [272])
	
.LABEL $label$29
	*($24 + [224]) = *($20 + [8])
	*($24 + [280]) = ((int_64)((int_64)$10 * (int_64)30) / (int_64)100)
	*($24 + [216]) = $8
	*($24 + [208]) = $10
	*((($24 + [160]) + [24])) = *(($3 + [24]))
	*(($17 = (($24 + [160]) + [16]))) = *(($3 + [16]))
	*((($24 + [160]) + [8])) = *(($3 + [8]))
	*($24 + [160]) = *($3)
	*($24 + [188]) = [0]
	*((($24 + [160]) + [32])) = [0]
	*(($24 + [196])) = [0]
	$20 = (*(($3 + [32])) - *(($3 + [28])))
	$14 = int_32($20 >> [3])
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)$14 >= (uint_32)[536870912]) ){ goto $label$6 }
	$20 = CALL $120($20)
	*((($24 + [160]) + [28])) = $20
	*(($6 = (($24 + [160]) + [32]))) = $20
	*(($24 + [196])) = ($20 + ($14 << [3]))
	$3 = *(($3 + [28]))
	$14 = (*(($3 + [32])) - $3)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$31 }
	CALL memcpy($20, $3, $14)
	*($6) = (*($6) + $14)
	
.LABEL $label$31
	$19 = ((int_64)*($24 + [160]) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$19 = ((int_64)((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19
	$11 = ((int_64)(uint_64)$19 * (int_64)-7723592293110705685)
	$19 = ((int_64)$11 >> (uint_64)(int_64)31) ^ (int_64)$19
	$19 = ((int_64)((int_64)(uint_64)$19) + (int_64)-7046029254386353131)
	$19 = ((int_64)((int_64)(uint_64)$19 >> (uint_64)(int_64)30) ^ (int_64)$19) * (int_64)-4658895280553007687
	$13 = ((int_64)(uint_64)$19) >> (uint_64)(int_64)27) ^ (int_64)$19) * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$19)
	$22 = *(($0 + [64]))
	$15 = *($17)
	$18 = *($24 + [168])
	$12 = *($24 + [272])
	$23 = *($24 + [344])
	
.LOOP $label$32:
	if ( ((int_64)$18 == (int_64)0) ){ goto $label$34 }
	$21 = $15
	$19 = $18
	goto $label$33 
	
.LABEL $label$34
	$20 = (int_64)($15 == 0)
	$19 = ( $11 ? (int_64)0 : $20 )
	$21 = ( $13 ? $15 : $20 )
	
.LABEL $label$33
	$15 = ((int_64)$19 ^ (int_64)$21)
	$18 = ((int_64)((int_64)(rotl((int_64) $19)) ^ (int_64)24) ^ (int_64)$15)
	$15 = (rotl((int_64) $15))
	$19 = ((int_64)((uint_64)((int_64)$19 + (int_64)$21) % (uint_64)$22) + (int_64)1)
	if ( ((int_64)$19 == (int_64)$23) ){ goto $label$32 }
	if ( ((int_64)$19 == (int_64)$12) ){ goto $label$32 }
	*(($24 + [176])) = $15
	*(($24 + [168])) = $18
	$20 = *($24 + [188])
	if ( ($20 == 0) ){ goto $label$35 }
	*(($24 + [192])) = $20
	CALL $121($20)
	
.LABEL $label$35
	*($24 + [200]) = $19
	$6 = *(($24 + [392]))
	$17 = *(($24 + [396]))
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$36 }
	$20 = ($17 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$37:
	if ( ((int_64)*(*($20)) == (int_64)$19) ){ goto $label$36 }
	$17 = $20
	$14 = ($20 + [-24])
	$20 = $14
	if ( ((int_32)($14 + $3) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$39 }
	$20 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($20 + [24]) == (int_32)($24 + [368])), [272])
	goto $label$38 
	
.LABEL $label$39
	$20 = [0]
	$14 = CALL db_find_i64(*($24 + [368]), *(($24 + [376])), (int_64)-4812882902415048704, $19)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$38 }
	$20 = CALL $18(($24 + [368]), $14)
	CALL eosio_assert(((int_32)*($20 + [24]) == (int_32)($24 + [368])), [272])
	
.LABEL $label$38
	*($24 + [152]) = *($20 + [8])
	CALL eosio_assert(((int_64)*((($24 + [352]) + [8])) == (int_64)$8), [1408])
	$19 = (int_64)
	CALL eosio_assert(((int_64)$19($10 - *($24 + [352]))) > (int_64)-4611686018427387904), [1456])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [1488])
	CALL eosio_assert(((int_64)*((($24 + [280]) + [8])) == (int_64)$8), [1408])
	$19 = (int_64)
	CALL eosio_assert(((int_64)$19($19 - *($24 + [280]))) > (int_64)-4611686018427387904), [1456])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [1488])
	*((($24 + [208]) + [8])) = $8
	*($24 + [208]) = $19
	$19 = (int_64)0
	CALL eosio_assert(((int_64)*($24 + [352]) > (int_64)0), [2880])
	CALL eosio_assert(((int_64)*($24 + [280]) > (int_64)0), [2912])
	CALL eosio_assert(((int_64)*($24 + [208]) > (int_64)0), [2912])
	$22 = *($0)
	$15 = (int_64)59
	$20 = [928]
	$18 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$45 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$14 = ($14 + [165])
	goto $label$43 
	
.LABEL $label$45
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$41
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$18 = ((int_64)$21 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$40 }
	*($24 + [16]) = $18
	*($24 + [8]) = $22
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [112]
	$18 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$51 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$14 = ($14 + [165])
	goto $label$49 
	
.LABEL $label$51
	$21 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$47
	$20 = ($20 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$21 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$46 }
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [128]
	$22 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$57 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$14 = ($14 + [165])
	goto $label$55 
	
.LABEL $label$57
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$53
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$52 }
	*(($24 + [56])) = [0]
	*($24 + [48]) = (int_64)0
	$20 = CALL strlen([2944])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$60 }
	*($24 + [48]) = ($20 << [1])
	$14 = (($24 + [48]) | [1])
	if ( $20 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$17 = (($20 + [16]) & [-16])
	$14 = CALL $120($17)
	*($24 + [48]) = ($17 | [1])
	*($24 + [56]) = $14
	*($24 + [52]) = $20
	
.LABEL $label$59
	CALL memcpy($14, [2944], $20)
	
.LABEL $label$58
	*(($14 + $20)) = [0]
	*(($24 + [84])) = *($24 + [356])
	*($24 + [64]) = *($0)
	*($24 + [72]) = *($24 + [296])
	*(($24 + [92])) = *(($24 + [364]))
	*(($24 + [88])) = *((($24 + [352]) + [8]))
	*($24 + [80]) = *($24 + [352])
	$20 = (($24 + [48]) + [8])
	*(($24 + [104])) = *($20)
	*($24 + [96]) = *($24 + [48])
	*($24 + [48]) = [0]
	*($24 + [52]) = [0]
	*($20) = [0]
	$20 = CALL $32(($24 + [112]), ($24 + [8]), $18, $22, ($24 + [64]))
	CALL $33(($24 + [432]), $20)
	$14 = *($24 + [432])
	CALL send_inline($14, (*($24 + [436]) - $14))
	$14 = *($24 + [432])
	if ( ($14 == 0) ){ goto $label$61 }
	*($24 + [436]) = $14
	CALL $121($14)
	
.LABEL $label$61
	$14 = *($20 + [28])
	if ( ($14 == 0) ){ goto $label$62 }
	*(($20 + [32])) = $14
	CALL $121($14)
	
.LABEL $label$62
	$14 = *($20 + [16])
	if ( ($14 == 0) ){ goto $label$63 }
	*(($20 + [20])) = $14
	CALL $121($14)
	
.LABEL $label$63
	if ( ((*(($24 + [96])) & [1]) == 0) ){ goto $label$64 }
	CALL $121(*(($24 + [104])))
	
.LABEL $label$64
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$65 }
	CALL $121(*(($24 + [56])))
	
.LABEL $label$65
	$22 = *($0)
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [928]
	$18 = (int_64)0
	
.LOOP $label$66:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$71 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$14 = ($14 + [165])
	goto $label$69 
	
.LABEL $label$71
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$70
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$68
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$67
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$18 = ((int_64)$21 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$66 }
	*($24 + [16]) = $18
	*($24 + [8]) = $22
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [112]
	$18 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$77 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$14 = ($14 + [165])
	goto $label$75 
	
.LABEL $label$77
	$21 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$73
	$20 = ($20 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$21 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$72 }
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [128]
	$22 = (int_64)0
	
.LOOP $label$78:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$83 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$14 = ($14 + [165])
	goto $label$81 
	
.LABEL $label$83
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$79
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$78 }
	*(($24 + [56])) = [0]
	*($24 + [48]) = (int_64)0
	$20 = CALL strlen([2976])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$86 }
	*($24 + [48]) = ($20 << [1])
	$14 = (($24 + [48]) | [1])
	if ( $20 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$17 = (($20 + [16]) & [-16])
	$14 = CALL $120($17)
	*($24 + [48]) = ($17 | [1])
	*($24 + [56]) = $14
	*($24 + [52]) = $20
	
.LABEL $label$85
	CALL memcpy($14, [2976], $20)
	
.LABEL $label$84
	*(($14 + $20)) = [0]
	*(($24 + [84])) = *($24 + [284])
	*($24 + [64]) = *($0)
	*($24 + [72]) = *($24 + [224])
	*(($24 + [92])) = *(($24 + [292]))
	*(($24 + [88])) = *((($24 + [280]) + [8]))
	*($24 + [80]) = *($24 + [280])
	$20 = (($24 + [48]) + [8])
	*(($24 + [104])) = *($20)
	*($24 + [96]) = *($24 + [48])
	*($24 + [48]) = [0]
	*($24 + [52]) = [0]
	*($20) = [0]
	$20 = CALL $32(($24 + [112]), ($24 + [8]), $18, $22, ($24 + [64]))
	CALL $33(($24 + [432]), $20)
	$14 = *($24 + [432])
	CALL send_inline($14, (*($24 + [436]) - $14))
	$14 = *($24 + [432])
	if ( ($14 == 0) ){ goto $label$87 }
	*($24 + [436]) = $14
	CALL $121($14)
	
.LABEL $label$87
	$14 = *($20 + [28])
	if ( ($14 == 0) ){ goto $label$88 }
	*(($20 + [32])) = $14
	CALL $121($14)
	
.LABEL $label$88
	$14 = *($20 + [16])
	if ( ($14 == 0) ){ goto $label$89 }
	*(($20 + [20])) = $14
	CALL $121($14)
	
.LABEL $label$89
	if ( ((*(($24 + [96])) & [1]) == 0) ){ goto $label$90 }
	CALL $121(*(($24 + [104])))
	
.LABEL $label$90
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$91 }
	CALL $121(*(($24 + [56])))
	
.LABEL $label$91
	$22 = *($0)
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [928]
	$18 = (int_64)0
	
.LOOP $label$92:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$97 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$96 }
	$14 = ($14 + [165])
	goto $label$95 
	
.LABEL $label$97
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$96
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$95
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$94
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$93
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$18 = ((int_64)$21 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$92 }
	*($24 + [16]) = $18
	*($24 + [8]) = $22
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [112]
	$18 = (int_64)0
	
.LOOP $label$98:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$103 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$14 = ($14 + [165])
	goto $label$101 
	
.LABEL $label$103
	$21 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$102
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$100
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$99
	$20 = ($20 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$21 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$98 }
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [128]
	$22 = (int_64)0
	
.LOOP $label$104:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$109 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$14 = ($14 + [165])
	goto $label$107 
	
.LABEL $label$109
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$108
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$106
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$105
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$104 }
	*(($24 + [56])) = [0]
	*($24 + [48]) = (int_64)0
	$20 = CALL strlen([3008])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$112 }
	*($24 + [48]) = ($20 << [1])
	$14 = (($24 + [48]) | [1])
	if ( $20 ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	$17 = (($20 + [16]) & [-16])
	$14 = CALL $120($17)
	*($24 + [48]) = ($17 | [1])
	*($24 + [56]) = $14
	*($24 + [52]) = $20
	
.LABEL $label$111
	CALL memcpy($14, [3008], $20)
	
.LABEL $label$110
	*(($14 + $20)) = [0]
	*(($24 + [84])) = *($24 + [212])
	*($24 + [64]) = *($0)
	*($24 + [72]) = *($24 + [152])
	*(($24 + [92])) = *(($24 + [220]))
	*(($24 + [88])) = *((($24 + [208]) + [8]))
	*($24 + [80]) = *($24 + [208])
	$20 = (($24 + [48]) + [8])
	*(($24 + [104])) = *($20)
	*($24 + [96]) = *($24 + [48])
	*($24 + [48]) = [0]
	*($24 + [52]) = [0]
	*($20) = [0]
	$20 = CALL $32(($24 + [112]), ($24 + [8]), $18, $22, ($24 + [64]))
	CALL $33(($24 + [432]), $20)
	$14 = *($24 + [432])
	CALL send_inline($14, (*($24 + [436]) - $14))
	$14 = *($24 + [432])
	if ( ($14 == 0) ){ goto $label$113 }
	*($24 + [436]) = $14
	CALL $121($14)
	
.LABEL $label$113
	$14 = *($20 + [28])
	if ( ($14 == 0) ){ goto $label$114 }
	*(($20 + [32])) = $14
	CALL $121($14)
	
.LABEL $label$114
	$14 = *($20 + [16])
	if ( ($14 == 0) ){ goto $label$115 }
	*(($20 + [20])) = $14
	CALL $121($14)
	
.LABEL $label$115
	if ( ((*(($24 + [96])) & [1]) == 0) ){ goto $label$116 }
	CALL $121(*(($24 + [104])))
	
.LABEL $label$116
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$117 }
	CALL $121(*(($24 + [56])))
	
.LABEL $label$117
	$22 = *($0)
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [928]
	$18 = (int_64)0
	
.LOOP $label$118:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$123 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$14 = ($14 + [165])
	goto $label$121 
	
.LABEL $label$123
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$122
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$120
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$119
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$18 = ((int_64)$21 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$118 }
	*($24 + [16]) = $18
	*($24 + [8]) = $22
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [112]
	$18 = (int_64)0
	
.LOOP $label$124:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$129 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$128 }
	$14 = ($14 + [165])
	goto $label$127 
	
.LABEL $label$129
	$21 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$128
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$127
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$126
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$125
	$20 = ($20 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$18 = ((int_64)$21 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$124 }
	$19 = (int_64)0
	$15 = (int_64)59
	$20 = [128]
	$22 = (int_64)0
	
.LOOP $label$130:
	if ( ((uint_64)$19 > (uint_64)(int_64)7) ){ goto $label$135 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$14 = ($14 + [165])
	goto $label$133 
	
.LABEL $label$135
	$21 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$134
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$132
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$131
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$130 }
	$19 = (int_64)0
	$21 = (int_64)59
	$20 = [3040]
	$23 = (int_64)0
	
.LOOP $label$136:
	$15 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$137 }
	$14 = *($20)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$14 = ($14 + [165])
	goto $label$138 
	
.LABEL $label$139
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$137
	$20 = ($20 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$23 = ((int_64)$15 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$136 }
	*(($24 + [56])) = [0]
	*($24 + [48]) = (int_64)0
	$20 = CALL strlen([3056])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$142 }
	*($24 + [48]) = ($20 << [1])
	$14 = (($24 + [48]) | [1])
	if ( $20 ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$142
	$17 = (($20 + [16]) & [-16])
	$14 = CALL $120($17)
	*($24 + [48]) = ($17 | [1])
	*($24 + [56]) = $14
	*($24 + [52]) = $20
	
.LABEL $label$141
	CALL memcpy($14, [3056], $20)
	
.LABEL $label$140
	*(($14 + $20)) = [0]
	*(($24 + [88])) = $8
	*(($24 + [100])) = *($24 + [52])
	*($24 + [72]) = $23
	$20 = ($24 + [56])
	*(($24 + [104])) = *($20)
	*($24 + [64]) = *($0)
	*($24 + [80]) = $9
	*($24 + [96]) = *($24 + [48])
	*($24 + [48]) = [0]
	*($24 + [52]) = [0]
	*($20) = [0]
	$20 = CALL $32(($24 + [112]), ($24 + [8]), $18, $22, ($24 + [64]))
	CALL $33(($24 + [432]), $20)
	$14 = *($24 + [432])
	CALL send_inline($14, (*($24 + [436]) - $14))
	$14 = *($24 + [432])
	if ( ($14 == 0) ){ goto $label$143 }
	*($24 + [436]) = $14
	CALL $121($14)
	
.LABEL $label$143
	$14 = *($20 + [28])
	if ( ($14 == 0) ){ goto $label$144 }
	*(($20 + [32])) = $14
	CALL $121($14)
	
.LABEL $label$144
	$14 = *($20 + [16])
	if ( ($14 == 0) ){ goto $label$145 }
	*(($20 + [20])) = $14
	CALL $121($14)
	
.LABEL $label$145
	if ( ((*(($24 + [96])) & [1]) == 0) ){ goto $label$146 }
	CALL $121(*(($24 + [104])))
	
.LABEL $label$146
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$147 }
	CALL $121(*(($24 + [56])))
	
.LABEL $label$147
	$20 = [0]
	*($24 + [68]) = ($24 + [352])
	*($24 + [64]) = ($24 + [296])
	*($24 + [72]) = ($24 + [344])
	*($24 + [76]) = ($24 + [224])
	*($24 + [80]) = ($24 + [280])
	*($24 + [84]) = ($24 + [272])
	*($24 + [88]) = ($24 + [152])
	*($24 + [92]) = ($24 + [208])
	*($24 + [96]) = ($24 + [200])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [976])
	CALL $84($5, $7, (int_64)0, ($24 + [64]))
	$14 = *($24 + [428])
	*($24 + [64]) = ($24 + [408])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [976])
	CALL $85($4, $14, (int_64)0, ($24 + [64]))
	$19 = *($0)
	*($24 + [112]) = ($24 + [424])
	CALL $86(($24 + [64]), $5, $19, ($24 + [112]))
	*($24 + [80]) = (int_64)-1
	*($24 + [88]) = [0]
	$19 = *($24 + [296])
	$21 = *($0)
	*($24 + [64]) = $21
	*($24 + [72]) = $19
	*((($24 + [64]) + [28])) = [0]
	*((($24 + [64]) + [32])) = [0]
	$14 = [0]
	$17 = CALL db_lowerbound_i64($21, $19, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$148 }
	$14 = CALL $30(($24 + [64]), $17)
	
.LABEL $label$148
	$19 = *($0)
	*($24 + [112]) = ($24 + [352])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [976])
	CALL $87(($24 + [64]), $14, $19, ($24 + [112]))
	*($24 + [128]) = (int_64)-1
	*($24 + [136]) = [0]
	$19 = *($24 + [224])
	$21 = *($0)
	*($24 + [112]) = $21
	*($24 + [120]) = $19
	*((($24 + [112]) + [28])) = [0]
	*((($24 + [112]) + [32])) = [0]
	$14 = CALL db_lowerbound_i64($21, $19, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$149 }
	$20 = CALL $30(($24 + [112]), $14)
	
.LABEL $label$149
	$19 = *($0)
	*($24 + [8]) = ($24 + [280])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [976])
	CALL $88(($24 + [112]), $20, $19, ($24 + [8]))
	*($24 + [24]) = (int_64)-1
	*($24 + [32]) = [0]
	$19 = *($24 + [152])
	$21 = *($0)
	*($24 + [8]) = $21
	*($24 + [16]) = $19
	*(($24 + [36])) = [0]
	*(($24 + [40])) = [0]
	$20 = [0]
	$14 = CALL db_lowerbound_i64($21, $19, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$150 }
	$20 = CALL $30(($24 + [8]), $14)
	
.LABEL $label$150
	$19 = *($0)
	*($24 + [432]) = ($24 + [208])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [976])
	CALL $89(($24 + [8]), $20, $19, ($24 + [432]))
	$0 = *($24 + [32])
	if ( ($0 == 0) ){ goto $label$151 }
	$17 = ($24 + [36])
	$20 = *($17)
	if ( ((int_32)$20 == (int_32)$0) ){ goto $label$153 }
	
.LOOP $label$154:
	$20 = ($20 + [-24])
	$14 = *($20)
	*($20) = [0]
	if ( ($14 == 0) ){ goto $label$155 }
	CALL $121($14)
	
.LABEL $label$155
	if ( ((int_32)$0 != (int_32)$20) ){ goto $label$154 }
	$20 = *(($24 + [32]))
	goto $label$152 
	
.LABEL $label$153
	$20 = $0
	
.LABEL $label$152
	*($17) = $0
	CALL $121($20)
	
.LABEL $label$151
	$0 = *($24 + [136])
	if ( ($0 == 0) ){ goto $label$156 }
	$17 = ($24 + [140])
	$20 = *($17)
	if ( ((int_32)$20 == (int_32)$0) ){ goto $label$158 }
	
.LOOP $label$159:
	$20 = ($20 + [-24])
	$14 = *($20)
	*($20) = [0]
	if ( ($14 == 0) ){ goto $label$160 }
	CALL $121($14)
	
.LABEL $label$160
	if ( ((int_32)$0 != (int_32)$20) ){ goto $label$159 }
	$20 = *(($24 + [136]))
	goto $label$157 
	
.LABEL $label$158
	$20 = $0
	
.LABEL $label$157
	*($17) = $0
	CALL $121($20)
	
.LABEL $label$156
	$0 = *($24 + [88])
	if ( ($0 == 0) ){ goto $label$161 }
	$17 = ($24 + [92])
	$20 = *($17)
	if ( ((int_32)$20 == (int_32)$0) ){ goto $label$163 }
	
.LOOP $label$164:
	$20 = ($20 + [-24])
	$14 = *($20)
	*($20) = [0]
	if ( ($14 == 0) ){ goto $label$165 }
	CALL $121($14)
	
.LABEL $label$165
	if ( ((int_32)$0 != (int_32)$20) ){ goto $label$164 }
	$20 = *(($24 + [88]))
	goto $label$162 
	
.LABEL $label$163
	$20 = $0
	
.LABEL $label$162
	*($17) = $0
	CALL $121($20)
	
.LABEL $label$161
	$0 = *($24 + [392])
	if ( ($0 == 0) ){ goto $label$13 }
	$17 = ($24 + [396])
	$20 = *($17)
	if ( ((int_32)$20 == (int_32)$0) ){ goto $label$167 }
	
.LOOP $label$168:
	$20 = ($20 + [-24])
	$14 = *($20)
	*($20) = [0]
	if ( ($14 == 0) ){ goto $label$169 }
	CALL $121($14)
	
.LABEL $label$169
	if ( ((int_32)$0 != (int_32)$20) ){ goto $label$168 }
	$20 = *(($24 + [392]))
	goto $label$166 
	
.LABEL $label$167
	$20 = $0
	
.LABEL $label$166
	*($17) = $0
	CALL $121($20)
	
.LABEL $label$13
	*([0] + [4]) = ($24 + [448])
	return (unreachable)
	
.LABEL $label$12
	CALL $122(($24 + [48]))
	
.LABEL $label$11
	CALL $122(($24 + [48]))
	
.LABEL $label$10
	CALL $122(($24 + [48]))
	
.LABEL $label$9
	CALL $122(($24 + [48]))
	
.LABEL $label$8
	CALL $124((($24 + [304]) + [28]))
	
.LABEL $label$7
	CALL $124((($24 + [232]) + [28]))
	
.LABEL $label$6
	CALL $124((($24 + [160]) + [28]))
	(int_64)37
	((int_64)$15 << (int_64)16)
	((int_64)$15 << (int_64)16)
	(int_64)37
	((int_64)$15 << (int_64)16)
	(int_64)37
	((int_64)$15 << (int_64)16)
	(int_64)37
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$1 = ($0 + [104])
	$5 = [0]
	$2 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $34($1, $2)
	
.LABEL $label$1
	*($6 + [56]) = $1
	*($6 + [60]) = $5
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)*($5 + [80])) ){ goto $label$2 }
	*(($2 = (($6 + [40]) + [8]))) = *(($5 + [104]))
	$4 = *($5 + [96])
	*($6 + [40]) = $4
	$4 = ((int_64)$4 / (int_64)10)
	*($6 + [40]) = $4
	*((($6 + [24]) + [8])) = *($2)
	*($6 + [24]) = *($6 + [40])
	$3 = *($5 + [64])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = ((uint_64)((int_64)$4 * (int_64)10000) / (uint_64)$3)
	*($6 + [24]) = $4
	goto $label$3 
	
.LABEL $label$4
	$4 = *($6 + [24])
	
.LABEL $label$3
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$5 }
	$4 = *($0)
	*($6 + [8]) = $0
	*($6 + [12]) = ($6 + [56])
	*($6 + [16]) = ($6 + [40])
	*($6 + [20]) = ($6 + [24])
	CALL $91($6, ($0 + [144]), $4, ($6 + [8]))
	$5 = *($6 + [60])
	*($6 + [8]) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [976])
	CALL $92($1, $5, (int_64)0, ($6 + [8]))
	goto $label$2 
	
.LABEL $label$5
	$0 = *($6 + [60])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [976])
	CALL $93($1, $0, (int_64)0, ($6 + [8]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $81 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [240])
	*([0] + [4]) = $14
	$3 = ($0 + [104])
	$7 = [0]
	$4 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [104]), *(($0 + [112])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $34($3, $6)
	
.LABEL $label$1
	*(($8 = (($14 + [184]) + [16]))) = *(($2 + [16]))
	*((($14 + [184]) + [8])) = *(($2 + [8]))
	$11 = *($4 + [24])
	*((($14 + [184]) + [24])) = *(($2 + [24]))
	*($14 + [184]) = *($2)
	*($14 + [212]) = [0]
	*((($14 + [184]) + [32])) = [0]
	*(($14 + [220])) = [0]
	$5 = (*(($2 + [32])) - *($2 + [28]))
	$6 = int_32($5 >> [3])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$7 = CALL $120($5)
	*((($14 + [184]) + [28])) = $7
	*(($5 = (($14 + [184]) + [32]))) = $7
	*(($14 + [220])) = ($7 + ($6 << [3]))
	$6 = *(($2 + [28]))
	$2 = (*(($2 + [32])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($7, $6, $2)
	*($5) = ($7 + $2)
	
.LABEL $label$4
	$10 = (int_64)0
	$12 = *($8)
	$9 = *($14 + [192])
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$6 }
	$10 = $9
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_64)$12 != (int_64)0) ){ goto $label$5 }
	$10 = ((int_64)*($14 + [184]) + (int_64)-7046029254386353131)
	$10 = ((int_64)((int_64)(uint_64)$10 >> (uint_64)(int_64)30) ^ (int_64)$10) * (int_64)-4658895280553007687
	$10 = ((int_64)((int_64)(uint_64)$10) >> (uint_64)(int_64)27) ^ (int_64)$10
	$10 = ((int_64)(uint_64)$10 * (int_64)-7723592293110705685)
	$12 = ((int_64)$10 >> (uint_64)(int_64)31) ^ (int_64)$10
	$12 = ((int_64)((int_64)(uint_64)$12) + (int_64)-7046029254386353131)
	$12 = ((int_64)((int_64)(uint_64)$12 >> (uint_64)(int_64)30) ^ (int_64)$12) * (int_64)-4658895280553007687
	$12 = ((int_64)(uint_64)$12) >> (uint_64)(int_64)27) ^ (int_64)$12) * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$12)
	
.LABEL $label$5
	$9 = ((int_64)$10 ^ (int_64)$12)
	*(($14 + [200])) = (rotl((int_64) $9))
	*(($14 + [192])) = ((int_64)((int_64)(rotl((int_64) $10)) ^ (int_64)24) ^ (int_64)$9)
	$10 = ((int_64)((uint_64)((int_64)$10 + (int_64)$12) % (uint_64)(int_64)100) + (int_64)1)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($14 + [216])) = $7
	CALL $121($7)
	
.LABEL $label$7
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$9 }
	*($14 + [24]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [976])
	CALL $99($3, $4, (int_64)0, ($14 + [24]))
	goto $label$8 
	
.LABEL $label$9
	*($14 + [176]) = (int_64)361939227908
	*($14 + [168]) = (int_64)20000
	CALL eosio_assert([1], [544])
	$10 = (int_64)1413825109
	$2 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [608])
	*($14 + [24]) = ($14 + [168])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [976])
	$10 = (int_64)0
	CALL $97($3, $4, (int_64)0, ($14 + [24]))
	*(($14 + [160])) = [0]
	*($14 + [144]) = (int_64)-1
	*($14 + [152]) = (int_64)0
	$12 = *($0)
	*($14 + [128]) = $12
	*($14 + [136]) = $1
	$2 = [0]
	$7 = CALL db_lowerbound_i64($12, $1, (int_64)-3020376800539705344, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$2 = CALL $30(($14 + [128]), $7)
	
.LABEL $label$15
	$12 = *($0)
	*($14 + [24]) = ($14 + [168])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [976])
	CALL $98(($14 + [128]), $2, $12, ($14 + [24]))
	$13 = *($0)
	$9 = (int_64)59
	$2 = [928]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$21 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [165])
	goto $label$19 
	
.LABEL $label$21
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$16 }
	*($14 + [80]) = $11
	*($14 + [72]) = $13
	$10 = (int_64)0
	$12 = (int_64)59
	$2 = [1392]
	$11 = (int_64)0
	
.LOOP $label$22:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$23 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [165])
	goto $label$24 
	
.LABEL $label$25
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$23
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$22 }
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [128]
	$13 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$31 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$7 = ($7 + [165])
	goto $label$29 
	
.LABEL $label$31
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$27
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$26 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$2 = CALL strlen([3248])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$34 }
	*($14 + [8]) = ($2 << [1])
	$7 = (($14 + [8]) | [1])
	if ( $2 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$4 = (($2 + [16]) & [-16])
	$7 = CALL $120($4)
	*($14 + [8]) = ($4 | [1])
	*($14 + [16]) = $7
	*($14 + [12]) = $2
	
.LABEL $label$33
	CALL memcpy($7, [3248], $2)
	
.LABEL $label$32
	*(($7 + $2)) = [0]
	*(($14 + [44])) = *($14 + [172])
	*($14 + [32]) = $1
	*(($14 + [52])) = *(($14 + [180]))
	*(($14 + [48])) = *((($14 + [168]) + [8]))
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($14 + [168])
	$2 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($2)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($2) = [0]
	$2 = CALL $32(($14 + [88]), ($14 + [72]), $11, $13, ($14 + [24]))
	CALL $33(($14 + [224]), $2)
	$7 = *($14 + [224])
	CALL send_inline($7, (*($14 + [228]) - $7))
	$7 = *($14 + [224])
	if ( ($7 == 0) ){ goto $label$35 }
	*($14 + [228]) = $7
	CALL $121($7)
	
.LABEL $label$35
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$36 }
	*(($2 + [32])) = $7
	CALL $121($7)
	
.LABEL $label$36
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$37 }
	*(($2 + [20])) = $7
	CALL $121($7)
	
.LABEL $label$37
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$38 }
	CALL $121(*(($14 + [64])))
	
.LABEL $label$38
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$39 }
	CALL $121(*(($14 + [16])))
	
.LABEL $label$39
	$0 = *($14 + [152])
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = ($14 + [156])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$41 }
	
.LOOP $label$42:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	CALL $121($7)
	
.LABEL $label$43
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$42 }
	$2 = *(($14 + [152]))
	goto $label$40 
	
.LABEL $label$41
	$2 = $0
	
.LABEL $label$40
	*($4) = $0
	CALL $121($2)
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [240])
	return (unreachable)
	
.LABEL $label$3
	CALL $124(($14 + [212]))
	
.LABEL $label$2
	CALL $122(($14 + [8]))
	(int_64)37
	((int_64)$9 << (int_64)16)
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1328])
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $5, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$4 = CALL $120([64])
	$2 = CALL current_time()
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)1397703940
	*($4 + [24]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [608])
	*($4 + [48]) = $1
	CALL $106(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $23(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $121($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	$4 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [1216])
	$5 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [56]) = ($6 + [48])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $105(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [1216])
	$5 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [168]) = ($6 + [152])
	*($6 + [164]) = $6
	*($6 + [160]) = $6
	CALL $90(($6 + [160]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $6, [152])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([40])
	$2 = CALL current_time()
	*($3 + [24]) = $1
	*($3 + [16]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $107(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $25(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $121($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1024])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $120([208])
	CALL $57($3)
	*($3 + [192]) = $1
	CALL $100(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [196])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $121($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	CALL eosio_assert([1], [1328])
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $5, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	$4 = *($1)
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [1328])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $46(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$3 = CALL current_time()
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($4 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [16]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [544])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [608])
	*($0 + [48]) = $1
	$4 = *($2 + [4])
	*($0) = *(*(*($4) + [4]))
	$5 = *($2)
	*($0 + [8]) = *(*(*($4 + [4]) + [4]) + [16])
	$1 = *($4 + [8])
	*($0 + [32]) = *($1)
	*(($0 + [40])) = *(($1 + [8]))
	*(($0 + [24])) = *(*($4 + [12]))
	*($6 + [56]) = ($6 + [48])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $41(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4921565091335241728, *(*($2 + [8])), $3, $6, [48])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1392]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	$8 = [0]
	*(($13 + [40])) = [0]
	*($13 + [24]) = (int_64)-1
	*($13 + [32]) = (int_64)0
	*($13 + [16]) = $2
	*($13 + [8]) = $11
	$10 = (uint_64)$3 >> (uint_64)(int_64)8
	$4 = CALL db_find_i64($11, $2, (int_64)3607749779137757184, $10)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $43(($13 + [8]), $4) + [16]) == (int_32)($13 + [8])), [272])
	$5 = *(($13 + [32]))
	$7 = *(($13 + [36]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$10 }
	$8 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*(*($8) + [8]) >> (uint_64)(int_64)8) == (int_64)$10) ){ goto $label$10 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($13 + [8])), [272])
	goto $label$7 
	
.LABEL $label$9
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [544])
	
.LOOP $label$13:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$4 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($4, [608])
	$7 = *($13 + [32])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = [0]
	$4 = CALL db_find_i64(*($13 + [8]), *(($13 + [16])), (int_64)3607749779137757184, $10)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $43(($13 + [8]), $4)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($13 + [8])), [272])
	
.LABEL $label$7
	*($0) = *($8)
	*(($0 + [8])) = *(($8 + [8]))
	$7 = *($13 + [32])
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = ($13 + [36])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $121($4)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$18 }
	$8 = *(($13 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$8 = $7
	
.LABEL $label$16
	*($6) = $7
	CALL $121($8)
	
.LABEL $label$5
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [208])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$4 = *($1)
	$5 = *($3 + [4])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [176]))), [1216])
	$6 = ((int_64)*($1 + [168]) + (int_64)*($3))
	*($1 + [168]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [1296])
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [80]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*($5 + [48]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($7 + [200]) = ($7 + [192])
	*($7 + [196]) = $7
	*($7 + [192]) = $7
	CALL $42(($7 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $7, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [208])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [208])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	CALL eosio_assert([1], [1328])
	*($5 + [200]) = ($5 + [192])
	*($5 + [196]) = $5
	*($5 + [192]) = $5
	CALL $42(($5 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $5, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [208])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [208])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [192]) == (int_32)$0), [1104])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1152])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [64]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [160]))), [1216])
	$5 = ((int_64)*($1 + [152]) + (int_64)*($3))
	*($1 + [152]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1328])
	*($6 + [200]) = ($6 + [192])
	*($6 + [196]) = $6
	*($6 + [192]) = $6
	CALL $42(($6 + [192]), $1)
	CALL db_update_i64(*($1 + [196]), $2, $6, [192])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [208])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $120([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $50($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $53(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $50($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1088])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1088])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $52(CALL $51($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $120([208])
	$4 = CALL $57($6)
	*($6 + [192]) = $0
	CALL $58(($8 + [32]), $4)
	*($6 + [196]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [196])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $59(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [512])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $120([64])
	$6 = CALL $55($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [52])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $121($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $129 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}