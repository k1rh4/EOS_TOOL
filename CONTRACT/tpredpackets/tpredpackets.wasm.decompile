(data (i32.const 8192) "onerror\00")
(data (i32.const 8200) "eosio\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8292) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8356) "transfer\00")
(data (i32.const 8365) "text\00")
(data (i32.const 8370) "owner_name\00")
(data (i32.const 8381) "logo_url\00")
(data (i32.const 8390) "packet_type\00")
(data (i32.const 8402) "number\00")
(data (i32.const 8409) "packet_id\00")
(data (i32.const 8419) "group_id\00")
(data (i32.const 8428) "receiver_account\00")
(data (i32.const 8446) "string param invalid\00")
(data (i32.const 8467) "broad red packet sender is not correct\00%llu\00")
(data (i32.const 8511) " uint64 param invalid\00")
(data (i32.const 8533) "token amount is lower than account number\00")
(data (i32.const 8575) "active_time\00")
(data (i32.const 8587) "active time is not valid\00")
(data (i32.const 8612) "broad packet: number is too large\00")
(data (i32.const 8646) "number is too large\00")
(data (i32.const 8666) "number is not valid\00")
(data (i32.const 8686) "the red packet has been existed\00")
(data (i32.const 8718) "active time is too long from now\00")
(data (i32.const 8751) "TPT\00")
(data (i32.const 8755) "EOS\00")
(data (i32.const 8759) "BOS\00")
(data (i32.const 8763) "the token has no agent yet\00")
(data (i32.const 8790) "the token contract is not match\00")
(data (i32.const 8822) "dispatcher = %x\00")
(data (i32.const 8838) "to token account\00")
(data (i32.const 8855) "action_type\00")
(data (i32.const 8867) "create_agent\00")
(data (i32.const 8880) "token is not valid for create agent account\00")
(data (i32.const 8924) "agent_account\00")
(data (i32.const 8938) "agent_account param is null \00")
(data (i32.const 8967) "eos chain agent initial amount is not valid\00")
(data (i32.const 9011) "bos chain agent initial amount is not valid\00")
(data (i32.const 9055) "-EOS5TCgRSymgakTC1ki2AjxmzaMTYDAjZZCErogjKrEphkbQvmTZe\00")
(data (i32.const 9110) "agent_token\00")
(data (i32.const 9122) "agent_token_contract\00")
(data (i32.const 9143) " token or token_contract param is empty\00")
(data (i32.const 9183) "symbol is not valid\00")
(data (i32.const 9203) "agent token contract is not valid\00")
(data (i32.const 9237) "the symbol\'s agent has been created\00")
(data (i32.const 9273) "the agent for symbol doesn\'t exist\00")
(data (i32.const 9308) "the agent for symbol has been created\00")
(data (i32.const 9346) "memo has more than 256 bytes\00")
(data (i32.const 9375) "mode\00")
(data (i32.const 9380) "develop\00")
(data (i32.const 9388) "the red packet doesn\'t exist \00")
(data (i32.const 9418) "the user is not allowed to play red packet game\00")
(data (i32.const 9466) "the user has claimed\00")
(data (i32.const 9487) "the packet has been finished\00")
(data (i32.const 9516) "the token has been empty\00")
(data (i32.const 9541) "the packet has not started\00")
(data (i32.const 9568) "the packet has been overtime\00")
(data (i32.const 9597) "\e6\96\b0\e6\98\a5\e5\bf\ab\e4\b9\90\ef\bc\8c\e6\81\ad\e5\96\9c\e5\8f\91\e8\b4\a2\ef\bc\81https://www.tokenpocket.pro\00")
(data (i32.const 9655) ":\00")
(data (i32.const 9657) "&\00")
(data (i32.const 9659) " \00")
(data (i32.const 9661) ",\00")
(data (i32.const 9663) "name should be contract owner\00")
(data (i32.const 9693) "recycle some packets\00")
(data (i32.const 9714) "the red packet is not existed\00")
(data (i32.const 9744) "the red packet is not expired\00")
(data (i32.const 9774) "recycle packet\00")
(data (i32.const 9789) "red packet doesn\'t exist\00")
(data (i32.const 9814) "red packet is not existed\00")
(data (i32.const 9840) "random divide packet has been done\00")
(data (i32.const 9875) "input divide number is not correct\00")
(data (i32.const 9910) " red packet is not existed\00")
(data (i32.const 9937) "it has been in blacker list\00")
(data (i32.const 9965) "it is not in blacker list\00")
(data (i32.const 9991) "string is too long to be a valid name\00")
(data (i32.const 10029) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10096) "character is not in allowed character set for names\00")
(data (i32.const 10148) "string is too long to be a valid symbol_code\00")
(data (i32.const 10193) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10246) "write\00")
(data (i32.const 10252) "read\00")
(data (i32.const 10257) "get\00")
(data (i32.const 10261) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10312) "error reading iterator\00")
(data (i32.const 10335) "cannot create objects in table of another contract\00")
(data (i32.const 10386) "cannot pass end iterator to erase\00")
(data (i32.const 10420) "cannot increment end iterator\00")
(data (i32.const 10450) "object passed to erase is not in multi_index\00")
(data (i32.const 10495) "cannot erase objects in table of another contract\00")
(data (i32.const 10545) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10598) "cannot pass end iterator to modify\00")
(data (i32.const 10633) "object passed to modify is not in multi_index\00")
(data (i32.const 10679) "cannot modify objects in table of another contract\00")
(data (i32.const 10730) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10789) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10841) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10895) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10943) "attempt to add asset with different symbol\00")
(data (i32.const 10986) "addition underflow\00")
(data (i32.const 11005) "addition overflow\00")
(data (i32.const 11023) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 11077) "cannot decrement iterator at beginning of index\00")
(data (i32.const 19552) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$13 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$20 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$23 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$24))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "memset" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $95))
(export "_Znwj" (func $93))
(export "_Znaj" (func $94))
(export "_ZdaPv" (func $96))
(export "_ZnwjSt11align_val_t" (func $97))
(export "_ZnajSt11align_val_t" (func $98))
(export "_ZdlPvSt11align_val_t" (func $99))
(export "_ZdaPvSt11align_val_t" (func $100))
(table $0 20 20 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $15 $16 $18 $20 $22 $23 $24 $25 $26 $28 $119 $121 $123)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19632))
(global $global$2 i32 (i32.const 19632))


int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $135($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $135($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $130(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11128])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $130(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[56])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[56])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($4 + [-56])
	if ( ((*(($4 + [-48])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-40])))
	
.LABEL $label$8
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[56])
	$6 = ( ($1 + ((int_32)$7 * (int_32)[56])) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	$4 = $1
	
.LOOP $label$10:
	*($5) = *($4)
	CALL $104(($5 + [8]), ($4 + [8]))
	*(($5 + [48])) = *(($4 + [48]))
	*(($5 + [40])) = *(($4 + [40]))
	*(($5 + [32])) = *(($4 + [32]))
	*(($5 + [24])) = *(($4 + [24]))
	$5 = ($5 + [56])
	$4 = ($4 + [56])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$5 = (($1 + ((int_32)$7 * (int_32)[56])) + [8])
	$4 = ($0 + [4])
	$1 = *($4)
	
.LOOP $label$12:
	*($1) = *(($5 + [-8]))
	CALL $102(($1 + [8]), $5)
	*(($1 + [48])) = *(($5 + [40]))
	*(($1 + [40])) = *(($5 + [32]))
	*(($1 + [32])) = *(($5 + [24]))
	*($1 + [24]) = *(($5 + [16]))
	$1 = (*($4) + [56])
	*($4) = $1
	$6 = ($5 + [48])
	$5 = ($5 + [56])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$6 = ($0 + [4])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($1 + [-56])
	if ( ((*(($1 + [-48])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-40])))
	
.LABEL $label$15
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$13
	*($6) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[76695845]) ){ goto $label$1 }
	$5 = [76695844]
	$4 = ((int_32)$4 / (int_32)[56])
	if ( ((uint_32)$4 > (uint_32)[38347921]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[56])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	*($5) = *($1)
	CALL $102(($5 + [8]), ($1 + [8]))
	*(($5 + [48])) = *(($1 + [48]))
	*(($5 + [40])) = *(($1 + [40]))
	*(($5 + [32])) = *(($1 + [32]))
	*($5 + [24]) = *(($1 + [24]))
	$5 = (*($4) + [56])
	*($4) = $5
	$1 = ($1 + [56])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $115($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $132($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11128])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $132($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $116())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $131($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $132($1)
	
.LABEL $label$2
	*(CALL $116()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $132(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $135($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $132 (int_32 $0)
{
	return CALL $133([11148], $0)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $134($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8206])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11140]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11144])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11140]) = [1]
	$2 = ($2 << [16])
	*([0] + [11144]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11144])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11144]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11140]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11140]) = [1]
	$3 = ($3 << [16])
	*([0] + [11144]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11144])
	
.LABEL $label$10
	*([0] + [11144]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [18] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $122($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $122($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $122($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $122($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19552]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $122($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $122($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $122($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10312])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10252])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [184])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)7235159537265672192, $1, *($2))
	*(*(($0 + [4])) + [184]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11077])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)7235159537265672192)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11023])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11023])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$6), [10261])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $37($6, CALL $fimport$5(*($6), *($6 + [8]), (int_64)7235159537265672192, $5))
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$6), [10261])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [184])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7235159537265672192, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [176]) == (int_32)$7), [10261])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $37($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)7235159537265672192, $6))
	CALL eosio_assert(((int_32)*($4 + [176]) == (int_32)$7), [10261])
	
.LABEL $label$2
	*(($4 + [184])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10312])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	CALL $87(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [24]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $45($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10246])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10246])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $77(CALL $76($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $45($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $72(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10633])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10679])
	*(($5 = $4) + [16]) = *(($1 + [168]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *($1)
	*((($7 = *($1 + [144])) + ((int_32)*(($8 = *($3))) * (int_32)[56]))) = *(*($3 + [4]))
	CALL $104((($7 + ((int_32)*($8) * (int_32)[56])) + [8]), *($3 + [8]))
	$9 = CALL current_time()
	*((($7 = *($1 + [144])) + ((int_32)*(($3 = *($3))) * (int_32)[56])) + [48]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)-1)
	*($1 + [88]) = (int_64))(*($1 + [88]) - *(($7 + ((int_32)$3 * (int_32)[56])) + [24]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10730])
	*($5) = [0]
	CALL $83($5, $1)
	$7 = *($5)
	if ( ($7 <= [513]) ){ goto $label$2 }
	$3 = CALL $132($7)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$3 }
	CALL $135($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = (($5 + [16]) + [8])
	*($5 + [40]) = *(($1 + [168]))
	if ( (CALL $128(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [184])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($5 + [32]), $6)
	*($4) = $7
	
.LABEL $label$6
	CALL db_idx64_update($7, $2, ($5 + [40]))
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $128($3, ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [188])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($5 + [32]), $6)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)7235159537265672192, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [176]) == (int_32)$7), [10261])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $37($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)7235159537265672192, $6))
	CALL eosio_assert(((int_32)*($4 + [176]) == (int_32)$7), [10261])
	
.LABEL $label$2
	*(($4 + [184])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10246])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10246])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $120([19], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = ($2 + $7)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	$8 = (($4 + [232]) + [8])
	CALL $35(($4 + [216]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($9 = (($4 + [272]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$3 = *($9)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	$8 = CALL $102(($4 + [272]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $102(($4 + [288]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [288]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [272]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$10
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [200]) = $1
	CALL require_auth(*($0))
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [176]) == (int_32)$6), [10261])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)7235159537265672192, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $37($6, $9)
	CALL eosio_assert(((int_32)*($10 + [176]) == (int_32)$6), [10261])
	
.LABEL $label$1
	$11 = [0]
	$12 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($12, [9388])
	$13 = ($0 + [152])
	$8 = *(($0 + [180]))
	$7 = *(($0 + [176]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$9 = ($8 + [-24])
	$14 = *($9)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$7 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)$13), [10261])
	$11 = $14
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*($13), *(($0 + [160])), (int_64)4344997274087063552, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $38($13, $9)
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$13), [10261])
	
.LABEL $label$5
	CALL eosio_assert(($11 == 0), [9418])
	$8 = *(($10 + [148]))
	$9 = *($10 + [144])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$13 }
	$9 = ($9 + [56])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*($10 + [112]) != (int_64)0), [9487])
	CALL eosio_assert(((int_64)*($10 + [88]) > (int_64)0), [9516])
	CALL eosio_assert(((uint_64)*($10 + [160]) <= (uint_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9541])
	$15 = *($10 + [160])
	if ( ((int_64)$15 == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((uint_64)((int_64)$15 + (int_64)86400) > (uint_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9568])
	$15 = *($10 + [56])
	if ( ((int_64)$15 == (int_64)4) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9466])
	$global$0 = ($5 + [224])
	return 
	
.LABEL $label$12
	CALL eosio_assert(((uint_64)((int_64)*($10 + [168]) + (int_64)86400) > (uint_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [9568])
	$15 = *($10 + [56])
	if ( ((int_64)$15 == (int_64)4) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_64)$15 == (int_64)2) ){ goto $label$10 }
	$15 = *(($10 + [112]))
	$16 = *(($10 + [88]))
	$3 = *(($10 + [80]))
	*($5 + [112]) = $1
	$9 = CALL $102(($5 + [120]), $2)
	*(($5 + [144])) = $3
	$15 = ((uint_64)$16 / (uint_64)$15)
	*($5 + [136]) = $15
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = *($0)
	*($5 + [56]) = ($5 + [112])
	CALL eosio_assert($12, [10598])
	CALL $39($6, $10, $1, ($5 + [56]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [128])))
	goto $label$9 
	
.LABEL $label$10
	$9 = ($10 + [144])
	if ( ((int_32)*(($10 + [148])) != (int_32)*($9)) ){ goto $label$16 }
	$8 = CALL $102(($5 + [184]), $4)
	$15 = *(($10 + [96]))
	*((($5 + [168]) + [8])) = $15
	$1 = *($10 + [88])
	*((($5 + [8]) + [8])) = $15
	*($5 + [8]) = $1
	*($5 + [168]) = $1
	CALL $3($0, $3, $8, ($5 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$16
	$1 = (int_64)
	*($5 + [56]) = $1(*($10 + [104]) - *(($10 + [112]))))
	$9 = (*($9) + ((int_32)(CASTING uint_32)(uint_64 $1) * (int_32)[56]))
	$15 = *($9 + [24])
	$3 = *(($9 + [32]))
	$1 = *($0)
	*($5 + [120]) = $2
	*($5 + [116]) = ($5 + [200])
	*($5 + [112]) = ($5 + [56])
	CALL eosio_assert($12, [10598])
	CALL $40($6, $10, $1, ($5 + [112]))
	
.LABEL $label$9
	*($5 + [104]) = [0]
	*($5 + [96]) = (int_64)0
	$9 = ($10 + [16])
	$8 = *($10 + [16])
	$7 = CALL $129([8445])
	if ( ((int_32)$7 != (int_32)( *(($10 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$19 }
	if ( (CALL $113($9, [0], [-1], [8445], $7) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL $104(($5 + [96]), $9)
	goto $label$17 
	
.LABEL $label$18
	CALL $107(($5 + [96]), [9597])
	
.LABEL $label$17
	$9 = CALL $129([8751])
	if ( ($9 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [10148])
	goto $label$22 
	
.LABEL $label$23
	if ( ($9 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$1 = (int_64)0
	
.LOOP $label$24:
	$8 = *(($9 + [8750]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$25
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$24 }
	goto $label$20 
	
.LABEL $label$21
	$1 = (int_64)0
	
.LABEL $label$20
	if ( ((int_64)*(($10 + [96])) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$29 }
	$16 = (int_64)6138664019028088112
	if ( ((int_64)*($10 + [64]) == (int_64)6138664019028088112) ){ goto $label$28 }
	
.LABEL $label$29
	$9 = CALL $129([8755])
	if ( ($9 <= [8]) ){ goto $label$33 }
	CALL eosio_assert([0], [10148])
	goto $label$32 
	
.LABEL $label$33
	if ( ($9 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$1 = (int_64)0
	
.LOOP $label$34:
	$8 = *(($9 + [8754]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$35
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$34 }
	goto $label$30 
	
.LABEL $label$31
	$1 = (int_64)0
	
.LABEL $label$30
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	if ( ((int_64)*(($10 + [96])) == (int_64)$1) ){ goto $label$36 }
	$9 = CALL $129([8759])
	if ( ($9 <= [8]) ){ goto $label$40 }
	CALL eosio_assert([0], [10148])
	goto $label$39 
	
.LABEL $label$40
	if ( ($9 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$1 = (int_64)0
	
.LOOP $label$41:
	$8 = *(($9 + [8758]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$42
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$41 }
	goto $label$37 
	
.LABEL $label$38
	$1 = (int_64)0
	
.LABEL $label$37
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$17 = *(($10 + [96]))
	if ( ((int_64)$17 != (int_64)$1) ){ goto $label$27 }
	
.LABEL $label$36
	$16 = (int_64)6138663591592764928
	$17 = $1
	if ( ((int_64)*($10 + [64]) != (int_64)6138663591592764928) ){ goto $label$27 }
	
.LABEL $label$28
	*($5 + [48]) = (int_64)3617214756542218240
	*($5 + [40]) = *($0)
	$8 = CALL $102(($5 + [24]), ($5 + [96]))
	*(($5 + [136])) = $3
	$9 = *(($5 + [32]))
	$1 = *($5 + [24])
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	*(($5 + [152])) = $9
	*($5 + [128]) = $15
	*($5 + [112]) = *($0)
	*($5 + [120]) = *($5 + [200])
	*($5 + [144]) = $1
	$9 = CALL $41(($5 + [56]), ($5 + [40]), $16, (int_64)-3617168760277827584, ($5 + [112]))
	CALL $42(($5 + [208]), $9)
	$7 = *($5 + [208])
	CALL send_inline($7, (*($5 + [212]) - $7))
	$7 = *($5 + [208])
	if ( ($7 == 0) ){ goto $label$43 }
	*($5 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$43
	$7 = *($9 + [28])
	if ( ($7 == 0) ){ goto $label$44 }
	*(($9 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($9 + [16])
	if ( ($7 == 0) ){ goto $label$45 }
	*(($9 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	if ( ((*(($5 + [144])) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($5 + [152])))
	
.LABEL $label$46
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($8 + [8])))
	goto $label$26 
	
.LABEL $label$27
	$1 = (uint_64)$17 >> (uint_64)(int_64)8)
	$6 = ($0 + [72])
	$7 = *(($0 + [100]))
	$14 = *(($0 + [96]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$48 }
	
.LOOP $label$50:
	$9 = ($7 + [-24])
	$8 = *($9)
	if ( ((int_64)(uint_64)*(($8 + [24])) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$49 }
	$7 = $9
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$48 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [10261])
	goto $label$47 
	
.LABEL $label$48
	$8 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)3680914790898728960, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$47 }
	$8 = CALL $43($6, $9)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [10261])
	
.LABEL $label$47
	$13 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($13, [8763])
	CALL eosio_assert(((int_64)*($8 + [32]) == (int_64)*($10 + [64])), [8790])
	$1 = *($8)
	*($5 + [48]) = (int_64)3617214756542218240
	*($5 + [40]) = $1
	$16 = *($10 + [64])
	$7 = CALL $102(($5 + [24]), ($5 + [96]))
	*(($5 + [136])) = $3
	$9 = *(($5 + [32]))
	$17 = *($5 + [24])
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	*(($5 + [152])) = $9
	*($5 + [112]) = $1
	*($5 + [128]) = $15
	*($5 + [120]) = *($5 + [200])
	*($5 + [144]) = $17
	$9 = CALL $41(($5 + [56]), ($5 + [40]), $16, (int_64)-3617168760277827584, ($5 + [112]))
	CALL $42(($5 + [208]), $9)
	$14 = *($5 + [208])
	CALL send_inline($14, (*($5 + [212]) - $14))
	$14 = *($5 + [208])
	if ( ($14 == 0) ){ goto $label$51 }
	*($5 + [212]) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$51
	$14 = *($9 + [28])
	if ( ($14 == 0) ){ goto $label$52 }
	*(($9 + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$52
	$14 = *($9 + [16])
	if ( ($14 == 0) ){ goto $label$53 }
	*(($9 + [20])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$53
	if ( ((*(($5 + [144])) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($5 + [152])))
	
.LABEL $label$54
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$55
	$16 = *($0)
	CALL eosio_assert($13, [10598])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$6), [10633])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$8()), [10679])
	$9 = ($8 + [24])
	$1 = *($9)
	CALL eosio_assert(((int_64)$3 == (int_64)$1), [10943])
	$3 = ((int_64)*($8 + [16]) + (int_64)$15)
	*($8 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10986])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [11005])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($9) >> (uint_64)(int_64)8)), [10730])
	*($5 + [64]) = (($5 + [112]) + [48])
	*($5 + [60]) = ($5 + [112])
	*($5 + [56]) = ($5 + [112])
	CALL $44(($5 + [56]), $8)
	CALL db_update_i64(*($8 + [52]), $16, ($5 + [112]), [48])
	$9 = ($0 + [88])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$26 }
	*($9) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$26
	if ( ((int_64)*(($10 + [112])) != (int_64)0) ){ goto $label$56 }
	$1 = *($0)
	CALL $114(($5 + [208]), *($10))
	$9 = (($5 + [208]) + [8])
	*((($5 + [40]) + [8])) = *($9)
	*($9) = [0]
	*($5 + [112]) = $1
	*($5 + [120]) = (int_64)-5003315193367756800
	*($5 + [40]) = *($5 + [208])
	*($5 + [208]) = (int_64)0
	*(($9 = CALL _Znwj([16]))) = $1
	*($9 + [8]) = (int_64)3617214756542218240
	*(($5 + [148])) = [0]
	$8 = ($9 + [16])
	*(($5 + [136])) = $8
	*(($5 + [132])) = $8
	*($5 + [128]) = $9
	*($5 + [140 align=4]) = (int_64)0
	$9 = *($5 + [40])
	$9 = ( *($5 + [44]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$1 = (CASTING uint_64)(uint_32 $9)
	$8 = ($5 + [140])
	
.LOOP $label$57:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$57 }
	if ( ($9 == 0) ){ goto $label$59 }
	CALL $45($8, $9)
	$8 = *(($5 + [144]))
	$9 = *(($5 + [140]))
	goto $label$58 
	
.LABEL $label$59
	$8 = [0]
	$9 = [0]
	
.LABEL $label$58
	*($5 + [60]) = $9
	*($5 + [56]) = $9
	*($5 + [64]) = $8
	CALL $46(($5 + [56]), ($5 + [40]))
	CALL $42(($5 + [56]), ($5 + [112]))
	$9 = *($5 + [56])
	CALL send_inline($9, (*($5 + [60]) - $9))
	$9 = *($5 + [56])
	if ( ($9 == 0) ){ goto $label$60 }
	*($5 + [60]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$60
	$9 = *($5 + [140])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($5 + [144])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$61
	$9 = *($5 + [128])
	if ( ($9 == 0) ){ goto $label$62 }
	*(($5 + [132])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$62
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*($5 + [48]))
	
.LABEL $label$63
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($5 + [216])))
	
.LABEL $label$56
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$64
	$global$0 = ($5 + [224])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [248]) + [24]))) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [236]) = $2
	*($4 + [232]) = $2
	*($4 + [240]) = ($2 + $7)
	*($4 + [320]) = ($4 + [232])
	*($4 + [40]) = ($4 + [248])
	CALL $61(($4 + [40]), ($4 + [320]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [240])
	*($4 + [24]) = *($4 + [232])
	$10 = *($9)
	*(($3 = (($4 + [288]) + [8]))) = $10
	*(($9 = (($4 + [304]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [304]) = $11
	*($4 + [288]) = $11
	$10 = *($9)
	*((($4 + [320]) + [8])) = $10
	*((($4 + [40]) + [24])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [304])
	*($4 + [56]) = $1
	*($4 + [320]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [200])) = $0
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*($3) = *($8)
	*($4 + [288]) = *($4 + [264])
	$0 = *($4 + [256])
	$1 = *($4 + [248])
	$11 = *($4 + [280])
	*($9) = *($3)
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [304]) + [8]))
	*((($4 + [320]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	$12 = *($4 + [304])
	*($4 + [8]) = $12
	*($4 + [320]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $11), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [40]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$4), [10261])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $37($4, $7)
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$4), [10261])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9910])
	$1 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert($7, [10598])
	CALL $65($4, $8, $1, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [264]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [240])) = [0]
	*(($4 + [256])) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $5)
	*($4 + [304]) = ($4 + [208])
	*($4 + [16]) = ($4 + [224])
	CALL $55(($4 + [16]), ($4 + [304]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($6 = (($4 + [288]) + [8]))) = $3
	$7 = *($4)
	*($4 + [288]) = $7
	*($4 + [272]) = $7
	$3 = *($6)
	*((($4 + [304]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [288])
	*($4 + [32]) = $1
	*($4 + [304]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [308]) = ($4 + [264])
	*($4 + [304]) = ($4 + [16])
	CALL $56(($4 + [304]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $135($2)
	
.LABEL $label$4
	CALL $29(($4 + [16]))
	if ( ((*($4 + [232]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [240])))
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = ($0 + [72])
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)(uint_64)*(($11 + [24])) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$6), [10261])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)3680914790898728960, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $43($6, $10)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$6), [10261])
	
.LABEL $label$1
	CALL eosio_assert(($11 == 0), [9308])
	$7 = *($0)
	if ( ($11 == 0) ){ goto $label$6 }
	CALL eosio_assert([1], [10598])
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$6), [10633])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$8()), [10679])
	*($11) = $1
	*($11 + [8]) = $2
	*($11 + [16]) = *($3)
	$1 = *(($3 + [8]))
	*($11 + [32]) = $4
	$10 = ($11 + [24])
	$2 = *($10)
	*($10) = $1
	*($11 + [16]) = (int_64)0
	*($11 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($10) >> (uint_64)(int_64)8)), [10730])
	*($5 + [72]) = ($5 + [48])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $44(($5 + [64]), $11)
	CALL db_update_i64(*($11 + [52]), $7, $5, [48])
	$10 = ($0 + [88])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$5 }
	*($10) = ((int_64)$1 + (int_64)1)
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$8()), [10335])
	*(($10 = CALL _Znwj([64])) + [48]) = $6
	*($10 + [8]) = $2
	*($10) = $1
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = $4
	*($10 + [24]) = *(($3 + [8]))
	*($10 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [72]) = ($5 + [48])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $44(($5 + [64]), $10)
	$1 = (uint_64)*($10 + [24]) >> (uint_64)(int_64)8
	$11 = CALL db_store_i64(*(($0 + [80])), (int_64)3680914790898728960, $7, $1), $5, [48]
	*($10 + [52]) = $11)
	$9 = ($0 + [88])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$7 }
	*($9) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$7
	*($5 + [64]) = $10
	$7 = (uint_64)*(($10 + [24])) >> (uint_64)(int_64)8
	*($5) = $7)
	*($5 + [60]) = $11
	$8 = ($0 + [100])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($9 + [8]) = $7
	*($9 + [16]) = $11
	*($5 + [64]) = [0]
	*($9) = $10
	*($8) = ($9 + [24])
	$10 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( $10 ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	CALL $62(($0 + [96]), ($5 + [64]), $5, ($5 + [60]))
	$10 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( ($10 == 0) ){ goto $label$5 }
	
.LABEL $label$8
	CALL _ZdlPv($10)
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9991])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10096])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10029])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10096])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [176]) == (int_32)$5), [10261])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $37($5, $8)
	CALL eosio_assert(((int_32)*($9 + [176]) == (int_32)$5), [10261])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [9814])
	CALL eosio_assert(((int_32)*(($9 + [148])) == (int_32)*($9 + [144])), [9840])
	*($4 + [120]) = [0]
	*($4 + [112]) = (int_64)0
	$8 = CALL $102(($4 + [96]), $2)
	CALL $57($4, $8, ($4 + [112]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$5
	CALL eosio_assert(((int_64)*($9 + [104]) == (int_64)(CASTING uint_64)(uint_32 int_32((*($4 + [116]) - *($4 + [112])) >> [3]))), [9875])
	*($4 + [88]) = [0]
	*($4 + [80]) = (int_64)0
	$6 = (($4 + [24]) + [24])
	$11 = ($4 + [33])
	$7 = (($4 + [24]) + [8])
	$8 = *($4 + [112])
	$12 = (($4 + [24]) + [40])
	$13 = (($4 + [24]) + [48])
	$14 = (($4 + [24]) + [16])
	$15 = ($4 + [36])
	$16 = [0]
	$1 = (int_64)0
	$17 = (int_64)0
	$18 = (int_64)0
	
.LOOP $label$7:
	$19 = *(($8 + $16))
	*($3) = $19
	*($4 + [16]) = [8445]
	*($4 + [20]) = CALL $129([8445])
	*($4 + [8]) = *($4 + [16])
	CALL $2(($4 + [24]), ($4 + [8]))
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$8 = CALL $129([8445])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($7) = ($8 << [1])
	$2 = $11
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$20 = (($8 + [16]) & [-16])
	$2 = CALL _Znwj($20)
	*($7) = ($20 | [1])
	*($14) = $2
	*($15) = $8
	
.LABEL $label$9
	CALL memcpy($2, [8445], $8)
	
.LABEL $label$8
	*(($2 + $8)) = [0]
	*($12) = (int_64)0
	*($13) = (int_64)0
	*(($2 = ($6 + [8]))) = *(($3 + [8]))
	*($6) = *($3)
	$8 = *($4 + [84])
	if ( ((int_32)$8 != (int_32)*((($4 + [80]) + [8]))) ){ goto $label$13 }
	CALL $58(($4 + [80]), ($4 + [24]))
	$8 = ((uint_64)$19 > (uint_64)$17)
	if ( (*($7) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	*($8) = *($4 + [24])
	CALL $102(($8 + [8]), $7)
	*(($8 + [48])) = *(($6 + [24]))
	*(($8 + [40])) = *(($6 + [16]))
	*(($8 + [32])) = *($2)
	*($8 + [24]) = *($6)
	*($4 + [84]) = (*($4 + [84]) + [56])
	$8 = ((uint_64)$19 > (uint_64)$17)
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($14))
	
.LABEL $label$11
	$17 = ( $19 ? $17 : $8 )
	$18 = ( $1 ? $18 : $8 )
	$16 = ($16 + [8])
	$8 = *($4 + [112])
	$1 = ((int_64)$1 + (int_64)1)
	if ( (uint_64)($1 <= (CASTING uint_64)(uint_32 int_32((*($4 + [116]) - $8) >> [3]))) ){ goto $label$7 }
	*((*($4 + [80]) + ((int_32)(CASTING uint_32)(uint_64 $18) * (int_32)[56])) + [40]) = (int_64)1
	$1 = *($0)
	*($4 + [24]) = ($4 + [80])
	CALL eosio_assert($10, [10598])
	CALL $59($5, $9, $1, ($4 + [24]))
	$6 = *($4 + [80])
	if ( ($6 == 0) ){ goto $label$14 }
	$8 = *($4 + [84])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($8 + [-56])
	if ( ((*(($8 + [-48])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [-40])))
	
.LABEL $label$18
	$8 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$17 }
	$8 = *($4 + [80])
	goto $label$15 
	
.LABEL $label$16
	$8 = $6
	
.LABEL $label$15
	*($4 + [84]) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($4 + [112])
	if ( ($8 == 0) ){ goto $label$19 }
	*($4 + [116]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$19
	$global$0 = ($4 + [128])
	return (unreachable)
	
.LABEL $label$6
	CALL $101($7)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [560])
	$global$0 = $3
	CALL memory()
	*($3 + [552]) = [8192]
	*($3 + [556]) = CALL $129([8192])
	*($3 + [168]) = *($3 + [552])
	CALL $2(($3 + [352]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [544]) = [8200]
	*($3 + [548]) = CALL $129([8200])
	*($3 + [160]) = *($3 + [544])
	CALL $2(($3 + [352]), ($3 + [160]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8292])
	
.LABEL $label$1
	*(($3 + [376])) = [0]
	*(($3 + [392])) = $0
	*(($3 + [400])) = (int_64)-1
	*(($3 + [408])) = (int_64)0
	*(($3 + [416])) = [0]
	*(($3 + [420])) = [0]
	*(($3 + [432])) = $0
	*(($3 + [440])) = (int_64)-1
	*(($3 + [448])) = (int_64)0
	*(($3 + [456])) = [0]
	*(($3 + [472])) = $0
	*(($3 + [480])) = (int_64)-1
	*($3 + [352]) = $0
	*($3 + [368]) = (int_64)0
	*($3 + [384]) = $0
	*($3 + [424]) = $0
	*($3 + [464]) = $0
	*($3 + [360]) = $1
	*(($3 + [496])) = [0]
	*(($3 + [488])) = (int_64)0
	*(($3 + [500])) = [0]
	*(($3 + [512])) = $0
	*(($3 + [520])) = (int_64)-1
	*(($3 + [528])) = (int_64)0
	*(($3 + [536])) = [0]
	*($3 + [504]) = $0
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	*($3 + [336]) = [8356]
	*($3 + [340]) = CALL $129([8356])
	*($3 + [152]) = *($3 + [336])
	CALL $2(($3 + [344]), ($3 + [152]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [320]) = [8192]
	*($3 + [324]) = CALL $129([8192])
	*($3 + [144]) = *($3 + [320])
	CALL $2(($3 + [328]), ($3 + [144]))
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-6569208335818555392) ){ goto $label$5 }
	*($3 + [304]) = [8356]
	*($3 + [308]) = CALL $129([8356])
	*($3 + [136]) = *($3 + [304])
	$4 = ((int_64)$2 == (int_64)-3617168760277827584)
	CALL $2(($3 + [312]), ($3 + [136]))
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$20 }
	if ( ((int_64)$2 > (int_64)-5002966724820889089) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)-5003315193367756801) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-8279867914920656896) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-5069194696530591744) ){ goto $label$2 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [1]
	*($3 + [40]) = *($3 + [264])
	CALL $4($0, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$20
	if ( ((int_64)$2 > (int_64)4730614989750149119) ){ goto $label$18 }
	if ( ((int_64)$2 > (int_64)3626093248780435455) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3626072982591373312) ){ goto $label$2 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [2]
	*($3 + [72]) = *($3 + [232])
	CALL $6($0, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)-4417017204164263937) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-5002966724820889088) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417022470649806848) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [3]
	*($3 + [88]) = *($3 + [216])
	CALL $8($0, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_64)$2 > (int_64)5031766155918111263) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)4730614989750149120) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$2 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [4]
	*($3 + [16]) = *($3 + [288])
	CALL $10($0, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5002966724954292224) ){ goto $label$2 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [5]
	*($3 + [24]) = *($3 + [280])
	CALL $12($0, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)3626093248780435456) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4730614989131674112) ){ goto $label$2 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [6]
	*($3 + [64]) = *($3 + [240])
	CALL $14($0, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4417017204164263936) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$2 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [104]) = *($3 + [200])
	CALL $12($0, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5031766155918111264) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6182744098496053248) ){ goto $label$2 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [8]
	*($3 + [32]) = *($3 + [272])
	CALL $17($0, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$13
	*($3 + [180]) = [0]
	*($3 + [176]) = [9]
	*($3 + [128]) = *($3 + [176])
	CALL $19($0, $1, ($3 + [128]))
	goto $label$2 
	
.LABEL $label$12
	*($3 + [300]) = [0]
	*($3 + [296]) = [10]
	*($3 + [8]) = *($3 + [296])
	CALL $21($0, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$11
	*($3 + [252]) = [0]
	*($3 + [248]) = [11]
	*($3 + [56]) = *($3 + [248])
	CALL $17($0, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$10
	*($3 + [188]) = [0]
	*($3 + [184]) = [12]
	*($3 + [120]) = *($3 + [184])
	CALL $12($0, $1, ($3 + [120]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [260]) = [0]
	*($3 + [256]) = [13]
	*($3 + [48]) = *($3 + [256])
	CALL $19($0, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [196]) = [0]
	*($3 + [192]) = [14]
	*($3 + [112]) = *($3 + [192])
	CALL $12($0, $1, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [212]) = [0]
	*($3 + [208]) = [15]
	*($3 + [96]) = *($3 + [208])
	CALL $27($0, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [228]) = [0]
	*($3 + [224]) = [16]
	*($3 + [80]) = *($3 + [224])
	CALL $12($0, $1, ($3 + [80]))
	
.LABEL $label$2
	CALL $29(($3 + [352]))
	CALL $117([0])
	$global$0 = ($3 + [560])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [208]), $2, [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10252])
	CALL memcpy(($4 + [16]), ($2 + [8]), [8])
	*($4 + [216]) = *($4 + [16])
	*(($4 + [36])) = ($2 + [16])
	*(($4 + [40])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [136])) = $0
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [168]) = $0
	*(($3 = (($4 + [224]) + [8]))) = *($4 + [216])
	*($4 + [224]) = *($4 + [208])
	*((($4 + [240]) + [8])) = *($3)
	*($4 + [240]) = *($4 + [224])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$0 = *((($4 + [240]) + [8]))
	*((($4 + [256]) + [8])) = $0
	*(($4 + [8])) = $0
	$0 = *($4 + [240])
	*($4) = $0
	*($4 + [256]) = $0
	CALL void $3((int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [16]))
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)3680914790898728960, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $43($3, $0)
	
.LABEL $label$1
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($0, [10386])
	CALL eosio_assert($0, [10420])
	$0 = CALL db_next_i64(*($4 + [52]), ($2 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $43($3, $0)
	
.LABEL $label$2
	CALL $60($3, $4)
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$3), [10261])
	$1 = (int_64)0
	if ( ((int_64)*($7 + [112]) != (int_64)0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $37($3, $6)
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$3), [10261])
	$1 = (int_64)0
	if ( ((int_64)*($7 + [112]) == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$1
	*((($0 = CALL $53(($2 + [8]), CALL $52($3, *($7), [9789]))) + [152])) = [0]
	$4 = *($0 + [144])
	$6 = *(($0 + [148]))
	*($0 + [144]) = $1
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($6 + [-56])
	if ( ((*(($6 + [-48])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($6 + [-40])))
	
.LABEL $label$9
	$6 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL eosio_assert([1], [10386])
	CALL eosio_assert([1], [10420])
	$6 = CALL db_next_i64(*($7 + [180]), ($2 + [184]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	CALL $37($3, $6)
	
.LABEL $label$10
	CALL $51($3, $7)
	CALL $54($0)
	$global$0 = ($2 + [192])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*((($4 + [232]) + [40])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [224]) = ($2 + $5)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	CALL $35(($4 + [216]), (($4 + [232]) + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [224]) - *($4 + [220])) > (uint_32)[7]), [10252])
	CALL memcpy((($4 + [232]) + [24]), *($4 + [220]), [8])
	*($4 + [220]) = (*($4 + [220]) + [8])
	CALL $35(($4 + [216]), ($4 + [264]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $36(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $135($2)
	
.LABEL $label$4
	CALL $29(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$5
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$6
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_64 $22
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [9663])
	CALL require_auth(*($0))
	*($2 + [168]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)4294880896) & (int_64)4294967295)
	$3 = ($0 + [32])
	*($2 + [160]) = $3
	CALL $47(($2 + [152]), ($2 + [160]), ($2 + [168]))
	*($2 + [144]) = [0]
	*($2 + [136]) = (int_64)0
	if ( *($2 + [156]) ){ goto $label$4 }
	*($2 + [24]) = (int_64)0
	CALL $48(($2 + [88]), ($2 + [160]), ($2 + [24]))
	if ( (*($2 + [92]) == 0) ){ goto $label$3 }
	CALL $49(($2 + [152]))
	
.LABEL $label$4
	$1 = *($2 + [152])
	*($2 + [128]) = $1
	$4 = ($0 + [72])
	$5 = (($2 + [24]) + [32])
	$6 = (($2 + [24]) + [16])
	$7 = (($2 + [8]) | [1])
	$8 = ($2 + [116])
	$9 = ($2 + [64])
	$10 = ($2 + [108])
	$11 = ($0 + [100])
	$12 = ($0 + [80])
	$13 = (int_64)0
	$1 = *($2 + [168])
	$14 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((uint_64)*($14) + [168]) > (uint_64)$1) ){ goto $label$2 }
	$15 = [18]
	goto $label$1 
	
.LABEL $label$3
	$16 = *($2 + [136])
	if ( $16 ){ goto $label$5 }
	$15 = [14]
	goto $label$1 
	
.LABEL $label$5
	$15 = [13]
	goto $label$1 
	
.LABEL $label$2
	$15 = [83]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$99 
	
.LABEL $label$157
	if ( ((uint_64)*($14 + [160]) > (uint_64)$1) ){ goto $label$71 }
	$15 = [19]
	goto $label$6 
	
.LABEL $label$156
	if ( ((int_64)*($14 + [88]) < (int_64)1) ){ goto $label$52 }
	$15 = [24]
	goto $label$6 
	
.LABEL $label$155
	$16 = CALL $129([8751])
	if ( ($16 <= [8]) ){ goto $label$49 }
	$15 = [82]
	goto $label$6 
	
.LABEL $label$154
	CALL eosio_assert([0], [10148])
	goto $label$47 
	
.LABEL $label$153
	if ( ($16 == 0) ){ goto $label$48 }
	$15 = [26]
	goto $label$6 
	
.LABEL $label$152
	$1 = (int_64)0
	$15 = [27]
	goto $label$6 
	
.LABEL $label$151
	$17 = *(($16 + [8750]))
	if ( ((($17 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	$15 = [80]
	goto $label$6 
	
.LABEL $label$150
	CALL eosio_assert([0], [10193])
	$15 = [28]
	goto $label$6 
	
.LABEL $label$149
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56))
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$46 }
	$15 = [29]
	goto $label$6 
	
.LABEL $label$148
	$18 = *($2 + [132])
	if ( ((int_64)*(($14 + [96])) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$43 }
	$15 = [78]
	goto $label$6 
	
.LABEL $label$147
	$19 = (int_64)6138664019028088112
	if ( ((int_64)*($18 + [64]) != (int_64)6138664019028088112) ){ goto $label$42 }
	$15 = [79]
	goto $label$6 
	
.LABEL $label$146
	$14 = $0
	goto $label$18 
	
.LABEL $label$145
	$16 = CALL $129([8755])
	if ( ($16 <= [8]) ){ goto $label$41 }
	$15 = [77]
	goto $label$6 
	
.LABEL $label$144
	CALL eosio_assert([0], [10148])
	goto $label$39 
	
.LABEL $label$143
	if ( ($16 == 0) ){ goto $label$40 }
	$15 = [32]
	goto $label$6 
	
.LABEL $label$142
	$1 = (int_64)0
	$15 = [33]
	goto $label$6 
	
.LABEL $label$141
	$17 = *(($16 + [8754]))
	if ( ((($17 + [-65]) & [255]) <= [26]) ){ goto $label$37 }
	$15 = [75]
	goto $label$6 
	
.LABEL $label$140
	CALL eosio_assert([0], [10193])
	$15 = [34]
	goto $label$6 
	
.LABEL $label$139
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56))
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$38 }
	$15 = [35]
	goto $label$6 
	
.LABEL $label$138
	$16 = ($18 + [96])
	$18 = *($2 + [132])
	if ( ((int_64)*($16) == (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$35 }
	$15 = [36]
	goto $label$6 
	
.LABEL $label$137
	$16 = CALL $129([8759])
	if ( ($16 <= [8]) ){ goto $label$34 }
	$15 = [74]
	goto $label$6 
	
.LABEL $label$136
	CALL eosio_assert([0], [10148])
	goto $label$32 
	
.LABEL $label$135
	$1 = (int_64)0
	goto $label$44 
	
.LABEL $label$134
	if ( ($16 == 0) ){ goto $label$33 }
	$15 = [38]
	goto $label$6 
	
.LABEL $label$133
	$1 = (int_64)0
	$15 = [39]
	goto $label$6 
	
.LABEL $label$132
	$17 = *(($16 + [8758]))
	if ( ((($17 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	$15 = [72]
	goto $label$6 
	
.LABEL $label$131
	CALL eosio_assert([0], [10193])
	$15 = [40]
	goto $label$6 
	
.LABEL $label$130
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56))
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$31 }
	$15 = [41]
	goto $label$6 
	
.LABEL $label$129
	$16 = ($18 + [96])
	$18 = *($2 + [132])
	if ( ((int_64)*($16) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$28 }
	$15 = [71]
	goto $label$6 
	
.LABEL $label$128
	$19 = (int_64)6138663591592764928
	$14 = $0
	if ( ((int_64)*($18 + [64]) == (int_64)6138663591592764928) ){ goto $label$27 }
	$15 = [42]
	goto $label$6 
	
.LABEL $label$127
	$1 = (uint_64)*(($18 + [96])) >> (uint_64)(int_64)8)
	$17 = *($11)
	$18 = *(($0 + [96]))
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$24 }
	$15 = [43]
	goto $label$6 
	
.LABEL $label$126
	$16 = ($17 + [-24])
	$14 = *($16)
	if ( ((int_64)(uint_64)*(($14 + [24])) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$23 }
	$15 = [44]
	goto $label$6 
	
.LABEL $label$125
	$17 = $16
	if ( ((int_32)$18 != (int_32)$16) ){ goto $label$25 }
	goto $label$26 
	
.LABEL $label$124
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$22 }
	$15 = [70]
	goto $label$6 
	
.LABEL $label$123
	CALL eosio_assert(((int_32)*($14 + [48]) == (int_32)$4), [10261])
	if ( $14 ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$122
	$16 = CALL db_find_i64(*($4), *($12), (int_64)3680914790898728960, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$21 }
	$15 = [46]
	goto $label$6 
	
.LABEL $label$121
	$14 = CALL $43($4, $16)
	CALL eosio_assert(((int_32)*($14 + [48]) == (int_32)$4), [10261])
	$15 = [47]
	goto $label$6 
	
.LABEL $label$120
	$18 = *($2 + [132])
	$19 = *($18 + [64])
	$15 = [48]
	goto $label$6 
	
.LABEL $label$119
	$1 = *($14)
	*((($2 + [72]) + [8])) = (int_64)3617214756542218240
	*($2 + [72]) = $1
	*(($17 = (($2 + [8]) + [8]))) = [0]
	*($2 + [8]) = (int_64)0
	$16 = CALL $129([9693])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$17 }
	$15 = [49]
	goto $label$6 
	
.LABEL $label$118
	$14 = ($18 + [88])
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$16 }
	$15 = [63]
	goto $label$6 
	
.LABEL $label$117
	*($2 + [8]) = ($16 << [1])
	$20 = $7
	if ( $16 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$116
	$21 = (($16 + [16]) & [-16])
	$20 = CALL _Znwj($21)
	*($17) = $20
	*($2 + [8]) = ($21 | [1])
	*($2 + [12]) = $16
	$15 = [51]
	goto $label$6 
	
.LABEL $label$115
	CALL memcpy($20, [9693], $16)
	$15 = [52]
	goto $label$6 
	
.LABEL $label$114
	*(($20 + $16)) = [0]
	$22 = *($18 + [8])
	*($6) = *($14)
	*(($6 + [8])) = *(($14 + [8]))
	*($5) = *($2 + [8])
	*(($5 + [8])) = *($17)
	*((($2 + [24]) + [8])) = $22
	*($17) = [0]
	*($2 + [24]) = $1
	*($2 + [8]) = (int_64)0
	CALL $42(($2 + [176]), CALL $41(($2 + [88]), ($2 + [72]), $19, (int_64)-3617168760277827584, ($2 + [24])))
	$16 = *($2 + [176])
	CALL send_inline($16, (*($2 + [180]) - $16))
	$16 = *($2 + [176])
	if ( ($16 == 0) ){ goto $label$13 }
	$15 = [53]
	goto $label$6 
	
.LABEL $label$113
	*($2 + [180]) = $16
	CALL _ZdlPv($16)
	$15 = [54]
	goto $label$6 
	
.LABEL $label$112
	$16 = *($8)
	if ( ($16 == 0) ){ goto $label$12 }
	$15 = [55]
	goto $label$6 
	
.LABEL $label$111
	*((($2 + [88]) + [32])) = $16
	CALL _ZdlPv($16)
	$15 = [56]
	goto $label$6 
	
.LABEL $label$110
	$16 = *((($2 + [88]) + [16]))
	if ( ($16 == 0) ){ goto $label$11 }
	$15 = [57]
	goto $label$6 
	
.LABEL $label$109
	*($10) = $16
	CALL _ZdlPv($16)
	$15 = [58]
	goto $label$6 
	
.LABEL $label$108
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	$15 = [59]
	goto $label$6 
	
.LABEL $label$107
	CALL _ZdlPv(*($9))
	$15 = [60]
	goto $label$6 
	
.LABEL $label$106
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$9 }
	$15 = [61]
	goto $label$6 
	
.LABEL $label$105
	CALL _ZdlPv(*($17))
	$15 = [62]
	goto $label$6 
	
.LABEL $label$104
	$14 = *($2 + [132])
	$15 = [20]
	goto $label$6 
	
.LABEL $label$103
	$16 = *($2 + [140])
	if ( ((int_32)$16 == (int_32)*((($2 + [136]) + [8]))) ){ goto $label$51 }
	$15 = [21]
	goto $label$6 
	
.LABEL $label$102
	*($16) = *($14)
	*($2 + [140]) = ($16 + [8])
	goto $label$50 
	
.LABEL $label$101
	CALL $50(($2 + [136]), $14)
	$15 = [22]
	goto $label$6 
	
.LABEL $label$100
	*($2 + [24]) = (int_64)0
	CALL $48(($2 + [88]), ($2 + [160]), ($2 + [24]))
	if ( ((int_32)*($2 + [132]) == (int_32)*($2 + [92])) ){ goto $label$66 }
	$15 = [0]
	goto $label$6 
	
.LABEL $label$99
	CALL $49(($2 + [128]))
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((uint_64)$13 <= (uint_64)(int_64)9) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$98
	$17 = *($2 + [132])
	$16 = *($2 + [140])
	if ( ((int_32)$16 == (int_32)*((($2 + [136]) + [8]))) ){ goto $label$8 }
	$15 = [66]
	goto $label$6 
	
.LABEL $label$97
	*($16) = *($17)
	*($2 + [140]) = ($16 + [8])
	goto $label$7 
	
.LABEL $label$96
	$1 = (int_64)0
	goto $label$36 
	
.LABEL $label$95
	$1 = (int_64)0
	goto $label$29 
	
.LABEL $label$94
	CALL $50(($2 + [136]), $17)
	$15 = [67]
	goto $label$6 
	
.LABEL $label$93
	*($2 + [24]) = (int_64)0
	CALL $48(($2 + [88]), ($2 + [160]), ($2 + [24]))
	if ( ((int_32)*($2 + [132]) != (int_32)*($2 + [92])) ){ goto $label$67 }
	goto $label$68 
	
.LABEL $label$92
	$1 = *($2 + [168])
	$14 = *($2 + [132])
	if ( ((uint_64)*($14 + [168]) <= (uint_64)$1) ){ goto $label$72 }
	$15 = [83]
	goto $label$6 
	
.LABEL $label$91
	*($2 + [24]) = (int_64)0
	CALL $48(($2 + [88]), ($2 + [160]), ($2 + [24]))
	if ( ((int_32)*($2 + [132]) == (int_32)*($2 + [92])) ){ goto $label$65 }
	$15 = [84]
	goto $label$6 
	
.LABEL $label$90
	CALL $49(($2 + [128]))
	goto $label$53 
	
.LABEL $label$89
	$16 = *($2 + [136])
	if ( ((int_32)*($2 + [140]) == (int_32)$16) ){ goto $label$64 }
	$15 = [2]
	goto $label$6 
	
.LABEL $label$88
	$13 = (int_64)0
	$5 = ($0 + [60])
	$20 = ($0 + [56])
	$6 = ($0 + [40])
	$0 = ($0 + [32])
	$15 = [3]
	goto $label$6 
	
.LABEL $label$87
	$1 = *(($16 + ((CASTING uint_32)(uint_64 $13) << [3])))
	$17 = *($5)
	$18 = *($20)
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$60 }
	$15 = [4]
	goto $label$6 
	
.LABEL $label$86
	$16 = ($17 + [-24])
	$14 = *($16)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$59 }
	$15 = [5]
	goto $label$6 
	
.LABEL $label$85
	$17 = $16
	if ( ((int_32)$18 != (int_32)$16) ){ goto $label$61 }
	goto $label$62 
	
.LABEL $label$84
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$58 }
	$15 = [16]
	goto $label$6 
	
.LABEL $label$83
	CALL eosio_assert(((int_32)*($14 + [176]) == (int_32)$3), [10261])
	goto $label$56 
	
.LABEL $label$82
	$16 = CALL db_find_i64(*($0), *($6), (int_64)7235159537265672192, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$57 }
	$15 = [7]
	goto $label$6 
	
.LABEL $label$81
	$14 = CALL $37($3, $16)
	CALL eosio_assert(((int_32)*($14 + [176]) == (int_32)$3), [10261])
	$15 = [8]
	goto $label$6 
	
.LABEL $label$80
	CALL eosio_assert([1], [10386])
	CALL eosio_assert([1], [10420])
	$16 = CALL db_next_i64(*($14 + [180]), ($2 + [24]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$55 }
	$15 = [9]
	goto $label$6 
	
.LABEL $label$79
	CALL $37($3, $16)
	$15 = [10]
	goto $label$6 
	
.LABEL $label$78
	CALL $51($3, $14)
	$15 = [11]
	goto $label$6 
	
.LABEL $label$77
	$16 = *($2 + [136])
	$13 = ((int_64)$13 + (int_64)1)
	if ( (uint_64)($13 <= (CASTING uint_64)(uint_32 int_32((*($2 + [140]) - $16) >> [3]))) ){ goto $label$63 }
	$15 = [12]
	goto $label$6 
	
.LABEL $label$76
	if ( ($16 == 0) ){ goto $label$54 }
	$15 = [13]
	goto $label$6 
	
.LABEL $label$75
	*($2 + [140]) = $16
	CALL _ZdlPv($16)
	$15 = [14]
	goto $label$6 
	
.LABEL $label$74
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$73
	CALL $101(($2 + [8]))
	
.LABEL $label$72
	$15 = [18]
	goto $label$6 
	
.LABEL $label$71
	$15 = [83]
	goto $label$6 
	
.LABEL $label$70
	$15 = [17]
	goto $label$6 
	
.LABEL $label$69
	$15 = [1]
	goto $label$6 
	
.LABEL $label$68
	$15 = [1]
	goto $label$6 
	
.LABEL $label$67
	$15 = [0]
	goto $label$6 
	
.LABEL $label$66
	$15 = [1]
	goto $label$6 
	
.LABEL $label$65
	$15 = [1]
	goto $label$6 
	
.LABEL $label$64
	$15 = [12]
	goto $label$6 
	
.LABEL $label$63
	$15 = [3]
	goto $label$6 
	
.LABEL $label$62
	$15 = [6]
	goto $label$6 
	
.LABEL $label$61
	$15 = [4]
	goto $label$6 
	
.LABEL $label$60
	$15 = [6]
	goto $label$6 
	
.LABEL $label$59
	$15 = [15]
	goto $label$6 
	
.LABEL $label$58
	$15 = [6]
	goto $label$6 
	
.LABEL $label$57
	$15 = [11]
	goto $label$6 
	
.LABEL $label$56
	$15 = [8]
	goto $label$6 
	
.LABEL $label$55
	$15 = [10]
	goto $label$6 
	
.LABEL $label$54
	$15 = [14]
	goto $label$6 
	
.LABEL $label$53
	$15 = [17]
	goto $label$6 
	
.LABEL $label$52
	$15 = [20]
	goto $label$6 
	
.LABEL $label$51
	$15 = [23]
	goto $label$6 
	
.LABEL $label$50
	$15 = [22]
	goto $label$6 
	
.LABEL $label$49
	$15 = [25]
	goto $label$6 
	
.LABEL $label$48
	$15 = [81]
	goto $label$6 
	
.LABEL $label$47
	$15 = [26]
	goto $label$6 
	
.LABEL $label$46
	$15 = [27]
	goto $label$6 
	
.LABEL $label$45
	$15 = [28]
	goto $label$6 
	
.LABEL $label$44
	$15 = [29]
	goto $label$6 
	
.LABEL $label$43
	$15 = [30]
	goto $label$6 
	
.LABEL $label$42
	$15 = [30]
	goto $label$6 
	
.LABEL $label$41
	$15 = [31]
	goto $label$6 
	
.LABEL $label$40
	$15 = [76]
	goto $label$6 
	
.LABEL $label$39
	$15 = [32]
	goto $label$6 
	
.LABEL $label$38
	$15 = [33]
	goto $label$6 
	
.LABEL $label$37
	$15 = [34]
	goto $label$6 
	
.LABEL $label$36
	$15 = [35]
	goto $label$6 
	
.LABEL $label$35
	$15 = [71]
	goto $label$6 
	
.LABEL $label$34
	$15 = [37]
	goto $label$6 
	
.LABEL $label$33
	$15 = [73]
	goto $label$6 
	
.LABEL $label$32
	$15 = [38]
	goto $label$6 
	
.LABEL $label$31
	$15 = [39]
	goto $label$6 
	
.LABEL $label$30
	$15 = [40]
	goto $label$6 
	
.LABEL $label$29
	$15 = [41]
	goto $label$6 
	
.LABEL $label$28
	$15 = [42]
	goto $label$6 
	
.LABEL $label$27
	$15 = [48]
	goto $label$6 
	
.LABEL $label$26
	$15 = [45]
	goto $label$6 
	
.LABEL $label$25
	$15 = [43]
	goto $label$6 
	
.LABEL $label$24
	$15 = [45]
	goto $label$6 
	
.LABEL $label$23
	$15 = [69]
	goto $label$6 
	
.LABEL $label$22
	$15 = [45]
	goto $label$6 
	
.LABEL $label$21
	$15 = [65]
	goto $label$6 
	
.LABEL $label$20
	$15 = [65]
	goto $label$6 
	
.LABEL $label$19
	$15 = [47]
	goto $label$6 
	
.LABEL $label$18
	$15 = [48]
	goto $label$6 
	
.LABEL $label$17
	$15 = [64]
	goto $label$6 
	
.LABEL $label$16
	$15 = [50]
	goto $label$6 
	
.LABEL $label$15
	$15 = [52]
	goto $label$6 
	
.LABEL $label$14
	$15 = [51]
	goto $label$6 
	
.LABEL $label$13
	$15 = [54]
	goto $label$6 
	
.LABEL $label$12
	$15 = [56]
	goto $label$6 
	
.LABEL $label$11
	$15 = [58]
	goto $label$6 
	
.LABEL $label$10
	$15 = [60]
	goto $label$6 
	
.LABEL $label$9
	$15 = [62]
	goto $label$6 
	
.LABEL $label$8
	$15 = [68]
	goto $label$6 
	
.LABEL $label$7
	$15 = [67]
	goto $label$6 
	$15
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)(uint_64)*(($7 + [24])) >> (uint_64)(int_64)8) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [10261])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)3680914790898728960, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $43($3, $1)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [10261])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [9273])
	CALL eosio_assert($1, [10386])
	CALL eosio_assert($1, [10420])
	$1 = CALL db_next_i64(*($7 + [52]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $43($3, $1)
	
.LABEL $label$5
	CALL $60($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	CALL $35(($4 + [208]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [240]) + [8])) = $3
	*(($8 = (($4 + [256]) + [8]))) = $3
	$9 = *($4)
	*($4 + [256]) = $9
	*($4 + [240]) = $9
	$3 = *($8)
	*((($4 + [272]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [256])
	*($4 + [32]) = $1
	*($4 + [272]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $102(($4 + [256]), ($4 + [224]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $102(($4 + [272]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [272]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [16]))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$10
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[56])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[76695845]) ){ goto $label$2 }
	$5 = [76695844]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[56]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[56])))) = *($1)
	CALL $102(($6 + [8]), ($1 + [8]))
	*(($6 + [48])) = *(($1 + [48]))
	*(($6 + [40])) = *(($1 + [40]))
	*(($6 + [32])) = *(($1 + [32]))
	*($6 + [24]) = *($1 + [24])
	$7 = ($2 + ((int_32)$5 * (int_32)[56]))
	$8 = ($6 + [56])
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$6 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($9 + $2)
	*((($1 = ($6 + $2)) + [-56])) = *(($5 + [-56]))
	$3 = ($5 + [-40])
	*(($1 + [-40])) = *($3)
	$4 = ($5 + [-48])
	*(($1 + [-48])) = *($4)
	*($4) = (int_64)0
	*($3) = [0]
	*(($1 + [-16])) = *(($5 + [-16]))
	*(($1 + [-24])) = *(($5 + [-24]))
	*(($1 + [-32])) = *(($5 + [-32]))
	*(($1 + [-8])) = *(($5 + [-8]))
	$2 = ($2 + [-56])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$7 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($1 + [-56])
	if ( ((*(($1 + [-48])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-40])))
	
.LABEL $label$10
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10633])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10679])
	*(($5 = $4) + [16]) = *(($1 + [168]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *($1)
	$3 = *($3)
	CALL $92(($1 + [144]), *($3), *(($3 + [4])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10730])
	*($5) = [0]
	CALL $83($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $132($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$4 = (($5 + [16]) + [8])
	*($5 + [40]) = *(($1 + [168]))
	if ( (CALL $128(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$7 = ($1 + [184])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($5 + [32]), $6)
	*($7) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $128($4, ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [188])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10450])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10495])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10545])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $54($4)
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $54($6)
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [180]))
	$6 = *(($1 + [184]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [188]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [176]) == (int_32)$0), [10261])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $37($0, $4)
	CALL eosio_assert(((int_32)*($5 + [176]) == (int_32)$0), [10261])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	CALL $102(($0 + [16]), ($1 + [16]))
	CALL $102(($0 + [28]), ($1 + [28]))
	CALL $102(($0 + [40]), ($1 + [40]))
	*(($0 + [112])) = *(($1 + [112]))
	*(($0 + [104])) = *(($1 + [104]))
	*(($0 + [96])) = *(($1 + [96]))
	*(($0 + [88])) = *(($1 + [88]))
	*(($0 + [80])) = *(($1 + [80]))
	*(($0 + [72])) = *(($1 + [72]))
	*(($0 + [64])) = *(($1 + [64]))
	*($0 + [56]) = *($1 + [56])
	CALL $102(($0 + [120]), ($1 + [120]))
	CALL $102(($0 + [132]), ($1 + [132]))
	*($0 + [144 align=4]) = (int_64)0
	*(($0 + [152])) = [0]
	$2 = (*(($1 + [148])) - *($1 + [144]))
	$3 = ((int_32)$2 / (int_32)[56])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[76695845]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [148]))) = $5
	*(($0 + [152])) = ($5 + ((int_32)$3 * (int_32)[56]))
	*(($0 + [144])) = $5
	$3 = *(($1 + [148]))
	$2 = *(($1 + [144]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	*($5) = *($2)
	CALL $102(($5 + [8]), ($2 + [8]))
	*(($5 + [48])) = *(($2 + [48]))
	*(($5 + [40])) = *(($2 + [40]))
	*(($5 + [32])) = *(($2 + [32]))
	*($5 + [24]) = *(($2 + [24]))
	$5 = (*($4) + [56])
	*($4) = $5
	$2 = ($2 + [56])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*($0 + [160]) = *($1 + [160])
	*(($0 + [168])) = *(($1 + [168]))
	return $0
	
.LABEL $label$1
	CALL $115(($0 + [144]))
	return (unreachable)
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [144])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [148])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [144]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( (*($0 + [132]) & [1]) ){ goto $label$14 }
	if ( (*($0 + [120]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [140])))
	if ( ((*($0 + [120]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [128])))
	$3 = [1]
	if ( ((*($0 + [40]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$3 = [1]
	if ( (*($0 + [40]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($0 + [28]) & $3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [48])))
	if ( ((*($0 + [28]) & $3) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [36])))
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($0 + [16]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [24])))
	return $0
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [656])
	$global$0 = $5
	*($5 + [624]) = $2
	*($5 + [632]) = $1
	CALL require_auth($1)
	$6 = CALL $102(($5 + [592]), $4)
	*(($5 + [584])) = [0]
	*($5 + [576]) = (int_64)0
	$7 = CALL $129([8365])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($5 + [576]) = ($7 << [1])
	$8 = (($5 + [576]) | [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [576]) = ($9 | [1])
	*($5 + [584]) = $8
	*($5 + [580]) = $7
	
.LABEL $label$12
	CALL memcpy($8, [8365], $7)
	
.LABEL $label$11
	*(($8 + $7)) = [0]
	CALL $32(($5 + [608]), $0, $6, ($5 + [576]))
	if ( ((*($5 + [576]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [584]))
	
.LABEL $label$14
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$15
	$6 = CALL $102(($5 + [544]), $4)
	*(($5 + [536])) = [0]
	*($5 + [528]) = (int_64)0
	$7 = CALL $129([8370])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [528]) = ($7 << [1])
	$8 = (($5 + [528]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [528]) = ($9 | [1])
	*($5 + [536]) = $8
	*($5 + [532]) = $7
	
.LABEL $label$17
	CALL memcpy($8, [8370], $7)
	
.LABEL $label$16
	*(($8 + $7)) = [0]
	CALL $32(($5 + [560]), $0, $6, ($5 + [528]))
	if ( ((*($5 + [528]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($5 + [536]))
	
.LABEL $label$19
	if ( ((*($6) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$20
	$6 = CALL $102(($5 + [496]), $4)
	*(($5 + [488])) = [0]
	*($5 + [480]) = (int_64)0
	$7 = CALL $129([8381])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$23 }
	*($5 + [480]) = ($7 << [1])
	$8 = (($5 + [480]) | [1])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [480]) = ($9 | [1])
	*($5 + [488]) = $8
	*($5 + [484]) = $7
	
.LABEL $label$22
	CALL memcpy($8, [8381], $7)
	
.LABEL $label$21
	*(($8 + $7)) = [0]
	CALL $32(($5 + [512]), $0, $6, ($5 + [480]))
	if ( ((*($5 + [480]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($5 + [488]))
	
.LABEL $label$24
	if ( ((*($6) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$25
	$6 = CALL $102(($5 + [448]), $4)
	*(($5 + [440])) = [0]
	*($5 + [432]) = (int_64)0
	$7 = CALL $129([8390])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$28 }
	*($5 + [432]) = ($7 << [1])
	$8 = (($5 + [432]) | [1])
	if ( $7 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [432]) = ($9 | [1])
	*($5 + [440]) = $8
	*($5 + [436]) = $7
	
.LABEL $label$27
	CALL memcpy($8, [8390], $7)
	
.LABEL $label$26
	*(($8 + $7)) = [0]
	CALL $32(($5 + [464]), $0, $6, ($5 + [432]))
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($5 + [440]))
	
.LABEL $label$29
	if ( ((*($6) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$30
	$6 = CALL $102(($5 + [400]), $4)
	*(($5 + [392])) = [0]
	*($5 + [384]) = (int_64)0
	$7 = CALL $129([8402])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$33 }
	*($5 + [384]) = ($7 << [1])
	$8 = (($5 + [384]) | [1])
	if ( $7 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [384]) = ($9 | [1])
	*($5 + [392]) = $8
	*($5 + [388]) = $7
	
.LABEL $label$32
	CALL memcpy($8, [8402], $7)
	
.LABEL $label$31
	*(($8 + $7)) = [0]
	CALL $32(($5 + [416]), $0, $6, ($5 + [384]))
	if ( ((*($5 + [384]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($5 + [392]))
	
.LABEL $label$34
	if ( ((*($6) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$35
	$6 = CALL $102(($5 + [352]), $4)
	*(($5 + [344])) = [0]
	*($5 + [336]) = (int_64)0
	$7 = CALL $129([8409])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$38 }
	*($5 + [336]) = ($7 << [1])
	$8 = (($5 + [336]) | [1])
	if ( $7 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [336]) = ($9 | [1])
	*($5 + [344]) = $8
	*($5 + [340]) = $7
	
.LABEL $label$37
	CALL memcpy($8, [8409], $7)
	
.LABEL $label$36
	*(($8 + $7)) = [0]
	CALL $32(($5 + [368]), $0, $6, ($5 + [336]))
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($5 + [344]))
	
.LABEL $label$39
	if ( ((*($6) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$40
	$6 = CALL $102(($5 + [304]), $4)
	*(($5 + [296])) = [0]
	*($5 + [288]) = (int_64)0
	$7 = CALL $129([8419])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$43 }
	*($5 + [288]) = ($7 << [1])
	$8 = (($5 + [288]) | [1])
	if ( $7 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [288]) = ($9 | [1])
	*($5 + [296]) = $8
	*($5 + [292]) = $7
	
.LABEL $label$42
	CALL memcpy($8, [8419], $7)
	
.LABEL $label$41
	*(($8 + $7)) = [0]
	CALL $32(($5 + [320]), $0, $6, ($5 + [288]))
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($5 + [296]))
	
.LABEL $label$44
	if ( ((*($6) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$45
	$6 = CALL $102(($5 + [256]), $4)
	*(($5 + [248])) = [0]
	*($5 + [240]) = (int_64)0
	$7 = CALL $129([8428])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$48 }
	*($5 + [240]) = ($7 << [1])
	$8 = (($5 + [240]) | [1])
	if ( $7 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [240]) = ($9 | [1])
	*($5 + [248]) = $8
	*($5 + [244]) = $7
	
.LABEL $label$47
	CALL memcpy($8, [8428], $7)
	
.LABEL $label$46
	*(($8 + $7)) = [0]
	CALL $32(($5 + [272]), $0, $6, ($5 + [240]))
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*($5 + [248]))
	
.LABEL $label$49
	if ( ((*($6) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$50
	$7 = *($5 + [464])
	$6 = CALL $129([8445])
	if ( ((int_32)$6 != (int_32)( *($5 + [468]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$52 }
	$7 = [0]
	if ( (CALL $113(($5 + [464]), [0], [-1], [8445], $6) == 0) ){ goto $label$51 }
	
.LABEL $label$52
	$7 = *($5 + [416])
	$6 = CALL $129([8445])
	if ( ((int_32)$6 != (int_32)( *($5 + [420]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$53 }
	$7 = [0]
	if ( (CALL $113(($5 + [416]), [0], [-1], [8445], $6) == 0) ){ goto $label$51 }
	
.LABEL $label$53
	$7 = [1]
	$6 = *($5 + [368])
	$8 = CALL $129([8445])
	if ( ((int_32)$8 != (int_32)( *($5 + [372]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$51 }
	$7 = ((int_32)CALL $113(($5 + [368]), [0], [-1], [8445], $8) != (int_32)[0])
	
.LABEL $label$51
	CALL eosio_assert($7, [8446])
	$1 = CALL $126(( *($5 + [472]) ? (($5 + [464]) | [1]) : (*($5 + [464]) & [1]) ))
	*($5 + [232]) = $1
	if ( ((int_64)((int_64)$1 | (int_64)1) != (int_64)5) ){ goto $label$54 }
	CALL eosio_assert(((int_64)*($5 + [632]) == (int_64)-4057332980425419376), [8467])
	
.LABEL $label$54
	*($5 + [224]) = CALL $126(( *($5 + [424]) ? (($5 + [416]) | [1]) : (*($5 + [416]) & [1]) ))
	$1 = CALL $126(( *($5 + [376]) ? (($5 + [368]) | [1]) : (*($5 + [368]) & [1]) ))
	*($5 + [216]) = $1
	CALL eosio_assert((((int_64)$1 > (int_64)0) & (((int_64)*($5 + [232]) > (int_64)0) & ((int_64)*($5 + [224]) > (int_64)0))), [8511])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($5 + [224])), [8533])
	$7 = CALL $102(($5 + [184]), $4)
	*(($5 + [176])) = [0]
	*($5 + [168]) = (int_64)0
	$4 = CALL $129([8575])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$57 }
	*($5 + [168]) = ($4 << [1])
	$6 = (($5 + [168]) | [1])
	if ( $4 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($5 + [168]) = ($8 | [1])
	*($5 + [176]) = $6
	*($5 + [172]) = $4
	
.LABEL $label$56
	CALL memcpy($6, [8575], $4)
	
.LABEL $label$55
	*(($6 + $4)) = [0]
	CALL $32(($5 + [200]), $0, $7, ($5 + [168]))
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*($5 + [176]))
	
.LABEL $label$58
	if ( ((*($7) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$59
	*($5 + [160]) = (int_64)0
	$4 = ($4 & [1])
	$4 = *($5 + [200])
	$7 = CALL $129([8445])
	if ( ((int_32)$7 != (int_32)( *($5 + [204]) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$62 }
	if ( (CALL $113(($5 + [200]), [0], [-1], [8445], $7) == 0) ){ goto $label$60 }
	if ( ((int_64)*($5 + [632]) != (int_64)-4057332980425419376) ){ goto $label$60 }
	$4 = (*($5 + [200]) & [1])
	goto $label$61 
	
.LABEL $label$62
	if ( ((int_64)*($5 + [632]) != (int_64)-4057332980425419376) ){ goto $label$60 }
	
.LABEL $label$61
	$1 = CALL $126(( *($5 + [208]) ? (($5 + [200]) | [1]) : $4 ))
	*($5 + [160]) = $1
	CALL eosio_assert(((uint_64)$1 >= (uint_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8587])
	
.LABEL $label$60
	$2 = *($5 + [232])
	$1 = ((int_64)$2 | (int_64)1)
	if ( ((int_64)$1 == (int_64)3) ){ goto $label$65 }
	if ( ((int_64)$1 != (int_64)5) ){ goto $label$64 }
	CALL eosio_assert(((int_64)*($5 + [224]) < (int_64)1001), [8612])
	goto $label$63 
	
.LABEL $label$65
	CALL eosio_assert(((int_64)*($5 + [224]) < (int_64)501), [8646])
	goto $label$63 
	
.LABEL $label$64
	if ( ((int_64)$2 == (int_64)6) ){ goto $label$66 }
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$63 }
	
.LABEL $label$66
	CALL eosio_assert(((int_64)*($5 + [224]) == (int_64)1), [8666])
	
.LABEL $label$63
	$9 = ($0 + [32])
	$1 = *($5 + [216])
	$7 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$68 }
	
.LOOP $label$70:
	$4 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$69 }
	$7 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$68 }
	CALL eosio_assert(((int_32)*($6 + [176]) == (int_32)$9), [10261])
	goto $label$67 
	
.LABEL $label$68
	$6 = [0]
	$4 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$67 }
	$6 = CALL $37($9, $4)
	CALL eosio_assert(((int_32)*($6 + [176]) == (int_32)$9), [10261])
	
.LABEL $label$67
	CALL eosio_assert(($6 == 0), [8686])
	$1 = *($5 + [160])
	if ( (int_64)($1 == 0) ){ goto $label$71 }
	CALL eosio_assert(((uint_64)$1 <= (uint_64)((int_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) + (int_64)1296000) & (int_64)4294967295)), [8718])
	
.LABEL $label$71
	$1 = *($0)
	*($5 + [140]) = $3
	*($5 + [116]) = ($5 + [632])
	*($5 + [112]) = ($5 + [216])
	*($5 + [120]) = ($5 + [608])
	*($5 + [124]) = ($5 + [560])
	*($5 + [128]) = ($5 + [512])
	*($5 + [132]) = ($5 + [232])
	*($5 + [136]) = ($5 + [624])
	*($5 + [144]) = ($5 + [224])
	*($5 + [148]) = ($5 + [320])
	*($5 + [152]) = ($5 + [272])
	*($5 + [156]) = ($5 + [160])
	*($5 + [40]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$8()), [10335])
	*($5 + [56]) = $9
	*($5 + [60]) = ($5 + [112])
	*($5 + [64]) = ($5 + [40])
	*(($4 = CALL _Znwj([192])) + [8]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [120 align=4]) = (int_64)0
	*($4 + [128 align=4]) = (int_64)0
	*($4 + [136 align=4]) = (int_64)0
	*($4 + [144 align=4]) = (int_64)0
	*($4 + [152]) = [0]
	*($4 + [176]) = $9
	CALL $69(($5 + [56]), $4)
	*($5 + [640]) = $4
	$1 = *($4)
	*($5 + [56]) = $1
	$6 = *($4 + [180])
	*($5 + [24]) = $6
	$8 = ($0 + [60])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [64]))) ){ goto $label$74 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($5 + [640]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	$4 = *($5 + [640])
	*($5 + [640]) = [0]
	if ( $4 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	CALL $70(($0 + [56]), ($5 + [640]), ($5 + [56]), ($5 + [24]))
	$4 = *($5 + [640])
	*($5 + [640]) = [0]
	if ( ($4 == 0) ){ goto $label$72 }
	
.LABEL $label$73
	CALL $54($4)
	CALL _ZdlPv($4)
	
.LABEL $label$72
	*($5 + [96]) = [8445]
	*($5 + [100]) = CALL $129([8445])
	*($5 + [16]) = *($5 + [96])
	$9 = CALL $2(($5 + [104]), ($5 + [16]))
	$4 = CALL $129([8751])
	if ( ($4 <= [8]) ){ goto $label$77 }
	CALL eosio_assert([0], [10148])
	goto $label$76 
	
.LABEL $label$77
	if ( ($4 == 0) ){ goto $label$75 }
	
.LABEL $label$76
	$1 = (int_64)0
	
.LOOP $label$78:
	$7 = *(($4 + [8750]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$79 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$79
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$78 }
	goto $label$1 
	
.LABEL $label$75
	$1 = (int_64)0
	goto $label$1 
	
.LABEL $label$10
	CALL $101(($5 + [576]))
	
.LABEL $label$9
	CALL $101(($5 + [528]))
	
.LABEL $label$8
	CALL $101(($5 + [480]))
	
.LABEL $label$7
	CALL $101(($5 + [432]))
	
.LABEL $label$6
	CALL $101(($5 + [384]))
	
.LABEL $label$5
	CALL $101(($5 + [336]))
	
.LABEL $label$4
	CALL $101(($5 + [288]))
	
.LABEL $label$3
	CALL $101(($5 + [240]))
	
.LABEL $label$2
	CALL $101(($5 + [168]))
	
.LABEL $label$1
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$97 }
	if ( ((int_64)*($5 + [624]) == (int_64)6138664019028088112) ){ goto $label$96 }
	
.LABEL $label$97
	$4 = CALL $129([8755])
	if ( ($4 <= [8]) ){ goto $label$101 }
	CALL eosio_assert([0], [10148])
	goto $label$100 
	
.LABEL $label$101
	if ( ($4 == 0) ){ goto $label$99 }
	
.LABEL $label$100
	$1 = (int_64)0
	
.LOOP $label$102:
	$7 = *(($4 + [8754]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$103 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$103
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$102 }
	goto $label$98 
	
.LABEL $label$99
	$1 = (int_64)0
	
.LABEL $label$98
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	if ( ((int_64)*(($3 + [8])) == (int_64)$1) ){ goto $label$105 }
	$4 = CALL $129([8759])
	if ( ($4 <= [8]) ){ goto $label$109 }
	CALL eosio_assert([0], [10148])
	goto $label$108 
	
.LABEL $label$109
	if ( ($4 == 0) ){ goto $label$107 }
	
.LABEL $label$108
	$1 = (int_64)0
	
.LOOP $label$110:
	$7 = *(($4 + [8758]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$111 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$111
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$110 }
	goto $label$106 
	
.LABEL $label$107
	$1 = (int_64)0
	
.LABEL $label$106
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$2 = *(($3 + [8]))
	if ( ((int_64)$2 != (int_64)$1) ){ goto $label$104 }
	
.LABEL $label$105
	$2 = $1
	if ( ((int_64)*($5 + [624]) == (int_64)6138663591592764928) ){ goto $label$96 }
	
.LABEL $label$104
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = ($0 + [72])
	$7 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$113 }
	
.LOOP $label$115:
	$4 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_64)(uint_64)*(($6 + [24])) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$114 }
	$7 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$114
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$113 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$10), [10261])
	goto $label$112 
	
.LABEL $label$113
	$6 = [0]
	$4 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)3680914790898728960, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$112 }
	$6 = CALL $43($10, $4)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$10), [10261])
	
.LABEL $label$112
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8763])
	CALL eosio_assert(((int_64)*($6 + [32]) == (int_64)*($5 + [624])), [8790])
	$1 = *($6)
	*($9) = $1
	*($5) = $1
	CALL $118([8822], $5)
	*($5 + [48]) = (int_64)3617214756542218240
	*($5 + [40]) = *($0)
	$1 = *($0 + [8])
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	$4 = CALL $129([8838])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$95 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$118 }
	*($5 + [24]) = ($4 << [1])
	$7 = (($5 + [24]) | [1])
	if ( $4 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	$6 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($5 + [24]) = ($6 | [1])
	*($5 + [32]) = $7
	*($5 + [28]) = $4
	
.LABEL $label$117
	CALL memcpy($7, [8838], $4)
	
.LABEL $label$116
	*(($7 + $4)) = [0]
	*(($5 + [136])) = *(($3 + [8]))
	$4 = (($5 + [24]) + [8])
	*(($5 + [152])) = *($4)
	*($4) = [0]
	*($5 + [112]) = *($0)
	*($5 + [120]) = *($9)
	*($5 + [128]) = *($3)
	*($5 + [144]) = *($5 + [24])
	*($5 + [24]) = (int_64)0
	$4 = CALL $41(($5 + [56]), ($5 + [40]), $1, (int_64)-3617168760277827584, ($5 + [112]))
	CALL $42(($5 + [640]), $4)
	$7 = *($5 + [640])
	CALL send_inline($7, (*($5 + [644]) - $7))
	$7 = *($5 + [640])
	if ( ($7 == 0) ){ goto $label$119 }
	*($5 + [644]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$119
	$7 = *($4 + [28])
	if ( ($7 == 0) ){ goto $label$120 }
	*(($4 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$120
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$121 }
	*(($4 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$121
	if ( ((*(($5 + [144])) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*(($5 + [152])))
	
.LABEL $label$122
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$96
	if ( (*($5 + [200]) & [1]) ){ goto $label$124 }
	if ( (*($5 + [272]) & [1]) ){ goto $label$123 }
	goto $label$94 
	
.LABEL $label$124
	CALL _ZdlPv(*($5 + [208]))
	if ( ((*($5 + [272]) & [1]) == 0) ){ goto $label$94 }
	
.LABEL $label$123
	CALL _ZdlPv(*($5 + [280]))
	$4 = [1]
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	CALL $101(($5 + [24]))
	
.LABEL $label$94
	$4 = [1]
	if ( (*($5 + [320]) & [1]) ){ goto $label$92 }
	
.LABEL $label$93
	if ( (*($5 + [368]) & $4) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	CALL _ZdlPv(*($5 + [328]))
	if ( ((*($5 + [368]) & $4) == 0) ){ goto $label$90 }
	
.LABEL $label$91
	CALL _ZdlPv(*(($5 + [376])))
	$4 = [1]
	if ( ((*($5 + [416]) & [1]) == 0) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$4 = [1]
	if ( (*($5 + [416]) & [1]) ){ goto $label$88 }
	
.LABEL $label$89
	if ( (*($5 + [464]) & $4) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	CALL _ZdlPv(*(($5 + [424])))
	if ( ((*($5 + [464]) & $4) == 0) ){ goto $label$86 }
	
.LABEL $label$87
	CALL _ZdlPv(*(($5 + [472])))
	$4 = [1]
	if ( ((*($5 + [512]) & [1]) == 0) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$4 = [1]
	if ( (*($5 + [512]) & [1]) ){ goto $label$84 }
	
.LABEL $label$85
	if ( (*($5 + [560]) & $4) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	CALL _ZdlPv(*($5 + [520]))
	if ( ((*($5 + [560]) & $4) == 0) ){ goto $label$82 }
	
.LABEL $label$83
	CALL _ZdlPv(*($5 + [568]))
	if ( ((*($5 + [608]) & [1]) == 0) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	if ( (*($5 + [608]) & [1]) ){ goto $label$80 }
	
.LABEL $label$81
	$global$0 = ($5 + [656])
	return 
	
.LABEL $label$80
	CALL _ZdlPv(*($5 + [616]))
	$global$0 = ($5 + [656])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $102(($2 + [32]), ($1 + [8]))
	*(($5 = (($2 + [16]) + [8]))) = *(($1 + [32]))
	*($2 + [16]) = *($1 + [24])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $102(($2 + [80]), $4)
	$6 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $6
	*(($2 + [8])) = $6
	$6 = *($2 + [48])
	*($2) = $6
	*($2 + [64]) = $6
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $2), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL $102(($3 + [32]), $1)
	$5 = *($1)
	if ( ($5 & [1]) ){ goto $label$2 }
	$6 = uint_32($5 >> [1])
	$7 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($1 + [4])
	$7 = *($1 + [8])
	
.LABEL $label$1
	$1 = [0]
	$5 = CALL $129([9661])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$3 }
	$8 = ($7 + $6)
	$1 = $7
	
.LOOP $label$5:
	$6 = (($6 - $5) + [1])
	if ( ($6 == 0) ){ goto $label$3 }
	$1 = CALL $127($1, [44], $6)
	if ( ($1 == 0) ){ goto $label$3 }
	if ( (CALL $128($1, [9661], $5) == 0) ){ goto $label$6 }
	$1 = ($1 + [1])
	$6 = ($8 - $1)
	if ( ((int_32)$6 >= (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$3 }
	$1 = ($1 - $7)
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = ($4 + [1])
	$10 = (($3 + [16]) | [1])
	$11 = ($2 + [4])
	
.LOOP $label$7:
	CALL $103(($3 + [16]), $4, [0], $1, $4)
	$12 = (($3 + [16]) + [8])
	$13 = CALL $126(( *($12) ? $10 : (*($3 + [16]) & [1]) ))
	*($3) = $13
	$5 = *($11)
	if ( ((uint_32)$5 >= (uint_32)*(($2 + [8]))) ){ goto $label$9 }
	*($5) = $13
	*($11) = ($5 + [8])
	goto $label$8 
	
.LABEL $label$9
	CALL $75($2, $3)
	
.LABEL $label$8
	CALL $103($3, $4, ($1 + [1]), [-1], $4)
	if ( (*($3 + [32]) & [1]) ){ goto $label$11 }
	*($9) = [0]
	*($3 + [32]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($4 + [8]))) = [0]
	*(($4 + [4])) = [0]
	
.LABEL $label$10
	$1 = [0]
	CALL $106($4, [0])
	*((($3 + [32]) + [8])) = *(($3 + [8]))
	*($3 + [32]) = *($3)
	$6 = *($3 + [32])
	$8 = *(($4 + [8]))
	$7 = *(($4 + [4]))
	$5 = CALL $129([9661])
	if ( ($5 == 0) ){ goto $label$12 }
	$1 = ( $7 ? uint_32($6 >> [1]) : $1 )
	$1 = ($6 & [1])
	$14 = ( $8 ? $9 : $1 )
	$8 = ($14 + $1)
	if ( ((int_32)$1 < (int_32)$5) ){ goto $label$14 }
	$6 = $14
	
.LOOP $label$15:
	$1 = (($1 - $5) + [1])
	if ( ($1 == 0) ){ goto $label$14 }
	$1 = CALL $127($6, [44], $1)
	if ( ($1 == 0) ){ goto $label$14 }
	if ( (CALL $128($1, [9661], $5) == 0) ){ goto $label$13 }
	$6 = ($1 + [1])
	$1 = ($8 - $6)
	if ( ((int_32)$1 >= (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$14
	$1 = $8
	
.LABEL $label$13
	$1 = ( [-1] ? ($1 - $14) : ((int_32)$1 == (int_32)$8) )
	
.LABEL $label$12
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)[-1]) ){ goto $label$7 }
	
.LABEL $label$3
	$1 = ($1 & [1])
	$1 = *($3 + [32])
	$5 = CALL $129([8445])
	if ( ((int_32)$5 != (int_32)( *(($4 + [4])) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$21 }
	if ( (CALL $113($4, [0], [-1], [8445], $5) == 0) ){ goto $label$20 }
	$1 = (*($3 + [32]) & [1])
	
.LABEL $label$21
	$13 = CALL $126(( *($4 + [8]) ? ($4 + [1]) : $1 ))
	*($3 + [16]) = $13
	$1 = *($2 + [4])
	if ( ((uint_32)$1 >= (uint_32)*($2 + [8])) ){ goto $label$19 }
	*($1) = $13
	*(($2 + [4])) = ($1 + [8])
	
.LABEL $label$20
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	CALL $75($2, ($3 + [16]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$17
	$global$0 = ($3 + [48])
}

int_32 .FUNC $116 ()
{
	return [11132]
}

void .FUNC $117 (int_32 $0)
{
}

void .FUNC $114 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $108(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $124(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8506], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $108(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $108(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $106($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $106($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $101($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 - $1)
	$2 = ( $7 ? $2 : ($7 <= $2) )
	$8 = [10]
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$5 }
	CALL $105($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$5
	if ( $6 ){ goto $label$11 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$10
	$2 = $4
	$6 = $4
	if ( ($6 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = ($7 - $2)
	if ( ($9 == 0) ){ goto $label$13 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$14 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$14
	CALL memmove(($7 + $4), ($7 + $2), $9)
	goto $label$6 
	
.LABEL $label$13
	$6 = $4
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$16 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$17
	$6 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	$4 = ($8 + $1)
	CALL memmove(($6 + $4), ($4 + [0]), $9)
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$16
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$15
	$6 = $4
	CALL memmove(($7 + $6), ($7 + $2), $9)
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$8
	$4 = [0]
	goto $label$6 
	
.LABEL $label$7
	CALL memmove(($8 + $1), $3, $6)
	$4 = $6
	
.LABEL $label$6
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$18 }
	*($0) = ($4 << [1])
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$18
	*($0 + [4]) = $4
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $128(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $129($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $105($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $105($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [12]) = $1
	$0 = CALL $120([17], ($2 + [11]), [-1], $0, *($2 + [12]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($0 == 0) ){ goto $label$1 }
	*($4 + [15]) = $0
	CALL prints_l(($4 + [15]), [1])
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL $54($4)
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$4 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)3680914790898728960, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	*($2 + [20]) = CALL $43($3, $4)
	*($2 + [16]) = $3
	$5 = ($0 + [136])
	$4 = ($0 + [112])
	$6 = ($2 + [40])
	$7 = ($0 + [144])
	$8 = ($0 + [140])
	
.LOOP $label$2:
	$9 = *($0)
	*($2 + [8]) = $0
	*($2 + [12]) = ($2 + [16])
	*($2 + [56]) = $9
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$8()), [10335])
	*($2 + [32]) = $4
	*($6) = ($2 + [56])
	*($2 + [36]) = ($2 + [8])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [56]) = $4
	CALL $63(($2 + [32]), $3)
	*($2 + [48]) = $3
	$9 = *($3)
	*($2 + [32]) = $9
	$10 = *($3 + [60])
	*($2 + [28]) = $10
	$11 = *($8)
	if ( ((uint_32)$11 >= (uint_32)*($7)) ){ goto $label$5 }
	*($11 + [8]) = $9
	*($11 + [16]) = $10
	*($2 + [48]) = [0]
	*($11) = $3
	*($8) = ($11 + [24])
	$3 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $64($5, ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$3 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($2 + [20]) != (int_32)[0]), [10420])
	$3 = CALL db_next_i64(*(*($2 + [20]) + [52]), ($2 + [32]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	*($2 + [20]) = CALL $43(*($2 + [16]), $3)
	goto $label$2 
	
.LABEL $label$6
	*($2 + [20]) = [0]
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	*($2 + [20]) = [0]
	*($2 + [16]) = $3
	$global$0 = ($2 + [64])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	CALL $35(*($1), ($0 + [8]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $129($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $105($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $105($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $30(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $31(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $135($2)
	
.LABEL $label$4
	CALL $29(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$2 }
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *($4 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($7 <= [257]), [9346])
	$8 = CALL $102(($5 + [112]), $4)
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$7 = CALL $129([9375])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [96]) = ($7 << [1])
	$9 = (($5 + [96]) | [1])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$10 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [96]) = ($10 | [1])
	*($5 + [104]) = $9
	*($5 + [100]) = $7
	
.LABEL $label$6
	CALL memcpy($9, [9375], $7)
	
.LABEL $label$5
	*(($9 + $7)) = [0]
	CALL $32(($5 + [128]), $0, $8, ($5 + [96]))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($5 + [104]))
	
.LABEL $label$8
	if ( ((*($8) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$9
	$7 = *($5 + [128])
	$8 = CALL $129([9380])
	if ( ((int_32)$8 != (int_32)( *($5 + [132]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$11 }
	if ( (CALL $113(($5 + [128]), [0], [-1], [9380], $8) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($8 = (($5 + [80]) + [8]))) = *(($3 + [8]))
	*($5 + [80]) = *($3)
	$7 = CALL $102(($5 + [64]), $4)
	*((($5 + [16]) + [8])) = *($8)
	*($5 + [16]) = *($5 + [80])
	$8 = CALL $33($0, $1, ($5 + [16]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$12
	if ( $8 ){ goto $label$10 }
	*(($8 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$2 = *($0 + [8])
	$7 = CALL $102(($5 + [32]), $4)
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [48])
	CALL $34($0, $1, $2, $5, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$10
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$2
	$global$0 = ($5 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $101(($5 + [96]))
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10261])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)4344997274087063552, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $38($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10261])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9965])
	CALL eosio_assert($6, [10386])
	CALL eosio_assert($6, [10420])
	$6 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $38($3, $6)
	
.LABEL $label$5
	CALL $68($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$4 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) + (int_64)4294880896)
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$3), [10261])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $37($3, $7)
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$3), [10261])
	
.LABEL $label$1
	$1 = ((int_64)$4 & (int_64)4294967295)
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [9714])
	$4 = *($8 + [160])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$6 }
	CALL eosio_assert((uint_64)($4 <= $1), [9744])
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(*($8 + [168]) <= $1), [9744])
	
.LABEL $label$5
	$7 = CALL $129([8751])
	if ( ($7 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [10148])
	goto $label$9 
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = (int_64)0
	
.LOOP $label$11:
	$6 = *(($7 + [8750]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$12
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$8
	$1 = (int_64)0
	
.LABEL $label$7
	if ( ((int_64)*(($8 + [96])) != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$17 }
	if ( ((int_64)*($8 + [64]) == (int_64)6138664019028088112) ){ goto $label$16 }
	
.LABEL $label$17
	$7 = CALL $129([8755])
	if ( ($7 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [10148])
	goto $label$20 
	
.LABEL $label$21
	if ( ($7 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$1 = (int_64)0
	
.LOOP $label$22:
	$6 = *(($7 + [8754]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$23
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$22 }
	goto $label$18 
	
.LABEL $label$19
	$1 = (int_64)0
	
.LABEL $label$18
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	if ( ((int_64)*(($8 + [96])) == (int_64)$1) ){ goto $label$25 }
	$7 = CALL $129([8759])
	if ( ($7 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [10148])
	goto $label$28 
	
.LABEL $label$29
	if ( ($7 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$1 = (int_64)0
	
.LOOP $label$30:
	$6 = *(($7 + [8758]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$31
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$30 }
	goto $label$26 
	
.LABEL $label$27
	$1 = (int_64)0
	
.LABEL $label$26
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$4 = *(($8 + [96]))
	if ( ((int_64)$4 != (int_64)$1) ){ goto $label$24 }
	
.LABEL $label$25
	$4 = $1
	if ( ((int_64)*($8 + [64]) == (int_64)6138663591592764928) ){ goto $label$16 }
	
.LABEL $label$24
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$10 = ($0 + [72])
	$6 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$33 }
	
.LOOP $label$35:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)(uint_64)*(($5 + [24])) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$34 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$33 }
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$10), [10261])
	if ( $5 ){ goto $label$32 }
	goto $label$15 
	
.LABEL $label$33
	$7 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)3680914790898728960, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$5 = CALL $43($10, $7)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$10), [10261])
	
.LABEL $label$32
	$0 = $5
	
.LABEL $label$16
	if ( ((int_64)*($8 + [88]) < (int_64)1) ){ goto $label$36 }
	$1 = *($0)
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $1
	$4 = *($8 + [64])
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$7 = CALL $129([9774])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$14 }
	$5 = ($8 + [88])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$39 }
	*($2 + [8]) = ($7 << [1])
	$6 = (($2 + [8]) | [1])
	if ( $7 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$0 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*($2 + [8]) = ($0 | [1])
	*($2 + [16]) = $6
	*($2 + [12]) = $7
	
.LABEL $label$38
	CALL memcpy($6, [9774], $7)
	
.LABEL $label$37
	*(($6 + $7)) = [0]
	$12 = *($8 + [8])
	*(($2 + [48])) = *(($5 + [8]))
	$7 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($7)
	*($7) = [0]
	*($2 + [24]) = $1
	*($2 + [40]) = *($5)
	*($2 + [56]) = *($2 + [8])
	*($2 + [32]) = $12
	*($2 + [8]) = (int_64)0
	$7 = CALL $41(($2 + [88]), ($2 + [72]), $4, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $42(($2 + [128]), $7)
	$6 = *($2 + [128])
	CALL send_inline($6, (*($2 + [132]) - $6))
	$6 = *($2 + [128])
	if ( ($6 == 0) ){ goto $label$40 }
	*($2 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$40
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$41 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$41
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$42 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$42
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$43
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$36
	CALL eosio_assert($9, [10386])
	CALL eosio_assert($9, [10420])
	$7 = CALL db_next_i64(*($8 + [180]), ($2 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	CALL $37($3, $7)
	goto $label$13 
	
.LABEL $label$15
	CALL eosio_assert($9, [10386])
	CALL eosio_assert($9, [10420])
	$7 = CALL db_next_i64(*($8 + [180]), ($2 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	CALL $37($3, $7)
	goto $label$13 
	
.LABEL $label$14
	CALL $101(($2 + [8]))
	
.LABEL $label$13
	CALL $51($3, $8)
	$global$0 = ($2 + [144])
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10261])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)4344997274087063552, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $38($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [10261])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [9937])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$8()), [10335])
	*(($6 = CALL _Znwj([24])) + [8]) = $3
	*($6) = $1
	CALL eosio_assert([1], [10246])
	CALL memcpy(($2 + [16]), $6, [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [160])), (int_64)4344997274087063552, $8, $1, ($2 + [16]), [8])
	*($6 + [12]) = $7
	$5 = ($0 + [168])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $7
	$4 = ($0 + [180])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [184]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [176]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $132($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [216]) + [16]))) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [216]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10252])
	CALL memcpy(($4 + [216]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [10252])
	CALL memcpy((($4 + [216]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [10252])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [144])) = $0
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [176]) = $0
	*(($8 = (($4 + [240]) + [8]))) = *($3)
	*($4 + [240]) = *($4 + [224])
	$0 = *($4 + [216])
	*((($4 + [256]) + [8])) = *($8)
	*($4 + [256]) = *($4 + [240])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [256])
	*($4 + [8]) = $1
	*($4 + [272]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $135($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$4), [10261])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $37($4, $7)
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$4), [10261])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9910])
	$1 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert($7, [10598])
	CALL $66($4, $8, $1, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19532])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19340]
	$3 = (((int_32)$1 * (int_32)[12]) + [19340])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	CALL $104(($1 + [16]), *($3 + [8]))
	CALL $104(($1 + [28]), *($3 + [12]))
	CALL $104(($1 + [40]), *($3 + [16]))
	*($1 + [56]) = *(*($3 + [20]))
	*($1 + [64]) = *(*($3 + [24]))
	$5 = *($3 + [28])
	*($1 + [72]) = *($5)
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *($3 + [28])
	*($1 + [88]) = *($5)
	*(($1 + [96])) = *(($5 + [8]))
	$5 = *($3 + [32])
	*($1 + [104]) = *($5)
	*($1 + [112]) = *($5)
	CALL $104(($1 + [120]), *($3 + [36]))
	CALL $104(($1 + [132]), *($3 + [40]))
	*($1 + [160]) = *(*($3 + [44]))
	*($1 + [168]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($3 = $2) + [8]) = [0]
	CALL $83(($3 + [8]), $1)
	$5 = *($3 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $132($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL $84(($3 + [8]), $1)
	$6 = *($1)
	*($1 + [180]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $6, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL $135($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$2 = ($4 + [8])
	$6 = *($2)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($3 + [24]) = *(($1 + [168]))
	*($1 + [184]) = CALL db_idx64_store($6, (int_64)7235159537265672192, $7, $8, ($3 + [24]))
	$6 = *($0)
	$7 = *($2)
	$8 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [188])) = CALL db_idx64_store($7, (int_64)7235159537265672193, $6, $8, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [10450])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10495])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10545])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $109($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10633])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10679])
	*(($5 = $4) + [16]) = *(($1 + [168]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *($1)
	CALL $104(($1 + [16]), *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10730])
	*($5) = [0]
	CALL $83($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $132($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $135($4)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$4 = (($5 + [16]) + [8])
	*($5 + [40]) = *(($1 + [168]))
	if ( (CALL $128(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$7 = ($1 + [184])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($5 + [32]), $6)
	*($7) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $128($4, ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [188])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10633])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10679])
	*(($5 = $4) + [16]) = *(($1 + [168]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *($3)
	*(($1 + [80])) = *(($6 + [8]))
	*($1 + [72]) = *($6)
	$3 = *($3)
	*($1 + [88]) = *($3)
	*(($1 + [96])) = *(($3 + [8]))
	$7 = *($1)
	CALL eosio_assert([1], [10730])
	*($5) = [0]
	CALL $83($5, $1)
	$6 = *($5)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $132($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $135($3)
	
.LABEL $label$3
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$3 = (($5 + [16]) + [8])
	*($5 + [40]) = *(($1 + [168]))
	if ( (CALL $128(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [184])
	$6 = *($4)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$6 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($5 + [32]), $7)
	*($4) = $6
	
.LABEL $label$6
	CALL db_idx64_update($6, $2, ($5 + [40]))
	
.LABEL $label$5
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $128($3, ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [188])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($5 + [32]), $7)
	*($3) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10450])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10495])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($1 + [24]))
	if ( ((uint_64)((int_64)*((*(($5 + [-24])) + [24])) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*((*($8) + [24])) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10545])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [128])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [112])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [120])), (int_64)3680914825258467328, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $88($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $89(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [128])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10789])
	*($1) = *($7)
	$6 = *(*($5 + [4]) + [4])
	*($1 + [8]) = *($6)
	*($1 + [16]) = *($6 + [8])
	*($1 + [24]) = *($6 + [16])
	*(($7 = ($1 + [32]))) = *(($6 + [24]))
	*($1 + [24]) = (int_64)0
	$6 = *(*($5 + [4]) + [4])
	*($1 + [40]) = *($6 + [32])
	*($1 + [48]) = *($6 + [40])
	$2 = $2
	$6 = ($2 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($2 + [-8])
	CALL $90(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)3680914825258467328, *(*($0 + [8])), $8, $6, [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = (uint_64)*($7) >> (uint_64)(int_64)8)
	*($1 + [64]) = CALL db_idx64_store($8, (int_64)3680914825258467328, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $105($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10895])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)3680914825258467328)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10841])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10841])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $88(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10312])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = $0
	CALL $91(($3 + [32]), $5)
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[56]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10246])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [20])
	$8 = ($2 + [24])
	
.LOOP $label$3:
	*($2) = $0
	*($2 + [8]) = $6
	*((($2 + [8]) + [8])) = ($6 + [24])
	*($7) = ($6 + [40])
	*($8) = ($6 + [48])
	*($2 + [12]) = ($6 + [8])
	CALL $86(($2 + [8]), $2)
	$6 = ($6 + [56])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $46(CALL $46(CALL $46($0, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $85(CALL $46(CALL $46($0, ($1 + [120])), ($1 + [132])), ($1 + [144]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = (*($0) + [16])
	*($0) = $2
	$3 = *($1 + [16])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [16]))
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [28])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [28]))
	$3 = ( *(($1 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [40])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [40]))
	$3 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$2 = ($2 + [64])
	*($0) = $2
	$3 = *($1 + [120])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [124])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *(($1 + [120]))
	$3 = ( *(($1 + [124])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$3 = *($1 + [132])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [136])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	$3 = *(($1 + [132]))
	$3 = ( *(($1 + [136])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$10
	$1 = *($1 + [144])
	$5 = *(($1 + [148]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($5 - $1) / (int_32)[56]))
	
.LOOP $label$11:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($0) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [8])
	*($0) = $2
	$6 = *($1 + [8])
	$3 = ($1 + [12])
	$4 = (CASTING uint_64)(uint_32 ( *($3) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$14 }
	*($0) = $2
	$3 = *(($1 + [8]))
	$3 = ( *($3) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$15 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$15
	$2 = ($2 + [32])
	*($0) = $2
	$1 = ($1 + [56])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$12
	*($0) = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $35(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[56])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[76695845]) ){ goto $label$3 }
	$3 = [76695844]
	$2 = ((int_32)($2 - $4) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[56]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [16]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [56])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $115($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[56]))
	$5 = ($4 + ((int_32)$5 * (int_32)[56]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [16]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [56])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[56]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($9 + $2)
	*((($3 = ($5 + $2)) + [-56])) = *(($1 + [-56]))
	$4 = ($1 + [-40])
	*(($3 + [-40])) = *($4)
	$6 = ($1 + [-48])
	*(($3 + [-48])) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*(($3 + [-16])) = *(($1 + [-16]))
	*(($3 + [-24])) = *(($1 + [-24]))
	*(($3 + [-32])) = *(($1 + [-32]))
	*(($3 + [-8])) = *(($1 + [-8]))
	$2 = ($2 + [-56])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$14
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [10257])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$7 = *($1)
	$3 = *($1 + [4])
	$4 = ((int_32)($3 - $7) / (int_32)[56])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $81($1, ($8 - $4))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$8 * (int_32)[56]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($3 + [-56])
	if ( ((*(($3 + [-48])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-40])))
	
.LABEL $label$8
	$3 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $4
	$3 = $4
	
.LABEL $label$5
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [20])
	$7 = ($2 + [24])
	
.LOOP $label$9:
	*($2) = $0
	*($2 + [8]) = $8
	*((($2 + [8]) + [8])) = ($8 + [24])
	*($4) = ($8 + [40])
	*($7) = ($8 + [48])
	*($2 + [12]) = ($8 + [8])
	CALL $82(($2 + [8]), $2)
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10246])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $129([9659])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [16]) = ($3 << [1])
	$4 = (($2 + [16]) | [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $3
	
.LABEL $label$8
	CALL memcpy($4, [9659], $3)
	
.LABEL $label$7
	*(($4 + $3)) = [0]
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $129([8445])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$12 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$11
	CALL memcpy($4, [8445], $3)
	
.LABEL $label$10
	*(($4 + $3)) = [0]
	CALL $71($3, $1, ($2 + [16]), $2)
	if ( (*($2) & [1]) ){ goto $label$14 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$13 }
	goto $label$4 
	
.LABEL $label$14
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$13
	CALL _ZdlPv(*($2 + [24]))
	$3 = [1]
	$4 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $101(($2 + [16]))
	
.LABEL $label$5
	CALL $101($2)
	
.LABEL $label$4
	$3 = [1]
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = uint_32($4 >> $3)
	$6 = ($1 + $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	$6 = *($1 + [8])
	
.LABEL $label$1
	$5 = [0]
	$3 = CALL $129([9661])
	if ( ($3 == 0) ){ goto $label$22 }
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$21 }
	$7 = ($6 + $4)
	$5 = $6
	
.LOOP $label$23:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$21 }
	$4 = CALL $127($5, [44], $4)
	if ( ($4 == 0) ){ goto $label$21 }
	if ( (CALL $128($4, [9661], $3) == 0) ){ goto $label$24 }
	$5 = ($4 + [1])
	$4 = ($7 - $5)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$21 }
	$5 = ($4 - $6)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = CALL $103(($2 + [16]), $1, [0], $5, $1)
	$7 = CALL $103($2, $1, ($5 + [1]), [-1], $1)
	$8 = CALL $125(( *($6 + [8]) ? ($6 + [1]) : (*($2 + [16]) & [1]) ))
	$1 = *($7 + [8])
	$4 = ($3 & [1])
	$3 = *($2)
	$3 = ( *($7 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ($3 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [10148])
	goto $label$19 
	
.LABEL $label$21
	$3 = CALL $129([8445])
	if ( ($3 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [10148])
	goto $label$25 
	
.LABEL $label$26
	if ( ($3 == 0) ){ goto $label$18 }
	
.LABEL $label$25
	$9 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($3 + [8444]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$28
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$27 }
	$global$0 = ($2 + [32])
	return ((int_64)$9 << (int_64)8)
	
.LABEL $label$20
	if ( ($3 == 0) ){ goto $label$17 }
	
.LABEL $label$19
	$5 = ( $1 ? ($7 + [1]) : $4 )
	$9 = (int_64)0
	
.LOOP $label$29:
	$1 = (($5 + $3) + [-1])
	$4 = *($1)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [10193])
	$4 = *($1)
	
.LABEL $label$30
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$29 }
	$9 = ((int_64)$9 << (int_64)8)
	$3 = ($8 & [255])
	if ( ((*($2) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$18
	$global$0 = ($2 + [32])
	return (int_64)0
	
.LABEL $label$17
	$9 = (int_64)0
	$3 = ($8 & [255])
	if ( ($4 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$15
	$10 = (CASTING uint_64)(uint_32 $3)
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$31
	$global$0 = ($2 + [32])
	(unreachable)
	(unreachable)
	return ((int_64)$9 | (int_64)$10)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $54($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = *($3)
	$5 = ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = *($2)
	$6 = *($2 + [4])
	$7 = ( $6 ? uint_32($4 >> [1]) : ($4 & [1]) )
	$8 = ($3 + [1])
	$9 = ($2 + [1])
	$10 = ($1 + [1])
	$11 = [0]
	$12 = ($1 + [4])
	
.LOOP $label$2:
	$13 = ($13 & [1])
	$13 = *($1)
	$14 = ( *($12) ? uint_32($13 >> [1]) : $13 )
	if ( ($14 <= $11) ){ goto $label$1 }
	$15 = ($4 & [1])
	$4 = ( $6 ? uint_32(($4 & [254]) >> [1]) : $15 )
	if ( ($4 == 0) ){ goto $label$3 }
	$13 = ($16 + $11)
	$16 = ( *(($1 + [8])) ? $10 : $13 )
	$14 = ($16 + $14)
	$11 = ($14 - $13)
	if ( ((int_32)$11 < (int_32)$4) ){ goto $label$1 }
	$15 = ( *(($2 + [8])) ? $9 : $15 )
	$6 = *($15)
	
.LOOP $label$4:
	$11 = (($11 - $4) + [1])
	if ( ($11 == 0) ){ goto $label$1 }
	$11 = CALL $127($13, $6, $11)
	if ( ($11 == 0) ){ goto $label$1 }
	if ( (CALL $128($11, $15, $4) == 0) ){ goto $label$5 }
	$13 = ($11 + [1])
	$11 = ($14 - $13)
	if ( ((int_32)$11 >= (int_32)$4) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$1 }
	$11 = ($11 - $16)
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$1 }
	$4 = *($3)
	$13 = ($4 & [1])
	CALL $112($1, $11, $7, ( *(($3 + [8])) ? $8 : $13 ), ( *(($3 + [4])) ? uint_32($4 >> [1]) : $13 ))
	$11 = ($11 + $5)
	$6 = *(($2 + [4]))
	$4 = *($2)
	goto $label$2 
	
.LABEL $label$1
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10246])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10246])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10246])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10246])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10246])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$3 = CALL $129([9659])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [56]) = ($3 << [1])
	$4 = (($2 + [56]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [56]) = ($5 | [1])
	*($2 + [64]) = $4
	*($2 + [60]) = $3
	
.LABEL $label$5
	CALL memcpy($4, [9659], $3)
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	*(($2 + [48])) = [0]
	*($2 + [40]) = (int_64)0
	$3 = CALL $129([8445])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [40]) = ($3 << [1])
	$4 = (($2 + [40]) | [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [40]) = ($5 | [1])
	*($2 + [48]) = $4
	*($2 + [44]) = $3
	
.LABEL $label$8
	CALL memcpy($4, [8445], $3)
	
.LABEL $label$7
	*(($4 + $3)) = [0]
	CALL $71($2, $1, ($2 + [56]), ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($2 + [48]))
	
.LABEL $label$10
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($2 + [64]))
	
.LABEL $label$11
	$3 = *($1)
	$4 = CALL $129([8445])
	if ( ((int_32)$4 != (int_32)( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$13 }
	if ( (CALL $113($1, [0], [-1], [8445], $4) == 0) ){ goto $label$12 }
	$3 = *($1)
	
.LABEL $label$13
	if ( ($3 & [1]) ){ goto $label$15 }
	$1 = ($1 + [1])
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$14 
	
.LABEL $label$15
	$3 = *(($1 + [4]))
	$1 = *($1 + [8])
	
.LABEL $label$14
	*($2 + [36]) = $3
	*($2 + [32]) = $1
	*($2 + [16]) = *($2 + [32])
	CALL $2(($2 + [72]), ($2 + [16]))
	goto $label$1 
	
.LABEL $label$12
	*($2 + [24]) = [8445]
	*($2 + [28]) = CALL $129([8445])
	*($2 + [8]) = *($2 + [24])
	CALL $2(($2 + [72]), ($2 + [8]))
	goto $label$1 
	
.LABEL $label$3
	CALL $101(($2 + [56]))
	
.LABEL $label$2
	CALL $101(($2 + [40]))
	
.LABEL $label$1
	$6 = *($2 + [72])
	$global$0 = ($2 + [80])
	(unreachable)
	(unreachable)
	return $6
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10633])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10679])
	*(($5 = $4) + [16]) = *(($1 + [168]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [148])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*(($1 + [152]))) ){ goto $label$2 }
	*($9) = *($6)
	CALL $102(($9 + [8]), ($6 + [8]))
	*(($9 + [48])) = *(($6 + [48]))
	*(($9 + [40])) = *(($6 + [40]))
	*(($9 + [32])) = *(($6 + [32]))
	*($9 + [24]) = *($6 + [24])
	*($8) = (*($8) + [56])
	goto $label$1 
	
.LABEL $label$2
	CALL $58(($1 + [144]), $6)
	
.LABEL $label$1
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)-1)
	*($1 + [88]) = (int_64))(*($1 + [88]) - *(*($3) + [24]))
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [10730])
	*($5) = [0]
	CALL $83($5, $1)
	$9 = *($5)
	if ( ($9 <= [513]) ){ goto $label$4 }
	$6 = CALL $132($9)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $9)
	CALL $84($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $6, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL $135($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = (($5 + [16]) + [8])
	*($5 + [40]) = *(($1 + [168]))
	if ( (CALL $128(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [184])
	$9 = *($3)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672192, ($5 + [32]), $7)
	*($3) = $9
	
.LABEL $label$8
	CALL db_idx64_update($9, $2, ($5 + [40]))
	
.LABEL $label$7
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $128($6, ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$6 = ($1 + [188])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7235159537265672193, ($5 + [32]), $7)
	*($6) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $102(($2 + [16]), ($1 + [8]))
	$5 = *($1 + [24])
	$1 = CALL $102($2, ($1 + [32]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $102(($2 + [32]), $1)
	$6 = CALL $102(($2 + [48]), $4)
	CALL void $7((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10312])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $132($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([192])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128 align=4]) = (int_64)0
	*($5 + [136 align=4]) = (int_64)0
	*($5 + [144 align=4]) = (int_64)0
	*($5 + [152]) = [0]
	*($5 + [176]) = $0
	CALL $79(($3 + [32]), $5)
	*($5 + [180]) = $1
	*($5 + [184 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $135($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $54($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10257])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $45($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10252])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $35(CALL $35(CALL $35($0, ($1 + [16])), ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $80(CALL $35(CALL $35($0, ($1 + [120])), ($1 + [132])), ($1 + [144]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$2 }
	$6 = uint_32($5 >> [1])
	$7 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($2 + [4])
	$7 = *($2 + [8])
	
.LABEL $label$1
	$8 = [0]
	$9 = [0]
	$10 = ($5 & [1])
	$5 = *($3)
	$5 = ( *($3 + [4]) ? uint_32($5 >> [1]) : $10 )
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$15 }
	$11 = ($7 + $6)
	$10 = ( *($3 + [8]) ? ($3 + [1]) : $10 )
	$9 = *($10)
	$3 = $7
	
.LOOP $label$17:
	$6 = (($6 - $5) + [1])
	if ( ($6 == 0) ){ goto $label$15 }
	$6 = CALL $127($3, $9, $6)
	if ( ($6 == 0) ){ goto $label$15 }
	if ( (CALL $128($6, $10, $5) == 0) ){ goto $label$18 }
	$3 = ($6 + [1])
	$6 = ($11 - $3)
	if ( ((int_32)$6 >= (int_32)$5) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$15 }
	$9 = ($6 - $7)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$15 }
	
.LABEL $label$16
	$2 = CALL $103(($4 + [48]), $2, $9, [-1], $2)
	$9 = *($2 + [8])
	$6 = *($4 + [48])
	$3 = *($2 + [4])
	$5 = CALL $129([9655])
	if ( ($5 == 0) ){ goto $label$20 }
	$11 = ($6 & [1])
	$6 = ( $3 ? uint_32($6 >> [1]) : $11 )
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$19 }
	$11 = ( $9 ? ($2 + [1]) : $11 )
	$9 = ($11 + $6)
	$3 = $11
	
.LOOP $label$21:
	$6 = (($6 - $5) + [1])
	if ( ($6 == 0) ){ goto $label$19 }
	$6 = CALL $127($3, [58], $6)
	if ( ($6 == 0) ){ goto $label$19 }
	if ( (CALL $128($6, [9655], $5) == 0) ){ goto $label$22 }
	$3 = ($6 + [1])
	$6 = ($9 - $3)
	if ( ((int_32)$6 >= (int_32)$5) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$19 }
	$8 = ($6 - $11)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$19 }
	
.LABEL $label$20
	$9 = CALL $103(($4 + [32]), $2, ($8 + [1]), [-1], $2)
	$6 = *($4 + [32])
	$10 = *($9 + [8])
	$3 = *($9 + [4])
	$11 = [0]
	$5 = CALL $129([9657])
	if ( ($5 == 0) ){ goto $label$13 }
	$11 = ($6 & [1])
	$6 = ( $3 ? uint_32($6 >> [1]) : $11 )
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$12 }
	$10 = ( $10 ? ($9 + [1]) : $11 )
	$11 = ($10 + $6)
	$3 = $10
	
.LOOP $label$23:
	$6 = (($6 - $5) + [1])
	if ( ($6 == 0) ){ goto $label$12 }
	$6 = CALL $127($3, [38], $6)
	if ( ($6 == 0) ){ goto $label$12 }
	if ( (CALL $128($6, [9657], $5) == 0) ){ goto $label$14 }
	$3 = ($6 + [1])
	$6 = ($11 - $3)
	if ( ((int_32)$6 >= (int_32)$5) ){ goto $label$23 }
	goto $label$12 
	
.LABEL $label$19
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$15
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $129([8445])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$26 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$3 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$25
	CALL memcpy($6, [8445], $5)
	
.LABEL $label$24
	*(($6 + $5)) = [0]
	goto $label$5 
	
.LABEL $label$14
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$12 }
	$11 = ($6 - $10)
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $103(($4 + [16]), $9, [0], $11, $9)
	if ( (*($4 + [64]) & [1]) ){ goto $label$11 }
	*($4 + [64]) = [0]
	goto $label$10 
	
.LABEL $label$12
	CALL $104(($4 + [64]), $9)
	goto $label$9 
	
.LABEL $label$11
	*(*(($4 + [72]))) = [0]
	*($4 + [68]) = [0]
	
.LABEL $label$10
	CALL $106(($4 + [64]), [0])
	*((($4 + [64]) + [8])) = *((($4 + [16]) + [8]))
	*($4 + [64]) = *($4 + [16])
	
.LABEL $label$9
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$5 = CALL $129([9659])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$29 }
	*($4 + [16]) = ($5 << [1])
	$6 = (($4 + [16]) | [1])
	if ( $5 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$3 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($4 + [16]) = ($3 | [1])
	*($4 + [24]) = $6
	*($4 + [20]) = $5
	
.LABEL $label$28
	CALL memcpy($6, [9659], $5)
	
.LABEL $label$27
	*(($6 + $5)) = [0]
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$5 = CALL $129([8445])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($4) = ($5 << [1])
	$6 = ($4 | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$3 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($4) = ($3 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $5
	
.LABEL $label$31
	CALL memcpy($6, [8445], $5)
	
.LABEL $label$30
	*(($6 + $5)) = [0]
	CALL $71($4, ($4 + [64]), ($4 + [16]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$33
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$34
	*($0) = *($4 + [64])
	$5 = (($4 + [64]) + [8])
	*(($0 + [8])) = *($5)
	*($5) = [0]
	*($4 + [64]) = (int_64)0
	if ( (*($4 + [32]) & [1]) ){ goto $label$36 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$5 }
	goto $label$35 
	
.LABEL $label$36
	CALL _ZdlPv(*(($9 + [8])))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$35
	CALL _ZdlPv(*(($2 + [8])))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	CALL $101($0)
	
.LABEL $label$7
	CALL $101(($4 + [16]))
	
.LABEL $label$6
	CALL $101($4)
	
.LABEL $label$5
	if ( (*($4 + [64]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [80])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [368])
	$global$0 = $4
	$5 = CALL $102(($4 + [272]), $3)
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$6 = CALL $129([8855])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($4 + [256]) = ($6 << [1])
	$7 = (($4 + [256]) | [1])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4 + [256]) = ($8 | [1])
	*($4 + [264]) = $7
	*($4 + [260]) = $6
	
.LABEL $label$6
	CALL memcpy($7, [8855], $6)
	
.LABEL $label$5
	*(($7 + $6)) = [0]
	CALL $32(($4 + [288]), $0, $5, ($4 + [256]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [264]))
	
.LABEL $label$8
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$9
	$6 = [0]
	$5 = *($4 + [288])
	$7 = CALL $129([8867])
	if ( ((int_32)$7 != (int_32)( *($4 + [292]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$11 }
	$6 = [0]
	if ( (CALL $113(($4 + [288]), [0], [-1], [8867], $7) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$6 = CALL $129([8755])
	if ( ($6 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [10148])
	goto $label$13 
	
.LABEL $label$14
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$9 = (int_64)0
	
.LOOP $label$15:
	$5 = *(($6 + [8754]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$16
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$15 }
	goto $label$3 
	
.LABEL $label$12
	$9 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	CALL $101(($4 + [256]))
	
.LABEL $label$3
	$10 = *($2 + [8])
	if ( ((int_64)$10 == (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$19 }
	$6 = CALL $129([8759])
	if ( ($6 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [10148])
	goto $label$22 
	
.LABEL $label$23
	if ( ($6 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$9 = (int_64)0
	
.LOOP $label$24:
	$5 = *(($6 + [8758]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$25
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$24 }
	goto $label$20 
	
.LABEL $label$21
	$9 = (int_64)0
	
.LABEL $label$20
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)6138663591592764928), [8880])
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert([0], [8880])
	
.LABEL $label$17
	$5 = CALL $102(($4 + [224]), $3)
	*(($4 + [216])) = [0]
	*($4 + [208]) = (int_64)0
	$6 = CALL $129([8924])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$30 }
	*($4 + [208]) = ($6 << [1])
	$7 = (($4 + [208]) | [1])
	if ( $6 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4 + [208]) = ($8 | [1])
	*($4 + [216]) = $7
	*($4 + [212]) = $6
	
.LABEL $label$29
	CALL memcpy($7, [8924], $6)
	
.LABEL $label$28
	*(($7 + $6)) = [0]
	CALL $32(($4 + [240]), $0, $5, ($4 + [208]))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($4 + [216]))
	
.LABEL $label$31
	if ( ((*($5) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$32
	$6 = [1]
	$5 = *($4 + [240])
	$7 = CALL $129([8445])
	if ( ((int_32)$7 != (int_32)( *($4 + [244]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$33 }
	$6 = ((int_32)CALL $113(($4 + [240]), [0], [-1], [8445], $7) != (int_32)[0])
	
.LABEL $label$33
	CALL eosio_assert($6, [8938])
	$6 = CALL $129([8755])
	if ( ($6 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [10148])
	goto $label$35 
	
.LABEL $label$36
	if ( ($6 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$9 = (int_64)0
	
.LOOP $label$37:
	$5 = *(($6 + [8754]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$38
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$37 }
	goto $label$26 
	
.LABEL $label$34
	$9 = (int_64)0
	goto $label$26 
	
.LABEL $label$27
	CALL $101(($4 + [208]))
	
.LABEL $label$26
	$10 = *(($2 + [8]))
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$40 }
	CALL eosio_assert(((int_64)*($2) > (int_64)99999), [8967])
	$11 = (int_64)-4352380128173315712
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $129([8759])
	if ( ($6 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [10148])
	goto $label$43 
	
.LABEL $label$44
	if ( ($6 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$9 = (int_64)0
	
.LOOP $label$45:
	$5 = *(($6 + [8758]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$46
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$45 }
	goto $label$41 
	
.LABEL $label$42
	$9 = (int_64)0
	
.LABEL $label$41
	$11 = (int_64)0
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$39 }
	CALL eosio_assert(((int_64)*($2) > (int_64)99999), [9011])
	$11 = (int_64)-4352380129783977600
	
.LABEL $label$39
	*($4 + [200]) = [0]
	$9 = (int_64)0
	*($4 + [192]) = (int_64)0
	$6 = *($4 + [240])
	$5 = ($6 & [1])
	CALL $111(($4 + [192]), ( *($4 + [248]) ? (($4 + [240]) | [1]) : $5 ), ( *($4 + [244]) ? uint_32($6 >> [1]) : $5 ))
	$6 = CALL $129([8755])
	if ( ($6 <= [8]) ){ goto $label$49 }
	CALL eosio_assert([0], [10148])
	goto $label$48 
	
.LABEL $label$49
	if ( ($6 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	$9 = (int_64)0
	
.LOOP $label$50:
	$5 = *(($6 + [8754]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$51 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$51
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$50 }
	
.LABEL $label$47
	if ( ((int_64)$10 == (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$53 }
	$6 = CALL $129([8759])
	if ( ($6 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [10148])
	goto $label$56 
	
.LABEL $label$57
	if ( ($6 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$9 = (int_64)0
	
.LOOP $label$58:
	$5 = *(($6 + [8758]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$59
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$58 }
	goto $label$54 
	
.LABEL $label$55
	$9 = (int_64)0
	
.LABEL $label$54
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$52 }
	
.LABEL $label$53
	CALL $110(($4 + [192]), [9055])
	
.LABEL $label$52
	*($4 + [144]) = (int_64)3617214756542218240
	*($4 + [136]) = *($0)
	$9 = *($0 + [8])
	$5 = CALL $102(($4 + [120]), ($4 + [192]))
	*(($4 + [328])) = *(($2 + [8]))
	$6 = *((($4 + [120]) + [8]))
	$10 = *($4 + [120])
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	*(($4 + [344])) = $6
	*($4 + [312]) = $11
	*($4 + [304]) = *($0)
	*($4 + [320]) = *($2)
	*($4 + [336]) = $10
	$6 = CALL $41(($4 + [152]), ($4 + [136]), $9, (int_64)-3617168760277827584, ($4 + [304]))
	CALL $42(($4 + [352]), $6)
	$7 = *($4 + [352])
	CALL send_inline($7, (*($4 + [356]) - $7))
	$7 = *($4 + [352])
	if ( ($7 == 0) ){ goto $label$60 }
	*($4 + [356]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$60
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$61 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$61
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$62 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$62
	if ( ((*(($4 + [336])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($4 + [344])))
	
.LABEL $label$63
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$64
	$5 = CALL $102(($4 + [104]), $3)
	*(($4 + [96])) = [0]
	*($4 + [88]) = (int_64)0
	$6 = CALL $129([9110])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$74 }
	*($4 + [88]) = ($6 << [1])
	$7 = (($4 + [88]) | [1])
	if ( $6 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$2 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($2)
	*($4 + [88]) = ($2 | [1])
	*($4 + [96]) = $7
	*($4 + [92]) = $6
	
.LABEL $label$73
	CALL memcpy($7, [9110], $6)
	
.LABEL $label$72
	*(($7 + $6)) = [0]
	CALL $32(($4 + [136]), $0, $5, ($4 + [88]))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*($4 + [96]))
	
.LABEL $label$75
	if ( ((*($5) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$76
	$5 = CALL $102(($4 + [72]), $3)
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$6 = CALL $129([9122])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$70 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$79 }
	*($4 + [56]) = ($6 << [1])
	$7 = (($4 + [56]) | [1])
	if ( $6 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$3 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($3)
	*($4 + [56]) = ($3 | [1])
	*($4 + [64]) = $7
	*($4 + [60]) = $6
	
.LABEL $label$78
	CALL memcpy($7, [9122], $6)
	
.LABEL $label$77
	*(($7 + $6)) = [0]
	CALL $32(($4 + [352]), $0, $5, ($4 + [56]))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*($4 + [64]))
	
.LABEL $label$80
	if ( ((*($5) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$81
	$5 = [1]
	$6 = *($4 + [136])
	$7 = CALL $129([8445])
	if ( ((int_32)$7 != (int_32)( *($4 + [140]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$83 }
	$6 = [0]
	if ( (CALL $113(($4 + [136]), [0], [-1], [8445], $7) == 0) ){ goto $label$82 }
	
.LABEL $label$83
	$6 = *($4 + [352])
	$7 = CALL $129([8445])
	if ( ((int_32)$7 != (int_32)( *($4 + [356]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$84 }
	$5 = ((int_32)CALL $113(($4 + [352]), [0], [-1], [8445], $7) != (int_32)[0])
	
.LABEL $label$84
	$6 = $5
	
.LABEL $label$82
	CALL eosio_assert($6, [9143])
	$6 = CALL $102(($4 + [40]), ($4 + [136]))
	$10 = CALL $73($0, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$85
	CALL eosio_assert(((int_64)$10 != (int_64)0), [9183])
	$6 = CALL $102(($4 + [24]), ($4 + [352]))
	$11 = CALL $74($0, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$86
	CALL eosio_assert(((int_64)$11 != (int_64)0), [9203])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ($0 + [72])
	$5 = *(($0 + [100]))
	$3 = *(($0 + [96]))
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$88 }
	
.LOOP $label$90:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)(uint_64)*(($7 + [24])) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$89 }
	$5 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$88 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [10261])
	goto $label$87 
	
.LABEL $label$88
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)3680914790898728960, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$87 }
	$7 = CALL $43($2, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [10261])
	
.LABEL $label$87
	$6 = CALL $102(($4 + [8]), ($4 + [240]))
	$9 = CALL $74($0, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$91 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$91
	CALL eosio_assert(($7 == 0), [9237])
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$8()), [10335])
	*(($6 = CALL _Znwj([64])) + [48]) = $2
	*($6 + [8]) = $1
	*($6) = $9
	*($6 + [24]) = $10
	*($6 + [16]) = (int_64)0
	*($6 + [32]) = $11
	*($6 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [160]) = (($4 + [304]) + [48])
	*($4 + [156]) = ($4 + [304])
	*($4 + [152]) = ($4 + [304])
	CALL $44(($4 + [152]), $6)
	$9 = (uint_64)*($6 + [24]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [80])), (int_64)3680914790898728960, $12, $9), ($4 + [304]), [48]
	*($6 + [52]) = $7)
	$5 = ($0 + [88])
	if ( (uint_64)($9 <= *($5)) ){ goto $label$92 }
	*($5) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$92
	*($4 + [152]) = $6
	$9 = (uint_64)*(($6 + [24])) >> (uint_64)(int_64)8
	*($4 + [304]) = $9)
	*($4 + [120]) = $7
	$3 = ($0 + [100])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$95 }
	*($5 + [8]) = $9
	*($5 + [16]) = $7
	*($4 + [152]) = [0]
	*($5) = $6
	*($3) = ($5 + [24])
	$6 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( $6 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	CALL $62(($0 + [96]), ($4 + [152]), ($4 + [304]), ($4 + [120]))
	$6 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( ($6 == 0) ){ goto $label$93 }
	
.LABEL $label$94
	CALL _ZdlPv($6)
	
.LABEL $label$93
	if ( (*($4 + [352]) & [1]) ){ goto $label$97 }
	if ( (*($4 + [136]) & [1]) ){ goto $label$96 }
	goto $label$69 
	
.LABEL $label$97
	CALL _ZdlPv(*($4 + [360]))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$69 }
	
.LABEL $label$96
	CALL _ZdlPv(*($4 + [144]))
	$6 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$71
	CALL $101(($4 + [88]))
	
.LABEL $label$70
	CALL $101(($4 + [56]))
	
.LABEL $label$69
	$6 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$67 }
	
.LABEL $label$68
	if ( ((*($4 + [240]) & $6) == 0) ){ goto $label$65 }
	goto $label$66 
	
.LABEL $label$67
	CALL _ZdlPv(*(($4 + [200])))
	if ( ((*($4 + [240]) & $6) == 0) ){ goto $label$65 }
	
.LABEL $label$66
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$65
	$6 = [1]
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [296]))
	
.LABEL $label$1
	$global$0 = ($4 + [368])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return $6
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10252])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10252])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $35(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $102(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $102(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}