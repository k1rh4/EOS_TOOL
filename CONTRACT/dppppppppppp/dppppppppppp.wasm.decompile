(data (i32.const 8192) "contract was not support action\00")
(data (i32.const 8224) "transfer not made to this contract\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8345) "transfer not from eosio.token Or eosyxtoken11\00")
(data (i32.const 8391) "contract_invoke_error:contract_share_error,[[[[25363]]]]\00")
(data (i32.const 8448) "EOS\00")
(data (i32.const 8452) "EOSYX\00")
(data (i32.const 8458) "contract_invoke_error:contract_lottery_error,[[[[\00")
(data (i32.const 8508) ",\00")
(data (i32.const 8510) "]]]]\00")
(data (i32.const 8515) "lose,\00%d\00")
(data (i32.const 8524) "tie,\00")
(data (i32.const 8529) "win,\00")
(data (i32.const 8534) "Congratulations\ef\bc\8cyou win\ef\bc\81(\00")
(data (i32.const 8564) ") https://eosyx.vip\00")
(data (i32.const 8584) "It\'s a tie! (\00%llu\00")
(data (i32.const 8603) "sangong\00")
(data (i32.const 8611) "longzhenghudou\00")
(data (i32.const 8626) "\e5\88\86\e7\ba\a2\e5\a5\96\e5\8a\b1\e8\bd\ac\e7\a7\bb\e5\88\b0\e4\bb\a3\e5\b8\81\e8\b4\a8\e6\8a\bc\e5\b8\90\e5\8f\b7\00")
(data (i32.const 8666) "queue Home was not exists\00")
(data (i32.const 8692) "home status was invalid\00")
(data (i32.const 8716) "r=\00")
(data (i32.const 8719) ";\00")
(data (i32.const 8721) "player role was valid\00")
(data (i32.const 8743) "single bet amount must on 0.1 ~ 100 EOS\00")
(data (i32.const 8783) "single bet amount must on 10 ~ 5000 EOSYX\00")
(data (i32.const 8825) "t=1\00")
(data (i32.const 8829) "g=1\00")
(data (i32.const 8833) "g=2\00")
(data (i32.const 8837) "t=2\00")
(data (i32.const 8841) "eos home must bigger 300 EOS\00")
(data (i32.const 8870) "t=3\00")
(data (i32.const 8874) "home was not exists\00")
(data (i32.const 8894) "player was invalid\00")
(data (i32.const 8913) "player eos was overflow\00")
(data (i32.const 8937) "player eosyx was overflow\00")
(data (i32.const 8963) "This is your Token reward from bet!(\e8\bf\99\e6\98\af\e6\82\a8\e7\9a\84\e6\8a\95\e6\b3\a8Token\e5\a5\96\e5\8a\b1\ef\bc\89https://eosyx.vip\00")
(data (i32.const 9049) "This is your referral reward!(\e8\bf\99\e6\98\af\e6\82\a8\e7\9a\84\e9\82\80\e8\af\b7\e5\a5\96\e5\8a\b1\ef\bc\89https://eosyx.vip\00")
(data (i32.const 9124) "&\00")
(data (i32.const 9126) "This is your home reward!(\e8\bf\99\e6\98\af\e6\82\a8\e7\9a\84\e5\9d\90\e5\ba\84\e6\8f\90\e7\8e\b0\ef\bc\89https://eosyx.vip\00")
(data (i32.const 9197) "lzhd\00")
(data (i32.const 9202) "string is too long to be a valid symbol_code\00")
(data (i32.const 9247) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9300) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9349) "invalid symbol name\00")
(data (i32.const 9369) "attempt to add asset with different symbol\00")
(data (i32.const 9412) "addition underflow\00")
(data (i32.const 9431) "addition overflow\00")
(data (i32.const 9449) "divide by zero\00")
(data (i32.const 9464) "signed division overflow\00")
(data (i32.const 9489) "multiplication overflow\00")
(data (i32.const 9513) "multiplication underflow\00")
(data (i32.const 9538) "attempt to subtract asset with different symbol\00")
(data (i32.const 9586) "subtraction underflow\00")
(data (i32.const 9608) "subtraction overflow\00")
(data (i32.const 9629) "unable to find key\00")
(data (i32.const 9648) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9699) "error reading iterator\00")
(data (i32.const 9722) "read\00")
(data (i32.const 9727) "write\00")
(data (i32.const 9733) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9792) "string is too long to be a valid name\00")
(data (i32.const 9830) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9897) "character is not in allowed character set for names\00")
(data (i32.const 9949) "get\00")
(data (i32.const 9953) "cannot pass end iterator to erase\00")
(data (i32.const 9987) "cannot increment end iterator\00")
(data (i32.const 10017) "object passed to erase is not in multi_index\00")
(data (i32.const 10062) "cannot erase objects in table of another contract\00")
(data (i32.const 10112) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10165) "cannot create objects in table of another contract\00")
(data (i32.const 10216) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10268) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10322) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10370) "cannot pass end iterator to modify\00")
(data (i32.const 10405) "object passed to modify is not in multi_index\00")
(data (i32.const 10451) "cannot modify objects in table of another contract\00")
(data (i32.const 10502) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18992) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$6 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$7 (param i32 i64 i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_find_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "require_recipient" (func $fimport$14 (param i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$23 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "memset" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $106))
(export "_Znwj" (func $104))
(export "_Znaj" (func $105))
(export "_ZdaPv" (func $107))
(export "_ZnwjSt11align_val_t" (func $108))
(export "_ZnajSt11align_val_t" (func $109))
(export "_ZdlPvSt11align_val_t" (func $110))
(export "_ZdaPvSt11align_val_t" (func $111))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $6 $8 $11 $13 $14 $15 $16 $18 $19 $131 $133)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19072))
(global $global$2 i32 (i32.const 19072))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9727])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9727])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $98(*($1), (*($0) + [40]))
	$3 = *($0)
	CALL $98(*($1), ($3 + [52]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($3 + [64]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = *(($3 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($3 + [80]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *(($3 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [80]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [81]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0)
	$0 = *($0)
	$3 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$4 = *($0)
	$4 = ( *(($0 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [24])
	*($2) = $1
	$4 = *($0 + [40])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$4 = *(($0 + [40]))
	$4 = ( *(($0 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($0 + [52])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [56])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [52]))
	$0 = ( *(($0 + [56])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [32])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $98(*($1), *($0))
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $99(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9949])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $63($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9722])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $89(*($1), (*($0) + [40]))
	$3 = *($0)
	CALL $89(*($1), ($3 + [52]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($3 + [72])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($3 + [80]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($3 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [104])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [120])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [136])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [152])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [168])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $137(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $121($0, $1, $2, CALL $138($2))
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [10] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18992]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $130([11], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $115($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $115($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [84])) == (int_32)$0), [10017])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10062])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10112])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
}

void .FUNC $126 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $117(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8598], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $117(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $117(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9987])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)7035929195654414336, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9648])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $35($6, CALL $fimport$12(*($6), *($6 + [8]), (int_64)7035929195654414336, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9648])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7035929195654414336, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9648])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $35($7, CALL $fimport$12(*($7), *($7 + [8]), (int_64)7035929195654414336, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9648])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $117(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8521], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $117(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $117(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [56])
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$8 = (($6 + [56]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(($6 + [60]))
	$8 = *(($6 + [64]))
	
.LABEL $label$1
	*($3 + [28]) = $7
	*($3 + [24]) = $8
	*($3) = *($3 + [24])
	*($1) = *(CALL $47(($3 + [8]), $3))
	*($1 + [8]) = *($6)
	$9 = CALL current_time()
	*($1 + [24]) = [1]
	*($1 + [16]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($5 + [4])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	$6 = *($5 + [8])
	*($1 + [48]) = *($6)
	*(($1 + [56])) = *(($6 + [8]))
	*($1 + [64]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[60]))
	$6 = *($5 + [8])
	*(($1 + [80])) = *(($6 + [8]))
	*($1 + [72]) = *($6)
	*($1 + [88]) = (int_64)0
	$6 = *($5 + [12])
	*($1 + [96]) = *($6)
	*(($1 + [104])) = *(($6 + [8]))
	$6 = *($5 + [16])
	*($1 + [112]) = *($6)
	*(($1 + [120])) = *(($6 + [8]))
	$6 = *($5 + [20])
	*($1 + [128]) = *($6)
	*(($1 + [136])) = *(($6 + [8]))
	$6 = *($5 + [24])
	*($1 + [144]) = *($6)
	*(($1 + [152])) = *(($6 + [8]))
	$5 = *($5 + [28])
	*($1 + [160]) = *($5)
	*(($1 + [168])) = *(($5 + [8]))
	$6 = $2
	$5 = ($6 + [-176])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-7])
	CALL $56(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [180]) = CALL db_store_i64(*($4 + [8]), (int_64)7864586771156172800, *(*($0 + [8])), $9, $5, [169])
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9202])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8]) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $5
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$3 = $5
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $4 ){ goto $label$12 }
	$6 = [1]
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert($6, [9349])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [9349])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [9349])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = CALL $138([8448])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9202])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8447]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8]) = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$3 = $5
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$3 = $5
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $4 ){ goto $label$12 }
	$6 = [1]
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert($6, [9349])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [9349])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [9349])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9792])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9897])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9830])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9897])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $113(($2 + [16]), ($1 + [16]))
	$6 = CALL $113($2, ($1 + [28]))
	$7 = *($1 + [40])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*($0) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $113(($2 + [32]), $6)
	$8 = CALL $113(($2 + [48]), $5)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $8), (int_32 $9), (int_32 $7), (int_64 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $89(*($1), ($3 + [16]))
	CALL $89(*($1), ($3 + [28]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($3 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [68])
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$8 = (($6 + [68]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(($6 + [72]))
	$8 = *(($6 + [76]))
	
.LABEL $label$1
	*($3 + [28]) = $7
	*($3 + [24]) = $8
	*($3) = *($3 + [24])
	*($1) = *(CALL $47(($3 + [8]), $3))
	*($1 + [8]) = *($6)
	$9 = CALL current_time()
	*($1 + [24]) = [1]
	*($1 + [16]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($5 + [4])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	$6 = *($5 + [8])
	*($1 + [48]) = *($6)
	*(($1 + [56])) = *(($6 + [8]))
	*($1 + [64]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[60]))
	$6 = *($5 + [8])
	*(($1 + [80])) = *(($6 + [8]))
	*($1 + [72]) = *($6)
	*($1 + [88]) = (int_64)0
	$6 = *($5 + [12])
	*($1 + [96]) = *($6)
	*(($1 + [104])) = *(($6 + [8]))
	$6 = *($5 + [16])
	*($1 + [112]) = *($6)
	*(($1 + [120])) = *(($6 + [8]))
	$6 = *($5 + [20])
	*($1 + [128]) = *($6)
	*(($1 + [136])) = *(($6 + [8]))
	$6 = *($5 + [24])
	*($1 + [144]) = *($6)
	*(($1 + [152])) = *(($6 + [8]))
	$5 = *($5 + [28])
	*($1 + [160]) = *($5)
	*(($1 + [168])) = *(($5 + [8]))
	$6 = $2
	$5 = ($6 + [-176])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-7])
	CALL $56(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [180]) = CALL db_store_i64(*($4 + [8]), (int_64)7864586771156172800, *(*($0 + [8])), $9, $5, [169])
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $138($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $115($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $128 ()
{
	return [10568]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_64 $41
	int_64 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_64 $46
	int_64 $47
	$6 = ($global$0 - [752])
	$global$0 = $6
	*($6 + [520]) = $2
	CALL require_auth(*($0))
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$6 }
	$7 = *($0 + [56])
	if ( ($7 & [1]) ){ goto $label$5 }
	$7 = uint_32($7 >> [1])
	$8 = (($0 + [56]) + [1])
	goto $label$4 
	
.LABEL $label$6
	$7 = *($0 + [68])
	if ( ($7 & [1]) ){ goto $label$3 }
	$7 = uint_32($7 >> [1])
	$8 = (($0 + [68]) + [1])
	goto $label$2 
	
.LABEL $label$5
	$7 = *(($0 + [60]))
	$8 = *(($0 + [64]))
	
.LABEL $label$4
	*($6 + [460]) = $7
	*($6 + [456]) = $8
	*($6 + [112]) = *($6 + [456])
	CALL $47(($6 + [528]), ($6 + [112]))
	goto $label$1 
	
.LABEL $label$3
	$7 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	
.LABEL $label$2
	*($6 + [460]) = $7
	*($6 + [456]) = $8
	*($6 + [120]) = *($6 + [456])
	CALL $47(($6 + [528]), ($6 + [120]))
	
.LABEL $label$1
	$2 = *($6 + [528])
	$9 = ($0 + [88])
	$8 = *(($0 + [116]))
	$10 = *(($0 + [112]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$9 }
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($11 + [176]) == (int_32)$9), [9648])
	*($6 + [516]) = $11
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL db_find_i64(*($9), *(($0 + [96])), (int_64)7864586771156172800, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$11 }
	$7 = CALL $33($9, $7)
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$9), [9648])
	*($6 + [516]) = $7
	goto $label$7 
	
.LABEL $label$11
	*($6 + [516]) = [0]
	
.LABEL $label$7
	*($6 + [512]) = $9
	CALL $126(($6 + [392]), $1)
	$7 = CALL $122(($6 + [392]), [0], [8458])
	$8 = ($7 + [8])
	*((($6 + [408]) + [8])) = *($8)
	*($6 + [408]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $119(($6 + [408]), [8508])
	$8 = ($7 + [8])
	*((($6 + [456]) + [8])) = *($8)
	*($6 + [456]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	CALL $126(($6 + [376]), *($6 + [520]))
	$7 = *($6 + [376])
	$8 = ($7 & [1])
	$7 = CALL $120(($6 + [456]), ( *($6 + [384]) ? (($6 + [376]) | [1]) : $8 ), ( *($6 + [380]) ? uint_32($7 >> [1]) : $8 ))
	$8 = ($7 + [8])
	*((($6 + [528]) + [8])) = *($8)
	*($6 + [528]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	$7 = CALL $119(($6 + [528]), [8510])
	$8 = ($7 + [8])
	*((($6 + [496]) + [8])) = *($8)
	*($6 + [496]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	if ( (*($6 + [528]) & [1]) ){ goto $label$20 }
	if ( (*($6 + [376]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($6 + [536]))
	if ( ((*($6 + [376]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($6 + [384])))
	$7 = [1]
	if ( ((*($6 + [456]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = [1]
	if ( (*($6 + [456]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($6 + [408]) & $7) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($6 + [464]))
	if ( ((*($6 + [408]) & $7) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($6 + [416]))
	$7 = [1]
	if ( (*($6 + [392]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$7 = [1]
	if ( ((*($6 + [392]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($6 + [400]))
	
.LABEL $label$12
	$11 = (($6 + [496]) | $7)
	CALL eosio_assert(((int_32)*(*($6 + [516]) + [24]) == (int_32)$7), ( *($6 + [504]) ? $11 : (*($6 + [496]) & $7) ))
	*($6 + [488]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[60]))
	*($6 + [480]) = ($0 + [128])
	CALL $48(($6 + [528]), ($6 + [480]), ($6 + [520]))
	$7 = *($6 + [532])
	if ( ($7 == 0) ){ goto $label$28 }
	if ( ((int_64)*($6 + [520]) != (int_64)*($7 + [8])) ){ goto $label$28 }
	$2 = *($6 + [528])
	*($6 + [472]) = $2
	$10 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($10) == 0) ){ goto $label$26 }
	
.LOOP $label$29:
	if ( ((int_64)*($10 + [8]) != (int_64)*($6 + [520])) ){ goto $label$25 }
	if ( ((int_64)*($10 + [16]) == (int_64)$1) ){ goto $label$27 }
	CALL $49(($6 + [472]))
	$10 = *($6 + [476])
	if ( $10 ){ goto $label$29 }
	goto $label$24 
	
.LABEL $label$28
	*($6 + [476]) = [0]
	*($6 + [472]) = ($6 + [480])
	$12 = [31]
	goto $label$21 
	
.LABEL $label$27
	if ( ($10 == 0) ){ goto $label$23 }
	$13 = *($6 + [472])
	$14 = *($0)
	$15 = *($0 + [32])
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$32 }
	CALL eosio_assert([0], [9202])
	goto $label$31 
	
.LABEL $label$32
	if ( ($7 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$2 = (int_64)0
	
.LOOP $label$33:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$34
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$33 }
	goto $label$22 
	
.LABEL $label$30
	$2 = (int_64)0
	goto $label$22 
	
.LABEL $label$26
	$12 = [31]
	goto $label$21 
	
.LABEL $label$25
	$12 = [31]
	goto $label$21 
	
.LABEL $label$24
	$12 = [31]
	goto $label$21 
	
.LABEL $label$23
	$12 = [31]
	goto $label$21 
	
.LABEL $label$22
	*(($6 + [560])) = [0]
	*($6 + [536]) = $14
	*($6 + [528]) = $15
	*($6 + [544]) = (int_64)-1
	*($6 + [552]) = (int_64)0
	$7 = CALL $39(($6 + [528]), $2, [9629])
	*((($6 + [456]) + [8])) = *(($7 + [8]))
	*($6 + [456]) = *($7)
	$16 = *($6 + [552])
	if ( ($16 == 0) ){ goto $label$35 }
	$17 = ($6 + [556])
	$7 = *($17)
	if ( ((int_32)$7 == (int_32)$16) ){ goto $label$37 }
	
.LOOP $label$38:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$39 }
	CALL _ZdlPv($8)
	
.LABEL $label$39
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$38 }
	$7 = *(($6 + [552]))
	goto $label$36 
	
.LABEL $label$37
	$7 = $16
	
.LABEL $label$36
	*($17) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$35
	*($6 + [448]) = ($0 + [208])
	*($6 + [444]) = [0]
	$18 = ($10 + [56])
	$2 = *($0)
	$14 = *($10 + [56])
	*($6 + [440]) = ($6 + [448])
	if ( ((int_64)$14 == (int_64)$2) ){ goto $label$40 }
	CALL $24(($6 + [528]), ($6 + [448]), $18)
	$7 = *($6 + [532])
	if ( ($7 == 0) ){ goto $label$43 }
	if ( ((int_64)*($18) != (int_64)*($7 + [8])) ){ goto $label$43 }
	$2 = *($6 + [528])
	*($6 + [408]) = $2
	$8 = [0]
	*($6 + [444]) = [0]
	*($6 + [440]) = ($6 + [448])
	$7 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$41 }
	
.LOOP $label$45:
	if ( ((int_64)*($7 + [8]) != (int_64)*($18)) ){ goto $label$44 }
	if ( ((int_64)*($7 + [64]) == (int_64)$1) ){ goto $label$42 }
	CALL $25(($6 + [408]))
	$7 = *($6 + [412])
	if ( $7 ){ goto $label$45 }
	
.LABEL $label$44
	$8 = *($6 + [444])
	goto $label$41 
	
.LABEL $label$43
	$8 = [0]
	*($6 + [412]) = [0]
	*($6 + [408]) = ($6 + [448])
	*($6 + [444]) = [0]
	*($6 + [440]) = ($6 + [448])
	goto $label$41 
	
.LABEL $label$42
	$2 = *($6 + [408])
	*($6 + [440]) = $2
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32))
	
.LABEL $label$41
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), ( *((($6 + [496]) + [8])) ? $11 : (*($6 + [496]) & [1]) ))
	$7 = *($6 + [444])
	*((($6 + [456]) + [8])) = *(($7 + [24]))
	*($6 + [456]) = *($7 + [16])
	
.LABEL $label$40
	*($6 + [432]) = [0]
	*($6 + [424]) = (int_64)0
	$19 = ( [3] ? [5] : ((int_64)$1 == (int_64)2) )
	$20 = ($4 + [1])
	$21 = ($3 + [1])
	$22 = (($6 + [528]) | [1])
	$23 = (($6 + [528]) + [8])
	$24 = ($4 + [4])
	$16 = [1]
	
.LOOP $label$46:
	CALL $125(($6 + [528]), $16)
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$48 }
	$8 = uint_32($7 >> [1])
	$26 = $21
	goto $label$47 
	
.LABEL $label$48
	$8 = *(($3 + [4]))
	$26 = *(($3 + [8]))
	
.LABEL $label$47
	$11 = ($7 & [1])
	$7 = *($6 + [528])
	$7 = ( *($6 + [532]) ? uint_32($7 >> [1]) : $11 )
	if ( ($7 == 0) ){ goto $label$59 }
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$58 }
	$27 = ($26 + $8)
	$25 = ( *($23) ? $22 : $11 )
	$17 = *($25)
	$11 = $26
	
.LOOP $label$60:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$58 }
	$8 = CALL $136($11, $17, $8)
	if ( ($8 == 0) ){ goto $label$58 }
	if ( (CALL $137($8, $25, $7) == 0) ){ goto $label$61 }
	$11 = ($8 + [1])
	$8 = ($27 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$61
	if ( ((int_32)$8 == (int_32)$27) ){ goto $label$58 }
	if ( ((int_32)($8 - $26) == (int_32)[-1]) ){ goto $label$58 }
	
.LABEL $label$59
	CALL $50(($6 + [408]), ($6 + [424]), [8529])
	if ( (*($6 + [424]) & [1]) ){ goto $label$57 }
	*($6 + [424]) = [0]
	goto $label$56 
	
.LABEL $label$58
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$63 }
	$8 = uint_32($7 >> [1])
	$26 = $20
	goto $label$62 
	
.LABEL $label$63
	$8 = *($24)
	$26 = *(($4 + [8]))
	
.LABEL $label$62
	$11 = ($7 & [1])
	$7 = *($6 + [528])
	$7 = ( *($6 + [532]) ? uint_32($7 >> [1]) : $11 )
	if ( ($7 == 0) ){ goto $label$54 }
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$53 }
	$25 = ($26 + $8)
	$27 = ( *($23) ? $22 : $11 )
	$17 = *($27)
	$11 = $26
	
.LOOP $label$64:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$53 }
	$8 = CALL $136($11, $17, $8)
	if ( ($8 == 0) ){ goto $label$53 }
	if ( (CALL $137($8, $27, $7) == 0) ){ goto $label$55 }
	$11 = ($8 + [1])
	$8 = ($25 - $11)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$64 }
	goto $label$53 
	
.LABEL $label$57
	*(*((($6 + [424]) + [8]))) = [0]
	*($6 + [428]) = [0]
	
.LABEL $label$56
	CALL $116(($6 + [424]), [0])
	*((($6 + [424]) + [8])) = *((($6 + [408]) + [8]))
	*($6 + [424]) = *($6 + [408])
	if ( ((*($6 + [528]) & [1]) == 0) ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$55
	if ( ((int_32)$8 == (int_32)$25) ){ goto $label$53 }
	if ( ((int_32)($8 - $26) == (int_32)[-1]) ){ goto $label$53 }
	
.LABEL $label$54
	CALL $50(($6 + [408]), ($6 + [424]), [8524])
	if ( (*($6 + [424]) & [1]) ){ goto $label$52 }
	*($6 + [424]) = [0]
	goto $label$51 
	
.LABEL $label$53
	CALL $50(($6 + [408]), ($6 + [424]), [8515])
	if ( (*($6 + [424]) & [1]) ){ goto $label$66 }
	*($6 + [424]) = [0]
	goto $label$65 
	
.LABEL $label$66
	*(*((($6 + [424]) + [8]))) = [0]
	*($6 + [428]) = [0]
	
.LABEL $label$65
	CALL $116(($6 + [424]), [0])
	*((($6 + [424]) + [8])) = *((($6 + [408]) + [8]))
	*($6 + [424]) = *($6 + [408])
	if ( (*($6 + [528]) & [1]) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	*(*((($6 + [424]) + [8]))) = [0]
	*($6 + [428]) = [0]
	
.LABEL $label$51
	CALL $116(($6 + [424]), [0])
	*((($6 + [424]) + [8])) = *((($6 + [408]) + [8]))
	*($6 + [424]) = *($6 + [408])
	if ( ((*($6 + [528]) & [1]) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	CALL _ZdlPv(*($23))
	
.LABEL $label$49
	$16 = ($16 + [1])
	if ( ($16 <= $19) ){ goto $label$46 }
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [9202])
	goto $label$69 
	
.LABEL $label$70
	if ( ($7 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$14 = (int_64)0
	
.LOOP $label$71:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$72
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$71 }
	goto $label$67 
	
.LABEL $label$68
	$14 = (int_64)0
	
.LABEL $label$67
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$14 & (int_64)72057594037927935)
	$28 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$14 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$76 }
	$2 = $14
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$76
	$2 = $14
	
.LOOP $label$77:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$74 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$77 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$8 = [0]
	
.LABEL $label$73
	CALL eosio_assert($8, [9349])
	$7 = CALL $138([8452])
	if ( ($7 <= [8]) ){ goto $label$81 }
	CALL eosio_assert([0], [9202])
	goto $label$80 
	
.LABEL $label$81
	if ( ($7 == 0) ){ goto $label$79 }
	
.LABEL $label$80
	$14 = (int_64)0
	
.LOOP $label$82:
	$8 = *(($7 + [8451]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$83 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$83
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$82 }
	goto $label$78 
	
.LABEL $label$79
	$14 = (int_64)0
	
.LABEL $label$78
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$14 & (int_64)72057594037927935)
	$29 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$86:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$85 }
	$14 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$87 }
	$2 = $14
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$87
	$2 = $14
	
.LOOP $label$88:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$85 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$88 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	$8 = [0]
	
.LABEL $label$84
	CALL eosio_assert($8, [9349])
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$92 }
	CALL eosio_assert([0], [9202])
	goto $label$91 
	
.LABEL $label$92
	if ( ($7 == 0) ){ goto $label$90 }
	
.LABEL $label$91
	$2 = (int_64)0
	
.LOOP $label$93:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$94 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$94
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$93 }
	goto $label$89 
	
.LABEL $label$90
	$2 = (int_64)0
	
.LABEL $label$89
	*($6 + [408]) = (int_64)0
	*($6 + [416]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$7 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$14 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$98 }
	$2 = $14
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$98
	$2 = $14
	
.LOOP $label$99:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$96 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$99 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$8 = [0]
	
.LABEL $label$95
	CALL eosio_assert($8, [9349])
	$7 = CALL $138([8452])
	if ( ($7 <= [8]) ){ goto $label$103 }
	CALL eosio_assert([0], [9202])
	goto $label$102 
	
.LABEL $label$103
	if ( ($7 == 0) ){ goto $label$101 }
	
.LABEL $label$102
	$2 = (int_64)0
	
.LOOP $label$104:
	$8 = *(($7 + [8451]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$105 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$105
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$104 }
	goto $label$100 
	
.LABEL $label$101
	$2 = (int_64)0
	
.LABEL $label$100
	*($6 + [392]) = (int_64)0
	*($6 + [400]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$7 = [0]
	
.LOOP $label$108:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$107 }
	$14 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$109 }
	$2 = $14
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$109
	$2 = $14
	
.LOOP $label$110:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$107 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$110 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$107
	$8 = [0]
	
.LABEL $label$106
	CALL eosio_assert($8, [9349])
	$7 = *($6 + [516])
	$2 = *(($7 + [104]))
	*(($6 + [384])) = $2
	*($6 + [376]) = *($7 + [96])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($10 + [48]))), [9538])
	$2 = (int_64)
	*($6 + [376]) = $2(*($6 + [376]) - *($10 + [40])))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [9608])
	$16 = ($0 + [248])
	$7 = ($0 + [264])
	$2 = *($7)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$111 }
	$2 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($16), *(($0 + [256])), (int_64)-6030912130159137136, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$112 }
	CALL $37($16, $8)
	*($6 + [532]) = [0]
	*($6 + [528]) = $16
	$2 = *(*(CALL $51(($6 + [528])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$112
	*(($0 + [264])) = $2
	
.LABEL $label$111
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [10216])
	*($6 + [368]) = *($7)
	$2 = *($10 + [64])
	$8 = *(($0 + [276]))
	$17 = *(($0 + [272]))
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$116 }
	
.LOOP $label$118:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$117 }
	$8 = $7
	if ( ((int_32)$17 != (int_32)$7) ){ goto $label$118 }
	goto $label$116 
	
.LABEL $label$117
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$116 }
	CALL eosio_assert(((int_32)*(($11 + [84])) == (int_32)$16), [9648])
	if ( $11 ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	$7 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-6030912130159137136, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$114 }
	$11 = CALL $37($16, $7)
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$16), [9648])
	
.LABEL $label$115
	$15 = (int_64)0
	$14 = *($6 + [520])
	$2 = *($11 + [64])
	if ( ((uint_64)$2 > (uint_64)$14) ){ goto $label$119 }
	$30 = ( [8603] ? [8611] : ((int_64)$1 == (int_64)1) )
	$23 = ($6 + [272])
	$22 = ($6 + [256])
	$24 = ($6 + [244])
	$31 = (($6 + [192]) + [40])
	$32 = (($6 + [192]) | [1])
	$33 = (($6 + [528]) + [75])
	$34 = (($6 + [128]) | [1])
	$35 = ($0 + [248])
	$36 = ($0 + [264])
	$37 = ($6 + [216])
	$38 = ($6 + [240])
	$39 = ($6 + [252])
	$40 = ($4 + [4])
	$41 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$120:
	if ( ((int_64)$2 != (int_64)$14) ){ goto $label$121 }
	if ( ((int_32)*($11 + [80]) != (int_32)[2]) ){ goto $label$121 }
	if ( ((int_64)*($11 + [81]) != (int_64)$1) ){ goto $label$121 }
	$17 = ($11 + [40])
	$14 = *($17)
	$7 = CALL $138([8452])
	if ( ($7 <= [8]) ){ goto $label$127 }
	CALL eosio_assert([0], [9202])
	goto $label$126 
	
.LABEL $label$127
	if ( ($7 == 0) ){ goto $label$125 }
	
.LABEL $label$126
	$2 = (int_64)0
	
.LOOP $label$128:
	$8 = *(($7 + [8451]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$129 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$129
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$128 }
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$125
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$123 }
	
.LABEL $label$124
	if ( ((int_64)*($18) == (int_64)*($0)) ){ goto $label$122 }
	$2 = *(($11 + [32]))
	CALL __multi3(($6 + [96]), $2, (int_64)$2 >> (int_64)63), (int_64)95, (int_64)0)
	$42 = *($17)
	$2 = *((($6 + [96]) + [8]))
	$14 = *($6 + [96])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	CALL eosio_assert(((int_64)$42 == (int_64)*((($6 + [456]) + [8]))), [9369])
	$2 = ((int_64)*($6 + [456]) + (int_64)((int_64)$14 / (int_64)100))
	*($6 + [456]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($6 + [456]) < (int_64)4611686018427387904), [9431])
	goto $label$122 
	
.LABEL $label$123
	CALL eosio_assert(((int_64)*($17) == (int_64)*((($6 + [376]) + [8]))), [9369])
	$2 = ((int_64)*($6 + [376]) + (int_64)*(($11 + [32])))
	*($6 + [376]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($6 + [376]) < (int_64)4611686018427387904), [9431])
	
.LABEL $label$122
	CALL $125(($6 + [128]), *($11 + [24]))
	CALL $124(($6 + [528]), [8534], ($6 + [128]))
	$7 = CALL $119(($6 + [528]), [8564])
	$8 = ($7 + [8])
	*(($43 = (($6 + [712]) + [8]))) = *($8)
	*($6 + [712]) = *($7)
	*($7) = (int_64)0
	*($8) = [0]
	if ( ((*($6 + [528]) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*((($6 + [528]) + [8])))
	
.LABEL $label$130
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$132 }
	$8 = uint_32($7 >> [1])
	$44 = $21
	goto $label$131 
	
.LABEL $label$132
	$8 = *(($3 + [4]))
	$44 = *(($3 + [8]))
	
.LABEL $label$131
	$45 = (($6 + [128]) + [8])
	$27 = ($7 & [1])
	$7 = *($6 + [128])
	$7 = ( *($6 + [132]) ? uint_32($7 >> [1]) : $27 )
	if ( ($7 == 0) ){ goto $label$153 }
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$152 }
	$26 = ($44 + $8)
	$19 = ( *($45) ? $34 : $27 )
	$25 = *($19)
	$27 = $44
	
.LOOP $label$154:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$152 }
	$8 = CALL $136($27, $25, $8)
	if ( ($8 == 0) ){ goto $label$152 }
	if ( (CALL $137($8, $19, $7) == 0) ){ goto $label$155 }
	$27 = ($8 + [1])
	$8 = ($26 - $27)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$154 }
	goto $label$152 
	
.LABEL $label$155
	if ( ((int_32)$8 == (int_32)$26) ){ goto $label$152 }
	if ( ((int_32)($8 - $44) == (int_32)[-1]) ){ goto $label$152 }
	
.LABEL $label$153
	$46 = *($17)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$151 }
	CALL eosio_assert([0], [9202])
	goto $label$150 
	
.LABEL $label$152
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$157 }
	$8 = uint_32($7 >> [1])
	$44 = $20
	goto $label$156 
	
.LABEL $label$157
	$8 = *($40)
	$44 = *(($4 + [8]))
	
.LABEL $label$156
	$27 = ($7 & [1])
	$7 = *($6 + [128])
	$7 = ( *($6 + [132]) ? uint_32($7 >> [1]) : $27 )
	if ( ($7 == 0) ){ goto $label$147 }
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$146 }
	$26 = ($44 + $8)
	$19 = ( *($45) ? $34 : $27 )
	$25 = *($19)
	$27 = $44
	
.LOOP $label$158:
	$8 = (($8 - $7) + [1])
	if ( ($8 == 0) ){ goto $label$146 }
	$8 = CALL $136($27, $25, $8)
	if ( ($8 == 0) ){ goto $label$146 }
	if ( (CALL $137($8, $19, $7) == 0) ){ goto $label$148 }
	$27 = ($8 + [1])
	$8 = ($26 - $27)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$158 }
	goto $label$146 
	
.LABEL $label$151
	if ( ($7 == 0) ){ goto $label$149 }
	
.LABEL $label$150
	$2 = (int_64)0
	
.LOOP $label$159:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$160 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$160
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$159 }
	$47 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$139 
	
.LABEL $label$149
	$47 = (int_64)4
	goto $label$139 
	
.LABEL $label$148
	if ( ((int_32)$8 == (int_32)$26) ){ goto $label$146 }
	if ( ((int_32)($8 - $44) == (int_32)[-1]) ){ goto $label$146 }
	
.LABEL $label$147
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$145 }
	CALL eosio_assert([0], [9202])
	goto $label$144 
	
.LABEL $label$146
	*($6 + [392]) = (int_64)0
	*($6 + [408]) = (int_64)0
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$137 }
	goto $label$138 
	
.LABEL $label$145
	if ( ($7 == 0) ){ goto $label$143 }
	
.LABEL $label$144
	$2 = (int_64)0
	
.LOOP $label$161:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$162 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$162
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$161 }
	$7 = ($11 + [32])
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$142 }
	goto $label$141 
	
.LABEL $label$143
	$7 = ($11 + [32])
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$141 }
	
.LABEL $label$142
	*((($6 + [392]) + [8])) = *(($7 + [8]))
	*($6 + [392]) = *($7)
	CALL eosio_assert(((int_64)*($17) == (int_64)*((($6 + [376]) + [8]))), [9538])
	$2 = (int_64)
	*($6 + [376]) = $2(*($6 + [376]) - *($7)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($6 + [376]) < (int_64)4611686018427387904), [9608])
	goto $label$140 
	
.LABEL $label$141
	*((($6 + [408]) + [8])) = *(($7 + [8]))
	*($6 + [408]) = *($7)
	CALL eosio_assert(((int_64)*($17) == (int_64)*((($6 + [456]) + [8]))), [9538])
	$2 = (int_64)
	*($6 + [456]) = $2(*($6 + [456]) - *($7)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($6 + [456]) < (int_64)4611686018427387904), [9608])
	
.LABEL $label$140
	CALL $124(($6 + [528]), [8584], ($6 + [128]))
	$7 = CALL $119(($6 + [528]), [8564])
	$8 = *($7 + [4])
	$27 = *($7)
	*($7) = (int_64)0
	$25 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( (*($6 + [712]) & [1]) ){ goto $label$164 }
	*($6 + [712]) = [0]
	goto $label$163 
	
.LABEL $label$164
	*(*($43)) = [0]
	*($6 + [716]) = [0]
	
.LABEL $label$163
	CALL $116(($6 + [712]), [0])
	*($43) = $25
	*($6 + [716]) = $8
	*($6 + [712]) = $27
	if ( ((*($6 + [528]) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*((($6 + [528]) + [8])))
	
.LABEL $label$165
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$7 = ($11 + [32])
	$2 = *($7)
	CALL __multi3(($6 + [80]), $2, (int_64)$2 >> (int_64)63), (int_64)195, (int_64)0)
	$42 = *($17)
	$2 = *((($6 + [80]) + [8]))
	$14 = *($6 + [80])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	$2 = ((int_64)$14 / (int_64)100)
	if ( ((int_64)$46 != (int_64)$47) ){ goto $label$166 }
	*((($6 + [408]) + [8])) = $42
	$14 = *((($6 + [456]) + [8]))
	*($6 + [408]) = $2
	CALL eosio_assert(((int_64)$42 == (int_64)$14), [9538])
	$2 = (int_64)
	*($6 + [456]) = $2(*($6 + [456]) - $2))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($6 + [456]) < (int_64)4611686018427387904), [9608])
	$2 = *($7)
	CALL __multi3(($6 + [48]), $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$42 = *($17)
	$2 = *((($6 + [48]) + [8]))
	$14 = *($6 + [48])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	CALL eosio_assert(((int_64)$42 == (int_64)$28), [9369])
	$15 = ((int_64)((int_64)$14 / (int_64)100) + (int_64)$15)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [9431])
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$137 }
	goto $label$138 
	
.LABEL $label$166
	*((($6 + [392]) + [8])) = $42
	*($6 + [392]) = $2
	$14 = *($17)
	$2 = *($7)
	CALL eosio_assert(((int_64)$2 < (int_64)2305843009213693952), [9489])
	CALL eosio_assert(((int_64)$2 > (int_64)-2305843009213693952), [9513])
	CALL eosio_assert(((int_64)$14 == (int_64)*((($6 + [376]) + [8]))), [9538])
	$2 = (int_64)
	*($6 + [376]) = $2(*($6 + [376]) - ((int_64)$2 << (int_64)1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($6 + [376]) < (int_64)4611686018427387904), [9608])
	$2 = *($7)
	CALL __multi3(($6 + [64]), $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$42 = *($17)
	$2 = *((($6 + [64]) + [8]))
	$14 = *($6 + [64])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	CALL eosio_assert(((int_64)$42 == (int_64)$29), [9369])
	$41 = ((int_64)((int_64)$14 / (int_64)100) + (int_64)$41)
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [9431])
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$137 }
	
.LABEL $label$138
	if ( $7 ){ goto $label$136 }
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$137
	CALL eosio_assert([0], [9202])
	
.LABEL $label$136
	$2 = (int_64)0
	
.LOOP $label$167:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$168 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$168
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$167 }
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$134 }
	
.LABEL $label$135
	$14 = *($6 + [408])
	if ( ((int_64)$14 < (int_64)0) ){ goto $label$133 }
	$42 = *($0)
	CALL eosio_assert([1], [10370])
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$16), [10405])
	CALL eosio_assert(((int_64)*($35) == (int_64)CALL $fimport$4()), [10451])
	*($11 + [80]) = [1]
	*($11 + [48]) = *($6 + [408])
	$7 = (($6 + [408]) + [8])
	*(($11 + [56])) = *($7)
	$2 = *($11)
	CALL eosio_assert([1], [10502])
	*((($6 + [144]) + [8])) = $33
	*($6 + [148]) = ($6 + [528])
	*($6 + [144]) = ($6 + [528])
	CALL $52(($6 + [144]), $11)
	CALL db_update_i64(*($11 + [88]), $42, ($6 + [528]), [75])
	if ( (uint_64)($2 <= *($36)) ){ goto $label$169 }
	*($36) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$169
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$133 }
	*(($8 = (($6 + [352]) + [8]))) = *($7)
	*($6 + [352]) = *($6 + [408])
	$2 = *(($0 + [32]))
	$14 = *($11 + [16])
	$7 = CALL $113(($6 + [336]), ($6 + [712]))
	*((($6 + [16]) + [8])) = *($8)
	*($6 + [16]) = *($6 + [352])
	CALL $53($0, $2, $14, ($6 + [16]), $7)
	if ( ((*($6 + [336]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*((($6 + [336]) + [8])))
	goto $label$133 
	
.LABEL $label$134
	$14 = *($6 + [392])
	if ( ((int_64)$14 < (int_64)0) ){ goto $label$133 }
	$42 = *($0)
	CALL eosio_assert([1], [10370])
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$16), [10405])
	CALL eosio_assert(((int_64)*($35) == (int_64)CALL $fimport$4()), [10451])
	*($11 + [80]) = [1]
	*($11 + [48]) = *($6 + [392])
	$7 = (($6 + [392]) + [8])
	*(($11 + [56])) = *($7)
	$2 = *($11)
	CALL eosio_assert([1], [10502])
	*((($6 + [144]) + [8])) = $33
	*($6 + [148]) = ($6 + [528])
	*($6 + [144]) = ($6 + [528])
	CALL $52(($6 + [144]), $11)
	CALL db_update_i64(*($11 + [88]), $42, ($6 + [528]), [75])
	if ( (uint_64)($2 <= *($36)) ){ goto $label$170 }
	*($36) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$170
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$133 }
	*(($8 = (($6 + [320]) + [8]))) = *($7)
	*($6 + [320]) = *($6 + [392])
	$2 = *(($0 + [40]))
	$14 = *($11 + [16])
	$7 = CALL $113(($6 + [304]), ($6 + [712]))
	*((($6 + [32]) + [8])) = *($8)
	*($6 + [32]) = *($6 + [320])
	CALL $53($0, $2, $14, ($6 + [32]), $7)
	if ( ((*($6 + [304]) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*((($6 + [304]) + [8])))
	
.LABEL $label$133
	$14 = *($0)
	*(($8 = (($6 + [528]) + [8]))) = (int_64)3617214756542218240
	*(($27 = (($6 + [288]) + [8]))) = [0]
	*($6 + [528]) = $14
	*($6 + [288]) = (int_64)0
	*((($7 = CALL _Znwj([16])) + [8])) = *($8)
	*($7) = *($6 + [528])
	$8 = ($7 + [16])
	*($27) = $8
	*($6 + [288]) = $7
	*($6 + [292]) = $8
	$42 = *($17)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$174 }
	CALL eosio_assert([0], [9202])
	goto $label$173 
	
.LABEL $label$174
	if ( ($7 == 0) ){ goto $label$172 }
	
.LABEL $label$173
	$2 = (int_64)0
	
.LOOP $label$175:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$176 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$176
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$175 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$171 
	
.LABEL $label$172
	$2 = (int_64)4
	
.LABEL $label$171
	*(($25 = (($6 + [192]) + [8]))) = [0]
	*($6 + [192]) = (int_64)0
	$7 = CALL $138($30)
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$182 }
	$8 = ($11 + [32])
	$17 = ( ($6 + [408]) ? ($6 + [392]) : ((int_64)$42 == (int_64)$2) )
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$185 }
	*($6 + [192]) = ($7 << [1])
	$27 = $32
	if ( $7 ){ goto $label$184 }
	goto $label$183 
	
.LABEL $label$185
	$26 = (($7 + [16]) & [-16])
	$27 = CALL _Znwj($26)
	*($25) = $27
	*($6 + [192]) = ($26 | [1])
	*($6 + [196]) = $7
	
.LABEL $label$184
	CALL memcpy($27, $30, $7)
	
.LABEL $label$183
	*(($27 + $7)) = [0]
	*((($6 + [192]) + [16])) = *($6 + [520])
	$2 = *($11 + [16])
	*((($6 + [192]) + [32])) = $5
	*($37) = $2
	CALL $113($31, ($6 + [424]))
	CALL $113($24, ($6 + [128]))
	*(($22 + [8])) = *(($8 + [8]))
	*($22) = *($8)
	*($23) = *($17)
	*(($23 + [8])) = *(($17 + [8]))
	CALL $54($14, ($6 + [288]), ($6 + [192]))
	if ( (*($24) & [1]) ){ goto $label$187 }
	if ( (*($31) & [1]) ){ goto $label$186 }
	goto $label$181 
	
.LABEL $label$187
	CALL _ZdlPv(*($39))
	if ( ((*($31) & [1]) == 0) ){ goto $label$181 }
	
.LABEL $label$186
	CALL _ZdlPv(*($38))
	if ( ((*($6 + [192]) & [1]) == 0) ){ goto $label$180 }
	goto $label$179 
	
.LABEL $label$182
	CALL $112(($6 + [192]))
	
.LABEL $label$181
	if ( (*($6 + [192]) & [1]) ){ goto $label$179 }
	
.LABEL $label$180
	$7 = *($6 + [288])
	if ( ($7 == 0) ){ goto $label$177 }
	goto $label$178 
	
.LABEL $label$179
	CALL _ZdlPv(*($25))
	$7 = *($6 + [288])
	if ( ($7 == 0) ){ goto $label$177 }
	
.LABEL $label$178
	*($6 + [292]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$177
	if ( ((*($6 + [712]) & [1]) == 0) ){ goto $label$188 }
	CALL _ZdlPv(*($43))
	
.LABEL $label$188
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*($45))
	
.LABEL $label$121
	CALL eosio_assert([1], [9987])
	$7 = CALL db_next_i64(*($11 + [88]), ($6 + [528]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$113 }
	$14 = *($6 + [520])
	$11 = CALL $37($16, $7)
	$2 = *($11 + [64])
	if ( ((uint_64)$2 <= (uint_64)$14) ){ goto $label$120 }
	
.LABEL $label$119
	*($6 + [368]) = *($11)
	goto $label$113 
	
.LABEL $label$114
	$15 = (int_64)0
	
.LABEL $label$113
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	if ( ((int_64)$15 < (int_64)6) ){ goto $label$191 }
	*(($6 + [168])) = [0]
	*($6 + [184]) = $28
	*($6 + [160]) = (int_64)0
	*($6 + [176]) = ((uint_64)$15 / (uint_64)(int_64)6)
	$2 = *(($0 + [32]))
	$1 = *($0 + [48])
	$7 = CALL $138([8626])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$190 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$194 }
	*($6 + [160]) = ($7 << [1])
	$8 = (($6 + [160]) | [1])
	if ( $7 ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$194
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($6 + [160]) = ($11 | [1])
	*($6 + [168]) = $8
	*($6 + [164]) = $7
	
.LABEL $label$193
	CALL memcpy($8, [8626], $7)
	
.LABEL $label$192
	*(($8 + $7)) = [0]
	*(($6 + [8])) = *((($6 + [176]) + [8]))
	*($6) = *($6 + [176])
	CALL $53($0, $2, $1, $6, ($6 + [160]))
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$191 }
	CALL _ZdlPv(*($6 + [168]))
	
.LABEL $label$191
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$197 }
	CALL eosio_assert([0], [9202])
	goto $label$196 
	
.LABEL $label$197
	if ( ($7 == 0) ){ goto $label$195 }
	
.LABEL $label$196
	$2 = (int_64)0
	
.LOOP $label$198:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$199 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$199
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$198 }
	goto $label$189 
	
.LABEL $label$195
	$2 = (int_64)0
	goto $label$189 
	
.LABEL $label$190
	CALL $112(($6 + [160]))
	
.LABEL $label$189
	*($6 + [144]) = (int_64)0
	*($6 + [152]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$7 = [0]
	
.LOOP $label$202:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$201 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$203 }
	$2 = $1
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$202 }
	goto $label$200 
	
.LABEL $label$203
	$2 = $1
	
.LOOP $label$204:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$201 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$204 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$202 }
	goto $label$200 
	
.LABEL $label$201
	$8 = [0]
	
.LABEL $label$200
	CALL eosio_assert($8, [9349])
	$7 = CALL $138([8452])
	if ( ($7 <= [8]) ){ goto $label$208 }
	CALL eosio_assert([0], [9202])
	goto $label$207 
	
.LABEL $label$208
	if ( ($7 == 0) ){ goto $label$206 }
	
.LABEL $label$207
	$2 = (int_64)0
	
.LOOP $label$209:
	$8 = *(($7 + [8451]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$210 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$210
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$209 }
	goto $label$205 
	
.LABEL $label$206
	$2 = (int_64)0
	
.LABEL $label$205
	*($6 + [128]) = (int_64)0
	*($6 + [136]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$7 = [0]
	
.LOOP $label$213:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$212 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$214 }
	$2 = $1
	$8 = [1]
	$11 = $7
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$213 }
	goto $label$211 
	
.LABEL $label$214
	$2 = $1
	
.LOOP $label$215:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$212 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$11 = ($7 + [1])
	$7 = $11
	if ( $8 ){ goto $label$215 }
	$8 = [1]
	$7 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$213 }
	goto $label$211 
	
.LABEL $label$212
	$8 = [0]
	
.LABEL $label$211
	CALL eosio_assert($8, [9349])
	$1 = *($6 + [488])
	$2 = *(*($6 + [516]) + [64])
	if ( ((int_64)$2 != (int_64)$1) ){ goto $label$219 }
	if ( ((int_64))($2 - $1) != (int_64)1) ){ goto $label$218 }
	$2 = *($6 + [368])
	$8 = *(($0 + [276]))
	$17 = *(($0 + [272]))
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$221 }
	
.LOOP $label$223:
	$7 = ($8 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$222 }
	$8 = $7
	if ( ((int_32)$17 != (int_32)$7) ){ goto $label$223 }
	goto $label$221 
	
.LABEL $label$222
	if ( ((int_32)$17 == (int_32)$8) ){ goto $label$221 }
	CALL eosio_assert(((int_32)*(($11 + [84])) == (int_32)$16), [9648])
	if ( $11 ){ goto $label$220 }
	goto $label$217 
	
.LABEL $label$221
	$7 = CALL db_find_i64(*(($0 + [248])), *(($0 + [256])), (int_64)-6030912130159137136, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$216 }
	$11 = CALL $37($16, $7)
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$16), [9648])
	
.LABEL $label$220
	if ( ((int_64)*($11 + [64]) != (int_64)*($6 + [488])) ){ goto $label$224 }
	$12 = [2]
	goto $label$21 
	
.LABEL $label$224
	$12 = [0]
	goto $label$21 
	
.LABEL $label$219
	$12 = [13]
	goto $label$21 
	
.LABEL $label$218
	$12 = [13]
	goto $label$21 
	
.LABEL $label$217
	$12 = [13]
	goto $label$21 
	
.LABEL $label$216
	$12 = [13]
	
.LABEL $label$21
	
.LOOP $label$225:
	goto $label$272 
	
.LABEL $label$287
	if ( ((*($6 + [496]) & [1]) == 0) ){ goto $label$228 }
	$12 = [29]
	goto $label$225 
	
.LABEL $label$286
	CALL _ZdlPv(*(($6 + [504])))
	$12 = [30]
	goto $label$225 
	
.LABEL $label$285
	$global$0 = ($6 + [752])
	return 
	
.LABEL $label$284
	$17 = ($11 + [40])
	$14 = *($17)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$248 }
	$12 = [12]
	goto $label$225 
	
.LABEL $label$283
	CALL eosio_assert([0], [9202])
	goto $label$246 
	
.LABEL $label$282
	if ( ($7 == 0) ){ goto $label$247 }
	$12 = [4]
	goto $label$225 
	
.LABEL $label$281
	$2 = (int_64)0
	$12 = [5]
	goto $label$225 
	
.LABEL $label$280
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$244 }
	$12 = [10]
	goto $label$225 
	
.LABEL $label$279
	CALL eosio_assert([0], [9247])
	$12 = [6]
	goto $label$225 
	
.LABEL $label$278
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$245 }
	$12 = [7]
	goto $label$225 
	
.LABEL $label$277
	$1 = *($17)
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$242 }
	$12 = [9]
	goto $label$225 
	
.LABEL $label$276
	CALL eosio_assert(((int_64)$1 == (int_64)*((($6 + [144]) + [8]))), [9369])
	$2 = ((int_64)*($6 + [144]) + (int_64)*(($11 + [32])))
	*($6 + [144]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($6 + [144]) < (int_64)4611686018427387904), [9431])
	goto $label$250 
	
.LABEL $label$275
	$1 = *($17)
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$243 }
	$12 = [8]
	goto $label$225 
	
.LABEL $label$274
	CALL eosio_assert(((int_64)$1 == (int_64)*((($6 + [128]) + [8]))), [9369])
	$2 = ((int_64)*($6 + [128]) + (int_64)*(($11 + [32])))
	*($6 + [128]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($6 + [128]) < (int_64)4611686018427387904), [9431])
	goto $label$251 
	
.LABEL $label$273
	$11 = CALL $37($16, $7)
	if ( ((int_64)*($11 + [64]) == (int_64)*($6 + [488])) ){ goto $label$249 }
	$12 = [0]
	goto $label$225 
	
.LABEL $label$272
	CALL eosio_assert([1], [9987])
	$7 = CALL db_next_i64(*($11 + [88]), ($6 + [528]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$252 }
	$12 = [13]
	goto $label$225 
	
.LABEL $label$271
	$2 = *($0)
	if ( ((int_64)*($18) == (int_64)$2) ){ goto $label$241 }
	$12 = [14]
	goto $label$225 
	
.LABEL $label$270
	$7 = *($6 + [444])
	if ( ($7 == 0) ){ goto $label$240 }
	$12 = [15]
	goto $label$225 
	
.LABEL $label$269
	$11 = *($7 + [48])
	$1 = *($6 + [456])
	CALL eosio_assert([1], [10370])
	$8 = *($6 + [448])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$8), [10405])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$4()), [10451])
	*($7 + [48]) = ( [2] ? $11 : (uint_64)($1 <= (int_64)1000) )
	*($7 + [16]) = *($6 + [456])
	*(($7 + [24])) = *((($6 + [456]) + [8]))
	$11 = ($7 + [8])
	*($6 + [728]) = *($11)
	$1 = *($7)
	CALL eosio_assert([1], [10502])
	*($6 + [720]) = (($6 + [528]) + [65])
	*($6 + [716]) = ($6 + [528])
	*($6 + [712]) = ($6 + [528])
	CALL $26(($6 + [712]), $7)
	CALL db_update_i64(*($7 + [76]), $2, ($6 + [528]), [65])
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$239 }
	$12 = [16]
	goto $label$225 
	
.LABEL $label$268
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$12 = [17]
	goto $label$225 
	
.LABEL $label$267
	*($6 + [744]) = *($11)
	if ( (CALL $137(($6 + [728]), ($6 + [744]), [8]) == 0) ){ goto $label$238 }
	$12 = [18]
	goto $label$225 
	
.LABEL $label$266
	$11 = ($7 + [80])
	$7 = *($11)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$237 }
	$12 = [34]
	goto $label$225 
	
.LABEL $label$265
	$7 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-5290140533475246080, ($6 + [736]), $1)
	*($11) = $7
	$12 = [19]
	goto $label$225 
	
.LABEL $label$264
	CALL db_idx64_update($7, $2, ($6 + [744]))
	$12 = [20]
	goto $label$225 
	
.LABEL $label$263
	*($6 + [488]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[60]))
	$7 = *($6 + [516])
	if ( ($7 == 0) ){ goto $label$236 }
	$12 = [21]
	goto $label$225 
	
.LABEL $label$262
	$2 = *($0)
	*($6 + [528]) = $0
	*($6 + [532]) = ($6 + [512])
	*($6 + [536]) = ($6 + [440])
	*($6 + [540]) = ($6 + [456])
	*($6 + [544]) = ($6 + [488])
	*($6 + [548]) = ($6 + [376])
	*($6 + [552]) = ($6 + [128])
	*($6 + [556]) = ($6 + [144])
	*($6 + [560]) = ($6 + [368])
	CALL eosio_assert([1], [10370])
	CALL $55($9, $7, $2, ($6 + [528]))
	$11 = ($0 + [88])
	$7 = CALL db_lowerbound_i64(*($11), *(($0 + [96])), (int_64)7864586771156172800, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$235 }
	$12 = [22]
	goto $label$225 
	
.LABEL $label$261
	$7 = CALL $33($9, $7)
	$16 = (($6 + [528]) + [169])
	$17 = ($6 + [720])
	$8 = ($0 + [104])
	goto $label$234 
	
.LABEL $label$260
	$7 = CALL $33($9, $7)
	$12 = [23]
	goto $label$225 
	
.LABEL $label$259
	if ( ((int_64)*($7) == (int_64)*(*($6 + [516]))) ){ goto $label$233 }
	$12 = [24]
	goto $label$225 
	
.LABEL $label$258
	if ( (uint_64)((int_64))(*($6 + [368]) - *($7 + [88])) <= (int_64)81) ){ goto $label$232 }
	$12 = [32]
	goto $label$225 
	
.LABEL $label$257
	$1 = *($0)
	CALL eosio_assert([1], [10370])
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$9), [10405])
	CALL eosio_assert(((int_64)*($11) == (int_64)CALL $fimport$4()), [10451])
	*($7 + [88]) = ((int_64)*($6 + [368]) + (int_64)-80)
	$2 = *($7)
	CALL eosio_assert([1], [10502])
	*($17) = $16
	*($6 + [716]) = ($6 + [528])
	*($6 + [712]) = ($6 + [528])
	CALL $56(($6 + [712]), $7)
	CALL db_update_i64(*($7 + [180]), $1, ($6 + [528]), [169])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$231 }
	$12 = [33]
	goto $label$225 
	
.LABEL $label$256
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$12 = [25]
	goto $label$225 
	
.LABEL $label$255
	CALL eosio_assert([1], [9987])
	$7 = CALL db_next_i64(*($7 + [180]), ($6 + [528]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$230 }
	$12 = [27]
	goto $label$225 
	
.LABEL $label$254
	*($6 + [528]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)32) | (int_64)$13)
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9953])
	CALL $49(($6 + [528]))
	CALL $36(*($6 + [480]), $10)
	if ( ((*($6 + [424]) & [1]) == 0) ){ goto $label$229 }
	$12 = [28]
	goto $label$225 
	
.LABEL $label$253
	CALL _ZdlPv(*(($6 + [432])))
	if ( (*($6 + [496]) & [1]) ){ goto $label$226 }
	goto $label$227 
	
.LABEL $label$252
	$12 = [1]
	goto $label$225 
	
.LABEL $label$251
	$12 = [0]
	goto $label$225 
	
.LABEL $label$250
	$12 = [0]
	goto $label$225 
	
.LABEL $label$249
	$12 = [2]
	goto $label$225 
	
.LABEL $label$248
	$12 = [3]
	goto $label$225 
	
.LABEL $label$247
	$12 = [11]
	goto $label$225 
	
.LABEL $label$246
	$12 = [4]
	goto $label$225 
	
.LABEL $label$245
	$12 = [5]
	goto $label$225 
	
.LABEL $label$244
	$12 = [6]
	goto $label$225 
	
.LABEL $label$243
	$12 = [9]
	goto $label$225 
	
.LABEL $label$242
	$12 = [8]
	goto $label$225 
	
.LABEL $label$241
	$12 = [20]
	goto $label$225 
	
.LABEL $label$240
	$12 = [20]
	goto $label$225 
	
.LABEL $label$239
	$12 = [17]
	goto $label$225 
	
.LABEL $label$238
	$12 = [20]
	goto $label$225 
	
.LABEL $label$237
	$12 = [19]
	goto $label$225 
	
.LABEL $label$236
	$12 = [27]
	goto $label$225 
	
.LABEL $label$235
	$12 = [27]
	goto $label$225 
	
.LABEL $label$234
	$12 = [23]
	goto $label$225 
	
.LABEL $label$233
	$12 = [25]
	goto $label$225 
	
.LABEL $label$232
	$12 = [25]
	goto $label$225 
	
.LABEL $label$231
	$12 = [25]
	goto $label$225 
	
.LABEL $label$230
	$12 = [26]
	goto $label$225 
	
.LABEL $label$229
	$12 = [31]
	goto $label$225 
	
.LABEL $label$228
	$12 = [30]
	goto $label$225 
	
.LABEL $label$227
	$12 = [30]
	goto $label$225 
	
.LABEL $label$226
	$12 = [29]
	goto $label$225 
	(unreachable)
	(unreachable)
	$12
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [400])
	$global$0 = $3
	*(($4 = $3) + [392]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $145($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [368])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [332]) = $3
	*($4 + [328]) = $3
	*($4 + [336]) = ($3 + $2)
	*($4 + [16]) = ($4 + [328])
	*($4 + [40]) = ($4 + [344])
	CALL $45(($4 + [40]), ($4 + [16]))
	$5 = *($4 + [336])
	*((($4 + [24]) + [8])) = $5
	*(($4 + [8])) = $5
	$6 = *($4 + [328])
	*($4) = $6
	*($4 + [24]) = $6
	$5 = CALL $3(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $5
	*($4 + [20]) = ($4 + [392])
	CALL $46(($4 + [16]), ($4 + [344]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $148($3)
	
.LABEL $label$5
	CALL $10($5)
	if ( ((*($4 + [372]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [380])))
	
.LABEL $label$6
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [368])))
	
.LABEL $label$7
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)8428043233828798464, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [168])
	$4 = CALL $31($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9953])
	CALL eosio_assert([1], [9987])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [56]), ($1 + [112]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $31($3, $5)
	
.LABEL $label$3
	CALL $32($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	$2 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)7864586771156172800, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $33($5, $2)
	
.LOOP $label$5:
	CALL eosio_assert([1], [9953])
	CALL eosio_assert([1], [9987])
	$2 = [0]
	$3 = CALL db_next_i64(*($4 + [180]), ($1 + [112]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $33($5, $3)
	
.LABEL $label$6
	CALL $34($5, $4)
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$2 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035929195654414336, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = ($0 + [128])
	$4 = CALL $35($3, $2)
	
.LOOP $label$8:
	CALL eosio_assert([1], [9953])
	CALL eosio_assert([1], [9987])
	$2 = [0]
	$6 = CALL db_next_i64(*($4 + [76]), ($1 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $35($3, $6)
	
.LABEL $label$9
	CALL $36($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$8 }
	
.LABEL $label$7
	$2 = CALL db_lowerbound_i64(*($0 + [248]), *(($0 + [256])), (int_64)-6030912130159137136, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$3 = ($0 + [248])
	$4 = CALL $37($3, $2)
	
.LOOP $label$11:
	CALL eosio_assert([1], [9953])
	CALL eosio_assert([1], [9987])
	$2 = [0]
	$6 = CALL db_next_i64(*($4 + [88]), ($1 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $37($3, $6)
	
.LABEL $label$12
	CALL $38($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$11 }
	
.LABEL $label$10
	$7 = *($0)
	$8 = *($0 + [32])
	$2 = CALL $138([8448])
	if ( ($2 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9202])
	goto $label$15 
	
.LABEL $label$16
	if ( ($2 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = (int_64)0
	
.LOOP $label$17:
	$4 = *(($2 + [8447]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$17 }
	goto $label$13 
	
.LABEL $label$14
	$9 = (int_64)0
	
.LABEL $label$13
	*(($1 + [144])) = [0]
	*($1 + [120]) = $7
	*($1 + [112]) = $8
	*($1 + [128]) = (int_64)-1
	*($1 + [136]) = (int_64)0
	$2 = CALL $39(($1 + [112]), $9, [9629])
	*((($1 + [96]) + [8])) = *(($2 + [8]))
	*($1 + [96]) = *($2)
	$3 = *($1 + [136])
	if ( ($3 == 0) ){ goto $label$19 }
	$6 = ($1 + [140])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($1 + [136]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $3
	
.LABEL $label$20
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9202])
	goto $label$26 
	
.LABEL $label$27
	if ( ($2 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$9 = (int_64)0
	
.LOOP $label$28:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$29
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$28 }
	goto $label$24 
	
.LABEL $label$25
	$9 = (int_64)0
	
.LABEL $label$24
	*($1 + [80]) = (int_64)12000000000
	*($1 + [88]) = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$9 = ((int_64)$9 & (int_64)72057594037927935)
	$2 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$9 = $7
	$4 = [1]
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$9 = $7
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$3 = ($2 + [1])
	$2 = $3
	if ( $4 ){ goto $label$34 }
	$4 = [1]
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$4 = [0]
	
.LABEL $label$30
	CALL eosio_assert($4, [9349])
	CALL $40(($1 + [64]), $1)
	CALL $41(($1 + [48]), $1)
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$38 }
	CALL eosio_assert([0], [9202])
	goto $label$37 
	
.LABEL $label$38
	if ( ($2 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$9 = (int_64)0
	
.LOOP $label$39:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$40
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$39 }
	goto $label$35 
	
.LABEL $label$36
	$9 = (int_64)0
	
.LABEL $label$35
	*($1 + [32]) = (int_64)45000000000
	*($1 + [40]) = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9300])
	$9 = ((int_64)$9 & (int_64)72057594037927935)
	$2 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$9 = $7
	$4 = [1]
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$9 = $7
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$3 = ($2 + [1])
	$2 = $3
	if ( $4 ){ goto $label$45 }
	$4 = [1]
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$4 = [0]
	
.LABEL $label$41
	CALL eosio_assert($4, [9349])
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$49 }
	CALL eosio_assert([0], [9202])
	goto $label$48 
	
.LABEL $label$49
	if ( ($2 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	$9 = (int_64)0
	
.LOOP $label$50:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$51 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$51
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$50 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$46 
	
.LABEL $label$47
	$9 = (int_64)4
	
.LABEL $label$46
	*($1 + [16]) = (int_64)163628912597
	*($1 + [24]) = $9
	CALL eosio_assert([1], [9300])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$9 = $7
	$4 = [1]
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$9 = $7
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$3 = ($2 + [1])
	$2 = $3
	if ( $4 ){ goto $label$56 }
	$4 = [1]
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$4 = [0]
	
.LABEL $label$52
	CALL eosio_assert($4, [9349])
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$60 }
	CALL eosio_assert([0], [9202])
	goto $label$59 
	
.LABEL $label$60
	if ( ($2 == 0) ){ goto $label$58 }
	
.LABEL $label$59
	$9 = (int_64)0
	
.LOOP $label$61:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$62 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$62
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$61 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$57 
	
.LABEL $label$58
	$9 = (int_64)4
	
.LABEL $label$57
	*($1) = (int_64)10000000000
	*($1 + [8]) = $9
	CALL eosio_assert([1], [9300])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$9 = $7
	$4 = [1]
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$66
	$9 = $7
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$3 = ($2 + [1])
	$2 = $3
	if ( $4 ){ goto $label$67 }
	$4 = [1]
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	$4 = [0]
	
.LABEL $label$63
	CALL eosio_assert($4, [9349])
	$9 = *($0)
	*($1 + [112]) = $0
	*($1 + [116]) = ($1 + [96])
	*($1 + [120]) = ($1 + [64])
	*($1 + [124]) = ($1 + [80])
	*($1 + [128]) = ($1 + [48])
	*($1 + [132]) = ($1 + [32])
	*($1 + [136]) = ($1 + [16])
	*($1 + [140]) = $1
	*($1 + [184]) = $9
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [10165])
	*($1 + [160]) = $5
	*($1 + [164]) = ($1 + [112])
	*($1 + [168]) = ($1 + [184])
	*(($2 = CALL _Znwj([192])) + [8]) = (int_64)0
	*($2) = (int_64)0
	$9 = CALL current_time()
	*($2 + [24]) = [1]
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)1
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [104]) = (int_64)0
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = (int_64)0
	*($2 + [128]) = (int_64)0
	*($2 + [136]) = (int_64)0
	*($2 + [144]) = (int_64)0
	*($2 + [152]) = (int_64)0
	*($2 + [160]) = (int_64)0
	*($2 + [16]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [176]) = $5
	*($2 + [168]) = (int_64)0
	CALL $42(($1 + [160]), $2)
	*($1 + [176]) = $2
	$9 = *($2)
	*($1 + [160]) = $9
	$3 = *($2 + [180])
	*($1 + [156]) = $3
	$6 = ($0 + [116])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [120]))) ){ goto $label$70 }
	*($4 + [8]) = $9
	*($4 + [16]) = $3
	*($1 + [176]) = [0]
	*($4) = $2
	*($6) = ($4 + [24])
	$2 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( $2 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	CALL $43(($0 + [112]), ($1 + [176]), ($1 + [160]), ($1 + [156]))
	$2 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( ($2 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	CALL _ZdlPv($2)
	
.LABEL $label$68
	$9 = *($0)
	*($1 + [112]) = $0
	*($1 + [116]) = ($1 + [96])
	*($1 + [120]) = ($1 + [64])
	*($1 + [124]) = ($1 + [80])
	*($1 + [128]) = ($1 + [48])
	*($1 + [132]) = ($1 + [32])
	*($1 + [136]) = ($1 + [16])
	*($1 + [140]) = $1
	*($1 + [184]) = $9
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [10165])
	*($1 + [160]) = $5
	*($1 + [164]) = ($1 + [112])
	*($1 + [168]) = ($1 + [184])
	*(($2 = CALL _Znwj([192])) + [8]) = (int_64)0
	*($2) = (int_64)0
	$9 = CALL current_time()
	*($2 + [24]) = [1]
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)1
	*($2 + [72]) = (int_64)0
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = (int_64)0
	*($2 + [96]) = (int_64)0
	*($2 + [104]) = (int_64)0
	*($2 + [112]) = (int_64)0
	*($2 + [120]) = (int_64)0
	*($2 + [128]) = (int_64)0
	*($2 + [136]) = (int_64)0
	*($2 + [144]) = (int_64)0
	*($2 + [152]) = (int_64)0
	*($2 + [160]) = (int_64)0
	*($2 + [16]) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [176]) = $5
	*($2 + [168]) = (int_64)0
	CALL $44(($1 + [160]), $2)
	*($1 + [176]) = $2
	$9 = *($2)
	*($1 + [160]) = $9
	$3 = *($2 + [180])
	*($1 + [156]) = $3
	$5 = ($0 + [116])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [120]))) ){ goto $label$73 }
	*($4 + [8]) = $9
	*($4 + [16]) = $3
	*($1 + [176]) = [0]
	*($4) = $2
	*($5) = ($4 + [24])
	$2 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( $2 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	CALL $43(($0 + [112]), ($1 + [176]), ($1 + [160]), ($1 + [156]))
	$2 = *($1 + [176])
	*($1 + [176]) = [0]
	if ( ($2 == 0) ){ goto $label$71 }
	
.LABEL $label$72
	CALL _ZdlPv($2)
	
.LABEL $label$71
	$global$0 = ($1 + [192])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $3(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	CALL $10($8)
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = CALL $138([8448])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9202])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8447]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	$2 = CALL $138([8452])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9202])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (int_64)0
	
.LOOP $label$11:
	$4 = *(($2 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)4
	
.LABEL $label$7
	$7 = [0]
	$3 = *(($1 + [24]))
	if ( ((int_64)$3 == (int_64)$5) ){ goto $label$14 }
	if ( ((int_64)$3 != (int_64)$6) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($1 + [16])
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$13 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = [0]
	$2 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$3 = $5
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$3 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$1 = ($2 + [1])
	$2 = $1
	if ( $4 ){ goto $label$18 }
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$15 }
	
.LABEL $label$16
	$7 = ((int_64)$6 > (int_64)0)
	
.LABEL $label$13
	return $7
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [320])
	$global$0 = $2
	$5 = ($5 & [1])
	$5 = *($2 + [192])
	$3 = ($1 + [32])
	$4 = CALL $113(($2 + [192]), $3)
	$6 = ( *($4 + [4]) ? uint_32($5 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL eosio_assert((($6 + [-3]) <= [57]), [8192])
	$5 = CALL $113(($2 + [160]), $4)
	CALL $22(($2 + [176]), $5, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$2
	$5 = (*($2 + [180]) - *($2 + [176]))
	CALL eosio_assert((((int_32)$5 != (int_32)[0]) & (((int_32)$5 / (int_32)[12]) <= [5])), [8192])
	$5 = *($2 + [176])
	$6 = *($5)
	$7 = CALL $138([8825])
	if ( ((int_32)$7 != (int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$24 }
	if ( (CALL $123($5, [0], [-1], [8825], $7) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$5 = *($2 + [176])
	$6 = *($5)
	$3 = CALL $138([8837])
	if ( ((int_32)$3 != (int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$25 }
	$7 = [0]
	if ( (CALL $123($5, [0], [-1], [8837], $3) == 0) ){ goto $label$22 }
	
.LABEL $label$25
	$5 = *($2 + [176])
	$6 = *($5)
	$3 = CALL $138([8870])
	if ( ((int_32)$3 != (int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$26 }
	$7 = [0]
	if ( (CALL $123($5, [0], [-1], [8870], $3) == 0) ){ goto $label$21 }
	
.LABEL $label$26
	CALL eosio_assert([0], [8192])
	goto $label$5 
	
.LABEL $label$23
	$5 = [0]
	$6 = *($2 + [176])
	if ( (((int_32)(*($2 + [180]) - $6) / (int_32)[12]) <= [3]) ){ goto $label$18 }
	$5 = *($6 + [24])
	if ( ($5 & [1]) ){ goto $label$20 }
	$5 = uint_32($5 >> [1])
	goto $label$19 
	
.LABEL $label$22
	if ( ((int_64)*($1 + [16]) < (int_64)1000) ){ goto $label$8 }
	$8 = *(($1 + [24]))
	$5 = CALL $138([8448])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9202])
	goto $label$14 
	
.LABEL $label$21
	$8 = (int_64)1
	if ( ((int_64)*($1 + [16]) < (int_64)1) ){ goto $label$6 }
	$9 = *(($1 + [24]))
	$5 = CALL $138([8448])
	if ( ($5 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9202])
	goto $label$16 
	
.LABEL $label$20
	$5 = *(($6 + [28]))
	
.LABEL $label$19
	$5 = ((uint_32)$5 > (uint_32)[2])
	
.LABEL $label$18
	CALL eosio_assert($5, [8192])
	$5 = *($2 + [176])
	$6 = *($5 + [12])
	$7 = CALL $138([8829])
	if ( ((int_32)$7 != (int_32)( *(($5 + [16])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$27 }
	if ( (CALL $123(($5 + [12]), [0], [-1], [8829], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$27
	$5 = *($2 + [176])
	$6 = *($5 + [12])
	$7 = CALL $138([8833])
	if ( ((int_32)$7 != (int_32)( *(($5 + [16])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$28 }
	if ( (CALL $123(($5 + [12]), [0], [-1], [8833], $7) == 0) ){ goto $label$12 }
	
.LABEL $label$28
	CALL eosio_assert([0], [8192])
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$17
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$16
	$10 = (int_64)0
	
.LOOP $label$29:
	$6 = *(($5 + [8447]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$30
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$29 }
	if ( ((int_64)$9 != (int_64)((int_64)((int_64)$10 << (int_64)8) | (int_64)4)) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$14
	$10 = (int_64)0
	
.LOOP $label$31:
	$6 = *(($5 + [8447]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$32
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$31 }
	if ( ((int_64)$8 != (int_64)((int_64)((int_64)$10 << (int_64)8) | (int_64)4)) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$13
	*((($2 + [112]) + [24])) = *(($1 + [24]))
	*((($2 + [112]) + [16])) = *(($1 + [16]))
	*((($2 + [112]) + [8])) = *(($1 + [8]))
	*($2 + [112]) = *($1)
	$1 = CALL $113(($2 + [144]), $3)
	$5 = CALL $113(($2 + [96]), (*($2 + [176]) + [24]))
	CALL $23($0, ($2 + [112]), (int_64)1, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$33
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [152])))
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$12
	*((($2 + [48]) + [24])) = *(($1 + [24]))
	*((($2 + [48]) + [16])) = *(($1 + [16]))
	*((($2 + [48]) + [8])) = *(($1 + [8]))
	*($2 + [48]) = *($1)
	$1 = CALL $113(($2 + [80]), $3)
	$5 = CALL $113(($2 + [32]), (*($2 + [176]) + [24]))
	CALL $23($0, ($2 + [48]), (int_64)2, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$34
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [88])))
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_64)$9 == (int_64)4) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	if ( ((int_64)$8 != (int_64)4) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = ((uint_32)((int_32)(*($2 + [180]) - *($2 + [176])) / (int_32)[12]) > (uint_32)[1])
	
.LABEL $label$8
	CALL eosio_assert($7, [8192])
	$6 = ($0 + [208])
	*($2 + [24]) = $6
	*($2 + [16]) = (int_64)1
	$5 = *($2 + [176])
	$3 = *($5 + [12])
	$7 = CALL $138([8833])
	if ( ((int_32)$7 != (int_32)( *(($5 + [16])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$35 }
	if ( CALL $123(($5 + [12]), [0], [-1], [8833], $7) ){ goto $label$35 }
	*($2 + [16]) = (int_64)2
	
.LABEL $label$35
	CALL $24(($2 + [208]), ($2 + [24]), $1)
	$5 = *($2 + [212])
	if ( ($5 == 0) ){ goto $label$37 }
	if ( ((int_64)*($1) != (int_64)*($5 + [8])) ){ goto $label$37 }
	$10 = *($2 + [208])
	*($2 + [8]) = $10
	$5 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$36 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($1)) ){ goto $label$38 }
	
.LOOP $label$39:
	if ( ((int_64)*($5 + [64]) == (int_64)*($2 + [16])) ){ goto $label$38 }
	CALL $25(($2 + [8]))
	$5 = *($2 + [12])
	if ( ($5 == 0) ){ goto $label$36 }
	if ( ((int_64)*($5 + [8]) == (int_64)*($1)) ){ goto $label$39 }
	
.LABEL $label$38
	$8 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10370])
	$6 = *($2 + [24])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$6), [10405])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$4()), [10451])
	$0 = ($5 + [8])
	*($2 + [296]) = *($0)
	$10 = *($5)
	$3 = ($1 + [24])
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($5 + [40]))), [9369])
	$9 = ((int_64)*($5 + [32]) + (int_64)*($1 + [16]))
	*($5 + [32]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($5 + [32]) < (int_64)4611686018427387904), [9431])
	CALL eosio_assert(((int_64)*($3) == (int_64)*(($5 + [24]))), [9369])
	$9 = ((int_64)*($5 + [16]) + (int_64)*($1 + [16]))
	*($5 + [16]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [9431])
	*($5 + [48]) = [1]
	CALL eosio_assert(((int_64)$10 == (int_64)*($5)), [10502])
	*($2 + [288]) = (($2 + [208]) + [65])
	*($2 + [284]) = ($2 + [208])
	*($2 + [280]) = ($2 + [208])
	CALL $26(($2 + [280]), $5)
	CALL db_update_i64(*($5 + [76]), $8, ($2 + [208]), [65])
	if ( (uint_64)($10 <= *($6 + [16])) ){ goto $label$40 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	*($2 + [312]) = *($0)
	if ( (CALL $137(($2 + [296]), ($2 + [312]), [8]) == 0) ){ goto $label$5 }
	$1 = ($5 + [80])
	$5 = *($1)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$41 }
	$5 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5290140533475246080, ($2 + [304]), $10)
	*($1) = $5
	
.LABEL $label$41
	CALL db_idx64_update($5, $8, ($2 + [312]))
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$37
	*($2 + [12]) = [0]
	*($2 + [8]) = ($2 + [24])
	
.LABEL $label$36
	CALL eosio_assert(((uint_64)*(($1 + [16])) > (uint_64)(int_64)4999), [8841])
	$10 = *($0)
	*($2 + [284]) = $1
	*($2 + [280]) = $0
	*($2 + [288]) = ($2 + [16])
	*($2 + [312]) = $10
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$4()), [10165])
	*($2 + [208]) = $6
	*($2 + [212]) = ($2 + [280])
	*($2 + [216]) = ($2 + [312])
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [72]) = $6
	CALL $27(($2 + [208]), $5)
	*($2 + [304]) = $5
	$10 = *($5)
	*($2 + [208]) = $10
	$6 = *($5 + [76])
	*($2 + [296]) = $6
	$3 = ($0 + [236])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [240]))) ){ goto $label$43 }
	*($1 + [8]) = $10
	*($1 + [16]) = $6
	*($2 + [304]) = [0]
	*($1) = $5
	*($3) = ($1 + [24])
	$5 = *($2 + [304])
	*($2 + [304]) = [0]
	if ( $5 ){ goto $label$42 }
	goto $label$5 
	
.LABEL $label$43
	CALL $28(($0 + [232]), ($2 + [304]), ($2 + [208]), ($2 + [296]))
	$5 = *($2 + [304])
	*($2 + [304]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$42
	CALL _ZdlPv($5)
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	$7 = ((uint_32)((int_32)(*($2 + [180]) - *($2 + [176])) / (int_32)[12]) > (uint_32)[1])
	
.LABEL $label$6
	CALL eosio_assert($7, [8192])
	*($2 + [8]) = ($0 + [208])
	$5 = *($2 + [176])
	$6 = *($5 + [12])
	$3 = CALL $138([8833])
	if ( ((int_32)$3 != (int_32)( *(($5 + [16])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$44 }
	$8 = ( (int_64)1 ? (int_64)2 : CALL $123(($5 + [12]), [0], [-1], [8833], $3) )
	
.LABEL $label$44
	CALL $24(($2 + [208]), ($2 + [8]), $1)
	$5 = *($2 + [212])
	if ( ($5 == 0) ){ goto $label$46 }
	if ( ((int_64)*($1) != (int_64)*($5 + [8])) ){ goto $label$46 }
	$10 = *($2 + [208])
	*($2 + [16]) = $10
	$5 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$45 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($1)) ){ goto $label$47 }
	
.LOOP $label$48:
	if ( ((int_64)*($5 + [64]) == (int_64)$8) ){ goto $label$47 }
	CALL $25(($2 + [16]))
	$5 = *($2 + [20])
	if ( ($5 == 0) ){ goto $label$45 }
	if ( ((int_64)*($5 + [8]) == (int_64)*($1)) ){ goto $label$48 }
	
.LABEL $label$47
	$8 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10370])
	$6 = *($2 + [8])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$6), [10405])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$4()), [10451])
	$3 = ($5 + [8])
	*($2 + [296]) = *($3)
	$10 = *($5)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*(($5 + [24]))), [9369])
	$9 = ((int_64)*($5 + [16]) + (int_64)*($1 + [16]))
	*($5 + [16]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [9431])
	CALL eosio_assert(((int_64)$10 == (int_64)*($5)), [10502])
	*($2 + [288]) = (($2 + [208]) + [65])
	*($2 + [284]) = ($2 + [208])
	*($2 + [280]) = ($2 + [208])
	CALL $26(($2 + [280]), $5)
	CALL db_update_i64(*($5 + [76]), $8, ($2 + [208]), [65])
	if ( (uint_64)($10 <= *($6 + [16])) ){ goto $label$49 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	*($2 + [312]) = *($3)
	if ( (CALL $137(($2 + [296]), ($2 + [312]), [8]) == 0) ){ goto $label$50 }
	$1 = ($5 + [80])
	$5 = *($1)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$51 }
	$5 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5290140533475246080, ($2 + [304]), $10)
	*($1) = $5
	
.LABEL $label$51
	CALL db_idx64_update($5, $8, ($2 + [312]))
	
.LABEL $label$50
	$5 = *($2 + [20])
	if ( (CALL $29($0, *($5 + [8]), *($5 + [64]), [0]) == 0) ){ goto $label$5 }
	$10 = *($2 + [16])
	*($2 + [208]) = $10
	$5 = (CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [9953])
	CALL $25(($2 + [208]))
	CALL $30(*($2 + [8]), $5)
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$46
	*($2 + [20]) = [0]
	*($2 + [16]) = ($2 + [8])
	
.LABEL $label$45
	CALL eosio_assert([0], [8874])
	$6 = *($2 + [176])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *($2 + [176])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = *($2 + [180])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$53 }
	
.LOOP $label$54:
	$5 = ($1 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$55
	$1 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$54 }
	$5 = *($2 + [176])
	goto $label$52 
	
.LABEL $label$53
	$5 = $6
	
.LABEL $label$52
	*($2 + [180]) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$5 = (*($2 + [192]) & [1])
	
.LABEL $label$1
	if ( ($5 == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$56
	$global$0 = ($2 + [320])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $145($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $21(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*($0 + [40]) = (int_64)6138950441114059280
	*($0 + [32]) = (int_64)6138663591592764928
	*($0 + [48]) = (int_64)6138950441114059808
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	$5 = ($0 + [56])
	$3 = CALL $138([8603])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [56]) = ($6 | [1])
	*(($0 + [64])) = $5
	*(($0 + [60])) = $3
	
.LABEL $label$4
	CALL memcpy($5, [8603], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	*(($0 + [76])) = [0]
	*($0 + [68 align=4]) = (int_64)0
	$5 = ($0 + [68])
	$3 = CALL $138([9197])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$8 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [68]) = ($6 | [1])
	*(($0 + [76])) = $5
	*(($0 + [72])) = $3
	
.LABEL $label$7
	CALL memcpy($5, [9197], $3)
	
.LABEL $label$6
	*(($5 + $3)) = [0]
	*($0 + [88]) = $1
	*($0 + [80]) = [0]
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*($0 + [128]) = $1
	*(($0 + [136])) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = [0]
	*(($0 + [164])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = [0]
	*($0 + [208]) = $1
	*(($0 + [224])) = (int_64)-1
	*(($0 + [216])) = $1
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = [0]
	*(($0 + [244])) = [0]
	*($0 + [248]) = $1
	*(($0 + [256])) = $1
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = [0]
	$global$0 = ($4 + [32])
	return $0
	
.LABEL $label$2
	CALL $112($5)
	
.LABEL $label$1
	CALL $112($5)
	(unreachable)
	return (unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [608])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 == (int_64)-6569208335818555392) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	if ( ((int_64)$1 == (int_64)6138950441114059280) ){ goto $label$15 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$13 }
	
.LABEL $label$15
	CALL $2(($3 + [560]))
	*((($3 + [72]) + [8])) = [0]
	*($3 + [264]) = [0]
	*($3 + [72]) = (int_64)0
	*($3 + [256]) = (int_64)0
	$4 = CALL $3(($3 + [272]), $0, $1, ($3 + [72]))
	*((($3 + [208]) + [24])) = *((($3 + [560]) + [24]))
	$5 = (($3 + [560]) + [16])
	*((($3 + [208]) + [16])) = *($5)
	*((($3 + [208]) + [8])) = *((($3 + [560]) + [8]))
	*($3 + [208]) = *($3 + [560])
	$6 = (($3 + [560]) + [32])
	$7 = CALL $113((($3 + [208]) + [32]), $6)
	CALL eosio_assert((CALL $4($3, ($3 + [208])) & ((int_64)*($5) > (int_64)0)), [8192])
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [248])))
	
.LABEL $label$16
	if ( ((int_64)*($3 + [560]) == (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)*($3 + [568]) != (int_64)$0) ){ goto $label$11 }
	*((($3 + [160]) + [24])) = *((($3 + [560]) + [24]))
	*((($3 + [160]) + [16])) = *((($3 + [560]) + [16]))
	*((($3 + [160]) + [8])) = *((($3 + [560]) + [8]))
	*($3 + [160]) = *($3 + [560])
	$5 = CALL $113(($3 + [192]), $6)
	CALL $5($4, ($3 + [160]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [200])))
	goto $label$10 
	
.LABEL $label$14
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$17 }
	if ( ((int_64)$2 <= (int_64)-4149697620714979329) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)4923678490122780671) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)6714450627043950592) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3) = *($3 + [152])
	CALL $7($0, $0, $3)
	goto $label$1 
	
.LABEL $label$17
	CALL eosio_assert([0], [8192])
	goto $label$1 
	
.LABEL $label$13
	CALL eosio_assert([0], [8345])
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)-4492493317364367361) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-8279611178955571200) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-8272103852073811968) ){ goto $label$2 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [8]) = *($3 + [144])
	CALL $9($0, $0, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$11
	CALL eosio_assert([0], [8224])
	
.LABEL $label$10
	CALL $10($4)
	if ( ((*(($3 + [592])) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [600])))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4149697620714979328) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$2 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [3]
	*($3 + [56]) = *($3 + [96])
	CALL $12($0, $0, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4492493317364367360) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4157529991795441664) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [32]) = *($3 + [120])
	CALL $12($0, $0, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [48]) = *($3 + [104])
	CALL $12($0, $0, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [64]) = *($3 + [88])
	CALL $12($0, $0, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [24]) = *($3 + [128])
	CALL $17($0, $0, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [116]) = [0]
	*($3 + [112]) = [8]
	*($3 + [40]) = *($3 + [112])
	CALL $12($0, $0, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [16]) = *($3 + [136])
	CALL $20($0, $0, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8192])
	
.LABEL $label$1
	CALL $129([0])
	$global$0 = ($3 + [608])
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [248]), *(($0 + [256])), (int_64)-6030912130159137136, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($0 + [248])
	$0 = CALL $37($5, $4)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	if ( ((uint_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)255) > (uint_64)$1) ){ goto $label$1 }
	$4 = [0]
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [9953])
	CALL eosio_assert($6, [9987])
	$6 = CALL db_next_i64(*($0 + [88]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $37($5, $6)
	
.LABEL $label$3
	CALL $38($5, $0)
	$0 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [208])
	$5 = *(($0 + [236]))
	$4 = *(($0 + [232]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9648])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)-5290140533475246080, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $62($3, $6)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$3), [9648])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8666])
	if ( (CALL $29($0, *($7 + [8]), *($7 + [64]), [0]) == 0) ){ goto $label$5 }
	CALL eosio_assert($6, [9953])
	CALL eosio_assert($6, [9987])
	$6 = CALL db_next_i64(*($7 + [76]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $62($3, $6)
	
.LABEL $label$6
	CALL $30($3, $7)
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [8]) = $3
	*($4 + [16]) = $2
	CALL require_auth(*($0))
	$5 = ($0 + [168])
	$7 = *(($0 + [196]))
	$6 = *(($0 + [192]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9 + [8]) == (int_64)$2) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($9 + [52])) == (int_32)$5), [9648])
	if ( $9 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*($5), *(($0 + [176])), (int_64)8428043233828798464, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $31($5, $8)
	CALL eosio_assert(((int_32)*($9 + [52]) == (int_32)$5), [9648])
	
.LABEL $label$3
	if ( ((int_64)*($9) != (int_64)0) ){ goto $label$1 }
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	$10 = *($0)
	CALL eosio_assert([1], [10370])
	CALL eosio_assert(((int_32)*($9 + [52]) == (int_32)$5), [10405])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [10451])
	*($9) = $3
	$2 = *($9 + [8])
	CALL eosio_assert([1], [10502])
	*($4 + [120]) = (($4 + [48]) + [49])
	*($4 + [116]) = ($4 + [48])
	*($4 + [112]) = ($4 + [48])
	CALL $59(($4 + [112]), $9)
	CALL db_update_i64(*($9 + [56]), $10, ($4 + [48]), [49])
	$8 = ($0 + [184])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$1 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$2
	$2 = *($0)
	*($4 + [120]) = $0
	*($4 + [116]) = ($4 + [16])
	*($4 + [112]) = ($4 + [8])
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$4()), [10165])
	*($4 + [48]) = $5
	*($4 + [52]) = ($4 + [112])
	*($4 + [56]) = ($4 + [40])
	*(($8 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = [1]
	*($8 + [52]) = $5
	CALL $60(($4 + [48]), $8)
	*($4 + [32]) = $8
	$2 = *($8 + [8])
	*($4 + [48]) = $2
	$9 = *($8 + [56])
	*($4 + [28]) = $9
	$6 = ($0 + [196])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [200]))) ){ goto $label$8 }
	*($7 + [8]) = $2
	*($7 + [16]) = $9
	*($4 + [32]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $8 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL $61(($0 + [192]), ($4 + [32]), ($4 + [48]), ($4 + [28]))
	$8 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [336]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [344]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9722])
	CALL memcpy(($4 + [328]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9722])
	CALL memcpy((($4 + [328]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9722])
	CALL memcpy((($4 + [328]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $3(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [344])
	$1 = *($4 + [336])
	$9 = *($4 + [328])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	CALL $10($8)
	$global$0 = ($4 + [352])
	return [1]
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [272]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [232]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [192]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [152]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	if ( (*($0 + [68]) & [1]) ){ goto $label$28 }
	if ( (*($0 + [56]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*(($0 + [76])))
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*(($0 + [64])))
	return $0
	
.LABEL $label$26
	return $0
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL eosio_assert([0], [8391])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [328]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9722])
	CALL memcpy(($4 + [328]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $3(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [328])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	CALL $10($8)
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$6 }
	$3 = *($0 + [56])
	if ( ($3 & [1]) ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	$4 = (($0 + [56]) + [1])
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [68])
	if ( ($3 & [1]) ){ goto $label$3 }
	$3 = uint_32($3 >> [1])
	$4 = (($0 + [68]) + [1])
	goto $label$2 
	
.LABEL $label$5
	$3 = *(($0 + [60]))
	$4 = *(($0 + [64]))
	
.LABEL $label$4
	*($2 + [196]) = $3
	*($2 + [192]) = $4
	*($2) = *($2 + [192])
	CALL $47(($2 + [16]), $2)
	goto $label$1 
	
.LABEL $label$3
	$3 = *(($0 + [72]))
	$4 = *(($0 + [76]))
	
.LABEL $label$2
	*($2 + [196]) = $3
	*($2 + [192]) = $4
	*($2 + [8]) = *($2 + [192])
	CALL $47(($2 + [16]), ($2 + [8]))
	
.LABEL $label$1
	$5 = ($0 + [88])
	$1 = *($2 + [16])
	$4 = *(($0 + [116]))
	$6 = *(($0 + [112]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($4 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$9 }
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [9648])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$3 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7864586771156172800, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $33($5, $3)
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [9648])
	
.LABEL $label$7
	$8 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10370])
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [10405])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [10451])
	*($7 + [24]) = [1]
	$1 = *($7)
	CALL eosio_assert([1], [10502])
	*($2 + [200]) = (($2 + [16]) + [169])
	*($2 + [196]) = ($2 + [16])
	*($2 + [192]) = ($2 + [16])
	CALL $56(($2 + [192]), $7)
	CALL db_update_i64(*($7 + [180]), $8, ($2 + [16]), [169])
	$3 = ($0 + [104])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$11 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($2 + [208])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	$6 = *($1)
	$7 = *(*($3 + [4]) + [8])
	$8 = CALL $138([8448])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9202])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($8 + [8447]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$8 = *(($3 + [4]))
	$11 = *($8 + [8])
	if ( ((int_64)$7 != (int_64)$9) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [56]))), [9369])
	$9 = ((int_64)*($1 + [48]) + (int_64)*($8))
	*($1 + [48]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [9431])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [120]))), [9369])
	$9 = ((int_64)*($1 + [112]) + (int_64)*($8))
	*($1 + [112]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [9431])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10502])
	$10 = $4
	$8 = ($10 + [-176])
	$global$0 = $8
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($10 + [-7])
	CALL $56($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $8, [169])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$6 }
	$3 = *($0 + [56])
	if ( ($3 & [1]) ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	$4 = (($0 + [56]) + [1])
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [68])
	if ( ($3 & [1]) ){ goto $label$3 }
	$3 = uint_32($3 >> [1])
	$4 = (($0 + [68]) + [1])
	goto $label$2 
	
.LABEL $label$5
	$3 = *(($0 + [60]))
	$4 = *(($0 + [64]))
	
.LABEL $label$4
	*($2 + [196]) = $3
	*($2 + [192]) = $4
	*($2) = *($2 + [192])
	CALL $47(($2 + [16]), $2)
	goto $label$1 
	
.LABEL $label$3
	$3 = *(($0 + [72]))
	$4 = *(($0 + [76]))
	
.LABEL $label$2
	*($2 + [196]) = $3
	*($2 + [192]) = $4
	*($2 + [8]) = *($2 + [192])
	CALL $47(($2 + [16]), ($2 + [8]))
	
.LABEL $label$1
	$5 = ($0 + [88])
	$1 = *($2 + [16])
	$4 = *(($0 + [116]))
	$6 = *(($0 + [112]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($4 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$9 }
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [9648])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$3 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7864586771156172800, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $33($5, $3)
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [9648])
	
.LABEL $label$7
	$8 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10370])
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)$5), [10405])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [10451])
	*($7 + [24]) = [0]
	$1 = *($7)
	CALL eosio_assert([1], [10502])
	*($2 + [200]) = (($2 + [16]) + [169])
	*($2 + [196]) = ($2 + [16])
	*($2 + [192]) = ($2 + [16])
	CALL $56(($2 + [192]), $7)
	CALL db_update_i64(*($7 + [180]), $8, ($2 + [16]), [169])
	$3 = ($0 + [104])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$11 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($2 + [208])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = CALL $113(($2 + [96]), $1)
	$4 = *($1 + [32])
	$5 = *($1 + [24])
	$6 = *($1 + [16])
	$7 = CALL $113(($2 + [80]), ($1 + [40]))
	$8 = CALL $113(($2 + [64]), ($1 + [52]))
	*(($9 = (($2 + [48]) + [8]))) = *(($1 + [72]))
	*(($10 = (($2 + [32]) + [8]))) = *(($1 + [88]))
	*($2 + [48]) = *($1 + [64])
	*($2 + [32]) = *($1 + [80])
	*((($2 + [128]) + [8])) = *($10)
	*((($2 + [112]) + [8])) = *($9)
	*($2 + [128]) = *($2 + [32])
	*($2 + [112]) = *($2 + [48])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $113(($2 + [208]), $3)
	$10 = CALL $113(($2 + [192]), $7)
	$11 = CALL $113(($2 + [176]), $8)
	$12 = *((($2 + [112]) + [8]))
	*((($2 + [160]) + [8])) = $12
	$13 = *((($2 + [128]) + [8]))
	*((($2 + [144]) + [8])) = $13
	*((($2 + [16]) + [8])) = $12
	*(($2 + [8])) = $13
	$12 = *($2 + [112])
	*($2 + [160]) = $12
	$13 = *($2 + [128])
	*($2 + [144]) = $13
	*($2 + [16]) = $12
	*($2) = $13
	CALL void $0((int_32 $9), (int_32 $6), (int_64 $5), (int_64 $4), (int_64 $10), (int_32 $11), (int_32 ($2 + [16])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [176]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [192]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($2 + [208]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($8) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $138($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $120($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $112($0)
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [88]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10322])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6030912130159137136)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10268])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10268])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $37(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [81]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $6
	*($5 + [24]) = *($3)
	$4 = CALL $113((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = $1
	*(($3 = CALL _Znwj([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$0 = ($3 + [16])
	*((($5 + [56]) + [24])) = $0
	*(($5 + [76])) = $0
	*($5 + [72]) = $3
	*($5 + [84 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [84])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $63($4, $3)
	$4 = *(($5 + [88]))
	$3 = *(($5 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $4
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $64(($5 + [104]), ($5 + [96]))
	CALL $65(($5 + [112]), ($5 + [56]))
	$3 = *($5 + [112])
	CALL send_inline($3, (*($5 + [116]) - $3))
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [116]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [84])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [72])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$7
	$global$0 = ($5 + [128])
}

void .FUNC $54 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = *($1 + [8])
	*($1 + [8]) = [0]
	$5 = *($1)
	*($1) = (int_64)0
	$6 = *($2)
	*($2) = (int_64)0
	$1 = ($2 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($3 + [8])) = $7
	*($3 + [96]) = $5
	*($3 + [104]) = $4
	*($3 + [16]) = *($2 + [16])
	*($3) = $6
	*($3 + [24]) = *($2 + [24])
	*($3 + [32]) = *($2 + [32])
	$1 = ($2 + [48])
	*(($3 + [48])) = *($1)
	*($3 + [40]) = *($2 + [40 align=4])
	*($2 + [40]) = [0]
	*(($2 + [44])) = [0]
	*($1) = [0]
	$1 = ($2 + [60])
	*(($4 = ($3 + [60]))) = *($1)
	*($3 + [52 align=4]) = *($2 + [52 align=4])
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*($1) = [0]
	*(($3 + [72])) = *(($2 + [72]))
	*($3 + [64]) = *($2 + [64])
	*(($3 + [88])) = *(($2 + [88]))
	*($3 + [80]) = *($2 + [80])
	CALL $66($0, (int_64)-4492493317364367360, ($3 + [96]), $3)
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$1
	if ( (*(($3 + [40])) & [1]) ){ goto $label$6 }
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	$2 = *($3 + [96])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($3 + [112])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10017])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10062])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10112])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [180]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [120]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [136]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [152]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [168]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $89(*($1), *($0))
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $91(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = $0
	CALL $94(($3 + [32]), $5)
	*($5 + [80]) = [-1]
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $69(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $112 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $148($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $138($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $115($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [88]) = $1
	*($4 + [80]) = ($0 + [208])
	CALL $24(($4 + [96]), ($4 + [80]), ($4 + [88]))
	$5 = *($4 + [100])
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_64)*($4 + [88]) != (int_64)*($5 + [8])) ){ goto $label$11 }
	$1 = *($4 + [96])
	*($4 + [72]) = $1
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$10 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [88])) ){ goto $label$12 }
	
.LOOP $label$13:
	if ( ((int_64)*($5 + [64]) == (int_64)$2) ){ goto $label$12 }
	CALL $25(($4 + [72]))
	$5 = *($4 + [76])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_64)*($5 + [8]) == (int_64)*($4 + [88])) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)*($5 + [48]) != (int_32)[2]) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$8 }
	$5 = *($0 + [56])
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [56]) + [1])
	goto $label$5 
	
.LABEL $label$11
	$5 = [0]
	*($4 + [76]) = [0]
	*($4 + [72]) = ($4 + [80])
	goto $label$1 
	
.LABEL $label$10
	$global$0 = ($4 + [208])
	return [0]
	
.LABEL $label$9
	$1 = *($0)
	CALL eosio_assert([1], [10370])
	$0 = *($4 + [80])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	*($5 + [48]) = [2]
	$6 = ($5 + [8])
	*($4 + [184]) = *($6)
	$2 = *($5)
	CALL eosio_assert([1], [10502])
	*($4 + [176]) = (($4 + [96]) + [65])
	*($4 + [172]) = ($4 + [96])
	*($4 + [168]) = ($4 + [96])
	CALL $26(($4 + [168]), $5)
	CALL db_update_i64(*($5 + [76]), $1, ($4 + [96]), [65])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($4 + [200]) = *($6)
	if ( (CALL $137(($4 + [184]), ($4 + [200]), [8]) == 0) ){ goto $label$15 }
	$6 = ($5 + [80])
	$5 = *($6)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$16 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5290140533475246080, ($4 + [192]), $2)
	*($6) = $5
	
.LABEL $label$16
	CALL db_idx64_update($5, $1, ($4 + [200]))
	
.LABEL $label$15
	$global$0 = ($4 + [208])
	return [0]
	
.LABEL $label$8
	$5 = *($0 + [68])
	if ( ($5 & [1]) ){ goto $label$4 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [68]) + [1])
	goto $label$3 
	
.LABEL $label$7
	$global$0 = ($4 + [208])
	return [0]
	
.LABEL $label$6
	$5 = *(($0 + [60]))
	$6 = *(($0 + [64]))
	
.LABEL $label$5
	*($4 + [172]) = $5
	*($4 + [168]) = $6
	*($4 + [24]) = *($4 + [168])
	CALL $47(($4 + [96]), ($4 + [24]))
	goto $label$2 
	
.LABEL $label$4
	$5 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	
.LABEL $label$3
	*($4 + [172]) = $5
	*($4 + [168]) = $6
	*($4 + [32]) = *($4 + [168])
	CALL $47(($4 + [96]), ($4 + [32]))
	
.LABEL $label$2
	$2 = *($4 + [96])
	$7 = ($0 + [88])
	$6 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$20:
	$5 = ($6 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$19 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($9 + [176]) == (int_32)$7), [9648])
	if ( $9 ){ goto $label$17 }
	$global$0 = ($4 + [208])
	return [0]
	
.LABEL $label$18
	$5 = [0]
	$6 = CALL db_find_i64(*($7), *(($0 + [96])), (int_64)7864586771156172800, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $33($7, $6)
	CALL eosio_assert(((int_32)*($9 + [176]) == (int_32)$7), [9648])
	
.LABEL $label$17
	$10 = ($0 + [248])
	$2 = *($9 + [88])
	$8 = *(($0 + [276]))
	$7 = *(($0 + [272]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$23 }
	
.LOOP $label$25:
	$5 = ($8 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$24 }
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*(($6 + [84])) == (int_32)$10), [9648])
	if ( $6 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$5 = CALL db_find_i64(*($10), *(($0 + [256])), (int_64)-6030912130159137136, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$21 }
	$6 = CALL $37($10, $5)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$10), [9648])
	
.LABEL $label$22
	if ( ((int_64)*($6 + [8]) != (int_64)*($4 + [88])) ){ goto $label$26 }
	$global$0 = ($4 + [208])
	return [0]
	
.LABEL $label$26
	
.LOOP $label$27:
	CALL eosio_assert([1], [9987])
	$6 = CALL db_next_i64(*($6 + [88]), ($4 + [96]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$5 = [0]
	$6 = CALL $37($10, $6)
	if ( ((int_64)*($6 + [8]) != (int_64)*($4 + [88])) ){ goto $label$27 }
	goto $label$1 
	
.LABEL $label$21
	if ( ((int_64)*($9 + [8]) != (int_64)*($4 + [88])) ){ goto $label$28 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$28
	$5 = *($4 + [76])
	$2 = *($5 + [8])
	*((($4 + [40]) + [8])) = [0]
	*((($4 + [56]) + [8])) = *(($5 + [24]))
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = *($5 + [16])
	$1 = *($0 + [32])
	$5 = CALL $138([9126])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [40]) = ($5 << [1])
	$6 = (($4 + [40]) | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($4 + [40]) = ($8 | [1])
	*($4 + [48]) = $6
	*($4 + [44]) = $5
	
.LABEL $label$31
	CALL memcpy($6, [9126], $5)
	
.LABEL $label$30
	*(($6 + $5)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	CALL $53($0, $1, $2, ($4 + [8]), ($4 + [40]))
	$5 = [1]
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [48]))
	$global$0 = ($4 + [208])
	return [1]
	
.LABEL $label$29
	CALL $112(($4 + [40]))
	
.LABEL $label$1
	$global$0 = ($4 + [208])
	(unreachable)
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	$6 = *($1)
	$7 = *(*(*($3 + [4]) + [4]) + [8])
	if ( ((int_64)$7 == (int_64)*(*(*($3 + [8]) + [4]) + [8])) ){ goto $label$2 }
	if ( ((int_64)$7 != (int_64)*(*($3))) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = *($3 + [12])
	*($1 + [32]) = *($8)
	*(($1 + [40])) = *(($8 + [8]))
	
.LABEL $label$1
	*($1 + [64]) = *(*($3 + [16]))
	$8 = *($3 + [20])
	*(($1 + [104])) = *(($8 + [8]))
	*($1 + [96]) = *($8)
	$8 = *($3 + [24])
	*($1 + [112]) = *($8)
	*(($1 + [120])) = *(($8 + [8]))
	$8 = *($3 + [28])
	*($1 + [48]) = *($8)
	*(($1 + [56])) = *(($8 + [8]))
	*($1 + [88]) = *(*($3 + [32]))
	CALL eosio_assert([1], [10502])
	$4 = $4
	$3 = ($4 + [-176])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-7])
	CALL $56($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $3, [169])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $148($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $89(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [440]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*($4 + [352]) = [0]
	*($4 + [344]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [332]) = $2
	*($4 + [328]) = $2
	*($4 + [336]) = ($2 + $5)
	*($4 + [16]) = ($4 + [328])
	*($4 + [40]) = ($4 + [344])
	CALL $57(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [336])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [328])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $3(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [440])
	CALL $58(($4 + [16]), ($4 + [344]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $148($2)
	
.LABEL $label$4
	CALL $10($3)
	if ( (*($4 + [396]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [384]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [404])))
	if ( ((*($4 + [384]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [392])))
	$2 = [1]
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [344]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [448])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [352])))
	$global$0 = ($4 + [448])
	return $2
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$4 = ($global$0 - [384])
	$global$0 = $4
	*($4 + [336]) = $2
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$6 }
	$5 = *($0 + [56])
	if ( ($5 & [1]) ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [56]) + [1])
	goto $label$4 
	
.LABEL $label$6
	$5 = *($0 + [68])
	if ( ($5 & [1]) ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [68]) + [1])
	goto $label$2 
	
.LABEL $label$5
	$5 = *(($0 + [60]))
	$6 = *(($0 + [64]))
	
.LABEL $label$4
	*($4 + [356]) = $5
	*($4 + [352]) = $6
	*($4 + [40]) = *($4 + [352])
	CALL $47(($4 + [264]), ($4 + [40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	
.LABEL $label$2
	*($4 + [356]) = $5
	*($4 + [352]) = $6
	*($4 + [48]) = *($4 + [352])
	CALL $47(($4 + [264]), ($4 + [48]))
	
.LABEL $label$1
	$7 = ($0 + [88])
	$2 = *($4 + [264])
	$6 = *(($0 + [116]))
	$8 = *(($0 + [112]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$5 = ($6 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$9 }
	$6 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [176]) == (int_32)$7), [9648])
	*($4 + [332]) = $9
	goto $label$7 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7864586771156172800, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL $33($7, $5)
	CALL eosio_assert(((int_32)*($5 + [176]) == (int_32)$7), [9648])
	*($4 + [332]) = $5
	goto $label$7 
	
.LABEL $label$11
	*($4 + [332]) = [0]
	
.LABEL $label$7
	*($4 + [328]) = $7
	$2 = *($1 + [16])
	$10 = *(($1 + [24]))
	*((($4 + [16]) + [8])) = $10
	*((($4 + [296]) + [8])) = $10
	$10 = *($4 + [328])
	*($4 + [312]) = $10
	*($4 + [296]) = $2
	*($4 + [32]) = $10
	*($4 + [16]) = $2
	*($4 + [320]) = CALL $67($0, ($4 + [32]), *($4 + [336]), ($4 + [16]))
	if ( ((int_64)*($4 + [336]) != (int_64)1) ){ goto $label$17 }
	$5 = *($0 + [56])
	if ( ($5 & [1]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [56]) + [1])
	goto $label$15 
	
.LABEL $label$17
	$5 = *($0 + [68])
	if ( ($5 & [1]) ){ goto $label$14 }
	$5 = uint_32($5 >> [1])
	$6 = (($0 + [68]) + [1])
	goto $label$13 
	
.LABEL $label$16
	$5 = *(($0 + [60]))
	$6 = *(($0 + [64]))
	
.LABEL $label$15
	*($4 + [356]) = $5
	*($4 + [352]) = $6
	*($4) = *($4 + [352])
	CALL $47(($4 + [264]), $4)
	goto $label$12 
	
.LABEL $label$14
	$5 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	
.LABEL $label$13
	*($4 + [356]) = $5
	*($4 + [352]) = $6
	*($4 + [8]) = *($4 + [352])
	CALL $47(($4 + [264]), ($4 + [8]))
	
.LABEL $label$12
	$2 = *($4 + [264])
	$6 = *(($0 + [116]))
	$9 = *(($0 + [112]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$21:
	$5 = ($6 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$20 }
	$6 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$7), [9648])
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7864586771156172800, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$8 = CALL $33($7, $5)
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$7), [9648])
	
.LABEL $label$18
	*($4 + [332]) = $8
	*($4 + [328]) = $7
	$6 = ($0 + [128])
	*($4 + [288]) = $6
	CALL $48(($4 + [264]), ($4 + [288]), ($4 + [320]))
	$5 = *($4 + [268])
	if ( ($5 == 0) ){ goto $label$24 }
	if ( ((int_64)*($4 + [320]) != (int_64)*($5 + [8])) ){ goto $label$24 }
	$2 = *($4 + [264])
	*($4 + [280]) = $2
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($5) == 0) ){ goto $label$23 }
	
.LOOP $label$25:
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [320])) ){ goto $label$22 }
	if ( ((int_64)*($5 + [16]) == (int_64)*($4 + [336])) ){ goto $label$22 }
	CALL $49(($4 + [280]))
	$5 = *($4 + [284])
	if ( $5 ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	*($4 + [284]) = [0]
	*($4 + [280]) = ($4 + [288])
	
.LABEL $label$23
	$2 = *($0)
	*($4 + [264]) = $0
	*($4 + [268]) = ($4 + [320])
	*($4 + [272]) = ($4 + [336])
	*($4 + [276]) = ($4 + [328])
	*($4 + [376]) = $2
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$4()), [10165])
	*($4 + [352]) = $6
	*($4 + [356]) = ($4 + [264])
	*($4 + [360]) = ($4 + [376])
	*(($5 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = $6
	CALL $68(($4 + [352]), $5)
	*($4 + [368]) = $5
	$2 = *($5)
	*($4 + [352]) = $2
	$8 = *($5 + [76])
	*($4 + [348]) = $8
	$9 = ($0 + [156])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [160]))) ){ goto $label$27 }
	*($6 + [8]) = $2
	*($6 + [16]) = $8
	*($4 + [368]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($4 + [368])
	*($4 + [368]) = [0]
	if ( $5 ){ goto $label$26 }
	goto $label$22 
	
.LABEL $label$27
	CALL $69(($0 + [152]), ($4 + [368]), ($4 + [352]), ($4 + [348]))
	$5 = *($4 + [368])
	*($4 + [368]) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	
.LABEL $label$26
	CALL _ZdlPv($5)
	
.LABEL $label$22
	CALL eosio_assert(((int_32)*(*($4 + [332]) + [24]) == (int_32)[1]), [8692])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$29 }
	$5 = uint_32($5 >> [1])
	goto $label$28 
	
.LABEL $label$29
	$5 = *($3 + [4])
	
.LABEL $label$28
	CALL eosio_assert(((uint_32)$5 > (uint_32)[2]), [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$33 }
	$5 = uint_32($5 >> [1])
	$7 = ($3 + [1])
	$6 = CALL $138([8716])
	if ( ($6 == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$5 = *($3 + [4])
	$7 = *($3 + [8])
	$6 = CALL $138([8716])
	if ( $6 ){ goto $label$31 }
	
.LABEL $label$32
	$5 = [0]
	goto $label$30 
	
.LABEL $label$31
	$9 = ($7 + $5)
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$35 }
	$8 = $7
	
.LOOP $label$36:
	$5 = (($5 - $6) + [1])
	if ( ($5 == 0) ){ goto $label$35 }
	$5 = CALL $136($8, [114], $5)
	if ( ($5 == 0) ){ goto $label$35 }
	if ( (CALL $137($5, [8716], $6) == 0) ){ goto $label$34 }
	$8 = ($5 + [1])
	$5 = ($9 - $8)
	if ( ((int_32)$5 >= (int_32)$6) ){ goto $label$36 }
	
.LABEL $label$35
	$5 = $9
	
.LABEL $label$34
	$5 = ( [-1] ? ($5 - $7) : ((int_32)$5 == (int_32)$9) )
	
.LABEL $label$30
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$38 }
	$5 = uint_32($5 >> [1])
	goto $label$37 
	
.LABEL $label$38
	$5 = *($3 + [4])
	
.LABEL $label$37
	CALL $114(($4 + [264]), $3, [2], $5, $3)
	if ( (*($3) & [1]) ){ goto $label$40 }
	*($3) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*($3 + [8])) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$39
	CALL $116($3, [0])
	*(($3 + [8])) = *((($4 + [264]) + [8]))
	*($3) = *($4 + [264])
	$6 = CALL $113(($4 + [248]), $3)
	*((($4 + [232]) + [8])) = [0]
	*($4 + [232]) = (int_64)0
	$5 = CALL $138([8719])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$48 }
	*($4 + [232]) = ($5 << [1])
	$3 = (($4 + [232]) | [1])
	if ( $5 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$8 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($8)
	*($4 + [232]) = ($8 | [1])
	*($4 + [240]) = $3
	*($4 + [236]) = $5
	
.LABEL $label$47
	CALL memcpy($3, [8719], $5)
	
.LABEL $label$46
	*(($3 + $5)) = [0]
	CALL $70(($4 + [264]), $5, $6, ($4 + [232]))
	if ( ((*($4 + [232]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*($4 + [240]))
	
.LABEL $label$49
	if ( ((*($6) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$50
	$5 = (*($4 + [268]) - *($4 + [264]))
	if ( ((int_64)*($4 + [336]) != (int_64)1) ){ goto $label$52 }
	CALL eosio_assert(((int_32)$5 == (int_32)[48]), [8721])
	goto $label$51 
	
.LABEL $label$52
	CALL eosio_assert(((int_32)$5 == (int_32)[24]), [8721])
	
.LABEL $label$51
	$11 = (int_64)0
	$5 = *($4 + [264])
	if ( ((int_32)*($4 + [268]) == (int_32)$5) ){ goto $label$53 }
	$9 = (($4 + [216]) | [1])
	$11 = (int_64)0
	$12 = ($1 + [24])
	$7 = [0]
	
.LOOP $label$54:
	$13 = ((int_32)$7 * (int_32)[12])
	CALL $113(($4 + [216]), ($5 + $13))
	$5 = *($4 + [216])
	if ( ($5 & [1]) ){ goto $label$59 }
	$3 = uint_32($5 >> [1])
	$5 = [0]
	
.LOOP $label$60:
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$57 }
	$6 = ($9 + $5)
	$5 = ($5 + [1])
	if ( (((*($6) + [-48]) & [255]) <= [10]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	$8 = *((($4 + [216]) + [8]))
	$5 = [0]
	$3 = *($4 + [220])
	
.LOOP $label$61:
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$57 }
	$6 = ($8 + $5)
	$5 = ($5 + [1])
	if ( (((*($6) + [-48]) & [255]) <= [10]) ){ goto $label$61 }
	
.LABEL $label$58
	CALL eosio_assert([0], [8721])
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$57
	CALL eosio_assert([1], [8721])
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*((($4 + [216]) + [8])))
	
.LABEL $label$55
	$5 = (*($4 + [264]) + $13)
	if ( (*($5) & [1]) ){ goto $label$64 }
	$10 = CALL $135(($5 + [1]))
	if ( (int_64)($10 == 0) ){ goto $label$62 }
	goto $label$63 
	
.LABEL $label$64
	$10 = CALL $135(*($5 + [8]))
	if ( (int_64)($10 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$14 = *($12)
	$5 = CALL $138([8448])
	if ( ($5 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [9202])
	goto $label$69 
	
.LABEL $label$70
	if ( ($5 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$2 = (int_64)0
	
.LOOP $label$71:
	$6 = *(($5 + [8447]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$72
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$71 }
	if ( ((int_64)$14 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	if ( ((int_64)$14 == (int_64)4) ){ goto $label$66 }
	
.LABEL $label$67
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)-100000) <= (int_64)49900001), [8783])
	goto $label$65 
	
.LABEL $label$66
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)-1000) <= (int_64)999001), [8743])
	
.LABEL $label$65
	$5 = (*($4 + [264]) + $13)
	if ( (*($5) & [1]) ){ goto $label$74 }
	$5 = ($5 + [1])
	goto $label$73 
	
.LABEL $label$74
	$5 = *($5 + [8])
	
.LABEL $label$73
	$11 = ((int_64)CALL $135($5) + (int_64)$11)
	
.LABEL $label$62
	$5 = *($4 + [264])
	$7 = ($7 + [1])
	if ( ($7 <= ((int_32)(*($4 + [268]) - $5) / (int_32)[12])) ){ goto $label$54 }
	
.LABEL $label$53
	$5 = ($1 + [16])
	CALL eosio_assert(((int_64)*($5) == (int_64)$11), [8192])
	$6 = ($1 + [24])
	*((($4 + [168]) + [24])) = *($6)
	*((($4 + [168]) + [16])) = *($5)
	$3 = ($1 + [8])
	*((($4 + [168]) + [8])) = *($3)
	*($4 + [168]) = *($1)
	$8 = ($1 + [32])
	$9 = CALL $113((($4 + [168]) + [32]), $8)
	CALL $71($0, ($4 + [168]), *($4 + [336]), *($4 + [320]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($4 + [208])))
	
.LABEL $label$75
	$2 = *(*($4 + [332]) + [8])
	*((($4 + [120]) + [8])) = *($3)
	*((($4 + [120]) + [16])) = *($5)
	*((($4 + [120]) + [24])) = *($6)
	*($4 + [120]) = *($1)
	$9 = CALL $113((($4 + [120]) + [32]), $8)
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = [0]
	$5 = (*($4 + [268]) - *($4 + [264]))
	$3 = ((int_32)$5 / (int_32)[12])
	$10 = *($4 + [336])
	if ( ($5 == 0) ){ goto $label$77 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$76 }
	$6 = CALL _Znwj($5)
	*(($4 + [112])) = ($6 + ((int_32)$3 * (int_32)[12]))
	*($4 + [104]) = $6
	*($4 + [108]) = $6
	$3 = *($4 + [268])
	$5 = *($4 + [264])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$77 }
	
.LOOP $label$78:
	CALL $113($6, $5)
	$6 = (*($4 + [108]) + [12])
	*($4 + [108]) = $6
	$5 = ($5 + [12])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$78 }
	
.LABEL $label$77
	CALL $72($0, $2, ($4 + [120]), $10, ($4 + [104]), *($4 + [320]))
	$3 = *($4 + [104])
	if ( ($3 == 0) ){ goto $label$79 }
	$6 = *($4 + [108])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$81 }
	
.LOOP $label$82:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$83 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$83
	$6 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$82 }
	$5 = *($4 + [104])
	goto $label$80 
	
.LABEL $label$81
	$5 = $3
	
.LABEL $label$80
	*($4 + [108]) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$79
	if ( ((*($9) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($4 + [160])))
	
.LABEL $label$84
	$10 = *(($1 + [24]))
	$5 = CALL $138([8448])
	if ( ($5 <= [8]) ){ goto $label$87 }
	CALL eosio_assert([0], [9202])
	goto $label$86 
	
.LABEL $label$87
	if ( ($5 == 0) ){ goto $label$85 }
	
.LABEL $label$86
	$2 = (int_64)0
	
.LOOP $label$88:
	$6 = *(($5 + [8447]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$89 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$89
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$88 }
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$85
	if ( ((int_64)$10 == (int_64)4) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$76
	CALL $127(($4 + [104]))
	
.LABEL $label$45
	CALL $112(($4 + [232]))
	
.LABEL $label$44
	*((($4 + [56]) + [24])) = *(($1 + [24]))
	*((($4 + [56]) + [16])) = *(($1 + [16]))
	*((($4 + [56]) + [8])) = *(($1 + [8]))
	*($4 + [56]) = *($1)
	$5 = CALL $113(($4 + [88]), $8)
	CALL $73($0, ($4 + [56]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($4 + [96])))
	$3 = *($4 + [264])
	if ( ($3 == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$3 = *($4 + [264])
	if ( $3 ){ goto $label$41 }
	
.LABEL $label$42
	$global$0 = ($4 + [384])
	return 
	
.LABEL $label$41
	$6 = *($4 + [268])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$91 }
	
.LOOP $label$92:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$93
	$6 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$92 }
	$5 = *($4 + [264])
	goto $label$90 
	
.LABEL $label$91
	$5 = $3
	
.LABEL $label$90
	*($4 + [268]) = $3
	CALL _ZdlPv($5)
	$global$0 = ($4 + [384])
	(unreachable)
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = CALL $113(($3 + [16]), $2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = CALL $138([9124])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($3) = ($2 << [1])
	$5 = ($3 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($2 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $2
	
.LABEL $label$4
	CALL memcpy($5, [9124], $2)
	
.LABEL $label$3
	*(($5 + $2)) = [0]
	CALL $70($0, $3, $4, $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	if ( (*($4) & [1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $112($3)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9987])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-5290140533475246080, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9648])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $62($6, CALL $fimport$12(*($6), *($6 + [8]), (int_64)-5290140533475246080, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [9648])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5290140533475246080, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9648])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $62($7, CALL $fimport$12(*($7), *($7 + [8]), (int_64)-5290140533475246080, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [9648])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [224])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [208])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [216])), (int_64)-5290140533475246080, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $62($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $103(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [224])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10216])
	*($1) = *($7)
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*($1 + [16]) = *($6 + [16])
	*(($1 + [24])) = *(($6 + [24]))
	$6 = *($5 + [4])
	*($1 + [32]) = *($6 + [16])
	*(($1 + [40])) = *(($6 + [24]))
	*($1 + [48]) = [1]
	*($1 + [56]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [64]) = *(*($5 + [8]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-15])
	CALL $26(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-5290140533475246080, *(*($0 + [8])), $8, $5, [65])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)-5290140533475246080, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_64 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [144])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [128])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [136])), (int_64)7035929195654414336, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $35($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $101(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10216])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	CALL $40(($3 + [8]), $1)
	$6 = (($3 + [8]) + [8])
	*(($1 + [32])) = *($6)
	*($1 + [24]) = *($3 + [8])
	CALL $41(($3 + [8]), $1)
	*(($1 + [48])) = *($6)
	*($1 + [40]) = *($3 + [8])
	*($1 + [56]) = *(*(*($5 + [12]) + [4]) + [8])
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $102(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)7035929195654414336, *(*($0 + [8])), $8, $5, [72])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)7035929195654414336, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $143(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10564])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $143(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $63($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9727])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9727])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $88(CALL $87($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $98(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [512])
	$global$0 = $4
	*($4 + [440]) = $2
	$5 = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[60]))
	*($4 + [432]) = $5
	$6 = *($1 + [4])
	if ( ((uint_64)*($6 + [64]) >= (uint_64)$5) ){ goto $label$12 }
	*($4 + [424]) = *($6 + [8])
	*((($4 + [408]) + [8])) = *(($6 + [40]))
	*($4 + [408]) = *($6 + [32])
	$7 = *($3 + [8])
	$6 = CALL $138([8448])
	if ( ($6 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9202])
	goto $label$10 
	
.LABEL $label$12
	$2 = *($3 + [8])
	$6 = CALL $138([8448])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9202])
	goto $label$8 
	
.LABEL $label$11
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	$5 = (int_64)0
	
.LOOP $label$13:
	$8 = *(($6 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$15:
	$8 = *(($6 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$16
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	if ( ((int_64)$7 == (int_64)4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = *(($3 + [8]))
	*((($4 + [232]) + [8])) = $2
	$6 = *(($1 + [4]))
	*(($8 = (($4 + [216]) + [8]))) = *(($6 + [120]))
	$7 = *($6 + [8])
	$9 = *($6 + [160])
	$10 = *($6 + [112])
	$11 = *(($6 + [168]))
	$5 = *($3)
	*((($4 + [184]) + [8])) = $2
	*(($6 = (($4 + [200]) + [8]))) = $11
	*($4 + [232]) = $5
	*($4 + [216]) = $10
	*($4 + [184]) = $5
	*($4 + [200]) = $9
	*((($4 + [168]) + [8])) = *($8)
	*($4 + [168]) = *($4 + [216])
	*((($4 + [152]) + [8])) = *($6)
	*($4 + [152]) = *($4 + [200])
	CALL $74($0, ($4 + [184]), ($4 + [168]), ($4 + [152]), $7)
	goto $label$3 
	
.LABEL $label$4
	$2 = *(($3 + [8]))
	*((($4 + [280]) + [8])) = $2
	$6 = *(($1 + [4]))
	*(($8 = (($4 + [264]) + [8]))) = *(($6 + [56]))
	$7 = *($6 + [8])
	$9 = *($6 + [32])
	$10 = *($6 + [48])
	$11 = *(($6 + [40]))
	$5 = *($3)
	*((($4 + [136]) + [8])) = $2
	*(($6 = (($4 + [248]) + [8]))) = $11
	*($4 + [280]) = $5
	*($4 + [264]) = $10
	*($4 + [136]) = $5
	*($4 + [248]) = $9
	*((($4 + [120]) + [8])) = *($8)
	*($4 + [120]) = *($4 + [264])
	*((($4 + [104]) + [8])) = *($6)
	*($4 + [104]) = *($4 + [248])
	CALL $74($0, ($4 + [136]), ($4 + [120]), ($4 + [104]), $7)
	
.LABEL $label$3
	$8 = ($1 + [4])
	$6 = *($8)
	$5 = *($0)
	*($4 + [452]) = $3
	*($4 + [448]) = $0
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10370])
	CALL $75(($0 + [88]), $6, $5, ($4 + [448]))
	$5 = *(*($8) + [64])
	*($4 + [432]) = $5
	$global$0 = ($4 + [512])
	return $5
	
.LABEL $label$2
	CALL $76(($4 + [504]), $0, $2)
	$6 = *($4 + [508])
	if ( ($6 == 0) ){ goto $label$17 }
	$5 = *($6 + [8])
	if ( ((int_64)*($4 + [424]) == (int_64)$5) ){ goto $label$1 }
	*(($4 + [416])) = *(($6 + [24]))
	*($4 + [424]) = $5
	*($4 + [408]) = *($6 + [16])
	goto $label$1 
	
.LABEL $label$17
	$2 = *($0)
	*($4 + [424]) = $2
	$7 = *($0 + [32])
	$6 = CALL $138([8448])
	if ( ($6 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9202])
	goto $label$20 
	
.LABEL $label$21
	if ( ($6 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$5 = (int_64)0
	
.LOOP $label$22:
	$8 = *(($6 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$23
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$22 }
	goto $label$18 
	
.LABEL $label$19
	$5 = (int_64)0
	
.LABEL $label$18
	*(($4 + [480])) = [0]
	*($4 + [456]) = $2
	*($4 + [448]) = $7
	*($4 + [464]) = (int_64)-1
	*($4 + [472]) = (int_64)0
	$6 = CALL $39(($4 + [448]), $5, [9629])
	*(($12 = (($4 + [392]) + [8]))) = *(($6 + [8]))
	*($4 + [392]) = *($6)
	$13 = *($4 + [472])
	if ( ($13 == 0) ){ goto $label$24 }
	$14 = ($4 + [476])
	$6 = *($14)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$28 }
	CALL _ZdlPv($8)
	
.LABEL $label$28
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($4 + [472]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $13
	
.LABEL $label$25
	*($14) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$24
	*((($4 + [408]) + [8])) = *($12)
	*($4 + [408]) = *($4 + [392])
	
.LABEL $label$1
	$2 = *(($3 + [8]))
	$6 = CALL $138([8448])
	if ( ($6 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9202])
	goto $label$33 
	
.LABEL $label$34
	if ( ($6 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$5 = (int_64)0
	
.LOOP $label$35:
	$8 = *(($6 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$36
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)4) ){ goto $label$30 }
	
.LABEL $label$31
	*(($6 = (($4 + [328]) + [8]))) = *(($3 + [8]))
	*($4 + [328]) = *($3)
	CALL $41(($4 + [312]), $4)
	$8 = *(($1 + [4]))
	$2 = *(($8 + [168]))
	*((($4 + [296]) + [8])) = $2
	$5 = *($8 + [160])
	*((($4 + [88]) + [8])) = *($6)
	*((($4 + [72]) + [8])) = *((($4 + [312]) + [8]))
	*((($4 + [56]) + [8])) = $2
	*($4 + [296]) = $5
	*($4 + [88]) = *($4 + [328])
	*($4 + [72]) = *($4 + [312])
	*($4 + [56]) = $5
	CALL $74($0, ($4 + [88]), ($4 + [72]), ($4 + [56]), *($4 + [424]))
	goto $label$29 
	
.LABEL $label$30
	*(($6 = (($4 + [376]) + [8]))) = *(($3 + [8]))
	*($4 + [376]) = *($3)
	CALL $40(($4 + [360]), $4)
	*((($4 + [40]) + [8])) = *($6)
	*((($4 + [24]) + [8])) = *((($4 + [360]) + [8]))
	$5 = *((($4 + [408]) + [8]))
	*((($4 + [8]) + [8])) = $5
	*((($4 + [344]) + [8])) = $5
	*($4 + [40]) = *($4 + [376])
	*($4 + [24]) = *($4 + [360])
	$5 = *($4 + [408])
	*($4 + [8]) = $5
	*($4 + [344]) = $5
	CALL $74($0, ($4 + [40]), ($4 + [24]), ($4 + [8]), *($4 + [424]))
	
.LABEL $label$29
	$6 = *(($1 + [4]))
	$5 = *($0)
	*($4 + [460]) = $0
	*($4 + [464]) = $3
	*($4 + [452]) = ($4 + [408])
	*($4 + [448]) = ($4 + [424])
	*($4 + [456]) = ($4 + [432])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10370])
	CALL $77(($0 + [88]), $6, $5, ($4 + [448]))
	$5 = *($0)
	*($4 + [448]) = $0
	*($4 + [464]) = $1
	*($4 + [452]) = ($4 + [432])
	*($4 + [456]) = ($4 + [440])
	*($4 + [460]) = ($4 + [424])
	*($4 + [504]) = $5
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$4()), [10165])
	$8 = ($0 + [128])
	*($4 + [392]) = $8
	*($4 + [396]) = ($4 + [448])
	*($4 + [400]) = ($4 + [504])
	*(($6 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [72]) = $8
	CALL $78(($4 + [392]), $6)
	*($4 + [496]) = $6
	$5 = *($6)
	*($4 + [392]) = $5
	$3 = *($6 + [76])
	*($4 + [492]) = $3
	$1 = ($0 + [156])
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [160]))) ){ goto $label$39 }
	*($8 + [8]) = $5
	*($8 + [16]) = $3
	*($4 + [496]) = [0]
	*($8) = $6
	*($1) = ($8 + [24])
	$6 = *($4 + [496])
	*($4 + [496]) = [0]
	if ( $6 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	CALL $69(($0 + [152]), ($4 + [496]), ($4 + [392]), ($4 + [492]))
	$6 = *($4 + [496])
	*($4 + [496]) = [0]
	if ( ($6 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv($6)
	
.LABEL $label$37
	$5 = *($4 + [432])
	$global$0 = ($4 + [512])
	return $5
}

void .FUNC $66 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = [0]
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$9 = (*($2 + [4]) - *($2))
	if ( ($9 == 0) ){ goto $label$2 }
	$6 = int_32($9 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL _Znwj($9)
	$6 = ($8 + ($6 << [4]))
	*(($4 + [16])) = $6
	*($4 + [8]) = $8
	*($4 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($4 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($4 + [44])) = $7
	*(($4 + [48])) = $6
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $8
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	*($4 + [64]) = [0]
	*($4 + [72]) = ($4 + [64])
	*($4 + [80]) = $3
	CALL $96(($4 + [80]), ($4 + [72]))
	$8 = *($4 + [64])
	if ( ($8 == 0) ){ goto $label$5 }
	$2 = ($4 + [52])
	CALL $63($2, $8)
	$5 = *(($4 + [56]))
	$8 = *($2)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($4 + [84]) = $8
	*($4 + [80]) = $8
	*($4 + [88]) = $5
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $97(($4 + [72]), ($4 + [64]))
	CALL $65(($4 + [80]), ($4 + [24]))
	$8 = *($4 + [80])
	CALL send_inline($8, (*($4 + [84]) - $8))
	$8 = *($4 + [80])
	if ( ($8 == 0) ){ goto $label$6 }
	*($4 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($4 + [52])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$8 = *($4 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	*($4 + [12]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $127(($4 + [8]))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *(*($5))
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	*($1) = $6
	
.LABEL $label$1
	*($1 + [8]) = *(*($5 + [4]))
	CALL $40($3, $3)
	$5 = ($3 + [8])
	*(($1 + [24])) = *($5)
	*($1 + [16]) = *($3)
	CALL $41($3, $3)
	*(($1 + [40])) = *($5)
	*($1 + [32]) = *($3)
	$5 = $2
	$2 = ($5 + [-64])
	$global$0 = $2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($5 + [-15])
	CALL $59($3, $1)
	$6 = *($1 + [8])
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)8428043233828798464, *(*($0 + [8])), $6, $2, [49])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$2 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [72]) = $0
	CALL $100(($3 + [32]), $5)
	*($5 + [80]) = [-1]
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10322])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035929195654414336)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10268])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10268])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $35(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9722])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9722])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9722])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10322])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5290140533475246080)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10268])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10268])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $62(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9727])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $145($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10564])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $145($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $90($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $116($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $116($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $112($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9727])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9727])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9727])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9727])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9727])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9722])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9722])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $86(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [264])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [248])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [256])), (int_64)-6030912130159137136, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $37($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $51($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [264])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10216])
	*($1) = *($7)
	*($1 + [16]) = *(*($5 + [4]))
	*($1 + [24]) = (*(*($5 + [8])) + [1])
	$6 = *($5 + [12])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [64]) = *(*($5 + [16]))
	*($1 + [80]) = [2]
	*($1 + [8]) = *(*($5 + [20]))
	*($1 + [81]) = *(*($5 + [24]))
	$5 = *($5 + [28])
	*($1 + [48]) = *($5)
	*(($1 + [56])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-5])
	CALL $52($3, $1)
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912130159137136, *(*($0 + [8])), $8, $5, [75])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [264])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [248])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [256])), (int_64)-6030912130159137136, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $37($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $51($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [264])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10216])
	*($1) = *($7)
	*($1 + [16]) = *(*($5 + [4]))
	*($1 + [24]) = (*(*($5 + [8])) + [1])
	$6 = *($5 + [12])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [64]) = *(*($5 + [16]))
	*($1 + [80]) = [2]
	*($1 + [8]) = *(*($5 + [20]))
	*($1 + [81]) = *(*($5 + [24]))
	$5 = *($5 + [28])
	*($1 + [48]) = *($5)
	*(($1 + [56])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-5])
	CALL $52($3, $1)
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912130159137136, *(*($0 + [8])), $8, $5, [75])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	$6 = *((*($3 + [4]) + [24]))
	$7 = *($1 + [8])
	$8 = CALL $138([8448])
	if ( ($8 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9202])
	goto $label$5 
	
.LABEL $label$6
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = *(($8 + [8447]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	$8 = *($3 + [8])
	$11 = *($8 + [8])
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($3 + [8])
	$11 = *($8 + [8])
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [40]))), [9369])
	$9 = ((int_64)*($1 + [32]) + (int_64)*($8))
	*($1 + [32]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9431])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [24]))), [9369])
	$9 = ((int_64)*($1 + [16]) + (int_64)*($8))
	*($1 + [16]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9431])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [8]))), [10502])
	$10 = $4
	$8 = ($10 + [-64])
	$global$0 = $8
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($10 + [-15])
	CALL $59($5, $1)
	CALL db_update_i64(*($1 + [56]), $2, $8, [49])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	*(($5 = $4) + [24]) = *(($1 + [8]))
	$6 = *((*($3 + [4]) + [24]))
	$7 = *($1)
	$8 = CALL $138([8448])
	if ( ($8 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9202])
	goto $label$5 
	
.LABEL $label$6
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = *(($8 + [8447]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	$8 = *($3 + [8])
	$11 = *($8 + [8])
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($3 + [8])
	$11 = *($8 + [8])
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [48]))), [9369])
	$9 = ((int_64)*($1 + [40]) + (int_64)*($8))
	*($1 + [40]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [9431])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$11 == (int_64)*(($1 + [32]))), [9369])
	$9 = ((int_64)*($1 + [24]) + (int_64)*($8))
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9431])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [10502])
	$10 = $4
	$8 = ($10 + [-80])
	$global$0 = $8
	*($5 + [12]) = $8
	*($5 + [8]) = $8
	*($5 + [16]) = ($10 + [-8])
	CALL $102(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $8, [72])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $137(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$10 }
	$10 = ($1 + [80])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$11 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035929195654414336, ($5 + [32]), $7)
	*($10) = $8
	
.LABEL $label$11
	CALL db_idx64_update($8, $2, ($5 + [40]))
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

void .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18972])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18780]
	$3 = (((int_32)$1 * (int_32)[12]) + [18780])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $145 (int_32 $0)
{
	return CALL $146([10588], $0)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $145($1)
	
.LABEL $label$2
	*(CALL $128()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $145(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $148($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10580]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10584])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10580]) = [1]
	$2 = ($2 << [16])
	*([0] + [10584]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10584])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10584]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10580]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10580]) = [1]
	$3 = ($3 << [16])
	*([0] + [10584]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10584])
	
.LABEL $label$10
	*([0] + [10584]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $147($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8259])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$3 }
	CALL memset($2, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	
.LOOP $label$5:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$6:
	if ( (*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) ){ goto $label$2 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL $140($0, $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return ($4 - $0)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL $138($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$3 = *($0 + [4])
	$0 = ($0 + [4])
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $128())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $144($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [10576])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL $139($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL $141($2, $1))
	*([0] + [10576]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [10576]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [10576]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [10576]) = [0]
	
.LABEL $label$1
	return $2
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [104]) = $3
	*($6 + [112]) = $1
	*($6 + [96]) = $5
	CALL $40(($6 + [80]), $7)
	CALL $41(($6 + [64]), $7)
	*($6 + [60]) = [0]
	$8 = *($4)
	if ( ((int_32)*($4 + [4]) == (int_32)$8) ){ goto $label$1 }
	$9 = ($0 + [272])
	$10 = ($0 + [248])
	$11 = (($6 + [48]) | [1])
	$12 = (($6 + [48]) + [8])
	$13 = ($2 + [24])
	$14 = ($6 + [16])
	$15 = ($6 + [20])
	$16 = ($6 + [28])
	$17 = ($0 + [280])
	$18 = ($0 + [276])
	$19 = ($4 + [4])
	$7 = [0]
	
.LOOP $label$2:
	CALL $113(($6 + [48]), ($8 + ((int_32)$7 * (int_32)[12])))
	$1 = CALL $135(( *($12) ? $11 : (*($6 + [48]) & [1]) ))
	if ( (uint_64)($1 <= (int_64)1000) ){ goto $label$5 }
	$3 = *($13)
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9202])
	goto $label$9 
	
.LABEL $label$10
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$12
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$11 }
	if ( ((int_64)$3 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_64)$3 == (int_64)4) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = CALL $138([8452])
	if ( ($7 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9202])
	goto $label$14 
	
.LABEL $label$15
	if ( $7 ){ goto $label$14 }
	$5 = (int_64)0
	goto $label$13 
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$8 = *(($7 + [8451]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$16 }
	
.LABEL $label$13
	*(($7 = (($6 + [32]) + [8]))) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	*($6 + [32]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9300])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$5 = $1
	$8 = [1]
	$20 = $7
	$7 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$5 = $1
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$20 = ($7 + [1])
	$7 = $20
	if ( $8 ){ goto $label$22 }
	$8 = [1]
	$7 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$8 = [0]
	
.LABEL $label$18
	CALL eosio_assert($8, [9349])
	$5 = *($0)
	*($6 + [4]) = $2
	*($6) = $0
	*(($6 + [8])) = ($6 + [60])
	*(($6 + [12])) = ($6 + [32])
	*($14) = ($6 + [96])
	*($15) = ($6 + [112])
	*(($6 + [24])) = ($6 + [104])
	*($16) = ($6 + [64])
	*($6 + [152]) = $5
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$4()), [10165])
	*($6 + [128]) = $10
	*((($6 + [128]) + [8])) = ($6 + [152])
	*($6 + [132]) = $6
	*(($7 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = (int_64)0
	$5 = CALL current_time()
	*($7 + [80]) = [2]
	*($7 + [84]) = $10
	*($7 + [72]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $82(($6 + [128]), $7)
	*($6 + [144]) = $7
	$5 = *($7)
	*($6 + [128]) = $5
	$20 = *($7 + [88])
	*($6 + [124]) = $20
	$8 = *($18)
	if ( ((uint_32)$8 >= (uint_32)*($17)) ){ goto $label$24 }
	*($8 + [8]) = $5
	*($8 + [16]) = $20
	*($6 + [144]) = [0]
	*($8) = $7
	*($18) = ($8 + [24])
	$7 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( $7 ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$24
	CALL $83($9, ($6 + [144]), ($6 + [128]), ($6 + [124]))
	$7 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$23
	CALL _ZdlPv($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $138([8448])
	if ( ($7 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9202])
	goto $label$26 
	
.LABEL $label$27
	if ( $7 ){ goto $label$26 }
	$5 = (int_64)0
	goto $label$25 
	
.LABEL $label$26
	$5 = (int_64)0
	
.LOOP $label$28:
	$8 = *(($7 + [8447]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$29
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$28 }
	
.LABEL $label$25
	*(($7 = (($6 + [32]) + [8]))) = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	*($6 + [32]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9300])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$5 = $1
	$8 = [1]
	$20 = $7
	$7 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$5 = $1
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$20 = ($7 + [1])
	$7 = $20
	if ( $8 ){ goto $label$34 }
	$8 = [1]
	$7 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$8 = [0]
	
.LABEL $label$30
	CALL eosio_assert($8, [9349])
	$5 = *($0)
	*($6 + [4]) = $2
	*($6) = $0
	*(($6 + [8])) = ($6 + [60])
	*(($6 + [12])) = ($6 + [32])
	*($14) = ($6 + [96])
	*($15) = ($6 + [112])
	*(($6 + [24])) = ($6 + [104])
	*($16) = ($6 + [80])
	*($6 + [152]) = $5
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$4()), [10165])
	*($6 + [128]) = $10
	*((($6 + [128]) + [8])) = ($6 + [152])
	*($6 + [132]) = $6
	*(($7 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = (int_64)0
	$5 = CALL current_time()
	*($7 + [80]) = [2]
	*($7 + [84]) = $10
	*($7 + [72]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $84(($6 + [128]), $7)
	*($6 + [144]) = $7
	$5 = *($7)
	*($6 + [128]) = $5
	$20 = *($7 + [88])
	*($6 + [124]) = $20
	$8 = *($18)
	if ( ((uint_32)$8 >= (uint_32)*($17)) ){ goto $label$36 }
	*($8 + [8]) = $5
	*($8 + [16]) = $20
	*($6 + [144]) = [0]
	*($8) = $7
	*($18) = ($8 + [24])
	$7 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( $7 ){ goto $label$35 }
	goto $label$5 
	
.LABEL $label$36
	CALL $83($9, ($6 + [144]), ($6 + [128]), ($6 + [124]))
	$7 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$35
	CALL _ZdlPv($7)
	if ( (*($6 + [48]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($12))
	
.LABEL $label$3
	$7 = (*($6 + [60]) + [1])
	*($6 + [60]) = $7
	$8 = *($4)
	if ( ($7 <= ((int_32)(*($19) - $8) / (int_32)[12])) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($6 + [160])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [256])
	$global$0 = $2
	$3 = *($0 + [56])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	$4 = (($0 + [56]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [60]))
	$4 = *(($0 + [64]))
	
.LABEL $label$1
	$5 = ($0 + [88])
	*($2 + [60]) = $3
	*($2 + [56]) = $4
	*($2 + [16]) = *($2 + [56])
	$6 = *(CALL $47(($2 + [64]), ($2 + [16])))
	$4 = *(($0 + [116]))
	$7 = *(($0 + [112]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($4 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$6) ){ goto $label$5 }
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$5), [9648])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$3 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7864586771156172800, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $33($5, $3)
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$5), [9648])
	
.LABEL $label$3
	$9 = *($1 + [16])
	$10 = ((int_64)$9 / (int_64)2)
	if ( ((int_64)*($8 + [144]) <= (int_64)$10) ){ goto $label$8 }
	$3 = CALL $138([8452])
	if ( ($3 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9202])
	goto $label$11 
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$11 = (int_64)0
	
.LOOP $label$13:
	$4 = *(($3 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$10
	$11 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9300])
	$6 = ((int_64)$11 & (int_64)72057594037927935)
	$12 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$6 = $11
	$4 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$6 = $11
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $4 ){ goto $label$19 }
	$4 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [9349])
	if ( ((int_64)*(($8 + [144])) > (int_64)49999999999) ){ goto $label$20 }
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	$9 = $10
	
.LABEL $label$20
	$11 = *($0)
	$10 = *($0 + [40])
	$3 = CALL $138([8452])
	if ( ($3 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9202])
	goto $label$23 
	
.LABEL $label$24
	if ( ($3 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$6 = (int_64)0
	
.LOOP $label$25:
	$4 = *(($3 + [8451]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$26
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$25 }
	goto $label$21 
	
.LABEL $label$22
	$6 = (int_64)0
	
.LABEL $label$21
	*(($2 + [96])) = [0]
	*($2 + [72]) = $11
	*($2 + [64]) = $10
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	$3 = CALL $39(($2 + [64]), $6, [9629])
	$6 = *($3 + [8])
	$11 = *($3)
	$7 = *($2 + [88])
	if ( ($7 == 0) ){ goto $label$27 }
	$13 = ($2 + [92])
	$3 = *($13)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$30:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$31 }
	CALL _ZdlPv($4)
	
.LABEL $label$31
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$30 }
	$3 = *(($2 + [88]))
	goto $label$28 
	
.LABEL $label$29
	$3 = $7
	
.LABEL $label$28
	*($13) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$27
	CALL eosio_assert(((int_64)$6 == (int_64)$12), [9733])
	if ( ((int_64)$11 <= (int_64)$9) ){ goto $label$8 }
	*(($2 + [32])) = [0]
	*($2 + [40]) = $9
	*($2 + [48]) = $12
	*($2 + [24]) = (int_64)0
	$6 = *(($0 + [40]))
	$11 = *($1)
	$3 = CALL $138([8963])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$34 }
	*($2 + [24]) = ($3 << [1])
	$4 = (($2 + [24]) | [1])
	if ( $3 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$7 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2 + [24]) = ($7 | [1])
	*($2 + [32]) = $4
	*($2 + [28]) = $3
	
.LABEL $label$33
	CALL memcpy($4, [8963], $3)
	
.LABEL $label$32
	*(($4 + $3)) = [0]
	*(($2 + [8])) = *((($2 + [40]) + [8]))
	*($2) = *($2 + [40])
	CALL $53($0, $6, $11, $2, ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$35
	$11 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10370])
	CALL eosio_assert(((int_32)*($8 + [176]) == (int_32)$5), [10405])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [10451])
	$6 = *($8)
	CALL eosio_assert(((int_64)$12 == (int_64)*(($8 + [168]))), [9538])
	$10 = (int_64)
	*($8 + [160]) = $10(*($8 + [160]) - $9))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($8 + [160]) < (int_64)4611686018427387904), [9608])
	CALL eosio_assert(((int_64)$12 == (int_64)*(($8 + [152]))), [9538])
	$9 = (int_64)
	*($8 + [144]) = $9(*($8 + [144]) - $9))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9586])
	CALL eosio_assert(((int_64)*($8 + [144]) < (int_64)4611686018427387904), [9608])
	CALL eosio_assert(((int_64)$6 == (int_64)*($8)), [10502])
	*($2 + [248]) = (($2 + [64]) + [169])
	*($2 + [244]) = ($2 + [64])
	*($2 + [240]) = ($2 + [64])
	CALL $56(($2 + [240]), $8)
	CALL db_update_i64(*($8 + [180]), $11, ($2 + [64]), [169])
	$3 = ($0 + [104])
	if ( (uint_64)($6 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$7
	CALL $112(($2 + [24]))
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( (*($2) & [1]) ){ goto $label$5 }
	$2 = ($2 + [1])
	$5 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = *($2 + [8])
	$5 = [1]
	if ( (*($3) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $142($2, ($3 + $5))
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = CALL $142($2, *($3 + [8]))
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [1])
	$7 = ($4 | [1])
	$8 = ($4 + [8])
	$9 = ($0 + [4])
	
.LOOP $label$6:
	*($8) = [0]
	*($4) = (int_64)0
	$2 = CALL $138($5)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($2 << [1])
	$10 = $7
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$11 = (($2 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($8) = $10
	*($4) = ($11 | [1])
	*($4 + [4]) = $2
	
.LABEL $label$10
	CALL memcpy($10, $5, $2)
	
.LABEL $label$9
	*(($10 + $2)) = [0]
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [8]))) ){ goto $label$13 }
	*($2) = *($4)
	*(($2 + [8])) = *($8)
	*($8) = [0]
	*($9) = (*($9) + [12])
	*($4) = (int_64)0
	$2 = $6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$12 
	
.LABEL $label$13
	CALL $79($0, $4)
	if ( (*($4) & [1]) ){ goto $label$14 }
	$2 = $6
	if ( (*($3) & [1]) ){ goto $label$12 }
	goto $label$7 
	
.LABEL $label$14
	CALL _ZdlPv(*($8))
	$2 = $6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$12
	$5 = CALL $142([0], *(($3 + [8])))
	if ( $5 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	CALL $112($4)
	
.LABEL $label$7
	$5 = CALL $142([0], $2)
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$1
	$global$0 = ($4 + [16])
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [168]) = $3
	$3 = *($1 + [16])
	CALL __multi3(($4 + [40]), $3, (int_64)$3 >> (int_64)63), (int_64)5, (int_64)0)
	$5 = *(($1 + [24]))
	$3 = *(($4 + [48]))
	$6 = *($4 + [40])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [9513])
	*($4 + [160]) = $5
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	*($4 + [152]) = ((int_64)$6 / (int_64)1000)
	$7 = ($0 + [168])
	$3 = *($1)
	$9 = *(($0 + [196]))
	$8 = *(($0 + [192]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11 + [8]) == (int_64)$3) ){ goto $label$4 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($11 + [52])) == (int_32)$7), [9648])
	if ( ($11 == 0) ){ goto $label$1 }
	if ( ((int_64)(*($11) == 0) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$10 = CALL db_find_i64(*($7), *(($0 + [176])), (int_64)8428043233828798464, $3)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $31($7, $10)
	CALL eosio_assert(((int_32)*($11 + [52]) == (int_32)$7), [9648])
	if ( (int_64)(*($11) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *(($1 + [24]))
	$10 = CALL $138([8448])
	if ( ($10 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9202])
	goto $label$12 
	
.LABEL $label$13
	if ( ($10 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$3 = (int_64)0
	
.LOOP $label$14:
	$9 = *(($10 + [8447]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$15
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$14 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)4)) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = *($11)
	*((($4 + [88]) + [8])) = [0]
	*((($4 + [104]) + [8])) = *((($4 + [152]) + [8]))
	*($4 + [104]) = *($4 + [152])
	*($4 + [88]) = (int_64)0
	$6 = *($0 + [40])
	$10 = CALL $138([9049])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$19 }
	*($4 + [88]) = ($10 << [1])
	$9 = (($4 + [88]) | [1])
	if ( $10 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($4 + [88]) = ($8 | [1])
	*($4 + [96]) = $9
	*($4 + [92]) = $10
	
.LABEL $label$18
	CALL memcpy($9, [9049], $10)
	
.LABEL $label$17
	*(($9 + $10)) = [0]
	*((($4 + [24]) + [8])) = *((($4 + [104]) + [8]))
	*($4 + [24]) = *($4 + [104])
	CALL $53($0, $6, $3, ($4 + [24]), ($4 + [88]))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [96]))
	goto $label$8 
	
.LABEL $label$16
	CALL $112(($4 + [88]))
	
.LABEL $label$9
	$3 = *($11)
	*((($4 + [120]) + [8])) = [0]
	*((($4 + [136]) + [8])) = *((($4 + [152]) + [8]))
	*($4 + [136]) = *($4 + [152])
	*($4 + [120]) = (int_64)0
	$6 = *($0 + [32])
	$10 = CALL $138([9049])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$22 }
	*($4 + [120]) = ($10 << [1])
	$9 = (($4 + [120]) | [1])
	if ( $10 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$8 = (($10 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($4 + [120]) = ($8 | [1])
	*($4 + [128]) = $9
	*($4 + [124]) = $10
	
.LABEL $label$21
	CALL memcpy($9, [9049], $10)
	
.LABEL $label$20
	*(($9 + $10)) = [0]
	*((($4 + [8]) + [8])) = *((($4 + [136]) + [8]))
	*($4 + [8]) = *($4 + [136])
	CALL $53($0, $6, $3, ($4 + [8]), ($4 + [120]))
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [128]))
	
.LABEL $label$8
	*($4 + [80]) = ($0 + [128])
	CALL $48(($4 + [56]), ($4 + [80]), ($4 + [168]))
	$10 = *($4 + [60])
	if ( ($10 == 0) ){ goto $label$24 }
	if ( ((int_64)*($4 + [168]) != (int_64)*($10 + [8])) ){ goto $label$24 }
	$3 = *($4 + [56])
	*($4 + [72]) = $3
	$10 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($10) == 0) ){ goto $label$6 }
	
.LOOP $label$25:
	if ( ((int_64)*($10 + [8]) != (int_64)*($4 + [168])) ){ goto $label$6 }
	if ( ((int_64)*($10 + [16]) == (int_64)$2) ){ goto $label$23 }
	CALL $49(($4 + [72]))
	$10 = *($4 + [76])
	if ( $10 ){ goto $label$25 }
	goto $label$6 
	
.LABEL $label$24
	*($4 + [76]) = [0]
	*($4 + [72]) = ($4 + [80])
	goto $label$6 
	
.LABEL $label$23
	$3 = *($0)
	*($4 + [60]) = $1
	*($4 + [56]) = $0
	*($4 + [64]) = ($4 + [152])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10370])
	CALL $80(*($4 + [80]), $10, $3, ($4 + [56]))
	goto $label$6 
	
.LABEL $label$7
	CALL $112(($4 + [120]))
	
.LABEL $label$6
	$3 = *($0)
	*($4 + [60]) = $1
	*($4 + [56]) = $0
	*($4 + [64]) = ($4 + [152])
	CALL eosio_assert([1], [10370])
	CALL $81($7, $11, $3, ($4 + [56]))
	
.LABEL $label$1
	$global$0 = ($4 + [176])
	(unreachable)
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($1 + [208])
	$5 = CALL db_lowerbound_i64(*($1 + [208]), *(($1 + [216])), (int_64)-5290140533475246080, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $62($4, $5)
	*($0 + [4]) = $5
	*($0) = $4
	$6 = ($0 + [4])
	$7 = $4
	
.LOOP $label$3:
	if ( ((int_64)*($5 + [64]) != (int_64)$2) ){ goto $label$5 }
	if ( ((int_32)*($5 + [48]) == (int_32)[1]) ){ goto $label$2 }
	if ( (CALL $29($1, *($5 + [8]), $2, [1]) == 0) ){ goto $label$4 }
	$5 = [0]
	$8 = *($0)
	$9 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	$7 = ((int_32)$9) != (int_32)[0]
	CALL eosio_assert($7), [9953])
	CALL eosio_assert($7, [9987])
	$7 = CALL db_next_i64(*($9 + [76]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $62((CASTING uint_32)(uint_64 $8), $7)
	
.LABEL $label$6
	CALL $30($4, $9)
	*($0) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)((int_64)$8 & (int_64)4294967295))
	$7 = (CASTING uint_32)(uint_64 $8)
	
.LABEL $label$5
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([1], [9987])
	$9 = *($5 + [76])
	$5 = [0]
	$9 = CALL db_next_i64($9, ($3 + [8]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $62($7, $9)
	
.LABEL $label$7
	*($6) = $5
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($0 + [4]) = [0]
	*($0) = $4
	$global$0 = ($3 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [176]) == (int_32)$0), [10405])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10451])
	*($1 + [8]) = *(*($3))
	$6 = *($3 + [4])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	*($1 + [64]) = *(*($3 + [8]))
	$7 = *($1)
	$8 = *(*($3 + [16]) + [8])
	$6 = CALL $138([8448])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9202])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = (int_64)0
	
.LOOP $label$7:
	$10 = *(($6 + [8447]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	if ( ((int_64)$8 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)$8 == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	*($1 + [48]) = (int_64)0
	$6 = *(($3 + [16]))
	*($1 + [112]) = *($6)
	*(($1 + [120])) = *(($6 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($3 + [16]))
	*($1 + [48]) = *($6)
	$9 = *(($6 + [8]))
	*($1 + [112]) = (int_64)0
	*(($1 + [56])) = $9
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [10502])
	$10 = $4
	$6 = ($10 + [-176])
	$global$0 = $6
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($10 + [-7])
	CALL $56($5, $1)
	CALL db_update_i64(*($1 + [180]), $2, $6, [169])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($1 + [8])
	$7 = [0]
	$8 = *($1)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$7 = [1]
	$11 = $1
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8894])
	$1 = CALL $138([8448])
	if ( ($1 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9202])
	goto $label$9 
	
.LABEL $label$10
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = (int_64)0
	
.LOOP $label$11:
	$7 = *(($1 + [8447]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9247])
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$11 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$6 }
	
.LABEL $label$7
	$9 = *($3)
	CALL __multi3(($5 + [16]), $9, (int_64)$9 >> (int_64)63), (int_64)5, (int_64)0)
	$4 = *($3 + [8])
	$9 = *(($5 + [24]))
	$10 = *($5 + [16])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	$9 = *($2)
	$12 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$12), [9369])
	$9 = ((int_64)$9 + (int_64)$8)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9431])
	CALL eosio_assert(((int_64)$4 == (int_64)$12), [9733])
	CALL eosio_assert(((int_64)((int_64)$10 / (int_64)100) >= (int_64)$9), [8937])
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$6
	if ( ((int_64)*($0) != (int_64)$4) ){ goto $label$13 }
	$9 = *($3)
	CALL __multi3($5, $9, (int_64)$9 >> (int_64)63), (int_64)5, (int_64)0)
	$4 = *($3 + [8])
	$9 = *(($5 + [8]))
	$10 = *($5)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [9489])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [9513])
	CALL eosio_assert([1], [9449])
	CALL eosio_assert([1], [9464])
	$9 = *($2)
	$12 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$12), [9369])
	$9 = ((int_64)$9 + (int_64)$8)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9431])
	CALL eosio_assert(((int_64)$4 == (int_64)$12), [9733])
	CALL eosio_assert(((int_64)((int_64)$10 / (int_64)100) >= (int_64)$9), [8913])
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$13
	$9 = *($2)
	$10 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$10), [9369])
	$9 = ((int_64)$9 + (int_64)$8)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9412])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9431])
	CALL eosio_assert(((int_64)$10 == (int_64)*($3 + [8])), [9733])
	CALL eosio_assert(((int_64)*($3) >= (int_64)$9), [8913])
	$global$0 = ($5 + [32])
}

int_32 .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9648])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $85($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9648])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10017])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10062])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10112])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035929195654414336, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	$6 = CALL current_time()
	*($5 + [80]) = [2]
	*($5 + [84]) = $0
	*($5 + [72]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $95(($3 + [32]), $5)
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [144])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [128])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [136])), (int_64)7035929195654414336, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $35($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $101(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10216])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [56]) = *(*($5 + [12]))
	*($1 + [64]) = *(*(*($5 + [16]) + [4]) + [88])
	CALL $40(($3 + [8]), $1)
	$5 = (($3 + [8]) + [8])
	*(($1 + [32])) = *($5)
	*($1 + [24]) = *($3 + [8])
	CALL $41(($3 + [8]), $1)
	*(($1 + [48])) = *($5)
	*($1 + [40]) = *($3 + [8])
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $102(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)7035929195654414336, *(*($0 + [8])), $8, $5, [72])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)7035929195654414336, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [10017])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10062])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10112])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([192])) + [8]) = (int_64)0
	*($5) = (int_64)0
	$6 = CALL current_time()
	*($5 + [24]) = [1]
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)1
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [16]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [176]) = $0
	*($5 + [168]) = (int_64)0
	CALL $93(($3 + [32]), $5)
	*($5 + [180]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10017])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10062])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10112])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5290140533475246080, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9699])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = [1]
	*($5 + [52]) = $0
	CALL $92(($3 + [32]), $5)
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $61(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}