(data (i32.const 8193) " \00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8281) ",\00")
(data (i32.const 8283) "maximum fee must be lower or equal to 1000\00")
(data (i32.const 8326) "fee must be lower or equal to 1000\00")
(data (i32.const 8361) "fee must be lower or equal to the maximum fee\00")
(data (i32.const 8407) "settings already defined\00")
(data (i32.const 8432) "ratio must be between 1 and 1000\00")
(data (i32.const 8465) "cannot update the reserve contract name\00")
(data (i32.const 8505) "total ratio cannot exceed 1000\00")
(data (i32.const 8536) "{\00")
(data (i32.const 8538) "version\00")
(data (i32.const 8546) "1.1\00")
(data (i32.const 8550) "etype\00")
(data (i32.const 8556) "price_data\00")
(data (i32.const 8567) "smart_supply\00")
(data (i32.const 8580) "reserve_contract\00")
(data (i32.const 8597) "reserve_symbol\00")
(data (i32.const 8612) "reserve_balance\00")
(data (i32.const 8628) "reserve_ratio\00")
(data (i32.const 8642) "}\n\00")
(data (i32.const 8645) "invalid quantity\00")
(data (i32.const 8662) "zero quantity is disallowed\00")
(data (i32.const 8690) "invalid memo format\00")
(data (i32.const 8710) "converter is disabled\00")
(data (i32.const 8732) "converter can only receive from network contract\00")
(data (i32.const 8781) "wrong converter\00")
(data (i32.const 8797) "cannot convert to self\00")
(data (i32.const 8820) "\'from\' token purchases disabled\00")
(data (i32.const 8852) "unknown \'from\' contract\00")
(data (i32.const 8876) "active\00")
(data (i32.const 8883) "retire\00")
(data (i32.const 8890) "destroy on conversion\00")
(data (i32.const 8912) "smart token must be final currency\00")
(data (i32.const 8947) "conversion\00")
(data (i32.const 8958) "memo\00")
(data (i32.const 8963) "from_contract\00")
(data (i32.const 8977) "from_symbol\00")
(data (i32.const 8989) "to_contract\00")
(data (i32.const 9001) "to_symbol\00")
(data (i32.const 9011) "amount\00")
(data (i32.const 9018) "return\00")
(data (i32.const 9025) "conversion_fee\00")
(data (i32.const 9040) "convert\00")
(data (i32.const 9048) "issue\00")
(data (i32.const 9054) "transfer\00")
(data (i32.const 17524) "reserve not found\00")
(data (i32.const 17542) "unable to find key\00")
(data (i32.const 17561) "must have entry for token (claim token first)\00")
(data (i32.const 17607) "below min return\00")
(data (i32.const 17624) "setup\00")
(data (i32.const 17630) "string is too long to be a valid name\00")
(data (i32.const 17668) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17735) "character is not in allowed character set for names\00")
(data (i32.const 17787) "string is too long to be a valid symbol_code\00")
(data (i32.const 17832) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17885) "write\00")
(data (i32.const 17891) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17940) "invalid symbol name\00")
(data (i32.const 17960) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18011) "error reading iterator\00")
(data (i32.const 18034) "read\00")
(data (i32.const 18039) "cannot pass end iterator to modify\00")
(data (i32.const 18074) "object passed to modify is not in multi_index\00")
(data (i32.const 18120) "cannot modify objects in table of another contract\00")
(data (i32.const 18171) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18230) "cannot create objects in table of another contract\00")
(data (i32.const 18281) "singleton does not exist\00")
(data (i32.const 18306) "cannot increment end iterator\00")
(data (i32.const 18336) "get\00")
(data (i32.const 18352) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18368) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18384) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "printdf" (func $fimport$11 (param f64)))
(import "env" "printn" (func $fimport$12 (param i64)))
(import "env" "printui" (func $fimport$13 (param i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "printi" (func $fimport$15 (param i64)))
(import "env" "eosio_exit" (func $fimport$16 (param i32)))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $31))
(export "_ZdlPv" (func $55))
(export "_Znwj" (func $53))
(export "_Znaj" (func $54))
(export "_ZdaPv" (func $56))
(export "_ZnwjSt11align_val_t" (func $57))
(export "_ZnajSt11align_val_t" (func $58))
(export "_ZdlPvSt11align_val_t" (func $59))
(export "_ZdaPvSt11align_val_t" (func $60))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $30 $7 $13 $12)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18400))
(global $global$2 i32 (i32.const 18400))


int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $71())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $80($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_64 .FUNC $18 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	$5 = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$6 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $19(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [8])), [17960])
	$5 = *($6)
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	CALL _ZdlPv($9)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$6 = *(($4 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
	return $5
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18011])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $81($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18034])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18034])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $47(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [1]) = ((int_32)*($2 + [14]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [2]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [8]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $73 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $75($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $72($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18368])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18352]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18384]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $74($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $78($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $65($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18011])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $81($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $48(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $25(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17630])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17735])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17668])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17735])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	float_64 $24
	float_64 $25
	float_64 $26
	float_64 $27
	float_64 $28
	float_64 $29
	float_64 $30
	float_64 $31
	float_32 $32
	float_32 $33
	int_32 $34
	$5 = ($global$0 - [592])
	$global$0 = $5
	$6 = *($2 + [8])
	$7 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8645])
	CALL eosio_assert(((int_64)$8 != (int_64)0), [8662])
	$13 = CALL $73((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $6) & [255])))
	$10 = CALL $62(($5 + [496]), $3)
	CALL $4(($5 + [512]), $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$6
	CALL eosio_assert(((uint_32)((int_32)(*($5 + [516]) - *($5 + [512])) / (int_32)[12]) > (uint_32)[1]), [8690])
	*((($5 + [456]) + [32])) = [0]
	*($5 + [472]) = (int_64)-1
	*($5 + [480]) = (int_64)0
	$9 = *($0)
	*($5 + [456]) = $9
	*($5 + [464]) = $9
	$10 = [0]
	$7 = CALL db_find_i64($9, $9, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $8(($5 + [456]), $7)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)($5 + [456])), [17960])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [18281])
	*((($5 + [392]) + [24])) = *(($10 + [24]))
	*((($5 + [392]) + [56])) = *(($10 + [56]))
	*((($5 + [392]) + [48])) = *(($10 + [48]))
	*((($5 + [392]) + [40])) = *(($10 + [40]))
	*(($7 = (($5 + [392]) + [32]))) = *(($10 + [32]))
	*((($5 + [392]) + [16])) = *(($10 + [16]))
	*((($5 + [392]) + [8])) = *(($10 + [8]))
	*($5 + [392]) = *($10)
	CALL eosio_assert(*($5 + [417]), [8710])
	CALL eosio_assert(((int_64)*($7) == (int_64)$1), [8732])
	$10 = *($5 + [512])
	if ( (*($10) & [1]) ){ goto $label$9 }
	$10 = ($10 + [1])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($10 + [8])
	
.LABEL $label$8
	*($5 + [376]) = $10
	*($5 + [380]) = CALL $78($10)
	*($5 + [72]) = *($5 + [376])
	CALL eosio_assert(((int_64)*(CALL $21(($5 + [384]), ($5 + [72]))) == (int_64)*($0)), [8781])
	$10 = *($5 + [512])
	if ( (*($10 + [12]) & [1]) ){ goto $label$11 }
	$14 = (($10 + [12]) + [1])
	goto $label$10 
	
.LABEL $label$11
	$14 = *(($10 + [20]))
	
.LABEL $label$10
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = CALL $78($14)
	if ( ($10 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17787])
	goto $label$14 
	
.LABEL $label$15
	if ( ($10 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$9 = (int_64)0
	
.LOOP $label$16:
	$12 = (($14 + $10) + [-1])
	$7 = *($12)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17832])
	$7 = *($12)
	
.LABEL $label$17
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$11 != (int_64)$9), [8797])
	$1 = *((($5 + [392]) + [16]))
	$10 = CALL $22($0, $11, ($5 + [392]))
	$15 = *($10 + [24])
	$16 = *($10 + [8])
	$17 = *(($10 + [16]))
	$18 = *($10)
	$7 = *($10 + [32])
	$10 = CALL $22($0, $9, ($5 + [392]))
	$19 = *($10 + [24])
	$20 = *($10 + [8])
	$21 = *($10)
	$22 = *(($10 + [16]))
	CALL eosio_assert(($7 & [1]), [8820])
	CALL eosio_assert(((int_64)$18 == (int_64)$4), [8852])
	$9 = *($0)
	*(($14 = ($5 + [344]))) = [0]
	*($5 + [320]) = $9
	*($5 + [312]) = $18
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	$9 = (uint_64)$22 >> (uint_64)(int_64)8)
	$11 = (uint_64)$17 >> (uint_64)(int_64)8
	$4 = *(CALL $23(($5 + [312]), $11), [17542]))
	$12 = *($5 + [336])
	if ( ($12 == 0) ){ goto $label$18 }
	$23 = ($5 + [340])
	$10 = *($23)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	CALL _ZdlPv($7)
	
.LABEL $label$22
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$21 }
	$10 = *(($5 + [336]))
	goto $label$19 
	
.LABEL $label$20
	$10 = $12
	
.LABEL $label$19
	*($23) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$18
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	$24 = CALL $73((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $17) & [255])))
	$17 = *($0)
	*($14) = [0]
	*($5 + [320]) = $17
	*($5 + [312]) = $21
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	$17 = ((int_64))($16 - $8) + (int_64)$4)
	$4 = *(CALL $23(($5 + [312]), $9, [17542]))
	$12 = *($5 + [336])
	if ( ($12 == 0) ){ goto $label$23 }
	$14 = ($5 + [340])
	$10 = *($14)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$27 }
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($5 + [336]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $12
	
.LABEL $label$24
	*($14) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$23
	$25 = (CASTING float_64)(int_64 $8)
	$26 = (CASTING float_64)(int_64 $17)
	$27 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $22) & [255]))
	$28 = CALL $73((float_64)10, $27)
	$8 = *($5 + [392])
	*((($5 + [312]) + [32])) = [0]
	*($5 + [312]) = $8
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	$29 = (CASTING float_64)(int_64 ((int_64)$4 + (int_64)$20))
	*($5 + [320]) = $6
	$8 = *(CALL $17(($5 + [312]), $6, [17542]))
	$12 = *($5 + [336])
	if ( ($12 == 0) ){ goto $label$28 }
	$14 = ($5 + [340])
	$10 = *($14)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$30 }
	
.LOOP $label$31:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$32 }
	CALL _ZdlPv($7)
	
.LABEL $label$32
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$31 }
	$10 = *(($5 + [336]))
	goto $label$29 
	
.LABEL $label$30
	$10 = $12
	
.LABEL $label$29
	*($14) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$28
	$25 = ((float_64)$25 / (float_64)$13)
	$26 = ((float_64)$26 / (float_64)$24)
	$28 = ((float_64)$29 / (float_64)$28)
	$17 = *($5 + [400])
	$30 = (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $1) & [255]))
	$13 = CALL $73((float_64)10, $30)
	$10 = ( *((($5 + [512]) + [32])) ? ($5 + [537]) : (*($5 + [536]) & [1]) )
	*($5 + [360]) = $10
	*($5 + [364]) = CALL $78($10)
	*($5 + [64]) = *($5 + [360])
	$13 = ((float_64)(CASTING float_64)(int_64 ((int_64)$17 + (int_64)$8)) / (float_64)$13)
	$23 = CALL $21(($5 + [368]), ($5 + [64]))
	if ( ((int_64)$11 != (int_64)$6) ){ goto $label$43 }
	$8 = *($0)
	*($5 + [80]) = [8876]
	*($5 + [84]) = CALL $78([8876])
	*($5 + [56]) = *($5 + [80])
	$1 = *(CALL $21(($5 + [312]), ($5 + [56])))
	$17 = *($5 + [392])
	*($5 + [80]) = [8883]
	*($5 + [84]) = CALL $78([8883])
	*($5 + [48]) = *($5 + [80])
	$4 = *(CALL $21(($5 + [312]), ($5 + [48])))
	*(($5 + [576])) = [0]
	*($5 + [568]) = (int_64)0
	$10 = CALL $78([8890])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$42 }
	*($5 + [568]) = ($10 << [1])
	$7 = (($5 + [568]) | [1])
	if ( $10 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$24 = ((float_64)$25 + (float_64)$26)
	if ( ((int_64)$15 != (int_64)$19) ){ goto $label$44 }
	if ( ((int_64)$9 == (int_64)$6) ){ goto $label$44 }
	$17 = (int_64)0
	if ( ((int_64)*($5 + [448]) != (int_64)0) ){ goto $label$44 }
	$29 = ((float_64)((float_64)$25 / (float_64)$24) * (float_64)$28)
	$24 = (float_64)0
	$10 = [1]
	if ( ((int_64)$9 == (int_64)$6) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$44
	$24 = ((float_64)$13 * (float_64)(float_64))((float_64)1 - CALL $73(((float_64)((float_64)$25 / (float_64)$24) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(int_64 $15) / (float_64)(float_64)1e3)))
	$13 = (float_64))($13 - $24))
	$24 = !(float_64)$24
	$29 = (float_64)0
	$10 = [0]
	$8 = *(($5 + [448]))
	if ( (int_64)($8 == 0) ){ goto $label$39 }
	$31 = ((float_64)((float_64)(CASTING float_64)(uint_64 $8) / (float_64)(float_64)1e3) * (float_64)$24)
	$30 = ((float_64)$31 * (float_64)CALL $73((float_64)10, $30))
	if ( ((float_64)(float_64)|$30| < (float_64)(float_64)9223372036854775808) ){ goto $label$38 }
	$8 = (int_64)-9223372036854775808
	goto $label$37 
	
.LABEL $label$42
	$12 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [568]) = ($12 | [1])
	*($5 + [576]) = $7
	*($5 + [572]) = $10
	
.LABEL $label$41
	CALL memcpy($7, [8890], $10)
	
.LABEL $label$40
	*(($7 + $10)) = [0]
	*(($7 = (($5 + [312]) + [24]))) = [0]
	*((($5 + [80]) + [8])) = *(($2 + [8]))
	$10 = (($5 + [568]) + [8])
	*((($5 + [80]) + [24])) = *($10)
	*($10) = [0]
	*($5 + [312]) = $17
	*($5 + [320]) = $4
	*($5 + [328]) = (int_64)0
	*($5 + [80]) = *($2)
	*($5 + [96]) = *($5 + [568])
	*($5 + [568]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $8
	*($10 + [8]) = $1
	*(($5 + [348])) = [0]
	$12 = ($10 + [16])
	*($7) = $12
	*((($5 + [312]) + [20])) = $12
	*($5 + [328]) = $10
	*($5 + [340 align=4]) = (int_64)0
	$10 = *($5 + [96])
	$7 = ( *((($5 + [80]) + [20])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$12 = (($5 + [80]) + [16])
	$7 = ($5 + [340])
	
.LOOP $label$45:
	$10 = ($10 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$45 }
	if ( ($10 == 0) ){ goto $label$47 }
	CALL $24($7, $10)
	$7 = *(($5 + [344]))
	$10 = *(($5 + [340]))
	goto $label$46 
	
.LABEL $label$47
	$7 = [0]
	$10 = [0]
	
.LABEL $label$46
	*($5 + [132]) = $10
	*($5 + [128]) = $10
	*($5 + [136]) = $7
	CALL eosio_assert(((int_32)($7 - $10) > (int_32)[7]), [17885])
	CALL memcpy(*($5 + [132]), ($5 + [80]), [8])
	$10 = (*($5 + [132]) + [8])
	*($5 + [132]) = $10
	*($5 + [248]) = *($5 + [88])
	CALL eosio_assert(((int_32)(*($5 + [136]) - $10) > (int_32)[7]), [17885])
	CALL memcpy(*($5 + [132]), ($5 + [248]), [8])
	*($5 + [132]) = (*($5 + [132]) + [8])
	CALL $25(($5 + [128]), $12)
	CALL $26(($5 + [128]), ($5 + [312]))
	$10 = *($5 + [128])
	CALL send_inline($10, (*($5 + [132]) - $10))
	$10 = *($5 + [128])
	if ( ($10 == 0) ){ goto $label$48 }
	*($5 + [132]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$48
	$10 = *($5 + [340])
	if ( ($10 == 0) ){ goto $label$49 }
	*(($5 + [344])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$49
	$10 = *($5 + [328])
	if ( ($10 == 0) ){ goto $label$50 }
	*(($5 + [332])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$50
	if ( ((*(($5 + [96])) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$51
	if ( ((*($5 + [568]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($5 + [576])))
	
.LABEL $label$52
	$13 = (float_64))($13 - $25)
	$29 = (float_64)0
	$17 = (int_64)0
	$10 = [0]
	$24 = $25
	if ( ((int_64)$9 != (int_64)$6) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$39
	$17 = (int_64)0
	if ( ((int_64)$9 != (int_64)$6) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$38
	$8 = (Rounds 0)($30)
	
.LABEL $label$37
	$7 = ((int_64)$8 > (int_64)0)
	$17 = ( $8 ? (int_64)0 : $7 )
	$24 = ( (float_64))($24 - $31) ? $24 : $7 )
	if ( ((int_64)$9 != (int_64)$6) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	CALL $61(($5 + [568]))
	
.LABEL $label$35
	CALL eosio_assert(((int_32)(*($5 + [516]) - *($5 + [512])) == (int_32)[24]), [8912])
	$2 = [1]
	goto $label$33 
	
.LABEL $label$34
	$2 = [0]
	if ( ($10 == 0) ){ goto $label$53 }
	$24 = $29
	goto $label$33 
	
.LABEL $label$53
	$8 = *($5 + [448])
	if ( (int_64)($8 == 0) ){ goto $label$54 }
	$29 = ((float_64)$24 * (float_64)((float_64)(CASTING float_64)(uint_64 $8) / (float_64)(float_64)1e3))
	$30 = ((float_64)$29 * (float_64)CALL $73((float_64)10, (CASTING float_64)(uint_32 *(($5 + [408])))))
	if ( ((float_64)(float_64)|$30| < (float_64)(float_64)9223372036854775808) ){ goto $label$56 }
	$8 = (int_64)-9223372036854775808
	goto $label$55 
	
.LABEL $label$56
	$8 = (Rounds 0)($30)
	
.LABEL $label$55
	$10 = ((int_64)$8 > (int_64)0)
	$17 = ((int_64)( $8 ? (int_64)0 : $10 ) + (int_64)$17)
	$24 = ( (float_64))($24 - $29) ? $24 : $10 )
	
.LABEL $label$54
	$24 = ((float_64)$28 * (float_64)((float_64)CALL $73(((float_64)((float_64)$24 / (float_64)(float_64))($13 - $24)) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)(CASTING float_64)(int_64 $19))) + (float_64)(float_64)-1))
	
.LABEL $label$33
	$29 = CALL $73((float_64)10, $27)
	CALL prints([8536])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8538])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8546])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8550])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8947])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8958])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	$10 = *($3)
	$7 = ($10 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $7 ), ( *($3 + [4]) ? uint_32($10 >> [1]) : $7 ))
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8963])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printn($18)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8977])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	$24 = ((float_64)$24 * (float_64)$29)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$59 }
	$1 = (int_64)-9223372036854775808
	$12 = (int_64)($11 == 0)
	if ( ($12 == 0) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$1 = (Rounds 0)($24)
	$12 = (int_64)($11 == 0)
	if ( $12 ){ goto $label$57 }
	
.LABEL $label$58
	$10 = [0]
	$8 = $11
	
.LOOP $label$61:
	*((($5 + [312]) + $10)) = $8
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[5]) ){ goto $label$60 }
	$10 = $7
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$61 }
	
.LABEL $label$60
	CALL prints_l(($5 + [312]), $7)
	
.LABEL $label$57
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8989])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printn($21)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([9001])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	$14 = (int_64)($9 == 0)
	if ( $14 ){ goto $label$62 }
	$10 = [0]
	$8 = $9
	
.LOOP $label$64:
	*((($5 + [312]) + $10)) = $8
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[5]) ){ goto $label$63 }
	$10 = $7
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$64 }
	
.LABEL $label$63
	CALL prints_l(($5 + [312]), $7)
	
.LABEL $label$62
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([9011])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printdf($25)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([9018])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printi($1)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([9025])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printi($17)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8642])
	$3 = ((int_64)$11 == (int_64)$6)
	if ( $3 ){ goto $label$66 }
	if ( ((int_64)$9 == (int_64)$6) ){ goto $label$65 }
	
.LABEL $label$66
	CALL prints([8536])
	
.LABEL $label$65
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8538])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8546])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8550])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8556])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8567])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printdf($13)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8580])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printn($21)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8597])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	if ( $14 ){ goto $label$67 }
	$10 = [0]
	$8 = $9
	
.LOOP $label$69:
	*((($5 + [312]) + $10)) = $8
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[5]) ){ goto $label$68 }
	$10 = $7
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$69 }
	
.LABEL $label$68
	CALL prints_l(($5 + [312]), $7)
	
.LABEL $label$67
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8612])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printdf((float_64))($28 - (CASTING float_64)(int_64 $1)))
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8628])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printui($19)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8642])
	if ( ((int_64)$9 == (int_64)$6) ){ goto $label$71 }
	if ( $3 ){ goto $label$70 }
	
.LABEL $label$71
	CALL prints([8536])
	
.LABEL $label$70
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8538])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8546])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8550])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8556])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8567])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printdf($13)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8580])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printn($18)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8597])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	if ( $12 ){ goto $label$72 }
	$10 = [0]
	
.LOOP $label$74:
	*((($5 + [312]) + $10)) = $11
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[5]) ){ goto $label$73 }
	$10 = $7
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$74 }
	
.LABEL $label$73
	CALL prints_l(($5 + [312]), $7)
	
.LABEL $label$72
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8612])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printdf($26)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8281])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8628])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [58]
	CALL prints_l(($5 + [312]), [1])
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL printui($15)
	*($5 + [312]) = [34]
	CALL prints_l(($5 + [312]), [1])
	CALL prints([8642])
	*($5 + [272]) = [0]
	*($5 + [264]) = (int_64)0
	$10 = (*($5 + [516]) - *($5 + [512]))
	$12 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$81 }
	if ( ((uint_32)$12 >= (uint_32)[357913942]) ){ goto $label$80 }
	$7 = CALL _Znwj($10)
	*(($5 + [272])) = ($7 + ((int_32)$12 * (int_32)[12]))
	*($5 + [264]) = $7
	*($5 + [268]) = $7
	$12 = *($5 + [516])
	$10 = *($5 + [512])
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$81 }
	
.LOOP $label$82:
	CALL $62($7, $10)
	$7 = (*($5 + [268]) + [12])
	*($5 + [268]) = $7
	$10 = ($10 + [12])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$82 }
	
.LABEL $label$81
	$10 = CALL $62((($5 + [264]) + [12]), (($5 + [512]) + [12]))
	$7 = CALL $62(($5 + [288]), ($5 + [536]))
	$14 = (($5 + [512]) + [36])
	$12 = CALL $62((($5 + [264]) + [36]), $14)
	CALL $6(($5 + [312]), ($5 + [264]))
	if ( (*($12) & [1]) ){ goto $label$84 }
	if ( (*($7) & [1]) ){ goto $label$83 }
	goto $label$79 
	
.LABEL $label$84
	CALL _ZdlPv(*(($5 + [308])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$79 }
	
.LABEL $label$83
	CALL _ZdlPv(*(($5 + [296])))
	if ( ((*($10) & [1]) == 0) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	CALL $70(($5 + [264]))
	
.LABEL $label$79
	if ( (*($10) & [1]) ){ goto $label$77 }
	
.LABEL $label$78
	$12 = *($5 + [264])
	if ( ($12 == 0) ){ goto $label$75 }
	goto $label$76 
	
.LABEL $label$77
	CALL _ZdlPv(*(($5 + [284])))
	$12 = *($5 + [264])
	if ( ($12 == 0) ){ goto $label$75 }
	
.LABEL $label$76
	$7 = *($5 + [268])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$86 }
	
.LOOP $label$87:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$88
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$87 }
	$10 = *($5 + [264])
	goto $label$85 
	
.LABEL $label$86
	$10 = $12
	
.LABEL $label$85
	*($5 + [268]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$75
	*($5 + [208]) = [0]
	*($5 + [200]) = (int_64)0
	$10 = (*($5 + [316]) - *($5 + [312]))
	$12 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$95 }
	if ( ((uint_32)$12 >= (uint_32)[357913942]) ){ goto $label$94 }
	$7 = CALL _Znwj($10)
	*(($5 + [208])) = ($7 + ((int_32)$12 * (int_32)[12]))
	*($5 + [200]) = $7
	*($5 + [204]) = $7
	$12 = *($5 + [316])
	$10 = *($5 + [312])
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$95 }
	
.LOOP $label$96:
	CALL $62($7, $10)
	$7 = (*($5 + [204]) + [12])
	*($5 + [204]) = $7
	$10 = ($10 + [12])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$96 }
	
.LABEL $label$95
	$10 = CALL $62((($5 + [200]) + [12]), (($5 + [312]) + [12]))
	$7 = CALL $62((($5 + [200]) + [24]), (($5 + [312]) + [24]))
	$12 = CALL $62((($5 + [200]) + [36]), (($5 + [312]) + [36]))
	CALL $3(($5 + [248]), ($5 + [200]))
	if ( (*($12) & [1]) ){ goto $label$98 }
	if ( (*($7) & [1]) ){ goto $label$97 }
	goto $label$93 
	
.LABEL $label$98
	CALL _ZdlPv(*(($5 + [244])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$93 }
	
.LABEL $label$97
	CALL _ZdlPv(*(($5 + [232])))
	if ( ((*($10) & [1]) == 0) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	CALL $70(($5 + [200]))
	
.LABEL $label$93
	if ( (*($10) & [1]) ){ goto $label$91 }
	
.LABEL $label$92
	$12 = *($5 + [200])
	if ( ($12 == 0) ){ goto $label$89 }
	goto $label$90 
	
.LABEL $label$91
	CALL _ZdlPv(*(($5 + [220])))
	$12 = *($5 + [200])
	if ( ($12 == 0) ){ goto $label$89 }
	
.LABEL $label$90
	$7 = *($5 + [204])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$100 }
	
.LOOP $label$101:
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$102 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$102
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$101 }
	$10 = *($5 + [200])
	goto $label$99 
	
.LABEL $label$100
	$10 = $12
	
.LABEL $label$99
	*($5 + [204]) = $12
	CALL _ZdlPv($10)
	
.LABEL $label$89
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17891])
	$10 = [0]
	
.LOOP $label$105:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$106 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$106
	$9 = $11
	
.LOOP $label$107:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$104 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$107 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$104
	$7 = [0]
	
.LABEL $label$103
	CALL eosio_assert($7, [17940])
	if ( ((int_32)*($5 + [316]) != (int_32)*($5 + [312])) ){ goto $label$112 }
	$9 = *($23)
	$14 = CALL $62(($5 + [184]), $14)
	$10 = ( *($14 + [8]) ? ($14 + [1]) : (*($14) & [1]) )
	$7 = ((int_32)*($10) == (int_32)[45])
	$32 = ( (float_32)-1 ? (float_32)1 : $7 )
	$12 = [0]
	$33 = (float_32)0
	$7 = ( ($10 + [1]) ? $10 : $7 )
	$10 = *($7)
	if ( ((int_32)$10 != (int_32)[46]) ){ goto $label$110 }
	goto $label$111 
	
.LABEL $label$112
	$9 = *(($5 + [424]))
	if ( ($2 == 0) ){ goto $label$109 }
	$34 = [73]
	goto $label$108 
	
.LABEL $label$111
	$34 = [3]
	goto $label$108 
	
.LABEL $label$110
	$34 = [0]
	goto $label$108 
	
.LABEL $label$109
	$34 = [18]
	
.LABEL $label$108
	
.LOOP $label$113:
	goto $label$252 
	
.LABEL $label$256
	if ( ((uint_32)(($10 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$163 }
	$34 = [4]
	goto $label$113 
	
.LABEL $label$255
	$33 = ((float_32)((float_32)$33 * (float_32)(float_32)10) + (float_32)(CASTING float_32)(int_32 (int_32(($10 << [24]) >> [24]) + [-48])))
	$32 = ( ((float_32)$32 / (float_32)(float_32)10) ? $32 : $12 )
	$34 = [2]
	goto $label$113 
	
.LABEL $label$254
	$7 = ($7 + [1])
	$10 = *($7)
	if ( ((int_32)$10 != (int_32)[46]) ){ goto $label$164 }
	$34 = [3]
	goto $label$113 
	
.LABEL $label$253
	$12 = [1]
	$7 = ($7 + [1])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)[46]) ){ goto $label$165 }
	$34 = [0]
	goto $label$113 
	
.LABEL $label$252
	if ( $10 ){ goto $label$166 }
	$34 = [5]
	goto $label$113 
	
.LABEL $label$251
	$13 = ((float_64)CALL $73((float_64)10, $27) * (float_64)(PROMOTE float_64)(float_32 ((float_32)$33 * (float_32)$32)))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$162 }
	$34 = [89]
	goto $label$113 
	
.LABEL $label$250
	$11 = (int_64)-9223372036854775808
	goto $label$161 
	
.LABEL $label$249
	$11 = *($0)
	*($5 + [128]) = [8876]
	*($5 + [132]) = CALL $78([8876])
	*($5 + [8]) = *($5 + [128])
	$8 = *(CALL $21(($5 + [80]), ($5 + [8])))
	*($5 + [128]) = [9048]
	*($5 + [132]) = CALL $78([9048])
	*($5) = *($5 + [128])
	$6 = *(CALL $21(($5 + [80]), $5))
	*((($5 + [128]) + [16])) = $22
	*($5 + [136]) = $1
	*($5 + [128]) = $9
	$7 = CALL $62((($5 + [128]) + [24]), ($5 + [248]))
	*(($12 = (($5 + [80]) + [24]))) = [0]
	*($5 + [88]) = $6
	*($5 + [80]) = $21
	*($5 + [96]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $11
	*($10 + [8]) = $8
	*(($5 + [116])) = [0]
	$14 = ($10 + [16])
	*($12) = $14
	*(($5 + [100])) = $14
	*($5 + [96]) = $10
	*($5 + [108 align=4]) = (int_64)0
	$10 = *($7)
	$12 = ( *((($5 + [128]) + [28])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [24])
	$9 = (CASTING uint_64)(uint_32 $12)
	$12 = (($5 + [80]) + [28])
	$34 = [74]
	goto $label$113 
	
.LABEL $label$248
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$119 }
	$34 = [75]
	goto $label$113 
	
.LABEL $label$247
	if ( ($10 == 0) ){ goto $label$118 }
	$34 = [76]
	goto $label$113 
	
.LABEL $label$246
	CALL $24($12, $10)
	$12 = *(($5 + [112]))
	$10 = *(($5 + [108]))
	goto $label$117 
	
.LABEL $label$245
	$11 = (Rounds 0)($13)
	$34 = [7]
	goto $label$113 
	
.LABEL $label$244
	CALL eosio_assert(((int_64)$1 >= (int_64)$11), [17607])
	if ( ((*($14) & [1]) == 0) ){ goto $label$160 }
	$34 = [8]
	goto $label$113 
	
.LABEL $label$243
	CALL _ZdlPv(*(($14 + [8])))
	$34 = [9]
	goto $label$113 
	
.LABEL $label$242
	if ( (*($5 + [432]) == 0) ){ goto $label$159 }
	$34 = [10]
	goto $label$113 
	
.LABEL $label$241
	*(($5 + [40])) = $22
	*($5 + [176]) = $22
	*($5 + [32]) = $1
	*($5 + [168]) = $1
	CALL $27($5, $9, $21, ($5 + [32]))
	$34 = [11]
	goto $label$113 
	
.LABEL $label$240
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$10 = CALL $78([9040])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$158 }
	$34 = [12]
	goto $label$113 
	
.LABEL $label$239
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$157 }
	$34 = [87]
	goto $label$113 
	
.LABEL $label$238
	*($5 + [80]) = ($10 << [1])
	$7 = (($5 + [80]) | [1])
	if ( $10 ){ goto $label$155 }
	goto $label$156 
	
.LABEL $label$237
	$12 = (($10 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [80]) = ($12 | [1])
	*($5 + [88]) = $7
	*($5 + [84]) = $10
	$34 = [14]
	goto $label$113 
	
.LABEL $label$236
	CALL memcpy($7, [9040], $10)
	$34 = [15]
	goto $label$113 
	
.LABEL $label$235
	*(($7 + $10)) = [0]
	if ( (*($5 + [248]) & [1]) ){ goto $label$154 }
	$34 = [86]
	goto $label$113 
	
.LABEL $label$234
	*($5 + [248]) = [0]
	goto $label$153 
	
.LABEL $label$233
	*(*($5 + [256])) = [0]
	*($5 + [252]) = [0]
	$34 = [17]
	goto $label$113 
	
.LABEL $label$232
	CALL $66(($5 + [248]), [0])
	*((($5 + [248]) + [8])) = *((($5 + [80]) + [8]))
	*($5 + [248]) = *($5 + [80])
	if ( $2 ){ goto $label$152 }
	$34 = [18]
	goto $label$113 
	
.LABEL $label$231
	$11 = *($0)
	*($5 + [128]) = [8876]
	*($5 + [132]) = CALL $78([8876])
	*($5 + [24]) = *($5 + [128])
	$8 = *(CALL $21(($5 + [80]), ($5 + [24])))
	*($5 + [128]) = [9054]
	*($5 + [132]) = CALL $78([9054])
	*($5 + [16]) = *($5 + [128])
	$6 = *(CALL $21(($5 + [80]), ($5 + [16])))
	*((($5 + [80]) + [24])) = $22
	*($5 + [88]) = $9
	*($5 + [96]) = $1
	*($5 + [80]) = *($0)
	$7 = CALL $62((($5 + [80]) + [32]), ($5 + [248]))
	*(($12 = (($5 + [128]) + [24]))) = [0]
	*($5 + [136]) = $6
	*($5 + [128]) = $21
	*($5 + [144]) = (int_64)0
	*(($10 = CALL _Znwj([16]))) = $11
	*($10 + [8]) = $8
	*((($5 + [128]) + [36])) = [0]
	$14 = ($10 + [16])
	*($12) = $14
	*(($5 + [148])) = $14
	*($5 + [144]) = $10
	*($5 + [156 align=4]) = (int_64)0
	$10 = *($7)
	$7 = ( *((($5 + [80]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [32])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = ($5 + [156])
	$34 = [19]
	goto $label$113 
	
.LABEL $label$230
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$151 }
	$34 = [20]
	goto $label$113 
	
.LABEL $label$229
	if ( ($10 == 0) ){ goto $label$150 }
	$34 = [21]
	goto $label$113 
	
.LABEL $label$228
	CALL $24($7, $10)
	$7 = *(($5 + [160]))
	$10 = *(($5 + [156]))
	goto $label$149 
	
.LABEL $label$227
	$12 = [0]
	$10 = [0]
	$34 = [77]
	goto $label$113 
	
.LABEL $label$226
	*($5 + [572]) = $10
	*($5 + [568]) = $10
	*($5 + [576]) = $12
	CALL eosio_assert(((int_32)($12 - $10) > (int_32)[7]), [17885])
	CALL memcpy(*($5 + [572]), ($5 + [128]), [8])
	$10 = (*($5 + [572]) + [8])
	*($5 + [572]) = $10
	CALL eosio_assert(((int_32)(*($5 + [576]) - $10) > (int_32)[7]), [17885])
	CALL memcpy(*($5 + [572]), (($5 + [128]) + [8]), [8])
	$10 = (*($5 + [572]) + [8])
	*($5 + [572]) = $10
	*($5 + [584]) = *(($5 + [144]))
	CALL eosio_assert(((int_32)(*($5 + [576]) - $10) > (int_32)[7]), [17885])
	CALL memcpy(*($5 + [572]), ($5 + [584]), [8])
	*($5 + [572]) = (*($5 + [572]) + [8])
	CALL $25(($5 + [568]), $7)
	CALL $26(($5 + [568]), ($5 + [80]))
	$10 = *($5 + [568])
	CALL send_inline($10, (*($5 + [572]) - $10))
	$10 = *($5 + [568])
	if ( ($10 == 0) ){ goto $label$116 }
	$34 = [78]
	goto $label$113 
	
.LABEL $label$225
	*($5 + [572]) = $10
	CALL _ZdlPv($10)
	$34 = [79]
	goto $label$113 
	
.LABEL $label$224
	$10 = *($5 + [108])
	if ( ($10 == 0) ){ goto $label$115 }
	$34 = [80]
	goto $label$113 
	
.LABEL $label$223
	*(($5 + [112])) = $10
	CALL _ZdlPv($10)
	$34 = [81]
	goto $label$113 
	
.LABEL $label$222
	$10 = *($5 + [96])
	if ( ($10 == 0) ){ goto $label$114 }
	$34 = [82]
	goto $label$113 
	
.LABEL $label$221
	*(($5 + [100])) = $10
	CALL _ZdlPv($10)
	$34 = [83]
	goto $label$113 
	
.LABEL $label$220
	if ( ((*($5 + [152]) & [1]) == 0) ){ goto $label$144 }
	$34 = [84]
	goto $label$113 
	
.LABEL $label$219
	CALL _ZdlPv(*(($5 + [160])))
	$10 = [1]
	if ( (*($5 + [248]) & [1]) ){ goto $label$141 }
	goto $label$142 
	
.LABEL $label$218
	$7 = [0]
	$10 = [0]
	$34 = [22]
	goto $label$113 
	
.LABEL $label$217
	*($5 + [572]) = $10
	*($5 + [568]) = $10
	*($5 + [576]) = $7
	*($5 + [560]) = ($5 + [568])
	*($5 + [584]) = ($5 + [80])
	CALL $28(($5 + [584]), ($5 + [560]))
	CALL $26(($5 + [568]), ($5 + [128]))
	$10 = *($5 + [568])
	CALL send_inline($10, (*($5 + [572]) - $10))
	$10 = *($5 + [568])
	if ( ($10 == 0) ){ goto $label$148 }
	$34 = [23]
	goto $label$113 
	
.LABEL $label$216
	*($5 + [572]) = $10
	CALL _ZdlPv($10)
	$34 = [24]
	goto $label$113 
	
.LABEL $label$215
	$10 = *($5 + [156])
	if ( ($10 == 0) ){ goto $label$147 }
	$34 = [25]
	goto $label$113 
	
.LABEL $label$214
	*(($5 + [160])) = $10
	CALL _ZdlPv($10)
	$34 = [26]
	goto $label$113 
	
.LABEL $label$213
	$10 = *($5 + [144])
	if ( ($10 == 0) ){ goto $label$146 }
	$34 = [27]
	goto $label$113 
	
.LABEL $label$212
	*(($5 + [148])) = $10
	CALL _ZdlPv($10)
	$34 = [28]
	goto $label$113 
	
.LABEL $label$211
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$145 }
	$34 = [29]
	goto $label$113 
	
.LABEL $label$210
	CALL _ZdlPv(*(($5 + [120])))
	$34 = [30]
	goto $label$113 
	
.LABEL $label$209
	$10 = [1]
	if ( ((*($5 + [248]) & [1]) == 0) ){ goto $label$143 }
	$34 = [31]
	goto $label$113 
	
.LABEL $label$208
	CALL _ZdlPv(*($5 + [256]))
	$34 = [32]
	goto $label$113 
	
.LABEL $label$207
	if ( ((*(($5 + [348])) & $10) == 0) ){ goto $label$140 }
	$34 = [33]
	goto $label$113 
	
.LABEL $label$206
	CALL _ZdlPv(*(($5 + [356])))
	$34 = [34]
	goto $label$113 
	
.LABEL $label$205
	if ( ((*(($5 + [336])) & [1]) == 0) ){ goto $label$139 }
	$34 = [35]
	goto $label$113 
	
.LABEL $label$204
	CALL _ZdlPv(*(($5 + [344])))
	$34 = [36]
	goto $label$113 
	
.LABEL $label$203
	if ( ((*(($5 + [324])) & [1]) == 0) ){ goto $label$138 }
	$34 = [37]
	goto $label$113 
	
.LABEL $label$202
	CALL _ZdlPv(*(($5 + [332])))
	$34 = [38]
	goto $label$113 
	
.LABEL $label$201
	$12 = *($5 + [312])
	if ( ($12 == 0) ){ goto $label$137 }
	$34 = [39]
	goto $label$113 
	
.LABEL $label$200
	$7 = *($5 + [316])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$136 }
	$34 = [40]
	goto $label$113 
	
.LABEL $label$199
	$34 = [41]
	goto $label$113 
	
.LABEL $label$198
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$134 }
	$34 = [42]
	goto $label$113 
	
.LABEL $label$197
	CALL _ZdlPv(*(($7 + [-4])))
	$34 = [43]
	goto $label$113 
	
.LABEL $label$196
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$135 }
	$34 = [44]
	goto $label$113 
	
.LABEL $label$195
	$10 = *($5 + [312])
	goto $label$133 
	
.LABEL $label$194
	$10 = $12
	$34 = [45]
	goto $label$113 
	
.LABEL $label$193
	*($5 + [316]) = $12
	CALL _ZdlPv($10)
	$34 = [46]
	goto $label$113 
	
.LABEL $label$192
	$12 = *($5 + [480])
	if ( ($12 == 0) ){ goto $label$132 }
	$34 = [47]
	goto $label$113 
	
.LABEL $label$191
	$14 = ($5 + [484])
	$10 = *($14)
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$131 }
	$34 = [48]
	goto $label$113 
	
.LABEL $label$190
	$34 = [49]
	goto $label$113 
	
.LABEL $label$189
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$129 }
	$34 = [50]
	goto $label$113 
	
.LABEL $label$188
	CALL _ZdlPv($7)
	$34 = [51]
	goto $label$113 
	
.LABEL $label$187
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$130 }
	$34 = [52]
	goto $label$113 
	
.LABEL $label$186
	$10 = *(($5 + [480]))
	goto $label$128 
	
.LABEL $label$185
	$10 = $12
	$34 = [53]
	goto $label$113 
	
.LABEL $label$184
	*($14) = $12
	CALL _ZdlPv($10)
	$34 = [54]
	goto $label$113 
	
.LABEL $label$183
	if ( ((*(($5 + [548])) & [1]) == 0) ){ goto $label$127 }
	$34 = [55]
	goto $label$113 
	
.LABEL $label$182
	CALL _ZdlPv(*(($5 + [556])))
	$34 = [56]
	goto $label$113 
	
.LABEL $label$181
	if ( ((*(($5 + [536])) & [1]) == 0) ){ goto $label$126 }
	$34 = [57]
	goto $label$113 
	
.LABEL $label$180
	CALL _ZdlPv(*(($5 + [544])))
	$34 = [58]
	goto $label$113 
	
.LABEL $label$179
	if ( ((*(($5 + [524])) & [1]) == 0) ){ goto $label$125 }
	$34 = [59]
	goto $label$113 
	
.LABEL $label$178
	CALL _ZdlPv(*(($5 + [532])))
	$34 = [60]
	goto $label$113 
	
.LABEL $label$177
	$12 = *($5 + [512])
	if ( ($12 == 0) ){ goto $label$124 }
	$34 = [61]
	goto $label$113 
	
.LABEL $label$176
	$7 = *($5 + [516])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$123 }
	$34 = [62]
	goto $label$113 
	
.LABEL $label$175
	$34 = [63]
	goto $label$113 
	
.LABEL $label$174
	$10 = ($7 + [-12])
	if ( ((*($10) & [1]) == 0) ){ goto $label$121 }
	$34 = [64]
	goto $label$113 
	
.LABEL $label$173
	CALL _ZdlPv(*(($7 + [-4])))
	$34 = [65]
	goto $label$113 
	
.LABEL $label$172
	$7 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$122 }
	$34 = [66]
	goto $label$113 
	
.LABEL $label$171
	$10 = *($5 + [512])
	goto $label$120 
	
.LABEL $label$170
	$10 = $12
	$34 = [67]
	goto $label$113 
	
.LABEL $label$169
	*($5 + [516]) = $12
	CALL _ZdlPv($10)
	$34 = [68]
	goto $label$113 
	
.LABEL $label$168
	$global$0 = ($5 + [592])
	return (unreachable)
	
.LABEL $label$167
	CALL $61(($5 + [80]))
	
.LABEL $label$166
	$34 = [1]
	goto $label$113 
	
.LABEL $label$165
	$34 = [3]
	goto $label$113 
	
.LABEL $label$164
	$34 = [0]
	goto $label$113 
	
.LABEL $label$163
	$34 = [2]
	goto $label$113 
	
.LABEL $label$162
	$34 = [6]
	goto $label$113 
	
.LABEL $label$161
	$34 = [7]
	goto $label$113 
	
.LABEL $label$160
	$34 = [9]
	goto $label$113 
	
.LABEL $label$159
	$34 = [11]
	goto $label$113 
	
.LABEL $label$158
	$34 = [88]
	goto $label$113 
	
.LABEL $label$157
	$34 = [13]
	goto $label$113 
	
.LABEL $label$156
	$34 = [15]
	goto $label$113 
	
.LABEL $label$155
	$34 = [14]
	goto $label$113 
	
.LABEL $label$154
	$34 = [16]
	goto $label$113 
	
.LABEL $label$153
	$34 = [17]
	goto $label$113 
	
.LABEL $label$152
	$34 = [73]
	goto $label$113 
	
.LABEL $label$151
	$34 = [19]
	goto $label$113 
	
.LABEL $label$150
	$34 = [72]
	goto $label$113 
	
.LABEL $label$149
	$34 = [22]
	goto $label$113 
	
.LABEL $label$148
	$34 = [24]
	goto $label$113 
	
.LABEL $label$147
	$34 = [26]
	goto $label$113 
	
.LABEL $label$146
	$34 = [28]
	goto $label$113 
	
.LABEL $label$145
	$34 = [30]
	goto $label$113 
	
.LABEL $label$144
	$34 = [30]
	goto $label$113 
	
.LABEL $label$143
	$34 = [32]
	goto $label$113 
	
.LABEL $label$142
	$34 = [32]
	goto $label$113 
	
.LABEL $label$141
	$34 = [31]
	goto $label$113 
	
.LABEL $label$140
	$34 = [34]
	goto $label$113 
	
.LABEL $label$139
	$34 = [36]
	goto $label$113 
	
.LABEL $label$138
	$34 = [38]
	goto $label$113 
	
.LABEL $label$137
	$34 = [46]
	goto $label$113 
	
.LABEL $label$136
	$34 = [71]
	goto $label$113 
	
.LABEL $label$135
	$34 = [41]
	goto $label$113 
	
.LABEL $label$134
	$34 = [43]
	goto $label$113 
	
.LABEL $label$133
	$34 = [45]
	goto $label$113 
	
.LABEL $label$132
	$34 = [54]
	goto $label$113 
	
.LABEL $label$131
	$34 = [70]
	goto $label$113 
	
.LABEL $label$130
	$34 = [49]
	goto $label$113 
	
.LABEL $label$129
	$34 = [51]
	goto $label$113 
	
.LABEL $label$128
	$34 = [53]
	goto $label$113 
	
.LABEL $label$127
	$34 = [56]
	goto $label$113 
	
.LABEL $label$126
	$34 = [58]
	goto $label$113 
	
.LABEL $label$125
	$34 = [60]
	goto $label$113 
	
.LABEL $label$124
	$34 = [68]
	goto $label$113 
	
.LABEL $label$123
	$34 = [69]
	goto $label$113 
	
.LABEL $label$122
	$34 = [63]
	goto $label$113 
	
.LABEL $label$121
	$34 = [65]
	goto $label$113 
	
.LABEL $label$120
	$34 = [67]
	goto $label$113 
	
.LABEL $label$119
	$34 = [74]
	goto $label$113 
	
.LABEL $label$118
	$34 = [85]
	goto $label$113 
	
.LABEL $label$117
	$34 = [77]
	goto $label$113 
	
.LABEL $label$116
	$34 = [79]
	goto $label$113 
	
.LABEL $label$115
	$34 = [81]
	goto $label$113 
	
.LABEL $label$114
	$34 = [83]
	goto $label$113 
	(unreachable)
	(unreachable)
	(unreachable)
	$34
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17960])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $19($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17960])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( ((int_64)(uint_64)*(($2 + [16])) >> (uint_64)(int_64)8) != (int_64)$1) ){ goto $label$3 }
	$0 = ($2 + [8])
	if ( (*([0] + [9104]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)-4994302950881886208, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14(($3 + [8]), $2)
	CALL eosio_assert(((int_32)*($5 + [36]) == (int_32)($3 + [8])), [17960])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17524])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($3 + [36])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$2
	*([0] + [9072]) = (int_64)0
	*([0] + [9064]) = (int_64)0
	*([0] + [9080]) = (int_64)0
	*([0] + [9104]) = [1]
	
.LABEL $label$1
	*([0] + [9088]) = (int_64)0
	$1 = *($2)
	*([0] + [9080]) = *(($0 + [8]))
	*([0] + [9072]) = *($0)
	*([0] + [9064]) = $1
	*([0] + [9096]) = *($2 + [24])
	$global$0 = ($3 + [48])
	return [9064]
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17885])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17885])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $70($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($3 + [8])
	*($4 + [16]) = $1
	*($4 + [8]) = $2
	$3 = CALL db_find_i64($2, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$3) < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $19(($4 + [8]), $3) + [16]) == (int_32)($4 + [8])), [17960])
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [17561])
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17885])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17885])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $42(CALL $41($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_64 .FUNC $74 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $70($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $77(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $65($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $81($1)
	
.LABEL $label$2
	*(CALL $71()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $81(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $84($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy($2, *($0 + [4]), [8])
	*(($1 + [16])) = *($2)
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18034])
	CALL memcpy(($2 + [13]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [24]) = ((int_32)*($2 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18034])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [25]) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [18034])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [40]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17885])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17885])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17885])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17885])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17885])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [32]) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $70($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), $2, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [13]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17885])
	CALL memcpy(*($0 + [4]), ($2 + [13]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($2 + [14]) = *($1 + [25])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17885])
	CALL memcpy(*($0 + [4]), ($2 + [14]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [40])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17885])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17885])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $70($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $72 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $83($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8195])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18336])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18034])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9120]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9124])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9120]) = [1]
	$2 = ($2 << [16])
	*([0] + [9124]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9124])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9124]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9120]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9120]) = [1]
	$3 = ($3 << [16])
	*([0] + [9124]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9124])
	
.LABEL $label$10
	*([0] + [9124]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17512])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17320]
	$3 = (((int_32)$1 * (int_32)[12]) + [17320])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $70 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0)
{
	return CALL $82([9128], $0)
}

int_64 .FUNC $75 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $71 ()
{
	return [9112]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18011])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $81($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	CALL $43(($3 + [32]), $5)
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4417020450001911808
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4417020450001911808
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [17960])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $8($0, $4)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$0), [17960])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18039])
	CALL $10($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $11($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = (*($1 + [4]) - *($1))
	$5 = ((int_32)$4 / (int_32)[12])
	$6 = [0]
	$7 = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$3 }
	$7 = CALL _Znwj($4)
	$3 = ($7 + ((int_32)$5 * (int_32)[12]))
	*(($2 + [8])) = $3
	*($2) = $7
	*($2 + [4]) = $7
	$8 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$4 }
	$5 = $7
	
.LOOP $label$6:
	$6 = CALL $62($5, $4)
	$5 = ($5 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	$6 = ($6 + [12])
	*($2 + [4]) = $6
	
.LABEL $label$5
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$6 = $7
	$8 = *($0)
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $70($2)
	
.LABEL $label$2
	$9 = ($0 + [4])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$10
	$5 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$9 }
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $8
	
.LABEL $label$7
	*($9) = $8
	CALL _ZdlPv($4)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$1
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	$5 = ($7 + [24])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	$8 = ($6 + [-24])
	
.LOOP $label$13:
	if ( (*($7) & [1]) ){ goto $label$15 }
	*($7) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*(($7 + [8]))) = [0]
	*(($7 + [4])) = [0]
	
.LABEL $label$14
	CALL $66($7, [0])
	$4 = ($7 + [32])
	*(($7 + [8])) = *($4)
	$5 = ($7 + [24])
	*($7) = *($5)
	*($5) = (int_64)0
	*($4) = [0]
	$7 = ($7 + [12])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$13 }
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	
.LOOP $label$16:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$17
	$5 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$16 }
	
.LABEL $label$11
	*(($0 + [4])) = $7
	CALL $64(($0 + [12]), ($1 + [12]))
	CALL $64(($0 + [36]), ($1 + [36]))
	CALL $64(($0 + [24]), ($1 + [24]))
	$global$0 = ($2 + [16])
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_64 $7, int_64 $8)
{
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$9 = ($global$0 - [112])
	$global$0 = $9
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)($7 <= (int_64)1001), [8283])
	CALL eosio_assert((uint_64)($8 <= (int_64)1001), [8326])
	CALL eosio_assert(((uint_64)$8 <= (uint_64)$7), [8361])
	$10 = [0]
	*(($9 + [104])) = [0]
	*($9 + [88]) = (int_64)-1
	*($9 + [96]) = (int_64)0
	$11 = *($0)
	*($9 + [72]) = $11
	*($9 + [80]) = $11
	$12 = CALL db_find_i64($11, $11, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $8(($9 + [72]), $12) + [64]) == (int_32)($9 + [72])), [17960])
	goto $label$1 
	
.LABEL $label$2
	$10 = [1]
	
.LABEL $label$1
	CALL eosio_assert($10, [8407])
	*(($9 + [24])) = *(($2 + [8]))
	*($9 + [8]) = $1
	*($9 + [32]) = $3
	*($9 + [33]) = $4
	*($9 + [40]) = $5
	*($9 + [48]) = $6
	*($9 + [56]) = $7
	*($9 + [64]) = $8
	*($9 + [16]) = *($2)
	CALL $9(($9 + [72]), ($9 + [8]), *($0))
	$10 = *($9 + [96])
	if ( ($10 == 0) ){ goto $label$3 }
	$3 = ($9 + [100])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($9 + [96]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $10
	
.LABEL $label$4
	*($3) = $10
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($9 + [112])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $78([8281])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$6
	CALL memcpy($4, [8281], $3)
	
.LABEL $label$5
	*(($4 + $3)) = [0]
	CALL $1(($2 + [48]), $1, ($2 + [32]))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$8
	CALL $64(($0 + [12]), *($2 + [48]))
	$4 = *($2 + [48])
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $78([8193])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	$1 = ($4 + [12])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($2 + [16]) = ($3 << [1])
	$4 = (($2 + [16]) | [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $3
	
.LABEL $label$10
	CALL memcpy($4, [8193], $3)
	
.LABEL $label$9
	*(($4 + $3)) = [0]
	CALL $1(($2 + [32]), $1, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$12
	$3 = *($2 + [32])
	if ( ((int_32)(*($2 + [36]) - $3) != (int_32)[12]) ){ goto $label$14 }
	$4 = *($3)
	$1 = CALL $78([8192])
	if ( ((int_32)$1 != (int_32)( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$14 }
	if ( (CALL $69($3, [0], [-1], [8192], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = *($2 + [48])
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $78([8193])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$1 = ($4 + [12])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$17 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$16
	CALL memcpy($4, [8193], $3)
	
.LABEL $label$15
	*(($4 + $3)) = [0]
	CALL $1(($2 + [16]), $1, $2)
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$18 }
	$5 = ($0 + [4])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$22
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$21 }
	$3 = *($0)
	goto $label$19 
	
.LABEL $label$20
	$3 = $1
	
.LABEL $label$19
	*($5) = $1
	CALL _ZdlPv($3)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$18
	*($0) = *($2 + [16])
	*(($0 + [8])) = *($2 + [24])
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	goto $label$1 
	
.LABEL $label$13
	CALL $5($0, [0], [0])
	goto $label$1 
	
.LABEL $label$4
	CALL $61(($2 + [32]))
	
.LABEL $label$3
	CALL $61(($2 + [16]))
	
.LABEL $label$2
	CALL $61($2)
	
.LABEL $label$1
	CALL $64(($0 + [36]), (*($2 + [48]) + [24]))
	CALL $64(($0 + [24]), (*($2 + [48]) + [36]))
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$23 }
	$4 = *($2 + [36])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$27
	$4 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$26 }
	$3 = *($2 + [32])
	goto $label$24 
	
.LABEL $label$25
	$3 = $0
	
.LABEL $label$24
	*($2 + [36]) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$23
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$28 }
	$4 = *($2 + [52])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$32
	$4 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$31 }
	$3 = *($2 + [48])
	goto $label$29 
	
.LABEL $label$30
	$3 = $0
	
.LABEL $label$29
	*($2 + [52]) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$global$0 = ($2 + [64])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $64($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $62($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $62($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $70($0)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $70($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $62(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $78([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [8192], $3)
	
.LABEL $label$3
	$5 = [0]
	*(($4 + $3)) = [0]
	$3 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$3) ){ goto $label$6 }
	$6 = ($1 + [4])
	$4 = [0]
	
.LOOP $label$7:
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $67($2, [8193])
	$3 = (*($1) + $5)
	
.LABEL $label$8
	$7 = *($3)
	$8 = ($7 & [1])
	CALL $68($2, ( *($3 + [8]) ? ($3 + [1]) : $8 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $8 ))
	$5 = ($5 + [12])
	$3 = *($1)
	$4 = ($4 + [1])
	if ( ($4 <= ((int_32)(*($6) - $3) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $78([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$10
	CALL memcpy($5, [8192], $3)
	
.LABEL $label$9
	*(($5 + $3)) = [0]
	$3 = *($1 + [12])
	$5 = ($3 & [1])
	CALL $68($0, ( *(($1 + [20])) ? ($1 + [13]) : $5 ), ( *(($1 + [16])) ? uint_32($3 >> [1]) : $5 ))
	CALL $67($0, [8281])
	$3 = *($2)
	$5 = ($3 & [1])
	CALL $68($0, ( *($2 + [8]) ? ($2 | [1]) : $5 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $5 ))
	CALL $67($0, [8281])
	$3 = *($1 + [36])
	$5 = ($3 & [1])
	CALL $68($0, ( *(($1 + [44])) ? ($1 + [37]) : $5 ), ( *(($1 + [40])) ? uint_32($3 >> [1]) : $5 ))
	CALL $67($0, [8281])
	$3 = *($1 + [24])
	$5 = ($3 & [1])
	CALL $68($0, ( *(($1 + [32])) ? ($1 + [25]) : $5 ), ( *(($1 + [28])) ? uint_32($3 >> [1]) : $5 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$12
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $61($2)
	
.LABEL $label$1
	CALL $61($0)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($2 + [1])
	$6 = ($1 + [1])
	$7 = *($1 + [4])
	$8 = *($1)
	$9 = ($2 + [4])
	
.LOOP $label$1:
	$10 = ($8 & [1])
	$7 = ( $7 ? uint_32(($8 & [254]) >> [1]) : $10 )
	if ( ($7 <= $4) ){ goto $label$3 }
	$11 = $4
	$13 = ($8 & [1])
	$8 = *($2)
	$8 = ( *($9) ? uint_32($8 >> [1]) : $13 )
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = ($12 + $4)
	$12 = ( *(($1 + [8])) ? $6 : $10 )
	$10 = ($12 + $7)
	$11 = ($10 - $7)
	if ( ((int_32)$11 < (int_32)$8) ){ goto $label$3 }
	$14 = ( *(($2 + [8])) ? $5 : $13 )
	$13 = *($14)
	
.LOOP $label$4:
	$11 = (($11 - $8) + [1])
	if ( ($11 == 0) ){ goto $label$3 }
	$11 = CALL $76($7, $13, $11)
	if ( ($11 == 0) ){ goto $label$3 }
	if ( (CALL $77($11, $14, $8) == 0) ){ goto $label$5 }
	$7 = ($11 + [1])
	$11 = ($10 - $7)
	if ( ((int_32)$11 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$11 = ($11 - $12)
	if ( ((int_32)$11 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($1)
	if ( ($8 & [1]) ){ goto $label$6 }
	$11 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$11 = *(($1 + [4]))
	
.LABEL $label$2
	$8 = CALL $63($3, $1, $4, ($11 - $4), $1)
	$4 = ($0 + [4])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $62($7, $8)
	*($4) = (*($4) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $8)
	
.LABEL $label$7
	$4 = *($2)
	$10 = *($9)
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	$8 = *($1)
	$7 = *(($1 + [4]))
	$13 = ( $7 ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$11 >= (uint_32)$13) ){ goto $label$10 }
	$4 = (( $10 ? uint_32($4 >> [1]) : ($4 & [1]) ) + $11)
	if ( ($4 <= $13) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($3 + [16])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18011])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $81($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [36]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	CALL $46(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [16]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17885])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17885])
	CALL memcpy(*($4 + [4]), ($2 + [7]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $70($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [17960])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $29($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [17960])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18074])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18120])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [56])) = *(($3 + [56]))
	*(($1 + [48])) = *(($3 + [48]))
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [18171])
	*($4 + [72]) = ($4 + [51])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	CALL $45(($4 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $4, [51])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [18230])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*(($5 + [40])) = *(($3 + [40]))
	*(($5 + [48])) = *(($3 + [48]))
	*(($5 + [56])) = *(($3 + [56]))
	*($4 + [88]) = (($4 + [16]) + [51])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $45(($4 + [80]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4417020450001911808, $2, (int_64)-4417020450001911808, ($4 + [16]), [51])
	*($5 + [68]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4417020450001911808) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4417020450001911807
	
.LABEL $label$1
	*($4 + [80]) = $5
	*($4 + [16]) = (int_64)-4417020450001911808
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4417020450001911808
	*($3 + [16]) = $6
	*($4 + [80]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($4 + [80]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)($4 <= (int_64)1001), [8326])
	*((($5 + [72]) + [32])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$6 = *($0)
	*($5 + [72]) = $6
	*($5 + [80]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $8(($5 + [72]), $8)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($5 + [72])), [17960])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18281])
	*(($8 = (($5 + [8]) + [40]))) = *(($7 + [40]))
	*((($5 + [8]) + [32])) = *(($7 + [32]))
	*(($9 = (($5 + [8]) + [24]))) = *(($7 + [24]))
	*((($5 + [8]) + [16])) = *(($7 + [16]))
	*((($5 + [8]) + [8])) = *(($7 + [8]))
	$6 = *(($7 + [48]))
	*((($5 + [8]) + [48])) = $6
	*($5 + [8]) = *($7)
	CALL eosio_assert(((uint_64)$6 >= (uint_64)$4), [8361])
	*($9) = $1
	*($8) = $3
	*($5 + [33]) = $2
	*($5 + [64]) = $4
	CALL $9(($5 + [72]), ($5 + [8]), *($0))
	$1 = *($5 + [96])
	if ( ($1 == 0) ){ goto $label$2 }
	$2 = ($5 + [100])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$5 }
	$7 = *(($5 + [96]))
	goto $label$3 
	
.LABEL $label$4
	$7 = $1
	
.LABEL $label$3
	*($2) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$2
	$global$0 = ($5 + [112])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	float_64 $14
	int_64 $15
	float_64 $16
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)1000), [8432])
	*((($5 + [48]) + [32])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$6 = *($0)
	*($5 + [48]) = $6
	*($5 + [56]) = $6
	$7 = *($2 + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	$9 = CALL db_find_i64($6, $6, (int_64)-4994302950881886208, $8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $14(($5 + [48]), $9)
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)($5 + [48])), [17960])
	CALL eosio_assert(((int_64)*($9) == (int_64)$1), [8465])
	$10 = *($0)
	CALL eosio_assert([1], [18039])
	CALL eosio_assert(((int_32)*($9 + [36]) == (int_32)($5 + [48])), [18074])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$4()), [18120])
	$11 = ($9 + [16])
	$6 = *($11)
	*($11) = *(($2 + [8]))
	*($9 + [24]) = $3
	*($9 + [32]) = $4
	*($9 + [8]) = *($2)
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($11) >> (uint_64)(int_64)8)), [18171])
	*($5 + [96]) = (($5 + [112]) + [33])
	*($5 + [92]) = ($5 + [112])
	*($5 + [88]) = ($5 + [112])
	*($5 + [104]) = ($5 + [88])
	*($5 + [12]) = ($9 + [8])
	*($5 + [8]) = $9
	*($5 + [16]) = ($9 + [24])
	*($5 + [20]) = ($9 + [32])
	CALL $15(($5 + [8]), ($5 + [104]))
	CALL db_update_i64(*($9 + [40]), $10, ($5 + [112]), [33])
	$9 = (($5 + [48]) + [16])
	if ( (uint_64)($6 <= *($9)) ){ goto $label$1 }
	*($9) = ((int_64)$6 + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	$10 = *($0)
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$4()), [18230])
	*(($9 = CALL _Znwj([48])) + [36]) = ($5 + [48])
	*($9) = $1
	*($9 + [24]) = $3
	*($9 + [32]) = $4
	*($9 + [8]) = *($2)
	*($9 + [16]) = *(($2 + [8]))
	*($5 + [96]) = (($5 + [112]) + [33])
	*($5 + [92]) = ($5 + [112])
	*($5 + [88]) = ($5 + [112])
	*($5 + [104]) = ($5 + [88])
	*($5 + [12]) = ($9 + [8])
	*($5 + [8]) = $9
	*($5 + [16]) = ($9 + [24])
	*($5 + [20]) = ($9 + [32])
	CALL $15(($5 + [8]), ($5 + [104]))
	$6 = (uint_64)*($9 + [16]) >> (uint_64)(int_64)8
	$11 = CALL db_store_i64(*((($5 + [48]) + [8])), (int_64)-4994302950881886208, $10, $6), ($5 + [112]), [33]
	*($9 + [40]) = $11)
	$4 = (($5 + [48]) + [16])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$3 }
	*($4) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$3
	*($5 + [8]) = $9
	$6 = (uint_64)*(($9 + [16])) >> (uint_64)(int_64)8
	*($5 + [112]) = $6)
	*($5 + [88]) = $11
	$12 = ($5 + [76])
	$4 = *($12)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [80]))) ){ goto $label$5 }
	*($4 + [8]) = $6
	*($4 + [16]) = $11
	*($5 + [8]) = [0]
	*($4) = $9
	*($12) = ($4 + [24])
	$9 = *($5 + [8])
	*($5 + [8]) = [0]
	if ( $9 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	CALL $16(($5 + [72]), ($5 + [8]), ($5 + [112]), ($5 + [88]))
	$9 = *($5 + [8])
	*($5 + [8]) = [0]
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$4 = [0]
	$9 = CALL db_lowerbound_i64(*($5 + [48]), *(($5 + [56])), (int_64)-4994302950881886208, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $14(($5 + [48]), $9)
	$6 = *($9 + [24])
	CALL eosio_assert([1], [18306])
	$9 = CALL db_next_i64(*($9 + [40]), ($5 + [112]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = CALL $14(($5 + [48]), $9)
	$10 = *($9 + [24])
	CALL eosio_assert([1], [18306])
	$6 = ((int_64)$10 + (int_64)$6)
	$9 = CALL db_next_i64(*($9 + [40]), ($5 + [112]))
	if ( ((int_32)$9 >= (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = (uint_64)($6 <= (int_64)1001)
	goto $label$6 
	
.LABEL $label$7
	$9 = [1]
	
.LABEL $label$6
	CALL eosio_assert($9, [8505])
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$6 = *($0)
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	$9 = CALL db_find_i64($6, $6, (int_64)-4417020450001911808, (int_64)-4417020450001911808)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $8(($5 + [8]), $9)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($5 + [8])), [17960])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18281])
	$6 = *(($4 + [16]))
	$10 = *($4 + [8])
	$13 = *($4)
	*((($5 + [112]) + [32])) = [0]
	*($5 + [112]) = $13
	*($5 + [128]) = (int_64)-1
	*($5 + [136]) = (int_64)0
	$13 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [120]) = $13)
	$13 = *(CALL $17(($5 + [112]), $13, [17542]))
	$11 = *($5 + [136])
	if ( ($11 == 0) ){ goto $label$11 }
	$12 = ($5 + [140])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($5 + [136]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $11
	
.LABEL $label$12
	*($12) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$14 = CALL $73((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $6) & [255])))
	$6 = CALL $18($5, $1, *($0), $8)
	$15 = *($2)
	$16 = CALL $73((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $7) & [255])))
	CALL prints([8536])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8538])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8546])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8550])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8556])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8567])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL printdf(((float_64)(CASTING float_64)(int_64 ((int_64)$13 + (int_64)$10)) / (float_64)$14))
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8580])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL printn($1)
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8597])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	$14 = ((float_64)(CASTING float_64)(uint_64 ((int_64)$15 + (int_64)$6)) / (float_64)$16)
	if ( (int_64)($8 == 0) ){ goto $label$16 }
	$9 = [0]
	
.LOOP $label$18:
	*((($5 + [112]) + $9)) = $8
	$4 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[5]) ){ goto $label$17 }
	$9 = $4
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	
.LABEL $label$17
	CALL prints_l(($5 + [112]), $4)
	
.LABEL $label$16
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8612])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL printdf($14)
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8281])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8628])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [58]
	CALL prints_l(($5 + [112]), [1])
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL printui($3)
	*($5 + [112]) = [34]
	CALL prints_l(($5 + [112]), [1])
	CALL prints([8642])
	$11 = *($5 + [32])
	if ( ($11 == 0) ){ goto $label$19 }
	$0 = ($5 + [36])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$22 }
	$9 = *(($5 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$9 = $11
	
.LABEL $label$20
	*($0) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$19
	$11 = *($5 + [72])
	if ( ($11 == 0) ){ goto $label$24 }
	$0 = ($5 + [76])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$26 }
	
.LOOP $label$27:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$27 }
	$9 = *(($5 + [72]))
	goto $label$25 
	
.LABEL $label$26
	$9 = $11
	
.LABEL $label$25
	*($0) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$24
	$global$0 = ($5 + [160])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $62(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $62(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $81($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $40(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [112])
	$8 = *($4 + [120])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$10 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $10
	*((($4 + [8]) + [8])) = $10
	$10 = *($4 + [144])
	*($4 + [8]) = $10
	*($4 + [160]) = $10
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $1), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $84($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $81($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [66]) = [0]
	*($4 + [64]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $39(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = *($4 + [66])
	$9 = *($4 + [65])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $84($2)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $81($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $36(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $37(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $84($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $81($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [176]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $38(($4 + [32]), ($4 + [176]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [160]) + [8]))) = *($9)
	*($4 + [160]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [176]) + [8])) = $9
	*(($4 + [56])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [160])
	*($4 + [48]) = $0
	*($4 + [176]) = $0
	*(($9 = (($4 + [144]) + [8]))) = *($8)
	*($4 + [144]) = *($4 + [88])
	$0 = *($4 + [80])
	$8 = *($4 + [104])
	$10 = *($4 + [105])
	$1 = *($4 + [112])
	$11 = *($4 + [120])
	$12 = *($4 + [128])
	$13 = *($4 + [136])
	*($3) = *($9)
	*($4 + [160]) = *($4 + [144])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$14 = *((($4 + [160]) + [8]))
	*((($4 + [176]) + [8])) = $14
	*(($4 + [8])) = $14
	$14 = *($4 + [160])
	*($4) = $14
	*($4 + [176]) = $14
	CALL void $3((int_32 $0), (int_64 $4), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 ((int_32)($10 & [255]) != (int_32)[0])), (int_32 $1), (int_64 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $12), (int_64 $13), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $84($2)
	
.LABEL $label$5
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $78([17624])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $69($4, [0], [-1], [17624], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($8 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$4 = CALL $62(($5 + [16]), $4)
	$2 = *($0 + [8])
	*(($5 + [8])) = *($8)
	*($5) = *($5 + [32])
	CALL $20($0, $1, $5, $4, $2)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	*($3 + [80]) = [9054]
	*($3 + [84]) = CALL $78([9054])
	*($3 + [40]) = *($3 + [80])
	CALL $21(($3 + [88]), ($3 + [40]))
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [32]) = *($3 + [72])
	CALL $32($0, $1, ($3 + [32]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4417057748574109696) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$4 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [2]
	*($3 + [8]) = *($3 + [64])
	CALL $33($1, $1, ($3 + [8]))
	
.LABEL $label$4
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [24]) = *($3 + [48])
	CALL $34($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [4]
	*($3 + [16]) = *($3 + [56])
	CALL $35($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $84($0)
	
.LABEL $label$1
}

void .FUNC $61 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $65($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $51($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $66($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $66($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $61($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18034])
	CALL memcpy(($2 + [16]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [16])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [31]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [24]) = ((int_32)*($2 + [31]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [25]) = ((int_32)*($2 + [15]) != (int_32)[0])
	*($2 + [8]) = $0
	CALL $52(($2 + [8]), $1)
	$global$0 = ($2 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($3 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18034])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [40]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18034])
	CALL memcpy(($0 + [56]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $81($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9108])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $81($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $84($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $79(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9108])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $79(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}