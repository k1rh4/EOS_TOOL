(data (i32.const 8192) "error reading iterator\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8224) "read\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8320) "cannot pass end iterator to erase\00stoul\00")
(data (i32.const 8360) "cannot increment end iterator\00stoll\00")
(data (i32.const 8396) "object passed to erase is not in multi_index\00")
(data (i32.const 8441) "cannot erase objects in table of another contract\00")
(data (i32.const 8491) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8544) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8595) "get\00%d\00")
(data (i32.const 8602) "cannot create objects in table of another contract\00")
(data (i32.const 8653) "write\00")
(data (i32.const 8659) "cannot pass end iterator to modify\00")
(data (i32.const 8694) "object passed to modify is not in multi_index\00")
(data (i32.const 8740) "cannot modify objects in table of another contract\00")
(data (i32.const 8791) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8850) "min and max token\'s symbol must same.\00")
(data (i32.const 8888) "min amount must lower or equal max amount.\00")
(data (i32.const 8931) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8983) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9037) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9088) "\84#\00\00")
(data (i32.const 9092) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9125) "box token symbol and last game left token symbol not equal.\00")
(data (i32.const 9185) "box amount split total percent not equal 100%.\00")
(data (i32.const 9232) "current status do not allow doing this action.\00")
(data (i32.const 9279) "attempt to add asset with different symbol\00: no conversion\00")
(data (i32.const 9338) "addition underflow\00: out of range\00")
(data (i32.const 9372) "addition overflow\00")
(data (i32.const 9390) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9439) "invalid symbol name\00")
(data (i32.const 9459) "game not exist.\00")
(data (i32.const 9475) "game has overed.\00")
(data (i32.const 9492) "game still running.\00")
(data (i32.const 9512) "token not support.\00")
(data (i32.const 9531) "ggs box settle transfer.\00")
(data (i32.const 9556) "game grant has done.\00")
(data (i32.const 9577) "divide by zero\00")
(data (i32.const 9592) "signed division overflow\00")
(data (i32.const 9617) "multiplication overflow\00")
(data (i32.const 9641) "multiplication underflow\00")
(data (i32.const 9666) "game grant not over yet.\00")
(data (i32.const 9691) "game clear has done.\00")
(data (i32.const 9712) "out of game time.\00")
(data (i32.const 9730) "unable to find key\00")
(data (i32.const 9749) "box count lower zero.\00")
(data (i32.const 9771) "out of box order limit.\00")
(data (i32.const 9795) "pay amount not equal box need.\00")
(data (i32.const 9826) "out of box user limit.\00")
(data (i32.const 9849) "ggs box referrer reward.\00")
(data (i32.const 9874) "ggs box transport.\00")
(data (i32.const 9893) "ggs box mine.\00")
(data (i32.const 9907) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9966) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 10020) "cannot decrement iterator at beginning of index\00")
(data (i32.const 10068) "transport account not set.\00")
(data (i32.const 10095) "string is too long to be a valid name\00")
(data (i32.const 10133) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10200) "character is not in allowed character set for names\00")
(data (i32.const 10252) "attempt to subtract asset with different symbol\00")
(data (i32.const 10300) "subtraction underflow\00")
(data (i32.const 10322) "subtraction overflow\00")
(data (i32.const 10343) "Invalid amount.\00")
(data (i32.const 10359) "player not exist.\00")
(data (i32.const 10377) "player has nothing to draw.\00")
(data (i32.const 10405) "ggs box draw\00")
(data (i32.const 10418) "Invalid token transfer\00")
(data (i32.const 10441) "Quantity must be positive\00")
(data (i32.const 10467) "buy:\00")
(data (i32.const 10472) "-\00")
(data (i32.const 10474) "referrer not illegal.\00")
(data (i32.const 10496) "ram account not set.\00")
(data (i32.const 18944) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19024) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$5 (param i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "__multi3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_remove_i64" (func $fimport$12 (param i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$14 (param i32 i64 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$20 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(import "env" "db_idx_double_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$25 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_remove" (func $fimport$26 (param i32)))
(import "env" "db_idx_double_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$28 (param i32 i64 i32)))
(import "env" "db_idx_double_store" (func $fimport$29 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_double_previous" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_idx_double_end" (func $fimport$31 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$32))
(import "env" "memset" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$35 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$46 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$47 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$50 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$52 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$53 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$54 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $144))
(export "_Znwj" (func $142))
(export "_Znaj" (func $143))
(export "_ZdaPv" (func $145))
(export "_ZnwjSt11align_val_t" (func $146))
(export "_ZnajSt11align_val_t" (func $147))
(export "_ZdlPvSt11align_val_t" (func $148))
(export "_ZdaPvSt11align_val_t" (func $149))
(table $0 21 21 anyfunc)
(elem (i32.const 1) $2 $4 $6 $8 $10 $12 $14 $16 $18 $19 $21 $22 $23 $24 $26 $27 $29 $31 $173 $175)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19281))
(global $global$2 i32 (i32.const 19281))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth($2)
	*($3 + [8]) = $2
	*($3) = $1
	CALL $66($0, (int_64)-6533262907872903168, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $172([20], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $177 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $170 ()
{
	return [10524]
}

void .FUNC $171 (int_32 $0)
{
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [19] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $174($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $174($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $174($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $174($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18944]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $174($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $174($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $174($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [568]) = (int_64)0
	*($4 + [560]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	$8 = ($2 + $7)
	CALL memcpy(($4 + [560]), $2, [8])
	$9 = ($2 + [8])
	$3 = (($4 + [560]) + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$6
	CALL memcpy($3, $9, [8])
	*(($4 + [32])) = $8
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [16])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = (int_64)-4157493845350678528
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [136]) = (int_64)-5069817191910604800
	*($4 + [128]) = (int_64)-3617168583097216896
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [288])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = [1]
	*($4 + [544]) = CALL $32(($4 + [8]))
	$8 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($3)
	$1 = *($4 + [560])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($8) + $6))
	
.LABEL $label$7
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $193($2)
	
.LABEL $label$8
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [576])
	return [1]
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $177($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL $70(($1 + [144]))
	$2 = ($1 + [160])
	$3 = [0]
	if ( ((uint_64)((int_64)*($1 + [160]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$4 = (uint_64)*((($1 + [144]) + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$3 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [10418])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [10441])
	if ( ((int_64)*($1 + [152]) != (int_64)*($0)) ){ goto $label$12 }
	*(($1 + [136])) = [0]
	*($1 + [128]) = (int_64)0
	$5 = CALL $187([10467])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($1 + [128]) = ($5 << [1])
	$7 = (($1 + [128]) | [1])
	$3 = $7
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	if ( ((*(($1 + [176])) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$7 = (($5 + [16]) & [-16])
	$3 = CALL _Znwj($7)
	*($1 + [128]) = ($7 | [1])
	*($1 + [136]) = $3
	*($1 + [132]) = $5
	$7 = (($1 + [128]) | [1])
	
.LABEL $label$10
	CALL memcpy($3, [10467], $5)
	
.LABEL $label$9
	$8 = [0]
	*(($3 + $5)) = [0]
	$5 = ($5 & [1])
	$5 = *($1 + [128])
	$3 = ( *($1 + [132]) ? uint_32($5 >> [1]) : $5 )
	$9 = ($1 + [176])
	if ( CALL $159($9, [0], $3, ( *($1 + [136]) ? $7 : $5 ), $3) ){ goto $label$13 }
	$10 = [-1]
	$3 = CALL $152(($1 + [112]), $9, [4], [-1], $9)
	$11 = ($3 + [1])
	$12 = *($3 + [8])
	$5 = *($1 + [112])
	$13 = *($3 + [4])
	$7 = CALL $187([10472])
	if ( ($7 == 0) ){ goto $label$14 }
	$5 = ( $13 ? uint_32($5 >> [1]) : $8 )
	$8 = ($5 & [1])
	$14 = ( $12 ? $11 : $8 )
	$12 = ($14 + $5)
	if ( ((int_32)$5 < (int_32)$7) ){ goto $label$16 }
	$8 = $14
	
.LOOP $label$17:
	$5 = (($5 - $7) + [1])
	if ( ($5 == 0) ){ goto $label$16 }
	$5 = CALL $185($8, [45], $5)
	if ( ($5 == 0) ){ goto $label$16 }
	if ( (CALL $186($5, [10472], $7) == 0) ){ goto $label$15 }
	$8 = ($5 + [1])
	$5 = ($12 - $8)
	if ( ((int_32)$5 >= (int_32)$7) ){ goto $label$17 }
	
.LABEL $label$16
	$5 = $12
	
.LABEL $label$15
	$8 = ( [-1] ? ($5 - $14) : ((int_32)$5 == (int_32)$12) )
	
.LABEL $label$14
	$7 = *($1 + [112])
	$12 = *(($3 + [4]))
	$13 = *(($3 + [8]))
	$5 = CALL $187([10472])
	$12 = ($8 + [1])
	$7 = ($7 & [1])
	$14 = ( $12 ? uint_32($7 >> [1]) : $7 )
	if ( ($14 <= $12) ){ goto $label$18 }
	$10 = $12
	if ( ($5 == 0) ){ goto $label$18 }
	$10 = ($15 + $12)
	$15 = ( $13 ? $11 : $7 )
	$13 = ($15 + $14)
	$7 = ($13 - $10)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$20 }
	
.LOOP $label$21:
	$7 = (($7 - $5) + [1])
	if ( ($7 == 0) ){ goto $label$20 }
	$7 = CALL $185($10, [45], $7)
	if ( ($7 == 0) ){ goto $label$20 }
	if ( (CALL $186($7, [10472], $5) == 0) ){ goto $label$19 }
	$10 = ($7 + [1])
	$7 = ($13 - $10)
	if ( ((int_32)$7 >= (int_32)$5) ){ goto $label$21 }
	
.LABEL $label$20
	$7 = $13
	
.LABEL $label$19
	$10 = ( [-1] ? ($7 - $15) : ((int_32)$7 == (int_32)$13) )
	
.LABEL $label$18
	$5 = CALL $152(($1 + [8]), $3, [0], $8, $3)
	$16 = CALL $164($5, [0], [10])
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$22
	$5 = CALL $152(($1 + [8]), $3, $12, ($10 + ((int_32)$8 ^ (int_32)[-1])), $3)
	$12 = CALL $160($5, [0], [10])
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$23
	$14 = ($5 & [1])
	$5 = *($1 + [112])
	$8 = ( *(($3 + [4])) ? uint_32($5 >> [1]) : $14 )
	if ( ((uint_32)$10 >= (uint_32)$8) ){ goto $label$29 }
	$15 = *(($3 + [8]))
	$5 = CALL $187([10472])
	$7 = [-1]
	$13 = ($10 + [1])
	if ( ($8 <= $13) ){ goto $label$30 }
	$7 = $13
	if ( ($5 == 0) ){ goto $label$30 }
	$8 = ($14 + $13)
	$14 = ( $15 ? $11 : $14 )
	$11 = ($14 + $8)
	$7 = ($11 - $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$33:
	$7 = (($7 - $5) + [1])
	if ( ($7 == 0) ){ goto $label$32 }
	$7 = CALL $185($8, [45], $7)
	if ( ($7 == 0) ){ goto $label$32 }
	if ( (CALL $186($7, [10472], $5) == 0) ){ goto $label$31 }
	$8 = ($7 + [1])
	$7 = ($11 - $8)
	if ( ((int_32)$7 >= (int_32)$5) ){ goto $label$33 }
	
.LABEL $label$32
	$7 = $11
	
.LABEL $label$31
	$7 = ( [-1] ? ($7 - $14) : ((int_32)$7 == (int_32)$11) )
	
.LABEL $label$30
	$8 = *($5)
	$10 = ($8 & [1])
	$5 = CALL $152(($1 + [88]), $3, $13, ($7 + ((int_32)$10 ^ (int_32)[-1])), $3)
	*($1 + [104]) = ( *($5 + [8]) ? ($5 + [1]) : $10 )
	*($1 + [108]) = ( *($5 + [4]) ? uint_32($8 >> [1]) : $10 )
	*($1) = *($1 + [104])
	$6 = *(CALL $71(($1 + [8]), $1))
	if ( ((*($5) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($5 + [8])))
	
.LABEL $label$34
	$11 = CALL $152(($1 + [72]), $3, ($7 + [1]), [-1], $3)
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = [0]
	$4 = ((int_64)*($1 + [144]) + (int_64)$6)
	$7 = (($1 + [56]) | [1])
	
.LOOP $label$35:
	$5 = (CASTING uint_32)(uint_64 ((int_64)$4 & (int_64)15))
	CALL $72(($1 + [8]), (( [48] ? [55] : ($5 <= [10]) ) + $5), ($1 + [56]))
	if ( (*($1 + [56]) & [1]) ){ goto $label$37 }
	*($1 + [56]) = [0]
	goto $label$36 
	
.LABEL $label$37
	*(*((($1 + [56]) + [8]))) = [0]
	*($1 + [60]) = [0]
	
.LABEL $label$36
	CALL $155(($1 + [56]), [0])
	*((($1 + [56]) + [8])) = *((($1 + [8]) + [8]))
	*($1 + [56]) = *($1 + [8])
	$5 = ((uint_64)$4 > (uint_64)(int_64)15)
	$4 = (uint_64)$4 >> (uint_64)(int_64)4)
	if ( $5 ){ goto $label$35 }
	$10 = [0]
	$5 = ($5 & [1])
	$5 = *($1 + [56])
	$8 = ($5 & [1])
	$5 = *($1 + [72])
	$14 = uint_32($5 >> [1])
	$13 = ( *($11 + [4]) ? $14 : $8 )
	if ( ((int_32)$13 != (int_32)( *($1 + [60]) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$25 }
	$5 = ( *(($1 + [64])) ? $7 : $5 )
	$7 = ($11 + [1])
	if ( $8 ){ goto $label$28 }
	if ( ($13 == 0) ){ goto $label$27 }
	$8 = ([0] - $14)
	
.LOOP $label$38:
	if ( ((int_32)*($7) != (int_32)*($5)) ){ goto $label$26 }
	$10 = [1]
	$5 = ($5 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$38 }
	goto $label$25 
	
.LABEL $label$29
	$6 = (int_64)-7122829838779416576
	goto $label$24 
	
.LABEL $label$28
	if ( ($13 == 0) ){ goto $label$27 }
	$10 = (CALL $186(( *($11 + [8]) ? $7 : $8 ), $5, $13) == 0)
	goto $label$25 
	
.LABEL $label$27
	$10 = [1]
	goto $label$25 
	
.LABEL $label$26
	$10 = [0]
	
.LABEL $label$25
	CALL eosio_assert($10, [10474])
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$39
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$24
	CALL require_auth(*($1 + [144]))
	*(($1 + [40])) = *(($2 + [8]))
	*($1 + [8]) = $16
	*($1 + [24]) = $12
	*($1 + [48]) = $6
	*($1 + [16]) = *($1 + [144])
	*($1 + [32]) = *($2)
	CALL $73($0, (int_64)4520488125973135360, ($1 + [8]))
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$13
	if ( (*($1 + [128]) & [1]) ){ goto $label$40 }
	if ( (*($9) & [1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$40
	CALL _ZdlPv(*(($1 + [136])))
	if ( ((*($9) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $150(($1 + [128]))
	
.LABEL $label$7
	$global$0 = ($1 + [192])
	return 
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [184])))
	$global$0 = ($1 + [192])
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [560])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = (int_64)-4157493845350678528
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [136]) = (int_64)-5069817191910604800
	*($4 + [128]) = (int_64)-3617168583097216896
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [288])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = [1]
	*($4 + [544]) = CALL $32(($4 + [8]))
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $193($2)
	
.LABEL $label$5
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [560])
	return [1]
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$4 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [568]) = [0]
	*($4 + [560]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$4
	$3 = ($2 + $7)
	$8 = (($4 + [560]) + [8])
	CALL memcpy(($4 + [560]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-4]) != (int_32)[8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	CALL memcpy($8, $9, [4])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [12])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = (int_64)-4157493845350678528
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [136]) = (int_64)-5069817191910604800
	*($4 + [128]) = (int_64)-3617168583097216896
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [288])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = [1]
	*($4 + [544]) = CALL $32(($4 + [8]))
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *(($4 + [568]))
	$0 = *($4 + [560])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $193($2)
	
.LABEL $label$7
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [576])
	return [1]
}

int_32 .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $190($1)
	
.LABEL $label$2
	*(CALL $170()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $190(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $193($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $170())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $189($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([152])
	CALL $95($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [144])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = (int_64)0
	*($3 + [128]) = (int_64)0
	*($3 + [136]) = (int_64)0
	*($3 + [144]) = (int_64)0
	*($3 + [152]) = (int_64)0
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = (int_64)0
	*($3 + [176]) = $1
	CALL $94(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [180])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [8360])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = *(($2 + [68]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$2 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3665743729458675711, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [68])) = $3
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$5 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8544])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL $89($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-3665743729458675712, $5))
	if ( ((int_32)*($8 + [56]) == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$3
	*(($0 + [4])) = $8
	*(($8 + [68])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = $1
	CALL $87(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $88(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = $4) + [64]) = $2
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($5 + [48]) = *($1 + [8])
	$6 = ($1 + [32])
	*($5 + [56]) = *($6)
	$7 = *($1)
	*($5 + [40]) = $7
	*($1 + [8]) = *(*($3))
	$8 = *($3 + [4])
	*($6) = *(($8 + [8]))
	*($1 + [24]) = *($8)
	$6 = *($3 + [8])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	*($1 + [16]) = *(*($3 + [12]))
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [28]) = $3
	*($5 + [24]) = $3
	*($5 + [32]) = ($4 + [-8])
	*($5 + [72]) = ($5 + [24])
	*($5 + [4]) = ($1 + [8])
	*($5) = $1
	*($5 + [8]) = ($1 + [16])
	*($5 + [12]) = ($1 + [24])
	*($5 + [16]) = ($1 + [40])
	CALL $92($5, ($5 + [72]))
	CALL db_update_i64(*($1 + [60]), $2, $3, [56])
	$3 = ($0 + [36])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [4]) = $1
	*($5) = $0
	*($5 + [12]) = $1
	*($5 + [8]) = ($5 + [48])
	*($5 + [16]) = ($5 + [40])
	*($5 + [20]) = ($5 + [64])
	*($5 + [72]) = $5
	CALL $93(($5 + [72]), $3, ($3 + [1]))
	$global$0 = ($5 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3665743729458675711, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $89($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3665743729458675712, $6))
	if ( ((int_32)*($4 + [56]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	*(($4 + [68])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [32])
	$2 = *($0 + [112])
	$4 = *(($0 + [60]))
	$3 = *(($0 + [56]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	if ( ((int_32)*($6 + [20]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$4 = CALL db_find_i64(*($1), *(($0 + [40])), (int_64)4982871454518345728, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $78($1, $4)
	if ( ((int_32)*($6 + [20]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	$5 = ((int_32)CALL $163(($6 + [8]), [0], [10]) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($5, [9232])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$2 = ($global$0 - [640])
	$global$0 = $2
	*(($3 = (($2 + [304]) + [8]))) = *(($1 + [16]))
	*(($4 = (($2 + [288]) + [8]))) = *(($1 + [48]))
	*(($5 = (($2 + [272]) + [8]))) = *(($1 + [64]))
	*($2 + [304]) = *($1 + [8])
	*($2 + [288]) = *($1 + [40])
	*($2 + [272]) = *($1 + [56])
	$6 = *($1)
	$7 = *($1 + [24])
	$8 = *($1 + [26])
	$9 = *($1 + [28])
	$10 = *($1 + [30])
	$11 = *($1 + [32])
	$12 = *($1 + [34])
	*(($13 = (($2 + [256]) + [8]))) = *(($1 + [80]))
	*(($14 = (($2 + [240]) + [8]))) = *(($1 + [96]))
	*(($15 = (($2 + [224]) + [8]))) = *(($1 + [112]))
	*(($16 = (($2 + [208]) + [8]))) = *(($1 + [128]))
	*(($17 = (($2 + [192]) + [8]))) = *(($1 + [144]))
	*($2 + [256]) = *($1 + [72])
	*($2 + [240]) = *($1 + [88])
	*($2 + [224]) = *($1 + [104])
	*($2 + [208]) = *($1 + [120])
	*($2 + [192]) = *($1 + [136])
	*(($18 = (($2 + [176]) + [8]))) = *(($1 + [160]))
	*(($19 = (($2 + [160]) + [8]))) = *(($1 + [176]))
	*($2 + [176]) = *($1 + [152])
	*($2 + [160]) = *($1 + [168])
	$20 = *($1 + [184])
	*((($2 + [464]) + [8])) = *($19)
	*((($2 + [448]) + [8])) = *($18)
	*((($2 + [432]) + [8])) = *($17)
	*((($2 + [416]) + [8])) = *($16)
	*((($2 + [400]) + [8])) = *($15)
	*($2 + [464]) = *($2 + [160])
	*($2 + [448]) = *($2 + [176])
	*($2 + [432]) = *($2 + [192])
	*($2 + [416]) = *($2 + [208])
	*($2 + [400]) = *($2 + [224])
	*((($2 + [384]) + [8])) = *($14)
	*((($2 + [368]) + [8])) = *($13)
	*((($2 + [352]) + [8])) = *($5)
	*((($2 + [336]) + [8])) = *($4)
	*((($2 + [320]) + [8])) = *($3)
	*($2 + [384]) = *($2 + [240])
	*($2 + [368]) = *($2 + [256])
	*($2 + [352]) = *($2 + [272])
	*($2 + [336]) = *($2 + [288])
	*($2 + [320]) = *($2 + [304])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($2 + [624]) + [8]))) = *((($2 + [320]) + [8]))
	*(($4 = (($2 + [608]) + [8]))) = *((($2 + [336]) + [8]))
	*(($5 = (($2 + [592]) + [8]))) = *((($2 + [352]) + [8]))
	*(($13 = (($2 + [576]) + [8]))) = *((($2 + [368]) + [8]))
	*(($14 = (($2 + [560]) + [8]))) = *((($2 + [384]) + [8]))
	*($2 + [624]) = *($2 + [320])
	*($2 + [608]) = *($2 + [336])
	*($2 + [592]) = *($2 + [352])
	*($2 + [576]) = *($2 + [368])
	*($2 + [560]) = *($2 + [384])
	*(($15 = (($2 + [544]) + [8]))) = *((($2 + [400]) + [8]))
	*(($16 = (($2 + [528]) + [8]))) = *((($2 + [416]) + [8]))
	*(($17 = (($2 + [512]) + [8]))) = *((($2 + [432]) + [8]))
	*(($18 = (($2 + [496]) + [8]))) = *((($2 + [448]) + [8]))
	*(($19 = (($2 + [480]) + [8]))) = *((($2 + [464]) + [8]))
	*($2 + [544]) = *($2 + [400])
	*($2 + [528]) = *($2 + [416])
	*($2 + [512]) = *($2 + [432])
	*($2 + [496]) = *($2 + [448])
	*($2 + [480]) = *($2 + [464])
	*((($2 + [144]) + [8])) = *($3)
	*($2 + [144]) = *($2 + [624])
	*((($2 + [128]) + [8])) = *($4)
	*($2 + [128]) = *($2 + [608])
	*((($2 + [112]) + [8])) = *($5)
	*($2 + [112]) = *($2 + [592])
	*((($2 + [96]) + [8])) = *($13)
	*($2 + [96]) = *($2 + [576])
	*((($2 + [80]) + [8])) = *($14)
	*($2 + [80]) = *($2 + [560])
	*((($2 + [64]) + [8])) = *($15)
	*($2 + [64]) = *($2 + [544])
	*((($2 + [48]) + [8])) = *($16)
	*($2 + [48]) = *($2 + [528])
	*((($2 + [32]) + [8])) = *($17)
	*($2 + [32]) = *($2 + [512])
	*((($2 + [16]) + [8])) = *($18)
	*($2 + [16]) = *($2 + [496])
	*(($2 + [8])) = *($19)
	*($2) = *($2 + [480])
	CALL void $0((int_32 $6), (int_64 ($2 + [144])), (int_32 ($7 & [65535])), (int_32 ($8 & [65535])), (int_32 ($9 & [65535])), (int_32 ($10 & [65535])), (int_32 ($11 & [65535])), (int_32 ($12 & [65535])), (int_32 ($2 + [128])), (int_32 ($2 + [112])), (int_32 ($2 + [96])), (int_32 ($2 + [80])), (int_32 ($2 + [64])), (int_32 ($2 + [48])), (int_32 ($2 + [32])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $20), (int_64 $1))
	$global$0 = ($2 + [640])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = ($0 + [26])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	*($2) = $0
	CALL $138($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
	$9 = *(($1 + [64]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$9 = *(($1 + [68]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $167 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $187($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $154($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $156(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $176(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8599], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $156(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $156(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_64 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $187([8390])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8390], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $170())
	*(CALL $170()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $182($4, ($3 + [12]), $2)
	$0 = CALL $170()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($3)
	
.LABEL $label$1
	CALL $162($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $187([8354])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8354], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $170())
	*(CALL $170()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $183($4, ($3 + [12]), $2)
	$5 = CALL $170()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($3)
	
.LABEL $label$1
	CALL $162($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $162 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $166($1, $0, [9322])
	CALL $168()
	(unreachable)
}

void .FUNC $161 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $166($1, $0, [9357])
	CALL $167()
	(unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $187([8229])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8229], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $170())
	*(CALL $170()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $184($4, ($3 + [12]), $2)
	$5 = CALL $170()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($3)
	
.LABEL $label$1
	CALL $162($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $169 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $168 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$9 = *(($1 + [32]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-8524866889302279168, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx_double_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($1 + [137]) = [1]
	$6 = *($1)
	$7 = $4
	$4 = ($7 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($7 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	*($2) = $4
	CALL $141($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($1 + [136]) = [1]
	$6 = *($1)
	$7 = $4
	$4 = ($7 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($7 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [96])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [128])
	$global$0 = $6
	if ( (int_64)(*($4) == 0) ){ goto $label$1 }
	*((($6 + [8]) + [24])) = *(($4 + [8]))
	*($6 + [16]) = $3
	*($6 + [8]) = $2
	*($6 + [24]) = *($4)
	$5 = CALL $151((($6 + [8]) + [32]), $5)
	*($6 + [64]) = (int_64)-3617168760277827584
	*($6 + [56]) = $1
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = (int_64)3617214756542218240
	*((($6 + [56]) + [36])) = [0]
	$7 = ($4 + [16])
	*((($6 + [56]) + [24])) = $7
	*(($6 + [76])) = $7
	*($6 + [72]) = $4
	*($6 + [84 align=4]) = (int_64)0
	$4 = *($5)
	$5 = ( *((($6 + [8]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [32])
	$2 = (CASTING uint_64)(uint_32 $5)
	$5 = ($6 + [84])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$2 }
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $85($5, $4)
	$5 = *(($6 + [88]))
	$4 = *(($6 + [84]))
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$4 = [0]
	
.LABEL $label$3
	*($6 + [100]) = $4
	*($6 + [96]) = $4
	*($6 + [104]) = $5
	*($6 + [112]) = ($6 + [96])
	*($6 + [120]) = ($6 + [8])
	CALL $99(($6 + [120]), ($6 + [112]))
	CALL $100(($6 + [56]))
	$4 = *($6 + [84])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($6 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($6 + [72])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($6 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$1
	$global$0 = ($6 + [128])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx_double_lowerbound(*($2), *($2 + [8]), (int_64)-8524866889302279168, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [24]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $60($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-8524866889302279168, $6))
	if ( ((int_32)*($4 + [24]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	*(($4 + [32])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $108(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $109(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $193($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
	$9 = *(($1 + [48]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx_double_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [24]) = $2
	$6 = *(($1 + [28]))
	$5 = *($1 + [24])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($8 + [24]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5606348217378668544, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $67($1, $7)
	if ( ((int_32)*($8 + [24]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	$2 = *($0 + [536])
	*($4 + [16]) = $3
	CALL $104($1, $8, $2, ($4 + [16]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	$2 = *($0 + [536])
	*($4 + [20]) = $3
	*($4 + [16]) = ($4 + [24])
	CALL $105(($4 + [8]), $1, $2, ($4 + [16]))
	$global$0 = ($4 + [32])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [-1]
	$4 = *($2 + [32])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8360])
	$3 = [-1]
	$2 = *(($0 + [4]))
	$4 = *($2 + [32])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *(*($0))
	$4 = CALL db_idx_double_find_primary(*($4), *($4 + [8]), (int_64)-8524866889302279168, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [32]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx_double_next($4, ($1 + [8]))
	if ( ((int_32)$5 <= (int_32)$3) ){ goto $label$7 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$4 = ($2 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$6 }
	$2 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)*($3 + [24]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [8544])
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $60($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-8524866889302279168, $6))
	if ( ((int_32)*($3 + [24]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$4
	*(($0 + [4])) = $3
	*(($3 + [32])) = $5
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $154($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $150 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $157($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $154($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $186(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $179 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $179($3, (int_64)0)
	$4 = CALL $181($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	*(($4 = (($3 + [8]) + [24]))) = (int_64)3617214756542218240
	*($3 + [16]) = (int_64)3617214756542218240
	*($3 + [8]) = *($0)
	*($3 + [24]) = *($0 + [536])
	*(($5 = CALL _Znwj([32]))) = *($3 + [8])
	*(($5 + [8])) = *($3 + [16])
	*($5 + [16]) = *($3 + [24])
	*(($5 + [24])) = *($4)
	*($3 + [40]) = $5
	$5 = ($5 + [32])
	*($3 + [48]) = $5
	*($3 + [44]) = $5
	$5 = CALL $135(($3 + [56]), ($3 + [40]), *($0), $1, $2)
	CALL $100($5)
	$0 = *($5 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	*(($5 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($5 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	*($3 + [44]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [80])
	$global$0 = $5
	CALL $63($1, $3)
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	*($5 + [76]) = [0]
	$3 = *($1)
	*($5 + [40]) = $3
	$6 = (uint_64)*(($1 + [376])) >> (uint_64)(int_64)8
	*($5 + [48]) = $6)
	$7 = [0]
	$8 = CALL db_find_i64($3, $6, (int_64)-3020384829779738624, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $54(($5 + [40]), $8)
	if ( ((int_32)*($7 + [40]) == (int_32)($5 + [40])) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10359])
	$8 = *($7 + [8])
	*($0) = *($7 + [16])
	*(($0 + [8])) = *(($7 + [24]))
	*($5 + [38]) = $8
	*($5 + [32]) = ($5 + [40])
	*($5) = (int_64)-4503599627370496
	CALL $112(($5 + [24]), ($5 + [32]), $5)
	$9 = *($5 + [28])
	if ( ($9 == 0) ){ goto $label$4 }
	$8 = [-1]
	$10 = ($1 + [394])
	
.LOOP $label$5:
	$8 = ($8 + [1])
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$4 }
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	CALL $114(($5 + [24]))
	$9 = *($5 + [28])
	if ( $9 ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	$8 = *($5 + [38])
	
.LABEL $label$2
	*($5 + [20]) = $8
	$11 = ($1 + [136])
	$2 = *($1 + [216])
	$9 = *(($1 + [164]))
	$12 = *(($1 + [160]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($9 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$12 }
	$9 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	if ( ((int_32)*(($10 + [140])) == (int_32)$11) ){ goto $label$10 }
	CALL eosio_assert([0], [8544])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$10 = [0]
	$8 = CALL db_find_i64(*($11), *(($1 + [144])), (int_64)7035938066996920320, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $36($11, $8)
	if ( ((int_32)*($10 + [140]) == (int_32)$11) ){ goto $label$10 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = *($1 + [536])
	if ( $7 ){ goto $label$14 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$14
	CALL $130(($5 + [40]), $7, $2, $5)
	$2 = *(($1 + [536]))
	*($5) = $0
	if ( $10 ){ goto $label$15 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$15
	CALL $131($11, $10, $2, $5)
	$10 = *($5 + [64])
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$16 }
	CALL eosio_assert([0], [8320])
	CALL eosio_assert([0], [8360])
	
.LABEL $label$16
	$8 = CALL db_next_i64(*($7 + [44]), $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$17 }
	CALL $54(($5 + [40]), $8)
	
.LABEL $label$17
	CALL $55(($5 + [40]), $7)
	$2 = *($1 + [536])
	*($5) = $1
	*($5 + [12]) = $0
	*($5 + [4]) = ($5 + [38])
	*($5 + [8]) = ($5 + [20])
	if ( $10 ){ goto $label$18 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$18
	CALL $132($11, $10, $2, $5)
	$10 = *($5 + [64])
	if ( ($10 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$1 = ($5 + [68])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$21 }
	$8 = *(($5 + [64]))
	goto $label$19 
	
.LABEL $label$20
	$8 = $10
	
.LABEL $label$19
	*($1) = $10
	CALL _ZdlPv($8)
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [80])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$7 = ($global$0 - [448])
	$global$0 = $7
	*($7 + [440]) = $2
	*($7 + [438]) = $3
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9749])
	CALL eosio_assert(((uint_32)*(($0 + [384])) >= (uint_32)$3), [9771])
	$8 = *(($0 + [320]))
	*($7 + [424]) = (CASTING uint_64)(uint_32 $8)
	$9 = *(($0 + [368]))
	CALL __multi3(($7 + [48]), $9, (int_64)$9 >> (int_64)63), (CASTING uint_64)(uint_32 $3), (int_64)0)
	*((($7 + [408]) + [8])) = *(($0 + [376]))
	*($7 + [408]) = $9
	$10 = *((($7 + [48]) + [8]))
	$9 = *($7 + [48])
	if ( (( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ) == 0) ){ goto $label$2 }
	if ( ( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ) ){ goto $label$1 }
	CALL eosio_assert([0], [9641])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9617])
	
.LABEL $label$1
	*($7 + [408]) = $9
	$10 = *($7 + [416])
	if ( ((int_64)$10 == (int_64)*($5 + [8])) ){ goto $label$3 }
	CALL eosio_assert([0], [9907])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($5) == (int_64)$9), [9795])
	*($7 + [400]) = ((int_64)((int_64)((int_64)$10 + (int_64)4) & (int_64)255) | (int_64)((int_64)$10 & (int_64)-256))
	$9 = ((int_64)*(($0 + [400])) * (int_64)$9)
	*($7 + [392]) = $9
	if ( (uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$4 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$4
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$9 = $10
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$9 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [9439])
	
.LABEL $label$5
	*(($7 + [384])) = [0]
	*($7 + [368]) = (int_64)-1
	*($7 + [376]) = (int_64)0
	*($7 + [388]) = [0]
	*($7 + [352]) = *($0)
	*($7 + [360]) = (uint_64)*(($0 + [376])) >> (uint_64)(int_64)8)
	$13 = [0]
	$14 = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	*($7 + [280]) = ($7 + [352])
	*($7 + [96]) = (int_64)-4503599627370496
	CALL $112(($7 + [304]), ($7 + [280]), ($7 + [96]))
	if ( (*($7 + [308]) == 0) ){ goto $label$18 }
	*($7 + [96]) = (int_64)-4503599627370496
	CALL $112(($7 + [304]), ($7 + [280]), ($7 + [96]))
	$12 = ($0 + [394])
	if ( (*($12) == 0) ){ goto $label$18 }
	$14 = [0]
	$8 = ($0 + [536])
	$13 = [0]
	$3 = [0]
	
.LOOP $label$19:
	if ( (*($7 + [308]) == 0) ){ goto $label$16 }
	$9 = *($8)
	$11 = *($7 + [308])
	*($7 + [100]) = ($7 + [424])
	*($7 + [96]) = ($7 + [392])
	if ( $11 ){ goto $label$20 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$20
	CALL $113(*($7 + [280]), $11, $9, ($7 + [96]))
	$11 = *($7 + [308])
	if ( ((int_64)*($11) != (int_64)*($7 + [440])) ){ goto $label$21 }
	$13 = *($11 + [8])
	
.LABEL $label$21
	if ( ((int_32)$3 == (int_32)(*($12) + [-1])) ){ goto $label$17 }
	CALL $114(($7 + [304]))
	$3 = ($3 + [1])
	if ( ($3 <= *($12)) ){ goto $label$19 }
	goto $label$16 
	
.LABEL $label$18
	$14 = [0]
	$13 = [0]
	goto $label$16 
	
.LABEL $label$17
	$14 = *($11 + [8])
	
.LABEL $label$16
	$2 = *($7 + [440])
	$11 = *(($7 + [380]))
	$8 = *(($7 + [376]))
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$23:
	$3 = ($11 + [-24])
	$12 = *($3)
	if ( ((int_64)*($12) == (int_64)$2) ){ goto $label$22 }
	$11 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$22
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$15 }
	if ( ((int_32)*($12 + [40]) == (int_32)($7 + [352])) ){ goto $label$14 }
	CALL eosio_assert([0], [8544])
	goto $label$14 
	
.LABEL $label$15
	$3 = CALL db_find_i64(*($7 + [352]), *(($7 + [360])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $54(($7 + [352]), $3)
	if ( ((int_32)*($12 + [40]) == (int_32)($7 + [352])) ){ goto $label$14 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$14
	*($7 + [351]) = [0]
	if ( ((int_32)*($0 + [544]) != (int_32)[1]) ){ goto $label$24 }
	CALL eosio_assert(((uint_32)(*($7 + [438]) + *($12 + [8])) <= (uint_32)*(($0 + [386]))), [9826])
	
.LABEL $label$24
	$9 = *($0 + [536])
	*($7 + [96]) = ($7 + [438])
	CALL $115(($7 + [352]), $12, $9, ($7 + [96]))
	if ( (($13 & [65535]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	*($7 + [351]) = [1]
	$9 = *($0 + [536])
	*($7 + [100]) = ($7 + [438])
	*($7 + [96]) = ($7 + [440])
	*($7 + [104]) = ($7 + [392])
	CALL $116(($7 + [304]), ($7 + [352]), $9, ($7 + [96]))
	if ( ($13 & [65535]) ){ goto $label$11 }
	
.LABEL $label$12
	$9 = ((int_64))(*($7 + [424]) - ((int_64)(CASTING uint_64)(uint_32 $14) & (int_64)65535)) + (int_64)*($7 + [438]))
	goto $label$10 
	
.LABEL $label$11
	$9 = ((int_64)*($7 + [424]) + (int_64)*($7 + [438]))
	
.LABEL $label$10
	*($7 + [424]) = $9
	*(($7 + [336])) = [0]
	*($7 + [320]) = (int_64)-1
	*($7 + [328]) = (int_64)0
	*($7 + [340]) = [0]
	$9 = *($0)
	*($7 + [304]) = $9
	$2 = (uint_64)*(($0 + [376])) >> (uint_64)(int_64)8
	*($7 + [312]) = $2)
	*($7 + [303]) = [0]
	$3 = CALL db_find_i64($9, $2, (int_64)-8524866889302279168, *($7 + [440]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$26 }
	$3 = CALL $60(($7 + [304]), $3)
	if ( ((int_32)*($3 + [24]) == (int_32)($7 + [304])) ){ goto $label$27 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$27
	$9 = *($0 + [536])
	*($7 + [96]) = $0
	*($7 + [100]) = ($7 + [438])
	CALL $117(($7 + [304]), $3, $9, ($7 + [96]))
	goto $label$25 
	
.LABEL $label$26
	*($7 + [303]) = [1]
	$9 = *($0 + [536])
	*($7 + [100]) = $0
	*($7 + [96]) = ($7 + [440])
	*($7 + [104]) = ($7 + [438])
	CALL $118(($7 + [280]), ($7 + [304]), $9, ($7 + [96]))
	if ( (*(($0 + [328])) <= *(($0 + [392]))) ){ goto $label$25 }
	*($7 + [280]) = ($7 + [304])
	*($7 + [96]) = (CASTING uint_64)(uint_32 ($7 + [280]))
	$3 = *(CALL $119(($7 + [96])) + [4])
	if ( ((int_32)*($3 + [24]) == (int_32)*($7 + [280])) ){ goto $label$28 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$28
	$11 = ($3 + [32])
	if ( ((int_32)*($11) != (int_32)[-1]) ){ goto $label$29 }
	$12 = *($7 + [280])
	*($11) = CALL db_idx_double_find_primary(*($12), *($12 + [8]), (int_64)-8524866889302279168, ($7 + [96]), *($3))
	
.LABEL $label$29
	*($7 + [100]) = $3
	*($7 + [96]) = ($7 + [280])
	CALL $57(($7 + [96]))
	CALL $58(*($7 + [280]), $3)
	
.LABEL $label$25
	$9 = *(($7 + [416]))
	*($7 + [288]) = ((int_64)((int_64)((int_64)$9 + (int_64)4) & (int_64)255) | (int_64)((int_64)$9 & (int_64)-256))
	$2 = ((int_64)*(($0 + [480])) * (int_64)*($7 + [408]))
	*($7 + [280]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$30 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$30
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$9 = $2
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$35 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	CALL eosio_assert([0], [9439])
	
.LABEL $label$31
	$9 = *(($7 + [416]))
	*($7 + [272]) = ((int_64)((int_64)((int_64)$9 + (int_64)4) & (int_64)255) | (int_64)((int_64)$9 & (int_64)-256))
	$2 = ((int_64)*(($0 + [496])) * (int_64)*($7 + [408]))
	*($7 + [264]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$36 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$36
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$42
	$9 = $2
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$43 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$40 }
	
.LABEL $label$41
	if ( ((int_64)$6 != (int_64)-7122829838779416576) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$39
	CALL eosio_assert([0], [9439])
	if ( ((int_64)$6 != (int_64)-7122829838779416576) ){ goto $label$37 }
	
.LABEL $label$38
	$6 = *(($0 + [528]))
	
.LABEL $label$37
	$9 = *(($0 + [376]))
	*($7 + [256]) = $9
	$2 = ((int_64)*($7 + [280]) / (int_64)10000)
	*($7 + [248]) = $2
	$10 = *($0)
	$15 = *($4 + [8])
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$44 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$44
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$9 = $2
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$49 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	CALL eosio_assert([0], [9439])
	
.LABEL $label$45
	*(($7 + [240])) = [0]
	*($7 + [232]) = (int_64)0
	$3 = CALL $187([9849])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$55 }
	*($7 + [232]) = ($3 << [1])
	$11 = (($7 + [232]) | [1])
	if ( $3 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$12 = (($3 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($7 + [232]) = ($12 | [1])
	*($7 + [240]) = $11
	*($7 + [236]) = $3
	
.LABEL $label$54
	CALL memcpy($11, [9849], $3)
	
.LABEL $label$53
	*(($11 + $3)) = [0]
	*((($7 + [32]) + [8])) = *((($7 + [248]) + [8]))
	*($7 + [32]) = *($7 + [248])
	CALL $52($0, $15, $10, $6, ($7 + [32]), ($7 + [232]))
	if ( ((*($7 + [232]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($7 + [240]))
	
.LABEL $label$56
	$10 = *(($4 + [8]))
	$6 = *($0)
	$15 = CALL $120($0, *($0 + [120]))
	$9 = *(($0 + [376]))
	*($7 + [224]) = $9
	$2 = ((int_64)*($7 + [264]) / (int_64)10000)
	*($7 + [216]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$57 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$57
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$60:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$59 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$61 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$61
	$9 = $2
	
.LOOP $label$62:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$59 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$62 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	CALL eosio_assert([0], [9439])
	
.LABEL $label$58
	*(($7 + [208])) = [0]
	*($7 + [200]) = (int_64)0
	$3 = CALL $187([9874])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$51 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$65 }
	*($7 + [200]) = ($3 << [1])
	$11 = (($7 + [200]) | [1])
	if ( $3 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$12 = (($3 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($7 + [200]) = ($12 | [1])
	*($7 + [208]) = $11
	*($7 + [204]) = $3
	
.LABEL $label$64
	CALL memcpy($11, [9874], $3)
	
.LABEL $label$63
	*(($11 + $3)) = [0]
	*((($7 + [16]) + [8])) = *((($7 + [216]) + [8]))
	*($7 + [16]) = *($7 + [216])
	CALL $52($0, $10, $6, $15, ($7 + [16]), ($7 + [200]))
	if ( ((*($7 + [200]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*($7 + [208]))
	
.LABEL $label$66
	$9 = *((($7 + [408]) + [8]))
	*($7 + [192]) = ((int_64)((int_64)((int_64)$9 + (int_64)4) & (int_64)255) | (int_64)((int_64)$9 & (int_64)-256))
	$2 = ((int_64)*(($0 + [432])) * (int_64)*($7 + [408]))
	*($7 + [184]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$67 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$67
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$70:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$69 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$71 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$71
	$9 = $2
	
.LOOP $label$72:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$69 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$72 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	CALL eosio_assert([0], [9439])
	
.LABEL $label$68
	$9 = *(($7 + [416]))
	*($7 + [176]) = ((int_64)((int_64)((int_64)$9 + (int_64)4) & (int_64)255) | (int_64)((int_64)$9 & (int_64)-256))
	$2 = ((int_64)*(($0 + [448])) * (int_64)*($7 + [408]))
	*($7 + [168]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$73 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$73
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$76:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$75 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$77 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$77
	$9 = $2
	
.LOOP $label$78:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$75 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$78 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$75
	CALL eosio_assert([0], [9439])
	
.LABEL $label$74
	$9 = *(($7 + [416]))
	*($7 + [160]) = ((int_64)((int_64)((int_64)$9 + (int_64)4) & (int_64)255) | (int_64)((int_64)$9 & (int_64)-256))
	$2 = ((int_64)*(($0 + [464])) * (int_64)*($7 + [408]))
	*($7 + [152]) = $2
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$79 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$79
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$81 }
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$83 }
	$9 = $2
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$83
	$9 = $2
	
.LOOP $label$84:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$81 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$84 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	CALL eosio_assert([0], [9439])
	
.LABEL $label$80
	$13 = ($0 + [136])
	$9 = *($0 + [216])
	$11 = *(($0 + [164]))
	$8 = *(($0 + [160]))
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$86 }
	
.LOOP $label$88:
	$3 = ($11 + [-24])
	$12 = *($3)
	if ( ((int_64)*($12) == (int_64)$9) ){ goto $label$87 }
	$11 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$86 }
	if ( ((int_32)*(($12 + [140])) == (int_32)$13) ){ goto $label$85 }
	CALL eosio_assert([0], [8544])
	goto $label$85 
	
.LABEL $label$86
	$12 = [0]
	$3 = CALL db_find_i64(*($13), *(($0 + [144])), (int_64)7035938066996920320, $9)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$85 }
	$12 = CALL $36($13, $3)
	if ( ((int_32)*($12 + [140]) == (int_32)$13) ){ goto $label$85 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$85
	$9 = *($0 + [536])
	*($7 + [96]) = $0
	*($7 + [104]) = $5
	*($7 + [100]) = ($7 + [438])
	*($7 + [108]) = ($7 + [424])
	*($7 + [112]) = ($7 + [351])
	*($7 + [116]) = ($7 + [303])
	*($7 + [120]) = ($7 + [392])
	*($7 + [124]) = ($7 + [184])
	*($7 + [128]) = ($7 + [168])
	*($7 + [132]) = ($7 + [152])
	*($7 + [136]) = ($7 + [408])
	*($7 + [140]) = ($7 + [280])
	*($7 + [144]) = ($7 + [264])
	if ( $12 ){ goto $label$89 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$89
	CALL $121($13, $12, $9, ($7 + [96]))
	$9 = *(($0 + [512]))
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$90 }
	$6 = *(($0 + [520]))
	$15 = *(($7 + [416]))
	$2 = ((int_64)*($7 + [408]) * (int_64)$9)
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$91 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$91
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$94 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$97 }
	$9 = $10
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$95 }
	goto $label$96 
	
.LABEL $label$97
	$9 = $10
	
.LOOP $label$98:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$94 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$98 }
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$95 }
	
.LABEL $label$96
	if ( ((int_64)(((int_64)$15 & (int_64)255) == 0) == 0) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	CALL eosio_assert([0], [9439])
	if ( (int_64)(((int_64)$15 & (int_64)255) == 0) ){ goto $label$92 }
	
.LABEL $label$93
	$3 = ((CASTING uint_32)(uint_64 $15) & [255])
	
.LOOP $label$99:
	$2 = ((int_64)$2 / (int_64)10)
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$99 }
	
.LABEL $label$92
	*(($7 + [72])) = [0]
	*($7 + [80]) = $2
	*($7 + [88]) = $6
	*($7 + [64]) = (int_64)0
	$9 = *($7 + [440])
	$3 = CALL $187([9893])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$50 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$102 }
	*($7 + [64]) = ($3 << [1])
	$11 = (($7 + [64]) | [1])
	if ( $3 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$12 = (($3 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($7 + [64]) = ($12 | [1])
	*($7 + [72]) = $11
	*($7 + [68]) = $3
	
.LABEL $label$101
	CALL memcpy($11, [9893], $3)
	
.LABEL $label$100
	*(($11 + $3)) = [0]
	*(($7 + [8])) = *((($7 + [80]) + [8]))
	*($7) = *($7 + [80])
	CALL $122($0, $9, $7, ($7 + [64]))
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$90 }
	CALL _ZdlPv(*($7 + [72]))
	
.LABEL $label$90
	$0 = *($7 + [328])
	if ( ($0 == 0) ){ goto $label$103 }
	$12 = ($7 + [332])
	$3 = *($12)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$105 }
	
.LOOP $label$106:
	$3 = ($3 + [-24])
	$11 = *($3)
	*($3) = [0]
	if ( ($11 == 0) ){ goto $label$107 }
	CALL _ZdlPv($11)
	
.LABEL $label$107
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$106 }
	$3 = *(($7 + [328]))
	goto $label$104 
	
.LABEL $label$105
	$3 = $0
	
.LABEL $label$104
	*($12) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$103
	$0 = *($7 + [376])
	if ( ($0 == 0) ){ goto $label$108 }
	$12 = ($7 + [380])
	$3 = *($12)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$110 }
	
.LOOP $label$111:
	$3 = ($3 + [-24])
	$11 = *($3)
	*($3) = [0]
	if ( ($11 == 0) ){ goto $label$112 }
	CALL _ZdlPv($11)
	
.LABEL $label$112
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$111 }
	$3 = *(($7 + [376]))
	goto $label$109 
	
.LABEL $label$110
	$3 = $0
	
.LABEL $label$109
	*($12) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$108
	$global$0 = ($7 + [448])
	return (unreachable)
	
.LABEL $label$52
	CALL $150(($7 + [232]))
	
.LABEL $label$51
	CALL $150(($7 + [200]))
	
.LABEL $label$50
	CALL $150(($7 + [64]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$2 = CALL $190($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$7
	$7 = ($5 + [8])
	CALL memcpy($5, $2, [8])
	$8 = ($2 + [8])
	$4 = ($4 & [-8])
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$9 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$9
	CALL memcpy(($3 + [24]), $7, [8])
	*(($5 + [16])) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$9 = *($5)
	*($3 + [24]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$12 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $111(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $193($2)
	
.LABEL $label$10
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $66 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	*(($4 = (($3 + [8]) + [24]))) = (int_64)3617214756542218240
	*($3 + [16]) = (int_64)3617214756542218240
	*($3 + [8]) = *($0)
	*($3 + [24]) = *($0 + [536])
	*(($5 = CALL _Znwj([32]))) = *($3 + [8])
	*(($5 + [8])) = *($3 + [16])
	*($5 + [16]) = *($3 + [24])
	*(($5 + [24])) = *($4)
	*($3 + [40]) = $5
	$5 = ($5 + [32])
	*($3 + [48]) = $5
	*($3 + [44]) = $5
	$5 = CALL $134(($3 + [56]), ($3 + [40]), *($0), $1, $2)
	CALL $100($5)
	$0 = *($5 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	*(($5 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($5 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	*($3 + [44]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($3 + [96])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($1 + [138]) = [1]
	$6 = *($1)
	$7 = $4
	$4 = ($7 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($7 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [96])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [10])
	*($3 + [44]) = ($5 + [16])
	CALL $106(($3 + [32]), ($3 + [24]))
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $107(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $193($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	CALL $47($0)
	$2 = ($0 + [136])
	$4 = *(($0 + [164]))
	$3 = *(($0 + [160]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*(($6 + [140])) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [144])), (int_64)7035938066996920320, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $36($2, $5)
	if ( ((int_32)*($6 + [140]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9459])
	CALL eosio_assert(((int_32)*($6 + [136]) ^ (int_32)[1]), [9475])
	CALL eosio_assert(((uint_64)*($6 + [8]) > (uint_64)((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000)), [9712])
	CALL memcpy(($0 + [216]), $6, [139])
	$2 = ($0 + [176])
	$4 = *(($0 + [204]))
	$3 = *(($0 + [200]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$7 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	if ( ((int_32)*($6 + [176]) == (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert([0], [8544])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($2), *(($0 + [184])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $34($2, $5)
	if ( ((int_32)*($6 + [176]) == (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert([0], [8544])
	goto $label$5 
	
.LABEL $label$9
	$6 = [0]
	CALL eosio_assert([0], [9730])
	
.LABEL $label$5
	CALL memcpy(($0 + [360]), $6, [176])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*(($0 + [32])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($0 + [40])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$4 = *(($1 + [4]))
	
.LABEL $label$6
	CALL memcpy($0, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)-3073298666750525441) ){ goto $label$17 }
	if ( ((int_64)$2 <= (int_64)4923678602614013951) ){ goto $label$16 }
	if ( ((int_64)$2 <= (int_64)5606348217378668543) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)5606348217378668544) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)5606362313639067648) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)7335585888509886464) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3 + [64]) = *($3 + [216])
	CALL $3($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [136]) = *($3 + [144])
	CALL $5($0, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-4417060053085847553) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-6533258700415565824) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [104]) = *($3 + [176])
	CALL $7($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)4520488125973135359) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3073298666750525440) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4222381386624925696) ){ goto $label$1 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [4]
	*($3 + [48]) = *($3 + [232])
	CALL $9($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)-4417015722077454337) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4417017204164263936) ){ goto $label$1 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [5]
	*($3 + [16]) = *($3 + [264])
	CALL $11($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4923678602614013952) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5378311985366564864) ){ goto $label$1 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [6]
	*($3 + [24]) = *($3 + [256])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4417060053085847552) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417032211186843648) ){ goto $label$1 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [7]
	*($3 + [8]) = *($3 + [272])
	CALL $15($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$1 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [8]
	*($3 + [72]) = *($3 + [208])
	CALL $17($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4417015722077454336) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3073298666878926848) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [88]) = *($3 + [192])
	CALL $7($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [120]) = *($3 + [160])
	CALL $20($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [156]) = [0]
	*($3 + [152]) = [11]
	*($3 + [128]) = *($3 + [152])
	CALL $20($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [172]) = [0]
	*($3 + [168]) = [12]
	*($3 + [112]) = *($3 + [168])
	CALL $7($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [188]) = [0]
	*($3 + [184]) = [13]
	*($3 + [96]) = *($3 + [184])
	CALL $7($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [228]) = [0]
	*($3 + [224]) = [14]
	*($3 + [56]) = *($3 + [224])
	CALL $25($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [284]) = [0]
	*($3 + [280]) = [15]
	*($3) = *($3 + [280])
	CALL $5($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	*($3 + [244]) = [0]
	*($3 + [240]) = [16]
	*($3 + [40]) = *($3 + [240])
	CALL $28($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [204]) = [0]
	*($3 + [200]) = [17]
	*($3 + [80]) = *($3 + [200])
	CALL $30($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [252]) = [0]
	*($3 + [248]) = [18]
	*($3 + [32]) = *($3 + [248])
	CALL $28($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $171([0])
	$global$0 = ($3 + [288])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	CALL $90(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $88(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $193($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *(($6 + [88]))
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = ($6 + [72])
	$9 = CALL db_lowerbound_i64(*($8), *(($6 + [80])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $89($8, $9)
	*($3 + [28]) = [0]
	*($3 + [24]) = $8
	$7 = *(*(CALL $91(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [88])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8931])
	$7 = *(($6 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [88])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	*($1 + [8]) = *(*($5 + [4]))
	$8 = *($5 + [8])
	*(($6 = ($1 + [32]))) = *(($8 + [8]))
	*($1 + [24]) = *($8)
	$8 = *($5 + [12])
	*($1 + [40]) = *($8)
	*(($1 + [48])) = *(($8 + [8]))
	*($1 + [16]) = *(*($5 + [16]))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-8])
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	CALL $92(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $7, $5, [56])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$7 = *($5)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [64]) = CALL db_idx64_store($7, (int_64)-3665743729458675712, $10, $11, ($3 + [24]))
	$7 = *($0)
	$10 = *($5)
	$11 = *($1)
	*($3 + [24]) = *($6)
	*(($1 + [68])) = CALL db_idx64_store($10, (int_64)-3665743729458675711, $7, $11, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8595])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $85($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $84($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $155($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $155($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $150($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $153($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	$7 = $2
	if ( ((int_32)$4 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$7 = *($3 + [4])
	
.LABEL $label$4
	CALL memcpy($7, $1, [8])
	*($3 + [4]) = ($7 + [8])
	CALL $86($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $193($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $81(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $82(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_64 .FUNC $182 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $179($3, (int_64)0)
	$4 = CALL $181($3, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $193($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $193($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $188(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10520])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $188(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [40])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $6, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [48])) = *($2 + [8])
	*($6) = (*($6) + [8])
	$6 = *($0)
	$0 = ($6 + [56])
	$4 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$4 = *(($5 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$0 = ($6 + [64])
	$4 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$4 = *(($5 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $4, [8])
	$4 = (*($4) + [8])
	*(($4 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$4 = *(($5 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $4, [8])
	*(($6 + [72])) = *($2 + [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$4 = ($6 + [80])
	$1 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $1) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$1 = *(($5 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $1, [8])
	$1 = (*($1) + [8])
	*(($1 = ($5 + [4]))) = $1
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $1) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$1 = *(($5 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $1, [8])
	*(($6 + [88])) = *($2 + [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [104])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $6, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [112])) = *($2 + [8])
	*($6) = (*($6) + [8])
	$5 = *($0)
	$0 = ($5 + [120])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [128])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [136])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [144])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [152])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$7
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [160])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [168])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$9
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$10
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [176])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$6 = ($5 + [184])
	$1 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $1) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8224])
	$1 = *(($5 + [4]))
	
.LABEL $label$11
	CALL memcpy($6, $1, [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $190($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10520])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $190($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $158($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $150($0)
}

void .FUNC $73 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [112])
	$global$0 = $3
	*(($4 = (($3 + [8]) + [24]))) = (int_64)3617214756542218240
	*($3 + [16]) = (int_64)3617214756542218240
	*($3 + [8]) = *($0)
	*($3 + [24]) = *($0 + [536])
	$5 = CALL _Znwj([32])
	*(($3 + [76])) = [0]
	*(($5 + [8])) = *($3 + [16])
	*($5) = *($3 + [8])
	*($5 + [16]) = *($3 + [24])
	*(($5 + [24])) = *($4)
	$4 = ($5 + [32])
	*(($3 + [60])) = $4
	*((($3 + [40]) + [24])) = $4
	*($3 + [48]) = $1
	*($3 + [56]) = $5
	*($3 + [68 align=4]) = (int_64)0
	*($3 + [40]) = *($0)
	CALL $85(($3 + [68]), [42])
	$4 = (($3 + [40]) + [32])
	$5 = *($4)
	$0 = *($3 + [68])
	*($3 + [84]) = $0
	*($3 + [80]) = $0
	*($3 + [88]) = $5
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = $2
	CALL $137(($3 + [104]), ($3 + [96]))
	CALL $100(($3 + [40]))
	$5 = *($3 + [68])
	if ( ($5 == 0) ){ goto $label$1 }
	*($4) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$5 = *($3 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	*(($3 + [60])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [112])
}

void .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $190($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $136(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [10095])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [10200])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10133])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10200])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$10
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$12
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$15 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$16 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$16
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$17
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$18
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$19 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$19
	CALL memcpy(($2 + [8]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$20 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$20
	CALL memcpy(($2 + [8]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$4 = *($0 + [56])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$21 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$21
	CALL memcpy(($2 + [8]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$16
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$17
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$18
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$19 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$19
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$20 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$20
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$21 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$21
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [56])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$22 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$22
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$23 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$23
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [60])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$24 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$24
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$25 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$25
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [64])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$26 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$26
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $83(($3 + [32]), $8)
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $82(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $193($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $153($7, *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$3 = *($7)
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $190($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$8 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8653])
	$8 = *($5 + [4])
	
.LABEL $label$7
	CALL memcpy($8, $1, [8])
	*($5 + [4]) = ($8 + [8])
	CALL $86($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $193($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$10
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$12
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$15 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$16 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$16
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$6 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$17
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [8653])
	$3 = *($5)
	
.LABEL $label$18
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [48]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$19 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$19
	CALL memcpy($5, ($2 + [8]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [52]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$20 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$20
	CALL memcpy($5, ($2 + [8]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [56]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$21 }
	CALL eosio_assert([0], [8653])
	$0 = *(($1 + [4]))
	
.LABEL $label$21
	CALL memcpy($0, ($2 + [8]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $86(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = *($3 + [4])
	*(($1 + [16])) = *(($5 + [8]))
	*($1 + [8]) = *($5)
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [26]) = *(*($3 + [12]))
	*($1 + [28]) = *(*($3 + [16]))
	*($1 + [30]) = *(*($3 + [20]))
	*($1 + [32]) = *(*($3 + [24]))
	*($1 + [34]) = *(*($3 + [28]))
	$5 = *($3 + [32])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$5 = *($3 + [36])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$5 = *($3 + [40])
	*($1 + [72]) = *($5)
	*(($1 + [80])) = *(($5 + [8]))
	$5 = *($3 + [44])
	*($1 + [88]) = *($5)
	*(($1 + [96])) = *(($5 + [8]))
	$5 = *($3 + [48])
	*($1 + [104]) = *($5)
	*(($1 + [112])) = *(($5 + [8]))
	$5 = *($3 + [52])
	*($1 + [120]) = *($5)
	*(($1 + [128])) = *(($5 + [8]))
	$5 = *($3 + [56])
	*($1 + [136]) = *($5)
	*(($1 + [144])) = *(($5 + [8]))
	$5 = *($3 + [60])
	*($1 + [152]) = *($5)
	*(($1 + [160])) = *(($5 + [8]))
	*($1 + [168]) = *(*($3 + [64]))
	*($2 + [184]) = ($2 + [172])
	*($2 + [180]) = $2
	*($2 + [176]) = $2
	*($2 + [192]) = ($2 + [176])
	*($2 + [204]) = ($1 + [8])
	*($2 + [200]) = $1
	*($2 + [208]) = ($1 + [24])
	*($2 + [212]) = ($1 + [26])
	*($2 + [216]) = ($1 + [28])
	*($2 + [220]) = ($1 + [30])
	*($2 + [224]) = ($1 + [32])
	*($2 + [228]) = ($1 + [34])
	*($2 + [232]) = ($1 + [40])
	*($2 + [236]) = ($1 + [56])
	*($2 + [240]) = ($1 + [72])
	*($2 + [244]) = ($1 + [88])
	*($2 + [248]) = ($1 + [104])
	*($2 + [252]) = ($1 + [120])
	*($2 + [256]) = ($1 + [136])
	*($2 + [260]) = ($1 + [152])
	*($2 + [264]) = ($1 + [168])
	CALL $96(($2 + [200]), ($2 + [192]))
	$6 = *($1)
	*($1 + [180]) = CALL db_store_i64(*($4 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $6, $2, [172])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [272])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*($0 + [140]) = $1
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	$1 = *($2)
	CALL $97(*($2 + [4]), $0)
	*($3 + [144]) = ($3 + [135])
	*($3 + [140]) = $3
	*($3 + [136]) = $3
	*($3 + [152]) = ($3 + [136])
	*($3 + [164]) = ($0 + [8])
	*($3 + [160]) = $0
	*($3 + [168]) = ($0 + [16])
	*($3 + [172]) = ($0 + [32])
	*($3 + [176]) = ($0 + [48])
	*($3 + [180]) = ($0 + [64])
	*($3 + [184]) = ($0 + [80])
	*($3 + [188]) = ($0 + [96])
	*($3 + [192]) = ($0 + [104])
	*($3 + [196]) = ($0 + [108])
	*($3 + [200]) = ($0 + [112])
	*($3 + [204]) = ($0 + [120])
	*($3 + [208]) = ($0 + [136])
	*($3 + [212]) = ($0 + [137])
	*($3 + [216]) = ($0 + [138])
	CALL $98(($3 + [160]), ($3 + [152]))
	$4 = *($0)
	*($0 + [144]) = CALL db_store_i64(*($1 + [8]), (int_64)7035938066996920320, *(*($2 + [8])), $4, $3, [135])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [224])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$7 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$9 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [36])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$13
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [40])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$14
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$15
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [44])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$16
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$17 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$17
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [48])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$18
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$19 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$19
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [52])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$20 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$20
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$21 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$21
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [56])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$22 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$22
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$23 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$23
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [60])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$24 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$24
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$25 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$25
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [64])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$26 }
	CALL eosio_assert([0], [8653])
	$1 = *(($0 + [4]))
	
.LABEL $label$26
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	*($1) = *(*($0))
	$2 = CALL current_time()
	*($1 + [8]) = ((int_64)((int_64)*(*($0 + [4])) * (int_64)15461882265600000) >> (int_64)32) + (int_64)((uint_64)$2 / (uint_64)(int_64)1000))
	$3 = [0]
	$4 = *(*($0 + [12]) + [8])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8
	$5 = $2)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9439])
	
.LABEL $label$1
	$6 = ((int_64)((int_64)((int_64)$4 + (int_64)4) & (int_64)255) | (int_64)((int_64)$4 & (int_64)-256))
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$10 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [9439])
	
.LABEL $label$6
	*($1 + [16]) = (int_64)0
	*(($1 + [24])) = $6
	$3 = [0]
	$4 = *(*(($0 + [12])) + [8])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8
	$5 = $2)
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$5 = $6
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$5 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$15 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [9439])
	
.LABEL $label$11
	$6 = ((int_64)((int_64)((int_64)$4 + (int_64)4) & (int_64)255) | (int_64)((int_64)$4 & (int_64)-256))
	$3 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $5
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$20 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [9439])
	
.LABEL $label$16
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = $6
	$3 = [0]
	$4 = *(*(($0 + [12])) + [8])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8
	$5 = $2)
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$5 = $6
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$5 = $6
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$25 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	CALL eosio_assert([0], [9439])
	
.LABEL $label$21
	$6 = ((int_64)((int_64)((int_64)$4 + (int_64)4) & (int_64)255) | (int_64)((int_64)$4 & (int_64)-256))
	$3 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$2 = $5
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$30 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [9439])
	
.LABEL $label$26
	*($1 + [48]) = (int_64)0
	*(($1 + [56])) = $6
	$3 = *($0 + [16])
	$2 = *($3 + [8])
	$5 = ((int_64)$2 & (int_64)-256)
	$6 = ((int_64)((int_64)$2 + (int_64)4) & (int_64)255)
	$4 = ((int_64)*($3) * (int_64)10000)
	if ( (uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$31 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$31
	$6 = ((int_64)$6 | (int_64)$5)
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$2 = $5
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$36 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	CALL eosio_assert([0], [9439])
	
.LABEL $label$32
	*($1 + [64]) = $4
	*(($1 + [72])) = $6
	$3 = [0]
	$4 = *(*(($0 + [12])) + [8])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8
	$5 = $2)
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$5 = $6
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$5 = $6
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$41 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	CALL eosio_assert([0], [9439])
	
.LABEL $label$37
	$6 = ((int_64)((int_64)((int_64)$4 + (int_64)4) & (int_64)255) | (int_64)((int_64)$4 & (int_64)-256))
	$3 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$2 = $5
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$46 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	CALL eosio_assert([0], [9439])
	
.LABEL $label$42
	*($1 + [80]) = (int_64)0
	*(($1 + [88])) = $6
	$6 = *(*(($0 + [12])) + [8])
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$2 = $5
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$2 = $5
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$51 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	CALL eosio_assert([0], [9439])
	
.LABEL $label$47
	*($1 + [120]) = (int_64)0
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)0
	*($1 + [112]) = [0]
	*($1 + [136]) = [0]
	*($1 + [138]) = [0]
	*(($1 + [128])) = $6
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $1, [8])
	$1 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $1
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $1) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $1, [8])
	*($4 + [8]) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9037])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8983])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [8983])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $89(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($1, $4, [8])
	$1 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $1
	*($2 + [8]) = *($4 + [8])
	if ( ((int_32)(*(($0 + [8])) - $1) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8653])
	$1 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($1, ($2 + [8]), [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $186(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [64])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3665743729458675712, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [64]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *((*($4 + [4]) + [32]))
	if ( (CALL $186((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [68]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3665743729458675711, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [68])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (*($0) + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$4 = *($0)
	$3 = ($4 + [30])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [2])
	*(($0 = ($0 + [4]))) = (*($0) + [2])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [2])
	*(($0 = ($0 + [4]))) = (*($0) + [2])
	$3 = ($4 + [34])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$5 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [2])
	*(($0 = ($0 + [4]))) = (*($0) + [2])
	*($2 + [8]) = $4
	CALL $139(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [40])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $6, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [48])) = *($2 + [8])
	*($6) = (*($6) + [8])
	$5 = *($0)
	$0 = ($5 + [56])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [64])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [72])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [80])) = *($2 + [8])
	*($4) = (*($4) + [8])
	$0 = ($5 + [88])
	$4 = *($6 + [4])
	$6 = *($1)
	if ( ((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8224])
	$4 = *(($6 + [4]))
	
.LABEL $label$7
	CALL memcpy($0, $4, [8])
	$0 = (*($4) + [8])
	*(($4 = ($6 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($6 + [8])) - $0) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8224])
	$0 = *($4)
	
.LABEL $label$8
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [96])) = *($2 + [8])
	*($4) = (*($4) + [8])
	*($2 + [8]) = $5
	CALL $140(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($1 + [16]) = (int_64)0
	*($5 + [16]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($1 + [32])))
	$6 = *($1)
	$7 = $4
	$4 = ($7 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($7 + [-14])
	*($5 + [24]) = $5
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	$7 = ($1 + [32])
	*($5 + [44]) = $7
	CALL $127(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [34])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [32]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($7)))
	if ( (CALL $186(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$4 }
	$4 = ($1 + [48])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [24]), $6)
	*($4) = $1
	
.LABEL $label$5
	CALL db_idx_double_update($1, $2, ($5 + [32]))
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$3 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$3
	$7 = (int_64)
	*($1 + [16]) = $7(*($1 + [16]) - *($3)))
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [10300])
	if ( ((int_64)*(($1 + [16])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [10322])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8791])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [96])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	$6 = *($1)
	CALL $133($3, $1)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [96])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = *($0)
	$3 = *(($2 + [390]))
	$4 = *($1 + [8])
	$5 = *(*($0 + [4]))
	$6 = CALL current_time()
	*($1 + [108]) = (*($1 + [108]) + [-1])
	*($1 + [96]) = (int_64))(*($1 + [96]) - *(*($0 + [4])))
	*($1 + [104]) = (*($1 + [104]) - *(*($0 + [8])))
	$3 = ((int_64)$4 + (int_64)((int_64)((int_64)((int_64)$3 * (int_64)$5) * (int_64)1000) & (int_64)4294967288))
	$6 = ((int_64)((int_64)*(($2 + [388])) * (int_64)15461882265600000) >> (int_64)32) + (int_64)((uint_64)$6 / (uint_64)(int_64)1000)
	*($1 + [8]) = ( $6) ? $3 : ((uint_64)$3 > (uint_64)$6) )
	$2 = *($0 + [12])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$1 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$1
	$3 = (int_64)
	*($1 + [16]) = $3(*($1 + [16]) - *($2)))
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [10300])
	$3 = *(($1 + [16]))
	
.LABEL $label$2
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [10322])
	
.LABEL $label$3
	$0 = *(($0 + [12]))
	if ( ((int_64)*($0 + [8]) == (int_64)*(($1 + [40]))) ){ goto $label$4 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$4
	$3 = (int_64)
	*($1 + [32]) = $3(*($1 + [32]) - *($0)))
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$3 >= (int_64)4611686018427387904) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [10300])
	if ( ((int_64)*(($1 + [32])) < (int_64)4611686018427387904) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [10322])
	return 
	
.LABEL $label$5
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	*($0 + [16 align=4]) = *($1)
	*($5) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $85(($0 + [28]), [16])
	$1 = *($0 + [28])
	$5 = (*(($0 + [32])) - $1)
	if ( ((int_32)$5 > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$1
	CALL memcpy($1, $4, [8])
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)($5 + [-8]) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$2
	CALL memcpy($1, $4, [8])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	*($0 + [16 align=4]) = *($1)
	*($6) = *($1 + [8])
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $85(($0 + [28]), [16])
	$1 = *($0 + [28])
	$6 = (*(($0 + [32])) - $1)
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$1
	CALL memcpy($1, $4, [8])
	*($5 + [8]) = *($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)($6 + [-8]) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [8]), [8])
	$global$0 = ($5 + [16])
	return $0
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $83(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$3 = ($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *(($0 + [32]))
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($0 + [40])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	$4 = *(($1 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $0, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $180($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $170()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $180($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19025]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $179($0, (int_64)0)
	*(CALL $170()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $180($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $180($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $180($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $180($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19025])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $180($0)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $180($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8215]))
	$8 = (int_64)0
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $180($0)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $180($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19025]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $179($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19025]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19025]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $180($0) + [19025]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $170()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $170()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $170()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	$3 = *(($2 + [390]))
	$4 = *($1 + [8])
	$5 = *(*($0 + [4]))
	$6 = CALL current_time()
	$3 = ((int_64)$4 + (int_64)((int_64)((int_64)((int_64)$3 * (int_64)$5) * (int_64)1000) & (int_64)4294967288))
	$6 = ((int_64)((int_64)*(($2 + [388])) * (int_64)15461882265600000) >> (int_64)32) + (int_64)((uint_64)$6 / (uint_64)(int_64)1000)
	*($1 + [8]) = ( $6) ? $3 : ((uint_64)$3 > (uint_64)$6) )
	if ( ((int_32)*($2 + [544]) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($0 + [8])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [128]))) ){ goto $label$2 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$2
	$3 = ((int_64)*($1 + [120]) + (int_64)*($2))
	*($1 + [120]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [9338])
	$3 = *(($1 + [120]))
	
.LABEL $label$3
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$1 }
	CALL eosio_assert([0], [9372])
	
.LABEL $label$1
	*($1 + [96]) = ((int_64)*($1 + [96]) + (int_64)*(*(($0 + [4]))))
	*($1 + [104]) = *(*($0 + [12]))
	*($1 + [108]) = (*($1 + [108]) + *(*($0 + [16])))
	*($1 + [112]) = (*($1 + [112]) + *(*($0 + [20])))
	$2 = *($0 + [24])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$4 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$4
	$3 = ((int_64)*($1 + [16]) + (int_64)*($2))
	*($1 + [16]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9338])
	$3 = *(($1 + [16]))
	
.LABEL $label$5
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$6 }
	CALL eosio_assert([0], [9372])
	
.LABEL $label$6
	$2 = *($0 + [28])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [56]))) ){ goto $label$7 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$7
	$3 = ((int_64)*($1 + [48]) + (int_64)*($2))
	*($1 + [48]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [9338])
	$3 = *(($1 + [48]))
	
.LABEL $label$8
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$9 }
	CALL eosio_assert([0], [9372])
	
.LABEL $label$9
	$2 = *($0 + [32])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [72]))) ){ goto $label$10 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$10
	$3 = ((int_64)*($1 + [64]) + (int_64)*($2))
	*($1 + [64]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$11 }
	CALL eosio_assert([0], [9338])
	$3 = *(($1 + [64]))
	
.LABEL $label$11
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$12 }
	CALL eosio_assert([0], [9372])
	
.LABEL $label$12
	$2 = *($0 + [36])
	if ( ((int_64)*($2 + [8]) == (int_64)*(($1 + [88]))) ){ goto $label$13 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$13
	$3 = ((int_64)*($1 + [80]) + (int_64)*($2))
	*($1 + [80]) = $3
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$14 }
	CALL eosio_assert([0], [9338])
	$3 = *(($1 + [80]))
	
.LABEL $label$14
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$15 }
	CALL eosio_assert([0], [9372])
	
.LABEL $label$15
	$2 = *($0 + [40])
	$3 = *($2 + [8])
	$4 = ((int_64)$3 & (int_64)-256)
	$5 = ((int_64)((int_64)$3 + (int_64)4) & (int_64)255)
	$6 = ((int_64)*($2) * (int_64)10000)
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$16 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$16
	$5 = ((int_64)$5 | (int_64)$4)
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$3 = $4
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$3 = $4
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $7 ){ goto $label$21 }
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert([0], [9439])
	
.LABEL $label$17
	$2 = *(($0 + [24]))
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$22 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$22
	$3 = (int_64)
	if ( ((int_64)$3($6 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$24 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$23 }
	CALL eosio_assert([0], [10322])
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([0], [10300])
	
.LABEL $label$23
	$2 = *(($0 + [28]))
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$25 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$25
	$3 = (int_64)
	if ( ((int_64)$3($3 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$27 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$26 }
	CALL eosio_assert([0], [10322])
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [10300])
	
.LABEL $label$26
	$2 = *(($0 + [32]))
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$28 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$28
	$3 = (int_64)
	if ( ((int_64)$3($3 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$30 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$29 }
	CALL eosio_assert([0], [10322])
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert([0], [10300])
	
.LABEL $label$29
	$2 = *(($0 + [36]))
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$31 }
	CALL eosio_assert([0], [10252])
	
.LABEL $label$31
	$3 = (int_64)
	if ( ((int_64)$3($3 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$35 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$34 }
	CALL eosio_assert([0], [10322])
	$2 = *($0 + [44])
	if ( ((int_64)*($2 + [8]) != (int_64)$5) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	CALL eosio_assert([0], [10300])
	
.LABEL $label$34
	$2 = *($0 + [44])
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$32 }
	
.LABEL $label$33
	CALL eosio_assert([0], [10252])
	
.LABEL $label$32
	$3 = (int_64)
	if ( ((int_64)$3($3 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$39 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$38 }
	CALL eosio_assert([0], [10322])
	$2 = *($0 + [48])
	if ( ((int_64)*($2 + [8]) != (int_64)$5) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	CALL eosio_assert([0], [10300])
	
.LABEL $label$38
	$2 = *($0 + [48])
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$36 }
	
.LABEL $label$37
	CALL eosio_assert([0], [10252])
	
.LABEL $label$36
	$3 = (int_64)
	if ( ((int_64)$3($3 - *($2))) <= (int_64)-4611686018427387904) ){ goto $label$41 }
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$40 }
	CALL eosio_assert([0], [10322])
	goto $label$40 
	
.LABEL $label$41
	CALL eosio_assert([0], [10300])
	
.LABEL $label$40
	if ( ((int_64)$5 == (int_64)*(($1 + [40]))) ){ goto $label$42 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$42
	$3 = ((int_64)*($1 + [32]) + (int_64)$3)
	*($1 + [32]) = $3
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$45 }
	if ( ((int_64)$3 >= (int_64)4611686018427387904) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL eosio_assert([0], [9338])
	if ( ((int_64)*(($1 + [32])) < (int_64)4611686018427387904) ){ goto $label$43 }
	
.LABEL $label$44
	CALL eosio_assert([0], [9372])
	return 
	
.LABEL $label$43
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
	$3 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17, int_64 $18)
{
	int_32 $19
	int_64 $20
	$19 = ($global$0 - [112])
	$global$0 = $19
	*($19 + [96]) = $1
	*($19 + [104]) = $18
	*($19 + [94]) = $3
	*($19 + [92]) = $4
	*($19 + [90]) = $5
	*($19 + [88]) = $6
	*($19 + [86]) = $7
	*($19 + [84]) = $8
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	CALL $47($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($17 + [8])), [9125])
	$20 = *($9)
	$18 = *($9 + [8])
	if ( ((int_64)*($10 + [8]) == (int_64)$18) ){ goto $label$1 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$1
	$20 = ((int_64)*($10) + (int_64)$20)
	if ( ((int_64)$20 <= (int_64)-4611686018427387904) ){ goto $label$5 }
	if ( ((int_64)$20 < (int_64)4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)*($11 + [8]) != (int_64)$18) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([0], [9338])
	
.LABEL $label$4
	if ( ((int_64)*($11 + [8]) == (int_64)$18) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9279])
	
.LABEL $label$2
	$20 = ((int_64)*($11) + (int_64)$20)
	if ( ((int_64)$20 <= (int_64)-4611686018427387904) ){ goto $label$9 }
	if ( ((int_64)$20 < (int_64)4611686018427387904) ){ goto $label$8 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)*($12 + [8]) != (int_64)$18) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL eosio_assert([0], [9338])
	
.LABEL $label$8
	if ( ((int_64)*($12 + [8]) == (int_64)$18) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9279])
	
.LABEL $label$6
	$20 = ((int_64)*($12) + (int_64)$20)
	if ( ((int_64)$20 <= (int_64)-4611686018427387904) ){ goto $label$13 }
	if ( ((int_64)$20 < (int_64)4611686018427387904) ){ goto $label$12 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)*($13 + [8]) != (int_64)$18) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL eosio_assert([0], [9338])
	
.LABEL $label$12
	if ( ((int_64)*($13 + [8]) == (int_64)$18) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert([0], [9279])
	
.LABEL $label$10
	$20 = ((int_64)*($13) + (int_64)$20)
	if ( ((int_64)$20 <= (int_64)-4611686018427387904) ){ goto $label$17 }
	if ( ((int_64)$20 < (int_64)4611686018427387904) ){ goto $label$16 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)*($14 + [8]) != (int_64)$18) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	CALL eosio_assert([0], [9338])
	
.LABEL $label$16
	if ( ((int_64)*($14 + [8]) == (int_64)$18) ){ goto $label$14 }
	
.LABEL $label$15
	CALL eosio_assert([0], [9279])
	
.LABEL $label$14
	$20 = ((int_64)*($14) + (int_64)$20)
	if ( ((int_64)$20 <= (int_64)-4611686018427387904) ){ goto $label$21 }
	if ( ((int_64)$20 < (int_64)4611686018427387904) ){ goto $label$20 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)*($15 + [8]) != (int_64)$18) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	CALL eosio_assert([0], [9338])
	
.LABEL $label$20
	if ( ((int_64)*($15 + [8]) == (int_64)$18) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [9279])
	
.LABEL $label$18
	$18 = ((int_64)*($15) + (int_64)$20)
	if ( ((int_64)$18 <= (int_64)-4611686018427387904) ){ goto $label$23 }
	if ( ((int_64)$18 < (int_64)4611686018427387904) ){ goto $label$22 }
	CALL eosio_assert([0], [9372])
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert([0], [9338])
	
.LABEL $label$22
	CALL eosio_assert(((int_64)$18 == (int_64)10000), [9185])
	$4 = ($0 + [176])
	$7 = *(($0 + [204]))
	$6 = *(($0 + [200]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$28:
	$8 = ($7 + [-24])
	$5 = *($8)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$27 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$26 }
	if ( ((int_32)*($5 + [176]) == (int_32)$4) ){ goto $label$25 }
	CALL eosio_assert([0], [8544])
	$global$0 = ($19 + [112])
	return 
	
.LABEL $label$26
	$8 = CALL db_find_i64(*($4), *(($0 + [184])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$24 }
	if ( ((int_32)*(CALL $34($4, $8) + [176]) == (int_32)$4) ){ goto $label$25 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$25
	$global$0 = ($19 + [112])
	return 
	
.LABEL $label$24
	$8 = ($0 + [536])
	$1 = *($8)
	*($19 + [20]) = $2
	*($19 + [48]) = $9
	*($19 + [52]) = $10
	*($19 + [56]) = $11
	*($19 + [60]) = $12
	*($19 + [64]) = $13
	*($19 + [68]) = $14
	*($19 + [72]) = $15
	*($19 + [76]) = $16
	*($19 + [16]) = ($19 + [96])
	*($19 + [24]) = ($19 + [94])
	*($19 + [28]) = ($19 + [92])
	*($19 + [32]) = ($19 + [90])
	*($19 + [36]) = ($19 + [88])
	*($19 + [40]) = ($19 + [86])
	*($19 + [44]) = ($19 + [84])
	*($19 + [80]) = ($19 + [104])
	CALL $48(($19 + [8]), $4, $1, ($19 + [16]))
	$1 = *($8)
	*($19 + [24]) = $0
	*($19 + [28]) = $2
	*($19 + [32]) = $17
	*($19 + [20]) = ($19 + [90])
	*($19 + [16]) = ($19 + [96])
	CALL $49(($19 + [8]), ($0 + [136]), $1, ($19 + [16]))
	$global$0 = ($19 + [112])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [864])
	$global$0 = $3
	*(($4 = $3) + [776]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [600])) = (int_64)0
	*((($4 + [584]) + [48])) = (int_64)0
	*((($4 + [584]) + [64])) = (int_64)0
	*((($4 + [584]) + [80])) = (int_64)0
	*((($4 + [584]) + [96])) = (int_64)0
	*(($4 + [696])) = (int_64)0
	*(($4 + [712])) = (int_64)0
	*($4 + [592]) = (int_64)0
	*($4 + [584]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [616]) = [0]
	*($4 + [624]) = (int_64)0
	*($4 + [640]) = (int_64)0
	*($4 + [656]) = (int_64)0
	*($4 + [672]) = (int_64)0
	*($4 + [688]) = (int_64)0
	*($4 + [704]) = (int_64)0
	*($4 + [720]) = (int_64)0
	*((($4 + [584]) + [144])) = (int_64)0
	*((($4 + [584]) + [160])) = (int_64)0
	*(($4 + [760])) = (int_64)0
	*($4 + [736]) = (int_64)0
	*($4 + [752]) = (int_64)0
	*($4 + [768]) = (int_64)0
	*($4 + [572]) = $2
	*($4 + [568]) = $2
	*($4 + [576]) = ($2 + $5)
	*($4 + [848]) = ($4 + [568])
	*($4 + [16]) = ($4 + [584])
	CALL $45(($4 + [16]), ($4 + [848]))
	*(($3 = ($4 + [8]))) = *($4 + [576])
	*($4) = *($4 + [568])
	$3 = *($3)
	*((($4 + [784]) + [8])) = $3
	*(($6 = (($4 + [800]) + [8]))) = $3
	$7 = *($4)
	*($4 + [800]) = $7
	*($4 + [784]) = $7
	$3 = *($6)
	*((($4 + [816]) + [8])) = $3
	*(($6 = (($4 + [832]) + [8]))) = $3
	$7 = *($4 + [800])
	*($4 + [832]) = $7
	*($4 + [816]) = $7
	$3 = *($6)
	*((($4 + [848]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [832])
	*($4 + [32]) = $1
	*($4 + [848]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*((($4 + [16]) + [80])) = $0
	*(($4 + [104])) = (int_64)-1
	*((($4 + [16]) + [96])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = (int_64)-4157493845350678528
	*($4 + [136]) = (int_64)-3617168583097216896
	*($4 + [144]) = (int_64)-5069817191910604800
	*((($4 + [16]) + [144])) = $0
	*(($4 + [168])) = (int_64)-1
	*((($4 + [16]) + [160])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [312])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*(($4 + [544])) = (int_64)0
	*($4 + [552]) = (int_64)0
	*($4 + [560]) = [1]
	*($4 + [552]) = CALL $32(($4 + [16]))
	*($4 + [852]) = ($4 + [776])
	*($4 + [848]) = ($4 + [16])
	CALL $46(($4 + [848]), ($4 + [584]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $193($2)
	
.LABEL $label$4
	CALL $33(($4 + [16]))
	$global$0 = ($4 + [864])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = ($1 + [8])
	$6 = *(*($4 + [8]) + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = *($0)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $10 ){ goto $label$5 }
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9439])
	
.LABEL $label$1
	*($1 + [16]) = (int_64)0
	*(($1 + [24])) = $6
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$10 = $2
	$4 = ($10 + [-48])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($10 + [-14])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	$10 = ($1 + [32])
	*($3 + [44]) = $10
	CALL $127(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($8 + [8]), (int_64)-3020384829779738624, *(*($0 + [8])), $7, $4, [34])
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$6 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$7 = *(($8 + [8]))
	$9 = *(*(($0 + [8])))
	$6 = *($1)
	*($3 + [32]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($10)))
	*($1 + [48]) = CALL db_idx_double_store($7, (int_64)-3020384829779738624, $9, $6, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $122 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = *($2 + [8])
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	$8 = (int_64)0
	CALL eosio_assert((((int_64)$7 > (int_64)0) & $6), [10343])
	*($4 + [88]) = ($0 + [72])
	*($4 + [8]) = $5
	CALL $40(($4 + [48]), ($4 + [88]), ($4 + [8]))
	$9 = *($4 + [52])
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_64)*($4 + [8]) != (int_64)*(($9 + [32]))) ){ goto $label$7 }
	$8 = *($9 + [16])
	$10 = *($9 + [8])
	$9 = [1]
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	$10 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert($9, [9512])
	*((($4 + [8]) + [16])) = *(($2 + [8]))
	*($4 + [8]) = $1
	*($4 + [16]) = *($2)
	CALL $151((($4 + [8]) + [24]), $3)
	*($4 + [56]) = (int_64)8516769789752901632
	*($4 + [48]) = $10
	*(($9 = CALL _Znwj([16]))) = $8
	*($9 + [8]) = (int_64)3617214756542218240
	$6 = ($9 + [16])
	*((($4 + [48]) + [24])) = $6
	*(($4 + [68])) = $6
	*($4 + [64]) = $9
	CALL $125(($4 + [76]), ($4 + [8]))
	CALL $100(($4 + [48]))
	$9 = *($4 + [76])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($4 + [80])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$8
	$9 = *($4 + [64])
	if ( ($9 == 0) ){ goto $label$9 }
	*(($4 + [68])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$9
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$10
	$global$0 = ($4 + [96])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	$6 = *($1)
	CALL $129($3, $1)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-144])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-9])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [64])
	*($5 + [56]) = ($1 + [80])
	*($5 + [60]) = ($1 + [96])
	*($5 + [64]) = ($1 + [104])
	*($5 + [68]) = ($1 + [108])
	*($5 + [72]) = ($1 + [112])
	*($5 + [76]) = ($1 + [120])
	*($5 + [80]) = ($1 + [136])
	*($5 + [84]) = ($1 + [137])
	*($5 + [88]) = ($1 + [138])
	CALL $98(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [144]), $2, $4, [135])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [96])
}

int_64 .FUNC $120 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $78($3, $6)
	if ( ((int_32)*($7 + [20]) == (int_32)$3) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10068])
	$6 = *($7 + [8])
	if ( ($6 & [1]) ){ goto $label$6 }
	$6 = uint_32($6 >> [1])
	$5 = (($7 + [8]) + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *(($7 + [12]))
	$5 = *(($7 + [16]))
	
.LABEL $label$5
	*($2 + [20]) = $6
	*($2 + [16]) = $5
	*($2 + [8]) = *($2 + [16])
	$1 = *(CALL $71(($2 + [24]), ($2 + [8])))
	$global$0 = ($2 + [32])
	return $1
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	$4 = ($0 + [136])
	$6 = *(($0 + [164]))
	$5 = *(($0 + [160]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*(($8 + [140])) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [144])), (int_64)7035938066996920320, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($4, $7)
	if ( ((int_32)*($8 + [140]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9459])
	CALL eosio_assert(*($8 + [136]), [9492])
	CALL eosio_assert(((int_32)*($8 + [137]) ^ (int_32)[1]), [9556])
	$10 = ($0 + [176])
	$6 = *(($0 + [204]))
	$5 = *(($0 + [200]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$7 = ($6 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$11 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	if ( ((int_32)*($11 + [176]) == (int_32)$10) ){ goto $label$13 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$13
	$9 = $11
	$12 = (int_64)0
	$1 = *($8 + [96])
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = CALL db_find_i64(*($10), *(($0 + [184])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $34($10, $7)
	if ( ((int_32)*($9 + [176]) == (int_32)$10) ){ goto $label$14 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$14
	$12 = (int_64)0
	$1 = *($8 + [96])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$8 }
	
.LABEL $label$9
	$13 = *(($8 + [56]))
	$12 = *($8 + [48])
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$15 }
	if ( ((int_64)$12 != (int_64)-9223372036854775808) ){ goto $label$15 }
	CALL eosio_assert([0], [9592])
	
.LABEL $label$15
	$15 = ((int_64)$12 / (int_64)$1)
	$16 = (int_64)$15 >> (int_64)63)
	$7 = *($8 + [112])
	if ( ($7 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$13 = *(($8 + [56]))
	$1 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$14 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)$12) ){ goto $label$19 }
	$1 = $14
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$1 = $14
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)$12) ){ goto $label$16 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$20 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	$15 = (int_64)0
	$16 = (int_64)0
	$7 = *($8 + [112])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$16
	CALL eosio_assert([0], [9439])
	$15 = (int_64)0
	$16 = (int_64)0
	$7 = *($8 + [112])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$17 = ((int_64)*($8 + [64]) / (int_64)(CASTING uint_64)(uint_32 $7))
	$14 = *(($8 + [72]))
	goto $label$5 
	
.LABEL $label$6
	$14 = *(($8 + [72]))
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $12
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $12
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$25 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	CALL eosio_assert([0], [9439])
	
.LABEL $label$21
	$17 = (int_64)0
	
.LABEL $label$5
	$10 = [0]
	*((($3 + [256]) + [32])) = [0]
	*($3 + [272]) = (int_64)-1
	*($3 + [280]) = (int_64)0
	$1 = *($0)
	*($3 + [256]) = $1
	$7 = ($9 + [16])
	$12 = *($7)
	*($3 + [292]) = [0]
	*($3 + [264]) = (uint_64)$12 >> (uint_64)(int_64)8)
	*((($3 + [216]) + [32])) = [0]
	*($3 + [216]) = $1
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$12 = (uint_64)*($7) >> (uint_64)(int_64)8
	*($3 + [224]) = $12)
	*((($3 + [176]) + [32])) = [0]
	*($3 + [184]) = $12
	*($3 + [176]) = $1
	*($3 + [192]) = (int_64)-1
	*($3 + [200]) = (int_64)0
	*($3 + [212]) = [0]
	*($3 + [168]) = ($3 + [256])
	*($3 + [296]) = (int_64)-4503599627370496
	CALL $53(($3 + [160]), ($3 + [168]), ($3 + [296]))
	*($3 + [296]) = (int_64)-4503599627370496
	CALL $53(($3 + [152]), ($3 + [168]), ($3 + [296]))
	if ( (*($3 + [156]) == 0) ){ goto $label$26 }
	$1 = *($8 + [80])
	$18 = *(($8 + [88]))
	if ( ((int_64)$14 == (int_64)$18) ){ goto $label$27 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$27
	$12 = ((int_64)$1 + (int_64)$17)
	if ( ((int_64)$12 <= (int_64)-4611686018427387904) ){ goto $label$29 }
	if ( ((int_64)$12 < (int_64)4611686018427387904) ){ goto $label$28 }
	CALL eosio_assert([0], [9372])
	goto $label$28 
	
.LABEL $label$29
	CALL eosio_assert([0], [9338])
	
.LABEL $label$28
	$1 = *(*($3 + [164]))
	$6 = *(($3 + [204]))
	$11 = *(($3 + [200]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$32 }
	
.LOOP $label$34:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$33 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$32 }
	if ( ((int_32)*($5 + [40]) == (int_32)($3 + [176])) ){ goto $label$31 }
	CALL eosio_assert([0], [8544])
	goto $label$31 
	
.LABEL $label$32
	$7 = CALL db_find_i64(*($3 + [176]), *(($3 + [184])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$30 }
	$5 = CALL $54(($3 + [176]), $7)
	if ( ((int_32)*($5 + [40]) == (int_32)($3 + [176])) ){ goto $label$31 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$31
	CALL __multi3(($3 + [88]), $15, $16, *($5 + [8]), (int_64)0)
	$1 = *(($3 + [96]))
	$19 = *($3 + [88])
	if ( (( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ) == 0) ){ goto $label$36 }
	if ( ( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ) ){ goto $label$35 }
	CALL eosio_assert([0], [9641])
	goto $label$35 
	
.LABEL $label$36
	CALL eosio_assert([0], [9617])
	
.LABEL $label$35
	$1 = *($5 + [16])
	$20 = *(($5 + [24]))
	if ( ((int_64)$13 == (int_64)$20) ){ goto $label$37 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$37
	$1 = ((int_64)$1 + (int_64)$19)
	if ( ((int_64)$1 <= (int_64)-4611686018427387904) ){ goto $label$44 }
	if ( ((int_64)$1 >= (int_64)4611686018427387904) ){ goto $label$43 }
	if ( ((int_64)$20 != (int_64)$18) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	CALL eosio_assert([0], [9338])
	if ( ((int_64)$20 == (int_64)$18) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	CALL eosio_assert([0], [9372])
	if ( ((int_64)$20 == (int_64)$18) ){ goto $label$41 }
	
.LABEL $label$42
	CALL eosio_assert([0], [9279])
	$12 = ((int_64)$1 + (int_64)$12)
	if ( ((int_64)$12 > (int_64)-4611686018427387904) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$12 = ((int_64)$1 + (int_64)$12)
	if ( ((int_64)$12 <= (int_64)-4611686018427387904) ){ goto $label$39 }
	
.LABEL $label$40
	if ( ((int_64)$12 < (int_64)4611686018427387904) ){ goto $label$38 }
	CALL eosio_assert([0], [9372])
	goto $label$38 
	
.LABEL $label$39
	CALL eosio_assert([0], [9338])
	
.LABEL $label$38
	$7 = CALL db_next_i64(*($5 + [44]), ($3 + [296]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$45 }
	CALL $54(($3 + [176]), $7)
	
.LABEL $label$45
	CALL $55(($3 + [176]), $5)
	
.LABEL $label$30
	$1 = *(*($3 + [164]))
	*(($3 + [80])) = $18
	*($3 + [136]) = $12
	*($3 + [144]) = $18
	*($3 + [72]) = $12
	CALL $56($0, ($3 + [216]), $1, ($3 + [72]))
	$1 = *($3 + [160])
	*($3 + [296]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $7) ){ goto $label$46 }
	CALL eosio_assert([0], [8320])
	$7 = *($3 + [300])
	
.LABEL $label$46
	CALL $57(($3 + [296]))
	CALL $58(*($3 + [168]), $7)
	*($3 + [160]) = *($3 + [296])
	$10 = [1]
	
.LABEL $label$26
	*($3 + [296]) = (int_64)-4503599627370496
	CALL $53(($3 + [152]), ($3 + [168]), ($3 + [296]))
	if ( (*($3 + [156]) == 0) ){ goto $label$47 }
	$9 = ($8 + [112])
	$21 = ($3 + [204])
	$22 = (($3 + [176]) + [24])
	$23 = (($3 + [176]) + [8])
	
.LOOP $label$48:
	if ( ((uint_32)$10 >= (uint_32)*($9)) ){ goto $label$49 }
	$1 = *(*($3 + [164]))
	$6 = *($21)
	$11 = *($22)
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$53 }
	
.LOOP $label$55:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$54 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$53 }
	if ( ((int_32)*($5 + [40]) != (int_32)($3 + [176])) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$12 = $17
	$7 = CALL db_find_i64(*($3 + [176]), *($23), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$50 }
	$5 = CALL $54(($3 + [176]), $7)
	if ( ((int_32)*($5 + [40]) == (int_32)($3 + [176])) ){ goto $label$51 }
	
.LABEL $label$52
	CALL eosio_assert([0], [8544])
	
.LABEL $label$51
	CALL __multi3(($3 + [56]), $15, $16, *($5 + [8]), (int_64)0)
	$1 = *((($3 + [56]) + [8]))
	$12 = *($3 + [56])
	if ( (( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ) == 0) ){ goto $label$57 }
	if ( ( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ) ){ goto $label$56 }
	CALL eosio_assert([0], [9641])
	goto $label$56 
	
.LABEL $label$57
	CALL eosio_assert([0], [9617])
	
.LABEL $label$56
	$1 = *($5 + [16])
	$18 = *(($5 + [24]))
	if ( ((int_64)$13 == (int_64)$18) ){ goto $label$58 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$58
	$1 = ((int_64)$1 + (int_64)$12)
	if ( ((int_64)$1 <= (int_64)-4611686018427387904) ){ goto $label$64 }
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$65 }
	CALL eosio_assert([0], [9372])
	if ( ((int_64)$18 == (int_64)$14) ){ goto $label$62 }
	goto $label$63 
	
.LABEL $label$65
	if ( ((int_64)$18 != (int_64)$14) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	CALL eosio_assert([0], [9338])
	if ( ((int_64)$18 == (int_64)$14) ){ goto $label$62 }
	
.LABEL $label$63
	CALL eosio_assert([0], [9279])
	$12 = ((int_64)$1 + (int_64)$17)
	if ( ((int_64)$12 > (int_64)-4611686018427387904) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$12 = ((int_64)$1 + (int_64)$17)
	if ( ((int_64)$12 <= (int_64)-4611686018427387904) ){ goto $label$60 }
	
.LABEL $label$61
	if ( ((int_64)$12 < (int_64)4611686018427387904) ){ goto $label$59 }
	CALL eosio_assert([0], [9372])
	goto $label$59 
	
.LABEL $label$60
	CALL eosio_assert([0], [9338])
	
.LABEL $label$59
	$7 = CALL db_next_i64(*($5 + [44]), ($3 + [296]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$66 }
	CALL $54(($3 + [176]), $7)
	
.LABEL $label$66
	CALL $55(($3 + [176]), $5)
	
.LABEL $label$50
	$1 = *(*($3 + [164]))
	*((($3 + [120]) + [8])) = $14
	*((($3 + [40]) + [8])) = $14
	*($3 + [120]) = $12
	*($3 + [40]) = $12
	CALL $56($0, ($3 + [216]), $1, ($3 + [40]))
	
.LABEL $label$49
	$1 = *($3 + [160])
	*($3 + [296]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $7) ){ goto $label$67 }
	CALL eosio_assert([0], [8320])
	$7 = *($3 + [300])
	
.LABEL $label$67
	$10 = ($10 + [1])
	CALL $57(($3 + [296]))
	CALL $58(*($3 + [168]), $7)
	*($3 + [160]) = *($3 + [296])
	*($3 + [296]) = (int_64)-4503599627370496
	CALL $53(($3 + [152]), ($3 + [168]), ($3 + [296]))
	if ( *($3 + [156]) ){ goto $label$48 }
	
.LABEL $label$47
	$7 = CALL db_lowerbound_i64(*($3 + [176]), *(($3 + [184])), (int_64)-3020384829779738624, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$69 }
	$7 = CALL $54(($3 + [176]), $7)
	if ( ($2 == 0) ){ goto $label$68 }
	$10 = (($3 + [24]) + [8])
	$5 = [1]
	
.LOOP $label$70:
	CALL __multi3(($3 + [24]), $15, $16, *($7 + [8]), (int_64)0)
	$1 = *($10)
	$12 = *($3 + [24])
	if ( (( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ) == 0) ){ goto $label$72 }
	if ( ( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ) ){ goto $label$71 }
	CALL eosio_assert([0], [9641])
	goto $label$71 
	
.LABEL $label$72
	CALL eosio_assert([0], [9617])
	
.LABEL $label$71
	$1 = *($7 + [16])
	$14 = *(($7 + [24]))
	if ( ((int_64)$13 == (int_64)$14) ){ goto $label$73 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$73
	$1 = ((int_64)$1 + (int_64)$12)
	if ( ((int_64)$1 <= (int_64)-4611686018427387904) ){ goto $label$77 }
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$79 }
	CALL eosio_assert([0], [9372])
	goto $label$78 
	
.LABEL $label$79
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$76 }
	
.LABEL $label$78
	$12 = *($7)
	*((($3 + [104]) + [8])) = $14
	*((($3 + [8]) + [8])) = $14
	*($3 + [8]) = $1
	*($3 + [104]) = $1
	CALL $56($0, ($3 + [216]), $12, ($3 + [8]))
	if ( ($7 == 0) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	CALL eosio_assert([0], [9338])
	
.LABEL $label$76
	if ( $7 ){ goto $label$74 }
	
.LABEL $label$75
	CALL eosio_assert([0], [8320])
	CALL eosio_assert([0], [8360])
	
.LABEL $label$74
	$6 = [0]
	$11 = CALL db_next_i64(*($7 + [44]), ($3 + [296]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$80 }
	$6 = CALL $54(($3 + [176]), $11)
	
.LABEL $label$80
	CALL $55(($3 + [176]), $7)
	if ( ($6 == 0) ){ goto $label$81 }
	$11 = ($5 <= $2)
	$5 = ($5 + [1])
	$7 = $6
	if ( $11 ){ goto $label$70 }
	
.LABEL $label$81
	if ( $6 ){ goto $label$68 }
	
.LABEL $label$69
	$1 = *(($0 + [536]))
	if ( $8 ){ goto $label$82 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$82
	CALL $59($4, $8, $1, ($3 + [296]))
	
.LABEL $label$68
	$5 = *($3 + [200])
	if ( ($5 == 0) ){ goto $label$83 }
	$11 = ($3 + [204])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$85 }
	
.LOOP $label$86:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$87 }
	CALL _ZdlPv($6)
	
.LABEL $label$87
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$86 }
	$7 = *(($3 + [200]))
	goto $label$84 
	
.LABEL $label$85
	$7 = $5
	
.LABEL $label$84
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$83
	$5 = *($3 + [240])
	if ( ($5 == 0) ){ goto $label$88 }
	$11 = ($3 + [244])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$90 }
	
.LOOP $label$91:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$92 }
	CALL _ZdlPv($6)
	
.LABEL $label$92
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$91 }
	$7 = *(($3 + [240]))
	goto $label$89 
	
.LABEL $label$90
	$7 = $5
	
.LABEL $label$89
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$88
	$5 = *($3 + [280])
	if ( ($5 == 0) ){ goto $label$93 }
	$11 = ($3 + [284])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$95 }
	
.LOOP $label$96:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$97 }
	CALL _ZdlPv($6)
	
.LABEL $label$97
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$96 }
	$7 = *(($3 + [280]))
	goto $label$94 
	
.LABEL $label$95
	$7 = $5
	
.LABEL $label$94
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$93
	$global$0 = ($3 + [304])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3)
	CALL __multi3($2, $4, (int_64)$4 >> (int_64)63), *($1 + [8]), (int_64)0)
	$5 = *($3 + [8])
	$6 = *(($2 + [8]))
	$4 = *($2)
	if ( (( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ) == 0) ){ goto $label$2 }
	if ( ( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ) ){ goto $label$1 }
	CALL eosio_assert([0], [9641])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9617])
	
.LABEL $label$1
	$6 = *(*($0 + [4]))
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$4 }
	if ( ((int_64)$4 != (int_64)-9223372036854775808) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$3 }
	CALL eosio_assert([0], [9592])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [9577])
	
.LABEL $label$3
	$4 = ((int_64)$4 / (int_64)$6)
	if ( ((int_64)$5 == (int_64)*(($1 + [24]))) ){ goto $label$5 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$5
	$4 = ((int_64)*($1 + [16]) + (int_64)$4)
	*($1 + [16]) = $4
	if ( ((int_64)$4 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$4 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9338])
	if ( ((int_64)*(($1 + [16])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9372])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-24] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $85($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [12]) = $3
	*($2 + [8]) = $3
	*($2 + [16]) = $4
	$0 = ($4 - $3)
	if ( ((int_32)$0 > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$4
	CALL memcpy($3, $1, [8])
	$4 = ($3 + [8])
	*($2 + [12]) = $4
	$7 = ($1 + [8])
	if ( ((int_32)($0 + [-8]) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = ($3 + [16])
	*($2 + [12]) = $4
	*($2 + [24]) = *(($1 + [16]))
	if ( ((int_32)($0 + [-16]) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [24]), [8])
	*($2 + [12]) = ($3 + [24])
	CALL $86(($2 + [8]), $6)
	$global$0 = ($2 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]) + [544])
	*($1 + [10]) = *(*($3 + [8]))
	$3 = *($0)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	*($2 + [32]) = ($2 + [19])
	*($2 + [28]) = $2
	*($2 + [24]) = $2
	*($2 + [40]) = ($2 + [24])
	*($2 + [52]) = ($1 + [8])
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + [10])
	$4 = ($1 + [16])
	*($2 + [60]) = $4
	CALL $128(($2 + [48]), ($2 + [40]))
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-8524866889302279168, *(*($0 + [8])), $5, $2, [19])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [48]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($4)))
	*($1 + [32]) = CALL db_idx_double_store($5, (int_64)-8524866889302279168, $6, $7, ($2 + [48]))
	$global$0 = ($2 + [64])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [112])
	CALL $165($2, $1)
	CALL $38($0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	*($4 + [136]) = [0]
	CALL eosio_assert([0], [8224])
	$3 = ($4 + [136])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	*($4 + [136]) = [0]
	$3 = ($4 + [136])
	
.LABEL $label$1
	CALL memcpy($3, $2, [1])
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = (int_64)-4157493845350678528
	*($4 + [128]) = (int_64)-5069817191910604800
	*($4 + [120]) = (int_64)-3617168583097216896
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [136])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $193($2)
	
.LABEL $label$6
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$12 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$17
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [56]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $5
	
.LABEL $label$13
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	$4 = ($0 + [136])
	$6 = *(($0 + [164]))
	$5 = *(($0 + [160]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*(($8 + [140])) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [144])), (int_64)7035938066996920320, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($4, $7)
	if ( ((int_32)*($8 + [140]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9459])
	CALL eosio_assert(*($8 + [136]), [9492])
	CALL eosio_assert(*($8 + [137]), [9666])
	CALL eosio_assert(((int_32)*($8 + [138]) ^ (int_32)[1]), [9691])
	$10 = ($0 + [176])
	$6 = *(($0 + [204]))
	$5 = *(($0 + [200]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	if ( ((int_32)*($11 + [176]) == (int_32)$10) ){ goto $label$9 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$9
	$9 = $11
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($10), *(($0 + [184])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $34($10, $7)
	if ( ((int_32)*($9 + [176]) == (int_32)$10) ){ goto $label$5 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$5
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$1 = *($0)
	*($3) = $1
	$12 = *(($9 + [16]))
	*($3 + [36]) = [0]
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	*($3 + [8]) = $12)
	*($3 + [24]) = (int_64)0
	$7 = CALL db_lowerbound_i64($1, $12, (int_64)-8524866889302279168, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $60($3, $7)
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = [1]
	
.LOOP $label$12:
	$7 = [0]
	$11 = CALL db_next_i64(*($6 + [28]), ($3 + [40]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $60($3, $11)
	
.LABEL $label$13
	CALL $58($3, $6)
	if ( ($7 == 0) ){ goto $label$14 }
	$11 = ($5 <= $2)
	$5 = ($5 + [1])
	$6 = $7
	if ( $11 ){ goto $label$12 }
	
.LABEL $label$14
	if ( $7 ){ goto $label$10 }
	
.LABEL $label$11
	$1 = *(($0 + [536]))
	if ( $8 ){ goto $label$15 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$15
	CALL $61($4, $8, $1, ($3 + [40]))
	
.LABEL $label$10
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$16 }
	$11 = ($3 + [28])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($3 + [24]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $5
	
.LABEL $label$17
	*($11) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$global$0 = ($3 + [48])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [568]) = [0]
	*($4 + [560]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$4
	$3 = ($2 + $7)
	$8 = (($4 + [560]) + [8])
	CALL memcpy(($4 + [560]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-2]) != (int_32)[8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	CALL memcpy($8, $9, [2])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [10])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = (int_64)-4157493845350678528
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [136]) = (int_64)-5069817191910604800
	*($4 + [128]) = (int_64)-3617168583097216896
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [288])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = [1]
	*($4 + [544]) = CALL $32(($4 + [8]))
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *(($4 + [568]))
	$0 = *($4 + [560])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $193($2)
	
.LABEL $label$7
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($5 + [40]) = $4
	CALL require_auth(*($0))
	$4 = *($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($2 + [8])), [8850])
	CALL eosio_assert(((int_64)*($1) <= (int_64)*($2)), [8888])
	$6 = ($0 + [72])
	*($5 + [32]) = $6
	*($5 + [24]) = $4
	CALL $40($5, ($5 + [32]), ($5 + [24]))
	$7 = *($5 + [4])
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ((int_64)*($5 + [24]) != (int_64)*(($7 + [32]))) ){ goto $label$1 }
	$4 = *($0)
	*($5 + [4]) = $1
	*($5) = $3
	*($5 + [8]) = $2
	*($5 + [12]) = ($5 + [40])
	CALL $41(*($5 + [32]), $7, $4, $5)
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$1
	$4 = *($0)
	*($5 + [4]) = $3
	*($5) = $0
	*($5 + [8]) = $1
	*($5 + [12]) = $2
	*($5 + [16]) = ($5 + [40])
	CALL $42(($5 + [24]), $6, $4, $5)
	$global$0 = ($5 + [48])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [200]) + [24]))) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [188]) = $2
	*($4 + [184]) = $2
	*($4 + [192]) = ($2 + $7)
	*($4 + [328]) = ($4 + [184])
	*($4 + [48]) = ($4 + [200])
	CALL $39(($4 + [48]), ($4 + [328]))
	*(($8 = (($4 + [32]) + [8]))) = *($4 + [192])
	*($4 + [32]) = *($4 + [184])
	$8 = *($8)
	*(($9 = (($4 + [296]) + [8]))) = $8
	*(($10 = (($4 + [312]) + [8]))) = $8
	$11 = *($4 + [32])
	*($4 + [312]) = $11
	*($4 + [296]) = $11
	$8 = *($10)
	*((($4 + [328]) + [8])) = $8
	*((($4 + [48]) + [24])) = $8
	*($4 + [48]) = $0
	*($4 + [56]) = $1
	$1 = *($4 + [312])
	*($4 + [64]) = $1
	*($4 + [328]) = $1
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*($4 + [160]) = (int_64)-4157493845350678528
	*($4 + [168]) = (int_64)-3617168583097216896
	*($4 + [176]) = (int_64)-5069817191910604800
	*(($8 = (($4 + [264]) + [8]))) = *($4 + [208])
	*(($10 = (($4 + [248]) + [8]))) = *($3)
	*($4 + [264]) = *($4 + [200])
	*($4 + [248]) = *($4 + [216])
	$0 = *($4 + [240])
	$1 = *($4 + [232])
	*($9) = *($10)
	*((($4 + [280]) + [8])) = *($8)
	*($4 + [344]) = $1
	*($4 + [296]) = *($4 + [248])
	*($4 + [280]) = *($4 + [264])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [280]) + [8]))
	*((($4 + [328]) + [8])) = $1
	$11 = *((($4 + [296]) + [8]))
	*((($4 + [312]) + [8])) = $11
	*((($4 + [16]) + [8])) = $1
	*(($4 + [8])) = $11
	$1 = *($4 + [280])
	*($4 + [328]) = $1
	$11 = *($4 + [296])
	*($4 + [312]) = $11
	*($4 + [16]) = $1
	*($4) = $11
	CALL void $3((int_32 ($4 + [16])), (int_32 $4), (int_32 ($4 + [344])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $193($2)
	
.LABEL $label$5
	$5 = *(($4 + [144]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [148])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [144]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [108])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [104]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [16]) = ($0 + [72])
	*($2 + [8]) = *($1 + [8])
	CALL $40(($2 + [24]), ($2 + [16]), ($2 + [8]))
	$0 = *($2 + [28])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [8]) != (int_64)*(($0 + [32]))) ){ goto $label$1 }
	*($2 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)*($2 + [24]))
	CALL $43(($2 + [24]))
	CALL $44(*($2 + [16]), $0)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [160]), $2, [8])
	*($4 + [24]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$6
	CALL memcpy(($4 + [24]), $8, [8])
	*(($8 = (($4 + [160]) + [8]))) = *($4 + [24])
	*(($4 + [48])) = $3
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*($4 + [40]) = $2
	*(($4 + [44])) = ($2 + [16])
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = (int_64)-4157493845350678528
	*($4 + [152]) = (int_64)-5069817191910604800
	*($4 + [144]) = (int_64)-3617168583097216896
	*(($3 = (($4 + [176]) + [8]))) = *($8)
	*($4 + [176]) = *($4 + [160])
	*((($4 + [192]) + [8])) = *($3)
	*($4 + [192]) = *($4 + [176])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	$0 = *((($4 + [192]) + [8]))
	*((($4 + [208]) + [8])) = $0
	*((($4 + [8]) + [8])) = $0
	$0 = *($4 + [192])
	*($4 + [8]) = $0
	*($4 + [208]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $193($2)
	
.LABEL $label$8
	$5 = *(($4 + [120]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($4 + [120]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL $65(($3 + [168]), $0, $2, $1, [1])
	$4 = *(($0 + [376]))
	$5 = *(($0 + [368]))
	$6 = ((int_64)*($3 + [168]) / (int_64)10000)
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$1
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$7 = $9
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$7 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$8 }
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [9439])
	$12 = (int_64)0
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [9577])
	
.LABEL $label$2
	$9 = ((int_64)$6 / (int_64)$5)
	CALL __multi3(($3 + [80]), $9, (int_64)$9 >> (int_64)63), $5, (int_64)$5 >> (int_64)63))
	$5 = *(($3 + [88]))
	$7 = *($3 + [80])
	if ( (( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)$12) : (int_64)($5 == 0) ) == 0) ){ goto $label$10 }
	if ( ( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ) ){ goto $label$9 }
	CALL eosio_assert([0], [9641])
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [9617])
	
.LABEL $label$9
	*($3 + [192]) = ($0 + [72])
	*($3 + [184]) = $4
	CALL $40(($3 + [200]), ($3 + [192]), ($3 + [184]))
	$8 = *($3 + [204])
	if ( ($8 == 0) ){ goto $label$12 }
	$5 = *($3 + [184])
	if ( ((int_64)$5 != (int_64)*(($8 + [32]))) ){ goto $label$12 }
	$6 = *(($8 + [48]))
	$12 = *($8 + [40])
	$13 = *($8 + [24])
	$14 = *($8 + [16])
	$15 = *($8 + [8])
	$16 = *($8)
	$8 = [1]
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	$6 = (int_64)0
	$12 = (int_64)0
	$5 = (int_64)0
	$13 = (int_64)0
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$11
	CALL eosio_assert($8, [9512])
	*($0 + [544]) = [2]
	*(($8 = (($3 + [112]) + [32]))) = $5
	*(($10 = (($3 + [112]) + [48]))) = $6
	*($3 + [120]) = $15
	*((($3 + [24]) + [8])) = *($3 + [120])
	*($3 + [128]) = $14
	*(($3 + [40])) = *($3 + [128])
	*($3 + [136]) = $13
	*(($3 + [48])) = *($3 + [136])
	*((($3 + [24]) + [32])) = *($8)
	*($3 + [152]) = $12
	*(($3 + [64])) = *($3 + [152])
	*((($3 + [24]) + [48])) = *($10)
	*($3 + [112]) = $16
	*($3 + [96]) = $7
	*($3 + [104]) = $4
	*($3 + [24]) = *($3 + [112])
	*((($3 + [8]) + [8])) = $4
	*($3 + [8]) = $7
	CALL $64($0, $1, $2, ((CASTING uint_32)(uint_64 $9) & [65535]), ($3 + [24]), ($3 + [8]), (int_64)-7122829838779416576)
	$global$0 = ($3 + [208])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	*(($3 + [80])) = [0]
	$4 = (uint_64)$2 >> (uint_64)(int_64)8
	*($3 + [56]) = $4)
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$5 = *($0)
	*($3 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $4, (int_64)5606348217378668544, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $67(($3 + [48]), $7)
	if ( ((int_32)*($6 + [24]) == (int_32)($3 + [48])) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10377])
	*($3 + [96]) = ($0 + [72])
	*($3 + [88]) = $2
	CALL $40(($3 + [104]), ($3 + [96]), ($3 + [88]))
	$7 = *($3 + [108])
	if ( ($7 == 0) ){ goto $label$3 }
	if ( ((int_64)*($3 + [88]) != (int_64)*(($7 + [32]))) ){ goto $label$3 }
	$5 = *($7 + [8])
	$7 = [1]
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$5 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert($7, [9512])
	$8 = *($6 + [8])
	*($3 + [40]) = $2
	$2 = ((int_64)$8 / (int_64)10000)
	*($3 + [32]) = $2
	$8 = *($0)
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$4 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$4
	$7 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $2
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $2
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$9 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [9439])
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$7 = CALL $187([10405])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [16]) = ($7 << [1])
	$9 = (($3 + [16]) | [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $9
	*($3 + [20]) = $7
	
.LABEL $label$12
	CALL memcpy($9, [10405], $7)
	
.LABEL $label$11
	*(($9 + $7)) = [0]
	*(($3 + [8])) = *((($3 + [32]) + [8]))
	*($3) = *($3 + [32])
	CALL $52($0, $5, $8, $1, $3, ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$14
	if ( $6 ){ goto $label$15 }
	CALL eosio_assert([0], [8320])
	CALL eosio_assert([0], [8360])
	
.LABEL $label$15
	$7 = CALL db_next_i64(*($6 + [28]), ($3 + [104]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	CALL $67(($3 + [48]), $7)
	
.LABEL $label$16
	CALL $68(($3 + [48]), $6)
	$10 = *($3 + [72])
	if ( ($10 == 0) ){ goto $label$17 }
	$0 = ($3 + [76])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$20 }
	$7 = *(($3 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $10
	
.LABEL $label$18
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$global$0 = ($3 + [112])
	return (unreachable)
	
.LABEL $label$10
	CALL $150(($3 + [16]))
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $179($3, (int_64)0)
	$4 = CALL $181($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $187 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $180 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $178($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = $1
	CALL $123(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $109(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3) + [544])
	*($5 + [16]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($1 + [16])))
	*($1 + [10]) = *(*($3 + [4]))
	$6 = *($1)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$7 = ($1 + [10])
	$8 = ($1 + [8])
	$9 = ($1 + [16])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-32])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-13])
	*($5 + [24]) = $5
	*($5 + [36]) = $8
	*($5 + [40]) = $7
	*($5 + [44]) = $9
	*($5 + [32]) = $1
	CALL $128(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [28]), $2, $3, [19])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [32]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($9)))
	if ( (CALL $186(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [32])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-8524866889302279168, ($5 + [24]), $6)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx_double_update($1, $2, ($5 + [32]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = [-1]
	$4 = *($2 + [48])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8360])
	$3 = [-1]
	$2 = *(($0 + [4]))
	$4 = *($2 + [48])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *(*($0))
	$4 = CALL db_idx_double_find_primary(*($4), *($4 + [8]), (int_64)-3020384829779738624, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx_double_next($4, ($1 + [8]))
	if ( ((int_32)$5 <= (int_32)$3) ){ goto $label$7 }
	$6 = *($1 + [8])
	$2 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$8:
	$4 = ($2 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$6) ){ goto $label$6 }
	$2 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)*($3 + [40]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [8544])
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $54($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3020384829779738624, $6))
	if ( ((int_32)*($3 + [40]) == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$4
	*(($0 + [4])) = $3
	*(($3 + [48])) = $5
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($5 + [16]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($1 + [32])))
	*($1 + [8]) = (*($1 + [8]) + *(*($3)))
	$6 = *($1)
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	$7 = ($1 + [8])
	$3 = ($1 + [32])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$8 = $4
	$4 = ($8 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($8 + [-14])
	*($5 + [24]) = $5
	*($5 + [36]) = $7
	*($5 + [44]) = $3
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	CALL $127(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [34])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [32]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($3)))
	if ( (CALL $186(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [48])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [24]), $6)
	*($4) = $1
	
.LABEL $label$6
	CALL db_idx_double_update($1, $2, ($5 + [32]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx_double_lowerbound(*($2), *($2 + [8]), (int_64)-3020384829779738624, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [40]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $54($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3020384829779738624, $6))
	if ( ((int_32)*($4 + [40]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	*($5 + [16]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($1 + [32])))
	$6 = *($1)
	CALL $126($3, $1)
	$3 = ($1 + [32])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8791])
	
.LABEL $label$3
	$7 = $4
	$4 = ($7 + [-48])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($7 + [-14])
	*($5 + [24]) = $5
	*($5 + [44]) = $3
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	CALL $127(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [34])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [32]) = (CASTING float_64)(uint_64 (int_64))((int_64)0 - *($3)))
	if ( (CALL $186(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [48])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($5 + [24]), $6)
	*($4) = $1
	
.LABEL $label$6
	CALL db_idx_double_update($1, $2, ($5 + [32]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$4 = ($1 + [8])
	CALL memcpy($3, $1, [8])
	$5 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $5
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$5 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	*($2 + [8]) = *(($1 + [16]))
	if ( ((int_32)(*(($0 + [8])) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [8]), [8])
	*(($3 = ($0 + [4]))) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $124(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $107(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [32])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx_double_find_primary(*($3), *($3 + [8]), (int_64)-8524866889302279168, $1, *($2))
	*(*(($0 + [4])) + [32]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx_double_previous($3, ($1 + [8]))
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10020])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx_double_end(*($2), *($2 + [8]), (int_64)-8524866889302279168)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	CALL eosio_assert([0], [9966])
	
.LABEL $label$4
	$4 = CALL db_idx_double_previous($2, ($1 + [8]))
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [9966])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$8:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$7 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	if ( ((int_32)*($8 + [24]) == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert([0], [8544])
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL $60($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-8524866889302279168, $5))
	if ( ((int_32)*($8 + [24]) == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$5
	*(($0 + [4])) = $8
	*(($8 + [32])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL $63($0, $1)
	$7 = *($4 + [8])
	*($6 + [160]) = ($0 + [72])
	*($6 + [152]) = $7
	CALL $40(($6 + [168]), ($6 + [160]), ($6 + [152]))
	$8 = *($6 + [172])
	if ( ($8 == 0) ){ goto $label$2 }
	$7 = *($6 + [152])
	if ( ((int_64)$7 != (int_64)*(($8 + [32]))) ){ goto $label$2 }
	$9 = *(($8 + [48]))
	$10 = *($8 + [40])
	$11 = *($8 + [24])
	$12 = *($8 + [16])
	$13 = *($8 + [8])
	$14 = *($8)
	$8 = [1]
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$9 = (int_64)0
	$10 = (int_64)0
	$7 = (int_64)0
	$11 = (int_64)0
	$12 = (int_64)0
	$13 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert($8, [9512])
	*((($6 + [96]) + [32])) = $7
	*((($6 + [96]) + [48])) = $9
	$15 = *(($4 + [8]))
	$16 = *($4)
	*((($6 + [24]) + [8])) = $13
	*(($6 + [40])) = $12
	*(($6 + [48])) = $11
	*((($6 + [24]) + [32])) = $7
	*(($6 + [64])) = $10
	*(($4 = (($6 + [80]) + [8]))) = $15
	*((($6 + [24]) + [48])) = $9
	*($6 + [104]) = $13
	*($6 + [96]) = $14
	*($6 + [112]) = $12
	*($6 + [120]) = $11
	*($6 + [136]) = $10
	*($6 + [24]) = $14
	*($6 + [80]) = $16
	*((($6 + [8]) + [8])) = *($4)
	*($6 + [8]) = *($6 + [80])
	CALL $64($0, $1, $2, $3, ($6 + [24]), ($6 + [8]), $5)
	$global$0 = ($6 + [176])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [136]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	CALL memcpy(($4 + [136]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = (int_64)-4157493845350678528
	*($4 + [128]) = (int_64)-5069817191910604800
	*($4 + [120]) = (int_64)-3617168583097216896
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [136])
	if ( ($5 & [1]) ){ goto $label$12 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $193($2)
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = *(($4 + [96]))
	if ( $5 ){ goto $label$8 }
	
.LABEL $label$9
	$5 = *(($4 + [56]))
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = ($4 + [100])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $5
	
.LABEL $label$13
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = ($4 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$21
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($4 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth($1)
	*($3 + [8]) = $2
	*($3) = $1
	CALL $69($0, (int_64)5606348217378668544, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [568]) = (int_64)0
	*($4 + [560]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [560]), $2, [8])
	*($4 + [8]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	
.LABEL $label$6
	CALL memcpy(($4 + [8]), $8, [8])
	*(($8 = (($4 + [560]) + [8]))) = *($4 + [8])
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [16])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = (int_64)-4157493845350678528
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = (int_64)0
	*($4 + [136]) = (int_64)-5069817191910604800
	*($4 + [128]) = (int_64)-3617168583097216896
	*($4 + [144]) = $0
	*($4 + [184]) = $0
	*(($4 + [288])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [552]) = [1]
	*($4 + [544]) = CALL $32(($4 + [8]))
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($8)
	$1 = *($4 + [560])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $193($2)
	
.LABEL $label$8
	CALL $33(($4 + [8]))
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth($2)
	*($3 + [8]) = $2
	*($3) = $1
	CALL $66($0, (int_64)-3073298666878926848, $3)
	$global$0 = ($3 + [16])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $65(($3 + [80]), $0, $2, $1, [0])
	*(($3 + [72])) = [0]
	*((($3 + [24]) + [8])) = *((($3 + [80]) + [8]))
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [40]) = *($0)
	$1 = *($3 + [80])
	*($3 + [24]) = $1
	*($3 + [48]) = (uint_64)*(($0 + [376])) >> (uint_64)(int_64)8)
	$4 = ((int_64)$1 << (int_64)1)
	if ( ((int_64)$1 >= (int_64)2305843009213693952) ){ goto $label$2 }
	if ( ((int_64)$1 > (int_64)-2305843009213693952) ){ goto $label$1 }
	CALL eosio_assert([0], [9641])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9617])
	
.LABEL $label$1
	*((($3 + [8]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [8]) = $4
	*($3 + [24]) = $4
	CALL $56($0, ($3 + [40]), $2, ($3 + [8]))
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [68])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [96])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [944])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [656]) + [24]))) = (int_64)0
	*(($8 = (($4 + [656]) + [48]))) = (int_64)0
	*(($9 = ($4 + [728]))) = (int_64)0
	*(($10 = (($4 + [656]) + [88]))) = (int_64)0
	*($4 + [664]) = (int_64)0
	*($4 + [656]) = (int_64)0
	*($4 + [672]) = (int_64)0
	*($4 + [688]) = (int_64)0
	*($4 + [696]) = (int_64)0
	*($4 + [712]) = (int_64)0
	*($4 + [720]) = (int_64)0
	*($4 + [736]) = (int_64)0
	*($4 + [644]) = $2
	*($4 + [640]) = $2
	*($4 + [648]) = ($2 + $7)
	*($4 + [928]) = ($4 + [640])
	*($4 + [88]) = ($4 + [656])
	CALL $50(($4 + [88]), ($4 + [928]))
	*(($11 = (($4 + [72]) + [8]))) = *($4 + [648])
	*($4 + [72]) = *($4 + [640])
	$11 = *($11)
	*(($12 = (($4 + [864]) + [8]))) = $11
	*(($13 = (($4 + [880]) + [8]))) = $11
	$14 = *($4 + [72])
	*($4 + [880]) = $14
	*($4 + [864]) = $14
	$11 = *($13)
	*((($4 + [896]) + [8])) = $11
	*(($13 = (($4 + [912]) + [8]))) = $11
	$14 = *($4 + [880])
	*($4 + [912]) = $14
	*($4 + [896]) = $14
	$11 = *($13)
	*((($4 + [928]) + [8])) = $11
	*((($4 + [88]) + [24])) = $11
	*($4 + [88]) = $0
	*($4 + [96]) = $1
	$1 = *($4 + [912])
	*($4 + [104]) = $1
	*($4 + [928]) = $1
	*(($4 + [128])) = $0
	*((($4 + [88]) + [48])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*((($4 + [88]) + [88])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = (int_64)-4157493845350678528
	*($4 + [208]) = (int_64)-3617168583097216896
	*($4 + [216]) = (int_64)-5069817191910604800
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [272])) = $0
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = [0]
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [368])) = (int_64)0
	*($4 + [224]) = $0
	*($4 + [264]) = $0
	*(($4 + [384])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*(($4 + [544])) = (int_64)0
	*(($4 + [552])) = (int_64)0
	*(($4 + [560])) = (int_64)0
	*(($4 + [568])) = (int_64)0
	*(($4 + [576])) = (int_64)0
	*(($4 + [592])) = (int_64)0
	*(($4 + [584])) = (int_64)0
	*(($4 + [600])) = (int_64)0
	*(($4 + [608])) = (int_64)0
	*(($4 + [616])) = (int_64)0
	*($4 + [624]) = (int_64)0
	*($4 + [632]) = [1]
	*($4 + [624]) = CALL $32(($4 + [88]))
	*(($11 = (($4 + [800]) + [8]))) = *($3)
	*(($3 = (($4 + [784]) + [8]))) = *($8)
	*(($8 = (($4 + [768]) + [8]))) = *($9)
	*(($9 = (($4 + [752]) + [8]))) = *($10)
	*($4 + [800]) = *($4 + [672])
	*($4 + [784]) = *($4 + [696])
	*($4 + [768]) = *($4 + [720])
	*($4 + [752]) = *($4 + [736])
	$0 = *($4 + [664])
	$1 = *($4 + [656])
	$14 = *($4 + [688])
	$15 = *($4 + [712])
	*($12) = *($9)
	*((($4 + [848]) + [8])) = *($8)
	*((($4 + [832]) + [8])) = *($3)
	*((($4 + [816]) + [8])) = *($11)
	*($4 + [864]) = *($4 + [752])
	*($4 + [848]) = *($4 + [768])
	*($4 + [832]) = *($4 + [784])
	*($4 + [816]) = *($4 + [800])
	$3 = (($4 + [88]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$16 = *((($4 + [816]) + [8]))
	*((($4 + [928]) + [8])) = $16
	*(($5 = (($4 + [912]) + [8]))) = *((($4 + [832]) + [8]))
	*(($8 = (($4 + [896]) + [8]))) = *((($4 + [848]) + [8]))
	*(($9 = (($4 + [880]) + [8]))) = *((($4 + [864]) + [8]))
	*((($4 + [56]) + [8])) = $16
	$16 = *($4 + [816])
	*($4 + [928]) = $16
	*($4 + [912]) = *($4 + [832])
	*($4 + [896]) = *($4 + [848])
	*($4 + [880]) = *($4 + [864])
	*($4 + [56]) = $16
	*((($4 + [40]) + [8])) = *($5)
	*((($4 + [24]) + [8])) = *($8)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [40]) = *($4 + [912])
	*($4 + [24]) = *($4 + [896])
	*($4 + [8]) = *($4 + [880])
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [56])), (int_32 $14), (int_64 ($4 + [40])), (int_32 $15), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $193($2)
	
.LABEL $label$5
	CALL $33(($4 + [88]))
	$global$0 = ($4 + [944])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	$9 = ($global$0 - [176])
	$global$0 = $9
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	$10 = ($0 + [136])
	$12 = *(($0 + [164]))
	$11 = *(($0 + [160]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$2 }
	
.LOOP $label$4:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$3 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$2 }
	if ( ((int_32)*(($14 + [140])) == (int_32)$10) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	$13 = CALL db_find_i64(*($10), *(($0 + [144])), (int_64)7035938066996920320, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $36($10, $13)
	if ( ((int_32)*($14 + [140]) == (int_32)$10) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [9459])
	CALL eosio_assert(((int_32)*($14 + [136]) ^ (int_32)[1]), [9475])
	CALL eosio_assert((uint_64)(*($14 + [8]) <= ((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000)), [9492])
	$15 = *(($0 + [536]))
	if ( $14 ){ goto $label$5 }
	CALL eosio_assert([0], [8659])
	
.LABEL $label$5
	CALL $51($10, $14, $15, ($9 + [168]))
	$16 = ($0 + [176])
	$12 = *(($0 + [204]))
	$10 = *(($0 + [200]))
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$7 }
	
.LOOP $label$9:
	$13 = ($12 + [-24])
	$11 = *($13)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$8 }
	$12 = $13
	if ( ((int_32)$10 != (int_32)$13) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$7 }
	if ( ((int_32)*($11 + [176]) == (int_32)$16) ){ goto $label$6 }
	CALL eosio_assert([0], [8544])
	goto $label$6 
	
.LABEL $label$7
	$11 = CALL $34($16, CALL $fimport$7(*($16), *(($0 + [184])), (int_64)7035924439720001536, $1))
	if ( ((int_32)*($11 + [176]) == (int_32)$16) ){ goto $label$6 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$6
	$17 = *(($11 + [16]))
	$18 = ((int_64)*($14 + [32]) / (int_64)10000)
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$10 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$10
	$13 = [0]
	$1 = (uint_64)$17 >> (uint_64)(int_64)8
	$15 = $1)
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$19 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$15 = $19
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$15 = $19
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$15 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [9439])
	
.LABEL $label$11
	*($9 + [160]) = ($0 + [72])
	*($9 + [152]) = $17
	CALL $40(($9 + [168]), ($9 + [160]), ($9 + [152]))
	$13 = *($9 + [172])
	if ( ($13 == 0) ){ goto $label$17 }
	if ( ((int_64)*($9 + [152]) != (int_64)*(($13 + [32]))) ){ goto $label$17 }
	$17 = *($13 + [8])
	$13 = [1]
	goto $label$16 
	
.LABEL $label$17
	$13 = [0]
	$17 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert($13, [9512])
	$20 = *($0)
	$21 = ((int_64)*($3) * (int_64)$18)
	if ( (uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$18 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$18
	$13 = [0]
	$15 = $1
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$19 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$15 = $19
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$15 = $19
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$23 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	CALL eosio_assert([0], [9439])
	
.LABEL $label$19
	$15 = *(($11 + [16]))
	*($9 + [144]) = $15
	$19 = ((int_64)$21 / (int_64)10000)
	*($9 + [136]) = $19
	if ( (uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$24 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$24
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$19 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$15 = $19
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$15 = $19
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$29 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	CALL eosio_assert([0], [9439])
	
.LABEL $label$25
	*(($9 + [128])) = [0]
	*($9 + [120]) = (int_64)0
	$13 = CALL $187([9531])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$35 }
	*($9 + [120]) = ($13 << [1])
	$12 = (($9 + [120]) | [1])
	if ( $13 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$14 = (($13 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($9 + [120]) = ($14 | [1])
	*($9 + [128]) = $12
	*($9 + [124]) = $13
	
.LABEL $label$34
	CALL memcpy($12, [9531], $13)
	
.LABEL $label$33
	*(($12 + $13)) = [0]
	*((($9 + [40]) + [8])) = *((($9 + [136]) + [8]))
	*($9 + [40]) = *($9 + [136])
	CALL $52($0, $17, $20, $2, ($9 + [40]), ($9 + [120]))
	if ( ((*($9 + [120]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($9 + [128]))
	
.LABEL $label$36
	$2 = *($0)
	$20 = ((int_64)*($5) * (int_64)$18)
	if ( (uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$37 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$37
	$13 = [0]
	$15 = $1
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$19 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$15 = $19
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$15 = $19
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$42 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	CALL eosio_assert([0], [9439])
	
.LABEL $label$38
	$15 = *(($11 + [16]))
	*($9 + [112]) = $15
	$19 = ((int_64)$20 / (int_64)10000)
	*($9 + [104]) = $19
	if ( (uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$43 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$43
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$19 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$15 = $19
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$15 = $19
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$48 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	CALL eosio_assert([0], [9439])
	
.LABEL $label$44
	*(($9 + [96])) = [0]
	*($9 + [88]) = (int_64)0
	$13 = CALL $187([9531])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$51 }
	*($9 + [88]) = ($13 << [1])
	$12 = (($9 + [88]) | [1])
	if ( $13 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$14 = (($13 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($9 + [88]) = ($14 | [1])
	*($9 + [96]) = $12
	*($9 + [92]) = $13
	
.LABEL $label$50
	CALL memcpy($12, [9531], $13)
	
.LABEL $label$49
	*(($12 + $13)) = [0]
	*((($9 + [24]) + [8])) = *((($9 + [104]) + [8]))
	*($9 + [24]) = *($9 + [104])
	CALL $52($0, $17, $2, $4, ($9 + [24]), ($9 + [88]))
	if ( ((*($9 + [88]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($9 + [96]))
	
.LABEL $label$52
	$19 = *($0)
	$18 = ((int_64)*($7) * (int_64)$18)
	if ( (uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$53 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$53
	$13 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$15 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$1 = $15
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$1 = $15
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$58 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	CALL eosio_assert([0], [9439])
	
.LABEL $label$54
	$1 = *(($11 + [16]))
	*($9 + [80]) = $1
	$15 = ((int_64)$18 / (int_64)10000)
	*($9 + [72]) = $15
	if ( (uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$59 }
	CALL eosio_assert([0], [9390])
	
.LABEL $label$59
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$15 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$1 = $15
	$12 = $13
	$13 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$1 = $15
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$64 }
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	CALL eosio_assert([0], [9439])
	
.LABEL $label$60
	*(($9 + [64])) = [0]
	*($9 + [56]) = (int_64)0
	$13 = CALL $187([9531])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$67 }
	*($9 + [56]) = ($13 << [1])
	$12 = (($9 + [56]) | [1])
	if ( $13 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$14 = (($13 + [16]) & [-16])
	$12 = CALL _Znwj($14)
	*($9 + [56]) = ($14 | [1])
	*($9 + [64]) = $12
	*($9 + [60]) = $13
	
.LABEL $label$66
	CALL memcpy($12, [9531], $13)
	
.LABEL $label$65
	*(($12 + $13)) = [0]
	*((($9 + [8]) + [8])) = *((($9 + [72]) + [8]))
	*($9 + [8]) = *($9 + [72])
	CALL $52($0, $17, $19, $6, ($9 + [8]), ($9 + [56]))
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($9 + [64]))
	
.LABEL $label$68
	$global$0 = ($9 + [176])
	return (unreachable)
	
.LABEL $label$32
	CALL $150(($9 + [120]))
	
.LABEL $label$31
	CALL $150(($9 + [88]))
	
.LABEL $label$30
	CALL $150(($9 + [56]))
	(unreachable)
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [128])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [9088])
	
.LOOP $label$6:
	*((($2 + [19]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	*($2) = [0]
	$6 = ($2 | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($2 + [19]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	CALL $38($0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	$global$0 = ($2 + [32])
}

void .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	CALL require_auth(*($0 + [536]))
	$2 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [176])
	$4 = CALL $34($3, $2)
	
.LOOP $label$2:
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [180]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $34($3, $5)
	
.LABEL $label$3
	CALL $35($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)7035938066996920320, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [136])
	$4 = CALL $36($3, $2)
	
.LOOP $label$5:
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [144]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $36($3, $5)
	
.LABEL $label$6
	CALL $37($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$global$0 = ($1 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $103(CALL $102($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8653])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $85($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $101(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8653])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8653])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8653])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8653])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [8602])
	
.LABEL $label$1
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $1
	*($5) = *(*($3))
	$3 = *($3 + [4])
	*($5 + [8]) = *($3)
	*($5 + [16]) = *(($3 + [8]))
	*($4 + [56]) = (($4 + [16]) + [24])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $110(($4 + [48]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)5606348217378668544, $2, $6, ($4 + [16]), [24])
	*($5 + [28]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [48]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [48]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $111(($1 + [24]), ($4 + [48]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8694])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8740])
	
.LABEL $label$2
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))) ){ goto $label$3 }
	CALL eosio_assert([0], [9279])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9338])
	if ( ((int_64)*(($1 + [8])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [9372])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8791])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $110($5, $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [2])
	*(($3 = ($3 + [4]))) = (*($3) + [2])
	$3 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [2])
	*(($4 = ($4 + [4]))) = (*($4) + [2])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$4 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$6
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4982871454518345728, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $78($4, $7)
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL $79($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $80(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8224])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0)
	$0 = ($6 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $5, [8])
	$0 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8224])
	$0 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $0, [8])
	*(($6 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = ($6 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8224])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = ($6 + [40])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8224])
	$4 = *(($1 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL _Znwj([152])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [140]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [80])
	*($3 + [60]) = ($5 + [96])
	*($3 + [64]) = ($5 + [104])
	*($3 + [68]) = ($5 + [108])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [136])
	*($3 + [84]) = ($5 + [137])
	*($3 + [88]) = ($5 + [138])
	CALL $76(($3 + [32]), ($3 + [24]))
	*($5 + [144]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $193($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [140])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [144]))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	
.LABEL $label$5
	$4 = CALL $190($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = (int_64)0
	*($5 + [176]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [26])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [30])
	*($3 + [64]) = ($5 + [32])
	*($3 + [68]) = ($5 + [34])
	*($3 + [72]) = ($5 + [40])
	*($3 + [76]) = ($5 + [56])
	*($3 + [80]) = ($5 + [72])
	*($3 + [84]) = ($5 + [88])
	*($3 + [88]) = ($5 + [104])
	*($3 + [92]) = ($5 + [120])
	*($3 + [96]) = ($5 + [136])
	*($3 + [100]) = ($5 + [152])
	*($3 + [104]) = ($5 + [168])
	CALL $74(($3 + [40]), ($3 + [32]))
	*($5 + [180]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $75(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $193($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [176]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8396])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8441])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8491])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [180]))
}

int_64 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = ($0 + [32])
	$3 = *($0 + [128])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	if ( ((int_32)*($7 + [20]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)4982871454518345728, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $78($2, $6)
	if ( ((int_32)*($7 + [20]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10496])
	$6 = *($7 + [8])
	if ( ($6 & [1]) ){ goto $label$6 }
	$6 = uint_32($6 >> [1])
	$5 = (($7 + [8]) + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *(($7 + [12]))
	$5 = *(($7 + [16]))
	
.LABEL $label$5
	*($1 + [20]) = $6
	*($1 + [16]) = $5
	*($1 + [8]) = *($1 + [16])
	$3 = *(CALL $71(($1 + [24]), ($1 + [8])))
	$global$0 = ($1 + [32])
	return $3
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [200]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [204])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [200]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [160]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [164])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [160]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$21
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [56]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [736])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $190($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [640]))) = (int_64)0
	*($4 + [616]) = (int_64)0
	*($4 + [608]) = (int_64)0
	*($4 + [624]) = [0]
	*($4 + [632]) = (int_64)0
	*($4 + [648]) = (int_64)0
	*($4 + [596]) = $2
	*($4 + [592]) = $2
	*($4 + [600]) = ($2 + $7)
	*($4 + [688]) = ($4 + [592])
	*($4 + [40]) = ($4 + [608])
	CALL $62(($4 + [40]), ($4 + [688]))
	*(($3 = (($4 + [24]) + [8]))) = *($4 + [600])
	*($4 + [24]) = *($4 + [592])
	$3 = *($3)
	*((($4 + [704]) + [8])) = $3
	*(($9 = (($4 + [720]) + [8]))) = $3
	$10 = *($4 + [24])
	*($4 + [720]) = $10
	*($4 + [704]) = $10
	$11 = *($9)
	*(($3 = (($4 + [656]) + [8]))) = $11
	*(($9 = (($4 + [672]) + [8]))) = $11
	$10 = *($4 + [720])
	*($4 + [672]) = $10
	*($4 + [656]) = $10
	$11 = *($9)
	*((($4 + [688]) + [8])) = $11
	*(($4 + [64])) = $11
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [672])
	*($4 + [56]) = $1
	*($4 + [688]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = (int_64)-4157493845350678528
	*($4 + [160]) = (int_64)-3617168583097216896
	*($4 + [168]) = (int_64)-5069817191910604800
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = (int_64)0
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*($4 + [176]) = $0
	*($4 + [216]) = $0
	*(($4 + [336])) = (int_64)0
	*(($4 + [328])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [408])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [456])) = (int_64)0
	*(($4 + [464])) = (int_64)0
	*(($4 + [472])) = (int_64)0
	*(($4 + [480])) = (int_64)0
	*(($4 + [488])) = (int_64)0
	*(($4 + [496])) = (int_64)0
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = (int_64)0
	*(($4 + [520])) = (int_64)0
	*(($4 + [528])) = (int_64)0
	*(($4 + [544])) = (int_64)0
	*(($4 + [536])) = (int_64)0
	*(($4 + [552])) = (int_64)0
	*(($4 + [560])) = (int_64)0
	*(($4 + [568])) = (int_64)0
	*($4 + [576]) = (int_64)0
	*($4 + [584]) = [1]
	*($4 + [576]) = CALL $32(($4 + [40]))
	*($3) = *($8)
	*($4 + [656]) = *($4 + [632])
	$8 = *($4 + [624])
	$0 = *($4 + [616])
	$1 = *($4 + [608])
	$10 = *($4 + [648])
	*($9) = *($3)
	*($4 + [672]) = *($4 + [656])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [672]) + [8]))
	*((($4 + [688]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	$12 = *($4 + [672])
	*($4 + [8]) = $12
	*($4 + [688]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [65535])), (int_32 ($4 + [8])), (int_32 $10), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $193($2)
	
.LABEL $label$5
	CALL $33(($4 + [40]))
	$global$0 = ($4 + [736])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [120])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [9088])
	
.LOOP $label$6:
	*((($2 + [19]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	*($2) = [0]
	$6 = ($2 | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($2 + [19]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	CALL $38($0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	$global$0 = ($2 + [32])
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10532]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10536])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10532]) = [1]
	$2 = ($2 << [16])
	*([0] + [10536]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10536])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10536]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10532]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10532]) = [1]
	$3 = ($3 << [16])
	*([0] + [10536]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10536])
	
.LABEL $label$10
	*([0] + [10536]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $193 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18924])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18732]
	$3 = (((int_32)$1 * (int_32)[12]) + [18732])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $190 (int_32 $0)
{
	return CALL $191([10540], $0)
}

int_32 .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $192($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8234])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}