(data (i32.const 16640) "\04EOS\00\00\00\00")
(data (i32.const 16648) "EOS\00\00\00\00\00")
(data (i32.const 16656) "Base token cannot be the same as quote token\00Division by 0\00pure virtual method called\00")
(data (i32.const 16742) "Token with this symbol is already registered\00Amount and price have to be >= 0\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 16906) "Token with this symbol is not registered\00The resulting cost is too big\00")
(data (i32.const 16977) "Balance is already opened\00cost and price have to be >= 0\00")
(data (i32.const 17034) "This token is not traded in the dex\00Multiplication overflow\00")
(data (i32.const 17094) "Balance does not exist\00The resulting amount is too big\00")
(data (i32.const 17149) "Cannot close account with funds\00Can\'t take a fee from less than 0\00")
(data (i32.const 17215) "Can\'t close balance which is needed for active orders\00magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17318) "You have to send transfer action to contract of token you want to transfer\00invalid symbol name\00")
(data (i32.const 17413) "Balance needs to be opened, before depositing\00")
(data (i32.const 17459) "Missing required authorizations\00")
(data (i32.const 17491) "Balance is not opened\00")
(data (i32.const 17513) "Overdrawn balance\00")
(data (i32.const 17531) "active\00")
(data (i32.const 17538) "transfer\00")
(data (i32.const 17547) "Lynxdex withdraw\00")
(data (i32.const 17564) "Order id: \00")
(data (i32.const 17575) "No balance to buy with\00")
(data (i32.const 17598) "Buyer does not have required balance.\00")
(data (i32.const 17636) "Buyer has to have a balance open to receive bought tokens\00")
(data (i32.const 17694) "No balance to sell\00")
(data (i32.const 17713) "Seller does not have required balance.\00")
(data (i32.const 17752) "Seller has to have a balance open to receive income from sold tokens\00")
(data (i32.const 17821) "No such market in the dex\00")
(data (i32.const 17847) "Order does not exist\00")
(data (i32.const 17868) "Only EOS as the quote token is supported right now\00")
(data (i32.const 17919) "Price is invalid\00")
(data (i32.const 17936) "Amount is invalid\00")
(data (i32.const 17954) "Price must be positive\00")
(data (i32.const 17977) "Amount must be positive\00")
(data (i32.const 18001) "Cost for a trade has to be >= 0 and valid\00")
(data (i32.const 18043) "Trade amount has to be > 0 and valid\00")
(data (i32.const 18080) "filledevent\00")
(data (i32.const 18092) "withdraw\00")
(data (i32.const 18101) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18150) "invalid symbol name\00")
(data (i32.const 18170) "unable to find key\00")
(data (i32.const 18189) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18240) "error reading iterator\00")
(data (i32.const 18263) "read\00")
(data (i32.const 18268) "Wrong token precision\00")
(data (i32.const 18290) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18349) "string is too long to be a valid name\00")
(data (i32.const 18387) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18454) "character is not in allowed character set for names\00")
(data (i32.const 18506) "write\00")
(data (i32.const 18512) "Order value in EOS is too small\00")
(data (i32.const 18544) "\00\00\00\00\00\00\00\00\0e\00\00\00\0f\00\00\00\10\00\00\00\11\00\00\00\12\00\00\00\13\00\00\00\14\00\00\00\15\00\00\00")
(data (i32.const 18584) "\00\00\00\00\00\00\00\00\0e\00\00\00\16\00\00\00\17\00\00\00\17\00\00\00\17\00\00\00\13\00\00\00\18\00\00\00\19\00\00\00")
(data (i32.const 18624) "_received: \00")
(data (i32.const 18636) "_pay_balance: \00")
(data (i32.const 18651) "_price: \00")
(data (i32.const 18660) ".\00")
(data (i32.const 18662) " \00")
(data (i32.const 18664) "attempt to subtract asset with different symbol\00")
(data (i32.const 18712) "subtraction underflow\00")
(data (i32.const 18734) "subtraction overflow\00")
(data (i32.const 18755) "_amount: \00")
(data (i32.const 18765) "attempt to add asset with different symbol\00")
(data (i32.const 18808) "addition underflow\00")
(data (i32.const 18827) "addition overflow\00")
(data (i32.const 18848) "\00\00\00\00\00\00\00\00\0e\00\00\00\1a\00\00\00\1b\00\00\00\1c\00\00\00\1d\00\00\00\13\00\00\00\18\00\00\00\19\00\00\00")
(data (i32.const 18888) "Trying to retrieve base from order which does not have it\00")
(data (i32.const 18946) "tradeevent\00")
(data (i32.const 18957) "Balance not found\00")
(data (i32.const 18975) "cannot pass end iterator to modify\00")
(data (i32.const 19010) "object passed to modify is not in multi_index\00")
(data (i32.const 19056) "cannot modify objects in table of another contract\00")
(data (i32.const 19107) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19166) "Trying to take a fee bigger than received amount\00")
(data (i32.const 19215) "cannot create objects in table of another contract\00")
(data (i32.const 19266) "cannot pass end iterator to erase\00")
(data (i32.const 19300) "object passed to erase is not in multi_index\00")
(data (i32.const 19345) "cannot erase objects in table of another contract\00")
(data (i32.const 19395) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19448) "cannot increment end iterator\00")
(data (i32.const 19480) "\00\00\00\00\00\00\00\00\1e\00\00\00\1f\00\00\00 \00\00\00!\00\00\00\"\00\00\00#\00\00\00$\00\00\00")
(data (i32.const 19516) "\00\00\00\00\00\00\00\00\1e\00\00\00%\00\00\00&\00\00\00\'\00\00\00(\00\00\00)\00\00\00*\00\00\00")
(data (i32.const 19552) "\00\00\00\00\00\00\00\00\1e\00\00\00+\00\00\00,\00\00\00-\00\00\00.\00\00\00/\00\00\000\00\00\00")
(data (i32.const 19588) "get\00")
(data (i32.const 19600) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 19616) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 19632) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "current_receiver" (func $fimport$1 (result i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "has_auth" (func $fimport$10 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "printui" (func $fimport$13 (param i64)))
(import "env" "db_idx64_store" (func $fimport$14 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$16 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$17 (param i32 i64 i32)))
(import "env" "current_time" (func $fimport$18 (result i64)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "action_data_size" (func $fimport$21 (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$24 (param i64)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "db_idx64_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$28 (param i32)))
(import "env" "__multi3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__fixunsdfti" (func $fimport$31 (param i32 f64)))
(import "env" "__floatuntidf" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "memset" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$43 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$44 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$45 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$46 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$49 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$51 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$52 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$53 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $66))
(export "_Znwj" (func $141))
(export "_ZdlPv" (func $143))
(export "_Znaj" (func $142))
(export "_ZdaPv" (func $144))
(export "_ZnwjSt11align_val_t" (func $145))
(export "_ZnajSt11align_val_t" (func $146))
(export "_ZdlPvSt11align_val_t" (func $147))
(export "_ZdaPvSt11align_val_t" (func $148))
(table $0 49 49 anyfunc)
(elem (i32.const 1) $14 $48 $58 $9 $1 $60 $11 $5 $21 $27 $63 $62 $20 $56 $91 $92 $93 $94 $95 $96 $97 $99 $153 $100 $101 $102 $55 $103 $104 $122 $110 $111 $112 $113 $114 $115 $116 $117 $118 $119 $120 $121 $123 $124 $125 $126 $127 $128)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19648))
(global $global$2 i32 (i32.const 19648))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([18660])
	CALL prints_l($8, $4)
	CALL prints([18662])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0)
{
	(unreachable)
}

int_32 .FUNC $94 (int_32 $0)
{
	return [2]
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	*($1) = *($0 + [8])
	*($1 + [8]) = *($0 + [16])
	*($1 + [24]) = *($0 + [64])
	*($1 + [32]) = *($0 + [80])
	*($1 + [16]) = *($0 + [24])
	*($1 + [40]) = *($0 + [40])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*(($2 + [8])) = *(($0 + [32]))
	*($2) = *($0 + [24])
	CALL $137(($2 + [16]), ($0 + [96]), $2)
	*(($0 + [88])) = *((($2 + [16]) + [8]))
	*($0 + [80]) = *($2 + [16])
	CALL void $0((int_32 $1), (int_32 *(*($0) + [20])))
	$global$0 = ($2 + [32])
}

void .FUNC $97 (int_32 $0)
{
	CALL prints([18755])
	CALL $98(($0 + [96]))
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18506])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18506])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $91 (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [96])
	*(($0 + [8])) = *(($1 + [104]))
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [104]))), [18664])
	$3 = (int_64)
	*($0 + [96]) = $3(*($0 + [96]) - *($1)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($0 + [96]) < (int_64)4611686018427387904), [18734])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($0 + [88]))), [18664])
	$3 = (int_64)
	*($0 + [80]) = $3(*($0 + [80]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($0 + [80]) < (int_64)4611686018427387904), [18734])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [72]))), [18765])
	$3 = ((int_64)*($0 + [64]) + (int_64)*($1))
	*($0 + [64]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($0 + [64]) < (int_64)4611686018427387904), [18827])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$global$0 = $4
	$5 = [0]
	$6 = [0]
	if ( ((int_64)*($1) < (int_64)0) ){ goto $label$1 }
	$6 = ((int_32)(CASTING uint_32)(uint_64 (uint_64)*($2) >> (uint_64)(int_64)63)) ^ (int_32)[1])
	
.LABEL $label$1
	CALL eosio_assert($6, [17003])
	$7 = *($1)
	CALL __fixunsdfti(($4 + [48]), ((float_64)CALL $fimport$32($7, (int_64)$7 >> (int_64)63)) * (float_64)CALL $157((float_64)10, (CASTING float_64)(uint_32 *($3)))))
	$7 = *((($4 + [48]) + [8]))
	$8 = *($4 + [48])
	CALL __multi3(($4 + [32]), $8, $7, (int_64)10, (int_64)0)
	$8 = (int_64)$9 >> (int_64)63
	$9 = *($1)
	CALL eosio_assert(( ((uint_64)$8 >= (uint_64)$9) ? ((uint_64)$7 >= (uint_64)$8)) : ((int_64)$7 == (int_64)$8) ), [17070])
	$10 = (int_64)$7 >> (int_64)63
	$7 = *($2)
	CALL __udivti3(($4 + [16]), *($4 + [32]), *((($4 + [32]) + [8])), $7, $10))
	$9 = ((int_64)*((($4 + [16]) + [8])) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($8 <= $9)))
	$9 = *($4 + [16])
	$8 = ((int_64)$9 + (int_64)5)
	CALL __udivti3($4, $8, $9, (int_64)10, (int_64)0)
	CALL eosio_assert(((int_64)((int_64)$7 | (int_64)$10) != (int_64)0), [16701])
	CALL eosio_assert(( ((int_64)$8 > (int_64)-1) ? (uint_64)($9 <= (int_64)2) : ((int_64)$9 == (int_64)2) ), [17117])
	$7 = *($4)
	*($0) = $7
	$8 = *($3)
	*($0 + [8]) = $8
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17269])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $8
	$0 = $5
	goto $label$4 
	
.LABEL $label$5
	$7 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$1 = ((int_32)$5 < (int_32)[6])
	$0 = ($5 + [1])
	$5 = $0
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$4
	$3 = [1]
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($3, [17393])
	$global$0 = ($4 + [64])
}

void .FUNC $123 (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_64 $2
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [18765])
	$2 = ((int_64)*($1) + (int_64)*($0))
	*($1) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [18827])
}

int_32 .FUNC $122 (int_32 $0)
{
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18189])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157495357179166720, (int_64)-4157495357179166720)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $129($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18189])
	
.LABEL $label$3
	*($3) = $1
	CALL eosio_assert([1], [18975])
	CALL $132($0, $4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [8]) = $1
	CALL $133($3, $0, $2, ($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [19010])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19056])
	*($1) = *(*($3))
	CALL eosio_assert([1], [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157495357179166720) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4157495357179166719
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$1()), [19215])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157495357179166720, $2, (int_64)-4157495357179166720, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157495357179166720) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4157495357179166719
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-4157495357179166720
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4157495357179166720
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $131(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $135($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $151($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $151($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $149($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_64 $2
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [18664])
	$2 = (int_64)
	*($1) = $2(*($1) - *($0)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [18734])
}

void .FUNC $136 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$0 = [0]
	*([0] + [8200]) = (int_64)1397703940
	*([0] + [8192]) = (int_64)100
	CALL eosio_assert([1], [18101])
	$1 = (uint_64)*([0] + [8200]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$3 = $0
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$6 }
	
.LABEL $label$4
	$4 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18150])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	$5 = [0]
	if ( ((int_64)*($1) < (int_64)0) ){ goto $label$1 }
	$5 = ((int_32)(CASTING uint_32)(uint_64 (uint_64)*($2) >> (uint_64)(int_64)63)) ^ (int_32)[1])
	
.LABEL $label$1
	CALL eosio_assert($5, [16787])
	$6 = *($1)
	$6 = *($2)
	CALL __multi3(($3 + [64]), $6, (int_64)$6 >> (int_64)63), $6, (int_64)$6 >> (int_64)63))
	CALL __multi3(($3 + [48]), *($3 + [64]), *((($3 + [64]) + [8])), (int_64)10, (int_64)0)
	CALL __fixunsdfti(($3 + [32]), CALL $157((float_64)10, (CASTING float_64)(uint_64 *($1 + [8]))))
	$8 = *((($3 + [32]) + [8]))
	$7 = *($3 + [32])
	CALL __udivti3(($3 + [16]), *($3 + [48]), *((($3 + [48]) + [8])), $7, $8)
	$9 = ((int_64)*((($3 + [16]) + [8])) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $9)))
	$9 = *($3 + [16])
	$6 = ((int_64)$9 + (int_64)5)
	CALL __udivti3($3, $6, $9, (int_64)10, (int_64)0)
	CALL eosio_assert(((int_64)((int_64)$7 | (int_64)$8) != (int_64)0), [16701])
	CALL eosio_assert(( ((int_64)$6 > (int_64)-1) ? (uint_64)($9 <= (int_64)2) : ((int_64)$9 == (int_64)2) ), [16947])
	$6 = *($3)
	*($0) = $6
	$9 = *($2 + [8])
	*($0 + [8]) = $9
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17269])
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $9
	$2 = $4
	goto $label$4 
	
.LABEL $label$5
	$6 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$1 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$4
	$0 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($0, [17393])
	$global$0 = ($3 + [80])
}

void .FUNC $120 (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($2 + [88])) = *(($1 + [72]))
	*($2 + [80]) = *($1 + [64])
	CALL $139(($2 + [64]), ($2 + [80]))
	if ( ((int_64)*($2 + [64]) < (int_64)1) ){ goto $label$1 }
	*($2 + [32]) = [19524]
	*($2 + [56]) = *($1 + [16])
	*($2 + [36]) = ($2 + [64])
	*($2 + [48]) = ($2 + [32])
	CALL $39($0, ($2 + [56]), [16648], ($2 + [32]))
	$3 = *($2 + [48])
	if ( ((int_32)($2 + [32]) == (int_32)$3) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$2 }
	CALL void $3((int_32 *(*($3) + [20])))
	goto $label$2 
	
.LABEL $label$3
	CALL void $3((int_32 *(*($3) + [16])))
	
.LABEL $label$2
	*($2 + [8]) = [19560]
	*($2 + [12]) = ($2 + [64])
	*($2 + [24]) = ($2 + [8])
	CALL $39($0, $0, [16648], ($2 + [8]))
	$0 = *($2 + [24])
	if ( ((int_32)($2 + [8]) == (int_32)$0) ){ goto $label$5 }
	if ( ($0 == 0) ){ goto $label$4 }
	CALL void $0((int_32 *(*($0) + [20])))
	goto $label$4 
	
.LABEL $label$5
	CALL void $0((int_32 *(*($0) + [16])))
	
.LABEL $label$4
	$0 = ($1 + [72])
	CALL eosio_assert(((int_64)*($0) == (int_64)*($2 + [72])), [18290])
	CALL eosio_assert(((int_64)*($1 + [64]) >= (int_64)*($2 + [64])), [19166])
	CALL eosio_assert(((int_64)*($2 + [72]) == (int_64)*($0)), [18664])
	$4 = (int_64)
	*($1 + [64]) = $4(*($1 + [64]) - *($2 + [64])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [18734])
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $126 (int_32 $0)
{
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($1 + [80])
	*($1 + [80]) = ((int_64)$6 + (int_64)1)
	*(($1 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*(($7 = (($5 + [16]) + [8]))) = *(($4 + [8]))
	*($5 + [32]) = *($3)
	*($5 + [16]) = *($4)
	*((($5 + [80]) + [8])) = *($7)
	*((($5 + [64]) + [8])) = *($1)
	*($5 + [80]) = *($5 + [16])
	*($5 + [64]) = *($5 + [32])
	CALL eosio_assert([1], [18101])
	$8 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$8 = $9
	$1 = $4
	goto $label$4 
	
.LABEL $label$5
	$8 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$4
	$3 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [18150])
	*($0 + [16]) = $2
	*($0 + [8]) = $6
	$7 = [0]
	*($0 + [56]) = [0]
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = (int_64)1397703940
	*($0) = [18856]
	*($0 + [24]) = *($5 + [64])
	$3 = (($5 + [64]) + [8])
	*(($4 = ($0 + [32]))) = *($3)
	$8 = *($5 + [80])
	*($0 + [40]) = $8
	$1 = (($5 + [80]) + [8])
	$9 = *($1)
	*(($0 + [48])) = $9
	*($0 + [80]) = $8
	*(($10 = ($0 + [88]))) = $9
	*($1) = *($10)
	*($5 + [80]) = *($0 + [80])
	*($3) = *($4)
	*($5 + [64]) = *($0 + [24])
	CALL $137($5, ($5 + [80]), ($5 + [64]))
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$10 = ($0 + [80])
	$0 = ($0 + [24])
	$8 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $9
	$1 = $4
	goto $label$9 
	
.LABEL $label$10
	$8 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$9
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$8 }
	*((($5 + [80]) + [8])) = *(($10 + [8]))
	*($5 + [80]) = *($10)
	*((($5 + [64]) + [8])) = *(($0 + [8]))
	*($5 + [64]) = *($0)
	CALL $137(($5 + [48]), ($5 + [80]), ($5 + [64]))
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)*([0] + [8200])), [18290])
	$7 = ((int_64)*($5 + [48]) >= (int_64)*([0] + [8192]))
	
.LABEL $label$7
	CALL eosio_assert($7, [18512])
	$global$0 = ($5 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [208])
	$global$0 = $4
	CALL $28($4, $1, $2, $3)
	CALL $29($0, ($3 + [8]), $1)
	CALL $49(($4 + [32]), $0, *($1), $2, $3)
	$5 = *($4 + [40])
	CALL prints([17564])
	CALL printui($5)
	CALL $12(($4 + [160]), *($0 + [36]), (uint_64)*($3 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [164]) != (int_32)[0]), [17694])
	$6 = *($4 + [164])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6 + [8])), [18290])
	CALL eosio_assert(((int_64)*($3) <= (int_64)*($6)), [17713])
	CALL $12(($4 + [24]), *($0 + [36]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [28]) != (int_32)[0]), [17752])
	CALL $50(($4 + [8]), $0, ($4 + [32]), ($4 + [24]))
	CALL void ($4 + [160])((int_32 ($4 + [32])), (int_32 *(*($4 + [32]) + [8])))
	*((($4 + [144]) + [8])) = *(($4 + [64]))
	*($4 + [144]) = *($4 + [56])
	CALL $137(($4 + [128]), ($4 + [160]), ($4 + [144]))
	CALL eosio_assert(((int_64)*($4 + [136]) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [128]) >= (int_64)*([0] + [8192])) ){ goto $label$2 }
	CALL $38($0, ($4 + [32]))
	CALL $32($0, ($4 + [32]), [1])
	$5 = *($4 + [8])
	$7 = *($4 + [16])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($4 + [112])
	$7 = *($4 + [16])
	CALL eosio_assert(((int_64)*(($4 + [120])) == (int_64)$7), [18765])
	$5 = ((int_64)$5 + (int_64)*($4 + [8]))
	*($4 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18827])
	$8 = *($1)
	$2 = *($0 + [32])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$1()), [19215])
	*(($3 = CALL _Znwj([64])) + [48]) = $2
	*($3 + [8]) = (int_64)0
	CALL void ($4 + [32])((int_32 $3), (int_32 *(*($4 + [32]) + [20])))
	*($4 + [152]) = (($4 + [160]) + [48])
	*($4 + [148]) = ($4 + [160])
	*($4 + [144]) = ($4 + [160])
	CALL $33(($4 + [144]), $3)
	$9 = *($3)
	*($3 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)3900539489767915520, $8, $9, ($4 + [160]), [48])
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$10 = ($2 + [8])
	$9 = *($10)
	$11 = *($3)
	*($4 + [128]) = *($3 + [16])
	*($3 + [56]) = CALL db_idx64_store($9, (int_64)3900539489767915520, $8, $11, ($4 + [128]))
	$9 = *($10)
	$11 = *($3)
	*($4 + [128]) = *(($3 + [8]))
	*($3 + [60]) = CALL db_idx64_store($9, (int_64)3900539489767915521, $8, $11, ($4 + [128]))
	*($4 + [144]) = $3
	$8 = *($3)
	*($4 + [160]) = $8
	$12 = *(($3 + [52]))
	*($4 + [128]) = $12
	$13 = ($2 + [28])
	$10 = *($13)
	if ( ((uint_32)$10 >= (uint_32)*(($2 + [32]))) ){ goto $label$5 }
	*($10 + [8]) = $8
	*($10 + [16]) = $12
	*($4 + [144]) = [0]
	*($10) = $3
	*($13) = ($10 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $51(($2 + [24]), ($4 + [144]), ($4 + [160]), ($4 + [128]))
	
.LABEL $label$4
	$3 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$8 = *($1)
	$0 = *(($0 + [36]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [19010])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19056])
	$3 = ($6 + [8])
	$9 = *($3)
	CALL eosio_assert(((int_64)$7 == (int_64)$9), [18664])
	$5 = (int_64)
	*($6) = $5(*($6) - $5))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18734])
	$5 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [160]), $6, [8])
	*($4 + [144]) = *($3)
	CALL eosio_assert([1], [18506])
	CALL memcpy((($4 + [160]) | [8]), ($4 + [144]), [8])
	CALL db_update_i64(*($6 + [20]), $8, ($4 + [160]), [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	*($1) = [19560]
	*($1 + [4]) = *($0 + [4])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4) = *($1)
	*($4 + [8]) = *($2)
	CALL $12(($4 + [40]), $4, *($3))
	CALL eosio_assert(((int_32)*($4 + [44]) != (int_32)[0]), [18957])
	$3 = *($4 + [44])
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	$2 = *($4 + [24])
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($4 + [28])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($1) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $24(($7 + [28]), [49])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $41(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [19300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19345])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19395])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $61(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $105($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $24($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $106($2, $1)
	CALL $108(CALL $107(CALL $107($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $24(($7 + [28]), [28])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $44(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $166($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16820])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16628])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16436]
	$3 = (((int_32)$1 * (int_32)[12]) + [16436])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $166 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8236]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8240])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8236]) = [1]
	$2 = ($2 << [16])
	*([0] + [8240]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8240])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8240]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8236]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8236]) = [1]
	$3 = ($3 << [16])
	*([0] + [8240]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8240])
	
.LABEL $label$10
	*([0] + [8240]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	*(($1 = CALL _Znwj([8]))) = [19560]
	*($1 + [4]) = *($0 + [4])
	return $1
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_64 $2
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [18765])
	$2 = ((int_64)*($1) + (int_64)*($0))
	*($1) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [18827])
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $164($1)
	
.LABEL $label$2
	*(CALL $154()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $164(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $167($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $154())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $163($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18263])
	CALL memcpy(($3 + [24]), $2, [8])
	*($5) = *($3 + [24])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [88])
	CALL $6($2, $3, (uint_64)*($1) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)[0]), [16906])
	$4 = *($2)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$1 = ((int_32)$0) != (int_32)[0]
	CALL eosio_assert($1), [19266])
	CALL eosio_assert($1, [19448])
	$1 = CALL db_next_i64(*($0 + [20]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $8((CASTING uint_32)(uint_64 $4), $1)
	
.LABEL $label$1
	CALL $10($3, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5)) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3665743317141815296, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $8($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $84($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($1) != (int_64)1397703940), [16656])
	$4 = ($0 + [88])
	CALL $6(($3 + [16]), $4, (uint_64)*($1) >> (uint_64)(int_64)8))
	CALL eosio_assert((*($3 + [20]) == 0), [16742])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$1()), [19215])
	*(($6 = CALL _Znwj([32])) + [16]) = $4
	$7 = *($1)
	*($6) = $7
	*($6 + [8]) = *($2)
	*($3 + [40]) = $7
	CALL eosio_assert([1], [18506])
	CALL memcpy(($3 + [16]), ($3 + [40]), [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy((($3 + [16]) | [8]), ($6 + [8]), [8])
	$7 = (uint_64)*($6) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*(($0 + [96])), (int_64)-3665743317141815296, $5, $7), ($3 + [16]), [16]
	*($6 + [20]) = $2)
	$1 = ($0 + [104])
	if ( (uint_64)($7 <= *($1)) ){ goto $label$1 }
	*($1) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($3 + [40]) = $6
	$7 = (uint_64)*($6) >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	*($3 + [12]) = $2
	$4 = ($0 + [116])
	$1 = *($4)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [120]))) ){ goto $label$3 }
	*($1 + [8]) = $7
	*($1 + [16]) = $2
	*($3 + [40]) = [0]
	*($1) = $6
	*($4) = ($1 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $7(($0 + [112]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$2
	$0 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [32])) = [0]
	*($4 + [8]) = $2
	*($4) = $1
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	CALL $4(($4 + [40]), $4, $3)
	CALL eosio_assert(((int_32)*($4 + [44]) != (int_32)[0]), [18170])
	$5 = *($4 + [44])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($4 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [24]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC memory ()
{
	CALL $136()
	CALL $140()
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($2 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($2 + [24 align=4]) = (int_64)0
	*($2 + [32]) = [0]
	*($0 + [36]) = $2
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	CALL $2(($1 + [8]), (int_64)6138663591592764928, $3, (int_64)5459781)
	$4 = *($0)
	$2 = *($0 + [36])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$1()), [19215])
	*(($0 = CALL _Znwj([32])) + [16]) = $2
	*($0 + [8]) = *((($1 + [8]) + [8]))
	*($0) = *($1 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($1 + [32]), $0, [8])
	*($1 + [56]) = *($0 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy((($1 + [32]) | [8]), ($1 + [56]), [8])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$5 = CALL db_store_i64(*($2 + [8]), (int_64)4152997948076064768, $4, $3), ($1 + [32]), [16]
	*($0 + [20]) = $5)
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$1
	*($1 + [56]) = $0
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($1 + [32]) = $3)
	*($1 + [28]) = $5
	$6 = ($2 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($2 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $3
	*($7 + [16]) = $5
	*($1 + [56]) = [0]
	*($7) = $0
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $3(($2 + [24]), ($1 + [56]), ($1 + [32]), ($1 + [28]))
	
.LABEL $label$2
	$0 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [64])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($1))
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($0 + [36]) = $4
	*($4) = *($0)
	*($4 + [8]) = *($1)
	CALL $12($3, $4, *($2))
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)[0]), [17094])
	CALL eosio_assert((int_64)(*(*($3 + [4])) == 0), [17149])
	CALL eosio_assert(CALL $15($0, $1, $2), [17215])
	$0 = *($0 + [36])
	$5 = *($3)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	$1 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($1), [19266])
	CALL eosio_assert($1, [19448])
	$1 = CALL db_next_i64(*($4 + [20]), ($3 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $13((CASTING uint_32)(uint_64 $5), $1)
	
.LABEL $label$1
	CALL $16($0, $4)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( ((int_64)*($2) != (int_64)5459781) ){ goto $label$3 }
	$4 = [0]
	$2 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)-3665743317141815296, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$5 = ($0 + [88])
	$2 = CALL $8($5, $2)
	$6 = *($1)
	*($3 + [8]) = (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( CALL $17($0, $6, ($3 + [8])) ){ goto $label$1 }
	
.LOOP $label$4:
	CALL eosio_assert([1], [19448])
	$2 = CALL db_next_i64(*($2 + [20]), ($3 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $8($5, $2)
	$6 = *($1)
	*($3 + [8]) = (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( (CALL $17($0, $6, ($3 + [8])) == 0) ){ goto $label$4 }
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	if ( CALL $17($0, *($1), $2) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19345])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19395])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = [0]
	*(($3 + [80])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	*($3 + [84]) = [0]
	$5 = *($0)
	*($3 + [48]) = $5
	$6 = *($2)
	*($3 + [56]) = $6
	*($3 + [8]) = (int_64)0
	*($3 + [104]) = $1
	$7 = CALL db_idx64_lowerbound($5, $6, (int_64)4292915607302569985, ($3 + [104]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL $18(($3 + [96]), ($3 + [48]), *($3 + [8]))
	*((($4 = *($3 + [100])) + [60])) = $7
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = [1]
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2)
	*($3 + [16]) = $6
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = $1
	$4 = [0]
	$2 = CALL db_idx64_lowerbound($5, $6, (int_64)3900539489767915521, ($3 + [96]), ($3 + [104]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $19(($3 + [88]), ($3 + [8]), *($3 + [104]))
	*((($4 = *($3 + [92])) + [60])) = $2
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$5 }
	$7 = ((int_64)*($4 + [8]) == (int_64)$1)
	
.LABEL $label$5
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $0
	
.LABEL $label$6
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$0 = *($3 + [72])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($3 + [76])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($3 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$global$0 = ($3 + [112])
	return $7
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19345])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((uint_64)((int_64)*(*(($5 + [-24]))) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8)) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19395])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($1))
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($0 + [36]) = $4
	*($4) = *($0)
	*($4 + [8]) = *($1)
	CALL $12($3, $4, *($2))
	CALL eosio_assert((*($3 + [4]) == 0), [16977])
	$5 = (int_64)1397703940
	$6 = *($2)
	if ( ((int_64)$6 == (int_64)5459781) ){ goto $label$1 }
	CALL $6(($3 + [16]), ($0 + [88]), $6)
	CALL eosio_assert(((int_32)*($3 + [20]) != (int_32)[0]), [17034])
	$5 = *(*($3 + [20]))
	
.LABEL $label$1
	$6 = *($1)
	$0 = *(($0 + [36]))
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19215])
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	*($4) = (int_64)0
	*($4 + [8]) = $5
	CALL eosio_assert([1], [18506])
	CALL memcpy(($3 + [16]), $4, [8])
	*($3 + [40]) = *($4 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy((($3 + [16]) | [8]), ($3 + [40]), [8])
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$2 = CALL db_store_i64(*($0 + [8]), (int_64)4152997948076064768, $6, $5), ($3 + [16]), [16]
	*($4 + [20]) = $2)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$2
	*($3 + [40]) = $4
	$5 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $5)
	*($3 + [12]) = $2
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$4 }
	*($1 + [8]) = $5
	*($1 + [16]) = $2
	*($3 + [40]) = [0]
	*($1) = $4
	*($7) = ($1 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $3(($0 + [24]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$3
	$4 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4152997948076064768, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $13($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18263])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $3(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $75 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [224]))) = (int_64)0
	*(($8 = ($4 + [240]))) = (int_64)0
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $7)
	*($4 + [296]) = ($4 + [176])
	*($4 + [32]) = ($4 + [192])
	CALL $83(($4 + [32]), ($4 + [296]))
	$9 = *($4 + [184])
	*((($4 + [16]) + [8])) = $9
	*(($4 + [8])) = $9
	$10 = *($4 + [176])
	*($4) = $10
	*($4 + [16]) = $10
	$9 = CALL $78(($4 + [32]), $0, $1, $4)
	*(($11 = (($4 + [264]) + [8]))) = *($3)
	*(($3 = (($4 + [248]) + [8]))) = *($8)
	*($4 + [264]) = *($4 + [216])
	*($4 + [248]) = *($4 + [232])
	$8 = *($4 + [200])
	$0 = *($4 + [192])
	$1 = *($4 + [208])
	*((($4 + [296]) + [8])) = *($3)
	*((($4 + [280]) + [8])) = *($11)
	*($4 + [312]) = $1
	*($4 + [296]) = *($4 + [248])
	*($4 + [280]) = *($4 + [264])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [255])), (int_32 ($4 + [312])), (int_32 ($4 + [280])), (int_32 ($4 + [296])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $167($2)
	
.LABEL $label$5
	CALL $79($9)
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4292915607302569984, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $86($1, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3900539489767915520, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $88($1, $5)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$1), [18189])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [36 align=1]) = [0]
	*($0 + [28]) = $4
	*($4) = *($0)
	*($4 + [8]) = *($1)
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [36 align=1]) = [0]
	*($0 + [32]) = $4
	*($4) = *($0)
	$5 = *($1)
	*($4 + [8]) = $5
	CALL $6(($3 + [8]), ($0 + [88]), $5)
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [17821])
	$4 = *($3 + [12])
	*(($0 + [136])) = *(($4 + [8]))
	*($0 + [128]) = *($4)
	CALL $18(($3 + [8]), *($0 + [28]), $2)
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [17847])
	$4 = CALL $53(($3 + [8]), *($3 + [12]), ($0 + [128]))
	CALL require_auth(*($4 + [16]))
	*((($3 + [160]) + [8])) = *(($4 + [88]))
	$2 = *($4 + [80])
	*($3 + [160]) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$1 }
	*($3 + [152]) = *(($4 + [16]))
	*($3 + [120]) = [19488]
	*($3 + [144]) = (uint_64)*($3 + [168]) >> (uint_64)(int_64)8)
	*($3 + [124]) = ($3 + [160])
	*($3 + [136]) = ($3 + [120])
	CALL $39($0, ($3 + [152]), ($3 + [144]), ($3 + [120]))
	$1 = *($3 + [136])
	if ( ((int_32)($3 + [120]) == (int_32)$1) ){ goto $label$2 }
	if ( ($1 == 0) ){ goto $label$1 }
	CALL void $1((int_32 *(*($1) + [20])))
	goto $label$1 
	
.LABEL $label$2
	CALL void $1((int_32 *(*($1) + [16])))
	
.LABEL $label$1
	CALL $32($0, $4, [0])
	$0 = *(($0 + [28]))
	CALL eosio_assert(((int_32)*($4 + [56]) != (int_32)[0]), [18888])
	CALL $54($0, *($4 + [56]))
	$global$0 = ($3 + [176])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [56])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4292915607302569984, ($3 + [8]), *($5))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [60]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569985, ($3 + [8]), *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_32 $30
	$4 = ($global$0 - [336])
	$global$0 = $4
	*($0) = (int_64)0
	$5 = *(($2 + [88]))
	*($0 + [8]) = $5
	CALL eosio_assert([1], [18101])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = $6
	goto $label$4 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$6 }
	
.LABEL $label$4
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18150])
	$6 = *($1 + [28])
	*($4 + [232]) = $6
	$5 = *($2 + [24])
	*($4 + [112]) = (int_64)0
	*($4 + [48]) = ((int_64)$5 ^ (int_64)-1)
	$10 = [0]
	$6 = CALL db_idx64_upperbound(*($6), *($6 + [8]), (int_64)4292915607302569984, ($4 + [48]), ($4 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $18(($4 + [256]), *($4 + [232]), *($4 + [112]))
	*((($10 = *($4 + [260])) + [56])) = $6
	
.LABEL $label$7
	*($4 + [112]) = (int_64)0
	*($4 + [48]) = (int_64)0
	$6 = *($4 + [232])
	$6 = CALL db_idx64_lowerbound(*($6), *($6 + [8]), (int_64)4292915607302569984, ($4 + [48]), ($4 + [112]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $18(($4 + [256]), *($4 + [232]), *($4 + [112]))
	*((($9 = *($4 + [260])) + [56])) = $6
	*($4 + [228]) = $9
	goto $label$8 
	
.LABEL $label$9
	*($4 + [228]) = [0]
	
.LABEL $label$8
	$11 = ($2 + [24])
	*($4 + [224]) = ($4 + [232])
	$12 = (($4 + [256]) + [48])
	$13 = (($4 + [304]) + [8])
	$14 = ($4 + [192])
	$15 = (($4 + [256]) | [8])
	$16 = (($4 + [112]) + [24])
	$17 = (($4 + [48]) + [8])
	$18 = ($2 + [16])
	$19 = ($1 + [36])
	$20 = (($4 + [48]) + [56])
	$21 = ($4 + [40])
	$22 = ($2 + [88])
	$23 = ($4 + [36])
	$24 = ($4 + [176])
	$25 = ($4 + [152])
	
.LOOP $label$11:
	CALL void ($4 + [112])((int_32 $2), (int_32 *(*($2) + [8])))
	*($17) = *(($11 + [8]))
	*($4 + [48]) = *($11)
	CALL $137(($4 + [256]), ($4 + [112]), ($4 + [48]))
	$9 = (($4 + [256]) + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [256]) < (int_64)*([0] + [8192])) ){ goto $label$10 }
	$6 = *($4 + [228])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$10 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($18)) ){ goto $label$12 }
	CALL $52(($4 + [224]))
	goto $label$11 
	
.LABEL $label$12
	CALL void ($4 + [48])((int_32 $2), (int_32 *(*($2) + [8])))
	$6 = CALL $53(($4 + [112]), $6, $17)
	$26 = ($16 + [8])
	*($9) = *($26)
	*($4 + [256]) = *($16)
	CALL $37(($4 + [48]), $1, $6, $2, ($4 + [256]))
	$7 = *((($4 + [48]) + [24]))
	CALL eosio_assert(((int_64)$7 == (int_64)*(($0 + [8]))), [18765])
	$27 = (($4 + [48]) + [16])
	$5 = ((int_64)*($0) + (int_64)*($27))
	*($0) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18827])
	$28 = *($18)
	$9 = *($19)
	$6 = *($3 + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)$9 == (int_32)*($6 + [16])), [19010])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6 + [8])
	CALL eosio_assert(((int_64)*($20) == (int_64)$5), [18765])
	$29 = ((int_64)*($6) + (int_64)*((($4 + [48]) + [48])))
	*($6) = $29
	CALL eosio_assert(((int_64)$29 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18827])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [256]), $6, [8])
	*($4 + [8]) = *($6 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy($15, ($4 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $28, ($4 + [256]), [16])
	if ( (uint_64)($5 <= *($9 + [16])) ){ goto $label$13 }
	*(($9 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$13
	*(($8 = (($4 + [8]) + [16]))) = (int_64)-1
	*(($30 = (($4 + [8]) + [24]))) = (int_64)0
	*($21) = [0]
	$9 = (($4 + [112]) + [16])
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [8]) = *($1)
	CALL $12($4, ($4 + [8]), (uint_64)*($22) >> (uint_64)(int_64)8))
	$28 = *($9)
	$6 = *($4 + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [8])), [19010])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$5), [18765])
	$7 = ((int_64)*($6) + (int_64)*($27))
	*($6) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18827])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [256]), $6, [8])
	*($4 + [304]) = *($6 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy($15, ($4 + [304]), [8])
	CALL db_update_i64(*($6 + [20]), $28, ($4 + [256]), [16])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$14 }
	*($8) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$14
	CALL void ($4 + [256])((int_32 ($4 + [112])), (int_32 *(*($4 + [112]) + [8])))
	*($13) = *($26)
	*($4 + [304]) = *($16)
	CALL $137(($4 + [240]), ($4 + [256]), ($4 + [304]))
	$26 = (($4 + [240]) + [8])
	CALL eosio_assert(((int_64)*($26) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [240]) >= (int_64)*([0] + [8192])) ){ goto $label$18 }
	*($13) = *(($14 + [8]))
	$5 = *($14)
	*($4 + [304]) = $5
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$16 }
	*($4 + [240]) = *($9)
	*($4 + [256]) = [19488]
	*($4 + [328]) = (uint_64)*($13) >> (uint_64)(int_64)8)
	*($4 + [260]) = ($4 + [304])
	*(($6 = (($4 + [256]) + [16]))) = ($4 + [256])
	CALL $39($1, ($4 + [240]), ($4 + [328]), ($4 + [256]))
	$6 = *($6)
	if ( ((int_32)($4 + [256]) == (int_32)$6) ){ goto $label$17 }
	if ( ($6 == 0) ){ goto $label$16 }
	CALL void $6((int_32 *(*($6) + [20])))
	goto $label$16 
	
.LABEL $label$18
	$6 = *($4 + [228])
	$7 = *($6 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	$8 = *($4 + [232])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$8), [19010])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6)
	$28 = *((($4 + [112]) + [8]))
	*($6) = $28
	*($13) = *($6 + [8])
	*($6 + [8]) = *($9)
	$29 = *($6 + [16])
	*($6 + [16]) = *($16)
	*($6 + [24]) = *($24)
	*($6 + [32]) = *($14)
	*($6 + [40]) = *($25)
	*($4 + [304]) = ((int_64)$29 ^ (int_64)-1)
	CALL eosio_assert(((int_64)$5 == (int_64)$28), [19107])
	*($26) = $12
	*($4 + [244]) = ($4 + [256])
	*($4 + [240]) = ($4 + [256])
	CALL $33(($4 + [240]), $6)
	CALL db_update_i64(*($6 + [52]), $7, ($4 + [256]), [48])
	if ( (uint_64)($5 <= *($8 + [16])) ){ goto $label$19 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($4 + [328]) = ((int_64)*(($6 + [16])) ^ (int_64)-1)
	if ( (CALL $160(($4 + [304]), ($4 + [328]), [8]) == 0) ){ goto $label$20 }
	$26 = ($6 + [56])
	$9 = *($26)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$21 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4292915607302569984, ($4 + [320]), $5)
	*($26) = $9
	
.LABEL $label$21
	CALL db_idx64_update($9, $7, ($4 + [328]))
	
.LABEL $label$20
	*($4 + [328]) = *(($6 + [8]))
	if ( (CALL $160($13, ($4 + [328]), [8]) == 0) ){ goto $label$22 }
	$9 = ($6 + [60])
	$6 = *($9)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)4292915607302569985, ($4 + [320]), $5)
	*($9) = $6
	
.LABEL $label$23
	CALL db_idx64_update($6, $7, ($4 + [328]))
	
.LABEL $label$22
	CALL $52(($4 + [224]))
	$8 = *($30)
	if ( $8 ){ goto $label$15 }
	goto $label$11 
	
.LABEL $label$17
	CALL void $6((int_32 *(*($6) + [16])))
	
.LABEL $label$16
	CALL $32($1, ($4 + [112]), [1])
	$5 = *($4 + [224])
	*($4 + [256]) = $5
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19266])
	CALL $52(($4 + [256]))
	CALL $54(*($4 + [232]), $6)
	*($4 + [224]) = *($4 + [256])
	$8 = *($30)
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$15
	$6 = *($23)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$27 }
	CALL _ZdlPv($9)
	
.LABEL $label$27
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$26 }
	$6 = *($30)
	goto $label$24 
	
.LABEL $label$25
	$6 = $8
	
.LABEL $label$24
	*($23) = $8
	CALL _ZdlPv($6)
	goto $label$11 
	
.LABEL $label$10
	$global$0 = ($4 + [336])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19448])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4292915607302569984, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$3 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $18($1, *(*($0)), *($1 + [8]))
	$2 = *($1 + [4])
	*(($0 + [4])) = $2
	*(($2 + [56])) = $3
	goto $label$2 
	
.LABEL $label$3
	*(($0 + [4])) = [0]
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $36($0, $1, $2, [16640], $2)
	*($0 + [96]) = (int_64)0
	*($0) = [18552]
	*(($1 = ($0 + [104]))) = (int_64)0
	*(($4 = (($3 + [16]) + [8]))) = *(($0 + [32]))
	*($3 + [16]) = *($0 + [24])
	CALL $138(($3 + [32]), ($0 + [80]), ($3 + [16]), $2)
	$5 = *(($0 + [48]))
	*(($3 + [8])) = $5
	*($4) = $5
	$6 = *($0 + [40])
	*($3 + [16]) = $6
	*($3) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*(($0 + [72]))), [18664])
	$6 = (int_64)
	*($3 + [16]) = $6(*($3 + [16]) - *($0 + [64])))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [18734])
	CALL eosio_assert(((int_64)$5 == (int_64)*($3 + [40])), [18290])
	$2 = ( ($3 + [32]) ? ($3 + [16]) : ((int_64)*($3 + [32]) < (int_64)$6) )
	*($0 + [96]) = *($2)
	*($1) = *(($2 + [8]))
	$global$0 = ($3 + [48])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [19300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19345])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19395])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $59(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0)
{
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = *($0)
	*($3 + [24]) = [17531]
	*($3 + [28]) = CALL $161([17531])
	*($3 + [16]) = *($3 + [24])
	$5 = *(CALL $23(($3 + [56]), ($3 + [16])))
	$6 = *($0)
	*($3 + [24]) = [18946]
	*($3 + [28]) = CALL $161([18946])
	*($3 + [8]) = *($3 + [24])
	$7 = *(CALL $23(($3 + [56]), ($3 + [8])))
	*((($3 + [24]) + [8])) = *(($1 + [8]))
	*((($3 + [24]) + [24])) = *(($2 + [8]))
	*($3 + [56]) = $6
	*($3 + [64]) = $7
	*($3 + [24]) = *($1)
	*($3 + [40]) = *($2)
	*(($2 = CALL _Znwj([16]))) = $4
	*($2 + [8]) = $5
	*(($3 + [92])) = [0]
	$1 = ($2 + [16])
	*((($3 + [56]) + [24])) = $1
	*(($3 + [76])) = $1
	*($3 + [72]) = $2
	*($3 + [84 align=4]) = (int_64)0
	CALL $24(($3 + [84]), [32])
	$2 = *((($3 + [56]) + [32]))
	$1 = *($3 + [84])
	*($3 + [116]) = $1
	*($3 + [112]) = $1
	*($3 + [120]) = $2
	*($3 + [96]) = ($3 + [112])
	*($3 + [104]) = ($3 + [24])
	CALL $64(($3 + [104]), ($3 + [96]))
	CALL $26(($3 + [112]), ($3 + [56]))
	$2 = *($3 + [112])
	CALL send_inline($2, (*($3 + [116]) - $2))
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$1 }
	*($3 + [116]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$2 = *($3 + [84])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [88])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($3 + [72])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$global$0 = ($3 + [128])
}

void .FUNC $116 (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	*(($1 = CALL _Znwj([8]))) = [19524]
	*($1 + [4]) = *($0 + [4])
	return $1
}

void .FUNC $114 (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19448])
	$2 = *($0 + [4])
	$3 = *($2 + [56])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)3900539489767915520, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [56]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$3 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $19($1, *(*($0)), *($1 + [8]))
	$2 = *($1 + [4])
	*(($0 + [4])) = $2
	*(($2 + [56])) = $3
	goto $label$2 
	
.LABEL $label$3
	*(($0 + [4])) = [0]
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	*($1) = [19488]
	*($1 + [4]) = *($0 + [4])
}

void .FUNC $113 (int_32 $0)
{
}

void .FUNC $110 (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $111 (int_32 $0)
{
	int_32 $1
	*(($1 = CALL _Znwj([8]))) = [19488]
	*($1 + [4]) = *($0 + [4])
	return $1
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17181])
	$3 = *($1)
	CALL __multi3(($2 + [32]), $3, (int_64)$3 >> (int_64)63), (int_64)10, (int_64)0)
	CALL __udivti3(($2 + [16]), *($2 + [32]), *((($2 + [32]) + [8])), (int_64)100, (int_64)0)
	$3 = *($2 + [16])
	$4 = ((int_64)$3 + (int_64)5)
	CALL __udivti3($2, $4, ((int_64)*((($2 + [16]) + [8])) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($4 <= $3))), (int_64)10, (int_64)0)
	CALL eosio_assert([1], [16701])
	$3 = *($1 + [8])
	*($0 + [8]) = $3
	$4 = *($2)
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17269])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $4
	$5 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$4
	$0 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [17393])
	$global$0 = ($2 + [48])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	*($1) = [19524]
	*($1 + [4]) = *($0 + [4])
}

void .FUNC $119 (int_32 $0)
{
}

void .FUNC $152 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $153 ()
{
	CALL eosio_assert([0], [16715])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_64 .FUNC $156 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $157 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $159($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $156($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [19616])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [19600]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [19632]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $158($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $154 ()
{
	return [8228]
}

void .FUNC $155 (int_32 $0)
{
}

int_64 .FUNC $158 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $159 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $6(($3 + [8]), ($0 + [88]), (uint_64)*($1) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [17821])
	$4 = *($3 + [12])
	*(($0 + [136])) = *(($4 + [8]))
	*($0 + [128]) = *($4)
	CALL eosio_assert(((int_32)*($0 + [128]) == (int_32)*($1)), [18268])
	$5 = *($1)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*(($1 = CALL _Znwj([40])) + [8]) = $5)
	*($1 + [16]) = (int_64)-1
	*($1 + [24 align=4]) = (int_64)0
	*($1 + [32]) = [0]
	*($1 + [36 align=1]) = [0]
	*($0 + [28]) = $1
	*($1) = *($0)
	*(($1 = CALL _Znwj([40])) + [8]) = $5
	*($1 + [16]) = (int_64)-1
	*($1 + [24 align=4]) = (int_64)0
	*($1 + [32]) = [0]
	*($1 + [36 align=1]) = [0]
	*($0 + [32]) = $1
	*($1) = *($0)
	*(($1 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($1 + [24 align=4]) = (int_64)0
	*($1 + [32]) = [0]
	*($0 + [36]) = $1
	*($1) = *($0)
	*($1 + [8]) = *($2)
	$global$0 = ($3 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [17868])
	$4 = [0]
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$6 = $7
	$8 = $1
	goto $label$4 
	
.LABEL $label$5
	$6 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$4
	$5 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [17919])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $7
	$8 = $1
	goto $label$10 
	
.LABEL $label$11
	$6 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$10
	$4 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [17936])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [17954])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [17977])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [80])
	*(($0 + [8])) = *(($1 + [88]))
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18506])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18506])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18506])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $90(CALL $89($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18506])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18506])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18506])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18506])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [1]
	if ( CALL has_auth(*($1)) ){ goto $label$1 }
	$4 = CALL has_auth(*($0))
	
.LABEL $label$1
	CALL eosio_assert($4, [17459])
	CALL $22($0, $1, $2, $3)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$1 }
	$6 = *($3 + [8])
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)6138663591592764928), [17318])
	goto $label$2 
	
.LABEL $label$3
	CALL $6(($5 + [16]), ($0 + [88]), (uint_64)$6 >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($5 + [20]) != (int_32)[0]), [17821])
	$7 = *($5 + [20])
	*(($2 = ($0 + [136]))) = *(($7 + [8]))
	*($0 + [128]) = *($7)
	CALL eosio_assert(((int_32)*($0 + [128]) == (int_32)*(($3 + [8]))), [18268])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($2)), [17318])
	
.LABEL $label$2
	*(($2 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($2 + [24 align=4]) = (int_64)0
	*($2 + [32]) = [0]
	*($0 + [36]) = $2
	*($2) = *($0)
	*($2 + [8]) = *($1)
	$7 = ($3 + [8])
	CALL $12(($5 + [8]), $2, (uint_64)*($7) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($5 + [12]) != (int_32)[0]), [17413])
	$8 = *($1)
	$2 = *($0 + [36])
	$0 = *($5 + [12])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)$2 == (int_32)*($0 + [16])), [19010])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$1()), [19056])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)$6), [18765])
	$9 = ((int_64)*($0) + (int_64)*($3))
	*($0) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [18827])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($5 + [16]), $0, [8])
	*($5 + [40]) = *($0 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy((($5 + [16]) | [8]), ($5 + [40]), [8])
	CALL db_update_i64(*($0 + [20]), $8, ($5 + [16]), [16])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18349])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18454])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18387])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18454])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = [0]
	*($0 + [36]) = $5
	*($5) = *($0)
	*($5 + [8]) = *($1)
	CALL $12(($4 + [120]), $5, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [124]) != (int_32)[0]), [17491])
	$5 = *($4 + [124])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*($2 + [8])), [18290])
	CALL eosio_assert(((int_64)*($5) >= (int_64)*($2)), [17513])
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$2 }
	$6 = *(($0 + [36]))
	$7 = *($1)
	$5 = *($4 + [124])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)$6 == (int_32)*($5 + [16])), [19010])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$1()), [19056])
	$9 = *($5 + [8])
	$8 = ($2 + [8])
	CALL eosio_assert(((int_64)*($8) == (int_64)$9), [18664])
	$10 = (int_64)
	*($5) = $10(*($5) - *($2)))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [18734])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [32]), $5, [8])
	*($4 + [80]) = *($5 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy((($4 + [32]) | [8]), ($4 + [80]), [8])
	CALL db_update_i64(*($5 + [20]), $7, ($4 + [32]), [16])
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$3 }
	*(($6 + [16])) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$3
	$9 = (int_64)6138663591592764928
	$7 = *($8)
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$4 }
	CALL $6(($4 + [32]), ($0 + [88]), (uint_64)$7 >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [36]) != (int_32)[0]), [17821])
	$6 = *($4 + [36])
	*(($5 = ($0 + [136]))) = *(($6 + [8]))
	*($0 + [128]) = *($6)
	CALL eosio_assert(((int_32)*($0 + [128]) == (int_32)*(($2 + [8]))), [18268])
	$9 = *($5)
	
.LABEL $label$4
	$7 = *($0)
	*($4 + [80]) = [17531]
	*($4 + [84]) = CALL $161([17531])
	*($4 + [8]) = *($4 + [80])
	$10 = *(CALL $23(($4 + [32]), ($4 + [8])))
	*($4 + [80]) = [17538]
	*($4 + [84]) = CALL $161([17538])
	*($4) = *($4 + [80])
	$11 = *(CALL $23(($4 + [32]), $4))
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$5 = CALL $161([17547])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$7 }
	*($4 + [16]) = ($5 << [1])
	$6 = (($4 + [16]) | [1])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($4 + [16]) = ($8 | [1])
	*($4 + [24]) = $6
	*($4 + [20]) = $5
	
.LABEL $label$6
	CALL memcpy($6, [17547], $5)
	
.LABEL $label$5
	*(($6 + $5)) = [0]
	*((($4 + [32]) + [24])) = *(($2 + [8]))
	$5 = (($4 + [16]) + [8])
	*(($4 + [72])) = *($5)
	*($5) = [0]
	*($4 + [80]) = $9
	*($4 + [88]) = $11
	*($4 + [32]) = *($0)
	*($4 + [40]) = *($1)
	*($4 + [48]) = *($2)
	*($4 + [64]) = *($4 + [16])
	*($4 + [16]) = (int_64)0
	*(($2 = CALL _Znwj([16]))) = $7
	*($2 + [8]) = $10
	*((($4 + [80]) + [36])) = [0]
	$5 = ($2 + [16])
	*((($4 + [80]) + [24])) = $5
	*(($4 + [100])) = $5
	*($4 + [96]) = $2
	*($4 + [108 align=4]) = (int_64)0
	$2 = *($4 + [64])
	$5 = ( *((($4 + [32]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = ($4 + [108])
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $24($5, $2)
	$5 = *(($4 + [112]))
	$2 = *(($4 + [108]))
	goto $label$9 
	
.LABEL $label$10
	$5 = [0]
	$2 = [0]
	
.LABEL $label$9
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = $5
	*($4 + [128]) = ($4 + [144])
	*($4 + [136]) = ($4 + [32])
	CALL $25(($4 + [136]), ($4 + [128]))
	CALL $26(($4 + [144]), ($4 + [80]))
	$2 = *($4 + [144])
	CALL send_inline($2, (*($4 + [148]) - $2))
	$2 = *($4 + [144])
	if ( ($2 == 0) ){ goto $label$11 }
	*($4 + [148]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($4 + [108])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [112])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$2 = *($4 + [96])
	if ( ($2 == 0) ){ goto $label$13 }
	*(($4 + [100])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	if ( ((*(($4 + [64])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$14
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$2
	if ( ($3 == 0) ){ goto $label$15 }
	$2 = *($4 + [124])
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$15 }
	*($4 + [32]) = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( (CALL $15($0, $1, ($4 + [32])) == 0) ){ goto $label$15 }
	$5 = *(($0 + [36]))
	$9 = *($4 + [120])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)32)
	$0 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($0), [19266])
	CALL eosio_assert($0, [19448])
	$0 = CALL db_next_i64(*($2 + [20]), ($4 + [32]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$16 }
	CALL $13((CASTING uint_32)(uint_64 $9), $0)
	
.LABEL $label$16
	CALL $16($5, $2)
	
.LABEL $label$15
	$global$0 = ($4 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $149(($4 + [16]))
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $152($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL $28($4, $1, $2, $3)
	CALL $29($0, ($3 + [8]), $1)
	CALL $30(($4 + [32]), $0, *($1), $2, $3)
	$5 = *($4 + [40])
	CALL prints([17564])
	CALL printui($5)
	$6 = ($4 + [120])
	$5 = *($6)
	$7 = *($4 + [112])
	CALL $12(($4 + [160]), *($0 + [36]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [164]) != (int_32)[0]), [17575])
	$2 = *($4 + [164])
	CALL eosio_assert(((int_64)$5 == (int_64)*($2 + [8])), [18290])
	CALL eosio_assert(((int_64)$7 <= (int_64)*($2)), [17598])
	CALL $12(($4 + [24]), *($0 + [36]), (uint_64)*($3 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($4 + [28]) != (int_32)[0]), [17636])
	CALL $31(($4 + [8]), $0, ($4 + [32]), ($4 + [24]))
	CALL void ($4 + [160])((int_32 ($4 + [32])), (int_32 *(*($4 + [32]) + [8])))
	*(($8 = (($4 + [208]) + [8]))) = *(($4 + [64]))
	*($4 + [208]) = *($4 + [56])
	CALL $137(($4 + [144]), ($4 + [160]), ($4 + [208]))
	CALL eosio_assert(((int_64)*($4 + [152]) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [144]) >= (int_64)*([0] + [8192])) ){ goto $label$2 }
	CALL $32($0, ($4 + [32]), [1])
	$5 = *($4 + [8])
	$7 = *($4 + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL void ($4 + [160])((int_32 ($4 + [32])), (int_32 *(*($4 + [32]) + [8])))
	$9 = ($4 + [56])
	$10 = ($9 + [8])
	*($8) = *($10)
	*($4 + [208]) = *($9)
	CALL $137(($4 + [144]), ($4 + [160]), ($4 + [208]))
	$7 = *($4 + [16])
	CALL eosio_assert(((int_64)*($4 + [152]) == (int_64)$7), [18765])
	$5 = ((int_64)*($4 + [8]) + (int_64)*($4 + [144]))
	*($4 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18827])
	$11 = *($1)
	$12 = *($0 + [28])
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$1()), [19215])
	*(($3 = CALL _Znwj([64])) + [48]) = $12
	*($3 + [8]) = (int_64)0
	*($8) = *($10)
	*($4 + [208]) = *($9)
	CALL $137(($4 + [160]), ($4 + [128]), ($4 + [208]))
	*($6) = *((($4 + [160]) + [8]))
	*($4 + [112]) = *($4 + [160])
	CALL void ($4 + [32])((int_32 $3), (int_32 *(*($4 + [32]) + [20])))
	*($4 + [216]) = (($4 + [160]) + [48])
	*($4 + [212]) = ($4 + [160])
	*($4 + [208]) = ($4 + [160])
	CALL $33(($4 + [208]), $3)
	$13 = *($3)
	*($3 + [52]) = CALL db_store_i64(*($12 + [8]), (int_64)4292915607302569984, $11, $13, ($4 + [160]), [48])
	if ( (uint_64)($13 <= *($12 + [16])) ){ goto $label$3 }
	*(($12 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = ($12 + [8])
	$13 = *($8)
	$14 = *($3)
	*($4 + [144]) = ((int_64)*($3 + [16]) ^ (int_64)-1)
	*($3 + [56]) = CALL db_idx64_store($13, (int_64)4292915607302569984, $11, $14, ($4 + [144]))
	$13 = *($8)
	$14 = *($3)
	*($4 + [144]) = *(($3 + [8]))
	*($3 + [60]) = CALL db_idx64_store($13, (int_64)4292915607302569985, $11, $14, ($4 + [144]))
	*($4 + [208]) = $3
	$11 = *($3)
	*($4 + [160]) = $11
	$6 = *(($3 + [52]))
	*($4 + [144]) = $6
	$9 = ($12 + [28])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($12 + [32]))) ){ goto $label$5 }
	*($8 + [8]) = $11
	*($8 + [16]) = $6
	*($4 + [208]) = [0]
	*($8) = $3
	*($9) = ($8 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $34(($12 + [24]), ($4 + [208]), ($4 + [160]), ($4 + [144]))
	
.LABEL $label$4
	$3 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$11 = *($1)
	$0 = *(($0 + [36]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$0), [19010])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19056])
	$3 = ($2 + [8])
	$13 = *($3)
	CALL eosio_assert(((int_64)$7 == (int_64)$13), [18664])
	$5 = (int_64)
	*($2) = $5(*($2) - $5))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [18734])
	$5 = (uint_64)$13 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [160]), $2, [8])
	*($4 + [208]) = *($3)
	CALL eosio_assert([1], [18506])
	CALL memcpy((($4 + [160]) | [8]), ($4 + [208]), [8])
	CALL db_update_i64(*($2 + [20]), $11, ($4 + [160]), [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18506])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18506])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $90(CALL $89($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18506])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18506])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19588])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18263])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [192]) = (int_64)0
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18263])
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [184]) = *($4 + [40])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy((($4 + [184]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $78(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [192])
	*($4 + [200]) = *($4 + [184])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [200])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($8)
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [208]))) = (int_64)0
	*(($8 = ($4 + [224]))) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $7)
	*($4 + [280]) = ($4 + [176])
	*($4 + [32]) = ($4 + [192])
	CALL $77(($4 + [32]), ($4 + [280]))
	$9 = *($4 + [184])
	*((($4 + [16]) + [8])) = $9
	*(($4 + [8])) = $9
	$10 = *($4 + [176])
	*($4) = $10
	*($4 + [16]) = $10
	$9 = CALL $78(($4 + [32]), $0, $1, $4)
	*(($11 = (($4 + [248]) + [8]))) = *($3)
	*(($3 = (($4 + [232]) + [8]))) = *($8)
	*($4 + [248]) = *($4 + [200])
	*($4 + [232]) = *($4 + [216])
	$0 = *($4 + [192])
	*((($4 + [280]) + [8])) = *($3)
	*((($4 + [264]) + [8])) = *($11)
	*($4 + [296]) = $0
	*($4 + [280]) = *($4 + [232])
	*($4 + [264]) = *($4 + [248])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [296])), (int_32 ($4 + [264])), (int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($9)
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18506])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18506])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $90($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19010])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$1()), [19056])
	$3 = *($3 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	$6 = *($1 + [8])
	CALL void $3((int_32 $1), (int_32 *(*($3) + [24])))
	$3 = ($1 + [8])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)), [19107])
	$7 = $4
	$4 = ($7 + [-16])
	$global$0 = $4
	CALL eosio_assert([1], [18506])
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($3)
	CALL eosio_assert([1], [18506])
	CALL memcpy(($7 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$2
	$global$0 = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [18506])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	*($4 + [176]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18263])
	CALL memcpy(($4 + [176]), $2, [8])
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy(($4 + [32]), ($2 + [8]), [8])
	*($4 + [184]) = *($4 + [32])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $78(($4 + [32]), $0, $1, $4)
	$0 = *($4 + [176])
	*($4 + [192]) = *($4 + [184])
	*($4 + [200]) = $0
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [200])), (int_32 ($4 + [192])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($8)
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)4730614998765420543) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)6603144728845545983) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4730614998765420544) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4929617625949196448) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [1]
	*($3 + [48]) = *($3 + [176])
	CALL $67($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [224]) = [17538]
	*($3 + [228]) = CALL $161([17538])
	*($3 + [112]) = *($3 + [224])
	CALL $23(($3 + [232]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)-3617352386980462593) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-6533258947265424384) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-5000796305862164480) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4421672816961650688) ){ goto $label$1 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [2]
	*($3 + [16]) = *($3 + [208])
	CALL $68($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4730614989913587712) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [72]) = *($3 + [152])
	CALL $69($0, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-3617352386980462592) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3103360133773344768) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [96]) = *($3 + [128])
	CALL $70($0, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)6603144728845545984) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [104]) = *($3 + [120])
	CALL $71($0, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [80]) = *($3 + [144])
	CALL $69($0, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [188]) = [0]
	*($3 + [184]) = [7]
	*($3 + [40]) = *($3 + [184])
	CALL $67($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3 + [88]) = *($3 + [136])
	CALL $72($0, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [32]) = *($3 + [192])
	CALL $73($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [220]) = [0]
	*($3 + [216]) = [10]
	*($3 + [8]) = *($3 + [216])
	CALL $68($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [172]) = [0]
	*($3 + [168]) = [11]
	*($3 + [56]) = *($3 + [168])
	CALL $74($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [164]) = [0]
	*($3 + [160]) = [12]
	*($3 + [64]) = *($3 + [160])
	CALL $75($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [204]) = [0]
	*($3 + [200]) = [13]
	*($3 + [24]) = *($3 + [200])
	CALL $76($0, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $155([0])
	$global$0 = ($3 + [240])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [56])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3900539489767915520, ($3 + [8]), *($5))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [60]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3900539489767915521, ($3 + [8]), *($4))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [36 align=1]) = [0]
	*($0 + [28]) = $4
	*($4) = *($0)
	*($4 + [8]) = *($1)
	*(($4 = CALL _Znwj([40])) + [16]) = (int_64)-1
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [36 align=1]) = [0]
	*($0 + [32]) = $4
	*($4) = *($0)
	$5 = *($1)
	*($4 + [8]) = $5
	CALL $6(($3 + [8]), ($0 + [88]), $5)
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [17821])
	$4 = *($3 + [12])
	*(($0 + [136])) = *(($4 + [8]))
	*($0 + [128]) = *($4)
	CALL $19(($3 + [8]), *($0 + [32]), $2)
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [17847])
	$4 = ($0 + [128])
	$4 = CALL $36(($3 + [8]), *($3 + [12]), [16640], $4, $4)
	*($3 + [8]) = [18856]
	CALL require_auth(*($3 + [24]))
	*((($3 + [144]) + [8])) = *((($3 + [8]) + [88]))
	$2 = *($3 + [88])
	*($3 + [144]) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$1 }
	*($3 + [136]) = *(($3 + [24]))
	*($3 + [104]) = [19488]
	*($3 + [128]) = (uint_64)*($3 + [152]) >> (uint_64)(int_64)8)
	*($3 + [108]) = ($3 + [144])
	*($3 + [120]) = ($3 + [104])
	CALL $39($0, ($3 + [136]), ($3 + [128]), ($3 + [104]))
	$1 = *($3 + [120])
	if ( ((int_32)($3 + [104]) == (int_32)$1) ){ goto $label$2 }
	if ( ($1 == 0) ){ goto $label$1 }
	CALL void $1((int_32 *(*($1) + [20])))
	goto $label$1 
	
.LABEL $label$2
	CALL void $1((int_32 *(*($1) + [16])))
	
.LABEL $label$1
	CALL $38($0, ($3 + [8]))
	CALL $32($0, $4, [0])
	$0 = *(($0 + [32]))
	CALL eosio_assert(((int_32)*($3 + [64]) != (int_32)[0]), [18888])
	CALL $40($0, *($3 + [64]))
	$global$0 = ($3 + [160])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL require_auth(*($0))
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
}

void .FUNC $101 (int_32 $0)
{
	CALL prints([18624])
	CALL $98(($0 + [64]))
	CALL prints([18636])
	CALL $98(($0 + [80]))
	CALL prints([18651])
	CALL $98(($0 + [24]))
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	CALL void $0((int_32 $1), (int_32 *(*($0) + [20])))
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [88]))), [18664])
	$3 = (int_64)
	*($0 + [80]) = $3(*($0 + [80]) - *($1)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18712])
	CALL eosio_assert(((int_64)*($0 + [80]) < (int_64)4611686018427387904), [18734])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($0 + [72]))), [18765])
	$3 = ((int_64)*($0 + [64]) + (int_64)*($2))
	*($0 + [64]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($0 + [64]) < (int_64)4611686018427387904), [18827])
}

void .FUNC $102 (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $104 (int_32 $0)
{
	return [1]
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18506])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18506])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18506])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5 + [8]) = (int_64)0
	CALL $87(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $51(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18263])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18263])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18263])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18263])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18263])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5 + [8]) = (int_64)0
	CALL $87(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $152($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18263])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18263])
	CALL memcpy(($0 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18263])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [24]) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $134(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $149 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $162(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8224])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $162(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $167($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $164($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8224])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $164($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $140 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$0 = [0]
	*([0] + [8216]) = (int_64)1397703940
	*([0] + [8208]) = (int_64)100
	CALL eosio_assert([1], [17269])
	$1 = (uint_64)*([0] + [8216]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$3 = $0
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$6 }
	
.LABEL $label$4
	$4 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [17393])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $167($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [184]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18263])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4 + [176]) = *($4 + [32])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [18263])
	CALL memcpy((($4 + [176]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $78(($4 + [32]), $0, $1, $4)
	$0 = *($4 + [176])
	*($4 + [192]) = *($4 + [184])
	*($4 + [200]) = $0
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [200])), (int_32 ($4 + [192])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($8)
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [216]))) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [224]) = [0]
	*($4 + [188]) = $2
	*($4 + [184]) = $2
	*($4 + [192]) = ($2 + $7)
	*($4 + [248]) = ($4 + [184])
	*($4 + [40]) = ($4 + [200])
	CALL $81(($4 + [40]), ($4 + [248]))
	$8 = *($4 + [192])
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $8
	$9 = *($4 + [184])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	$8 = CALL $78(($4 + [40]), $0, $1, ($4 + [8]))
	*(($10 = (($4 + [232]) + [8]))) = *($3)
	*($4 + [232]) = *($4 + [208])
	$11 = *($4 + [224])
	$0 = *($4 + [200])
	*((($4 + [248]) + [8])) = *($10)
	*($4 + [264]) = $0
	*($4 + [248]) = *($4 + [232])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [264])), (int_32 ($4 + [248])), (int_32 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $167($2)
	
.LABEL $label$5
	CALL $79($8)
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18263])
	CALL memcpy(($4 + [40]), $2, [8])
	$8 = *($4 + [40])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$9 = CALL $78(($4 + [40]), $0, $1, ($4 + [8]))
	*($4 + [184]) = $8
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [184])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($9)
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $78(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($8)
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [216]))) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $7)
	*($4 + [272]) = ($4 + [176])
	*($4 + [32]) = ($4 + [192])
	CALL $80(($4 + [32]), ($4 + [272]))
	$8 = *($4 + [184])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$9 = *($4 + [176])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $78(($4 + [32]), $0, $1, $4)
	*(($8 = (($4 + [256]) + [8]))) = *($3)
	*($4 + [256]) = *($4 + [208])
	$0 = *($4 + [200])
	$1 = *($4 + [192])
	$3 = CALL $150(($4 + [240]), ($4 + [224]))
	*((($4 + [272]) + [8])) = *($8)
	*($4 + [296]) = $1
	*($4 + [288]) = $0
	*($4 + [272]) = *($4 + [256])
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [296])), (int_32 ($4 + [288])), (int_32 ($4 + [272])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($10)
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$7
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18263])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [18263])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $164($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [216]))) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $7)
	*($4 + [272]) = ($4 + [176])
	*($4 + [32]) = ($4 + [192])
	CALL $82(($4 + [32]), ($4 + [272]))
	$8 = *($4 + [184])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$9 = *($4 + [176])
	*($4) = $9
	*($4 + [16]) = $9
	$8 = CALL $78(($4 + [32]), $0, $1, $4)
	*(($10 = (($4 + [240]) + [8]))) = *($4 + [200])
	*(($11 = (($4 + [224]) + [8]))) = *($3)
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	*((($4 + [272]) + [8])) = *($11)
	*((($4 + [256]) + [8])) = *($10)
	*($4 + [272]) = *($4 + [224])
	*($4 + [256]) = *($4 + [240])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [256])), (int_32 ($4 + [272])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $167($2)
	
.LABEL $label$6
	CALL $79($8)
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	*($4 + [16]) = *($1)
	CALL $12($4, ($4 + [8]), *($2))
	$5 = *($1)
	$1 = *($4 + [4])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18975])
	CALL $65(($4 + [8]), $1, $5, $3)
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($4 + [36])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$1 = *(($4 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $2
	
.LABEL $label$2
	*($0) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	*($0 + [8]) = *($1)
	*($0 + [16]) = *($1 + [8])
	*($0) = [18592]
	$5 = *($1 + [16])
	*(($6 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18101])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = $6
	goto $label$4 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$6 }
	
.LABEL $label$4
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18150])
	$5 = *($4)
	$7 = *($1 + [40])
	*($0 + [40]) = $7
	*(($6 = ($0 + [48]))) = $5
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18101])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $7
	$8 = $6
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$12 }
	
.LABEL $label$10
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [18150])
	*($0 + [56]) = $1
	$5 = *($2)
	$7 = *($1 + [24])
	*($0 + [64]) = $7
	*(($6 = ($0 + [72]))) = $5
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18101])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$5 = $7
	$8 = $6
	goto $label$16 
	
.LABEL $label$17
	$5 = $7
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$18 }
	
.LABEL $label$16
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	
.LABEL $label$13
	CALL eosio_assert($9, [18150])
	$5 = *($3)
	$7 = *($1 + [32])
	*($0 + [80]) = $7
	*(($6 = ($0 + [88]))) = $5
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18101])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $7
	$8 = $6
	goto $label$22 
	
.LABEL $label$23
	$5 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$24 }
	
.LABEL $label$22
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [18150])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL void ($5 + [32])((int_32 $2), (int_32 *(*($2) + [8])))
	CALL void ($5 + [16])((int_32 $3), (int_32 *(*($3) + [8])))
	CALL eosio_assert(((int_64)*($5 + [24]) == (int_64)*($5 + [40])), [18290])
	$6 = ( ($5 + [16]) ? ($5 + [32]) : ((int_64)*($5 + [16]) < (int_64)*($5 + [32])) )
	*((($5 + [48]) + [8])) = *(($6 + [8]))
	*($5 + [48]) = *($6)
	CALL $137(($5 + [32]), ($5 + [48]), $4)
	$7 = *(($2 + [88]))
	*((($5 + [16]) + [8])) = $7
	*($5 + [16]) = *($2 + [80])
	CALL eosio_assert(((int_64)$7 == (int_64)*($5 + [40])), [18290])
	$6 = ( ($5 + [16]) ? ($5 + [32]) : ((int_64)*($5 + [16]) < (int_64)*($5 + [32])) )
	*($5 + [32]) = *($6)
	*($5 + [40]) = *(($6 + [8]))
	$8 = [0]
	$9 = [0]
	$10 = *($5 + [32])
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*((($5 + [32]) + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $11
	$12 = $6
	goto $label$4 
	
.LABEL $label$5
	$7 = $11
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $9 ){ goto $label$6 }
	
.LABEL $label$4
	$9 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert((((int_64)$10 > (int_64)-1) & $9), [18001])
	$10 = *($5 + [48])
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)*($5 + [56]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$7 = $11
	$12 = $6
	goto $label$10 
	
.LABEL $label$11
	$7 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $9 ){ goto $label$12 }
	
.LABEL $label$10
	$8 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert((((int_64)$10 > (int_64)0) & $8), [18043])
	CALL void $2((int_32 ($5 + [48])), (int_32 ($5 + [32])), (int_32 *(*($2) + [12])))
	CALL void $3((int_32 ($5 + [48])), (int_32 ($5 + [32])), (int_32 *(*($3) + [12])))
	*(($6 = (($5 + [16]) + [8]))) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$7 = *($3 + [16])
	$11 = *($2 + [16])
	*(($9 = ($5 + [8]))) = *((($5 + [48]) + [8]))
	*($5) = *($5 + [48])
	CALL $57($1, $4, ($5 + [48]))
	*($0 + [8]) = $11
	*($0) = $7
	*($0 + [32]) = $11
	*(($0 + [40])) = $7
	*($0 + [16]) = *($5)
	*(($0 + [24])) = *($9)
	*(($0 + [48])) = *($5 + [16])
	*(($0 + [56])) = *($6)
	$global$0 = ($5 + [64])
}

int_32 .FUNC $78 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*($0 + [40]) = $1
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [48])) = $1
	*(($0 + [56])) = (int_64)-1
	*(($0 + [64])) = (int_64)0
	$3 = [0]
	*(($0 + [72])) = [0]
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*($0 + [128]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*($4 + [16]) = (int_64)0
	$5 = CALL db_find_i64($1, $1, (int_64)-4157495357179166720, (int_64)-4157495357179166720)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [40])
	$3 = CALL $129($6, $5)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$6), [18189])
	
.LABEL $label$1
	*(($0 + [80])) = *(( $3 ? ($4 + [16]) : $3 ))
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $130(($0 + [40]), ($0 + [80]), *($0))
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [64]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [68])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [240])
	$global$0 = $3
	$4 = CALL current_time()
	*(($3 + [172])) = (int_64)0
	*(($5 = ($3 + [188]))) = (int_64)0
	*(($3 + [196])) = (int_64)0
	*($3 + [156]) = [0]
	*($3 + [160]) = [0]
	*($3 + [164 align=4]) = (int_64)0
	*($3 + [180 align=4]) = (int_64)0
	*($3 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($3 + [128]) = [17531]
	*($3 + [132]) = CALL $161([17531])
	*($3 + [24]) = *($3 + [128])
	*($3 + [136]) = *(CALL $23(($3 + [64]), ($3 + [24])))
	*($3 + [128]) = $4
	if ( ($2 == 0) ){ goto $label$1 }
	*($3 + [48]) = [18080]
	*($3 + [52]) = CALL $161([18080])
	*($3 + [16]) = *($3 + [48])
	$6 = *(CALL $23(($3 + [64]), ($3 + [16])))
	*($3 + [120]) = $6
	$4 = *($1 + [8])
	$2 = CALL int_32 $1((int_32 *(*($1) + [16])))
	$7 = *($1 + [16])
	*(($8 = (($3 + [48]) + [8]))) = *(($1 + [32]))
	*($3 + [48]) = *($1 + [24])
	$9 = *(($1 + [48]))
	*((($3 + [32]) + [8])) = $9
	*((($3 + [64]) + [32])) = *($8)
	*((($3 + [64]) + [48])) = $9
	*($3 + [64]) = $4
	*($3 + [72]) = $2
	*($3 + [80]) = $7
	$4 = *($1 + [40])
	*($3 + [32]) = $4
	*($3 + [88]) = *($3 + [48])
	*($3 + [104]) = $4
	$8 = (($3 + [144]) + [40])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*($5)) ){ goto $label$2 }
	$4 = *($0)
	*($2 + [8]) = $6
	*($2) = $4
	*($2 + [16 align=4]) = (int_64)0
	*(($10 = ($2 + [24]))) = [0]
	$5 = CALL _Znwj([16])
	*($2 + [16]) = $5
	$11 = ($5 + [16])
	*($10) = $11
	*(($5 + [8])) = *((($3 + [128]) + [8]))
	*($5) = *($3 + [128])
	*(($2 + [20])) = $11
	*($2 + [28 align=4]) = (int_64)0
	*(($2 + [36])) = [0]
	CALL $24(($2 + [28]), [49])
	$5 = *(($2 + [32]))
	$2 = *($2 + [28])
	*($3 + [212]) = $2
	*($3 + [208]) = $2
	*($3 + [216]) = $5
	*($3 + [224]) = ($3 + [208])
	*($3 + [232]) = ($3 + [64])
	CALL $41(($3 + [232]), ($3 + [224]))
	*($8) = (*($8) + [40])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($3 + [180]), ($3 + [128]), $0, ($3 + [120]), ($3 + [64]))
	
.LABEL $label$1
	$4 = *(($1 + [72]))
	$7 = *($1 + [64])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$5 }
	$2 = ($1 + [16])
	goto $label$4 
	
.LABEL $label$5
	*($3 + [48]) = *($1 + [16])
	*($3 + [32]) = (uint_64)$4 >> (uint_64)(int_64)8)
	CALL $43(($3 + [64]), $0, ($3 + [48]), ($3 + [32]))
	if ( ((int_64)*($3 + [64]) != (int_64)0) ){ goto $label$3 }
	$2 = ($1 + [16])
	
.LABEL $label$4
	*($3 + [48]) = [18092]
	*($3 + [52]) = CALL $161([18092])
	*($3 + [8]) = *($3 + [48])
	$9 = *(CALL $23(($3 + [64]), ($3 + [8])))
	*($3 + [32]) = $9
	*((($3 + [64]) + [16])) = $4
	*($3 + [72]) = $7
	*($3 + [88]) = [1]
	*($3 + [64]) = *($2)
	$5 = (($3 + [144]) + [40])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [188]))) ){ goto $label$6 }
	$4 = *($0)
	*($2 + [8]) = $9
	*($2) = $4
	*($2 + [16 align=4]) = (int_64)0
	*(($10 = ($2 + [24]))) = [0]
	$8 = CALL _Znwj([16])
	*($2 + [16]) = $8
	$11 = ($8 + [16])
	*($10) = $11
	*(($8 + [8])) = *((($3 + [128]) + [8]))
	*($8) = *($3 + [128])
	*(($2 + [20])) = $11
	*($2 + [28 align=4]) = (int_64)0
	*(($2 + [36])) = [0]
	CALL $24(($2 + [28]), [28])
	$8 = *(($2 + [32]))
	$2 = *($2 + [28])
	*($3 + [52]) = $2
	*($3 + [48]) = $2
	*($3 + [56]) = $8
	*($3 + [120]) = ($3 + [48])
	*($3 + [208]) = ($3 + [64])
	CALL $44(($3 + [208]), ($3 + [120]))
	*($5) = (*($5) + [40])
	goto $label$3 
	
.LABEL $label$6
	CALL $45(($3 + [180]), ($3 + [128]), $0, ($3 + [32]), ($3 + [64]))
	
.LABEL $label$3
	$4 = *(($1 + [88]))
	$7 = *($1 + [80])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$9 }
	$2 = ($1 + [16])
	goto $label$8 
	
.LABEL $label$9
	*($3 + [48]) = *($1 + [16])
	*($3 + [32]) = (uint_64)$4 >> (uint_64)(int_64)8)
	CALL $43(($3 + [64]), $0, ($3 + [48]), ($3 + [32]))
	if ( ((int_64)*($3 + [64]) != (int_64)0) ){ goto $label$7 }
	$2 = ($1 + [16])
	
.LABEL $label$8
	*($3 + [48]) = [18092]
	*($3 + [52]) = CALL $161([18092])
	*($3) = *($3 + [48])
	$9 = *(CALL $23(($3 + [64]), $3))
	*($3 + [32]) = $9
	*((($3 + [64]) + [16])) = $4
	*($3 + [72]) = $7
	*($3 + [88]) = [1]
	*($3 + [64]) = *($2)
	$5 = (($3 + [144]) + [40])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [188]))) ){ goto $label$10 }
	$4 = *($0)
	*($2 + [8]) = $9
	*($2) = $4
	*($2 + [16 align=4]) = (int_64)0
	*(($10 = ($2 + [24]))) = [0]
	$8 = CALL _Znwj([16])
	*($2 + [16]) = $8
	$11 = ($8 + [16])
	*($10) = $11
	*(($8 + [8])) = *((($3 + [128]) + [8]))
	*($8) = *($3 + [128])
	*(($2 + [20])) = $11
	*($2 + [28 align=4]) = (int_64)0
	*(($2 + [36])) = [0]
	CALL $24(($2 + [28]), [28])
	$8 = *(($2 + [32]))
	$2 = *($2 + [28])
	*($3 + [52]) = $2
	*($3 + [48]) = $2
	*($3 + [56]) = $8
	*($3 + [120]) = ($3 + [48])
	*($3 + [208]) = ($3 + [64])
	CALL $44(($3 + [208]), ($3 + [120]))
	*($5) = (*($5) + [40])
	goto $label$7 
	
.LABEL $label$10
	CALL $45(($3 + [180]), ($3 + [128]), $0, ($3 + [32]), ($3 + [64]))
	
.LABEL $label$7
	if ( ((int_32)*(($3 + [184])) == (int_32)*($3 + [180])) ){ goto $label$11 }
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = *($1 + [8])
	$4 = *($0)
	CALL $46(($3 + [48]), ($3 + [144]))
	$1 = *($3 + [48])
	CALL send_deferred(($3 + [64]), $4, $1, (*($3 + [52]) - $1), [0])
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$11 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL $47(($3 + [144]))
	$global$0 = ($3 + [240])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18506])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($1 + [80])
	*($1 + [80]) = ((int_64)$6 + (int_64)1)
	*(($1 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*(($7 = (($5 + [16]) + [8]))) = *(($4 + [8]))
	*($5 + [32]) = *($3)
	*($5 + [16]) = *($4)
	$8 = *($7)
	*((($5 + [64]) + [8])) = $8
	*((($5 + [48]) + [8])) = *($1)
	*($5 + [64]) = *($5 + [16])
	*($5 + [48]) = *($5 + [32])
	CALL eosio_assert([1], [18101])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$9 = $10
	$1 = $4
	goto $label$4 
	
.LABEL $label$5
	$9 = $10
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$4
	$3 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [18150])
	CALL $137(($5 + [80]), ($5 + [64]), ($5 + [48]))
	*($0 + [16]) = $2
	*($0 + [8]) = $6
	$7 = [0]
	*($0 + [56]) = [0]
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = $8
	*($0 + [24]) = *($5 + [48])
	*(($3 = ($0 + [32]))) = *((($5 + [48]) + [8]))
	*($0 + [40]) = *($5 + [64])
	$4 = (($5 + [64]) + [8])
	*(($0 + [48])) = *($4)
	*($0 + [80]) = *($5 + [80])
	$1 = (($5 + [80]) + [8])
	*(($0 + [88])) = *($1)
	*($0) = [18552]
	*($0 + [96]) = *($5 + [64])
	*(($11 = ($0 + [104]))) = *($4)
	*($1) = *($11)
	*($5 + [80]) = *($0 + [96])
	*($4) = *($3)
	*($5 + [64]) = *($0 + [24])
	CALL $137($5, ($5 + [80]), ($5 + [64]))
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$11 = ($0 + [96])
	$0 = ($0 + [24])
	$9 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $10
	$1 = $4
	goto $label$9 
	
.LABEL $label$10
	$9 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$9
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$8 }
	*((($5 + [80]) + [8])) = *(($11 + [8]))
	*($5 + [80]) = *($11)
	*((($5 + [64]) + [8])) = *(($0 + [8]))
	*($5 + [64]) = *($0)
	CALL $137(($5 + [48]), ($5 + [80]), ($5 + [64]))
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)*([0] + [8200])), [18290])
	$7 = ((int_64)*($5 + [48]) >= (int_64)*([0] + [8192]))
	
.LABEL $label$7
	CALL eosio_assert($7, [18512])
	$global$0 = ($5 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_64 $28
	int_32 $29
	int_32 $30
	$4 = ($global$0 - [320])
	$global$0 = $4
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [18101])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = $6
	goto $label$4 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $9 ){ goto $label$6 }
	
.LABEL $label$4
	$9 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18150])
	$6 = *($1 + [32])
	*($4 + [216]) = $6
	$5 = *($2 + [24])
	*($4 + [112]) = (int_64)0
	*($4 + [48]) = $5
	$10 = [0]
	$6 = CALL db_idx64_upperbound(*($6), *($6 + [8]), (int_64)3900539489767915520, ($4 + [48]), ($4 + [112]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $19(($4 + [240]), *($4 + [216]), *($4 + [112]))
	*((($10 = *($4 + [244])) + [56])) = $6
	
.LABEL $label$7
	*($4 + [112]) = (int_64)0
	*($4 + [48]) = (int_64)0
	$6 = *($4 + [216])
	$6 = CALL db_idx64_lowerbound(*($6), *($6 + [8]), (int_64)3900539489767915520, ($4 + [48]), ($4 + [112]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $19(($4 + [240]), *($4 + [216]), *($4 + [112]))
	*((($9 = *($4 + [244])) + [56])) = $6
	*($4 + [212]) = $9
	goto $label$8 
	
.LABEL $label$9
	*($4 + [212]) = [0]
	
.LABEL $label$8
	$11 = ($2 + [24])
	*($4 + [208]) = ($4 + [216])
	$12 = (($4 + [240]) + [48])
	$13 = (($4 + [288]) + [8])
	$14 = ($4 + [192])
	$15 = (($4 + [240]) | [8])
	$16 = (($4 + [112]) + [24])
	$17 = (($4 + [48]) + [8])
	$18 = ($2 + [16])
	$19 = (($4 + [48]) + [56])
	$20 = ($1 + [36])
	$21 = ($4 + [40])
	$22 = ($4 + [36])
	$23 = ($4 + [176])
	$24 = ($4 + [152])
	
.LOOP $label$11:
	CALL void ($4 + [112])((int_32 $2), (int_32 *(*($2) + [8])))
	*($17) = *(($11 + [8]))
	*($4 + [48]) = *($11)
	CALL $137(($4 + [240]), ($4 + [112]), ($4 + [48]))
	$9 = (($4 + [240]) + [8])
	CALL eosio_assert(((int_64)*($9) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [240]) < (int_64)*([0] + [8192])) ){ goto $label$10 }
	$6 = *($4 + [212])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$10 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($18)) ){ goto $label$12 }
	CALL $35(($4 + [208]))
	goto $label$11 
	
.LABEL $label$12
	CALL void ($4 + [48])((int_32 $2), (int_32 *(*($2) + [8])))
	$8 = CALL $36(($4 + [112]), $6, [16640], $17, $17)
	*($4 + [112]) = [18856]
	$25 = ($16 + [8])
	*($9) = *($25)
	*($4 + [240]) = *($16)
	CALL $37(($4 + [48]), $1, $2, ($4 + [112]), ($4 + [240]))
	$7 = *($19)
	CALL eosio_assert(((int_64)$7 == (int_64)*(($0 + [8]))), [18765])
	$26 = (($4 + [48]) + [48])
	$5 = ((int_64)*($0) + (int_64)*($26))
	*($0) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [18827])
	$27 = *($18)
	$9 = *($20)
	$6 = *($3 + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)$9 == (int_32)*($6 + [16])), [19010])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6 + [8])
	CALL eosio_assert(((int_64)*((($4 + [48]) + [24])) == (int_64)$5), [18765])
	$28 = ((int_64)*($6) + (int_64)*((($4 + [48]) + [16])))
	*($6) = $28
	CALL eosio_assert(((int_64)$28 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18827])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [240]), $6, [8])
	*($4 + [8]) = *($6 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy($15, ($4 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $27, ($4 + [240]), [16])
	if ( (uint_64)($5 <= *($9 + [16])) ){ goto $label$13 }
	*(($9 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$13
	*(($29 = (($4 + [8]) + [16]))) = (int_64)-1
	*(($30 = (($4 + [8]) + [24]))) = (int_64)0
	*($21) = [0]
	$9 = (($4 + [112]) + [16])
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [8]) = *($1)
	CALL $12($4, ($4 + [8]), (int_64)5459781)
	$27 = *($9)
	$6 = *($4 + [4])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [8])), [19010])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$5), [18765])
	$7 = ((int_64)*($6) + (int_64)*($26))
	*($6) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [18808])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [18827])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [19107])
	CALL eosio_assert([1], [18506])
	CALL memcpy(($4 + [240]), $6, [8])
	*($4 + [288]) = *($6 + [8])
	CALL eosio_assert([1], [18506])
	CALL memcpy($15, ($4 + [288]), [8])
	CALL db_update_i64(*($6 + [20]), $27, ($4 + [240]), [16])
	if ( (uint_64)($5 <= *($29)) ){ goto $label$14 }
	*($29) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$14
	CALL void ($4 + [240])((int_32 $8), (int_32 *(*($4 + [112]) + [8])))
	*($13) = *($25)
	*($4 + [288]) = *($16)
	CALL $137(($4 + [224]), ($4 + [240]), ($4 + [288]))
	$29 = (($4 + [224]) + [8])
	CALL eosio_assert(((int_64)*($29) == (int_64)*([0] + [8200])), [18290])
	if ( ((int_64)*($4 + [224]) >= (int_64)*([0] + [8192])) ){ goto $label$18 }
	CALL $38($1, ($4 + [112]))
	*($13) = *(($14 + [8]))
	$5 = *($14)
	*($4 + [288]) = $5
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$16 }
	*($4 + [224]) = *($9)
	*($4 + [240]) = [19488]
	*($4 + [312]) = (uint_64)*($13) >> (uint_64)(int_64)8)
	*($4 + [244]) = ($4 + [288])
	*(($6 = (($4 + [240]) + [16]))) = ($4 + [240])
	CALL $39($1, ($4 + [224]), ($4 + [312]), ($4 + [240]))
	$6 = *($6)
	if ( ((int_32)($4 + [240]) == (int_32)$6) ){ goto $label$17 }
	if ( ($6 == 0) ){ goto $label$16 }
	CALL void $6((int_32 *(*($6) + [20])))
	goto $label$16 
	
.LABEL $label$18
	$6 = *($4 + [212])
	$7 = *($6 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18975])
	$8 = *($4 + [216])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$8), [19010])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$1()), [19056])
	$5 = *($6)
	$27 = *((($4 + [112]) + [8]))
	*($6) = $27
	*($13) = *($6 + [8])
	*($6 + [8]) = *($9)
	$28 = *($6 + [16])
	*($6 + [16]) = *($16)
	*($6 + [24]) = *($23)
	*($6 + [32]) = *($14)
	*($6 + [40]) = *($24)
	*($4 + [288]) = $28
	CALL eosio_assert(((int_64)$5 == (int_64)$27), [19107])
	*($29) = $12
	*($4 + [228]) = ($4 + [240])
	*($4 + [224]) = ($4 + [240])
	CALL $33(($4 + [224]), $6)
	CALL db_update_i64(*($6 + [52]), $7, ($4 + [240]), [48])
	if ( (uint_64)($5 <= *($8 + [16])) ){ goto $label$19 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($4 + [312]) = *(($6 + [16]))
	if ( (CALL $160(($4 + [288]), ($4 + [312]), [8]) == 0) ){ goto $label$20 }
	$29 = ($6 + [56])
	$9 = *($29)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$21 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3900539489767915520, ($4 + [304]), $5)
	*($29) = $9
	
.LABEL $label$21
	CALL db_idx64_update($9, $7, ($4 + [312]))
	
.LABEL $label$20
	*($4 + [312]) = *(($6 + [8]))
	if ( (CALL $160($13, ($4 + [312]), [8]) == 0) ){ goto $label$22 }
	$9 = ($6 + [60])
	$6 = *($9)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3900539489767915521, ($4 + [304]), $5)
	*($9) = $6
	
.LABEL $label$23
	CALL db_idx64_update($6, $7, ($4 + [312]))
	
.LABEL $label$22
	CALL $35(($4 + [208]))
	$8 = *($30)
	if ( $8 ){ goto $label$15 }
	goto $label$11 
	
.LABEL $label$17
	CALL void $6((int_32 *(*($6) + [16])))
	
.LABEL $label$16
	CALL $32($1, $8, [1])
	$5 = *($4 + [208])
	*($4 + [240]) = $5
	$6 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19266])
	CALL $35(($4 + [240]))
	CALL $40(*($4 + [216]), $6)
	*($4 + [208]) = *($4 + [240])
	$8 = *($30)
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$15
	$6 = *($22)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$27 }
	CALL _ZdlPv($9)
	
.LABEL $label$27
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$26 }
	$6 = *($30)
	goto $label$24 
	
.LABEL $label$25
	$6 = $8
	
.LABEL $label$24
	*($22) = $8
	CALL _ZdlPv($6)
	goto $label$11 
	
.LABEL $label$10
	$global$0 = ($4 + [320])
}

int_32 .FUNC $164 (int_32 $0)
{
	return CALL $165([8244], $0)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18240])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $164($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18263])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4157495357179166720
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4157495357179166720
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $131(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $167($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $127 (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}