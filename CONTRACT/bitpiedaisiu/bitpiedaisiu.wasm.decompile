(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "invalid sha256\00")
(data (i32.const 8238) "invalid sha1\00")
(data (i32.const 8251) "invalid first pos\00")
(data (i32.const 8269) "parse memo error\00")
(data (i32.const 8286) "EOS\00")
(data (i32.const 8290) "transfer\00")
(data (i32.const 8299) "eosio.token\00")
(data (i32.const 8311) "bitpietokens\00: no conversion\00")
(data (i32.const 8340) "invalid token transfer\00: out of range\00")
(data (i32.const 8378) "bitpiedaibot\00")
(data (i32.const 8391) "active\00")
(data (i32.const 8398) "EOS game not started\00")
(data (i32.const 8419) "EOS game ended\00")
(data (i32.const 8434) "EBTC\00")
(data (i32.const 8439) "EETH\00")
(data (i32.const 8444) "EUSD\00")
(data (i32.const 8449) "EBTC/EETH/EUSD game not started\00")
(data (i32.const 8481) "EBTC/EETH/EUSD game ended\00")
(data (i32.const 8507) "invalid token\00")
(data (i32.const 8521) "Transfer bonus\00")
(data (i32.const 8536) "exceeded daily playing limit\00")
(data (i32.const 8565) "invalid content\00")
(data (i32.const 8581) "not enough funds for payout\00")
(data (i32.const 8609) "seed hash not found\00")
(data (i32.const 8629) "now allowed playing now\00")
(data (i32.const 8653) "receipt\00")
(data (i32.const 8661) "bitpiedaisiu\00")
(data (i32.const 8674) "count must be positive\00")
(data (i32.const 8697) "invalid table name\00")
(data (i32.const 8720) "\04EOS\00\00\00\00\08EBTC\00\00\00\08EETH\00\00\00\08EUSD\00\00\00")
(data (i32.const 8752) "string is too long to be a valid name\00")
(data (i32.const 8790) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8857) "character is not in allowed character set for names\00")
(data (i32.const 8909) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8960) "error reading iterator\00")
(data (i32.const 8983) "read\00")
(data (i32.const 8988) "cannot create objects in table of another contract\00")
(data (i32.const 9039) "write\00")
(data (i32.const 9045) "object passed to modify is not in multi_index\00")
(data (i32.const 9091) "cannot modify objects in table of another contract\00")
(data (i32.const 9142) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9201) "cannot pass end iterator to modify\00")
(data (i32.const 9236) "order not found\00")
(data (i32.const 9252) "attempt to add asset with different symbol\00")
(data (i32.const 9295) "addition underflow\00")
(data (i32.const 9314) "addition overflow\00")
(data (i32.const 9332) "daisiu payout for order #\00")
(data (i32.const 9358) "cannot increment end iterator\00")
(data (i32.const 9388) "object passed to erase is not in multi_index\00")
(data (i32.const 9433) "cannot erase objects in table of another contract\00")
(data (i32.const 9483) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9536) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9590) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9638) "string is too long to be a valid symbol_code\00")
(data (i32.const 9683) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9736) "invalid memo\00")
(data (i32.const 9749) "no content\00")
(data (i32.const 9760) "no user seed\00")
(data (i32.const 9773) "only EOS/EBTC/EETH/EUSD token allowed\00")
(data (i32.const 9811) "quantity invalid\00")
(data (i32.const 9828) "transfer quantity must be specific amount\00")
(data (i32.const 9870) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9929) "unable to find key\00")
(data (i32.const 9948) "multiplication overflow\00")
(data (i32.const 9972) "multiplication underflow\00")
(data (i32.const 9997) "need more house seed hash!\00")
(data (i32.const 10024) ",\'\00\00")
(data (i32.const 10028) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10061) "get\00")
(data (i32.const 10065) "orders\00")
(data (i32.const 10072) "results\00")
(data (i32.const 10080) "househashes\00")
(data (i32.const 10092) "globals\00")
(data (i32.const 10100) "scoreglobals\00")
(data (i32.const 10113) "scores\00")
(data (i32.const 10120) "orderstats\00")
(data (i32.const 10131) "cannot pass end iterator to erase\00")
(data (i32.const 18584) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 18688) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$3 (param i32 i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "assert_sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$19 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "sha256" (func $fimport$20 (param i32 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$25 (param i32 i64 i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$28 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$29))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $4))
(export "_Znwj" (func $110))
(export "_ZdlPv" (func $112))
(export "_Znaj" (func $111))
(export "_ZdaPv" (func $113))
(export "_ZnwjSt11align_val_t" (func $114))
(export "_ZnajSt11align_val_t" (func $115))
(export "_ZdlPvSt11align_val_t" (func $116))
(export "_ZdaPvSt11align_val_t" (func $117))
(table $0 11 11 anyfunc)
(elem (i32.const 1) $6 $8 $10 $12 $14 $16 $18 $20 $22 $24)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18945))
(global $global$2 i32 (i32.const 18945))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [208])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	$5 = *($0)
	*(($1 + [24])) = *(($4 + [24]))
	*($1 + [16]) = *($4 + [16])
	$4 = *($3)
	*($1 + [32]) = *($4 + [32])
	*($1 + [33]) = *($4 + [33])
	*(($1 + [72])) = *(($4 + [72]))
	*(($1 + [64])) = *(($4 + [64]))
	*(($1 + [56])) = *(($4 + [56]))
	*($1 + [48]) = *($4 + [48])
	$4 = *($3)
	*($1 + [80]) = *($4 + [80])
	*(($1 + [104])) = *(($4 + [104]))
	*(($1 + [96])) = *(($4 + [96]))
	*(($1 + [88])) = *(($4 + [88]))
	$4 = *($3)
	*($1 + [112]) = *($4 + [112])
	*(($1 + [136])) = *(($4 + [136]))
	*(($1 + [128])) = *(($4 + [128]))
	*(($1 + [120])) = *(($4 + [120]))
	$4 = *($3)
	*($1 + [144]) = *($4 + [144])
	*(($1 + [152])) = *(($4 + [152]))
	*($1 + [160]) = *(*($3) + [160])
	*($2 + [152]) = ($2 + [142])
	*($2 + [148]) = $2
	*($2 + [144]) = $2
	*($2 + [160]) = ($2 + [144])
	$3 = ($1 + [8])
	*($2 + [172]) = $3
	*($2 + [168]) = $1
	*($2 + [176]) = ($1 + [16])
	*($2 + [180]) = ($1 + [32])
	*($2 + [184]) = ($1 + [33])
	*($2 + [188]) = ($1 + [48])
	*($2 + [192]) = ($1 + [80])
	*($2 + [196]) = ($1 + [112])
	*($2 + [200]) = ($1 + [144])
	*($2 + [204]) = ($1 + [160])
	CALL $73(($2 + [168]), ($2 + [160]))
	$6 = *($1)
	$7 = ((int_64)$6 ^ (int_64)-1)
	*($1 + [172]) = CALL db_store_i64(*($5 + [8]), (int_64)-4994024801686257664, *(*($0 + [8])), $7, $2, [142])
	if ( ((uint_64)*($5 + [16]) > (uint_64)$7) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? (int_64))((int_64)0 - $6) : (uint_64)($6 <= (int_64)2) )
	
.LABEL $label$1
	$6 = *(($5 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($2 + [168]) = *($3)
	*($1 + [176]) = CALL db_idx64_store($6, (int_64)-4994024801686257664, $7, ((int_64)$8 ^ (int_64)-1), ($2 + [168]))
	$global$0 = ($2 + [208])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [12]) = $1
	*($0) = (int_64)0
	*($0 + [8]) = [1]
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	CALL eosio_assert([1], [9039])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-6497942320245243904, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9039])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9039])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9039])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9039])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9039])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	$6 = *($4 + [4])
	*($3 + [8]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($6 + [8]) << (int_64)56)) | (int_64)((uint_64)*($6 + [16]) / (uint_64)(int_64)100000))
	if ( (CALL $143(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4455901301129084928, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [60]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($3 + [8]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($0 + [24]) << (int_64)56)) | (int_64)((uint_64)*($0 + [32]) / (uint_64)(int_64)100000))
	if ( (CALL $143((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [64]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-4455901301129084927, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [64])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8983])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9091])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9142])
	CALL eosio_assert([1], [9039])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4455901497821387904) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4455901497821387903
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9039])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4455901497821387904, $2, (int_64)-4455901497821387904, ($4 + [16]), [16])
	*($5 + [20]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4455901497821387904) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4455901497821387903
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-4455901497821387904
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4455901497821387904
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $94(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $138 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $121($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $130 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $131 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $132 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $133 (int_32 $0)
{
	return ( ($0 | [32]) ? $0 : (($0 + [-65]) <= [26]) )
}

int_32 .FUNC $134 ()
{
	return [10172]
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $136($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([144])
	CALL $107($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [124])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $144([18584])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [18584], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $134())
	*(CALL $134()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $141($4, ($3 + [12]), $2)
	$5 = CALL $134()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $127($3)
	
.LABEL $label$1
	CALL $128($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL $55(($3 + [128]), ($1 + [24]))
	$4 = *($0)
	$6 = *($3 + [128])
	$7 = ($6 & [1])
	$5 = (($3 + [128]) | [1])
	*($3 + [80]) = ( *($3 + [136]) ? $5 : $7 )
	*($3 + [84]) = ( *($3 + [132]) ? uint_32($6 >> [1]) : $7 )
	*($3 + [16]) = *($3 + [80])
	$6 = CALL $5(($3 + [40]), ($3 + [16]))
	*((($3 + [88]) + [32])) = [0]
	*($3 + [88]) = $4
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [124]) = [0]
	*($3 + [96]) = *($6)
	CALL $76(($3 + [88]), $1, $2)
	CALL $28(($3 + [40]), $0)
	$6 = *($3 + [40])
	$7 = ($6 & [1])
	CALL $123(($3 + [128]), ( *($3 + [48]) ? (($3 + [40]) | [1]) : $7 ), ( *($3 + [44]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$1
	$4 = *($0)
	$0 = *($3 + [128])
	$6 = ($0 & [1])
	*($3 + [24]) = ( *(($3 + [136])) ? $5 : $6 )
	*($3 + [28]) = ( *($3 + [132]) ? uint_32($0 >> [1]) : $6 )
	*($3 + [8]) = *($3 + [24])
	$0 = CALL $5(($3 + [32]), ($3 + [8]))
	*((($3 + [40]) + [32])) = [0]
	*($3 + [40]) = $4
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [48]) = *($0)
	CALL $76(($3 + [40]), $1, $2)
	$2 = *($3 + [64])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($3 + [68])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [64]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$7 }
	$5 = ($3 + [116])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($3 + [112]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $2
	
.LABEL $label$8
	*($5) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [136])))
	
.LABEL $label$12
	$global$0 = ($3 + [144])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [240])
	$global$0 = $5
	*((($5 + [48]) + [24])) = *(($1 + [24]))
	*((($5 + [48]) + [56])) = *(($3 + [8]))
	*((($5 + [48]) + [64])) = *(($3 + [16]))
	*((($5 + [48]) + [72])) = *(($3 + [24]))
	*($5 + [81]) = $2
	*($5 + [48]) = *($1)
	*($5 + [56]) = *($1 + [8])
	*($5 + [64]) = *($1 + [16])
	*($5 + [80]) = *($1 + [32])
	*($5 + [96]) = *($3)
	*((($5 + [48]) + [104])) = *(($1 + [72]))
	*((($5 + [48]) + [96])) = *(($1 + [64]))
	*((($5 + [48]) + [88])) = *(($1 + [56]))
	*(($5 + [168])) = *(($1 + [88]))
	*(($5 + [176])) = *(($1 + [96]))
	*(($5 + [184])) = *(($1 + [104]))
	*(($5 + [200])) = *(($4 + [8]))
	*($5 + [128]) = *($1 + [48])
	*($5 + [160]) = *($1 + [80])
	*($5 + [192]) = *($4)
	*($5 + [208]) = *($1 + [112])
	$1 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [44]) = [0]
	$6 = *($0)
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	*($5 + [32]) = (int_64)0
	*($5) = ($5 + [48])
	CALL $81(($5 + [232]), ($5 + [8]), $6, $5)
	$3 = CALL db_lowerbound_i64(*($5 + [8]), *($5 + [16]), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $72(($5 + [8]), $3)
	$1 = [1]
	CALL eosio_assert([1], [9358])
	$3 = CALL db_next_i64(*($3 + [172]), ($5 + [232]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = [1]
	
.LOOP $label$2:
	$3 = CALL $72(($5 + [8]), $3)
	CALL eosio_assert([1], [9358])
	$1 = ($1 + [1])
	$3 = CALL db_next_i64(*($3 + [172]), ($5 + [232]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 < (int_32)*($0 + [88])) ){ goto $label$3 }
	*($5 + [232]) = (CASTING uint_64)(uint_32 ($5 + [8]))
	CALL $75(($5 + [8]), *(CALL $82(($5 + [232])) + [4]))
	
.LABEL $label$3
	$0 = *($5 + [32])
	if ( ($0 == 0) ){ goto $label$4 }
	$4 = ($5 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($5 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $0
	
.LABEL $label$5
	*($4) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($5 + [240])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $143(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8983])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8983])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[19]), [8983])
	CALL memcpy($3, *($4 + [4]), [20])
	*($4 + [4]) = (*($4 + [4]) + [20])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $40($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9039])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9039])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $97(CALL $96($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9039])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9039])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[19]), [9039])
	CALL memcpy(*($4 + [4]), $3, [20])
	*($4 + [4]) = (*($4 + [4]) + [20])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $132($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9483])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [124])))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $144([9332])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [9332], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$5 = ($3 | [1])
	$7 = *($2)
	
.LOOP $label$5:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $122($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$2 = ($4 & [1])
	$6 = ($3 + [8])
	CALL $123($0, ( *($6) ? $5 : $2 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $118($0)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($2)
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($5 + [-24])
	$6 = *($2)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$3 }
	$5 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)$1), [8909])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6497942333781180416, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $80($1, $2)
	CALL eosio_assert(((int_32)*($6 + [120]) == (int_32)$1), [8909])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9236])
	return $6
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $142(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $128 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $129($1, $0, [8324])
	CALL $131()
	(unreachable)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$1 = ($global$0 - [320])
	$global$0 = $1
	*($1 + [304]) = [8661]
	*($1 + [308]) = CALL $144([8661])
	*($1 + [24]) = *($1 + [304])
	CALL require_auth(*(CALL $5(($1 + [312]), ($1 + [24]))))
	*((($1 + [264]) + [32])) = [0]
	*($1 + [280]) = (int_64)-1
	*($1 + [288]) = (int_64)0
	$2 = *($0)
	*($1 + [264]) = $2
	*($1 + [272]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $51(($1 + [264]), $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($1 + [264])), [8909])
	CALL eosio_assert([1], [10131])
	CALL eosio_assert([1], [9358])
	$4 = CALL db_next_i64(*($3 + [28]), ($1 + [224]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $51(($1 + [264]), $4)
	
.LABEL $label$2
	CALL $52(($1 + [264]), $3)
	
.LABEL $label$1
	*((($1 + [224]) + [32])) = [0]
	*($1 + [240]) = (int_64)-1
	*($1 + [248]) = (int_64)0
	$2 = *($0)
	*($1 + [224]) = $2
	*($1 + [232]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)-4455901497821387904, (int_64)-4455901497821387904)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $53(($1 + [224]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($1 + [224])), [8909])
	CALL eosio_assert([1], [10131])
	CALL eosio_assert([1], [9358])
	$4 = CALL db_next_i64(*($3 + [20]), ($1 + [120]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $53(($1 + [224]), $4)
	
.LABEL $label$4
	CALL $54(($1 + [224]), $3)
	
.LABEL $label$3
	*($1 + [216]) = (int_64)2147483647
	*($1 + [120]) = (int_64)0
	CALL $14($0, ($0 + [32]), $0, ($1 + [120]), ($1 + [216]))
	*($1 + [120]) = (int_64)0
	CALL $14($0, ($0 + [48]), $0, ($1 + [120]), ($1 + [216]))
	*($1 + [120]) = (int_64)0
	CALL $14($0, ($0 + [40]), $0, ($1 + [120]), ($1 + [216]))
	*((($1 + [176]) + [24])) = *([0] + [8744])
	*((($1 + [176]) + [16])) = *([0] + [8736])
	*($1 + [184]) = *([0] + [8728])
	*($1 + [176]) = *([0] + [8720])
	$5 = (($1 + [96]) | [1])
	$6 = (($1 + [80]) | [1])
	$7 = (($1 + [160]) | [1])
	$8 = (($1 + [120]) + [36])
	$9 = (($1 + [120]) + [28])
	$10 = [0]
	
.LOOP $label$5:
	CALL $55(($1 + [160]), (($1 + [176]) + ($10 << [3])))
	$2 = *($0)
	$3 = *($1 + [160])
	$4 = ($3 & [1])
	$11 = (($1 + [160]) + [8])
	*($1 + [112]) = ( *($11) ? $7 : $4 )
	*($1 + [116]) = ( *($1 + [164]) ? uint_32($3 >> [1]) : $4 )
	*($1 + [16]) = *($1 + [112])
	CALL $5(($1 + [40]), ($1 + [16]))
	*((($1 + [120]) + [16])) = (int_64)-1
	*(($12 = (($1 + [120]) + [24]))) = (int_64)0
	*((($1 + [120]) + [32])) = [0]
	*($8) = [0]
	*((($1 + [120]) + [8])) = *($1 + [40])
	*($1 + [120]) = $2
	*($1 + [40]) = (int_64)0
	CALL $56(($1 + [120]), ($1 + [40]), (int_64)2147483647)
	$13 = (int_64)1
	
.LOOP $label$6:
	$2 = ((int_64)$13 << (int_64)59)
	$14 = CALL $119(($1 + [96]), ($1 + [160]))
	$4 = [0]
	$15 = *([0] + [10024])
	
.LOOP $label$8:
	*((($1 + [40]) + ($3 = $4))) = *(($15 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$4 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$7 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	*(($16 = (($1 + [80]) + [8]))) = [0]
	*($1 + [80]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [80]) = ($4 << [1])
	$15 = $6
	goto $label$9 
	
.LABEL $label$10
	$17 = (($4 + [16]) & [-16])
	$15 = CALL _Znwj($17)
	*($16) = $15
	*($1 + [80]) = ($17 | [1])
	*($1 + [84]) = $4
	
.LABEL $label$9
	$17 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$11:
	*(($15 + $3)) = *((($1 + [40]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$17 != (int_32)$3) ){ goto $label$11 }
	*(($15 + $4)) = [0]
	$3 = *($1 + [80])
	$4 = ($3 & [1])
	CALL $123($14, ( *($16) ? $6 : $4 ), ( *($1 + [84]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$12
	$2 = *($0)
	$3 = *($1 + [96])
	$4 = ($3 & [1])
	$16 = (($1 + [96]) + [8])
	*($1 + [32]) = ( *($16) ? $5 : $4 )
	*($1 + [36]) = ( *($1 + [100]) ? uint_32($3 >> [1]) : $4 )
	*($1 + [8]) = *($1 + [32])
	CALL $5(($1 + [80]), ($1 + [8]))
	*((($1 + [40]) + [16])) = (int_64)-1
	*(($17 = (($1 + [40]) + [24]))) = (int_64)0
	*((($1 + [40]) + [32])) = [0]
	*((($1 + [40]) + [36])) = [0]
	*((($1 + [40]) + [8])) = *($1 + [80])
	*($1 + [40]) = $2
	*($1 + [80]) = (int_64)0
	CALL $56(($1 + [40]), ($1 + [80]), (int_64)2147483647)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$13 }
	$14 = (($1 + [40]) + [28])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$16 }
	$3 = *($17)
	goto $label$14 
	
.LABEL $label$15
	$3 = $15
	
.LABEL $label$14
	*($14) = $15
	CALL _ZdlPv($3)
	
.LABEL $label$13
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$18
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)32) ){ goto $label$6 }
	$15 = *($12)
	if ( ($15 == 0) ){ goto $label$19 }
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$22 }
	$3 = *($12)
	goto $label$20 
	
.LABEL $label$21
	$3 = $15
	
.LABEL $label$20
	*($9) = $15
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$24
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[4]) ){ goto $label$5 }
	$15 = *($1 + [248])
	if ( ($15 == 0) ){ goto $label$25 }
	$17 = ($1 + [252])
	$3 = *($17)
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$27 }
	
.LOOP $label$28:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL _ZdlPv($4)
	
.LABEL $label$29
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$28 }
	$3 = *(($1 + [248]))
	goto $label$26 
	
.LABEL $label$27
	$3 = $15
	
.LABEL $label$26
	*($17) = $15
	CALL _ZdlPv($3)
	
.LABEL $label$25
	$15 = *($1 + [288])
	if ( ($15 == 0) ){ goto $label$30 }
	$17 = ($1 + [292])
	$3 = *($17)
	if ( ((int_32)$3 == (int_32)$15) ){ goto $label$32 }
	
.LOOP $label$33:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$34 }
	CALL _ZdlPv($4)
	
.LABEL $label$34
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$33 }
	$3 = *(($1 + [288]))
	goto $label$31 
	
.LABEL $label$32
	$3 = $15
	
.LABEL $label$31
	*($17) = $15
	CALL _ZdlPv($3)
	
.LABEL $label$30
	$global$0 = ($1 + [320])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	$5 = ($global$0 - [512])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$2 = *($4)
	$7 = CALL $144([8521])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	if ( (CALL $125($4, [0], [-1], [8521], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $28(($5 + [432]), $0)
	$2 = *($5 + [432])
	$7 = ($2 & [1])
	*($5 + [448]) = ( *($5 + [440]) ? (($5 + [432]) | [1]) : $7 )
	*($5 + [452]) = ( *($5 + [436]) ? uint_32($2 >> [1]) : $7 )
	*($5 + [40]) = *($5 + [448])
	CALL eosio_assert(CALL $29($0, $1, *(CALL $5(($5 + [160]), ($5 + [40])))), [8536])
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($5 + [440])))
	
.LABEL $label$3
	$4 = CALL $119(($5 + [368]), $4)
	CALL $30($0, $4, ($5 + [431]), ($5 + [384]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$4
	CALL $31($0, $3)
	CALL eosio_assert((*($5 + [431]) <= [2]), [8565])
	$8 = ($3 + [8])
	$6 = CALL $32($0, $8)
	$9 = *($3 + [8])
	$10 = *($0)
	$11 = [0]
	*((($5 + [160]) + [32])) = [0]
	*($5 + [168]) = $10
	*($5 + [160]) = $6
	*($5 + [176]) = (int_64)-1
	*($5 + [184]) = (int_64)0
	$4 = CALL $33(($5 + [160]), (uint_64)$9 >> (uint_64)(int_64)8), [9929]
	$10 = *($4) + [8])
	$12 = *($4)
	$7 = *($5 + [184])
	if ( ($7 == 0) ){ goto $label$5 }
	$13 = ($5 + [188])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($5 + [184]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $7
	
.LABEL $label$6
	*($13) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$6 = *($3)
	CALL __multi3(($5 + [24]), $6, (int_64)$6 >> (int_64)63), (int_64)10, (int_64)0)
	$14 = *($3 + [8])
	$6 = *((($5 + [24]) + [8]))
	$9 = *($5 + [24])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [9948])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [9972])
	CALL eosio_assert(((int_64)$10 == (int_64)$14), [9870])
	CALL eosio_assert(((int_64)$12 >= (int_64)$9), [8581])
	*((($5 + [328]) + [32])) = [0]
	*($5 + [344]) = (int_64)-1
	*($5 + [352]) = (int_64)0
	$6 = *($0)
	*($5 + [328]) = $6
	*($5 + [336]) = $6
	$9 = CALL $34($0, ($5 + [328]))
	*((($5 + [288]) + [32])) = [0]
	*($5 + [304]) = (int_64)-1
	*($5 + [312]) = (int_64)0
	$6 = *($0)
	*($5 + [288]) = $6
	*($5 + [296]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)7869342385915473920, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$11 = CALL $35(($5 + [288]), $4)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($5 + [288])), [8909])
	
.LABEL $label$10
	$4 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($4, [8609])
	$6 = CALL current_time()
	CALL $36($8, ((uint_64)$6 / (uint_64)(int_64)1000000))
	CALL eosio_assert([1], [8629])
	$9 = CALL $37($0, ($5 + [328]))
	*((($5 + [160]) + [24])) = *(($3 + [8]))
	*($5 + [192]) = *($5 + [431])
	*($5 + [176]) = *($3)
	*(($5 + [216])) = *(($11 + [24]))
	*(($5 + [224])) = *(($11 + [32]))
	*(($5 + [232])) = *(($11 + [40]))
	*($5 + [160]) = $9
	*($5 + [168]) = *($1)
	*($5 + [208]) = *($11 + [16])
	*(($5 + [264])) = *((($5 + [384]) + [24]))
	*(($5 + [256])) = *((($5 + [384]) + [16]))
	*(($5 + [248])) = *($5 + [392])
	*($5 + [240]) = *($5 + [384])
	*($5 + [272]) = $6
	*((($5 + [120]) + [32])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$6 = *($0)
	*($5 + [120]) = $6
	*($5 + [128]) = $6
	*($5 + [480]) = ($5 + [160])
	CALL $38(($5 + [80]), ($5 + [120]), $6, ($5 + [480]))
	CALL eosio_assert($4, [10131])
	CALL eosio_assert($4, [9358])
	$2 = ($5 + [272])
	$7 = ($5 + [240])
	$3 = ($5 + [208])
	$1 = (($5 + [160]) + [32])
	$8 = (($5 + [160]) + [16])
	$4 = CALL db_next_i64(*($11 + [52]), ($5 + [80]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL $35(($5 + [288]), $4)
	
.LABEL $label$11
	CALL $39(($5 + [288]), $11)
	$6 = *($0)
	*($5 + [64]) = [8391]
	*($5 + [68]) = CALL $144([8391])
	*($5 + [16]) = *($5 + [64])
	$9 = *(CALL $5(($5 + [72]), ($5 + [16])))
	$10 = *($0)
	*($5 + [48]) = [8653]
	*($5 + [52]) = CALL $144([8653])
	*($5 + [8]) = *($5 + [48])
	$4 = CALL $5(($5 + [56]), ($5 + [8]))
	*($5 + [80]) = $10
	*($5 + [88]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $6
	*($4 + [8]) = $9
	*(($5 + [116])) = [0]
	$0 = ($4 + [16])
	*((($5 + [80]) + [24])) = $0
	*(($5 + [100])) = $0
	*($5 + [96]) = $4
	*($5 + [108 align=4]) = (int_64)0
	CALL $40(($5 + [108]), [93])
	$4 = *((($5 + [80]) + [32]))
	$0 = *($5 + [108])
	*($5 + [460]) = $0
	*($5 + [456]) = $0
	*($5 + [464]) = $4
	*($5 + [472]) = ($5 + [456])
	*($5 + [484]) = (($5 + [160]) | [8])
	*($5 + [488]) = $8
	*($5 + [492]) = $1
	*($5 + [496]) = $3
	*($5 + [500]) = $7
	*($5 + [504]) = $2
	*($5 + [480]) = ($5 + [160])
	CALL $41(($5 + [480]), ($5 + [472]))
	CALL $42(($5 + [480]), ($5 + [80]))
	$4 = *($5 + [480])
	CALL send_inline($4, (*($5 + [484]) - $4))
	$4 = *($5 + [480])
	if ( ($4 == 0) ){ goto $label$12 }
	*($5 + [484]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($5 + [108])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($5 + [112])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = *($5 + [96])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($5 + [100])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$0 = *($5 + [144])
	if ( ($0 == 0) ){ goto $label$15 }
	$7 = ($5 + [148])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	CALL _ZdlPv($2)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($5 + [144]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $0
	
.LABEL $label$16
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$0 = *($5 + [312])
	if ( ($0 == 0) ){ goto $label$20 }
	$7 = ($5 + [316])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$24 }
	CALL _ZdlPv($2)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$23 }
	$4 = *(($5 + [312]))
	goto $label$21 
	
.LABEL $label$22
	$4 = $0
	
.LABEL $label$21
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$0 = *($5 + [352])
	if ( ($0 == 0) ){ goto $label$1 }
	$7 = ($5 + [356])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$28 }
	CALL _ZdlPv($2)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($5 + [352]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $0
	
.LABEL $label$25
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($5 + [512])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [184]))) = (int_64)0
	*(($4 + [200])) = [0]
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	*($4 + [240]) = ($4 + [144])
	*($4 + [40]) = ($4 + [160])
	CALL $26(($4 + [40]), ($4 + [240]))
	$8 = *($4 + [152])
	*((($4 + [24]) + [8])) = $8
	*((($4 + [8]) + [8])) = $8
	$9 = *($4 + [144])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	*(($8 = (($4 + [224]) + [8]))) = *($3)
	*($4 + [224]) = *($4 + [176])
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	$3 = CALL $119(($4 + [208]), ($4 + [192]))
	*((($4 + [240]) + [8])) = *($8)
	*($4 + [264]) = $1
	*($4 + [256]) = $0
	*($4 + [240]) = *($4 + [224])
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [264])), (int_32 ($4 + [256])), (int_32 ($4 + [240])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [208]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $150($2)
	$2 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [200])))
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	*($3 + [208]) = [8290]
	*($3 + [212]) = CALL $144([8290])
	*($3 + [96]) = *($3 + [208])
	if ( ((int_64)*(CALL $5(($3 + [216]), ($3 + [96]))) != (int_64)$2) ){ goto $label$2 }
	*($3 + [200]) = [8299]
	*($3 + [204]) = CALL $144([8299])
	*($3 + [88]) = *($3 + [200])
	if ( ((int_64)*(CALL $5(($3 + [216]), ($3 + [88]))) == (int_64)$1) ){ goto $label$4 }
	*($3 + [184]) = [8311]
	*($3 + [188]) = CALL $144([8311])
	*($3 + [80]) = *($3 + [184])
	if ( ((int_64)*(CALL $5(($3 + [192]), ($3 + [80]))) != (int_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [180]) = [0]
	*($3 + [176]) = [1]
	*($3) = *($3 + [176])
	CALL $7($0, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8340])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4994024814571159553) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)5606361046891511807) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)5606361046891511808) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)6527007352648892416) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [32]) = *($3 + [144])
	CALL $9($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)-4997502823276370785) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-7811085199840228352) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [8]) = *($3 + [168])
	CALL $11($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4994024814571159552) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [4]
	*($3 + [24]) = *($3 + [152])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-4997502823276370784) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4997502822602145792) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [56]) = *($3 + [120])
	CALL $15($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [16]) = *($3 + [160])
	CALL $17($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [40]) = *($3 + [136])
	CALL $19($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [72]) = *($3 + [104])
	CALL $21($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [132]) = [0]
	*($3 + [128]) = [9]
	*($3 + [48]) = *($3 + [128])
	CALL $23($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [116]) = [0]
	*($3 + [112]) = [10]
	*($3 + [64]) = *($3 + [112])
	CALL $25($1, $1, ($3 + [64]))
	
.LABEL $label$1
	CALL $135([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8752])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8857])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8790])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8857])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8251])
	$2 = CALL $124($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $120($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8269])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $122($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $123($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $118($0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [96]) = [8661]
	*($5 + [100]) = CALL $144([8661])
	*($5 + [16]) = *($5 + [96])
	CALL require_auth(*(CALL $5(($5 + [104]), ($5 + [16]))))
	CALL eosio_assert(((int_64)*($4) != (int_64)0), [8674])
	$6 = *($1)
	if ( ((int_64)$6 != (int_64)*($0 + [32])) ){ goto $label$14 }
	*(($5 + [88])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	$6 = *($0)
	*($5 + [56]) = $6
	*($5 + [64]) = $6
	CALL $63(($5 + [56]), $3, *($4))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($5 + [84])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($5 + [80]))
	goto $label$12 
	
.LABEL $label$14
	if ( ((int_64)$6 != (int_64)*($0 + [48])) ){ goto $label$17 }
	*(($5 + [88])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	$6 = *($0)
	*($5 + [56]) = $6
	*($5 + [64]) = $6
	CALL $64(($5 + [56]), $3, *($4))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($5 + [84])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($5 + [80]))
	goto $label$9 
	
.LABEL $label$17
	if ( ((int_64)$6 != (int_64)*($0 + [40])) ){ goto $label$20 }
	*(($5 + [88])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	*($5 + [92]) = [0]
	$6 = *($0)
	*($5 + [56]) = $6
	*($5 + [64]) = $6
	CALL $65(($5 + [56]), $3, *($4))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($5 + [84])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$21:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$21 }
	$0 = *(($5 + [80]))
	goto $label$5 
	
.LABEL $label$20
	if ( ((int_64)$6 != (int_64)*($0 + [72])) ){ goto $label$11 }
	*(($5 + [88])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	*($5 + [92]) = [0]
	*($5 + [56]) = *($0)
	*($5 + [64]) = *($2)
	CALL $56(($5 + [56]), $3, *($4))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($5 + [84])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$23:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$23 }
	$0 = *(($5 + [80]))
	goto $label$3 
	
.LABEL $label$13
	$0 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL _ZdlPv($0)
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$11
	if ( ((int_64)$6 != (int_64)*($0 + [80])) ){ goto $label$7 }
	$6 = *($0)
	CALL $28(($5 + [24]), $0)
	$0 = *($5 + [24])
	$1 = ($0 & [1])
	*($5 + [40]) = ( *($5 + [32]) ? (($5 + [24]) | [1]) : $1 )
	*($5 + [44]) = ( *($5 + [28]) ? uint_32($0 >> [1]) : $1 )
	*($5 + [8]) = *($5 + [40])
	$0 = CALL $5(($5 + [48]), ($5 + [8]))
	*(($5 + [88])) = [0]
	*($5 + [56]) = $6
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	*($5 + [64]) = *($0)
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$25
	CALL $66(($5 + [56]), $3, *($4))
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($5 + [84])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$26:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$26 }
	$0 = *(($5 + [80]))
	goto $label$1 
	
.LABEL $label$10
	$0 = $1
	
.LABEL $label$9
	*($3) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [8697])
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($3) = $1
	CALL _ZdlPv($0)
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$4
	$0 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL _ZdlPv($0)
	$global$0 = ($5 + [112])
	return 
	
.LABEL $label$2
	$0 = $1
	
.LABEL $label$1
	*($3) = $1
	CALL _ZdlPv($0)
	$global$0 = ($5 + [112])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	*($4 + [216]) = ($4 + [144])
	*($4 + [40]) = ($4 + [160])
	CALL $62(($4 + [40]), ($4 + [216]))
	$3 = *($4 + [152])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [144])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	$8 = *($4 + [160])
	*($4 + [208]) = *($4 + [168])
	*($4 + [216]) = $8
	*($4 + [200]) = $1
	*($4 + [192]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [216])), (int_32 ($4 + [208])), (int_32 ($4 + [200])), (int_32 ($4 + [192])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [272])
	$global$0 = $4
	*($4 + [224]) = [8378]
	*($4 + [228]) = CALL $144([8378])
	*($4 + [24]) = *($4 + [224])
	CALL require_auth(*(CALL $5(($4 + [232]), ($4 + [24]))))
	*(($4 + [216])) = [0]
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	$5 = *($0)
	*($4 + [184]) = $5
	*($4 + [192]) = $5
	$6 = CALL $44($0, ($4 + [184]), $1)
	*(($4 + [176])) = *(($6 + [24]))
	*($4 + [168]) = *($6 + [16])
	$1 = *($3)
	$7 = *($6 + [32])
	if ( $7 ){ goto $label$4 }
	if ( (($1 & [255]) <= [51]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$2 }
	if ( (($1 & [255]) <= [51]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([1], [9252])
	$5 = *($4 + [168])
	*($4 + [168]) = ((int_64)$5 << (int_64)1)
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [9295])
	CALL eosio_assert(((int_64)*($4 + [168]) < (int_64)4611686018427387904), [9314])
	$5 = *($0)
	*($4 + [112]) = [8391]
	*($4 + [116]) = CALL $144([8391])
	*($4 + [16]) = *($4 + [112])
	$8 = *(CALL $5(($4 + [120]), ($4 + [16])))
	$9 = CALL $32($0, ($6 + [24]))
	*($4 + [96]) = [8290]
	*($4 + [100]) = CALL $144([8290])
	*($4 + [8]) = *($4 + [96])
	$1 = CALL $5(($4 + [104]), ($4 + [8]))
	CALL $45(($4 + [32]), $0, $6)
	$10 = *($6 + [8])
	*((($4 + [48]) + [24])) = *((($4 + [168]) + [8]))
	$7 = (($4 + [32]) + [8])
	*(($4 + [88])) = *($7)
	*($7) = [0]
	*($4 + [128]) = $9
	*($4 + [48]) = *($0)
	*($4 + [64]) = *($4 + [168])
	*($4 + [80]) = *($4 + [32])
	*($4 + [136]) = *($1)
	*($4 + [56]) = $10
	*($4 + [32]) = (int_64)0
	*(($1 = CALL _Znwj([16]))) = $5
	*($1 + [8]) = $8
	*((($4 + [128]) + [36])) = [0]
	$7 = ($1 + [16])
	*((($4 + [128]) + [24])) = $7
	*(($4 + [148])) = $7
	*($4 + [144]) = $1
	*($4 + [156 align=4]) = (int_64)0
	$1 = *($4 + [80])
	$7 = ( *((($4 + [48]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($7 + [32])
	$5 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [156])
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $40($7, $1)
	$7 = *(($4 + [160]))
	$1 = *(($4 + [156]))
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$1 = [0]
	
.LABEL $label$6
	*($4 + [260]) = $1
	*($4 + [256]) = $1
	*($4 + [264]) = $7
	*($4 + [240]) = ($4 + [256])
	*($4 + [248]) = ($4 + [48])
	CALL $46(($4 + [248]), ($4 + [240]))
	CALL $42(($4 + [256]), ($4 + [128]))
	$1 = *($4 + [256])
	CALL send_inline($1, (*($4 + [260]) - $1))
	$1 = *($4 + [256])
	if ( ($1 == 0) ){ goto $label$8 }
	*($4 + [260]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($4 + [156])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($4 + [160])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($4 + [144])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($4 + [148])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$11
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$12
	$1 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($4 + [168]) = (int_64)0
	$1 = [0]
	
.LABEL $label$1
	CALL $47(($4 + [184]), $6)
	CALL $48($0, $6, *($3), $2, ($4 + [168]))
	CALL $49($0, $6, $1)
	$0 = *($4 + [208])
	if ( ($0 == 0) ){ goto $label$13 }
	$3 = ($4 + [212])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($4 + [208]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $0
	
.LABEL $label$14
	*($3) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($4 + [272])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [144]) + [40]))) = (int_64)0
	*(($8 = (($4 + [144]) + [32]))) = (int_64)0
	*(($9 = (($4 + [144]) + [24]))) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [192]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8983])
	CALL memcpy(($4 + [144]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [8983])
	CALL memcpy((($4 + [144]) + [16]), ($2 + [8]), [32])
	CALL eosio_assert(((int_32)$7 != (int_32)[40]), [8983])
	CALL memcpy(($4 + [192]), ($2 + [40]), [1])
	$10 = ($2 + $7)
	*((($4 + [8]) + [8])) = $10
	*($4 + [28]) = ($2 + [41])
	*($4 + [24]) = $2
	*($4 + [32]) = $10
	*($4 + [8]) = *($4 + [24])
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	*(($10 = (($4 + [208]) + [16]))) = *($8)
	*(($8 = (($4 + [208]) + [24]))) = *($3)
	*($4 + [208]) = *($4 + [160])
	*($4 + [216]) = *($9)
	$3 = *($4 + [192])
	$0 = *($4 + [144])
	*((($4 + [240]) + [24])) = *($8)
	*((($4 + [240]) + [16])) = *($10)
	*($4 + [280]) = $0
	*($4 + [279]) = $3
	*($4 + [248]) = *($4 + [216])
	*($4 + [240]) = *($4 + [208])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 ($4 + [240])), (int_32 ($4 + [279])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [544])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [160]), [0], [128])
	*(($4 + [184])) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	*($4 + [288]) = ($4 + [144])
	*($4 + [420]) = (($4 + [160]) | [8])
	*($4 + [424]) = ($4 + [176])
	*($4 + [428]) = ($4 + [192])
	*($4 + [432]) = ($4 + [208])
	*($4 + [436]) = ($4 + [240])
	*($4 + [440]) = ($4 + [272])
	*($4 + [416]) = ($4 + [160])
	CALL $43(($4 + [416]), ($4 + [288]))
	$3 = *($4 + [152])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [144])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	CALL memcpy(($4 + [288]), ($4 + [160]), [128])
	CALL memcpy(($4 + [416]), ($4 + [288]), [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [416])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	$global$0 = ($4 + [544])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [272])
	$global$0 = $3
	*($3 + [224]) = [8378]
	*($3 + [228]) = CALL $144([8378])
	*($3 + [24]) = *($3 + [224])
	CALL require_auth(*(CALL $5(($3 + [232]), ($3 + [24]))))
	*((($3 + [184]) + [32])) = [0]
	*($3 + [200]) = (int_64)-1
	*($3 + [208]) = (int_64)0
	$4 = *($0)
	*($3 + [184]) = $4
	*($3 + [192]) = $4
	$5 = CALL $44($0, ($3 + [184]), $1)
	CALL assert_sha256($2, [32], ($5 + [48]))
	$6 = CALL $50($2, ($5 + [80]))
	*(($3 + [176])) = *(($5 + [24]))
	*($3 + [168]) = *($5 + [16])
	$1 = *($5 + [32])
	if ( ((uint_32)$6 > (uint_32)[50]) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($6 <= [51]) ){ goto $label$2 }
	if ( ((int_32)($1 & [255]) != (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([1], [9252])
	$4 = *($3 + [168])
	*($3 + [168]) = ((int_64)$4 << (int_64)1)
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [9295])
	CALL eosio_assert(((int_64)*($3 + [168]) < (int_64)4611686018427387904), [9314])
	$4 = *($0)
	*($3 + [112]) = [8391]
	*($3 + [116]) = CALL $144([8391])
	*($3 + [16]) = *($3 + [112])
	$7 = *(CALL $5(($3 + [120]), ($3 + [16])))
	$8 = CALL $32($0, ($5 + [24]))
	*($3 + [96]) = [8290]
	*($3 + [100]) = CALL $144([8290])
	*($3 + [8]) = *($3 + [96])
	$1 = CALL $5(($3 + [104]), ($3 + [8]))
	CALL $45(($3 + [32]), $0, $5)
	$9 = *($5 + [8])
	*((($3 + [48]) + [24])) = *((($3 + [168]) + [8]))
	$10 = (($3 + [32]) + [8])
	*(($3 + [88])) = *($10)
	*($10) = [0]
	*($3 + [128]) = $8
	*($3 + [48]) = *($0)
	*($3 + [64]) = *($3 + [168])
	*($3 + [80]) = *($3 + [32])
	*($3 + [136]) = *($1)
	*($3 + [56]) = $9
	*($3 + [32]) = (int_64)0
	*(($1 = CALL _Znwj([16]))) = $4
	*($1 + [8]) = $7
	*((($3 + [128]) + [36])) = [0]
	$10 = ($1 + [16])
	*((($3 + [128]) + [24])) = $10
	*(($3 + [148])) = $10
	*($3 + [144]) = $1
	*($3 + [156 align=4]) = (int_64)0
	$1 = *($3 + [80])
	$10 = ( *((($3 + [48]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($10 + [32])
	$4 = (CASTING uint_64)(uint_32 $10)
	$10 = ($3 + [156])
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $40($10, $1)
	$10 = *(($3 + [160]))
	$1 = *(($3 + [156]))
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$1 = [0]
	
.LABEL $label$6
	*($3 + [260]) = $1
	*($3 + [256]) = $1
	*($3 + [264]) = $10
	*($3 + [240]) = ($3 + [256])
	*($3 + [248]) = ($3 + [48])
	CALL $46(($3 + [248]), ($3 + [240]))
	CALL $42(($3 + [256]), ($3 + [128]))
	$1 = *($3 + [256])
	CALL send_inline($1, (*($3 + [260]) - $1))
	$1 = *($3 + [256])
	if ( ($1 == 0) ){ goto $label$8 }
	*($3 + [260]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($3 + [156])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($3 + [160])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($3 + [144])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($3 + [148])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((*(($3 + [80])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$1 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($3 + [168]) = (int_64)0
	$1 = [0]
	
.LABEL $label$1
	CALL $47(($3 + [184]), $5)
	CALL $48($0, $5, $6, $2, ($3 + [168]))
	CALL $49($0, $5, $1)
	$0 = *($3 + [208])
	if ( ($0 == 0) ){ goto $label$13 }
	$2 = ($3 + [212])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($3 + [208]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $0
	
.LABEL $label$14
	*($2) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$global$0 = ($3 + [272])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [144]) + [40]))) = (int_64)0
	*(($8 = (($4 + [144]) + [32]))) = (int_64)0
	*(($9 = (($4 + [144]) + [24]))) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [144]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8983])
	CALL memcpy(($4 + [144]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [8983])
	CALL memcpy((($4 + [144]) + [16]), ($2 + [8]), [32])
	$10 = ($2 + $7)
	*((($4 + [8]) + [8])) = $10
	*($4 + [28]) = ($2 + [40])
	*($4 + [24]) = $2
	*($4 + [32]) = $10
	*($4 + [8]) = *($4 + [24])
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	*(($10 = (($4 + [192]) + [16]))) = *($8)
	*(($8 = (($4 + [192]) + [24]))) = *($3)
	*($4 + [192]) = *($4 + [160])
	*($4 + [200]) = *($9)
	$0 = *($4 + [144])
	*((($4 + [224]) + [24])) = *($8)
	*((($4 + [224]) + [16])) = *($10)
	*($4 + [264]) = $0
	*($4 + [232]) = *($4 + [200])
	*($4 + [224]) = *($4 + [192])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [264])), (int_32 ($4 + [224])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)$7 != (int_64)*(*(($6 + [-24])))) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)$7 != (int_64)*(*($9))) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9483])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [172])))
	$6 = *($1 + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4994024801686257664, ($2 + [8]), ((int_64)*($1) ^ (int_64)-1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [144]) = [8378]
	*($2 + [148]) = CALL $144([8378])
	*($2 + [8]) = *($2 + [144])
	CALL require_auth(*(CALL $5(($2 + [152]), ($2 + [8]))))
	*(($3 = (($2 + [104]) + [32]))) = [0]
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$4 = *($0)
	*($2 + [104]) = $4
	*($2 + [112]) = $4
	*((($2 + [64]) + [32])) = [0]
	*($2 + [72]) = $4
	*($2 + [64]) = $4
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [176]) = [0]
	$5 = ($0 + [92])
	$6 = CALL $58($1, ($2 + [16]), $5, ($2 + [176]))
	$7 = *($2 + [16])
	$8 = (($7 & [1]) == 0)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	$9 = (($2 + [104]) + [24])
	$10 = (($2 + [176]) | [8])
	$11 = ($2 + [132])
	
.LOOP $label$2:
	$8 = ( uint_32(($7 & [254]) >> [1]) ? *($2 + [20]) : ($8 & [1]) )
	if ( ($8 == 0) ){ goto $label$3 }
	CALL eosio_assert(((int_32)$8 == (int_32)[64]), [8223])
	CALL $2(($2 + [16]), ($2 + [176]), [32])
	*(($7 = (($2 + [32]) + [24]))) = *((($2 + [176]) + [24]))
	*(($12 = (($2 + [32]) + [16]))) = *((($2 + [176]) + [16]))
	*($2 + [40]) = *($2 + [184])
	*($2 + [32]) = *($2 + [176])
	$13 = *($0)
	CALL eosio_assert(((int_64)*($2 + [104]) == (int_64)CALL eosio_assert5()), [8988])
	*(($8 = CALL _Znwj([64])) + [48]) = ($2 + [104])
	*($8) = CALL $59($0, ($2 + [64]))
	*($8 + [16]) = *($2 + [32])
	*(($8 + [24])) = *($2 + [40])
	*(($8 + [32])) = *($12)
	*(($8 + [40])) = *($7)
	CALL eosio_assert([1], [9039])
	CALL memcpy(($2 + [176]), $8, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy($10, ($8 + [16]), [32])
	$4 = *($8)
	$12 = CALL db_store_i64(*((($2 + [104]) + [8])), (int_64)7869342385915473920, $13, $4, ($2 + [176]), [40])
	*($8 + [52]) = $12
	$7 = (($2 + [104]) + [16])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$4 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($2 + [168]) = $8
	$4 = *($8)
	*($2 + [176]) = $4
	*($2 + [164]) = $12
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*($3)) ){ goto $label$7 }
	*($7 + [8]) = $4
	*($7 + [16]) = $12
	*($2 + [168]) = [0]
	*($7) = $8
	*($11) = ($7 + [24])
	$8 = *($2 + [168])
	*($2 + [168]) = [0]
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $60($9, ($2 + [168]), ($2 + [176]), ($2 + [164]))
	$8 = *($2 + [168])
	*($2 + [168]) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$6 = ($6 + [1])
	
.LABEL $label$3
	*($2 + [176]) = $6
	$6 = CALL $58($1, ($2 + [16]), $5, ($2 + [176]))
	$7 = *($2 + [16])
	$8 = (($7 & [1]) == 0)
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( $8 ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$8
	$7 = *($2 + [88])
	if ( ($7 == 0) ){ goto $label$9 }
	$12 = ($2 + [92])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$12 }
	$8 = *(($2 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$8 = $7
	
.LABEL $label$10
	*($12) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$7 = *($2 + [128])
	if ( ($7 == 0) ){ goto $label$14 }
	$12 = ($2 + [132])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$17 }
	$8 = *(($2 + [128]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $7
	
.LABEL $label$15
	*($12) = $7
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$global$0 = ($2 + [224])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	CALL $57(($4 + [144]), ($4 + [160]))
	$3 = *($4 + [152])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [144])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = CALL $119(($4 + [176]), ($4 + [160]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_32 $6))
	if ( (*($4 + [176]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($9 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $150($2)
	$2 = [1]
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [160]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [168])))
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [-1]
	$7 = *($0)
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)( *($0 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	$5 = CALL $124($0, *($2), $6)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$6 }
	$3 = *($3)
	CALL $120($4, $0, $3, ($5 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0)
	$5 = *($3)
	CALL $120($4, $0, $5, (( *(($0 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) ) - $5), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$4
	CALL $122($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return $5
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $122($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	$1 = *($0)
	if ( ($1 & [1]) ){ goto $label$7 }
	$global$0 = ($4 + [16])
	return uint_32($1 >> [1])
	
.LABEL $label$7
	$0 = *(($0 + [4]))
	$global$0 = ($4 + [16])
	return $0
}

int_64 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $51($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	*((($2 + [24]) + [16])) = *(($3 + [16]))
	*(($4 = (($2 + [24]) + [8]))) = *(($3 + [8]))
	*($2 + [24]) = *($3)
	*($4) = ((int_64)*($4) + (int_64)1)
	CALL $87($1, ($2 + [24]), *($0))
	$5 = *($4)
	$global$0 = ($2 + [48])
	return $5
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL memcpy(($2 + [32]), $0, [32])
	CALL memcpy((($2 + [32]) + [32]), $1, [20])
	CALL sha256(($2 + [32]), [52], $2)
	$3 = *($2 + [5])
	$4 = *($2 + [6])
	$5 = *($2 + [7])
	$6 = *($2 + [4])
	$7 = *($2 + [1])
	$8 = *($2 + [2])
	$9 = *($2 + [3])
	$10 = *($2)
	$11 = *($2 + [9])
	$12 = *($2 + [10])
	$13 = *($2 + [11])
	$14 = *($2 + [8])
	$15 = *($2 + [13])
	$16 = *($2 + [14])
	$17 = *($2 + [15])
	$18 = *($2 + [12])
	$19 = *($2 + [17])
	$20 = *($2 + [18])
	$21 = *($2 + [19])
	$22 = *($2 + [16])
	$23 = *($2 + [21])
	$24 = *($2 + [22])
	$25 = *($2 + [23])
	$26 = *($2 + [20])
	$27 = *($2 + [25])
	$28 = *($2 + [26])
	$29 = *($2 + [27])
	$30 = *($2 + [24])
	$31 = *($2 + [29])
	$32 = *($2 + [30])
	$33 = *($2 + [31])
	$34 = *($2 + [28])
	$global$0 = ($2 + [96])
	return ((CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)((int_64)$33 | (int_64)((int_64)$32 << (int_64)8)) | (int_64)((int_64)$31 << (int_64)16)) | (int_64)((int_64)$34 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$29 | (int_64)((int_64)$28 << (int_64)8)) | (int_64)((int_64)$27 << (int_64)16)) | (int_64)((int_64)$30 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$25 | (int_64)((int_64)$24 << (int_64)8)) | (int_64)((int_64)$23 << (int_64)16)) | (int_64)((int_64)$26 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$21 | (int_64)((int_64)$20 << (int_64)8)) | (int_64)((int_64)$19 << (int_64)16)) | (int_64)((int_64)$22 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$17 | (int_64)((int_64)$16 << (int_64)8)) | (int_64)((int_64)$15 << (int_64)16)) | (int_64)((int_64)$18 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$13 | (int_64)((int_64)$12 << (int_64)8)) | (int_64)((int_64)$11 << (int_64)16)) | (int_64)((int_64)$14 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)$5 | (int_64)((int_64)$4 << (int_64)8)) | (int_64)((int_64)$3 << (int_64)16)) | (int_64)((int_64)$6 << (int_64)24)) + (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)$9 | (int_64)((int_64)$8 << (int_64)8)) | (int_64)((int_64)$7 << (int_64)16)) | (int_64)((int_64)$10 << (int_64)24)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100) * (int_64)96)) % (uint_64)(int_64)100)) + [1])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8983])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8983])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8983])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159550150574080
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = (int_64)7235159550150574080
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($7) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $105(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9483])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8983])
	CALL memcpy($4, $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8983])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	*($4 + [20]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-4455901497821387904
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4455901497821387904
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [9483])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [20]))
}

int_64 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $51($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	*(($4 = (($2 + [24]) + [16]))) = *(($3 + [16]))
	*(($5 = (($2 + [24]) + [8]))) = *(($3 + [8]))
	*($2 + [24]) = *($3)
	$6 = *($4)
	CALL eosio_assert(((uint_64)*($5) > (uint_64)$6), [9997])
	*($4) = ((int_64)$6 + (int_64)1)
	CALL $87($1, ($2 + [24]), *($0))
	$6 = *($4)
	$global$0 = ($2 + [48])
	return $6
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4455901301129084928, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $68($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [10131])
	CALL eosio_assert($5, [9358])
	$5 = [0]
	$6 = CALL db_next_i64(*($1 + [56]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $68($0, $6)
	
.LABEL $label$3
	CALL $71($0, $1)
	$4 = ($4 + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$1 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $108($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $122($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $122($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $118($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $145(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10168])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $145(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8983])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [8983])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $60(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $147($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10168])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $147($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $139 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $137($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $118 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18572])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18380]
	$3 = (((int_32)$1 * (int_32)[12]) + [18380])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = [0]
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = *($0)
	*($3 + [24]) = $5
	*($3 + [32]) = $2
	$6 = CALL db_find_i64($5, $2, (int_64)-6497942320245243904, *($1))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $83(($3 + [24]), $6)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($3 + [24])), [8909])
	*($3 + [20]) = $1
	$6 = *($0 + [96])
	$7 = *($1 + [8])
	*($3 + [16]) = ($3 + [24])
	if ( ((uint_32)$7 > (uint_32)$6) ){ goto $label$1 }
	$2 = *($0)
	*($3) = ($3 + [16])
	CALL $84(($3 + [24]), $1, $2, $3)
	goto $label$2 
	
.LABEL $label$3
	*($3 + [20]) = [0]
	*($3 + [16]) = ($3 + [24])
	$2 = *($0)
	*($3 + [8]) = $1
	CALL $85($3, ($3 + [24]), $2, ($3 + [8]))
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	$6 = *($3 + [48])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [52])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($3 + [64])
	return $4
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$3 = *($1)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	*($2 + [16]) = (int_64)1545062400
	*($2 + [8]) = (int_64)1
	$4 = CALL db_find_i64($3, $3, (int_64)-4455901497821387904, (int_64)-4455901497821387904)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $53(($2 + [40]), $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($2 + [40])), [8909])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($2 + [8])
	
.LABEL $label$1
	*(($5 = (($2 + [24]) + [8]))) = *(($4 + [8]))
	*($2 + [24]) = *($4)
	$3 = *($5)
	$6 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	if ( (uint_64)($6 <= $3) ){ goto $label$3 }
	*($5) = ((int_64)$3 + (int_64)86400)
	*($2 + [24]) = ((int_64)*($2 + [24]) + (int_64)((uint_64)((int_64))((int_64)86400 - $3) + (int_64)$6) / (uint_64)(int_64)86400))
	CALL $79(($2 + [40]), ($2 + [24]), *($1))
	
.LABEL $label$3
	$3 = ((int_64)*($2 + [24]) << (int_64)59)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$8 }
	$1 = [0]
	$5 = *([0] + [10024])
	
.LOOP $label$10:
	*((($2 + [8]) + ($4 = $1))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$1 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$9 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$10 }
	
.LABEL $label$9
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	*(($0 + [1])) = [0]
	$5 = *($2 + [64])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$6
	$0 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$11:
	*(($5 + $4)) = *((($2 + [8]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$11 }
	*(($5 + $1)) = [0]
	$5 = *($2 + [64])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = ($2 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($2 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $5
	
.LABEL $label$12
	*($0) = $5
	CALL _ZdlPv($4)
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$4
	$global$0 = ($2 + [80])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$4 }
	$4 = [0]
	
.LOOP $label$6:
	*((($2 + [9]) + ($1 = $4))) = $3
	$4 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$1 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$2
	$6 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($5 + $1)) = *((($2 + [9]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$7 }
	$1 = ($5 + $4)
	
.LABEL $label$1
	*($1) = [0]
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$10 }
	$4 = ($1 + uint_32($4 >> [1]))
	$1 = ($0 + [1])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = ($1 + *($0 + [4]))
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	
.LOOP $label$11:
	*($1) = CALL $133(*($1))
	$1 = ($1 + [1])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$8
	$global$0 = ($2 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [120]) = $1
	*(($4 = ($0 + [24]))) = (int_64)0
	$5 = *($2 + [4])
	$1 = *($5)
	*($0) = *($1)
	*($0 + [8]) = *($1 + [8])
	$6 = *($2)
	*($4) = *(($1 + [24]))
	*($0 + [16]) = *($1 + [16])
	$1 = *($5)
	*($0 + [32]) = *($1 + [32])
	*(($0 + [72])) = *(($1 + [72]))
	*(($0 + [64])) = *(($1 + [64]))
	*(($0 + [56])) = *(($1 + [56]))
	*($0 + [48]) = *($1 + [48])
	$1 = *($5)
	*($0 + [80]) = *($1 + [80])
	*(($0 + [104])) = *(($1 + [104]))
	*(($0 + [96])) = *(($1 + [96]))
	*(($0 + [88])) = *(($1 + [88]))
	*($0 + [112]) = *(*($5) + [112])
	*($3 + [112]) = ($3 + [93])
	*($3 + [108]) = $3
	*($3 + [104]) = $3
	*($3 + [120]) = ($3 + [104])
	*($3 + [132]) = ($0 + [8])
	*($3 + [128]) = $0
	*($3 + [136]) = ($0 + [16])
	*($3 + [140]) = ($0 + [32])
	*($3 + [144]) = ($0 + [48])
	*($3 + [148]) = ($0 + [80])
	*($3 + [152]) = ($0 + [112])
	CALL $41(($3 + [128]), ($3 + [120]))
	$7 = *($0)
	*($0 + [124]) = CALL db_store_i64(*($6 + [8]), (int_64)-6497942333781180416, *(*($2 + [8])), $7, $3, [93])
	if ( (uint_64)($7 <= *($6 + [16])) ){ goto $label$1 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [160])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [16]))
	*(($6 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [9039])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($2 | [8]), $6, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($2 + [16]), $5, [8])
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), (int_64)7235159550150574080, $2, [24])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8983])
	CALL memcpy(($4 + [144]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8983])
	CALL memcpy((($4 + [144]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [144])
	*($4 + [160]) = *($4 + [152])
	*($4 + [168]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$3 = ($global$0 - [320])
	$global$0 = $3
	*($3 + [96]) = [8661]
	*($3 + [100]) = CALL $144([8661])
	*($3 + [8]) = *($3 + [96])
	CALL require_auth(*(CALL $5(($3 + [104]), ($3 + [8]))))
	$4 = *($1)
	if ( ((int_64)$4 != (int_64)*($0 + [72])) ){ goto $label$8 }
	*(($5 = (($3 + [280]) + [32]))) = [0]
	*($3 + [288]) = (int_64)-3699144143931441152
	*($3 + [296]) = (int_64)-1
	*($3 + [304]) = (int_64)0
	*($3 + [316]) = [0]
	$4 = *($0)
	*($3 + [280]) = $4
	*((($3 + [56]) + [32])) = [0]
	*($3 + [56]) = $4
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [92]) = [0]
	$6 = *($2)
	*($3 + [64]) = $6
	$1 = CALL db_lowerbound_i64($4, $6, (int_64)-4455901301129084928, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$7 = (($3 + [280]) + [24])
	$8 = (($3 + [112]) + [49])
	$2 = CALL $68(($3 + [56]), $1)
	$9 = ($3 + [28])
	$10 = ($3 + [36])
	$11 = ($3 + [308])
	
.LOOP $label$10:
	$4 = *($0)
	CALL eosio_assert(((int_64)*($3 + [280]) == (int_64)CALL eosio_assert5()), [8988])
	*(($1 = CALL _Znwj([72]))) = (int_64)0
	*($1 + [52]) = ($3 + [280])
	*($1) = *($2)
	*($1 + [48]) = *($2 + [48])
	*($1 + [8]) = *($2 + [8])
	*($1 + [16]) = *($2 + [16])
	*($1 + [24]) = *($2 + [24])
	*($1 + [32]) = *($2 + [32])
	*($1 + [40]) = *($2 + [40])
	*((($3 + [256]) + [8])) = $8
	*($3 + [260]) = ($3 + [112])
	*($3 + [256]) = ($3 + [112])
	*($3 + [272]) = ($3 + [256])
	$12 = ($1 + [16])
	*((($3 + [16]) + [8])) = $12
	$13 = ($1 + [24])
	*($9) = $13
	$14 = ($1 + [32])
	*((($3 + [16]) + [16])) = $14
	*($10) = ($1 + [40])
	*((($3 + [16]) + [24])) = ($1 + [48])
	$15 = ($1 + [8])
	*($3 + [20]) = $15
	*($3 + [16]) = $1
	CALL $69(($3 + [16]), ($3 + [272]))
	$6 = *($1)
	$16 = (($3 + [280]) + [8])
	*($1 + [56]) = CALL db_store_i64(*($16), (int_64)-4455901301129084928, $4, $6, ($3 + [112]), [49])
	$17 = (($3 + [280]) + [16])
	if ( (uint_64)($6 <= *($17)) ){ goto $label$11 }
	*($17) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$6 = *($1)
	$18 = *($16)
	*($3 + [16]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($15) << (int_64)56)) | (int_64)((uint_64)*($12) / (uint_64)(int_64)100000))
	*($1 + [60]) = CALL db_idx64_store($18, (int_64)-4455901301129084928, $4, $6, ($3 + [16]))
	$6 = *($1)
	$18 = *($16)
	*($3 + [16]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($13) << (int_64)56)) | (int_64)((uint_64)*($14) / (uint_64)(int_64)100000))
	*($1 + [64]) = CALL db_idx64_store($18, (int_64)-4455901301129084927, $4, $6, ($3 + [16]))
	*($3 + [16]) = $1
	$4 = *($1)
	*($3 + [112]) = $4
	$12 = *(($1 + [56]))
	*($3 + [256]) = $12
	$16 = *($11)
	if ( ((uint_32)$16 >= (uint_32)*($5)) ){ goto $label$14 }
	*($16 + [8]) = $4
	*($16 + [16]) = $12
	*($3 + [16]) = [0]
	*($16) = $1
	*($11) = ($16 + [24])
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( $1 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $70($7, ($3 + [16]), ($3 + [112]), ($3 + [256]))
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = [0]
	$16 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($16, [10131])
	CALL eosio_assert($16, [9358])
	$16 = CALL db_next_i64(*($2 + [56]), ($3 + [112]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$15 }
	$1 = CALL $68(($3 + [56]), $16)
	
.LABEL $label$15
	CALL $71(($3 + [56]), $2)
	$2 = $1
	if ( $1 ){ goto $label$10 }
	
.LABEL $label$9
	$1 = CALL db_lowerbound_i64(*($3 + [280]), *((($3 + [280]) + [8])), (int_64)-4455901301129084928, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$10 = (($3 + [56]) + [24])
	$5 = (($3 + [112]) + [49])
	$2 = CALL $68(($3 + [280]), $1)
	$8 = ($3 + [28])
	$9 = ($3 + [36])
	$11 = ($3 + [84])
	
.LOOP $label$17:
	$4 = *($0)
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)CALL eosio_assert5()), [8988])
	*(($1 = CALL _Znwj([72]))) = (int_64)0
	*($1 + [52]) = ($3 + [56])
	*($1) = *($2)
	*($1 + [48]) = *($2 + [48])
	*($1 + [8]) = *($2 + [8])
	*($1 + [16]) = *($2 + [16])
	*($1 + [24]) = *($2 + [24])
	*($1 + [32]) = *($2 + [32])
	*($1 + [40]) = *($2 + [40])
	*((($3 + [256]) + [8])) = $5
	*($3 + [260]) = ($3 + [112])
	*($3 + [256]) = ($3 + [112])
	*($3 + [272]) = ($3 + [256])
	$12 = ($1 + [16])
	*((($3 + [16]) + [8])) = $12
	$13 = ($1 + [24])
	*($8) = $13
	$14 = ($1 + [32])
	*((($3 + [16]) + [16])) = $14
	*($9) = ($1 + [40])
	*((($3 + [16]) + [24])) = ($1 + [48])
	$15 = ($1 + [8])
	*($3 + [20]) = $15
	*($3 + [16]) = $1
	CALL $69(($3 + [16]), ($3 + [272]))
	$6 = *($1)
	$16 = (($3 + [56]) + [8])
	*($1 + [56]) = CALL db_store_i64(*($16), (int_64)-4455901301129084928, $4, $6, ($3 + [112]), [49])
	$17 = (($3 + [56]) + [16])
	if ( (uint_64)($6 <= *($17)) ){ goto $label$18 }
	*($17) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$6 = *($1)
	$18 = *($16)
	*($3 + [16]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($15) << (int_64)56)) | (int_64)((uint_64)*($12) / (uint_64)(int_64)100000))
	*($1 + [60]) = CALL db_idx64_store($18, (int_64)-4455901301129084928, $4, $6, ($3 + [16]))
	$6 = *($1)
	$18 = *($16)
	*($3 + [16]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($13) << (int_64)56)) | (int_64)((uint_64)*($14) / (uint_64)(int_64)100000))
	*($1 + [64]) = CALL db_idx64_store($18, (int_64)-4455901301129084927, $4, $6, ($3 + [16]))
	*($3 + [16]) = $1
	$4 = *($1)
	*($3 + [112]) = $4
	$12 = *(($1 + [56]))
	*($3 + [256]) = $12
	$16 = *($11)
	if ( ((uint_32)$16 >= (uint_32)*((($3 + [56]) + [32]))) ){ goto $label$21 }
	*($16 + [8]) = $4
	*($16 + [16]) = $12
	*($3 + [16]) = [0]
	*($16) = $1
	*($11) = ($16 + [24])
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( $1 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $70($10, ($3 + [16]), ($3 + [112]), ($3 + [256]))
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($1)
	
.LABEL $label$19
	$1 = [0]
	$16 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($16, [10131])
	CALL eosio_assert($16, [9358])
	$16 = CALL db_next_i64(*($2 + [56]), ($3 + [112]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$22 }
	$1 = CALL $68(($3 + [280]), $16)
	
.LABEL $label$22
	CALL $71(($3 + [280]), $2)
	$2 = $1
	if ( $1 ){ goto $label$17 }
	
.LABEL $label$16
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$5 }
	$16 = ($3 + [84])
	$1 = *($16)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$23:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$24 }
	CALL _ZdlPv($2)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$23 }
	$1 = *(($3 + [80]))
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_64)$4 != (int_64)*($0 + [40])) ){ goto $label$1 }
	*(($14 = (($3 + [56]) + [32]))) = [0]
	*($3 + [64]) = (int_64)-3699144143931441152
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [92]) = [0]
	$4 = *($0)
	*($3 + [56]) = $4
	*((($3 + [16]) + [32])) = [0]
	*($3 + [16]) = $4
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$6 = *($2)
	*($3 + [24]) = $6
	$1 = CALL db_lowerbound_i64($4, $6, (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$25 }
	$9 = (($3 + [56]) + [24])
	$15 = (($3 + [112]) + [142])
	$2 = CALL $72(($3 + [16]), $1)
	$11 = ($3 + [292])
	$17 = ($3 + [300])
	$5 = (($3 + [280]) + [28])
	$8 = ($3 + [316])
	
.LOOP $label$26:
	$4 = *($0)
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)CALL eosio_assert5()), [8988])
	*(($1 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [144]) = (int_64)0
	*($1 + [152]) = (int_64)0
	*($1 + [168]) = ($3 + [56])
	*($1) = *($2)
	*($1 + [8]) = *($2 + [8])
	*($1 + [24]) = *(($2 + [24]))
	*($1 + [16]) = *($2 + [16])
	*($1 + [32]) = *($2 + [32])
	*($1 + [33]) = *($2 + [33])
	*(($1 + [72])) = *(($2 + [72]))
	*(($1 + [64])) = *(($2 + [64]))
	*(($1 + [56])) = *(($2 + [56]))
	*($1 + [48]) = *($2 + [48])
	*(($1 + [104])) = *(($2 + [104]))
	*(($1 + [96])) = *(($2 + [96]))
	*(($1 + [88])) = *(($2 + [88]))
	*($1 + [80]) = *($2 + [80])
	*(($1 + [136])) = *(($2 + [136]))
	*(($1 + [128])) = *(($2 + [128]))
	*(($1 + [120])) = *(($2 + [120]))
	*($1 + [112]) = *($2 + [112])
	*($1 + [152]) = *(($2 + [152]))
	*($1 + [144]) = *($2 + [144])
	*($1 + [160]) = *($2 + [160])
	*((($3 + [256]) + [8])) = $15
	*($3 + [260]) = ($3 + [112])
	*($3 + [256]) = ($3 + [112])
	*($3 + [272]) = ($3 + [256])
	*((($3 + [280]) + [8])) = ($1 + [16])
	*($11) = ($1 + [32])
	*((($3 + [280]) + [16])) = ($1 + [33])
	*($17) = ($1 + [48])
	*((($3 + [280]) + [24])) = ($1 + [80])
	*($5) = ($1 + [112])
	*((($3 + [280]) + [32])) = ($1 + [144])
	*($8) = ($1 + [160])
	$16 = ($1 + [8])
	*($3 + [284]) = $16
	*($3 + [280]) = $1
	CALL $73(($3 + [280]), ($3 + [272]))
	$6 = *($1)
	$18 = ((int_64)$6 ^ (int_64)-1)
	$12 = (($3 + [56]) + [8])
	*($1 + [172]) = CALL db_store_i64(*($12), (int_64)-4994024801686257664, $4, $18, ($3 + [112]), [142])
	$13 = (($3 + [56]) + [16])
	if ( ((uint_64)*($13) > (uint_64)$18) ){ goto $label$27 }
	*($13) = ( (int_64)-2 ? (int_64))((int_64)0 - $6) : (uint_64)($6 <= (int_64)2) )
	
.LABEL $label$27
	$6 = *($12)
	$18 = *($1)
	*($3 + [280]) = *($16)
	*($1 + [176]) = CALL db_idx64_store($6, (int_64)-4994024801686257664, $4, ((int_64)$18 ^ (int_64)-1), ($3 + [280]))
	*($3 + [280]) = $1
	$4 = ((int_64)*($1) ^ (int_64)-1)
	*($3 + [112]) = $4
	$12 = *(($1 + [172]))
	*($3 + [256]) = $12
	$13 = (($3 + [56]) + [28])
	$16 = *($13)
	if ( ((uint_32)$16 >= (uint_32)*($14)) ){ goto $label$30 }
	*($16 + [8]) = $4
	*($16 + [16]) = $12
	*($3 + [280]) = [0]
	*($16) = $1
	*($13) = ($16 + [24])
	$1 = *($3 + [280])
	*($3 + [280]) = [0]
	if ( $1 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL $74($9, ($3 + [280]), ($3 + [112]), ($3 + [256]))
	$1 = *($3 + [280])
	*($3 + [280]) = [0]
	if ( ($1 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv($1)
	
.LABEL $label$28
	$1 = [0]
	$16 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($16, [10131])
	CALL eosio_assert($16, [9358])
	$16 = CALL db_next_i64(*($2 + [172]), ($3 + [112]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$31 }
	$1 = CALL $72(($3 + [16]), $16)
	
.LABEL $label$31
	CALL $75(($3 + [16]), $2)
	$2 = $1
	if ( $1 ){ goto $label$26 }
	
.LABEL $label$25
	$1 = CALL db_lowerbound_i64(*($3 + [56]), *((($3 + [56]) + [8])), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$32 }
	$8 = (($3 + [16]) + [24])
	$14 = (($3 + [112]) + [142])
	$2 = CALL $72(($3 + [56]), $1)
	$15 = ($3 + [292])
	$11 = ($3 + [300])
	$17 = (($3 + [280]) + [28])
	$5 = ($3 + [316])
	
.LOOP $label$33:
	$4 = *($0)
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL eosio_assert5()), [8988])
	*(($1 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [144]) = (int_64)0
	*($1 + [152]) = (int_64)0
	*($1 + [168]) = ($3 + [16])
	*($1) = *($2)
	*($1 + [8]) = *($2 + [8])
	*($1 + [24]) = *(($2 + [24]))
	*($1 + [16]) = *($2 + [16])
	*($1 + [32]) = *($2 + [32])
	*($1 + [33]) = *($2 + [33])
	*(($1 + [72])) = *(($2 + [72]))
	*(($1 + [64])) = *(($2 + [64]))
	*(($1 + [56])) = *(($2 + [56]))
	*($1 + [48]) = *($2 + [48])
	*(($1 + [104])) = *(($2 + [104]))
	*(($1 + [96])) = *(($2 + [96]))
	*(($1 + [88])) = *(($2 + [88]))
	*($1 + [80]) = *($2 + [80])
	*(($1 + [136])) = *(($2 + [136]))
	*(($1 + [128])) = *(($2 + [128]))
	*(($1 + [120])) = *(($2 + [120]))
	*($1 + [112]) = *($2 + [112])
	*($1 + [152]) = *(($2 + [152]))
	*($1 + [144]) = *($2 + [144])
	*($1 + [160]) = *($2 + [160])
	*((($3 + [256]) + [8])) = $14
	*($3 + [260]) = ($3 + [112])
	*($3 + [256]) = ($3 + [112])
	*($3 + [272]) = ($3 + [256])
	*((($3 + [280]) + [8])) = ($1 + [16])
	*($15) = ($1 + [32])
	*((($3 + [280]) + [16])) = ($1 + [33])
	*($11) = ($1 + [48])
	*((($3 + [280]) + [24])) = ($1 + [80])
	*($17) = ($1 + [112])
	*((($3 + [280]) + [32])) = ($1 + [144])
	*($5) = ($1 + [160])
	$16 = ($1 + [8])
	*($3 + [284]) = $16
	*($3 + [280]) = $1
	CALL $73(($3 + [280]), ($3 + [272]))
	$6 = *($1)
	$18 = ((int_64)$6 ^ (int_64)-1)
	$12 = (($3 + [16]) + [8])
	*($1 + [172]) = CALL db_store_i64(*($12), (int_64)-4994024801686257664, $4, $18, ($3 + [112]), [142])
	$13 = (($3 + [16]) + [16])
	if ( ((uint_64)*($13) > (uint_64)$18) ){ goto $label$34 }
	*($13) = ( (int_64)-2 ? (int_64))((int_64)0 - $6) : (uint_64)($6 <= (int_64)2) )
	
.LABEL $label$34
	$6 = *($12)
	$18 = *($1)
	*($3 + [280]) = *($16)
	*($1 + [176]) = CALL db_idx64_store($6, (int_64)-4994024801686257664, $4, ((int_64)$18 ^ (int_64)-1), ($3 + [280]))
	*($3 + [280]) = $1
	$4 = ((int_64)*($1) ^ (int_64)-1)
	*($3 + [112]) = $4
	$12 = *(($1 + [172]))
	*($3 + [256]) = $12
	$13 = (($3 + [16]) + [28])
	$16 = *($13)
	if ( ((uint_32)$16 >= (uint_32)*((($3 + [16]) + [32]))) ){ goto $label$37 }
	*($16 + [8]) = $4
	*($16 + [16]) = $12
	*($3 + [280]) = [0]
	*($16) = $1
	*($13) = ($16 + [24])
	$1 = *($3 + [280])
	*($3 + [280]) = [0]
	if ( $1 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL $74($8, ($3 + [280]), ($3 + [112]), ($3 + [256]))
	$1 = *($3 + [280])
	*($3 + [280]) = [0]
	if ( ($1 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv($1)
	
.LABEL $label$35
	$1 = [0]
	$16 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($16, [10131])
	CALL eosio_assert($16, [9358])
	$16 = CALL db_next_i64(*($2 + [172]), ($3 + [112]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$38 }
	$1 = CALL $72(($3 + [56]), $16)
	
.LABEL $label$38
	CALL $75(($3 + [56]), $2)
	$2 = $1
	if ( $1 ){ goto $label$33 }
	
.LABEL $label$32
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$2 }
	$16 = ($3 + [44])
	$1 = *($16)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$39:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$40 }
	CALL _ZdlPv($2)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$39 }
	$1 = *(($3 + [40]))
	goto $label$3 
	
.LABEL $label$7
	$1 = $0
	
.LABEL $label$6
	*($16) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$0 = *($3 + [304])
	if ( ($0 == 0) ){ goto $label$1 }
	$16 = ($3 + [308])
	$1 = *($16)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$42 }
	
.LOOP $label$43:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$44 }
	CALL _ZdlPv($2)
	
.LABEL $label$44
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$43 }
	$1 = *(($3 + [304]))
	goto $label$41 
	
.LABEL $label$42
	$1 = $0
	
.LABEL $label$41
	*($16) = $0
	CALL _ZdlPv($1)
	$global$0 = ($3 + [320])
	return 
	
.LABEL $label$4
	$1 = $0
	
.LABEL $label$3
	*($16) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	$16 = ($3 + [84])
	$1 = *($16)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$46 }
	
.LOOP $label$47:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$48 }
	CALL _ZdlPv($2)
	
.LABEL $label$48
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$47 }
	$1 = *(($3 + [80]))
	goto $label$45 
	
.LABEL $label$46
	$1 = $0
	
.LABEL $label$45
	*($16) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [320])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [688])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [160]), [0], [176])
	*(($4 + [184])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	*($4 + [336]) = ($4 + [144])
	*($4 + [516]) = (($4 + [160]) | [8])
	*($4 + [520]) = ($4 + [176])
	*($4 + [524]) = ($4 + [192])
	*($4 + [528]) = ($4 + [193])
	*($4 + [532]) = ($4 + [208])
	*($4 + [536]) = ($4 + [240])
	*($4 + [540]) = ($4 + [272])
	*($4 + [544]) = ($4 + [304])
	*($4 + [548]) = ($4 + [320])
	*($4 + [512]) = ($4 + [160])
	CALL $61(($4 + [512]), ($4 + [336]))
	$3 = *($4 + [152])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [144])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	CALL memcpy(($4 + [336]), ($4 + [160]), [176])
	CALL memcpy(($4 + [512]), ($4 + [336]), [176])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [512])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	$global$0 = ($4 + [688])
	return [1]
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1 + [8]))
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [148]) = $2
	*($4 + [144]) = $2
	*($4 + [152]) = ($2 + $7)
	*($4 + [216]) = ($4 + [144])
	*($4 + [40]) = ($4 + [160])
	CALL $67(($4 + [40]), ($4 + [216]))
	$3 = *($4 + [152])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [144])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	CALL $27(($4 + [40]), $0, $1, ($4 + [8]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	$8 = *($4 + [160])
	*($4 + [208]) = *($4 + [168])
	*($4 + [216]) = $8
	*($4 + [200]) = $1
	*($4 + [192]) = $0
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [216])), (int_32 ($4 + [208])), (int_32 ($4 + [200])), (int_32 ($4 + [192])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $14($0, $1, $2, $3, $4)
}

int_32 .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	*(($5 = (($4 + [112]) + [8]))) = *(($3 + [8]))
	*($4 + [112]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [128]) + [8])) = $3
	$2 = *($4 + [112])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [128]) = $2
	*($4 + [104]) = [10065]
	*($4 + [108]) = CALL $144([10065])
	*($4 + [48]) = *($4 + [104])
	CALL $5(($0 + [32]), ($4 + [48]))
	*($4 + [96]) = [10072]
	*($4 + [100]) = CALL $144([10072])
	*($4 + [40]) = *($4 + [96])
	CALL $5(($0 + [40]), ($4 + [40]))
	*($4 + [88]) = [10080]
	*($4 + [92]) = CALL $144([10080])
	*($4 + [32]) = *($4 + [88])
	CALL $5(($0 + [48]), ($4 + [32]))
	*($4 + [80]) = [10092]
	*($4 + [84]) = CALL $144([10092])
	*($4 + [24]) = *($4 + [80])
	CALL $5(($0 + [56]), ($4 + [24]))
	*($4 + [72]) = [10100]
	*($4 + [76]) = CALL $144([10100])
	*($4 + [16]) = *($4 + [72])
	CALL $5(($0 + [64]), ($4 + [16]))
	*($4 + [64]) = [10113]
	*($4 + [68]) = CALL $144([10113])
	*($4 + [8]) = *($4 + [64])
	CALL $5(($0 + [72]), ($4 + [8]))
	*($4 + [56]) = [10120]
	*($4 + [60]) = CALL $144([10120])
	*($4) = *($4 + [56])
	CALL $5(($0 + [80]), $4)
	*($0 + [92]) = [124]
	*($0 + [88]) = [500]
	*($0 + [96]) = [200]
	$global$0 = ($4 + [144])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9039])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9039])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $135 (int_32 $0)
{
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9039])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [52]) = $0
	*($5) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $91(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = $1
	*($5 + [60 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10061])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $40($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8983])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4994024801686257664, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $72($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [10131])
	CALL eosio_assert($5, [9358])
	$5 = [0]
	$6 = CALL db_next_i64(*($1 + [172]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $72($0, $6)
	
.LABEL $label$3
	CALL $75($0, $1)
	$4 = ($4 + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$1 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)7869342385915473920, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $35($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [10131])
	CALL eosio_assert($5, [9358])
	$5 = [0]
	$6 = CALL db_next_i64(*($1 + [52]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $35($0, $6)
	
.LABEL $label$3
	CALL $39($0, $1)
	$4 = ($4 + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$1 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6497942320245243904, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $83($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [10131])
	CALL eosio_assert($5, [9358])
	$5 = [0]
	$6 = CALL db_next_i64(*($1 + [16]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $83($0, $6)
	
.LABEL $label$3
	CALL $88($0, $1)
	$4 = ($4 + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$1 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8983])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8983])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8983])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8983])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[19]), [8983])
	CALL memcpy($3, *($4 + [4]), [20])
	*($4 + [4]) = (*($4 + [4]) + [20])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8983])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-6497942333781180416, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $80($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$5 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($5, [10131])
	CALL eosio_assert($5, [9358])
	$5 = [0]
	$6 = CALL db_next_i64(*($1 + [124]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $80($0, $6)
	
.LABEL $label$3
	CALL $47($0, $1)
	$4 = ($4 + [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$1 = $5
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8983])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8983])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8983])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9091])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9142])
	CALL eosio_assert([1], [9039])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($4 | [8]), $6, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $106(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7235159550150574080
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7235159550150574080
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $105(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4 + [4])
	*($1 + [48]) = *($5)
	$6 = *($4)
	*($1) = *($6 + [8])
	$7 = (int_64)1
	*($1 + [40]) = (int_64)1
	$8 = ($1 + [8])
	$9 = ($1 + [48])
	$10 = ($1 + [40])
	$4 = *($0)
	if ( (*($5) == 0) ){ goto $label$2 }
	*($8) = (int_64)1
	$11 = *($6 + [112])
	$7 = (int_64)0
	$12 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$11 = (int_64)0
	*($8) = (int_64)0
	$12 = *($6 + [112])
	
.LABEL $label$1
	*($1 + [24]) = $7
	*($1 + [16]) = $11
	*($1 + [32]) = $12
	$5 = $2
	$2 = ($5 + [-64])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($5 + [-15])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	$8 = ($1 + [16])
	*($3 + [40]) = $8
	$5 = ($1 + [24])
	*($3 + [44]) = $5
	$6 = ($1 + [32])
	*($3 + [48]) = $6
	*($3 + [52]) = $10
	*($3 + [56]) = $9
	CALL $69(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)-4455901301129084928, *(*($0 + [8])), $7, $2, [49])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$7 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [32]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*(($1 + [8])) << (int_64)56)) | (int_64)((uint_64)*($8) / (uint_64)(int_64)100000))
	*($1 + [60]) = CALL db_idx64_store($7, (int_64)-4455901301129084928, $11, $12, ($3 + [32]))
	$7 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [32]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($5) << (int_64)56)) | (int_64)((uint_64)*($6) / (uint_64)(int_64)100000))
	*(($1 + [64])) = CALL db_idx64_store($11, (int_64)-4455901301129084927, $7, $12, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9483])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [8909])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $51($0, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$0), [8909])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9201])
	CALL $103($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $104($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_64 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	$2 = CALL $144([8286])
	if ( ($2 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9638])
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$4 = *(($2 + [8285]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	$5 = (int_64)10
	if ( ((int_64)*($1) == (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)10
	if ( ((int_64)*($1) == (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = CALL $144([8434])
	if ( ($2 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9638])
	goto $label$10 
	
.LABEL $label$11
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = (int_64)0
	
.LOOP $label$12:
	$4 = *(($2 + [8433]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$13
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$12 }
	$5 = (int_64)100
	if ( ((int_64)*($1) == (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$1 }
	goto $label$8 
	
.LABEL $label$9
	$5 = (int_64)100
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$1 }
	
.LABEL $label$8
	$2 = CALL $144([8439])
	if ( ($2 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9638])
	goto $label$16 
	
.LABEL $label$17
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (int_64)0
	
.LOOP $label$18:
	$4 = *(($2 + [8438]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$19
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$18 }
	$5 = (int_64)10000
	if ( ((int_64)*($1) != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$14 }
	goto $label$1 
	
.LABEL $label$15
	$5 = (int_64)10000
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$1 }
	
.LABEL $label$14
	$2 = CALL $144([8444])
	if ( ($2 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [9638])
	goto $label$22 
	
.LABEL $label$23
	if ( ($2 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$3 = (int_64)0
	
.LOOP $label$24:
	$4 = *(($2 + [8443]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$25
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$24 }
	$5 = (int_64)1000000
	if ( ((int_64)*($1) == (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$1 }
	goto $label$20 
	
.LABEL $label$21
	$5 = (int_64)1000000
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$1 }
	
.LABEL $label$20
	CALL eosio_assert([0], [8507])
	$5 = (int_64)2147483647
	
.LABEL $label$1
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([24])
	CALL $99($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [16])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $100(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [9045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9091])
	*($1 + [8]) = (*(*(*($3) + [4]) + [8]) + [1])
	$5 = *($1)
	CALL eosio_assert([1], [9142])
	CALL eosio_assert([1], [9039])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9039])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL db_update_i64(*($1 + [16]), $2, $4, [12])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [12]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8983])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [8983])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $100(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [172]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9590])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4994024801686257664)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9536])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9536])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $72(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [144]) = (int_64)0
	*($3 + [152]) = (int_64)0
	*($3 + [168]) = $1
	CALL $98(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = ((int_64)*($3) ^ (int_64)-1)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [120]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [80])
	*($3 + [56]) = ($5 + [112])
	CALL $43(($3 + [32]), ($3 + [24]))
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $95(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10180]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10184])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10180]) = [1]
	$2 = ($2 << [16])
	*([0] + [10184]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10184])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10184]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10180]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10180]) = [1]
	$3 = ($3 << [16])
	*([0] + [10184]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10184])
	
.LABEL $label$10
	*([0] + [10184]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $149($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18589])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $134())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $146($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $147 (int_32 $0)
{
	return CALL $148([10188], $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $147($1)
	
.LABEL $label$2
	*(CALL $134()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $147(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $150($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $138($3, (int_64)0)
	$4 = CALL $140($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $139($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $134()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $139($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18689]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $138($0, (int_64)0)
	*(CALL $134()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $139($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $139($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $139($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $139($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18689])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $139($0)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $139($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $139($0)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $139($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18689]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $138($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18689]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18689]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $139($0) + [18689]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $134()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $134()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $134()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8960])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([192])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = (int_64)0
	*($5 + [168]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [33])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [112])
	*($3 + [72]) = ($5 + [144])
	*($3 + [76]) = ($5 + [160])
	CALL $61(($3 + [40]), ($3 + [32]))
	*($5 + [176]) = [-1]
	*($5 + [172]) = $1
	*($3 + [32]) = $5
	$6 = ((int_64)*($5) ^ (int_64)-1)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9039])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9039])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9039])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9039])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[19]), [9039])
	CALL memcpy(*($4 + [4]), $3, [20])
	*($4 + [4]) = (*($4 + [4]) + [20])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9039])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9039])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9483])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4455901301129084928, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4455901301129084927, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [47]) = $2
	$4 = *($1 + [8])
	$6 = *(($0 + [28]))
	$5 = *($0 + [24])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$5 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($7 + [52])) == (int_32)$0), [8909])
	*($3 + [36]) = $7
	*($3 + [32]) = $0
	if ( $7 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4455901301129084928, $4)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $68($0, $2)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$0), [8909])
	*($3 + [36]) = $7
	*($3 + [32]) = $0
	
.LABEL $label$3
	$4 = *($0)
	*($3 + [16]) = $1
	*($3 + [12]) = ($3 + [47])
	*($3 + [8]) = ($3 + [32])
	CALL $77($0, $7, $4, ($3 + [8]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = $0
	
.LABEL $label$1
	$4 = *($0)
	*($3 + [8]) = $1
	*($3 + [12]) = ($3 + [47])
	CALL $78(($3 + [24]), $0, $4, ($3 + [8]))
	$global$0 = ($3 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($5 = $4) + [48]) = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [9045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9091])
	*($5 + [32]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($1 + [8]) << (int_64)56)) | (int_64)((uint_64)*($1 + [16]) / (uint_64)(int_64)100000))
	*($5 + [40]) = ((int_64))((int_64)-72057594037927936 - ((int_64)*($1 + [24]) << (int_64)56)) | (int_64)((uint_64)*($1 + [32]) / (uint_64)(int_64)100000))
	$6 = *($1)
	*($5 + [24]) = $6
	$8 = *($3 + [4])
	$9 = *($8)
	$7 = *(*($3) + [4])
	if ( ((int_32)*($7 + [48]) != (int_32)$9) ){ goto $label$2 }
	$10 = ((int_64)*($7 + [40]) + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	*($1 + [48]) = $9
	$10 = (int_64)1
	
.LABEL $label$1
	$11 = ($1 + [32])
	$12 = ($1 + [24])
	$9 = ($1 + [16])
	$13 = ($1 + [8])
	*($1 + [40]) = $10
	$14 = ($1 + [40])
	if ( (*($8) == 0) ){ goto $label$4 }
	if ( ((uint_64)*($7 + [8]) >= (uint_64)$10) ){ goto $label$3 }
	*($13) = $10
	*($9) = *(*($3 + [8]) + [112])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_64)*($7 + [24]) >= (uint_64)$10) ){ goto $label$3 }
	*($12) = $10
	*($11) = *(*($3 + [8]) + [112])
	
.LABEL $label$3
	$7 = ($0 + [36])
	CALL eosio_assert([1], [9142])
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-15])
	*($5 + [56]) = ($5 + [8])
	*($5 + [68]) = $13
	*($5 + [72]) = $9
	*($5 + [76]) = $12
	*($5 + [80]) = $11
	*($5 + [84]) = $14
	*($5 + [64]) = $1
	*($5 + [88]) = ($1 + [48])
	CALL $69(($5 + [64]), ($5 + [56]))
	CALL db_update_i64(*($1 + [56]), $2, $3, [49])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [68]) = $1
	*($5 + [64]) = $0
	*($5 + [76]) = $1
	*($5 + [72]) = ($5 + [32])
	*($5 + [80]) = ($5 + [24])
	*($5 + [84]) = ($5 + [48])
	*($5 + [56]) = ($5 + [64])
	CALL $90(($5 + [56]), $7, ($7 + [1]))
	$global$0 = ($5 + [96])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $132($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9388])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [9433])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9483])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

int_32 .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = CALL $144([8286])
	if ( ($2 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9638])
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$6:
	$4 = *(($2 + [8285]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	if ( ((int_64)*($0) != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)4)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)*($0) == (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = CALL $144([8434])
	if ( ($2 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9638])
	goto $label$11 
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = (int_64)0
	
.LOOP $label$13:
	$4 = *(($2 + [8433]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$14
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	if ( ((int_64)*($0) == (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($0) == (int_64)8) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = CALL $144([8439])
	if ( ($2 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [9638])
	goto $label$17 
	
.LABEL $label$18
	if ( ($2 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$3 = (int_64)0
	
.LOOP $label$19:
	$4 = *(($2 + [8438]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$20
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$19 }
	if ( ((int_64)*($0) != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$15 }
	goto $label$8 
	
.LABEL $label$16
	if ( ((int_64)*($0) == (int_64)8) ){ goto $label$8 }
	
.LABEL $label$15
	$2 = CALL $144([8444])
	if ( ($2 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9638])
	goto $label$23 
	
.LABEL $label$24
	if ( ($2 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$3 = (int_64)0
	
.LOOP $label$25:
	$4 = *(($2 + [8443]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$26
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$25 }
	if ( ((int_64)*($0) != (int_64)((int_64)((int_64)$3 << (int_64)8) | (int_64)8)) ){ goto $label$21 }
	goto $label$8 
	
.LABEL $label$22
	if ( ((int_64)*($0) == (int_64)8) ){ goto $label$8 }
	
.LABEL $label$21
	CALL eosio_assert([0], [8507])
	return [1]
	
.LABEL $label$8
	CALL eosio_assert(((uint_64)$1 > (uint_64)(int_64)1545019199), [8449])
	CALL eosio_assert((uint_64)($1 <= (int_64)1545321601), [8481])
	return [1]
	
.LABEL $label$1
	CALL eosio_assert(((uint_64)$1 > (uint_64)(int_64)1545321599), [8398])
	CALL eosio_assert((uint_64)($1 <= (int_64)1545667201), [8419])
	return [1]
}

int_64 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	if ( $3 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $51($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [8909])
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	*((($2 + [24]) + [16])) = *(($3 + [16]))
	*((($2 + [24]) + [8])) = *(($3 + [8]))
	*($2 + [24]) = *($3)
	*($2 + [24]) = ((int_64)*($2 + [24]) + (int_64)1)
	CALL $87($1, ($2 + [24]), *($0))
	$4 = *($2 + [24])
	$global$0 = ($2 + [48])
	return $4
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [52]) = $1
	*($3) = (int_64)0
	CALL $89(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $70(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [8909])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4455901497821387904, (int_64)-4455901497821387904)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $53($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [8909])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9201])
	CALL $92($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $93($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_64 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $144([8286])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9638])
	goto $label$5 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$5 = *(($3 + [8285]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	if ( ((int_64)*($1) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($1) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $144([8434])
	if ( ($3 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9638])
	goto $label$12 
	
.LABEL $label$13
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = (int_64)0
	
.LOOP $label$14:
	$5 = *(($3 + [8433]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$15
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$14 }
	if ( ((int_64)*($1) == (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = CALL $144([8439])
	if ( ($3 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9638])
	goto $label$18 
	
.LABEL $label$19
	if ( ($3 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$4 = (int_64)0
	
.LOOP $label$20:
	$5 = *(($3 + [8438]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$21
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$20 }
	if ( ((int_64)*($1) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$16 }
	goto $label$9 
	
.LABEL $label$17
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$9 }
	
.LABEL $label$16
	$3 = CALL $144([8444])
	if ( ($3 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [9638])
	goto $label$24 
	
.LABEL $label$25
	if ( ($3 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$4 = (int_64)0
	
.LOOP $label$26:
	$5 = *(($3 + [8443]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$27
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$26 }
	if ( ((int_64)*($1) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$22 }
	goto $label$9 
	
.LABEL $label$23
	if ( ((int_64)*($1) == (int_64)8) ){ goto $label$9 }
	
.LABEL $label$22
	CALL eosio_assert([0], [8507])
	*($2 + [40]) = (int_64)0
	goto $label$1 
	
.LABEL $label$9
	*($2 + [24]) = [8311]
	*($2 + [28]) = CALL $144([8311])
	*($2 + [16]) = *($2 + [24])
	CALL $5(($2 + [40]), ($2 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($2 + [32]) = [8299]
	*($2 + [36]) = CALL $144([8299])
	*($2 + [8]) = *($2 + [32])
	CALL $5(($2 + [40]), ($2 + [8]))
	
.LABEL $label$1
	$4 = *($2 + [40])
	$global$0 = ($2 + [48])
	return $4
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8909])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $101($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8909])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	$5 = *($1)
	if ( ($5 & [1]) ){ goto $label$2 }
	$6 = uint_32($5 >> [1])
	$5 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($1 + [4])
	$5 = *($1 + [8])
	
.LABEL $label$1
	$7 = ($0 + [92])
	$0 = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = [0]
	$8 = (*($7) & [255])
	
.LOOP $label$4:
	$0 = ($0 + ((int_32)*($5) == (int_32)$8))
	$5 = ($5 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$4 }
	$0 = ((int_32)$0 == (int_32)[1])
	
.LABEL $label$3
	CALL eosio_assert($0, [9736])
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)0
	*($4) = [0]
	*($4 + [47]) = [1]
	$5 = CALL $3($1, ($4 + [48]), $7, $4, ($4 + [47]))
	$6 = *($4 + [48])
	CALL eosio_assert(((int_32)( *($4 + [52]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [9749])
	*($2) = CALL $126(($4 + [48]), [0], [10])
	CALL $120($4, $1, ($5 + [1]), [-1], $1)
	if ( (*($4 + [48]) & [1]) ){ goto $label$6 }
	*($4 + [48]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($4 + [56]))) = [0]
	*($4 + [52]) = [0]
	
.LABEL $label$5
	CALL $122(($4 + [48]), [0])
	*(($6 = (($4 + [48]) + [8]))) = *(($4 + [8]))
	*($4 + [48]) = *($4)
	$5 = *($4 + [48])
	CALL eosio_assert(((int_32)( *($4 + [52]) ? uint_32($5 >> [1]) : ($5 & [1]) ) != (int_32)[0]), [9760])
	$5 = *($4 + [48])
	CALL eosio_assert(((int_32)( *($4 + [52]) ? uint_32($5 >> [1]) : ($5 & [1]) ) == (int_32)[40]), [8238])
	CALL $2(($4 + [48]), $4, [20])
	*(($3 + [24])) = *(($4 + [24]))
	*(($3 + [16])) = *(($4 + [16]))
	*(($3 + [8])) = *($4 + [8])
	*($3) = *($4)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$7
	$global$0 = ($4 + [64])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($1 + [8])
	$3 = CALL $144([8286])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9638])
	goto $label$5 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$5 = *(($3 + [8285]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	if ( ((int_64)*($2) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($2) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $144([8434])
	if ( ($3 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9638])
	goto $label$12 
	
.LABEL $label$13
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$4 = (int_64)0
	
.LOOP $label$14:
	$5 = *(($3 + [8433]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$15
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$14 }
	if ( ((int_64)*($2) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_64)*($2) == (int_64)8) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = CALL $144([8439])
	if ( ($3 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9638])
	goto $label$19 
	
.LABEL $label$20
	if ( ($3 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$4 = (int_64)0
	
.LOOP $label$21:
	$5 = *(($3 + [8438]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$22
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$21 }
	if ( ((int_64)*($2) != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( ((int_64)*($2) == (int_64)8) ){ goto $label$16 }
	
.LABEL $label$17
	$3 = CALL $144([8444])
	if ( ($3 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9638])
	goto $label$25 
	
.LABEL $label$26
	if ( ($3 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$4 = (int_64)0
	
.LOOP $label$27:
	$5 = *(($3 + [8443]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9683])
	
.LABEL $label$28
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$27 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)8)
	goto $label$23 
	
.LABEL $label$24
	$4 = (int_64)8
	
.LABEL $label$23
	CALL eosio_assert(((int_64)*($2) == (int_64)$4), [9773])
	goto $label$1 
	
.LABEL $label$16
	CALL eosio_assert([1], [9773])
	goto $label$1 
	
.LABEL $label$9
	CALL eosio_assert([1], [9773])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([1], [9773])
	
.LABEL $label$1
	$5 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$29 }
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$4 = $6
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$33 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$5 = [0]
	
.LABEL $label$29
	CALL eosio_assert($5, [9811])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $86($0, $2)), [9828])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $144($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $121($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $127 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $129($1, $0, [8363])
	CALL $130()
	(unreachable)
}