(data (i32.const 4) "`f\00\00")
(data (i32.const 16) "\803\e1\01\00\00\00\00")
(data (i32.const 32) "onerror\00")
(data (i32.const 48) "eosio\00")
(data (i32.const 64) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "auditor account does not exist\00")
(data (i32.const 176) "the global table does not exist\00")
(data (i32.const 208) "cannot pass end iterator to modify\00")
(data (i32.const 256) "object passed to modify is not in multi_index\00")
(data (i32.const 304) "cannot modify objects in table of another contract\00")
(data (i32.const 368) "updater cannot change primary key when modifying an object\00")
(data (i32.const 432) "write\00")
(data (i32.const 448) "error reading iterator\00")
(data (i32.const 480) "get\00")
(data (i32.const 496) "cannot increment end iterator\00")
(data (i32.const 528) "the item not exist\00")
(data (i32.const 560) "item has been audited aready\00")
(data (i32.const 592) "item expired\00")
(data (i32.const 608) "cannot pass end iterator to erase\00")
(data (i32.const 656) "object passed to erase is not in multi_index\00")
(data (i32.const 704) "cannot erase objects in table of another contract\00")
(data (i32.const 768) "attempt to remove object that was not in multi_index\00")
(data (i32.const 832) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 896) "invalid symbol name\00")
(data (i32.const 928) "item cannot be deleted after audited\00")
(data (i32.const 976) "the name of item has more than 256 bytes\00")
(data (i32.const 1024) "receiver account does not exist\00")
(data (i32.const 1056) "invalid fund\00")
(data (i32.const 1072) "invalid fund quantity\00")
(data (i32.const 1104) "inconsistent asset\00")
(data (i32.const 1136) "invalid asset\00")
(data (i32.const 1152) "invalid deadline\00")
(data (i32.const 1184) "item can not be modified after audited\00")
(data (i32.const 1232) "cannot create objects in table of another contract\00")
(data (i32.const 1296) "the item name aready exist\00")
(data (i32.const 9728) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_get_i64" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN10medishares3addEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y" (func $6))
(export "_ZN10medishares6modifyEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y" (func $8))
(export "_ZN10medishares5eraseEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $10))
(export "_ZN10medishares5auditEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh" (func $12))
(export "_ZN10medishares10setauditorEy" (func $14))
(export "malloc" (func $43))
(export "free" (func $46))
(export "memcmp" (func $55))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $56 $6 $14 $10 $12 $8)



void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $47(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $53($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $48($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $48($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $21($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $52($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $47($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $52($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $48($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $49($7)
	return (unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [320])
	*([0] + [4]) = $13
	$2 = *($1)
	CALL $54(($13 + [144]), ($1 + [8]))
	*(($5 = (($13 + [112]) + [24]))) = *(($1 + [56]))
	*(($6 = (($13 + [112]) + [16]))) = *(($1 + [48]))
	*($13 + [120]) = *(($1 + [40]))
	*($13 + [112]) = *($1 + [32])
	$3 = *($1 + [64])
	*(($7 = (($13 + [88]) + [16]))) = *(($1 + [88]))
	*(($8 = (($13 + [88]) + [8]))) = *(($1 + [80]))
	*($13 + [88]) = *($1 + [72])
	*(($9 = (($13 + [64]) + [16]))) = *(($1 + [112]))
	*(($10 = (($13 + [64]) + [8]))) = *(($1 + [104]))
	*($13 + [64]) = *($1 + [96])
	*(($11 = (($13 + [40]) + [16]))) = *(($1 + [136]))
	*(($12 = (($13 + [40]) + [8]))) = *(($1 + [128]))
	*($13 + [40]) = *($1 + [120])
	$4 = *($1 + [144])
	*((($13 + [248]) + [16])) = *($11)
	*((($13 + [248]) + [8])) = *($12)
	*((($13 + [224]) + [16])) = *($9)
	*((($13 + [224]) + [8])) = *($10)
	*($13 + [248]) = *($13 + [40])
	*($13 + [224]) = *($13 + [64])
	*((($13 + [200]) + [16])) = *($7)
	*((($13 + [200]) + [8])) = *($8)
	*($13 + [200]) = *($13 + [88])
	*((($13 + [160]) + [24])) = *($5)
	*((($13 + [160]) + [16])) = *($6)
	*($13 + [168]) = *($13 + [120])
	*($13 + [160]) = *($13 + [112])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $54(($13 + [304]), ($13 + [144]))
	*(($5 = (($13 + [272]) + [24]))) = *((($13 + [160]) + [24]))
	*(($6 = (($13 + [272]) + [16]))) = *((($13 + [160]) + [16]))
	*($13 + [280]) = *($13 + [168])
	*($13 + [272]) = *($13 + [160])
	*(($13 + [24])) = *($5)
	*(($13 + [16])) = *($6)
	*($13) = *($13 + [272])
	*($13 + [8]) = *($13 + [280])
	CALL void $0((int_32 $2), (int_64 ($13 + [304])), (int_32 $13), (int_32 $3), (int_64 ($13 + [200])), (int_32 ($13 + [224])), (int_32 ($13 + [248])), (int_32 $4), (int_64 $1))
	if ( ((*($13 + [304]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($13 + [312]))
	
.LABEL $label$2
	if ( ((*($13 + [144]) & [1]) == 0) ){ goto $label$3 }
	CALL $48(*($13 + [152]))
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [320])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0) = (int_64)1
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [80]) = (int_64)0
	$2 = [0]
	*(($0 + [16])) = [0]
	*(($3 = ($0 + [88]))) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [896])
	*(($2 = ($0 + [112]))) = (int_64)1397703940
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [832])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [896])
	*(($2 = ($0 + [136]))) = (int_64)1397703940
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [832])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [896])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [480])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $22($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [128])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $54($5, ($1 + [8]))
	$3 = *($1 + [20])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $54(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 ($5 + [16])), (int_32 ($3 & [255])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $48(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $47([176])
	$4 = CALL $29($6)
	*($6 + [164]) = $0
	CALL $30(($8 + [32]), $4)
	*($6 + [168]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [168])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $48(*(($4 + [16])))
	
.LABEL $label$10
	CALL $48($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $47($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $53($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $48($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*(($1 + [164])) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	*($1 + [160]) = [1]
	$2 = *($1)
	CALL eosio_assert([1], [368])
	$4 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [137])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $27($7, $1)
	CALL db_update_i64(*(($1 + [168])), (int_64)0, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*(($1 + [164])) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$2 = *($1)
	$5 = CALL current_time()
	*($1 + [160]) = [2]
	*($1 + [152]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [368])
	$4 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [137])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $27($7, $1)
	CALL db_update_i64(*(($1 + [168])), (int_64)0, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $28($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [156]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [164])) == (int_32)$0), [656])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [704])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [768])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $48(*(($4 + [16])))
	
.LABEL $label$7
	CALL $48($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $48(*(($4 + [16])))
	
.LABEL $label$10
	CALL $48($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [168])))
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $48 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $44([1324], $0)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$3 = *($0 + [4])
	*($1) = *(*(*($3) + [4]))
	$2 = *($0)
	CALL $50(($1 + [8]), *($3 + [4]))
	$5 = *($3 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [56])) = *(($5 + [24]))
	*(($1 + [48])) = *(($5 + [16]))
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [64]) = *(*($3 + [12]))
	*($1 + [72]) = *(*($3 + [16]))
	$5 = *($3 + [20])
	*($1 + [80]) = *($5)
	*(($1 + [96])) = *(($5 + [16]))
	*(($1 + [88])) = *(($5 + [8]))
	$5 = *($3 + [24])
	*($1 + [104]) = *($5)
	*(($1 + [120])) = *(($5 + [16]))
	*(($1 + [112])) = *(($5 + [8]))
	$5 = *($3 + [28])
	*($1 + [128]) = *($5)
	*(($1 + [144])) = *(($5 + [16]))
	*(($1 + [136])) = *(($5 + [8]))
	*($1 + [152]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = *($3 + [32])
	*($1 + [160]) = [0]
	*($1 + [156]) = *($3)
	$3 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [137])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $27($6, $1)
	$4 = *($1)
	*($1 + [168]) = CALL db_store_i64(*($2 + [8]), (int_64)8526756653867991040, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [72]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [80]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [88]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$4 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [96]), *($2 + [4]), [8])
	$0 = (*($2 + [4]) + [8])
	*($2 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $0) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [104]), *($2 + [4]), [8])
	$0 = (*($2 + [4]) + [8])
	*($2 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $0) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [112]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [120]), *($2 + [4]), [8])
	$0 = (*($2 + [4]) + [8])
	*($2 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $0) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [128]), *($2 + [4]), [8])
	$0 = (*($2 + [4]) + [8])
	*($2 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $0) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [136]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($4 + [144]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	CALL $19(*($1), ($0 + [8]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($0 + [32]), *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $41(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9820])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9708])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9516]
	$1 = (((int_32)$2 * (int_32)[12]) + [9516])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9814]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9816])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9814]) = [1]
	$7 = ($7 << [16])
	*([0] + [9816]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9816])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9816]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9814]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9814]) = [1]
	$3 = ($3 << [16])
	*([0] + [9816]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9816])
	
.LABEL $label$8
	*([0] + [9816]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $45($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9728])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $47($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $48($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZN10medishares6modifyEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7, int_32 _ZN10medishares6modifyEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y, int_64 $9)
{
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	*($14 + [88]) = $5
	*($14 + [80]) = $9
	$13 = *($3)
	if ( ($13 & [1]) ){ goto $label$2 }
	$13 = uint_32($13 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$13 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($13 <= [257]), [976])
	CALL eosio_assert(CALL $fimport$11($5), [1024])
	$11 = [0]
	$12 = [0]
	if ( ((uint_64)((int_64)*($6) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$12 = [0]
	$13 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$4 }
	if ( ((uint_64)((int_64)*($7) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$5 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8)
	$12 = [0]
	$13 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$7 }
	if ( ((uint_64)((int_64)*($8) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$12 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$10
	$12 = [0]
	
.LABEL $label$3
	CALL eosio_assert($12, [1056])
	$5 = *($6)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$14 }
	$10 = *($7)
	if ( ((int_64)$5 > (int_64)$10) ){ goto $label$14 }
	$11 = ((int_64)$10 <= (int_64)*($8))
	
.LABEL $label$14
	CALL eosio_assert($11, [1072])
	$5 = *($7 + [16])
	CALL eosio_assert((((int_64)*($6 + [16]) == (int_64)$5) & ((int_64)$5 == (int_64)*($8 + [16]))), [1104])
	CALL eosio_assert(CALL $fimport$11(*($6 + [16])), [1136])
	$13 = [0]
	$12 = [0]
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)$9) ){ goto $label$15 }
	$12 = (uint_64)((int_64))($9 - ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) <= *([0] + [16]))
	
.LABEL $label$15
	CALL eosio_assert($12, [1152])
	*(($14 + [72])) = [0]
	*($14 + [56]) = (int_64)-1
	$5 = *($0)
	*($14 + [40]) = $5
	*($14 + [48]) = $1
	*($14 + [64]) = (int_64)0
	$12 = CALL db_lowerbound_i64($5, $1, (int_64)8526756653867991040, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$17 }
	$13 = CALL $23(($14 + [40]), $12)
	if ( ((int_64)*($13) == (int_64)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	CALL eosio_assert([1], [496])
	$13 = CALL db_next_i64(*($13 + [168]), ($14 + [8]))
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$18 }
	$13 = CALL $23(($14 + [40]), $13)
	if ( ((int_64)*($13) != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$19
	$12 = [1]
	goto $label$16 
	
.LABEL $label$18
	$13 = [0]
	
.LABEL $label$17
	$12 = [0]
	
.LABEL $label$16
	CALL eosio_assert($12, [528])
	CALL eosio_assert((*($13 + [160]) <= [2]), [1184])
	CALL require_auth(*($13 + [64]))
	*($14 + [12]) = $4
	*($14 + [8]) = $3
	*($14 + [20]) = $6
	*($14 + [24]) = $7
	*($14 + [28]) = $8
	*($14 + [16]) = ($14 + [88])
	*($14 + [32]) = ($14 + [80])
	CALL eosio_assert($12, [208])
	CALL $37(($14 + [40]), $13, ($14 + [8]))
	$7 = *($14 + [64])
	if ( ($7 == 0) ){ goto $label$21 }
	$3 = ($14 + [68])
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$24:
	$13 = ($13 + [-24])
	$6 = *($13)
	*($13) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL $48(*(($6 + [16])))
	
.LABEL $label$26
	CALL $48($6)
	
.LABEL $label$25
	if ( ((int_32)$7 != (int_32)$13) ){ goto $label$24 }
	$13 = *(($14 + [64]))
	goto $label$22 
	
.LABEL $label$23
	$13 = $7
	
.LABEL $label$22
	*($3) = $7
	CALL $48($13)
	
.LABEL $label$21
	*([0] + [4]) = ($14 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [192])
	*([0] + [4]) = $2
	*(($3 = $2) + [188]) = $0
	*($3 + [176]) = *($1)
	*($3 + [180]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $33(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [176])
	*($3 + [8]) = ($3 + [188])
	CALL $34(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $48(*(($3 + [40])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [192])
	return [1]
}

void .FUNC _ZN10medishares3addEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5, int_32 _ZN10medishares3addEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE11checksum256yRKN5eosio14extended_assetESB_SB_y, int_32 $7, int_64 $8)
{
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [160])
	*([0] + [4]) = $19
	*($19 + [112]) = $1
	*($19 + [104]) = $4
	*($19 + [96]) = $8
	$18 = *($2)
	if ( ($18 & [1]) ){ goto $label$2 }
	$18 = uint_32($18 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$18 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($18 <= [257]), [976])
	CALL eosio_assert(CALL $fimport$11($4), [1024])
	$16 = [0]
	$17 = [0]
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$4 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$17 = [0]
	$18 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$4 }
	if ( ((uint_64)((int_64)*($6) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$4 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$17 = [0]
	$18 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$7 }
	if ( ((uint_64)((int_64)*($7) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$4 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8)
	$18 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$17 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$10
	$17 = [0]
	
.LABEL $label$3
	CALL eosio_assert($17, [1056])
	$4 = *($5)
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$14 }
	$9 = *($6)
	if ( ((int_64)$4 > (int_64)$9) ){ goto $label$14 }
	$16 = ((int_64)$9 <= (int_64)*($7))
	
.LABEL $label$14
	CALL eosio_assert($16, [1072])
	$4 = *($6 + [16])
	CALL eosio_assert((((int_64)*($5 + [16]) == (int_64)$4) & ((int_64)$4 == (int_64)*($7 + [16]))), [1104])
	CALL eosio_assert(CALL $fimport$11(*($5 + [16])), [1136])
	$18 = [0]
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)$8) ){ goto $label$15 }
	$18 = (uint_64)((int_64))($8 - ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) <= *([0] + [16]))
	
.LABEL $label$15
	CALL eosio_assert($18, [1152])
	CALL require_auth($1)
	$17 = ($0 + [8])
	$16 = ($0 + [16])
	$18 = CALL db_lowerbound_i64(*($0 + [8]), *($16), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$18 <= (int_32)[-1]) ){ goto $label$17 }
	$18 = CALL $16($17, $18)
	*($19 + [92]) = $18
	*($19 + [88]) = $17
	CALL eosio_assert([1], [208])
	CALL eosio_assert(((int_32)*($18 + [32]) == (int_32)$17), [256])
	CALL eosio_assert(((int_64)*($17) == (int_64)CALL $fimport$2()), [304])
	*($18) = ((int_64)*($18) + (int_64)1)
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [432])
	CALL memcpy(($19 + [48]), $18, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) | [8]), ($18 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) + [16]), ($18 + [16]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) + [24]), ($18 + [24]), [8])
	CALL db_update_i64(*($18 + [36]), (int_64)0, ($19 + [48]), [32])
	$18 = ($0 + [24])
	if ( ((int_64)*($18) != (int_64)0) ){ goto $label$16 }
	*($18) = (int_64)1
	goto $label$16 
	
.LABEL $label$17
	*($19 + [92]) = [0]
	*($19 + [88]) = $17
	$4 = *($0)
	CALL eosio_assert(((int_64)*($17) == (int_64)CALL $fimport$2()), [1232])
	*(($18 = CALL $47([48])) + [32]) = $17
	*($18 + [8]) = (int_64)0
	*($18) = (int_64)1
	*($18 + [16]) = (int_64)0
	*($18 + [24]) = *($0)
	CALL eosio_assert([1], [432])
	CALL memcpy(($19 + [48]), $18, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) | [8]), ($18 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) + [16]), ($18 + [16]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($19 + [48]) + [24]), ($18 + [24]), [8])
	$12 = CALL db_store_i64(*($16), (int_64)7235159537265672192, $4, (int_64)0, ($19 + [48]), [32])
	*($18 + [36]) = $12
	$16 = ($0 + [24])
	if ( ((int_64)*($16) != (int_64)0) ){ goto $label$18 }
	*($16) = (int_64)1
	
.LABEL $label$18
	*($19 + [48]) = $18
	*($19 + [8]) = [0]
	*($19 + [128]) = $12
	$11 = ($0 + [36])
	$16 = *($11)
	if ( ((uint_32)$16 >= (uint_32)*(($0 + [40]))) ){ goto $label$20 }
	*($16 + [8]) = (int_64)0
	*($16 + [16]) = $12
	*($19 + [48]) = [0]
	*($16) = $18
	*($11) = ($16 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $18(($0 + [32]), ($19 + [48]), ($19 + [8]), ($19 + [128]))
	
.LABEL $label$19
	$16 = *($19 + [48])
	*($19 + [48]) = [0]
	if ( ($16 == 0) ){ goto $label$21 }
	CALL $48($16)
	
.LABEL $label$21
	*($19 + [92]) = $18
	*($19 + [88]) = $17
	
.LABEL $label$16
	*($19 + [64]) = (int_64)-1
	*($19 + [72]) = [0]
	$4 = *($19 + [112])
	$8 = *($0)
	*($19 + [48]) = $8
	*($19 + [56]) = $4
	*(($13 = ($19 + [76]))) = [0]
	*(($14 = ($19 + [80]))) = [0]
	$18 = CALL db_lowerbound_i64($8, $4, (int_64)8526756653867991040, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$22 }
	$10 = ($2 + [1])
	$16 = CALL $23(($19 + [48]), $18)
	$15 = ($2 + [4])
	
.LOOP $label$23:
	$18 = ($18 & [1])
	$18 = *($2)
	$17 = ($18 & [1])
	$18 = *($16 + [8])
	$11 = uint_32($18 >> [1])
	$12 = ( *(($16 + [12])) ? $11 : $17 )
	if ( ((int_32)$12 != (int_32)( *($15) ? uint_32($18 >> [1]) : $18 )) ){ goto $label$24 }
	$0 = (($16 + [8]) + [1])
	$18 = ( *(($2 + [8])) ? $10 : $18 )
	if ( ($17 == 0) ){ goto $label$26 }
	if ( ($12 == 0) ){ goto $label$25 }
	if ( CALL memcmp(( *(($16 + [16])) ? $0 : $17 ), $18, $12) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	if ( ($12 == 0) ){ goto $label$25 }
	$17 = ([0] - $11)
	
.LOOP $label$27:
	if ( ((int_32)*($0) != (int_32)*($18)) ){ goto $label$24 }
	$18 = ($18 + [1])
	$0 = ($0 + [1])
	$17 = ($17 + [1])
	if ( $17 ){ goto $label$27 }
	
.LABEL $label$25
	CALL eosio_assert([0], [1296])
	
.LABEL $label$24
	CALL eosio_assert([1], [496])
	$18 = CALL db_next_i64(*($16 + [168]), ($19 + [8]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$22 }
	$16 = CALL $23(($19 + [48]), $18)
	goto $label$23 
	
.LABEL $label$22
	$4 = *($19 + [112])
	*($19 + [12]) = $2
	*($19 + [16]) = $3
	*($19 + [28]) = $5
	*($19 + [32]) = $6
	*($19 + [8]) = ($19 + [88])
	*($19 + [20]) = ($19 + [112])
	*($19 + [24]) = ($19 + [104])
	*($19 + [36]) = $7
	*($19 + [40]) = ($19 + [96])
	*($19 + [152]) = $4
	CALL eosio_assert(((int_64)*($19 + [48]) == (int_64)CALL $fimport$2()), [1232])
	*($19 + [132]) = ($19 + [8])
	*($19 + [128]) = ($19 + [48])
	*($19 + [136]) = ($19 + [152])
	$18 = CALL $47([176])
	CALL $29($18)
	*($18 + [164]) = ($19 + [48])
	CALL $42(($19 + [128]), $18)
	*($19 + [144]) = $18
	$4 = *($18)
	*($19 + [128]) = $4
	$17 = *($18 + [168])
	*($19 + [124]) = $17
	$0 = *($13)
	if ( ((uint_32)$0 >= (uint_32)*($14)) ){ goto $label$29 }
	*($0 + [8]) = $4
	*($0 + [16]) = $17
	*($19 + [144]) = [0]
	*($0) = $18
	*(($19 + [76])) = ($0 + [24])
	goto $label$28 
	
.LABEL $label$29
	CALL $31(($19 + [72]), ($19 + [144]), ($19 + [128]), ($19 + [124]))
	
.LABEL $label$28
	$18 = *($19 + [144])
	*($19 + [144]) = [0]
	if ( ($18 == 0) ){ goto $label$30 }
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL $48(*(($18 + [16])))
	
.LABEL $label$31
	CALL $48($18)
	
.LABEL $label$30
	$17 = *($19 + [72])
	if ( ($17 == 0) ){ goto $label$32 }
	$16 = ($19 + [76])
	$18 = *($16)
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$34 }
	
.LOOP $label$35:
	$18 = ($18 + [-24])
	$0 = *($18)
	*($18) = [0]
	if ( ($0 == 0) ){ goto $label$36 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $48(*(($0 + [16])))
	
.LABEL $label$37
	CALL $48($0)
	
.LABEL $label$36
	if ( ((int_32)$17 != (int_32)$18) ){ goto $label$35 }
	$18 = *(($19 + [72]))
	goto $label$33 
	
.LABEL $label$34
	$18 = $17
	
.LABEL $label$33
	*($16) = $17
	CALL $48($18)
	
.LABEL $label$32
	*([0] + [4]) = ($19 + [160])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [192])
	*([0] + [4]) = $2
	*(($3 = $2) + [188]) = $0
	*($3 + [176]) = *($1)
	*($3 + [180]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $38(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [176])
	*($3 + [8]) = ($3 + [188])
	CALL $39(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $48(*(($3 + [32])))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [192])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [48]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [64])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [96])) = $0
	*(($11 + [104])) = (int_64)-1
	*(($11 + [112])) = (int_64)0
	*(($11 + [120])) = [0]
	*($11 + [88]) = $0
	*($11 + [80]) = $0
	if ( ((int_64)$2 <= (int_64)3625960649986670591) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)3932465459147833344) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)3625960649986670592) ){ goto $label$22 }
	*($11 + [76]) = [0]
	*($11 + [72]) = [1]
	*($11) = *($11 + [72])
	CALL $7(($11 + [80]), $11)
	goto $label$22 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-7704843159162847232) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-4417348275164299264) ){ goto $label$22 }
	*($11 + [44]) = [0]
	*($11 + [40]) = [2]
	*($11 + [32 align=4]) = *($11 + [40])
	CALL $15(($11 + [80]), ($11 + [32]))
	goto $label$22 
	
.LABEL $label$25
	*($11 + [60]) = [0]
	*($11 + [56]) = [3]
	*($11 + [16 align=4]) = *($11 + [56])
	CALL $11(($11 + [80]), ($11 + [16]))
	goto $label$22 
	
.LABEL $label$24
	*($11 + [52]) = [0]
	*($11 + [48]) = [4]
	*($11 + [24 align=4]) = *($11 + [48])
	CALL $13(($11 + [80]), ($11 + [24]))
	goto $label$22 
	
.LABEL $label$23
	*($11 + [68]) = [0]
	*($11 + [64]) = [5]
	*($11 + [8 align=4]) = *($11 + [64])
	CALL $9(($11 + [80]), ($11 + [8]))
	
.LABEL $label$22
	$4 = *(($11 + [112]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [116])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$28 }
	
.LOOP $label$29:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$30 }
	CALL $48($3)
	
.LABEL $label$30
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$29 }
	$6 = *(($11 + [112]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $4
	
.LABEL $label$27
	*($5) = $4
	CALL $48($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN10medishares10setauditorEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(CALL $fimport$11($1), [144])
	$2 = ($0 + [8])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $16($2, $3)
	
.LABEL $label$1
	$3 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($3, [176])
	CALL require_auth(*($0))
	CALL eosio_assert($3, [208])
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$2), [256])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$2()), [304])
	*($4 + [24]) = $1
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [432])
	CALL memcpy($5, $4, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy(($5 | [8]), ($4 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy(($5 + [16]), ($4 + [16]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy(($5 + [24]), ($4 + [24]), [8])
	CALL db_update_i64(*($4 + [36]), (int_64)0, $5, [32])
	$4 = ($0 + [24])
	if ( ((int_64)*($4) != (int_64)0) ){ goto $label$2 }
	*($4) = (int_64)1
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [448])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $47([48])) + [32]) = $0
	CALL $17(($7 + [16]), $5)
	*($5 + [36]) = $1
	*($7 + [8]) = $5
	*($7 + [4]) = [0]
	$6 = *($5 + [36])
	*($7) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $6
	*($7 + [8]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $18(($0 + [24]), ($7 + [8]), ($7 + [4]), $7)
	
.LABEL $label$8
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $48($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN10medishares5eraseEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*(($11 + [32])) = [0]
	*($11 + [16]) = (int_64)-1
	$9 = *($0)
	*($11) = $9
	*($11 + [8]) = $1
	*($11 + [24]) = (int_64)0
	$8 = [0]
	$0 = [0]
	$5 = CALL db_lowerbound_i64($9, $1, (int_64)8526756653867991040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($2 + [1])
	$8 = CALL $23($11, $5)
	$10 = ($2 + [4])
	
.LOOP $label$4:
	$0 = ($0 & [1])
	$0 = *($2)
	$4 = ($0 & [1])
	$0 = *($8 + [8])
	$5 = uint_32($0 >> [1])
	$6 = ( *(($8 + [12])) ? $5 : $4 )
	if ( ((int_32)$6 != (int_32)( *($10) ? uint_32($0 >> [1]) : $0 )) ){ goto $label$5 }
	$7 = ( *(($2 + [8])) ? $3 : $0 )
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( (CALL memcmp(( *(($8 + [16])) ? (($8 + [8]) + [1]) : $4 ), $7, $6) == 0) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($8 + $0) + [9])) != (int_32)*(($7 + $0))) ){ goto $label$5 }
	$0 = ($0 + [1])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([1], [496])
	$0 = CALL db_next_i64(*($8 + [168]), ($11 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $23($11, $0)
	goto $label$4 
	
.LABEL $label$3
	$0 = [1]
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [528])
	CALL eosio_assert((*($8 + [160]) <= [2]), [928])
	CALL require_auth(*($8 + [64]))
	$0 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($0, [608])
	CALL eosio_assert($0, [496])
	$0 = CALL db_next_i64(*($8 + [168]), ($11 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	CALL $23($11, $0)
	
.LABEL $label$8
	CALL $26($11, $8)
	$5 = *($11 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$7 = ($11 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $48(*(($8 + [16])))
	
.LABEL $label$14
	CALL $48($8)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($11 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $5
	
.LABEL $label$10
	*($7) = $5
	CALL $48($0)
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $19(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $32(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $48(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC _ZN10medishares5auditEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$14 = [0]
	*(($15 + [40])) = [0]
	*($15 + [24]) = (int_64)-1
	$10 = *($0)
	*($15 + [8]) = $10
	*($15 + [16]) = $1
	*($15 + [32]) = (int_64)0
	$12 = CALL db_lowerbound_i64($10, $1, (int_64)8526756653867991040, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$4 = ($2 + [1])
	$9 = CALL $23(($15 + [8]), $12)
	$11 = ($2 + [4])
	
.LOOP $label$4:
	$12 = ($12 & [1])
	$12 = *($2)
	$5 = ($12 & [1])
	$12 = *($9 + [8])
	$6 = uint_32($12 >> [1])
	$7 = ( *(($9 + [12])) ? $6 : $5 )
	if ( ((int_32)$7 != (int_32)( *($11) ? uint_32($12 >> [1]) : $12 )) ){ goto $label$5 }
	$8 = ( *(($2 + [8])) ? $4 : $12 )
	if ( ($5 == 0) ){ goto $label$6 }
	$13 = [1]
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL memcmp(( *(($9 + [16])) ? (($9 + [8]) + [1]) : $5 ), $8, $7) == 0) ){ goto $label$1 }
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$2 }
	$12 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($9 + $12) + [9])) != (int_32)*(($8 + $12))) ){ goto $label$5 }
	$13 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([1], [496])
	$12 = CALL db_next_i64(*($9 + [168]), ($15 + [48]))
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$3 }
	$9 = CALL $23(($15 + [8]), $12)
	goto $label$4 
	
.LABEL $label$3
	$9 = [0]
	$13 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = [1]
	
.LABEL $label$1
	CALL eosio_assert($13, [528])
	CALL eosio_assert((*($9 + [160]) <= [2]), [560])
	CALL eosio_assert(((uint_32)*($9 + [156]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000))), [592])
	$12 = ($0 + [8])
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$14 = CALL $16($12, $6)
	
.LABEL $label$8
	$6 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($6, [176])
	CALL require_auth(*($14 + [24]))
	if ( ($3 == 0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$12 }
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$11 }
	CALL eosio_assert($13, [208])
	CALL $24(($15 + [8]), $9)
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$12), [256])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [304])
	*($14 + [16]) = ((int_64)*($14 + [16]) + (int_64)1)
	CALL eosio_assert([1], [368])
	CALL eosio_assert([1], [432])
	CALL memcpy(($15 + [48]), $14, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($15 + [48]) | [8]), ($14 + [8]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($15 + [48]) + [16]), ($14 + [16]), [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($15 + [48]) + [24]), ($14 + [24]), [8])
	CALL db_update_i64(*($14 + [36]), (int_64)0, ($15 + [48]), [32])
	$12 = ($0 + [24])
	if ( ((int_64)*($12) != (int_64)0) ){ goto $label$11 }
	*($12) = (int_64)1
	$6 = *($15 + [32])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$12 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($12, [608])
	CALL eosio_assert($12, [496])
	$12 = CALL db_next_i64(*($9 + [168]), ($15 + [48]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$14 }
	CALL $23(($15 + [8]), $12)
	
.LABEL $label$14
	CALL $26(($15 + [8]), $9)
	$6 = *($15 + [32])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert($13, [208])
	CALL $25(($15 + [8]), $9)
	
.LABEL $label$11
	$6 = *($15 + [32])
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = ($15 + [36])
	$12 = *($8)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL $48(*(($9 + [16])))
	
.LABEL $label$19
	CALL $48($9)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$17 }
	$12 = *(($15 + [32]))
	goto $label$15 
	
.LABEL $label$16
	$12 = $6
	
.LABEL $label$15
	*($8) = $6
	CALL $48($12)
	
.LABEL $label$9
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $19(($2 + [48]), (($2 + [8]) + [8]))
	CALL eosio_assert(((int_32)*($2 + [56]) != (int_32)*($2 + [52])), [128])
	CALL memcpy(($2 + [28]), *($2 + [52]), [1])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $20(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $48(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [80]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [88]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [96]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [104]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [112]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [120]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [128]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [136]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [144]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*(($1 + [164])) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$3 = *($1)
	CALL $50(($1 + [8]), *($2))
	$5 = *($2 + [4])
	*($1 + [32]) = *($5)
	*(($1 + [56])) = *(($5 + [24]))
	*(($1 + [48])) = *(($5 + [16]))
	*(($1 + [40])) = *(($5 + [8]))
	*($1 + [72]) = *(*($2 + [8]))
	$5 = *($2 + [12])
	*($1 + [80]) = *($5)
	*(($1 + [96])) = *(($5 + [16]))
	*(($1 + [88])) = *(($5 + [8]))
	$5 = *($2 + [16])
	*($1 + [104]) = *($5)
	*(($1 + [120])) = *(($5 + [16]))
	*(($1 + [112])) = *(($5 + [8]))
	$5 = *($2 + [20])
	*($1 + [128]) = *($5)
	*(($1 + [144])) = *(($5 + [16]))
	*(($1 + [136])) = *(($5 + [8]))
	*($1 + [156]) = *(*($2 + [24]))
	*($1 + [160]) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [368])
	$2 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($5 + [137])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $2)
	CALL $27($6, $1)
	CALL db_update_i64(*(($1 + [168])), (int_64)0, $5, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [320])
	*([0] + [4]) = $14
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $54(($14 + [144]), ($1 + [16]))
	*(($6 = (($14 + [112]) + [24]))) = *(($1 + [56]))
	*(($7 = (($14 + [112]) + [16]))) = *(($1 + [48]))
	*($14 + [120]) = *(($1 + [40]))
	*($14 + [112]) = *($1 + [32])
	$4 = *($1 + [64])
	*(($8 = (($14 + [88]) + [16]))) = *(($1 + [88]))
	*(($9 = (($14 + [88]) + [8]))) = *(($1 + [80]))
	*($14 + [88]) = *($1 + [72])
	*(($10 = (($14 + [64]) + [16]))) = *(($1 + [112]))
	*(($11 = (($14 + [64]) + [8]))) = *(($1 + [104]))
	*($14 + [64]) = *($1 + [96])
	*(($12 = (($14 + [40]) + [16]))) = *(($1 + [136]))
	*(($13 = (($14 + [40]) + [8]))) = *(($1 + [128]))
	*($14 + [40]) = *($1 + [120])
	$5 = *($1 + [144])
	*((($14 + [248]) + [16])) = *($12)
	*((($14 + [248]) + [8])) = *($13)
	*((($14 + [224]) + [16])) = *($10)
	*((($14 + [224]) + [8])) = *($11)
	*($14 + [248]) = *($14 + [40])
	*($14 + [224]) = *($14 + [64])
	*((($14 + [200]) + [16])) = *($8)
	*((($14 + [200]) + [8])) = *($9)
	*($14 + [200]) = *($14 + [88])
	*((($14 + [160]) + [24])) = *($6)
	*((($14 + [160]) + [16])) = *($7)
	*($14 + [168]) = *($14 + [120])
	*($14 + [160]) = *($14 + [112])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $54(($14 + [304]), ($14 + [144]))
	*(($6 = (($14 + [272]) + [24]))) = *((($14 + [160]) + [24]))
	*(($7 = (($14 + [272]) + [16]))) = *((($14 + [160]) + [16]))
	*($14 + [280]) = *($14 + [168])
	*($14 + [272]) = *($14 + [160])
	*(($14 + [24])) = *($6)
	*(($14 + [16])) = *($7)
	*($14) = *($14 + [272])
	*($14 + [8]) = *($14 + [280])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($14 + [304])), (int_32 $14), (int_32 $4), (int_64 ($14 + [200])), (int_32 ($14 + [224])), (int_32 ($14 + [248])), (int_32 $5), (int_64 $1))
	if ( ((*($14 + [304]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($14 + [312]))
	
.LABEL $label$2
	if ( ((*($14 + [144]) & [1]) == 0) ){ goto $label$3 }
	CALL $48(*($14 + [152]))
	
.LABEL $label$3
	*([0] + [4]) = ($14 + [320])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $19(*($1), ($2 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($2 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($4 + [8]) = $2
	CALL $36(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $54($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $54(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $48(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $48(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	$4 = [0]
	*(($0 + [24])) = [0]
	*($0 + [32]) = [0]
	*(($0 + [60])) = [0]
	*(($0 + [56])) = [0]
	*(($0 + [52])) = [0]
	*(($0 + [48])) = [0]
	*(($0 + [44])) = [0]
	*(($0 + [40])) = [0]
	*(($0 + [36])) = [0]
	*($0 + [64]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*($0 + [72]) = (int_64)0
	*(($0 + [80])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [896])
	*($0 + [96]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [104])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [896])
	*($0 + [120]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [128])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [896])
	*($0 + [144]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $35(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $19($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [152]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [156]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [128])
	CALL memcpy(($1 + [160]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $47(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $53($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $48(*(($1 + [16])))
	
.LABEL $label$11
	CALL $48($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $48($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $51($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*($0 + [32]) = [0]
	*(($0 + [60])) = [0]
	*(($0 + [56])) = [0]
	*(($0 + [52])) = [0]
	*(($0 + [48])) = [0]
	*(($0 + [44])) = [0]
	*(($0 + [40])) = [0]
	*(($0 + [36])) = [0]
	*($0 + [64]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*($0 + [72]) = (int_64)0
	*(($0 + [80])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [896])
	*($0 + [96]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [104])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [896])
	*($0 + [120]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [128])) = (int_64)1397703940
	CALL eosio_assert([1], [832])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [896])
	*($0 + [144]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $40(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $47(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $48($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $53 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $47($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $56 ()
{
	(unreachable)
}