(data (i32.const 4) "@\84\00\00")
(data (i32.const 12) "\80Q\01\00")
(data (i32.const 16) "\10\0e\00\00")
(data (i32.const 20) "<\00\00\00")
(data (i32.const 24) "\10\'\00\00")
(data (i32.const 28) "0.\dc[")
(data (i32.const 32) "\f0\d6\dc[")
(data (i32.const 36) "0*\00\00")
(data (i32.const 48) "Invalid hex character\00")
(data (i32.const 80) "0123456789abcdef\00")
(data (i32.const 112) "invalid sha256\00")
(data (i32.const 128) "invalid sha1\00")
(data (i32.const 144) "invalid first pos\00")
(data (i32.const 176) "parse memo error\00")
(data (i32.const 208) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 464) "carry == 0\00")
(data (i32.const 480) "./util/base_util.hpp\00")
(data (i32.const 512) "DecodeBase58\00")
(data (i32.const 528) "No delimiter in signature\00")
(data (i32.const 560) "SIG\00")
(data (i32.const 576) "Signature Key has invalid prefix\00")
(data (i32.const 624) "No curve in signature\00")
(data (i32.const 656) "K1\00")
(data (i32.const 672) "R1\00")
(data (i32.const 688) "Incorrect curve\00")
(data (i32.const 704) "Signature has no data\00")
(data (i32.const 736) "Decode signature failed\00")
(data (i32.const 768) "Invalid signature\00")
(data (i32.const 800) "Signature checksum mismatch\00")
(data (i32.const 832) "EOS\00")
(data (i32.const 848) "Decode public key failed\00")
(data (i32.const 880) "Invalid public key\00")
(data (i32.const 912) "Public key checksum mismatch\00")
(data (i32.const 944) "The key type is not supported for compose.\00")
(data (i32.const 992) "Your key type is not supported for decompose.\00")
(data (i32.const 1040) "\02\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\0b\00\00\00\00\00\00\00<\00\00\00\00\00\00\00\d2\00\00\00\00\00\00\00v\02\00\00\00\00\00\00\c4\t\00\00\00\00\00\00")
(data (i32.const 1104) "Your key type is not supported yet.\00")
(data (i32.const 1152) "Invalid Key Amount\00")
(data (i32.const 1184) "Ooops... KEY overflows. Are you a hacker?\00")
(data (i32.const 1232) "Oops... Try again with a smaller quantity.\00")
(data (i32.const 1280) "Invalid Key Amoun, sell within 10,000 keys\00")
(data (i32.const 1328) "Insufficient KEY for the game.\00")
(data (i32.const 1360) "Oops. Please try again with a smaller quantity if you are not a hacker.\00")
(data (i32.const 1440) "Selling ratio should be (0, 1).\00")
(data (i32.const 1472) "The keytype is not correct.\00")
(data (i32.const 1504) "onerror\00")
(data (i32.const 1520) "eosio\00")
(data (i32.const 1536) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1600) "eosio.token\00")
(data (i32.const 1616) "transfer\00")
(data (i32.const 1632) "sell\00")
(data (i32.const 1648) "free\00")
(data (i32.const 1664) "open\00")
(data (i32.const 1680) "compose\00")
(data (i32.const 1696) "decompose\00")
(data (i32.const 1712) "startgame\00")
(data (i32.const 1728) "keymapping\00")
(data (i32.const 1744) "revealbet\00")
(data (i32.const 1760) "allocmem\00")
(data (i32.const 1776) "gamevalidate\00")
(data (i32.const 1792) "hackerlist\00")
(data (i32.const 1808) "get\00")
(data (i32.const 1824) "read\00")
(data (i32.const 1840) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1904) "cannot pass end iterator to modify\00")
(data (i32.const 1952) "object passed to modify is not in multi_index\00")
(data (i32.const 2000) "cannot modify objects in table of another contract\00")
(data (i32.const 2064) "updater cannot change primary key when modifying an object\00")
(data (i32.const 2128) "write\00")
(data (i32.const 2144) "error reading iterator\00")
(data (i32.const 2176) "cannot pass end iterator to erase\00")
(data (i32.const 2224) "cannot increment end iterator\00")
(data (i32.const 2256) "object passed to erase is not in multi_index\00")
(data (i32.const 2304) "cannot erase objects in table of another contract\00")
(data (i32.const 2368) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2432) "Reveal task not found.\00")
(data (i32.const 2464) "Reveal format is not correct.\00")
(data (i32.const 2496) "Bet id is not correct.\00")
(data (i32.const 2528) "Reveal seed format is not correct.\00")
(data (i32.const 2576) "Bet ID does not exist.\00")
(data (i32.const 2608) "User bet is not correct.\00")
(data (i32.const 2640) "The user account does not exist.\00")
(data (i32.const 2688) "Please contact muggles@bancor3d.com .\00")
(data (i32.const 2736) "Games not started yet.\00")
(data (i32.const 2768) "Already reveal this bet.\00")
(data (i32.const 2800) "invalid symbol name\00")
(data (i32.const 2832) "mugglecasego\00")
(data (i32.const 2848) "Casego Muggle reward. http://casego.muggles.io\00")
(data (i32.const 2896) "active\00")
(data (i32.const 2912) "mugglesspell\00")
(data (i32.const 2928) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 2992) "cannot create objects in table of another contract\00")
(data (i32.const 3056) "Games already exists\00")
(data (i32.const 3088) "Team account exists\00")
(data (i32.const 3120) "next primary key in table is at autoincrement limit\00")
(data (i32.const 3184) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 3248) "cannot decrement iterator at beginning of table\00")
(data (i32.const 3296) "Game is under maintenance.\00")
(data (i32.const 3328) "Decompose the cases between 1 to 5,000.\00")
(data (i32.const 3376) "Decompose is not supported for this type.\00")
(data (i32.const 3424) "You do not have key to decompose.\00")
(data (i32.const 3472) "Decompose is not supported for this.\00")
(data (i32.const 3520) "Compose the cases between 1 to 5,000.\00")
(data (i32.const 3568) "Compose is not supported for this type.\00")
(data (i32.const 3616) "Compose is not supported for this.\00")
(data (i32.const 3664) "You do not enough white keys.\00")
(data (i32.const 3696) "Open cases between 1 to 10 times.\00")
(data (i32.const 3744) "Seed is not filled properly.\00")
(data (i32.const 3776) "Seed is the same.\00")
(data (i32.const 3808) "You do not have key to open.\00")
(data (i32.const 3840) "Better luck next time.\00")
(data (i32.const 3872) "Unknown account.\00")
(data (i32.const 3904) "You don\'t have enough KEY .\00")
(data (i32.const 3936) "Are you entering correct amount?\00")
(data (i32.const 3984) "tpdappincome\00")
(data (i32.const 4000) "dinnerwinner\00")
(data (i32.const 4016) "qazwsxedc555\00")
(data (i32.const 4032) "Please contact muggles@bancor3d.com, we will get back to you in 24h.\00")
(data (i32.const 4112) "Keys claimed. http://casego.muggles.io\00")
(data (i32.const 4160) "Game not starts\00")
(data (i32.const 4176) "Minimum ticket to casego is 0.1 EOS.\00")
(data (i32.const 4224) "More than 10,000 EOS will make the designer run away.\00")
(data (i32.const 4288) "Say something. Memo length should be less than 100 and greater than 1.\00")
(data (i32.const 4368) "Account name is too long.\00")
(data (i32.const 4400) "Invalid Purchase KEY Amount\00")
(data (i32.const 4432) "Sorry someone just got the deal. Refresh the page, get the latest price.\00")
(data (i32.const 4512) "You are paying too much. Refresh the page, get the latest price.\00")
(data (i32.const 4592) "Please contact muggles@bancor3d.com.\00")
(data (i32.const 4640) "Team reward. http://casego.muggles.io\00")
(data (i32.const 13088) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 13184) "stoi\00")
(data (i32.const 13200) ": no conversion\00")
(data (i32.const 13216) ": out of range\00")
(data (i32.const 13240) "\80B\00\00")
(data (i32.const 13248) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 13284) "\f83\00\00")
(data (i32.const 13304) "\05\00\00\00\00\00\00\00\00\00\00\00\0d\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\0f\00\00\00\984\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 14496) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 14960) "0123456789ABCDEF")
(data (i32.const 14976) "-+   0X0x\00")
(data (i32.const 14992) "(null)\00")
(data (i32.const 15008) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 15040) "inf\00")
(data (i32.const 15056) "INF\00")
(data (i32.const 15072) "nan\00")
(data (i32.const 15088) "NAN\00")
(data (i32.const 15104) ".\00")
(data (i32.const 15120) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 15216) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 17024) "\05\00\00\00\00\00\00\00\00\00\00\00\0d\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\0f\00\00\00\18C\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 17184) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 17456) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__divtf3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$3 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__fixunstfdi" (func $fimport$5 (param i64 i64) (result i64)))
(import "env" "__fixunstfsi" (func $fimport$6 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__floatunditf" (func $fimport$8 (param i32 i64)))
(import "env" "__floatunsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__getf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "__gttf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "assert_sha256" (func $fimport$18 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$19 (result i64)))
(import "env" "current_time" (func $fimport$20 (result i64)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$26 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$30 (param i32)))
(import "env" "db_store_i64" (func $fimport$31 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$32 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$33 (param i32 i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$37 (param i32 i32)))
(import "env" "read_action_data" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$39 (param i64)))
(import "env" "require_auth2" (func $fimport$40 (param i64 i64)))
(import "env" "ripemd160" (func $fimport$41 (param i32 i32 i32)))
(import "env" "send_deferred" (func $fimport$42 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$43 (param i32 i32)))
(import "env" "sha256" (func $fimport$44 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$45 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$46 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z8int_sqrty" (func $5))
(export "_Z13uint64_stringy" (func $6))
(export "_Z8from_hexc" (func $8))
(export "_Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj" (func $9))
(export "_Z6to_hexPKcm" (func $10))
(export "_Z13sha256_to_hexRK11checksum256" (func $11))
(export "_Z11sha1_to_hexRK11checksum160" (func $12))
(export "_Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $13))
(export "_Z11uint64_hashRK11checksum256" (func $14))
(export "_Z11uint64_hashRK11checksum160" (func $15))
(export "_Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $16))
(export "_Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $17))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $18))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $19))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $22))
(export "_Z10str_to_sigRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKb" (func $23))
(export "_Z10str_to_pubRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKb" (func $24))
(export "_Z11assert_seedRK11checksum256S1_" (func $25))
(export "_Z13get_rand_seedyyyy" (func $26))
(export "_Z20get_random_int_10000RK11checksum256RK11checksum160" (func $27))
(export "_Z14get_random_intRK11checksum256RK11checksum160" (func $28))
(export "_Z7get_nowv" (func $29))
(export "_Z17get_compose_counth" (func $30))
(export "_Z19get_decompose_counth" (func $31))
(export "_Z17is_rand_seed_hashhy" (func $32))
(export "_Z10get_payouthy" (func $33))
(export "_Z16get_eos_expectedyy" (func $34))
(export "_Z21get_eos_expected_sellyyyy" (func $35))
(export "_Z18get_user_box_countN5eosio11multi_indexILy15426372438069346304E4userJNS_10indexed_byILy9223372036854775808EN5boost11multi_index13const_mem_funIS1_yXadL_ZNKS1_7get_keyEvEEEEEEEE14const_iteratorEh" (func $36))
(export "_Z16is_compose_validh" (func $37))
(export "_Z18is_decompose_validh" (func $38))
(export "apply" (func $39))
(export "malloc" (func $145))
(export "free" (func $148))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $160))
(export "isspace" (func $167))
(export "__errno_location" (func $168))
(export "__assert_fail" (func $169))
(export "fprintf" (func $170))
(export "fflush" (func $171))
(export "__ofl_lock" (func $172))
(export "__lockfile" (func $173))
(export "__unlockfile" (func $174))
(export "__ofl_unlock" (func $175))
(export "__unlock" (func $176))
(export "__lock" (func $177))
(export "__stdio_close" (func $178))
(export "__stdout_write" (func $179))
(export "__stdio_seek" (func $180))
(export "__stdio_write" (func $181))
(export "vfprintf" (func $182))
(export "__fwritex" (func $184))
(export "strerror" (func $186))
(export "strnlen" (func $187))
(export "wctomb" (func $188))
(export "__signbitl" (func $189))
(export "__fpclassifyl" (func $190))
(export "frexpl" (func $191))
(export "wcrtomb" (func $192))
(export "memchr" (func $193))
(export "__lctrans" (func $194))
(export "__lctrans_impl" (func $195))
(export "__mo_lookup" (func $196))
(export "strcmp" (func $197))
(export "__towrite" (func $198))
(export "floorl" (func $199))
(export "strtol" (func $200))
(export "__shlim" (func $201))
(export "__intscan" (func $202))
(export "__shgetc" (func $203))
(export "__uflow" (func $204))
(export "__toread" (func $205))
(export "memcmp" (func $206))
(export "strlen" (func $207))
(table $0 17 17 anyfunc)
(elem (i32.const 0) $208 $55 $51 $41 $60 $54 $47 $58 $49 $43 $52 $45 $57 $178 $179 $180 $181)



void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $7($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $154($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [13284]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [13284]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([13288])
	return [13296]
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $149($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $155($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $151($0)
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z8int_sqrty (int_64 $0)
{
	int_64 $1
	int_64 $2
	int_64 $3
	$2 = (int_64)2147483647
	$1 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$1 >= (uint_64)$2) ){ goto $label$2 }
	
.LOOP $label$5:
	$3 = (uint_64)((int_64)$2 + (int_64)$1) >> (uint_64)(int_64)1
	if ( ((uint_64)((int_64)$3) * (int_64)$3) <= (uint_64)$0) ){ goto $label$4 }
	$2 = ((int_64)$3 + (int_64)-1)
	if ( (uint_64)($1 <= $2) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$1 = ((int_64)$3 + (int_64)1)
	if ( ((uint_64)((int_64)$1 * (int_64)$1) <= (uint_64)$0) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = $1
	
.LABEL $label$1
	return $3
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	*($5 + [152]) = $4
	CALL $130($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($9 + [47]) = $2
	*($9 + [32]) = $3
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)4999), [3520])
	CALL require_auth($1)
	$4 = *(($0 + [192]))
	$8 = *(($0 + [196]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [168])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$5), [1840])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $66($5, $6)
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$5), [1840])
	
.LABEL $label$3
	$6 = [0]
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [2640])
	CALL eosio_assert((*($7 + [124]) == 0), [2688])
	CALL eosio_assert(((($2 + [-3]) & [255]) <= [2]), [3568])
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$7 }
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$6 }
	$1 = (int_64)8
	goto $label$5 
	
.LABEL $label$7
	$1 = (int_64)3
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [944])
	$1 = (int_64)0
	
.LABEL $label$5
	*($9 + [24]) = $1
	CALL eosio_assert(((int_64)$1 != (int_64)0), [3616])
	CALL eosio_assert(((uint_64)*($7 + [88]) >= (uint_64)((int_64)((int_64)$1 * (int_64)$3) * (int_64)*([0] + [24]))), [3664])
	$8 = ($0 + [128])
	$0 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $67($8, $0)
	
.LABEL $label$8
	$0 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($0, [2736])
	*($9 + [12]) = ($9 + [32])
	*($9 + [8]) = ($9 + [47])
	*($9 + [16]) = ($9 + [24])
	CALL eosio_assert($4, [1904])
	CALL $120($5, $7, (int_64)0, ($9 + [8]))
	*($9 + [12]) = ($9 + [32])
	*($9 + [8]) = ($9 + [47])
	*($9 + [16]) = ($9 + [24])
	CALL eosio_assert($0, [1904])
	CALL $121($8, $6, (int_64)0, ($9 + [8]))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*(($2 + [44])) = [0]
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = $2
	CALL $122(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $123(($2 + [64]), $2)
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$5 }
	CALL $150(*(($2 + [44])))
	
.LABEL $label$5
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $150(*(($2 + [32])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [96])
	return [1]
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [160])
	*([0] + [4]) = $18
	*($18 + [120]) = $2
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL require_auth($1)
	$4 = *(($0 + [192]))
	$11 = *(($0 + [196]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$1 }
	$12 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$11 = $12
	$9 = ($12 + [-24])
	$12 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [168])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$3), [1840])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$12 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $66($3, $12)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$3), [1840])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [3872])
	CALL eosio_assert(((uint_64)*($5 + [88]) >= (uint_64)((int_64)*([0] + [24]) * (int_64)$2)), [3904])
	CALL eosio_assert((*($5 + [124]) == 0), [2688])
	$4 = ($0 + [128])
	$14 = (int_64)0
	$11 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $67($4, $12)
	
.LABEL $label$5
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [2736])
	$8 = CALL _Z21get_eos_expected_sellyyyy($14, ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 (*($11 + [80]) << [1])) + (int_64)*($11 + [72])) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [84]) * (int_32)[5]))) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [88]) * (int_32)[11]))) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [92]) * (int_32)[60]))) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [96]) * (int_32)[210]))) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [100]) * (int_32)[630]))) + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($11 + [104]) * (int_32)[2500]))), (int_64))(*($11 + [24]) - *($11 + [40])), ((int_64)*([0] + [24]) * (int_64)$2)
	*($18 + [112]) = $8)
	CALL eosio_assert((uint_64)($8 <= (int_64))(*($11 + [16]) - *($11 + [32]))), [3936])
	$2 = (int_64)59
	$12 = [3984]
	$15 = (int_64)0
	
.LOOP $label$6:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$7 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ($9 + [165])
	goto $label$8 
	
.LABEL $label$9
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$7
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$6 }
	$14 = (int_64)0
	$2 = (int_64)59
	$12 = [4000]
	$16 = (int_64)0
	
.LOOP $label$10:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$11 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [165])
	goto $label$12 
	
.LABEL $label$13
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$11
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$13 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$10 }
	$14 = (int_64)0
	$2 = (int_64)59
	$12 = [4016]
	$17 = (int_64)0
	
.LOOP $label$14:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$15 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$9 = ($9 + [165])
	goto $label$16 
	
.LABEL $label$17
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$15
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$14 }
	$12 = [1]
	$14 = ((int_64)*($5 + [48]) + (int_64)$8)
	if ( (uint_64)($14 <= (int_64)5001) ){ goto $label$18 }
	$2 = *($5)
	$12 = ((((int_64)$2 == (int_64)$17) | (((int_64)$2 == (int_64)$16) | ((int_64)$2 == (int_64)$15))) | ((uint_64)$14 <= (uint_64)((int_64)*($5 + [32]) * (int_64)10)))
	
.LABEL $label$18
	CALL eosio_assert($12, [4032])
	*($18 + [28]) = ($18 + [112])
	*($18 + [24]) = ($18 + [120])
	CALL eosio_assert($6, [1904])
	CALL $134($3, $5, (int_64)0, ($18 + [24]))
	*($18 + [28]) = ($18 + [112])
	*($18 + [24]) = ($18 + [120])
	CALL eosio_assert($7, [1904])
	CALL $135($4, $11, (int_64)0, ($18 + [24]))
	$8 = *($18 + [112])
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [2928])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [2800])
	$10 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [2896]
	$15 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$29 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$9 = ($9 + [165])
	goto $label$27 
	
.LABEL $label$29
	$2 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$25
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$24 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1600]
	$16 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$35 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$9 = ($9 + [165])
	goto $label$33 
	
.LABEL $label$35
	$2 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$31
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$16 = ((int_64)$2 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$30 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1616]
	$17 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$41 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$9 = ($9 + [165])
	goto $label$39 
	
.LABEL $label$41
	$2 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$37
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$2 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$36 }
	*(($18 + [16])) = [0]
	*($18 + [8]) = (int_64)0
	$12 = CALL strlen([4112])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$42 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$45 }
	*($18 + [8]) = ($12 << [1])
	$9 = (($18 + [8]) | [1])
	if ( $12 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$11 = (($12 + [16]) & [-16])
	$9 = CALL $149($11)
	*($18 + [8]) = ($11 | [1])
	*($18 + [16]) = $9
	*($18 + [12]) = $12
	
.LABEL $label$44
	CALL memcpy($9, [4112], $12)
	
.LABEL $label$43
	*(($9 + $12)) = [0]
	*((($18 + [24]) + [24])) = (int_64)1397703940
	*(($9 = (($18 + [24]) + [36]))) = *($18 + [12])
	*($18 + [32]) = $1
	$12 = ($18 + [16])
	*(($18 + [64])) = *($12)
	*($18 + [24]) = *($0)
	*($18 + [40]) = $8
	*($18 + [56]) = *($18 + [8])
	*($18 + [8]) = [0]
	*($18 + [12]) = [0]
	*($12) = [0]
	*($18 + [72]) = $16
	*($18 + [80]) = $17
	*(($12 = CALL $149([16]))) = $10
	*($12 + [8]) = $15
	*((($18 + [72]) + [32])) = [0]
	$11 = ($12 + [16])
	*((($18 + [72]) + [24])) = $11
	*(($18 + [92])) = $11
	*($18 + [88]) = $12
	*($18 + [100]) = [0]
	*((($18 + [72]) + [36])) = [0]
	$12 = *($18 + [56])
	$9 = ( *($9) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($9 + [32])
	$14 = (CASTING uint_64)(uint_32 $9)
	$9 = ($18 + [100])
	
.LOOP $label$46:
	$12 = ($12 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$46 }
	if ( ($12 == 0) ){ goto $label$48 }
	CALL $65($9, $12)
	$9 = *(($18 + [104]))
	$12 = *(($18 + [100]))
	goto $label$47 
	
.LABEL $label$48
	$9 = [0]
	$12 = [0]
	
.LABEL $label$47
	*($18 + [132]) = $12
	*($18 + [128]) = $12
	*($18 + [136]) = $9
	*($18 + [144]) = ($18 + [128])
	*($18 + [152]) = ($18 + [24])
	CALL $95(($18 + [152]), ($18 + [144]))
	CALL $136(($18 + [128]), ($18 + [72]))
	$12 = *($18 + [128])
	CALL send_inline($12, (*($18 + [132]) - $12))
	$12 = *($18 + [128])
	if ( ($12 == 0) ){ goto $label$49 }
	*($18 + [132]) = $12
	CALL $150($12)
	
.LABEL $label$49
	$12 = *($18 + [100])
	if ( ($12 == 0) ){ goto $label$50 }
	*(($18 + [104])) = $12
	CALL $150($12)
	
.LABEL $label$50
	$12 = *($18 + [88])
	if ( ($12 == 0) ){ goto $label$51 }
	*(($18 + [92])) = $12
	CALL $150($12)
	
.LABEL $label$51
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$52 }
	CALL $150(*(($18 + [64])))
	
.LABEL $label$52
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL $150(*(($18 + [16])))
	
.LABEL $label$53
	*([0] + [4]) = ($18 + [160])
	return (unreachable)
	
.LABEL $label$42
	CALL $151(($18 + [8]))
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [2928])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [2800])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $137(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $138(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $150(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [480])
	*([0] + [4]) = $18
	*($18 + [440]) = $1
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL require_auth($1)
	$14 = [0]
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$20() / (uint_64)(int_64)1000000)) >= (uint_32)*([0] + [28])), [4160])
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$15 = *($3 + [8])
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$3 }
	if ( ((int_64)$15 != (int_64)1397703940) ){ goto $label$2 }
	$13 = *($0)
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)$5 < (int_64)10) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$5 > (int_64)999), [4176])
	CALL eosio_assert(((int_64)$5 < (int_64)100000001), [4224])
	$7 = *($4)
	$8 = ($7 & [1])
	if ( $8 ){ goto $label$7 }
	$6 = uint_32($7 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$6 = *($4 + [4])
	
.LABEL $label$6
	$14 = [0]
	$3 = [0]
	if ( ((uint_32)$6 > (uint_32)[100]) ){ goto $label$8 }
	if ( $8 ){ goto $label$10 }
	$3 = uint_32($7 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($4 + [4])
	
.LABEL $label$9
	$3 = ((int_32)$3 != (int_32)[0])
	
.LABEL $label$8
	CALL eosio_assert($3, [4288])
	$6 = ($0 + [128])
	$3 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$14 = CALL $67($6, $3)
	
.LABEL $label$11
	CALL current_time()
	$7 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($7, [2736])
	$3 = CALL $158($4, [45], [0])
	*($18 + [432]) = [0]
	*($18 + [424]) = (int_64)0
	*($18 + [416]) = [0]
	*($18 + [408]) = (int_64)0
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$15 }
	CALL $166(($18 + [248]), $4, [0], $3, $4)
	if ( (*($18 + [424]) & [1]) ){ goto $label$14 }
	*($18 + [424]) = [0]
	goto $label$13 
	
.LABEL $label$15
	CALL $152(($18 + [424]), $4)
	goto $label$12 
	
.LABEL $label$14
	*(*(($18 + [432]))) = [0]
	*($18 + [428]) = [0]
	
.LABEL $label$13
	CALL $154(($18 + [424]), [0])
	*((($18 + [424]) + [8])) = *((($18 + [248]) + [8]))
	*($18 + [424]) = *($18 + [248])
	CALL $166(($18 + [248]), $4, ($3 + [1]), [-1], $4)
	if ( (*($18 + [408]) & [1]) ){ goto $label$17 }
	*($18 + [408]) = [0]
	goto $label$16 
	
.LABEL $label$17
	*(*((($18 + [408]) + [8]))) = [0]
	*($18 + [412]) = [0]
	
.LABEL $label$16
	CALL $154(($18 + [408]), [0])
	*((($18 + [408]) + [8])) = *((($18 + [248]) + [8]))
	*($18 + [408]) = *($18 + [248])
	$3 = *($18 + [252])
	*($18 + [412]) = $3
	$4 = *($18 + [408])
	CALL eosio_assert((( $3 ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [13]), [4368])
	
.LABEL $label$12
	$3 = *($18 + [424])
	CALL eosio_assert(((( *($18 + [428]) ? uint_32($3 >> [1]) : ($3 & [1]) ) + [-1]) <= [6]), [4400])
	*($18 + [400]) = $5
	*($18 + [392]) = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $5) * (float_64)(float_64)0.03))
	$3 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($18 + [424]), [0], [10])
	$13 = ((int_64)*([0] + [24]) * (int_64)(CASTING int_64)(int_32 $3))
	*($18 + [384]) = $13
	$9 = (CASTING float_64)(uint_64 $13)
	$1 = (Rounds 0)(((float_64)$9 * (float_64)(float_64)0.02))
	*($18 + [376]) = $1
	$5 = (Rounds 0)(((float_64)$9 * (float_64)(float_64)0.07))
	*($18 + [368]) = $5
	$13 = ((int_64)((int_64)$1 + (int_64)$5) + (int_64)$13)
	*($18 + [360]) = $13
	$1 = *($14 + [40])
	$5 = *($14 + [24])
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)-1) <= (int_64)10000000000), [1152])
	CALL __floatunditf(($18 + [176]), (int_64))($5 - $1))
	CALL __floatunsitf(($18 + [160]), *([0] + [24]))
	$5 = *((($18 + [160]) + [8]))
	$1 = *($18 + [160])
	CALL __divtf3(($18 + [144]), *($18 + [176]), *((($18 + [176]) + [8])), $1, $5)
	CALL __floatunditf(($18 + [192]), $13)
	CALL __divtf3(($18 + [96]), *($18 + [192]), *((($18 + [192]) + [8])), $1, $5)
	CALL __addtf3(($18 + [128]), *($18 + [144]), *((($18 + [144]) + [8])), (int_64)0, (int_64)4611404543450677248)
	$1 = *((($18 + [128]) + [8]))
	$13 = *($18 + [128])
	$2 = *((($18 + [96]) + [8]))
	$5 = *($18 + [96])
	CALL __addtf3(($18 + [80]), $5, $2, $13, $1)
	CALL __multf3(($18 + [112]), $13, $1, $13, $1)
	$16 = *((($18 + [80]) + [8]))
	$15 = *($18 + [80])
	CALL __multf3(($18 + [64]), $15, $16, $15, $16)
	$10 = *((($18 + [112]) + [8]))
	$12 = *($18 + [112])
	$11 = *((($18 + [64]) + [8]))
	$17 = *($18 + [64])
	CALL __subtf3(($18 + [48]), $17, $11, $12, $10)
	CALL __multf3(($18 + [16]), $5, $2, (int_64)0, (int_64)4614206099078250496)
	CALL __divtf3(($18 + [32]), *($18 + [48]), *((($18 + [48]) + [8])), (int_64)0, (int_64)4614806157549109248)
	CALL __addtf3($18, *($18 + [16]), *((($18 + [16]) + [8])), *($18 + [32]), *((($18 + [32]) + [8])))
	CALL eosio_assert(((int_32)((CALL $fimport$10($5, $2, (int_64)0, (int_64)0) | CALL $fimport$10($13, $1, (int_64)0, (int_64)0)) | CALL $fimport$10($15, $16, (int_64)0, (int_64)0)) > (int_32)[-1]), [1184])
	CALL eosio_assert(((int_32)(CALL $fimport$10($17, $11, $12, $10) | (CALL $fimport$10($12, $10, (int_64)0, (int_64)0) | CALL $fimport$10($17, $11, (int_64)0, (int_64)0))) > (int_32)[-1]), [1232])
	CALL floorl(($18 + [208]), *($18), *(($18 + [8])))
	$13 = ((int_64)CALL __fixunstfdi(*($18 + [208]), *($18 + [216])) + (int_64)1)
	*($18 + [352]) = $13
	CALL eosio_assert((((uint_64)$13 > (uint_64)(int_64)799) & ((uint_64)(int_64))(*($18 + [400]) - *($18 + [392])) >= (uint_64)$13)), [4432])
	CALL eosio_assert(((uint_64)((int_64)*($18 + [352]) << (int_64)1) > (uint_64)(int_64))(*($18 + [400]) - *($18 + [392]))), [4512])
	*($18 + [252]) = ($18 + [352])
	*($18 + [248]) = ($18 + [400])
	*($18 + [256]) = ($18 + [360])
	*($18 + [260]) = ($18 + [392])
	*($18 + [264]) = ($18 + [376])
	*($18 + [268]) = ($18 + [368])
	CALL eosio_assert($7, [1904])
	CALL $139($6, $14, (int_64)0, ($18 + [248]))
	if ( (*($0 + [208]) & [1]) ){ goto $label$19 }
	$14 = (($0 + [208]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$14 = *(($0 + [216]))
	
.LABEL $label$18
	$3 = [-1]
	
.LOOP $label$20:
	$4 = ($14 + $3)
	$6 = ($3 + [1])
	$3 = $6
	if ( *(($4 + [1])) ){ goto $label$20 }
	$15 = (CASTING uint_64)(uint_32 $6)
	$13 = (int_64)0
	$1 = (int_64)59
	$2 = (int_64)0
	
.LOOP $label$21:
	$5 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$15) ){ goto $label$22 }
	$3 = *($14)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$26 }
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$25 
	
.LABEL $label$26
	$5 = ((int_64)$5 & (int_64)15)
	
.LABEL $label$25
	$14 = ($14 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$21 }
	$14 = ( *(($18 + [416])) ? (($18 + [408]) | [1]) : (*($18 + [408]) & [1]) )
	$3 = [-1]
	
.LOOP $label$27:
	$4 = ($14 + $3)
	$6 = ($3 + [1])
	$3 = $6
	if ( *(($4 + [1])) ){ goto $label$27 }
	$16 = (CASTING uint_64)(uint_32 $6)
	$13 = (int_64)0
	$1 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$28:
	$5 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$16) ){ goto $label$29 }
	$3 = *($14)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$33 }
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$32 
	
.LABEL $label$33
	$5 = ((int_64)$5 & (int_64)15)
	
.LABEL $label$32
	$14 = ($14 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$5 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$28 }
	*($18 + [344]) = $15
	$13 = *($18 + [440])
	$8 = *(($0 + [192]))
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$34 }
	$14 = ($4 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$35:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$34 }
	$4 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $6) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	$7 = ($0 + [168])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$39 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	if ( $14 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$14 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$37 }
	$14 = CALL $66($7, $14)
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	
.LABEL $label$38
	*($18 + [252]) = ($18 + [352])
	*($18 + [248]) = ($18 + [400])
	*($18 + [256]) = ($18 + [384])
	CALL eosio_assert([1], [1904])
	CALL $141($7, $14, (int_64)0, ($18 + [248]))
	goto $label$36 
	
.LABEL $label$37
	$13 = *($0)
	*($18 + [252]) = ($18 + [344])
	*($18 + [248]) = ($18 + [440])
	*($18 + [256]) = ($18 + [400])
	*($18 + [260]) = ($18 + [352])
	*($18 + [264]) = ($18 + [384])
	CALL $140(($18 + [296]), $7, $13, ($18 + [248]))
	$14 = *($18 + [300])
	
.LABEL $label$36
	CALL eosio_assert((*($14 + [124]) == 0), [4592])
	*($18 + [336]) = *($18 + [376])
	$13 = *($14 + [8])
	if ( (int_64)($13 == 0) ){ goto $label$40 }
	$8 = *(($0 + [192]))
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$41 }
	$14 = ($4 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$42:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$41 }
	$4 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $6) != (int_32)[-24]) ){ goto $label$42 }
	
.LABEL $label$41
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$44 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	if ( $14 ){ goto $label$43 }
	goto $label$40 
	
.LABEL $label$44
	$14 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$40 }
	$14 = CALL $66($7, $14)
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	if ( ($14 == 0) ){ goto $label$40 }
	
.LABEL $label$43
	if ( (int_64)(*($18 + [336]) == 0) ){ goto $label$40 }
	*($18 + [248]) = ($18 + [336])
	CALL eosio_assert([1], [1904])
	CALL $142($7, $14, (int_64)0, ($18 + [248]))
	
.LABEL $label$40
	$8 = *(($0 + [192]))
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$45 }
	$14 = ($4 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$46:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$45 }
	$4 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $6) != (int_32)[-24]) ){ goto $label$46 }
	
.LABEL $label$45
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$48 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	goto $label$47 
	
.LABEL $label$48
	$14 = [0]
	$3 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$47 }
	$14 = CALL $66($7, $3)
	CALL eosio_assert(((int_32)*($14 + [128]) == (int_32)$7), [1840])
	
.LABEL $label$47
	if ( (int_64)(*($18 + [336]) == 0) ){ goto $label$49 }
	*($18 + [248]) = ($18 + [336])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1904])
	CALL $143($7, $14, (int_64)0, ($18 + [248]))
	
.LABEL $label$49
	$11 = *($18 + [392])
	if ( (int_64)($11 == 0) ){ goto $label$50 }
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [2928])
	$13 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [2800])
	$12 = *($0)
	$13 = (int_64)0
	$5 = (int_64)59
	$14 = [2896]
	$15 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$61 }
	$3 = *($14)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$3 = ($3 + [165])
	goto $label$59 
	
.LABEL $label$61
	$1 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$57
	$14 = ($14 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$1 | (int_64)$15)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$56 }
	$13 = (int_64)0
	$5 = (int_64)59
	$14 = [1600]
	$16 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$67 }
	$3 = *($14)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$3 = ($3 + [165])
	goto $label$65 
	
.LABEL $label$67
	$1 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$63
	$14 = ($14 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$62 }
	$13 = (int_64)0
	$5 = (int_64)59
	$14 = [1616]
	$17 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$73 }
	$3 = *($14)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$3 = ($3 + [165])
	goto $label$71 
	
.LABEL $label$73
	$1 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$69
	$14 = ($14 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$68 }
	*(($18 + [240])) = [0]
	*($18 + [232]) = (int_64)0
	$14 = CALL strlen([4640])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$76 }
	*($18 + [232]) = ($14 << [1])
	$3 = (($18 + [232]) | [1])
	if ( $14 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$4 = (($14 + [16]) & [-16])
	$3 = CALL $149($4)
	*($18 + [232]) = ($4 | [1])
	*($18 + [240]) = $3
	*($18 + [236]) = $14
	
.LABEL $label$75
	CALL memcpy($3, [4640], $14)
	
.LABEL $label$74
	*(($3 + $14)) = [0]
	*((($18 + [248]) + [24])) = (int_64)1397703940
	*(($3 = (($18 + [248]) + [36]))) = *($18 + [236])
	*($18 + [256]) = $2
	$14 = ($18 + [240])
	*(($18 + [288])) = *($14)
	*($18 + [248]) = *($0)
	*($18 + [264]) = $11
	*($18 + [280]) = *($18 + [232])
	*($18 + [232]) = [0]
	*($18 + [236]) = [0]
	*($14) = [0]
	*($18 + [296]) = $16
	*($18 + [304]) = $17
	*(($14 = CALL $149([16]))) = $12
	*($14 + [8]) = $15
	*((($18 + [296]) + [32])) = [0]
	$0 = ($14 + [16])
	*((($18 + [296]) + [24])) = $0
	*(($18 + [316])) = $0
	*($18 + [312]) = $14
	*($18 + [324]) = [0]
	*((($18 + [296]) + [36])) = [0]
	$14 = *($18 + [280])
	$3 = ( *($3) ? uint_32($14 >> [1]) : ($14 & [1]) )
	$14 = ($3 + [32])
	$13 = (CASTING uint_64)(uint_32 $3)
	$3 = ($18 + [324])
	
.LOOP $label$77:
	$14 = ($14 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$77 }
	if ( ($14 == 0) ){ goto $label$79 }
	CALL $65($3, $14)
	$3 = *(($18 + [328]))
	$14 = *(($18 + [324]))
	goto $label$78 
	
.LABEL $label$79
	$3 = [0]
	$14 = [0]
	
.LABEL $label$78
	*($18 + [452]) = $14
	*($18 + [448]) = $14
	*($18 + [456]) = $3
	*($18 + [464]) = ($18 + [448])
	*($18 + [472]) = ($18 + [248])
	CALL $95(($18 + [472]), ($18 + [464]))
	CALL $136(($18 + [448]), ($18 + [296]))
	$14 = *($18 + [448])
	CALL send_inline($14, (*($18 + [452]) - $14))
	$14 = *($18 + [448])
	if ( ($14 == 0) ){ goto $label$80 }
	*($18 + [452]) = $14
	CALL $150($14)
	
.LABEL $label$80
	$14 = *($18 + [324])
	if ( ($14 == 0) ){ goto $label$81 }
	*(($18 + [328])) = $14
	CALL $150($14)
	
.LABEL $label$81
	$14 = *($18 + [312])
	if ( ($14 == 0) ){ goto $label$82 }
	*(($18 + [316])) = $14
	CALL $150($14)
	
.LABEL $label$82
	if ( ((*(($18 + [280])) & [1]) == 0) ){ goto $label$83 }
	CALL $150(*(($18 + [288])))
	
.LABEL $label$83
	if ( ((*($18 + [232]) & [1]) == 0) ){ goto $label$50 }
	CALL $150(*(($18 + [240])))
	
.LABEL $label$50
	if ( ((*($18 + [408]) & [1]) == 0) ){ goto $label$84 }
	CALL $150(*(($18 + [416])))
	
.LABEL $label$84
	if ( ((*($18 + [424]) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*(($18 + [432])))
	
.LABEL $label$2
	*([0] + [4]) = ($18 + [480])
	return (unreachable)
	
.LABEL $label$1
	CALL $151(($18 + [232]))
}

int_32 .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	*($0 + [128]) = $1
	*(($0 + [136])) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = [0]
	*(($0 + [156])) = [0]
	*(($0 + [160])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*(($0 + [204])) = [0]
	*(($0 + [216])) = [0]
	*($0 + [208 align=4]) = (int_64)0
	$4 = ($0 + [208])
	$2 = CALL strlen([4000])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $149($3)
	*(($0 + [208])) = ($3 | [1])
	*(($0 + [216])) = $4
	*(($0 + [212])) = $2
	
.LABEL $label$3
	CALL memcpy($4, [4000], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	*($0 + [232]) = [1]
	*($0 + [224]) = *([0] + [36])
	return $0
	
.LABEL $label$1
	CALL $151($4)
	return (unreachable)
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [144])
	*([0] + [4]) = $17
	*($17 + [136]) = $1
	*($17 + [135]) = $2
	*($17 + [120]) = $3
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL require_auth($1)
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)10), [3696])
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$6 }
	if ( uint_32($14 >> [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($4 + [4]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$14 = *($5)
	if ( ($14 & [1]) ){ goto $label$3 }
	$14 = uint_32($14 >> [1])
	goto $label$2 
	
.LABEL $label$4
	$14 = [0]
	goto $label$1 
	
.LABEL $label$3
	$14 = *($5 + [4])
	
.LABEL $label$2
	$14 = ((int_32)$14 != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($14, [3744])
	$10 = ($14 & [1])
	$14 = *($5)
	$14 = ( *($5 + [4]) ? uint_32($14 >> [1]) : $10 )
	$11 = *($5 + [8])
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$8 }
	$13 = ($4 + [1])
	$12 = uint_32($12 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$13 = *($4 + [8])
	$12 = *($4 + [4])
	
.LABEL $label$7
	$16 = ($14 <= $12)
	$15 = ( $14 ? $12 : $16 )
	if ( ($15 == 0) ){ goto $label$10 }
	$10 = CALL memcmp($13, ( $11 ? ($5 + [1]) : $10 ), $15)
	if ( $10 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = ( [-1] ? $16 : ($12 <= $14) )
	
.LABEL $label$9
	CALL eosio_assert($10, [3776])
	$13 = *(($0 + [192]))
	$10 = *(($0 + [196]))
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$11 }
	$14 = ($10 + [-24])
	$11 = ([0] - $13)
	
.LOOP $label$12:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$11 }
	$10 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = ($0 + [168])
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$14 }
	$15 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [128]) == (int_32)$6), [1840])
	goto $label$13 
	
.LABEL $label$14
	$15 = [0]
	$14 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$13 }
	$15 = CALL $66($6, $14)
	CALL eosio_assert(((int_32)*($15 + [128]) == (int_32)$6), [1840])
	
.LABEL $label$13
	$7 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($7, [2640])
	$14 = ($2 + [-2])
	if ( ((uint_32)$14 > (uint_32)[7]) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$24
	$1 = *($15 + [88])
	goto $label$15 
	
.LABEL $label$23
	CALL eosio_assert([0], [1472])
	$1 = (int_64)0
	goto $label$15 
	
.LABEL $label$22
	$1 = *($15 + [96])
	goto $label$15 
	
.LABEL $label$21
	$1 = *($15 + [100])
	goto $label$15 
	
.LABEL $label$20
	$1 = *($15 + [104])
	goto $label$15 
	
.LABEL $label$19
	$1 = *($15 + [108])
	goto $label$15 
	
.LABEL $label$18
	$1 = *($15 + [112])
	goto $label$15 
	
.LABEL $label$17
	$1 = *($15 + [116])
	goto $label$15 
	
.LABEL $label$16
	$1 = *($15 + [120])
	
.LABEL $label$15
	CALL eosio_assert(((uint_64)$1 >= (uint_64)((int_64)*([0] + [24]) * (int_64)$3)), [3808])
	CALL eosio_assert((*($15 + [124]) == 0), [2688])
	$8 = ($0 + [128])
	$16 = [0]
	$14 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$25 }
	$16 = CALL $67($8, $14)
	
.LABEL $label$25
	$9 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($9, [2736])
	$14 = *($4)
	CALL eosio_assert(((int_32)( *($4 + [4]) ? uint_32($14 >> [1]) : ($14 & [1]) ) == (int_32)[40]), [128])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($4, ($17 + [80]), [20])
	$14 = *($5)
	CALL eosio_assert(((int_32)( *(($5 + [4])) ? uint_32($14 >> [1]) : ($14 & [1]) ) == (int_32)[40]), [128])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($5, ($17 + [48]), [20])
	if ( (int_64)($3 == 0) ){ goto $label$26 }
	$11 = ($0 + [8])
	$10 = ($0 + [48])
	$12 = ($0 + [64])
	$13 = ($0 + [56])
	$14 = ($0 + [24])
	$2 = ($0 + [16])
	$5 = ($17 + [20])
	
.LOOP $label$27:
	$1 = *($12)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$28 }
	$1 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($10), *($13), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$29 }
	CALL $88($10, $4)
	*($17 + [12]) = [0]
	*($17 + [8]) = $10
	$1 = ((int_64)*(*(CALL $124(($17 + [8])) + [4])) + (int_64)1)
	
.LABEL $label$29
	*($12) = $1
	
.LABEL $label$28
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [3120])
	*($17 + [40]) = *($12)
	$1 = *($14)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$30 }
	$1 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($11), *($2), (int_64)4733466083778887680, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$31 }
	CALL $78($11, $4)
	*($17 + [12]) = [0]
	*($17 + [8]) = $11
	$1 = ((int_64)*(*(CALL $125(($17 + [8])) + [4])) + (int_64)1)
	
.LABEL $label$31
	*($14) = $1
	
.LABEL $label$30
	$3 = ((int_64)$3 + (int_64)-1)
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [3120])
	$1 = *($14)
	if ( ((uint_64)$1 <= (uint_64)*($17 + [40])) ){ goto $label$32 }
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$33 }
	$1 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($11), *($2), (int_64)4733466083778887680, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$34 }
	CALL $78($11, $4)
	*($17 + [12]) = [0]
	*($17 + [8]) = $11
	$1 = ((int_64)*(*(CALL $125(($17 + [8])) + [4])) + (int_64)1)
	
.LABEL $label$34
	*($14) = $1
	
.LABEL $label$33
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [3120])
	*($17 + [40]) = *($14)
	
.LABEL $label$32
	$1 = *($0)
	*((($17 + [8]) + [8])) = ($17 + [135])
	*($5) = ($17 + [80])
	*((($17 + [8]) + [16])) = ($17 + [48])
	*($17 + [12]) = ($17 + [136])
	*($17 + [8]) = ($17 + [40])
	CALL $126(($17 + [32]), $10, $1, ($17 + [8]))
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$27 }
	
.LABEL $label$26
	*($17 + [12]) = ($17 + [120])
	*($17 + [8]) = ($17 + [135])
	CALL eosio_assert($7, [1904])
	CALL $127($6, $15, (int_64)0, ($17 + [8]))
	*($17 + [12]) = ($17 + [120])
	*($17 + [8]) = ($17 + [135])
	CALL eosio_assert($9, [1904])
	CALL $128($8, $16, (int_64)0, ($17 + [8]))
	*([0] + [4]) = ($17 + [144])
	$14
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1824])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $63(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $133(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $150(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL require_auth($1)
	CALL eosio_assert([0], [3840])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1824])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1824])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $149($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $149($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $164 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $149($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $155($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $162 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $163($1, $0, [13200])
	CALL abort()
	(unreachable)
}

void .FUNC $161 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $163($1, $0, [13216])
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([13184])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $149($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [13184], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($6)
	
.LABEL $label$1
	CALL $162($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [13240]), [13248], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [13232]
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([13288])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	if ( (*($0 + [208]) & [1]) ){ goto $label$2 }
	$8 = (($0 + [208]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *(($0 + [216]))
	
.LABEL $label$1
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	CALL require_auth($11)
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$15 }
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$10 }
	$4 = ($0 + [88])
	$8 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [88]), *(($0 + [96])), (int_64)6761209376641384448, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$8 = CALL $76($4, $7)
	
.LABEL $label$16
	if ( (int_64)($2 == 0) ){ goto $label$14 }
	$8 = CALL db_lowerbound_i64(*(($0 + [88])), *(($0 + [96])), (int_64)6761209376641384448, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $76($4, $8)
	goto $label$13 
	
.LABEL $label$15
	$4 = ($0 + [8])
	$8 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4733466083778887680, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$8 = CALL $78($4, $7)
	
.LABEL $label$17
	if ( (int_64)($2 == 0) ){ goto $label$12 }
	$8 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4733466083778887680, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $78($4, $8)
	goto $label$11 
	
.LABEL $label$14
	if ( ($8 == 0) ){ goto $label$10 }
	
.LABEL $label$13
	
.LOOP $label$18:
	$3 = ((int_64)$3 + (int_64)-1)
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	CALL $150(($8 + [48]))
	CALL $150(($8 + [80]))
	$7 = [0]
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [2176])
	CALL eosio_assert($6, [2224])
	$6 = CALL db_next_i64(*($8 + [116]), ($13 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$19 }
	$7 = CALL $76($4, $6)
	
.LABEL $label$19
	CALL $77($4, $8)
	$8 = $7
	if ( $7 ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	
.LOOP $label$20:
	$3 = ((int_64)$3 + (int_64)-1)
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	CALL $150(($8 + [32]))
	CALL $150(($8 + [64]))
	CALL $150(($8 + [96]))
	$7 = [0]
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [2176])
	CALL eosio_assert($6, [2224])
	$6 = CALL db_next_i64(*($8 + [132]), ($13 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$7 = CALL $78($4, $6)
	
.LABEL $label$21
	CALL $79($4, $8)
	$8 = $7
	if ( $7 ){ goto $label$20 }
	
.LABEL $label$10
	*([0] + [4]) = ($13 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1824])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [1824])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [1824])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1824])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [1824])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [1])
	CALL eosio_assert(((uint_32)($1 + [-9]) > (uint_32)[7]), [1824])
	$5 = ($8 + [24])
	CALL memcpy($5, ($6 + [9]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$6 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($6 & [255])), (int_32 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [47]) = $2
	*($10 + [32]) = $3
	CALL eosio_assert(*($0 + [232]), [3296])
	CALL require_auth($1)
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)4999), [3328])
	$4 = ($2 + [-3])
	CALL eosio_assert((($4 & [255]) <= [7]), [3376])
	$5 = *(($0 + [192]))
	$9 = *(($0 + [196]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [168])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$6), [1840])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $66($6, $7)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$6), [1840])
	
.LABEL $label$3
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [2640])
	CALL eosio_assert((*($8 + [124]) == 0), [2688])
	$7 = ($2 + [-2])
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	$1 = *($8 + [88])
	goto $label$5 
	
.LABEL $label$13
	CALL eosio_assert([0], [1472])
	$1 = (int_64)0
	goto $label$5 
	
.LABEL $label$12
	$1 = *($8 + [96])
	goto $label$5 
	
.LABEL $label$11
	$1 = *($8 + [100])
	goto $label$5 
	
.LABEL $label$10
	$1 = *($8 + [104])
	goto $label$5 
	
.LABEL $label$9
	$1 = *($8 + [108])
	goto $label$5 
	
.LABEL $label$8
	$1 = *($8 + [112])
	goto $label$5 
	
.LABEL $label$7
	$1 = *($8 + [116])
	goto $label$5 
	
.LABEL $label$6
	$1 = *($8 + [120])
	
.LABEL $label$5
	CALL eosio_assert(((uint_64)$1 >= (uint_64)((int_64)*([0] + [24]) * (int_64)$3)), [3424])
	$9 = ($0 + [128])
	$7 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $67($9, $0)
	
.LABEL $label$15
	$0 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($0, [2736])
	if ( ((uint_32)($4 & [255]) >= (uint_32)[7]) ){ goto $label$17 }
	$1 = *(((int_32(($4 << [24]) >> [24]) << [3]) + [1040]))
	goto $label$16 
	
.LABEL $label$17
	CALL eosio_assert([0], [992])
	$1 = (int_64)0
	
.LABEL $label$16
	*($10 + [24]) = $1
	CALL eosio_assert(((int_64)$1 != (int_64)0), [3472])
	*($10 + [12]) = ($10 + [32])
	*($10 + [8]) = ($10 + [47])
	*($10 + [16]) = ($10 + [24])
	CALL eosio_assert($5, [1904])
	CALL $116($6, $8, (int_64)0, ($10 + [8]))
	*($10 + [12]) = ($10 + [32])
	*($10 + [8]) = ($10 + [24])
	*($10 + [16]) = ($10 + [47])
	CALL eosio_assert($0, [1904])
	CALL $117($9, $7, (int_64)0, ($10 + [8]))
	*([0] + [4]) = ($10 + [48])
	$7
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	if ( (*($0 + [208]) & [1]) ){ goto $label$2 }
	$7 = (($0 + [208]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(($0 + [216]))
	
.LABEL $label$1
	$6 = [-1]
	
.LOOP $label$3:
	$5 = ($7 + $6)
	$1 = ($6 + [1])
	$6 = $1
	if ( *(($5 + [1])) ){ goto $label$3 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$2) ){ goto $label$5 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$6 = ($6 + [165])
	goto $label$6 
	
.LABEL $label$7
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$4 }
	*($12 + [24]) = $10
	CALL require_auth($10)
	$3 = ($0 + [128])
	$7 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL $67($3, $6)
	goto $label$10 
	
.LABEL $label$11
	$7 = [1]
	
.LABEL $label$10
	CALL eosio_assert($7, [3056])
	$4 = *(($0 + [192]))
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$12 }
	$7 = ($5 + [-24])
	$1 = ([0] - $4)
	
.LOOP $label$13:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$12 }
	$5 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = ($0 + [168])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$15 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$7), [1840])
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$5 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $66($7, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$7), [1840])
	
.LABEL $label$14
	CALL eosio_assert(($6 == 0), [3088])
	*($12 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$9 = *($0)
	*($12) = $0
	*($12 + [4]) = ($12 + [16])
	CALL $111(($12 + [8]), $3, $9, $12)
	$9 = *($0)
	*($12) = ($12 + [24])
	CALL $112(($12 + [8]), $7, $9, $12)
	*([0] + [4]) = ($12 + [32])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	if ( (*($0 + [208]) & [1]) ){ goto $label$2 }
	$5 = (($0 + [208]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($0 + [216]))
	
.LABEL $label$1
	$4 = [-1]
	
.LOOP $label$3:
	$3 = ($5 + $4)
	$1 = ($4 + [1])
	$4 = $1
	if ( *(($3 + [1])) ){ goto $label$3 }
	$2 = (CASTING uint_64)(uint_32 $1)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$2) ){ goto $label$5 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [165])
	goto $label$6 
	
.LABEL $label$7
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$9 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$4 }
	CALL require_auth($8)
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$4 = ($0 + [168])
	$5 = CALL $66($4, $5)
	
.LOOP $label$11:
	*($10 + [8]) = ((uint_64)*($5 + [88]) / (uint_64)(int_64)10)
	*($10) = ($10 + [8])
	CALL eosio_assert([1], [1904])
	CALL $109($4, $5, (int_64)0, $10)
	CALL eosio_assert([1], [2224])
	$5 = CALL db_next_i64(*($5 + [132]), ($10 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $66($4, $5)
	goto $label$11 
	
.LABEL $label$10
	$5 = ($0 + [128])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $67($5, $4)
	
.LABEL $label$12
	*($10 + [12]) = $3
	*($10 + [8]) = $5
	*($10) = ($10 + [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1904])
	CALL $110($5, $3, (int_64)0, $10)
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_32 $34
	$34 = (*([0] + [4]) - [224])
	*([0] + [4]) = $34
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($1 + [4]) != (int_32)*($1)), [2432])
	*($34 + [192]) = [0]
	*($34 + [188]) = [0]
	$2 = (($34 + [184]) | [4])
	*($34 + [184]) = $2
	$3 = *($1 + [4])
	$25 = *($1)
	if ( ((int_32)$25 == (int_32)$3) ){ goto $label$2 }
	$7 = ($0 + [8])
	$6 = ($0 + [128])
	$5 = ($0 + [168])
	$4 = ($0 + [48])
	$14 = ($0 + [72])
	$15 = ($0 + [76])
	$16 = ($0 + [56])
	$17 = ($0 + [192])
	$18 = ($0 + [196])
	$19 = ($0 + [176])
	$20 = ($0 + [136])
	$21 = ($0 + [32])
	$22 = ($0 + [36])
	$23 = ($0 + [16])
	$24 = (($34 + [16]) + [12])
	
.LOOP $label$3:
	$1 = CALL $158($25, [45], [0])
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2464])
	CALL $166($34, $25, [0], $1, $25)
	CALL $166(($34 + [200]), $25, ($1 + [1]), [-1], $25)
	$1 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($34, [0], [10])
	CALL eosio_assert(($1 <= [1000001]), [2496])
	$9 = *($34 + [200])
	CALL eosio_assert(((int_32)( *($34 + [204]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[64]), [2528])
	$30 = (CASTING int_64)(int_32 $1)
	$27 = *($14)
	$26 = *($15)
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$4 }
	$1 = ($26 + [-24])
	$8 = ([0] - $27)
	
.LOOP $label$5:
	if ( ((int_64)*(*($1)) == (int_64)$30) ){ goto $label$4 }
	$26 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$7 }
	$1 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$4), [1840])
	goto $label$6 
	
.LABEL $label$7
	$1 = CALL db_find_i64(*($4), *($16), (int_64)4229865212519383040, $30)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL $88($4, $1)
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$4), [1840])
	goto $label$6 
	
.LABEL $label$8
	$1 = [0]
	
.LABEL $label$6
	*($34 + [180]) = $1
	*($34 + [176]) = $4
	$9 = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [2576])
	$1 = *($34 + [180])
	if ( (int_64)(*($1 + [8]) == 0) ){ goto $label$9 }
	$9 = ((int_32)*($1 + [20]) != (int_32)[0])
	
.LABEL $label$9
	CALL eosio_assert($9, [2608])
	$31 = *(*($34 + [180]) + [8])
	$27 = *($17)
	$26 = *($18)
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$10 }
	$1 = ($26 + [-24])
	$8 = ([0] - $27)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$31) ){ goto $label$10 }
	$26 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$13 }
	$27 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($27 + [128]) == (int_32)$5), [1840])
	goto $label$12 
	
.LABEL $label$13
	$27 = [0]
	$1 = CALL db_find_i64(*($5), *($19), (int_64)-3020371635640205312, $31)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$27 = CALL $66($5, $1)
	CALL eosio_assert(((int_32)*($27 + [128]) == (int_32)$5), [1840])
	
.LABEL $label$12
	$28 = [0]
	$10 = ((int_32)$27 != (int_32)[0])
	CALL eosio_assert($10, [2640])
	CALL eosio_assert((*($27 + [124]) == 0), [2688])
	$1 = CALL db_lowerbound_i64(*($6), *($20), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$14 }
	$28 = CALL $67($6, $1)
	
.LABEL $label$14
	$11 = ((int_32)$28 != (int_32)[0])
	CALL eosio_assert($11, [2736])
	$12 = *($21)
	$26 = *($22)
	if ( ((int_32)$26 == (int_32)$12) ){ goto $label$15 }
	$1 = ($26 + [-24])
	$8 = ([0] - $12)
	
.LOOP $label$16:
	if ( ((int_64)*(*($1)) == (int_64)$30) ){ goto $label$15 }
	$26 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$26 == (int_32)$12) ){ goto $label$18 }
	$1 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$7), [1840])
	goto $label$17 
	
.LABEL $label$18
	$1 = [0]
	$9 = CALL db_find_i64(*($7), *($23), (int_64)4733466083778887680, $30)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	$1 = CALL $78($7, $9)
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$7), [1840])
	
.LABEL $label$17
	CALL eosio_assert(($1 == 0), [2768])
	$9 = *($34 + [200])
	CALL eosio_assert(((int_32)( *($34 + [204]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[64]), [112])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj(($34 + [200]), ($34 + [64]), [32])
	$30 = ((int_64)((int_64)(CASTING uint_64)(uint_32 CALL _Z14get_random_intRK11checksum256RK11checksum160(($34 + [64]), ($1 + [32]))) * (int_64)1000) + (int_64)(CASTING uint_64)(uint_32 CALL _Z14get_random_intRK11checksum256RK11checksum160(($34 + [64]), ($1 + [64]))))
	*($34 + [168]) = $30
	$1 = CALL _Z10get_payouthy(*(*($34 + [180]) + [20]), $30)
	*($34 + [167]) = $1
	*($34 + [216]) = [0]
	*($34 + [160]) = [0]
	*($34 + [156]) = [0]
	*($34 + [152]) = [0]
	*($34 + [148]) = [0]
	*($34 + [144]) = [0]
	*($34 + [140]) = [0]
	$1 = ($1 + [-3])
	if ( ((uint_32)$1 > (uint_32)[6]) ){ goto $label$19 }
	goto $label$26 
	
.LABEL $label$26
	*($34 + [216]) = [1]
	goto $label$19 
	
.LABEL $label$25
	*($34 + [160]) = [1]
	goto $label$19 
	
.LABEL $label$24
	*($34 + [156]) = [1]
	goto $label$19 
	
.LABEL $label$23
	*($34 + [152]) = [1]
	goto $label$19 
	
.LABEL $label$22
	*($34 + [148]) = [1]
	goto $label$19 
	
.LABEL $label$21
	*($34 + [144]) = [1]
	goto $label$19 
	
.LABEL $label$20
	*($34 + [140]) = [1]
	
.LABEL $label$19
	$30 = *($0)
	*(($1 = (($34 + [16]) + [8]))) = ($34 + [168])
	*($24) = ($34 + [64])
	*($34 + [20]) = ($34 + [167])
	*($34 + [16]) = ($34 + [176])
	CALL $89(($34 + [128]), $7, $30, ($34 + [16]))
	if ( (((((((*($34 + [160]) | *($34 + [216])) | *($34 + [156])) | *($34 + [152])) | *($34 + [148])) | *($34 + [144])) | *($34 + [140])) == 0) ){ goto $label$28 }
	*($1) = ($34 + [156])
	*($24) = ($34 + [152])
	*(($9 = (($34 + [16]) + [16]))) = ($34 + [148])
	*(($26 = ($34 + [36]))) = ($34 + [144])
	*(($8 = (($34 + [16]) + [24]))) = ($34 + [140])
	*($34 + [20]) = ($34 + [160])
	*($34 + [16]) = ($34 + [216])
	CALL eosio_assert($10, [1904])
	CALL $90($5, $27, (int_64)0, ($34 + [16]))
	*($1) = ($34 + [156])
	*($24) = ($34 + [152])
	*($9) = ($34 + [148])
	*($26) = ($34 + [144])
	*($8) = ($34 + [140])
	*($34 + [20]) = ($34 + [160])
	*($34 + [16]) = ($34 + [216])
	CALL eosio_assert($11, [1904])
	CALL $91($6, $28, (int_64)0, ($34 + [16]))
	goto $label$27 
	
.LABEL $label$28
	if ( *($34 + [167]) ){ goto $label$27 }
	$27 = *($34 + [180])
	$1 = *($27 + [20])
	$29 = ( (int_64)100000 ? ( (int_64)50000 ? ( (int_64)10000 ? ( (int_64)4000 ? ( (int_64)1000 ? (int_64)0 : ((int_32)($1 | [1]) == (int_32)[3]) ) : ((int_32)$1 == (int_32)[4]) ) : ((int_32)$1 == (int_32)[5]) ) : ((int_32)$1 == (int_32)[6]) ) : ((int_32)$1 == (int_32)[7]) )
	$8 = ((int_32)$1 == (int_32)[8])
	$1 = *($34 + [188])
	if ( ($1 == 0) ){ goto $label$31 }
	$30 = *(($27 + [8]))
	$9 = $2
	
.LOOP $label$32:
	$31 = *($1 + [16])
	if ( ((uint_64)$30 >= (uint_64)$31) ){ goto $label$34 }
	$26 = *($1)
	if ( $26 ){ goto $label$33 }
	goto $label$30 
	
.LABEL $label$34
	if ( ((uint_64)$31 >= (uint_64)$30) ){ goto $label$29 }
	$9 = ($1 + [4])
	$26 = *($1 + [4])
	if ( ($26 == 0) ){ goto $label$29 }
	$1 = $9
	
.LABEL $label$33
	$9 = $1
	$1 = $26
	goto $label$32 
	
.LABEL $label$31
	$1 = $2
	$9 = $2
	goto $label$29 
	
.LABEL $label$30
	$9 = $1
	
.LABEL $label$29
	$30 = ( (int_64)300000 ? $29 : $8 )
	$26 = *($9)
	if ( $26 ){ goto $label$35 }
	*(($26 = CALL $149([32]))) = (int_64)0
	*($26 + [8]) = $1
	*($9) = $26
	$31 = *(($27 + [8]))
	*($26 + [24]) = (int_64)0
	*($26 + [16]) = $31
	$1 = $26
	$8 = *(*($34 + [184]))
	if ( ($8 == 0) ){ goto $label$36 }
	*($34 + [184]) = $8
	$1 = *($9)
	
.LABEL $label$36
	CALL $92(*($34 + [188]), $1)
	*(($1 = (($34 + [184]) + [8]))) = (*($1) + [1])
	
.LABEL $label$35
	*(($1 = ($26 + [24]))) = ((int_64)*($1) + (int_64)$30)
	
.LABEL $label$27
	$30 = *($34 + [176])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$30 >> (uint_64)(int_64)32)
	$9 = ((int_32)$1) != (int_32)[0]
	CALL eosio_assert($9), [2176])
	CALL eosio_assert($9, [2224])
	$9 = CALL db_next_i64(*($1 + [100]), ($34 + [16]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$37 }
	CALL $88((CASTING uint_32)(uint_64 $30), $9)
	
.LABEL $label$37
	CALL $93($4, $1)
	if ( ((*($34 + [200]) & [1]) == 0) ){ goto $label$38 }
	CALL $150(*((($34 + [200]) + [8])))
	
.LABEL $label$38
	if ( ((*($34) & [1]) == 0) ){ goto $label$39 }
	CALL $150(*(($34 + [8])))
	
.LABEL $label$39
	$25 = ($25 + [12])
	if ( ((int_32)$25 != (int_32)$3) ){ goto $label$3 }
	$9 = *($34 + [184])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$2 }
	$12 = (($34 + [64]) + [36])
	$17 = ($34 | [1])
	$7 = ($34 + [76])
	$6 = (($34 + [64]) + [16])
	$4 = (($34 + [64]) + [20])
	$24 = (($34 + [64]) + [28])
	$27 = (($34 + [64]) + [40])
	$28 = ($34 + [108])
	$5 = ($34 + [112])
	$10 = ($34 + [116])
	$11 = ($34 + [120])
	$25 = (($34 + [16]) + [32])
	$3 = ($25 + [4])
	
.LOOP $label$40:
	$26 = $9
	$33 = *($26 + [24])
	if ( (int_64)($33 == 0) ){ goto $label$41 }
	$13 = *($26 + [16])
	CALL eosio_assert((uint_64)(((int_64)$33 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [2928])
	$30 = (int_64)1279743309
	$1 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $30) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	
.LOOP $label$46:
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$9 = [0]
	
.LABEL $label$42
	CALL eosio_assert($9, [2800])
	$30 = CALL current_time()
	*($7) = [0]
	*($6) = [0]
	*($4) = [0]
	*((($34 + [64]) + [24])) = [0]
	*($24) = [0]
	*((($34 + [64]) + [32])) = [0]
	*($34 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$30 / (uint_64)(int_64)1000000)) + [60])
	*($12) = [0]
	*($27) = [0]
	*($28) = [0]
	*($5) = [0]
	*($10) = [0]
	*($11) = [0]
	$30 = (int_64)0
	$31 = (int_64)59
	$1 = [2832]
	$32 = (int_64)0
	
.LOOP $label$47:
	$29 = (int_64)0
	if ( ((uint_64)$30 > (uint_64)(int_64)11) ){ goto $label$48 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$9 = ($9 + [165])
	goto $label$49 
	
.LABEL $label$50
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$29 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$48
	$1 = ($1 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$32 = ((int_64)$29 | (int_64)$32)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$47 }
	*(($8 = ($34 + [8]))) = [0]
	*($34) = (int_64)0
	$1 = CALL strlen([2848])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$53 }
	*($34) = ($1 << [1])
	$9 = $17
	if ( $1 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$14 = (($1 + [16]) & [-16])
	$9 = CALL $149($14)
	*($8) = $9
	*($34) = ($14 | [1])
	*($34 + [4]) = $1
	
.LABEL $label$52
	CALL memcpy($9, [2848], $1)
	
.LABEL $label$51
	*(($9 + $1)) = [0]
	*((($34 + [16]) + [8])) = $13
	*((($34 + [16]) + [16])) = $33
	*((($34 + [16]) + [24])) = (int_64)327614287108
	*($3) = *($34 + [4])
	*(($25 + [8])) = *($8)
	*($34 + [16]) = $32
	*($25) = *($34)
	$33 = *($0)
	$30 = (int_64)0
	$29 = (int_64)59
	$1 = [2896]
	$32 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$30 > (uint_64)(int_64)5) ){ goto $label$59 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$9 = ($9 + [165])
	goto $label$57 
	
.LABEL $label$59
	$31 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$31 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$31 = ((int_64)((int_64)$31 & (int_64)31) << (int_64)((int_64)$29 & (int_64)4294967295))
	
.LABEL $label$55
	$1 = ($1 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$32 = ((int_64)$31 | (int_64)$32)
	$29 = ((int_64)$29 + (int_64)-5)
	if ( ((int_64)$29 != (int_64)-6) ){ goto $label$54 }
	*($8) = $32
	*($34) = $33
	$30 = (int_64)0
	$31 = (int_64)59
	$1 = [2912]
	$32 = (int_64)0
	
.LOOP $label$60:
	$29 = (int_64)0
	if ( ((uint_64)$30 > (uint_64)(int_64)11) ){ goto $label$61 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$9 = ($9 + [165])
	goto $label$62 
	
.LABEL $label$63
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$29 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$61
	$1 = ($1 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$32 = ((int_64)$29 | (int_64)$32)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$60 }
	*($34 + [176]) = $32
	$30 = (int_64)0
	$29 = (int_64)59
	$1 = [1616]
	$33 = (int_64)0
	
.LOOP $label$64:
	if ( ((uint_64)$30 > (uint_64)(int_64)7) ){ goto $label$69 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$9 = ($9 + [165])
	goto $label$67 
	
.LABEL $label$69
	$31 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$31 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$66
	$31 = ((int_64)((int_64)$31 & (int_64)31) << (int_64)((int_64)$29 & (int_64)4294967295))
	
.LABEL $label$65
	$1 = ($1 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$33 = ((int_64)$31 | (int_64)$33)
	$29 = ((int_64)$29 + (int_64)-5)
	if ( ((int_64)$29 != (int_64)-6) ){ goto $label$64 }
	*($34 + [168]) = $33
	$9 = *($27)
	if ( ((uint_32)$9 >= (uint_32)*($28)) ){ goto $label$73 }
	*($9 + [8]) = $33
	*($9) = $32
	*($9 + [16 align=4]) = (int_64)0
	*(($14 = ($9 + [24]))) = [0]
	$1 = CALL $149([16])
	*($9 + [16]) = $1
	$15 = ($1 + [16])
	*($14) = $15
	*(($1 + [8])) = *($8)
	*($1) = *($34)
	*(($9 + [20])) = $15
	*($9 + [28]) = [0]
	*(($14 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$1 = *($25)
	$8 = ( *((($34 + [16]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($8 + [32])
	$30 = (CASTING uint_64)(uint_32 $8)
	$9 = ($9 + [28])
	
.LOOP $label$74:
	$1 = ($1 + [1])
	$30 = (uint_64)$30 >> (uint_64)(int_64)7
	if ( ((int_64)$30) != (int_64)0) ){ goto $label$74 }
	if ( ($1 == 0) ){ goto $label$72 }
	CALL $65($9, $1)
	$8 = *($14)
	$1 = *($9)
	goto $label$71 
	
.LABEL $label$73
	CALL $96($12, $34, ($34 + [176]), ($34 + [168]), ($34 + [16]))
	goto $label$70 
	
.LABEL $label$72
	$8 = [0]
	$1 = [0]
	
.LABEL $label$71
	*((($34 + [200]) + [8])) = $8
	*($34 + [204]) = $1
	*($34 + [200]) = $1
	*($34 + [216]) = ($34 + [200])
	*($34 + [128]) = ($34 + [16])
	CALL $95(($34 + [128]), ($34 + [216]))
	*($27) = (*($27) + [40])
	
.LABEL $label$70
	*($4) = [1]
	*($34 + [8]) = (int_64)0
	*($34) = $13
	$30 = *($0)
	CALL $97(($34 + [200]), ($34 + [64]))
	$1 = *($34 + [200])
	CALL send_deferred($34, $30, $1, (*($34 + [204]) - $1), [0])
	$1 = *($34 + [200])
	if ( ($1 == 0) ){ goto $label$75 }
	*($34 + [204]) = $1
	CALL $150($1)
	
.LABEL $label$75
	if ( ((*($25) & [1]) == 0) ){ goto $label$76 }
	CALL $150(*((($34 + [16]) + [40])))
	
.LABEL $label$76
	CALL $98(($34 + [64]))
	
.LABEL $label$41
	$1 = *($26 + [4])
	if ( ($1 == 0) ){ goto $label$78 }
	
.LOOP $label$79:
	$9 = $1
	$1 = *($9)
	if ( $1 ){ goto $label$79 }
	goto $label$77 
	
.LABEL $label$78
	$9 = *($26 + [8])
	if ( ((int_32)*($9) == (int_32)$26) ){ goto $label$77 }
	$26 = ($26 + [8])
	
.LOOP $label$80:
	$1 = *($26)
	$26 = ($1 + [8])
	$9 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($9)) ){ goto $label$80 }
	
.LABEL $label$77
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$40 }
	
.LABEL $label$2
	CALL $94(($34 + [184]), *($34 + [188]))
	*([0] + [4]) = ($34 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $151($34)
	$1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [48])
	*([0] + [4]) = $2
	*(($3 = $2) + [28]) = $0
	*($3 + [16]) = *($1)
	*($3 + [20]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $0)
	CALL $85(($3 + [32]), $3)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [36]) = ($3 + [16])
	*($3 + [32]) = ($3 + [28])
	CALL $86(($3 + [32]), $3)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	$1 = *($3 + [4])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $150(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *($3)
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3 + [4]) = $2
	CALL $150($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [48])
	return [1]
}

void .FUNC $57 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [64])
	*([0] + [4]) = $16
	if ( (*($0 + [208]) & [1]) ){ goto $label$2 }
	$15 = (($0 + [208]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$15 = *(($0 + [216]))
	
.LABEL $label$1
	$4 = [-1]
	
.LOOP $label$3:
	$3 = ($15 + $4)
	$9 = ($4 + [1])
	$4 = $9
	if ( *(($3 + [1])) ){ goto $label$3 }
	$1 = (CASTING uint_64)(uint_32 $9)
	$6 = (int_64)0
	$5 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$4:
	$8 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$1) ){ goto $label$5 }
	$4 = *($15)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [165])
	goto $label$6 
	
.LABEL $label$7
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$9 }
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$8 = ((int_64)$8 & (int_64)15)
	
.LABEL $label$8
	$15 = ($15 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$4 }
	CALL require_auth($7)
	*($16 + [60]) = [0]
	*($16 + [56]) = [0]
	*($16 + [52]) = [0]
	*($16 + [48]) = [0]
	*($16 + [44]) = [0]
	*($16 + [40]) = [0]
	*($16 + [36]) = [0]
	*($16 + [32]) = [0]
	$15 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$10 }
	$2 = ($0 + [168])
	$15 = CALL $66($2, $15)
	$4 = [0]
	$3 = [0]
	$9 = [0]
	$10 = [0]
	$11 = [0]
	$12 = [0]
	$13 = [0]
	$14 = [0]
	
.LOOP $label$11:
	*($16 + [60]) = ((int_64)(CASTING uint_64)(uint_32 $14) + (int_64)*($15 + [88]))
	*($16 + [56]) = ($13 + *($15 + [96]))
	*($16 + [52]) = ($12 + *($15 + [100]))
	*($16 + [48]) = ($11 + *($15 + [104]))
	*($16 + [44]) = ($10 + *($15 + [108]))
	*($16 + [40]) = ($9 + *($15 + [112]))
	*($16 + [36]) = ($3 + *($15 + [116]))
	*($16 + [32]) = ($4 + *($15 + [120]))
	CALL eosio_assert([1], [2224])
	$15 = CALL db_next_i64(*($15 + [132]), $16)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $66($2, $15)
	$4 = *($16 + [32])
	$3 = *($16 + [36])
	$9 = *($16 + [40])
	$10 = *($16 + [44])
	$11 = *($16 + [48])
	$12 = *($16 + [52])
	$13 = *($16 + [56])
	$14 = *($16 + [60])
	goto $label$11 
	
.LABEL $label$10
	$4 = ($0 + [128])
	$15 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$12 }
	$15 = CALL $67($4, $3)
	
.LABEL $label$12
	*($16 + [4]) = ($16 + [56])
	*($16) = ($16 + [60])
	*($16 + [8]) = ($16 + [52])
	*($16 + [12]) = ($16 + [48])
	*($16 + [16]) = ($16 + [44])
	*($16 + [20]) = ($16 + [40])
	*($16 + [24]) = ($16 + [36])
	*($16 + [28]) = ($16 + [32])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1904])
	CALL $84($4, $15, (int_64)0, $16)
	*([0] + [4]) = ($16 + [64])
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $153($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $149($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $150($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $150 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $151 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $157($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $149($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $150($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $149(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $150($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $155 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $153($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [14496]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $185(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [14976]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [15008]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [15014] ? [15009] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [14978] ? [14976] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [15011]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $168()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [14976]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [14976]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [14960])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [14976])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [14992] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [14976]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [15072] ? [15088] : $30 ) ? ( [15040] ? [15056] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [14976]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [14977]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [14976] ? [14981] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14960])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [14960])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [14960])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([15104], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([15104], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([15104], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $185(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $185(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $185(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $185(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $185(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $185(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $185(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $185(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [124]) = [1]
	$4 = *($1)
	*($6 + [152]) = $4
	CALL eosio_assert([1], [2064])
	*($6 + [144]) = ($6 + [128])
	*($6 + [140]) = $6
	*($6 + [136]) = $6
	CALL $70(($6 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $6, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [168]) = *($1)
	if ( (CALL memcmp(($6 + [152]), ($6 + [168]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [136])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [160]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [72]) = (int_64))(*($1 + [72]) - *(*(*($3) + [4]) + [88]))
	$4 = *($1)
	*($1 + [80]) = (*($1 + [80]) - *(*(*($3) + [4]) + [96]))
	*($1 + [84]) = (*($1 + [84]) - *(*(*($3) + [4]) + [100]))
	*($1 + [88]) = (*($1 + [88]) - *(*(*($3) + [4]) + [104]))
	*($1 + [92]) = (*($1 + [92]) - *(*(*($3) + [4]) + [108]))
	*($1 + [96]) = (*($1 + [96]) - *(*(*($3) + [4]) + [112]))
	*($1 + [100]) = (*($1 + [100]) - *(*(*($3) + [4]) + [116]))
	*($1 + [104]) = (*($1 + [104]) - *(*(*($3) + [4]) + [120]))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*(*($3) + [4]) + [56]))
	CALL eosio_assert([1], [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $149($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $164($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $150($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1808])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $65($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1824])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [2144])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $149([152])) + [136]) = $0
	CALL $72(($7 + [16]), $5)
	*($5 + [140]) = $1
	*($7 + [8]) = $5
	$6 = *($5)
	*($7 + [4]) = $6
	$1 = *($5 + [140])
	*($7) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [16]) = $1
	*($4 + [8]) = (CASTING uint_64)(uint_32 $6)
	*($7 + [8]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $73(($0 + [24]), ($7 + [8]), ($7 + [4]), $7)
	
.LABEL $label$8
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $150($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $149([144])) + [128]) = $0
	CALL $74(($8 + [32]), $6)
	*($6 + [136]) = [-1]
	*($6 + [132]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [132])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $75(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $150($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $63(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $165(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $165(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $150(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $150(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	if ( (*($0 + [208]) & [1]) ){ goto $label$2 }
	$6 = (($0 + [208]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *(($0 + [216]))
	
.LABEL $label$1
	$5 = [-1]
	
.LOOP $label$3:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$3 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$9 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$5 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [165])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$4 }
	CALL require_auth($10)
	if ( (*($1) & [1]) ){ goto $label$11 }
	$6 = ($1 + [1])
	goto $label$10 
	
.LABEL $label$11
	$6 = *($1 + [8])
	
.LABEL $label$10
	$5 = [-1]
	
.LOOP $label$12:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$12 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$13:
	$9 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$14 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$18 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$17 
	
.LABEL $label$18
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$13 }
	$1 = *(($0 + [192]))
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$19 }
	$6 = ($4 + [-24])
	$2 = ([0] - $1)
	
.LOOP $label$20:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$19 }
	$4 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$6 = ($0 + [168])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$24 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$6), [1840])
	*($11 + [28]) = $5
	*($11 + [24]) = $6
	if ( $5 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$5 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-3020371635640205312, $10)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$22 }
	$5 = CALL $66($6, $5)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$6), [1840])
	*($11 + [28]) = $5
	*($11 + [24]) = $6
	
.LABEL $label$23
	if ( *($5 + [124]) ){ goto $label$21 }
	$4 = ($0 + [128])
	$5 = [0]
	$2 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$5 = CALL $67($4, $2)
	
.LABEL $label$25
	*($11 + [16]) = ($11 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1904])
	CALL $68($4, $5, (int_64)0, ($11 + [16]))
	$5 = *($11 + [28])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1904])
	CALL $69($6, $5, (int_64)0, ($11 + [8]))
	goto $label$21 
	
.LABEL $label$22
	*($11 + [28]) = [0]
	*($11 + [24]) = $6
	
.LABEL $label$21
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $64($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $154($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $149($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $154($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $150($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $151($7)
	return (unreachable)
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( ((*($0 + [208]) & [1]) == 0) ){ goto $label$1 }
	CALL $150(*(($0 + [216])))
	
.LABEL $label$1
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($0 + [196])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $150($2)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($0 + [192]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL $150($4)
	
.LABEL $label$2
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [156])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $150($2)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($0 + [152]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $150($4)
	
.LABEL $label$7
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$12 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $150($2)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($0 + [112]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $1
	
.LABEL $label$13
	*($3) = $1
	CALL $150($4)
	
.LABEL $label$12
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$17 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$21 }
	CALL $150($2)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($0 + [72]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $1
	
.LABEL $label$18
	*($3) = $1
	CALL $150($4)
	
.LABEL $label$17
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$22 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $150($2)
	
.LABEL $label$26
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($0 + [32]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $1
	
.LABEL $label$23
	*($3) = $1
	CALL $150($4)
	
.LABEL $label$22
	return $0
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [2992])
	*(($4 = CALL $149([144])) + [128]) = $1
	$6 = *($3)
	$7 = *($6 + [4])
	*($4) = *($7)
	*($4 + [8]) = *($7 + [8])
	*($4 + [20]) = *($7 + [20])
	*(($4 + [56])) = *(($7 + [56]))
	*(($4 + [48])) = *(($7 + [48]))
	*(($4 + [40])) = *(($7 + [40]))
	*($4 + [32]) = *($7 + [32])
	$7 = *($6 + [4])
	*($4 + [64]) = *($7 + [64])
	*(($4 + [88])) = *(($7 + [88]))
	*(($4 + [80])) = *(($7 + [80]))
	*(($4 + [72])) = *(($7 + [72]))
	*($4 + [21]) = *(*($3 + [4]))
	*($4 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($4 + [24]) = *(*($3 + [8]))
	$7 = *($3 + [12])
	*(($4 + [124])) = *(($7 + [28]))
	*(($4 + [120])) = *(($7 + [24]))
	*(($4 + [116])) = *(($7 + [20]))
	*(($4 + [112])) = *(($7 + [16]))
	*(($4 + [108])) = *(($7 + [12]))
	*(($4 + [104])) = *(($7 + [8]))
	*(($4 + [100])) = *(($7 + [4]))
	*($4 + [96]) = *($7)
	*($8 + [136]) = (($8 + [16]) + [98])
	*($8 + [132]) = ($8 + [16])
	*($8 + [128]) = ($8 + [16])
	CALL $106(($8 + [128]), $4)
	$5 = *($4)
	*($4 + [132]) = CALL db_store_i64(*($1 + [8]), (int_64)4733466083778887680, $2, $5, ($8 + [16]), [98])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	*($8 + [128]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [132])
	*($8 + [12]) = $3
	$7 = *(($1 + [28]))
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $3
	*($8 + [128]) = [0]
	*($7) = $4
	*(($1 + [28])) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $81(($1 + [24]), ($8 + [128]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $150($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [144])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $149([112])) + [96]) = $0
	CALL $107(($8 + [32]), $6)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $108(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $150($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $149(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $150(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $150($5)
	
.LABEL $label$14
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	$2 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL $149($3)
	*(($4 + [8])) = ($3 + ((int_32)$2 * (int_32)[12]))
	*($4) = $3
	*($4 + [4]) = $3
	$1 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $165($3, $2)
	$3 = ($3 + [12])
	$2 = ($2 + [12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$3 }
	*($4 + [4]) = $3
	
.LABEL $label$2
	$3 = *($0 + [4])
	$1 = *($3 + [4])
	$2 = (*(*($0)) + int_32($1 >> [1]))
	$3 = *($3)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$3 = *((*($2) + $3))
	
.LABEL $label$4
	CALL void $2((int_32 $4), (int_32 $3))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$5 }
	$3 = *($4 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$7 }
	$2 = ([0] - $1)
	$3 = ($3 + [-12])
	
.LOOP $label$8:
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $150(*(($3 + [8])))
	
.LABEL $label$9
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $2) != (int_32)[-12]) ){ goto $label$8 }
	$3 = *($4)
	goto $label$6 
	
.LABEL $label$7
	$3 = $1
	
.LABEL $label$6
	*($4 + [4]) = $1
	CALL $150($3)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $164($4)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1808])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $87($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $150(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $63($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [72]) = *(*($3))
	*($1 + [80]) = *(*($3 + [4]))
	$4 = *($1)
	*($1 + [84]) = *(*($3 + [8]))
	*($1 + [88]) = *(*($3 + [12]))
	*($1 + [92]) = *(*($3 + [16]))
	*($1 + [96]) = *(*($3 + [20]))
	*($1 + [100]) = *(*($3 + [24]))
	*($1 + [104]) = *(*($3 + [28]))
	CALL eosio_assert([1], [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $150($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1824])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [1824])
	CALL memcpy(($1 + [48]), *($0 + [4]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [1824])
	CALL memcpy(($1 + [80]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $150($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1824])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1824])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1824])
	CALL memcpy(($1 + [21]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [1824])
	CALL memcpy(($1 + [32]), *($0 + [4]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [1824])
	CALL memcpy(($1 + [64]), *($0 + [4]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [1824])
	CALL memcpy(($1 + [96]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	return $0
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $183([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $183($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $183($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13180])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [13064])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12872]
	$1 = (((int_32)$2 * (int_32)[12]) + [12872])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $146([4680], $0)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [160])
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$3 = *(*($4 + [4]))
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = $3
	$2 = *($0)
	*($1 + [24]) = *(*($4 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	$3 = *(*($4 + [16]))
	*($1 + [48]) = (int_64)0
	*($1 + [40]) = $3
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = *(*($4 + [16]))
	*($1 + [96]) = [0]
	*($1 + [100]) = [0]
	*($1 + [104]) = [0]
	*($1 + [108]) = [0]
	*($1 + [112]) = [0]
	*($1 + [116]) = [0]
	*($1 + [120]) = [0]
	*($1 + [124]) = [0]
	*($7 + [144]) = ($7 + [128])
	*($7 + [140]) = $7
	*($7 + [136]) = $7
	CALL $70(($7 + [136]), $1)
	$3 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $3, $7, [128])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [152]) = $6
	*($1 + [136]) = CALL db_idx64_store($3, (int_64)-3020371635640205312, $5, $6, ($7 + [152]))
	*([0] + [4]) = ($7 + [160])
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13174]) == 0) ){ goto $label$2 }
	$7 = *([0] + [13176])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [13174]) = [1]
	$7 = ($7 << [16])
	*([0] + [13176]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13176])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [13176]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [13174]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [13174]) = [1]
	$3 = ($3 << [16])
	*([0] + [13176]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13176])
	
.LABEL $label$8
	*([0] + [13176]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $147($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [13088])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	*($5 + [152]) = $4
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [4])))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [8])))
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3 + [8])))
	CALL eosio_assert([1], [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [2992])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $149([144])) + [128]) = $1
	CALL $144(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $150($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3)))
	$4 = *($1)
	*($5 + [152]) = $4
	CALL eosio_assert([1], [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3)))
	$4 = *($1)
	*($5 + [152]) = $4
	CALL eosio_assert([1], [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1824])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [4]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [80]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [84]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [88]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [92]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [100]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [108]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $150($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [108]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [116]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [124]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [84]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [92]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [108]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $149([128])) + [112]) = $0
	CALL $82(($8 + [32]), $6)
	*($6 + [116]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [116])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $83(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $150($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [2256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2304])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [2368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $150($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $150($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [100]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [108]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [116]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [120]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [124]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $150($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [2144])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $149([144])) + [128]) = $0
	CALL $80(($8 + [32]), $6)
	*($6 + [132]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [132])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $81(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $150($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [2256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2304])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [2368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $150($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $150($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [132]))
}

int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $150($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $150($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $150($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $150($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $150($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $150($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $150($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $150($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $94($0, *($1))
	CALL $94($0, *($1 + [4]))
	CALL $150($1)
	
.LABEL $label$1
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [2128])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [2128])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [2128])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $105(*($1), ($0 + [32]))
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $149([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $65($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $95(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $150($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $150($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $150($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $99($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $65($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $100($4, $1)
	CALL $102(CALL $101(CALL $101($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	*($6 + [152]) = $4
	$5 = *([0] + [24])
	*($1 + [96]) = (*($1 + [96]) + ((int_32)$5 * (int_32)*(*($3))))
	*($1 + [100]) = (*($1 + [100]) + ((int_32)$5 * (int_32)*(*($3 + [4]))))
	*($1 + [104]) = (*($1 + [104]) + ((int_32)$5 * (int_32)*(*($3 + [8]))))
	*($1 + [108]) = (*($1 + [108]) + ((int_32)$5 * (int_32)*(*($3 + [12]))))
	*($1 + [112]) = (*($1 + [112]) + ((int_32)$5 * (int_32)*(*($3 + [16]))))
	*($1 + [116]) = (*($1 + [116]) + ((int_32)$5 * (int_32)*(*($3 + [20]))))
	*($1 + [120]) = (*($1 + [120]) + ((int_32)$5 * (int_32)*(*($3 + [24]))))
	CALL eosio_assert([1], [2064])
	*($6 + [144]) = ($6 + [128])
	*($6 + [140]) = $6
	*($6 + [136]) = $6
	CALL $70(($6 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $6, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [168]) = *($1)
	if ( (CALL memcmp(($6 + [152]), ($6 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$5 = *([0] + [24])
	*($1 + [80]) = (*($1 + [80]) + ((int_32)$5 * (int_32)*(*($3))))
	$4 = *($1)
	*($1 + [84]) = (*($1 + [84]) + ((int_32)$5 * (int_32)*(*($3 + [4]))))
	*($1 + [88]) = (*($1 + [88]) + ((int_32)$5 * (int_32)*(*($3 + [8]))))
	*($1 + [92]) = (*($1 + [92]) + ((int_32)$5 * (int_32)*(*($3 + [12]))))
	*($1 + [96]) = (*($1 + [96]) + ((int_32)$5 * (int_32)*(*($3 + [16]))))
	*($1 + [100]) = (*($1 + [100]) + ((int_32)$5 * (int_32)*(*($3 + [20]))))
	*($1 + [104]) = (*($1 + [104]) + ((int_32)$5 * (int_32)*(*($3 + [24]))))
	CALL eosio_assert([1], [2064])
	*($6 + [152]) = ($6 + [136])
	*($6 + [148]) = $6
	*($6 + [144]) = $6
	CALL $71(($6 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $6, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [160])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [2256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2304])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = *($1)
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [2368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $150($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $150($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $165(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $165(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $150(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [8])))
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3 + [8])))
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [12])))
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)*(*($3 + [16])))
	*($1 + [128]) = ((int_64)*($1 + [128]) + (int_64)*(*($3 + [20])))
	CALL eosio_assert([1], [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *(*($0))
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$1 }
	*($1 + [88]) = (int_64))(*($1 + [88]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$1
	if ( ((int_32)($2 & [255]) != (int_32)[3]) ){ goto $label$2 }
	*($1 + [96]) = (int_64))(*($1 + [96]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$2
	if ( ((int_32)($2 & [255]) != (int_32)[4]) ){ goto $label$3 }
	*($1 + [100]) = (int_64))(*($1 + [100]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$3
	if ( ((int_32)($2 & [255]) != (int_32)[5]) ){ goto $label$4 }
	*($1 + [104]) = (int_64))(*($1 + [104]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$4
	if ( ((int_32)($2 & [255]) != (int_32)[6]) ){ goto $label$5 }
	*($1 + [108]) = (int_64))(*($1 + [108]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$5
	if ( ((int_32)($2 & [255]) != (int_32)[7]) ){ goto $label$6 }
	*($1 + [112]) = (int_64))(*($1 + [112]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$6
	if ( ((int_32)($2 & [255]) != (int_32)[8]) ){ goto $label$7 }
	*($1 + [116]) = (int_64))(*($1 + [116]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$7
	if ( ((int_32)($2 & [255]) != (int_32)[9]) ){ goto $label$8 }
	*($1 + [120]) = (int_64))(*($1 + [120]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	
.LABEL $label$8
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [96]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$3 = *($2)
	*($0 + [20]) = *(*($1 + [8]))
	$5 = *($1 + [12])
	*($0 + [32]) = *($5)
	*(($0 + [56])) = *(($5 + [24]))
	*(($0 + [48])) = *(($5 + [16]))
	*(($0 + [40])) = *(($5 + [8]))
	$1 = *($1 + [16])
	*($0 + [64]) = *($1)
	*(($0 + [88])) = *(($1 + [24]))
	*(($0 + [80])) = *(($1 + [16]))
	*(($0 + [72])) = *(($1 + [8]))
	*($0 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [72]) = ($6 + [57])
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $132(($6 + [64]), $0)
	$4 = *($0)
	*($0 + [100]) = CALL db_store_i64(*($3 + [8]), (int_64)4229865212519383040, *(*($2 + [8])), $4, $6, [57])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[19]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[19]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [20])
	*($0 + [4]) = (*($0 + [4]) + [20])
	return $0
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $165($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $165(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $150(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	*($6 + [152]) = $4
	$5 = *([0] + [24])
	*($1 + [88]) = (int_64))(*($1 + [88]) - ((int_64)$5 * (int_64)*(*($3))))
	*($1 + [56]) = ((int_64)((int_64)$5 * (int_64)*(*($3))) + (int_64)*($1 + [56]))
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert([1], [2064])
	*($6 + [144]) = ($6 + [128])
	*($6 + [140]) = $6
	*($6 + [136]) = $6
	CALL $70(($6 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $6, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [168]) = *($1)
	if ( (CALL memcmp(($6 + [152]), ($6 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$5 = *([0] + [24])
	*($1 + [72]) = (int_64))(*($1 + [72]) - ((int_64)$5 * (int_64)*(*($3))))
	$4 = *($1)
	*($1 + [40]) = ((int_64)((int_64)$5 * (int_64)*(*($3))) + (int_64)*($1 + [40]))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [4])))
	CALL eosio_assert([1], [2064])
	*($6 + [152]) = ($6 + [136])
	*($6 + [148]) = $6
	*($6 + [144]) = $6
	CALL $71(($6 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $6, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [160])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $65($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [2128])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [2128])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $103(CALL $104($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
}

void .FUNC $208 ()
{
	(unreachable)
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [17185])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [17185])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [17185]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [17185]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [17456]))
	$10 = *(($13 + [17185]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [17185]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [17185]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [17185]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [17185])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [17185])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *(*($0))
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$1 }
	*($1 + [72]) = (int_64))(*($1 + [72]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$1
	if ( ((int_32)($2 & [255]) != (int_32)[3]) ){ goto $label$2 }
	*($1 + [80]) = (int_64))(*($1 + [80]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$2
	if ( ((int_32)($2 & [255]) != (int_32)[4]) ){ goto $label$3 }
	*($1 + [84]) = (int_64))(*($1 + [84]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$3
	if ( ((int_32)($2 & [255]) != (int_32)[5]) ){ goto $label$4 }
	*($1 + [88]) = (int_64))(*($1 + [88]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$4
	if ( ((int_32)($2 & [255]) != (int_32)[6]) ){ goto $label$5 }
	*($1 + [92]) = (int_64))(*($1 + [92]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$5
	if ( ((int_32)($2 & [255]) != (int_32)[7]) ){ goto $label$6 }
	*($1 + [96]) = (int_64))(*($1 + [96]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$6
	if ( ((int_32)($2 & [255]) != (int_32)[8]) ){ goto $label$7 }
	*($1 + [100]) = (int_64))(*($1 + [100]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$7
	if ( ((int_32)($2 & [255]) != (int_32)[9]) ){ goto $label$8 }
	*($1 + [104]) = (int_64))(*($1 + [104]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	
.LABEL $label$8
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	CALL $129($3, $1)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

int_32 .FUNC _Z8from_hexc (int_32 $0)
{
	if ( ((uint_32)(($0 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$2 }
	$0 = ($0 + [208])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$3 }
	$0 = ($0 + [169])
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)(($0 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$0 = ($0 + [201])
	goto $label$1 
	
.LABEL $label$4
	$0 = [0]
	CALL eosio_assert([0], [48])
	
.LABEL $label$1
	return ($0 & [255])
}

int_32 .FUNC _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$13 = $1
	$9 = ($9 & [1])
	$9 = *($0)
	if ( (( *($0 + [4]) ? uint_32($9 >> [1]) : $9 ) == 0) ){ goto $label$1 }
	$3 = ($0 + [1])
	$5 = ($0 + [8])
	$9 = ( *($5) ? $3 : $9 )
	$8 = ($2 + [-1])
	$13 = $1
	
.LOOP $label$2:
	$2 = *($9)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$4 }
	$2 = ($2 + [208])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($2 + [169])
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$2 = ($2 + [201])
	goto $label$3 
	
.LABEL $label$6
	$2 = [0]
	CALL eosio_assert([0], [48])
	
.LABEL $label$3
	$10 = ($2 << [4])
	*($13) = $10
	$7 = ($0 + [4])
	$11 = *($7)
	$2 = *($0)
	$6 = ($2 & [1])
	$12 = *($5)
	$4 = ($9 + [1])
	if ( ((int_32)$4 == (int_32)(( $12 ? $3 : $6 ) + ( $11 ? uint_32($2 >> [1]) : $6 ))) ){ goto $label$10 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$2 = ($2 + [208])
	goto $label$8 
	
.LABEL $label$10
	$9 = $4
	$13 = ($13 + [1])
	if ( $8 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$11 }
	$2 = ($2 + [169])
	goto $label$8 
	
.LABEL $label$11
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$12 }
	$2 = ($2 + [201])
	goto $label$8 
	
.LABEL $label$12
	$2 = [0]
	CALL eosio_assert([0], [48])
	$10 = *($13)
	
.LABEL $label$8
	*($13) = ($10 | $2)
	$9 = ($9 + [2])
	$11 = *($7)
	$12 = *($5)
	$2 = *($0)
	$13 = ($13 + [1])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$8 = ($8 + [-1])
	$4 = ($2 & [1])
	if ( ((int_32)$9 != (int_32)(( $12 ? $3 : $4 ) + ( $11 ? uint_32(($2 & [254]) >> [1]) : $4 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($13 - $1)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $165(($6 + [16]), ($1 + [24]))
	CALL $165($6, ($1 + [36]))
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $165(($6 + [48]), ($6 + [16]))
	CALL $165(($6 + [32]), $6)
	CALL void $0((int_32 $2), (int_64 ($3 & [255])), (int_32 $4), (int_64 ($6 + [48])), (int_32 ($6 + [32])), (int_32 $1))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*($6 + [40]))
	
.LABEL $label$2
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $150(*($6 + [56]))
	
.LABEL $label$3
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL $150(*($6 + [8]))
	
.LABEL $label$4
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $150(*($6 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1824])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1824])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($2 + [24]))
	CALL $63(*($1), ($2 + [36]))
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	$5 = *(*($3))
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$1 }
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)((int_64)*([0] + [24]) * (int_64)*(*($3 + [4]))))
	$5 = *(*($3))
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)[4]) ){ goto $label$3 }
	$5 = *([0] + [24])
	*($1 + [84]) = ((int_64)*($1 + [84]) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) * (int_64)*(*($3 + [4]))))
	goto $label$2 
	
.LABEL $label$3
	$5 = *([0] + [24])
	
.LABEL $label$2
	*($1 + [72]) = (int_64))(*($1 + [72]) - ((int_64)((int_64)*(*(($3 + [4]))) * (int_64)(CASTING uint_64)(uint_32 $5)) * (int_64)*(*($3 + [8]))))
	CALL eosio_assert([1], [2064])
	$7 = $7
	$3 = ($7 + [-144])
	*([0] + [4]) = $3
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($7 + [-8])
	CALL $71($6, $1)
	CALL db_update_i64(*(($1 + [140])), $2, $3, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	*(($6 = $7) + [24]) = $4
	$5 = *(*($3))
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$1 }
	*($1 + [96]) = ((int_64)*($1 + [96]) + (int_64)((int_64)*([0] + [24]) * (int_64)*(*($3 + [4]))))
	$5 = *(*($3))
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)[4]) ){ goto $label$3 }
	$5 = *([0] + [24])
	*($1 + [100]) = ((int_64)*($1 + [100]) + (int_64)((int_64)(CASTING uint_64)(uint_32 $5) * (int_64)*(*($3 + [4]))))
	goto $label$2 
	
.LABEL $label$3
	$5 = *([0] + [24])
	
.LABEL $label$2
	*($1 + [88]) = (int_64))(*($1 + [88]) - ((int_64)((int_64)*(*(($3 + [4]))) * (int_64)(CASTING uint_64)(uint_32 $5)) * (int_64)*(*($3 + [8]))))
	CALL eosio_assert([1], [2064])
	$7 = $7
	$3 = ($7 + [-128])
	*([0] + [4]) = $3
	*($6 + [12]) = $3
	*($6 + [8]) = $3
	*($6 + [16]) = $7
	CALL $70(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $3, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *($1)
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($6 + [32]), $4)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [2992])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $149([112])
	CALL $131($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $108(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $150($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [132]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3248])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4733466083778887680)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3184])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3184])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $78(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [100]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3248])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3184])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3184])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $88(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_64 .FUNC _Z11uint64_hashRK11checksum256 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($0 + $3))
	CALL $156($4, *((uint_32($2 >> [4]) + [80])))
	CALL $156($4, *((($2 & [15]) + [80])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$1 = CALL _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*(($4 + [8])))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [16])
	return $1
}

int_64 .FUNC _Z11uint64_hashRK11checksum160 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($0 + $3))
	CALL $156($4, *((uint_32($2 >> [4]) + [80])))
	CALL $156($4, *((($2 & [15]) + [80])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
	$1 = CALL _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*(($4 + [8])))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [16])
	return $1
}

void .FUNC _Z13hex_to_sha256RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[64]), [112])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [32])
}

void .FUNC _Z11hex_to_sha1RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == (int_32)[40]), [128])
	CALL _Z8from_hexRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPcj($1, $0, [20])
}

void .FUNC _Z6to_hexPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $156($0, *((uint_32($3 >> [4]) + [80])))
	CALL $156($0, *((($3 & [15]) + [80])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC _Z13sha256_to_hexRK11checksum256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $156($0, *((uint_32($2 >> [4]) + [80])))
	CALL $156($0, *((($2 & [15]) + [80])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
}

void .FUNC _Z11sha1_to_hexRK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($1 + $3))
	CALL $156($0, *((uint_32($2 >> [4]) + [80])))
	CALL $156($0, *((($2 & [15]) + [80])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$1 }
}

int_64 .FUNC _Z11uint64_hashRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$2 = *($0)
	$3 = ($2 & [1])
	$5 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$1 = ($3 + [-4])
	$0 = $5
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($6 + [12]), $0, [4])
	$4 = ((int_32)*($6 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($1 & [-4])
	$5 = (($5 + $0) + [4])
	$3 = ($1 - $0)
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($5 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($5 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)*($5) ^ (int_32)$2) * (int_32)[1540483477])
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [144])
	$2 = CALL $158($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $166($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [176])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $154($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $149($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [208]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [208])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $149($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $150($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $20($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $21($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $150($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([464], [480], [186], [512])
	return (unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [15120])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [15216]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [15216]
	return .LABEL $label$1
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	*($5 + [152]) = $4
	CALL $119($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	$4 = *($1)
	CALL $118($3, $1)
	CALL eosio_assert(((int_32)$4 == (int_32)*($1)), [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = ($2 + [144])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($2 + [128])
	$4 = CALL db_lowerbound_i64(*($3), *(($2 + [136])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $67($3, $4)
	*($7 + [12]) = [0]
	*($7 + [8]) = $3
	$6 = (CASTING uint_64)(uint_32 (*(*(CALL $115(($7 + [8])) + [4])) + [1]))
	
.LABEL $label$2
	*(($2 + [144])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [3120])
	*($1) = *($5)
	$6 = *(*($0 + [4]))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [4]) = $6
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = [0]
	*($1 + [84]) = [0]
	*($1 + [88]) = [0]
	*($1 + [92]) = [0]
	*($1 + [96]) = [0]
	*($1 + [100]) = [0]
	*($1 + [104]) = [0]
	*($1 + [108]) = [0]
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [128]) = (CASTING uint_64)(uint_32 ((int_32)*([0] + [24]) * (int_32)[18000]))
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [140]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3248])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3184])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3184])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $67(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [2992])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $149([144])) + [128]) = $1
	CALL $113(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $150($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	*($1) = *(*(*($0 + [4])))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = [0]
	*($1 + [100]) = [0]
	*($1 + [104]) = [0]
	*($1 + [108]) = [0]
	*($1 + [112]) = [0]
	*($1 + [116]) = [0]
	*($1 + [120]) = [0]
	*($1 + [124]) = [0]
	*($6 + [144]) = ($6 + [128])
	*($6 + [140]) = $6
	*($6 + [136]) = $6
	CALL $70(($6 + [136]), $1)
	$3 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $3, $6, [128])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$4 = *(*(($0 + [8])))
	$5 = *($1)
	*($6 + [152]) = $5
	*($1 + [136]) = CALL db_idx64_store($3, (int_64)-3020371635640205312, $4, $5, ($6 + [152]))
	*([0] + [4]) = ($6 + [160])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [72]) = ((uint_64)*(*(*($3) + [4]) + [72]) / (uint_64)(int_64)10)
	$4 = *($1)
	*($1 + [24]) = ((uint_64)*(*(*($3) + [4]) + [24]) / (uint_64)(int_64)10)
	CALL eosio_assert([1], [2064])
	*($5 + [152]) = ($5 + [136])
	*($5 + [148]) = $5
	*($5 + [144]) = $5
	CALL $71(($5 + [144]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $5, [136])
	if ( (uint_64)((CASTING uint_64)(uint_32 $4) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = (CASTING uint_64)(uint_32 ($4 + [1]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$19()), [2992])
	*(($4 = CALL $149([152])) + [136]) = $1
	CALL $114($3, $4)
	*($9 + [168]) = (($9 + [16]) + [136])
	*($9 + [164]) = ($9 + [16])
	*($9 + [160]) = ($9 + [16])
	CALL $71(($9 + [160]), $4)
	$3 = *($4)
	$7 = (CASTING uint_64)(uint_32 $3)
	*($4 + [140]) = CALL db_store_i64(*($1 + [8]), (int_64)7035937633859534848, $2, $7, ($9 + [16]), [136])
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = (CASTING uint_64)(uint_32 ($3 + [1]))
	
.LABEL $label$1
	*($9 + [16]) = $4
	$5 = *($4)
	*($9 + [160]) = $5
	$6 = *($4 + [140])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [16]) = $6
	*($3 + [8]) = (CASTING uint_64)(uint_32 $5)
	*($9 + [16]) = [0]
	*($3) = $4
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $73(($1 + [24]), ($9 + [16]), ($9 + [160]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [16])
	*($9 + [16]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $150($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [176])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$2 = *([0] + [24])
	*($1 + [72]) = ((int_64)((int_64)((int_64)*(*($0 + [4])) * (int_64)*(*($0))) * (int_64)$2) + (int_64)*($1 + [72]))
	$3 = *(*($0 + [8]))
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	*($1 + [80]) = (int_64))(*($1 + [80]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$1
	if ( ((int_32)($3 & [255]) != (int_32)[4]) ){ goto $label$2 }
	*($1 + [84]) = (int_64))(*($1 + [84]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$2
	if ( ((int_32)($3 & [255]) != (int_32)[5]) ){ goto $label$3 }
	*($1 + [88]) = (int_64))(*($1 + [88]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$3
	if ( ((int_32)($3 & [255]) != (int_32)[6]) ){ goto $label$4 }
	*($1 + [92]) = (int_64))(*($1 + [92]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$4
	if ( ((int_32)($3 & [255]) != (int_32)[7]) ){ goto $label$5 }
	*($1 + [96]) = (int_64))(*($1 + [96]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$5
	if ( ((int_32)($3 & [255]) != (int_32)[8]) ){ goto $label$6 }
	*($1 + [100]) = (int_64))(*($1 + [100]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	$3 = *(*(($0 + [8])))
	
.LABEL $label$6
	if ( ((int_32)($3 & [255]) != (int_32)[9]) ){ goto $label$7 }
	*($1 + [104]) = (int_64))(*($1 + [104]) - ((int_64)$2 * (int_64)*(*(($0 + [4])))))
	
.LABEL $label$7
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *(*($0))
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$1 }
	*($1 + [96]) = (int_64))(*($1 + [96]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$1
	if ( ((int_32)($2 & [255]) != (int_32)[4]) ){ goto $label$2 }
	*($1 + [100]) = (int_64))(*($1 + [100]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$2
	if ( ((int_32)($2 & [255]) != (int_32)[5]) ){ goto $label$3 }
	*($1 + [104]) = (int_64))(*($1 + [104]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$3
	if ( ((int_32)($2 & [255]) != (int_32)[6]) ){ goto $label$4 }
	*($1 + [108]) = (int_64))(*($1 + [108]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$4
	if ( ((int_32)($2 & [255]) != (int_32)[7]) ){ goto $label$5 }
	*($1 + [112]) = (int_64))(*($1 + [112]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$5
	if ( ((int_32)($2 & [255]) != (int_32)[8]) ){ goto $label$6 }
	*($1 + [116]) = (int_64))(*($1 + [116]) - ((int_64)*([0] + [24]) * (int_64)*(*($0 + [4]))))
	$2 = *(*($0))
	
.LABEL $label$6
	if ( ((int_32)($2 & [255]) != (int_32)[9]) ){ goto $label$8 }
	$2 = *([0] + [24])
	*($1 + [120]) = (int_64))(*($1 + [120]) - ((int_64)(CASTING uint_64)(uint_32 $2) * (int_64)*(*($0 + [4]))))
	goto $label$7 
	
.LABEL $label$8
	$2 = *([0] + [24])
	
.LABEL $label$7
	*($1 + [88]) = ((int_64)((int_64)((int_64)*(*(($0 + [4]))) * (int_64)*(*($0 + [8]))) * (int_64)(CASTING uint_64)(uint_32 $2)) + (int_64)*($1 + [88]))
}

int_32 .FUNC _Z7get_nowv ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _Z14get_random_intRK11checksum256RK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($0 + $5))
	CALL $156($7, *((uint_32($3 >> [4]) + [80])))
	CALL $156($7, *((($3 & [15]) + [80])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$5 = *($7)
	$3 = ($5 & [1])
	$6 = ( *(($7 + [8])) ? ($7 | [1]) : $3 )
	$2 = ( *($7 + [4]) ? uint_32($5 >> [1]) : $3 )
	if ( ($2 <= [4]) ){ goto $label$5 }
	$0 = $2
	$5 = $6
	$3 = $2
	
.LOOP $label$6:
	CALL memcpy(($7 + [12]), $5, [4])
	$4 = ((int_32)*($7 + [12]) * (int_32)[1540483477])
	$3 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$3 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$0 = ($0 + [-4])
	if ( ((uint_32)$0 > (uint_32)[3]) ){ goto $label$6 }
	$5 = ($2 + [-4])
	$0 = ($5 & [-4])
	$6 = (($6 + $0) + [4])
	$2 = ($5 - $0)
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = $2
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$2 }
	$3 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$3)
	
.LABEL $label$7
	$3 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$3)
	
.LABEL $label$3
	$3 = ((int_32)((int_32)*($6) ^ (int_32)$3) * (int_32)[1540483477])
	
.LABEL $label$2
	$5 = ((int_32)((int_32)uint_32($3 >> [13]) ^ (int_32)$3) * (int_32)[1540483477])
	$5 = ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*(($7 + [8])))
	
.LABEL $label$8
	$2 = ($5 + [-1640531527])
	$5 = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	
.LOOP $label$9:
	$3 = *(($1 + $5))
	CALL $156($7, *((uint_32($3 >> [4]) + [80])))
	CALL $156($7, *((($3 & [15]) + [80])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$9 }
	$5 = *($7)
	$3 = ($5 & [1])
	$6 = ( *(($7 + [8])) ? ($7 | [1]) : $3 )
	$4 = ( *($7 + [4]) ? uint_32($5 >> [1]) : $3 )
	if ( ($4 <= [4]) ){ goto $label$13 }
	$0 = $4
	$5 = $6
	$3 = $4
	
.LOOP $label$14:
	CALL memcpy(($7 + [12]), $5, [4])
	$1 = ((int_32)*($7 + [12]) * (int_32)[1540483477])
	$3 = ((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)$3 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$0 = ($0 + [-4])
	if ( ((uint_32)$0 > (uint_32)[3]) ){ goto $label$14 }
	$5 = ($4 + [-4])
	$0 = ($5 & [-4])
	$6 = (($6 + $0) + [4])
	$4 = ($5 - $0)
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$3 = $4
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$15 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$10 }
	$3 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$3)
	
.LABEL $label$15
	$3 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$3)
	
.LABEL $label$11
	$3 = ((int_32)((int_32)*($6) ^ (int_32)$3) * (int_32)[1540483477])
	
.LABEL $label$10
	$5 = ((int_32)((int_32)uint_32($3 >> [13]) ^ (int_32)$3) * (int_32)[1540483477])
	$5 = ((int_32)(((($2 << [6]) + uint_32($2 >> [2])) + ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)) + [-1640531527]) ^ (int_32)$2)
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL $150(*(($7 + [8])))
	
.LABEL $label$16
	*([0] + [4]) = ($7 + [16])
	return ((uint_32)$5 % (uint_32)[1000])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $149($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $150($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $150($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $149($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $164($0)
}

void .FUNC _Z10str_to_sigRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [176])
	*([0] + [4]) = $7
	$4 = [0]
	$5 = CALL $158($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [528])
	CALL $166(($7 + [160]), $1, [0], $5, $1)
	$6 = *($7 + [160])
	$3 = CALL strlen([560])
	if ( ((int_32)$3 != (int_32)( *($7 + [164]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $159(($7 + [160]), [0], [-1], [560], $3) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [576])
	$6 = ($5 + [1])
	$4 = CALL $158($1, [95], $6)
	CALL eosio_assert(((int_32)$4 != (int_32)[-1]), [624])
	CALL $166(($7 + [144]), $1, $6, ($4 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($7 + [144])
	$6 = CALL strlen([656])
	if ( ((int_32)$6 != (int_32)( *($7 + [148]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $159(($7 + [144]), [0], [-1], [656], $6) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$6 = *($7 + [144])
	$3 = CALL strlen([672])
	if ( ((int_32)$3 != (int_32)( *($7 + [148]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $159(($7 + [144]), [0], [-1], [672], $3) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [688])
	$5 = [0]
	$6 = *($7 + [144])
	$3 = CALL strlen([656])
	if ( ((int_32)$3 != (int_32)( *($7 + [148]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $159(($7 + [144]), [0], [-1], [656], $3) == 0)
	
.LABEL $label$5
	CALL $166(($7 + [128]), $1, ($4 + [1]), [-1], $1)
	$1 = *($7 + [128])
	CALL eosio_assert(((int_32)( *($7 + [132]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [704])
	*($7 + [112]) = (int_64)0
	*($7 + [120]) = [0]
	CALL eosio_assert(CALL $19(( *($7 + [136]) ? (($7 + [128]) | [1]) : (*($7 + [128]) & [1]) ), ($7 + [112])), [736])
	CALL eosio_assert(((int_32)(*($7 + [116]) - *($7 + [112])) == (int_32)[69]), [768])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($7 + [40]), *($7 + [112]), [65])
	*($7 + [106]) = [49]
	*($7 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($7 + [40]), [67], $7)
	CALL eosio_assert((CALL $206($7, (*($7 + [116]) + [-4]), [4]) == 0), [800])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($7 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($7 + [116]) = $5
	CALL $150($5)
	if ( ((*($7 + [128]) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*(($7 + [136])))
	
.LABEL $label$8
	if ( ((*($7 + [144]) & [1]) == 0) ){ goto $label$9 }
	CALL $150(*($7 + [152]))
	
.LABEL $label$9
	if ( ((*($7 + [160]) & [1]) == 0) ){ goto $label$10 }
	CALL $150(*($7 + [168]))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [176])
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

void .FUNC _Z11assert_seedRK11checksum256S1_ (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($0 + $3))
	CALL $156($4, *((uint_32($2 >> [4]) + [80])))
	CALL $156($4, *((($2 & [15]) + [80])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$2 = ($4 + [8])
	$3 = ( *($2) ? ($4 | [1]) : (*($4) & [1]) )
	CALL assert_sha256($3, CALL $207($3), $1)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $150(*($2))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _Z10str_to_pubRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	$3 = CALL strlen([832])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($6 + [112]) = ($3 << [1])
	$4 = (($6 + [112]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $149($5)
	*($6 + [112]) = ($5 | [1])
	*($6 + [120]) = $4
	*($6 + [116]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [832], $3)
	
.LABEL $label$2
	$5 = [0]
	*(($4 + $3)) = [0]
	$3 = *($6 + [112])
	CALL $166(($6 + [96]), $1, ( *($6 + [116]) ? uint_32($3 >> [1]) : ($3 & [1]) ), [-1], $1)
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = [0]
	CALL eosio_assert(CALL $19(( *($6 + [104]) ? (($6 + [96]) | [1]) : (*($6 + [96]) & [1]) ), ($6 + [80])), [848])
	CALL eosio_assert(((int_32)(*($6 + [84]) - *($6 + [80])) == (int_32)[37]), [880])
	if ( (*($2) == 0) ){ goto $label$5 }
	CALL memmove(($6 + [40]), *($6 + [80]), [33])
	CALL ripemd160(($6 + [40]), [33], $6)
	CALL eosio_assert((CALL $206($6, (*($6 + [84]) + [-4]), [4]) == 0), [912])
	
.LABEL $label$5
	*($0) = [0]
	$4 = ($0 + [1])
	$3 = *($6 + [80])
	
.LOOP $label$6:
	*(($4 + $5)) = *(($3 + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[33]) ){ goto $label$6 }
	*($6 + [84]) = $3
	CALL $150($3)
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $150(*(($6 + [104])))
	
.LABEL $label$7
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*($6 + [120]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $151(($6 + [112]))
}

int_32 .FUNC _Z20get_random_int_10000RK11checksum256RK11checksum160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($0 + $5))
	CALL $156($7, *((uint_32($3 >> [4]) + [80])))
	CALL $156($7, *((($3 & [15]) + [80])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$5 = *($7)
	$3 = ($5 & [1])
	$6 = ( *(($7 + [8])) ? ($7 | [1]) : $3 )
	$2 = ( *($7 + [4]) ? uint_32($5 >> [1]) : $3 )
	if ( ($2 <= [4]) ){ goto $label$5 }
	$0 = $2
	$5 = $6
	$3 = $2
	
.LOOP $label$6:
	CALL memcpy(($7 + [12]), $5, [4])
	$4 = ((int_32)*($7 + [12]) * (int_32)[1540483477])
	$3 = ((int_32)((int_32)((int_32)uint_32($4 >> [24]) ^ (int_32)$4) * (int_32)[1540483477]) ^ (int_32)((int_32)$3 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$0 = ($0 + [-4])
	if ( ((uint_32)$0 > (uint_32)[3]) ){ goto $label$6 }
	$5 = ($2 + [-4])
	$0 = ($5 & [-4])
	$6 = (($6 + $0) + [4])
	$2 = ($5 - $0)
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = $2
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$2 }
	$3 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$3)
	
.LABEL $label$7
	$3 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$3)
	
.LABEL $label$3
	$3 = ((int_32)((int_32)*($6) ^ (int_32)$3) * (int_32)[1540483477])
	
.LABEL $label$2
	$5 = ((int_32)((int_32)uint_32($3 >> [13]) ^ (int_32)$3) * (int_32)[1540483477])
	$5 = ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $150(*(($7 + [8])))
	
.LABEL $label$8
	$2 = ($5 + [-1640531527])
	$5 = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	
.LOOP $label$9:
	$3 = *(($1 + $5))
	CALL $156($7, *((uint_32($3 >> [4]) + [80])))
	CALL $156($7, *((($3 & [15]) + [80])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$9 }
	$5 = *($7)
	$3 = ($5 & [1])
	$6 = ( *(($7 + [8])) ? ($7 | [1]) : $3 )
	$4 = ( *($7 + [4]) ? uint_32($5 >> [1]) : $3 )
	if ( ($4 <= [4]) ){ goto $label$13 }
	$0 = $4
	$5 = $6
	$3 = $4
	
.LOOP $label$14:
	CALL memcpy(($7 + [12]), $5, [4])
	$1 = ((int_32)*($7 + [12]) * (int_32)[1540483477])
	$3 = ((int_32)((int_32)((int_32)uint_32($1 >> [24]) ^ (int_32)$1) * (int_32)[1540483477]) ^ (int_32)((int_32)$3 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$0 = ($0 + [-4])
	if ( ((uint_32)$0 > (uint_32)[3]) ){ goto $label$14 }
	$5 = ($4 + [-4])
	$0 = ($5 & [-4])
	$6 = (($6 + $0) + [4])
	$4 = ($5 - $0)
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$3 = $4
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$15 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$10 }
	$3 = ((int_32)(*($6 + [2]) << [16]) ^ (int_32)$3)
	
.LABEL $label$15
	$3 = ((int_32)(*($6 + [1]) << [8]) ^ (int_32)$3)
	
.LABEL $label$11
	$3 = ((int_32)((int_32)*($6) ^ (int_32)$3) * (int_32)[1540483477])
	
.LABEL $label$10
	$5 = ((int_32)((int_32)uint_32($3 >> [13]) ^ (int_32)$3) * (int_32)[1540483477])
	$5 = ((int_32)(((($2 << [6]) + uint_32($2 >> [2])) + ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)) + [-1640531527]) ^ (int_32)$2)
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL $150(*(($7 + [8])))
	
.LABEL $label$16
	*([0] + [4]) = ($7 + [16])
	return ((uint_32)$5 % (uint_32)[10000])
}

void .FUNC _Z13get_rand_seedyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = CALL tapos_block_prefix()
	$6 = CALL tapos_block_num()
	*($7 + [8]) = ((int_64))(((int_64)((int_64)((int_64)((int_64)$1 + (int_64)$2) + (int_64)$3) + (int_64)((int_64)$4 * (int_64)-3)) + (int_64)-6) - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$6 * (int_32)$5)))
	CALL sha256(($7 + [8]), [4], $0)
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [2128])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [2128])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [2128])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $103(CALL $104($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [2128])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [2128])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [2128])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [2128])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [2128])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [2128])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [2128])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $103($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [2128])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [2128])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [2128])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [2128])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [2128])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1824])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1824])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1824])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1824])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [1824])
	CALL memcpy(($1 + [32]), *($0 + [4]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[19]), [1824])
	CALL memcpy(($1 + [64]), *($0 + [4]), [20])
	*($0 + [4]) = (*($0 + [4]) + [20])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), $1, [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [21]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[19]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[19]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [20])
	$2 = (*($0 + [4]) + [20])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [2128])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [176])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$19()), [2000])
	*($1 + [88]) = *(*($3))
	*($1 + [40]) = *(*($3))
	$4 = *($1)
	*($5 + [152]) = $4
	CALL eosio_assert([1], [2064])
	*($5 + [144]) = ($5 + [128])
	*($5 + [140]) = $5
	*($5 + [136]) = $5
	CALL $70(($5 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $5, [128])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [168]) = *($1)
	if ( (CALL memcmp(($5 + [152]), ($5 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020371635640205312, ($5 + [160]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [168]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [176])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $149(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $164($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $150($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Z18is_decompose_validh (int_32 $0)
{
	return ((($0 + [-3]) & [255]) <= [7])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [432])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1504]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1520]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [1536])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1600]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1616]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1632]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1648]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1664]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1680]
	$7 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$52 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$52
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$48
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1696]
	$7 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$58 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$3 = ($3 + [165])
	goto $label$56 
	
.LABEL $label$58
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$54
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$53 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1712]
	$7 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$64 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$3 = ($3 + [165])
	goto $label$62 
	
.LABEL $label$64
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$60
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$59 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1728]
	$7 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$70 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$3 = ($3 + [165])
	goto $label$68 
	
.LABEL $label$70
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$66
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$65 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1744]
	$7 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$76 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$3 = ($3 + [165])
	goto $label$74 
	
.LABEL $label$76
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$72
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$71 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1760]
	$7 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$82 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$3 = ($3 + [165])
	goto $label$80 
	
.LABEL $label$82
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$78
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$77 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1776]
	$7 = (int_64)0
	
.LOOP $label$83:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$84 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$3 = ($3 + [165])
	goto $label$85 
	
.LABEL $label$86
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$84
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$83 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1792]
	$7 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$92 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$3 = ($3 + [165])
	goto $label$90 
	
.LABEL $label$92
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$88
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$87 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1504]
	$7 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$98 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$3 = ($3 + [165])
	goto $label$96 
	
.LABEL $label$98
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$94
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$93 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $40(($9 + [192]), $0)
	if ( ((int_64)$2 > (int_64)3774935994365640703) ){ goto $label$110 }
	if ( ((int_64)$2 > (int_64)-4421672816961650689) ){ goto $label$109 }
	if ( ((int_64)$2 == (int_64)-9026019222977052672) ){ goto $label$107 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$106 }
	if ( ((int_64)$2 != (int_64)-4992623620501536768) ){ goto $label$99 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [1]
	*($9 + [64 align=4]) = *($9 + [120])
	CALL $56($4, ($9 + [64]))
	goto $label$99 
	
.LABEL $label$110
	if ( ((int_64)$2 > (int_64)6761204862450401279) ){ goto $label$108 }
	if ( ((int_64)$2 == (int_64)3774935994365640704) ){ goto $label$105 }
	if ( ((int_64)$2 == (int_64)4982487936487391232) ){ goto $label$104 }
	if ( ((int_64)$2 != (int_64)5373156466701107200) ){ goto $label$99 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [2]
	*($9 + [40 align=4]) = *($9 + [144])
	CALL $50($4, ($9 + [40]))
	goto $label$99 
	
.LABEL $label$109
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$103 }
	if ( ((int_64)$2 == (int_64)-4157529782108553216) ){ goto $label$102 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$99 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [3]
	*($9) = *($9 + [184])
	CALL $42($4, $9)
	goto $label$99 
	
.LABEL $label$108
	if ( ((int_64)$2 == (int_64)6761204862450401280) ){ goto $label$101 }
	if ( ((int_64)$2 == (int_64)7035939395572708000) ){ goto $label$100 }
	if ( ((int_64)$2 != (int_64)7606867147675287552) ){ goto $label$99 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [88 align=4]) = *($9 + [96])
	CALL $61($4, ($9 + [88]))
	goto $label$99 
	
.LABEL $label$107
	*($9 + [132]) = [0]
	*($9 + [128]) = [5]
	*($9 + [56 align=4]) = *($9 + [128])
	CALL $53($4, ($9 + [56]))
	goto $label$99 
	
.LABEL $label$106
	*($9 + [164]) = [0]
	*($9 + [160]) = [6]
	*($9 + [24 align=4]) = *($9 + [160])
	CALL $48($4, ($9 + [24]))
	goto $label$99 
	
.LABEL $label$105
	*($9 + [108]) = [0]
	*($9 + [104]) = [7]
	*($9 + [80 align=4]) = *($9 + [104])
	CALL $59($4, ($9 + [80]))
	goto $label$99 
	
.LABEL $label$104
	*($9 + [156]) = [0]
	*($9 + [152]) = [8]
	*($9 + [32 align=4]) = *($9 + [152])
	CALL $50($4, ($9 + [32]))
	goto $label$99 
	
.LABEL $label$103
	*($9 + [180]) = [0]
	*($9 + [176]) = [9]
	*($9 + [8 align=4]) = *($9 + [176])
	CALL $44($4, ($9 + [8]))
	goto $label$99 
	
.LABEL $label$102
	*($9 + [140]) = [0]
	*($9 + [136]) = [10]
	*($9 + [48 align=4]) = *($9 + [136])
	CALL $53($4, ($9 + [48]))
	goto $label$99 
	
.LABEL $label$101
	*($9 + [172]) = [0]
	*($9 + [168]) = [11]
	*($9 + [16 align=4]) = *($9 + [168])
	CALL $46($4, ($9 + [16]))
	goto $label$99 
	
.LABEL $label$100
	*($9 + [116]) = [0]
	*($9 + [112]) = [12]
	*($9 + [72 align=4]) = *($9 + [112])
	CALL $53($4, ($9 + [72]))
	
.LABEL $label$99
	CALL $62($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [432])
}

int_64 .FUNC _Z18get_user_box_countN5eosio11multi_indexILy15426372438069346304E4userJNS_10indexed_byILy9223372036854775808EN5boost11multi_index13const_mem_funIS1_yXadL_ZNKS1_7get_keyEvEEEEEEEE14const_iteratorEh (int_32 $0, int_32 $1)
{
	$1 = ($1 + [-2])
	if ( ((uint_32)$1 > (uint_32)[7]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$9
	return *(*($0 + [4]) + [88])
	
.LABEL $label$8
	CALL eosio_assert([0], [1472])
	return (int_64)0
	
.LABEL $label$7
	return *(*($0 + [4]) + [96])
	
.LABEL $label$6
	return *(*($0 + [4]) + [100])
	
.LABEL $label$5
	return *(*($0 + [4]) + [104])
	
.LABEL $label$4
	return *(*($0 + [4]) + [108])
	
.LABEL $label$3
	return *(*($0 + [4]) + [112])
	
.LABEL $label$2
	return *(*($0 + [4]) + [116])
	
.LABEL $label$1
	$1
	return *(*($0 + [4]) + [120])
}

int_32 .FUNC _Z16is_compose_validh (int_32 $0)
{
	return ((($0 + [-3]) & [255]) <= [2])
}

int_64 .FUNC _Z16get_eos_expectedyy (int_64 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [224])
	*([0] + [4]) = $10
	CALL __floatunditf(($10 + [192]), $1)
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)10000000000), [1152])
	CALL __floatunditf(($10 + [176]), $0)
	CALL __floatunsitf(($10 + [160]), *([0] + [24]))
	$0 = *((($10 + [160]) + [8]))
	$1 = *($10 + [160])
	CALL __divtf3(($10 + [144]), *($10 + [176]), *((($10 + [176]) + [8])), $1, $0)
	CALL __divtf3(($10 + [96]), *($10 + [192]), *((($10 + [192]) + [8])), $1, $0)
	CALL __addtf3(($10 + [128]), *($10 + [144]), *((($10 + [144]) + [8])), (int_64)0, (int_64)4611404543450677248)
	$0 = *((($10 + [128]) + [8]))
	$1 = *($10 + [128])
	$2 = *((($10 + [96]) + [8]))
	$3 = *($10 + [96])
	CALL __addtf3(($10 + [80]), $3, $2, $1, $0)
	CALL __multf3(($10 + [112]), $1, $0, $1, $0)
	$4 = *((($10 + [80]) + [8]))
	$5 = *($10 + [80])
	CALL __multf3(($10 + [64]), $5, $4, $5, $4)
	$6 = *((($10 + [112]) + [8]))
	$8 = *($10 + [112])
	$7 = *((($10 + [64]) + [8]))
	$9 = *($10 + [64])
	CALL __subtf3(($10 + [48]), $9, $7, $8, $6)
	CALL __multf3(($10 + [16]), $3, $2, (int_64)0, (int_64)4614206099078250496)
	CALL __divtf3(($10 + [32]), *($10 + [48]), *((($10 + [48]) + [8])), (int_64)0, (int_64)4614806157549109248)
	CALL __addtf3($10, *($10 + [16]), *((($10 + [16]) + [8])), *($10 + [32]), *((($10 + [32]) + [8])))
	CALL eosio_assert(((int_32)((CALL $fimport$10($3, $2, (int_64)0, (int_64)0) | CALL $fimport$10($1, $0, (int_64)0, (int_64)0)) | CALL $fimport$10($5, $4, (int_64)0, (int_64)0)) > (int_32)[-1]), [1184])
	CALL eosio_assert(((int_32)(CALL $fimport$10($9, $7, $8, $6) | (CALL $fimport$10($8, $6, (int_64)0, (int_64)0) | CALL $fimport$10($9, $7, (int_64)0, (int_64)0))) > (int_32)[-1]), [1232])
	CALL floorl(($10 + [208]), *($10), *(($10 + [8])))
	$1 = CALL __fixunstfdi(*($10 + [208]), *($10 + [216]))
	*([0] + [4]) = ($10 + [224])
	return ((int_64)$1 + (int_64)1)
}

int_64 .FUNC _Z21get_eos_expected_sellyyyy (int_64 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	float_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [224])
	*([0] + [4]) = $16
	$15 = [0]
	$4 = *([0] + [24])
	if ( ((uint_64)(CASTING uint_64)(uint_32 $4) > (uint_64)$3) ){ goto $label$1 }
	$15 = ((uint_64)(CASTING uint_64)(uint_32 ((int_32)$4 * (int_32)[10000])) > (uint_64)$3)
	
.LABEL $label$1
	CALL eosio_assert($15, [1280])
	CALL __floatunsitf(($16 + [192]), *([0] + [24]))
	CALL __floatunditf(($16 + [176]), $2)
	$7 = *((($16 + [192]) + [8]))
	$6 = *($16 + [192])
	CALL __divtf3(($16 + [160]), *($16 + [176]), *((($16 + [176]) + [8])), $6, $7)
	CALL __floatunditf(($16 + [112]), $3)
	CALL __divtf3(($16 + [96]), *($16 + [112]), *((($16 + [112]) + [8])), $6, $7)
	CALL __addtf3(($16 + [144]), *($16 + [160]), *((($16 + [160]) + [8])), (int_64)0, (int_64)4611404543450677248)
	$5 = *((($16 + [96]) + [8]))
	$7 = *($16 + [96])
	$6 = *((($16 + [144]) + [8]))
	$3 = *($16 + [144])
	CALL __subtf3(($16 + [80]), $3, $6, $7, $5)
	CALL __multf3(($16 + [128]), $3, $6, $3, $6)
	$8 = *((($16 + [80]) + [8]))
	$9 = *($16 + [80])
	CALL __multf3(($16 + [64]), $9, $8, $9, $8)
	$11 = *((($16 + [64]) + [8]))
	$13 = *($16 + [64])
	$10 = *((($16 + [128]) + [8]))
	$12 = *($16 + [128])
	CALL __subtf3(($16 + [48]), $12, $10, $13, $11)
	CALL __multf3(($16 + [16]), $7, $5, (int_64)0, (int_64)4614206099078250496)
	CALL __divtf3(($16 + [32]), *($16 + [48]), *((($16 + [48]) + [8])), (int_64)0, (int_64)4614806157549109248)
	CALL __addtf3($16, *($16 + [16]), *((($16 + [16]) + [8])), *($16 + [32]), *((($16 + [32]) + [8])))
	CALL eosio_assert(((int_32)((CALL $fimport$10($7, $5, (int_64)0, (int_64)0) | CALL $fimport$10($3, $6, (int_64)0, (int_64)0)) | CALL $fimport$10($9, $8, (int_64)0, (int_64)0)) > (int_32)[-1]), [1328])
	CALL eosio_assert(((int_32)(CALL $fimport$10($12, $10, $13, $11) | (CALL $fimport$10($12, $10, (int_64)0, (int_64)0) | CALL $fimport$10($13, $11, (int_64)0, (int_64)0))) > (int_32)[-1]), [1360])
	CALL floorl(($16 + [208]), *($16), *(($16 + [8])))
	$3 = CALL __fixunstfdi(*($16 + [208]), *($16 + [216]))
	if ( ((uint_64)$2 >= (uint_64)$1) ){ goto $label$2 }
	$14 = ((float_64)(CASTING float_64)(uint_64 $2) / (float_64)(CASTING float_64)(uint_64 $1))
	CALL eosio_assert((((float_64)$14 > (float_64)(float_64)0) & ((float_64)$14 < (float_64)(float_64)1)), [1440])
	$3 = (Rounds 0)(((float_64)$14 * (float_64)(CASTING float_64)(uint_64 $3)))
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [224])
	return $3
}

int_32 .FUNC _Z17is_rand_seed_hashhy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$4 = ((uint_64)$1 % (uint_64)(int_64)1000)
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000)
	$5 = [0]
	$0 = ($0 + [-2])
	if ( ((uint_32)$0 > (uint_32)[4]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$2 = (CASTING uint_32)(uint_64 $1)
	goto $label$7 
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)[436]) ){ goto $label$2 }
	$5 = [1]
	if ( ($3 <= [205]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$5 = [1]
	if ( ((int_32)$2 != (int_32)[370]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = [1]
	if ( ((int_32)$2 != (int_32)[421]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$2 != (int_32)[161]) ){ goto $label$2 }
	$5 = [1]
	if ( ($3 <= [500]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$2 != (int_32)[250]) ){ goto $label$2 }
	$5 = [1]
	if ( ($3 <= [500]) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	$0
	return $5
}

int_32 .FUNC _Z10get_payouthy (int_32 $0, int_64 $1)
{
	int_32 $2
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000)
	$0 = ($0 + [-2])
	if ( ((uint_32)$0 > (uint_32)[6]) ){ goto $label$8 }
	$2 = (CASTING uint_32)(uint_64 $1)
	goto $label$9 
	
.LABEL $label$9
	$0 = [3]
	if ( ($2 <= [400]) ){ goto $label$1 }
	$0 = (($2 <= [450]) << [2])
	goto $label$1 
	
.LABEL $label$8
	$0 = [0]
	CALL eosio_assert([0], [1104])
	goto $label$1 
	
.LABEL $label$7
	$0 = [3]
	if ( ($2 <= [100]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [400]) ){ goto $label$1 }
	$0 = ( [5] ? [0] : ($2 <= [450]) )
	goto $label$1 
	
.LABEL $label$6
	$0 = [3]
	if ( ($2 <= [100]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [200]) ){ goto $label$1 }
	$0 = ( [5] ? [0] : ($2 <= [500]) )
	goto $label$1 
	
.LABEL $label$5
	$0 = [3]
	if ( ($2 <= [100]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [150]) ){ goto $label$1 }
	$0 = [5]
	if ( ($2 <= [200]) ){ goto $label$1 }
	$0 = ( [6] ? [0] : ($2 <= [335]) )
	goto $label$1 
	
.LABEL $label$4
	$0 = [3]
	if ( ($2 <= [150]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [200]) ){ goto $label$1 }
	$0 = [5]
	if ( ($2 <= [250]) ){ goto $label$1 }
	$0 = ( [7] ? [0] : ($2 <= [480]) )
	goto $label$1 
	
.LABEL $label$3
	$0 = [3]
	if ( ($2 <= [150]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [300]) ){ goto $label$1 }
	$0 = [5]
	if ( ($2 <= [350]) ){ goto $label$1 }
	$0 = [6]
	if ( ($2 <= [400]) ){ goto $label$1 }
	$0 = (($2 <= [650]) << [3])
	goto $label$1 
	
.LABEL $label$2
	$0 = [3]
	if ( ($2 <= [200]) ){ goto $label$1 }
	$0 = [4]
	if ( ($2 <= [300]) ){ goto $label$1 }
	$0 = [5]
	if ( ($2 <= [350]) ){ goto $label$1 }
	$0 = [6]
	if ( ($2 <= [600]) ){ goto $label$1 }
	$0 = [7]
	if ( ($2 <= [750]) ){ goto $label$1 }
	$0 = ( [9] ? [0] : ($2 <= [950]) )
	
.LABEL $label$1
	$0
	return ($0 & [255])
}

int_64 .FUNC _Z17get_compose_counth (int_32 $0)
{
	if ( ((int_32)$0 == (int_32)[3]) ){ goto $label$2 }
	if ( ((int_32)$0 != (int_32)[4]) ){ goto $label$1 }
	return (int_64)8
	
.LABEL $label$2
	return (int_64)3
	
.LABEL $label$1
	CALL eosio_assert([0], [944])
	return (int_64)0
}

int_64 .FUNC _Z19get_decompose_counth (int_32 $0)
{
	$0 = ($0 + [-3])
	if ( ((uint_32)($0 & [255]) >= (uint_32)[7]) ){ goto $label$1 }
	return *(((int_32(($0 << [24]) >> [24]) << [3]) + [1040]))
	
.LABEL $label$1
	CALL eosio_assert([0], [992])
	return (int_64)0
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC floorl (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$1 }
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)) & [32767]
	if ( ((uint_32)$3) > (uint_32)[16494]) ){ goto $label$1 }
	$6 = ((int_64)$2 < (int_64)0)
	CALL __addtf3(($7 + [80]), (int_64)0, ( (int_64)-4580442296012505088 ? (int_64)4642929740842270720 : $6 ), $1, $2)
	CALL __addtf3(($7 + [64]), (int_64)0, ( (int_64)4642929740842270720 ? (int_64)-4580442296012505088 : $6 ), *($7 + [80]), *((($7 + [80]) + [8])))
	CALL __subtf3(($7 + [48]), *($7 + [64]), *((($7 + [64]) + [8])), $1, $2)
	$5 = *((($7 + [48]) + [8]))
	$4 = *($7 + [48])
	if ( ((uint_32)$3 > (uint_32)[16382]) ){ goto $label$2 }
	*($7 + [96]) = $4
	*($7 + [104]) = $5
	CALL __floatsitf($7, (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	$2 = *(($7 + [8]))
	$1 = *($7)
	goto $label$1 
	
.LABEL $label$2
	CALL __addtf3(($7 + [32]), $4, $5, $1, $2)
	$3 = CALL __gttf2($4, $5, (int_64)0, (int_64)0)
	$2 = *((($7 + [32]) + [8]))
	$1 = *($7 + [32])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$1 }
	CALL __addtf3(($7 + [16]), $1, $2, (int_64)0, (int_64)-4611967493404098560)
	$2 = *(($7 + [24]))
	$1 = *($7 + [16])
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}