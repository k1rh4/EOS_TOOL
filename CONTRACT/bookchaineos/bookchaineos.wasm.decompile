(data (i32.const 8192) "invalid symbol name\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8221) "EOS\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8316) "tokens are not EOS\00")
(data (i32.const 8335) "invalid quantity\00")
(data (i32.const 8352) "The book Non-existent\00")
(data (i32.const 8374) "You are not the owner of this book\00")
(data (i32.const 8409) "sell book(www.bookchain.fun)\00")
(data (i32.const 8438) "reward token(www.bookchain.fun)\00")
(data (i32.const 8470) "Reward Release(www.bookchain.fun)\00")
(data (i32.const 8504) "Necessary transfer to contract account\00")
(data (i32.const 8543) "amount must be positive\00")
(data (i32.const 8567) "Book sold out\00")
(data (i32.const 8581) "The book has been sold\00")
(data (i32.const 8604) "There is no book in the second-hand market\00")
(data (i32.const 8647) "Not buy it by oneself\00%llu\00")
(data (i32.const 8674) "Insufficient price\00")
(data (i32.const 8693) "You already have this book\00")
(data (i32.const 8720) "BOOK\00")
(data (i32.const 8725) "bookchainadm\00")
(data (i32.const 8738) "Not an administrator\00")
(data (i32.const 8759) "The prize pool is empty\00")
(data (i32.const 8783) "Insufficient amount of prize pool\00")
(data (i32.const 8817) "No dividend information yet\00")
(data (i32.const 8845) "tokens are not BOOK\00")
(data (i32.const 8865) "recharge must be greater than 1\00")
(data (i32.const 8897) "submitprice\00: no conversion\00")
(data (i32.const 8925) "sellbook\00: out of range\00")
(data (i32.const 8949) "openbook\00")
(data (i32.const 8958) "awarprizes\00")
(data (i32.const 8969) "receprizes\00")
(data (i32.const 8980) "eosio.token\00")
(data (i32.const 8992) "transfer\00")
(data (i32.const 9001) "eosbookchain\00")
(data (i32.const 9014) "string is too long to be a valid symbol_code\00")
(data (i32.const 9059) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9112) "write\00")
(data (i32.const 9118) "string is too long to be a valid name\00")
(data (i32.const 9156) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9223) "character is not in allowed character set for names\00")
(data (i32.const 9275) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9326) "error reading iterator\00")
(data (i32.const 9349) "read\00")
(data (i32.const 9354) "cannot pass end iterator to modify\00")
(data (i32.const 9389) "object passed to modify is not in multi_index\00")
(data (i32.const 9435) "cannot modify objects in table of another contract\00")
(data (i32.const 9486) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9545) "cannot create objects in table of another contract\00")
(data (i32.const 9596) "cannot pass end iterator to erase\00")
(data (i32.const 9630) "cannot increment end iterator\00")
(data (i32.const 9660) "object passed to erase is not in multi_index\00")
(data (i32.const 9705) "cannot erase objects in table of another contract\00")
(data (i32.const 9755) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9808) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9860) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9914) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9962) "get\00")
(data (i32.const 18384) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18464) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$9 (param i32 i64 i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$17 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $31))
(export "_Znwj" (func $54))
(export "_ZdlPv" (func $56))
(export "_Znaj" (func $55))
(export "_ZdaPv" (func $57))
(export "_ZnwjSt11align_val_t" (func $58))
(export "_ZnajSt11align_val_t" (func $59))
(export "_ZdlPvSt11align_val_t" (func $60))
(export "_ZdaPvSt11align_val_t" (func $61))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $1 $9 $4 $25 $27 $14 $28 $82 $84)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18721))
(global $global$2 i32 (i32.const 18721))


int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9980]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9984])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9980]) = [1]
	$2 = ($2 << [16])
	*([0] + [9984]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9984])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9984]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9980]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9980]) = [1]
	$3 = ($3 << [16])
	*([0] + [9984]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9984])
	
.LABEL $label$10
	*([0] + [9984]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18372])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18180]
	$3 = (((int_32)$1 * (int_32)[12]) + [18180])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $79())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $95($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $96($1)
	
.LABEL $label$2
	*(CALL $79()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $96(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $99($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $96 (int_32 $0)
{
	return CALL $97([9988], $0)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $98($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8230])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $89($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $79()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $89($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18465]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $88($0, (int_64)0)
	*(CALL $79()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $89($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $89($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $89($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $89($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18465])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $89($0)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $89($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8212]))
	$8 = (int_64)0
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $89($0)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $89($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18465]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $88($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18465]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18465]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $89($0) + [18465]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $79()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $79()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $79()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $88($3, (int_64)0)
	$4 = CALL $90($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [56]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9914])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5003256636454731776)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9860])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9860])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	$6 = CALL current_time()
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($5 + [16]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $51(($3 + [32]), ($3 + [24]))
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9112])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9112])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9112])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9112])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9112])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $63(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $63(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9349])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $52(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9112])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9112])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL require_auth($1)
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8192])
	$5 = CALL $93([8221])
	if ( ($5 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9014])
	goto $label$8 
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$10 = *(($5 + [8220]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9059])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$10 }
	$8 = ((int_64)$8 << (int_64)8)
	goto $label$6 
	
.LABEL $label$7
	$8 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$6 == (int_64)((int_64)$8 | (int_64)4)), [8316])
	$10 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$12 }
	$5 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$7 = $8
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$7 = $8
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$16 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [8335])
	$12 = ($0 + [72])
	$10 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$20:
	$5 = ($10 + [-24])
	$2 = *($5)
	if ( ((int_64)*($2) == (int_64)$3) ){ goto $label$19 }
	$10 = $5
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$12), [9275])
	goto $label$17 
	
.LABEL $label$18
	$2 = [0]
	$5 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)4520931362303115264, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$17 }
	$2 = CALL $10($12, $5)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$12), [9275])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8352])
	CALL eosio_assert(((int_64)*($2 + [24]) == (int_64)$1), [8374])
	$13 = ($0 + [152])
	$11 = *(($0 + [180]))
	$12 = *(($0 + [176]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$24 }
	
.LOOP $label$26:
	$5 = ($11 + [-24])
	$10 = *($5)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$25 }
	$11 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$13), [9275])
	goto $label$23 
	
.LABEL $label$24
	$10 = ($0 + [160])
	$5 = CALL db_find_i64(*($13), *($10), (int_64)-4421658965813755904, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$22 }
	$10 = CALL $11($13, $5)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$13), [9275])
	
.LABEL $label$23
	$7 = *($0)
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$13), [9389])
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$3()), [9435])
	*($10 + [40]) = $9
	*($10 + [8]) = *($2 + [8])
	*($10 + [16]) = *($2 + [16])
	$5 = ($10 + [32])
	*($4 + [64]) = *($5)
	$11 = ($10 + [24])
	*($4 + [72]) = *($11)
	*($11) = $1
	$8 = *($10)
	*($5) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$8 == (int_64)*($10)), [9486])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [80]) = ($4 + [48])
	*($4 + [92]) = ($10 + [8])
	*($4 + [88]) = $10
	*($4 + [96]) = ($10 + [16])
	*($4 + [100]) = $11
	*($4 + [104]) = $5
	*($4 + [108]) = ($10 + [40])
	CALL $12(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($10 + [52]), $7, $4, [48])
	$11 = ($0 + [168])
	if ( (uint_64)($8 <= *($11)) ){ goto $label$27 }
	*($11) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	$11 = (($4 + [64]) + [8])
	*($4 + [88]) = *($5)
	if ( (CALL $92(($4 + [64]), ($4 + [88]), [8]) == 0) ){ goto $label$28 }
	$2 = ($10 + [56])
	$5 = *($2)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$29 }
	$5 = CALL db_idx64_find_primary(*(($0 + [152])), *(($0 + [160])), (int_64)-4421658965813755904, ($4 + [80]), $8)
	*($2) = $5
	
.LABEL $label$29
	CALL db_idx64_update($5, $7, ($4 + [88]))
	
.LABEL $label$28
	*($4 + [88]) = *(($10 + [24]))
	if ( (CALL $92($11, ($4 + [88]), [8]) == 0) ){ goto $label$21 }
	$10 = ($10 + [60])
	$5 = *($10)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$30 }
	$5 = CALL db_idx64_find_primary(*(($0 + [152])), *(($0 + [160])), (int_64)-4421658965813755903, ($4 + [80]), $8)
	*($10) = $5
	
.LABEL $label$30
	CALL db_idx64_update($5, $7, ($4 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$3()), [9545])
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	$7 = CALL current_time()
	*($5 + [48]) = $13
	*($5 + [32]) = ((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5) = $3
	*($5 + [40]) = $9
	$7 = *($2 + [16])
	$3 = *($2 + [8])
	*($5 + [24]) = $1
	*($5 + [8]) = $3
	*($5 + [16]) = $7
	*($4 + [72]) = ($4 + [48])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [48]) = ($4 + [64])
	*($4 + [92]) = ($5 + [8])
	*($4 + [88]) = $5
	*($4 + [96]) = ($5 + [16])
	$11 = ($5 + [24])
	*($4 + [100]) = $11
	$2 = ($5 + [32])
	*($4 + [104]) = $2
	*($4 + [108]) = ($5 + [40])
	CALL $12(($4 + [88]), ($4 + [48]))
	$7 = *($5)
	*($5 + [52]) = CALL db_store_i64(*($10), (int_64)-4421658965813755904, $8, $7, $4, [48])
	$10 = ($0 + [168])
	if ( (uint_64)($7 <= *($10)) ){ goto $label$31 }
	*($10) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$31
	$10 = ($0 + [160])
	$7 = *($10)
	$3 = *($5)
	*($4 + [88]) = *($2)
	*($5 + [56]) = CALL db_idx64_store($7, (int_64)-4421658965813755904, $8, $3, ($4 + [88]))
	$7 = *($10)
	$3 = *($5)
	*($4 + [88]) = *($11)
	*($5 + [60]) = CALL db_idx64_store($7, (int_64)-4421658965813755903, $8, $3, ($4 + [88]))
	*($4 + [88]) = $5
	$8 = *($5)
	*($4) = $8
	$11 = *(($5 + [52]))
	*($4 + [64]) = $11
	$2 = ($0 + [180])
	$10 = *($2)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [184]))) ){ goto $label$33 }
	*($10 + [8]) = $8
	*($10 + [16]) = $11
	*($4 + [88]) = [0]
	*($10) = $5
	*($2) = ($10 + [24])
	$5 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( $5 ){ goto $label$32 }
	goto $label$21 
	
.LABEL $label$33
	CALL $13(($0 + [176]), ($4 + [88]), $4, ($4 + [64]))
	$5 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	
.LABEL $label$32
	CALL _ZdlPv($5)
	
.LABEL $label$21
	CALL $5($0, $1, (int_64)0)
	$global$0 = ($4 + [112])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56]))) = (int_64)0
	$6 = CALL current_time()
	*($5 + [16]) = (int_64)1
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($5 + [8]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $47(($3 + [40]), ($3 + [32]))
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth($1)
	CALL $5($0, $1, $2)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = ($0 + [192])
	$6 = *(($0 + [220]))
	$5 = *(($0 + [216]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [9275])
	goto $label$3 
	
.LABEL $label$4
	$6 = ($0 + [200])
	$7 = CALL db_find_i64(*($4), *($6), (int_64)-3141035783125729280, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $6($4, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [9275])
	
.LABEL $label$3
	$9 = *($0)
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [9389])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9435])
	$7 = ($8 + [8])
	*($3 + [40]) = *($7)
	$1 = *($8)
	$10 = CALL current_time()
	*($8 + [24]) = $2
	*($7) = ((int_64)((uint_64)$10 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)1)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9486])
	*($3 + [64]) = ($3 + [40])
	*($3 + [60]) = $3
	*($3 + [56]) = $3
	*($3 + [48]) = ($3 + [56])
	*($3 + [76]) = $7
	*($3 + [72]) = $8
	*($3 + [80]) = ($8 + [16])
	*($3 + [84]) = ($8 + [24])
	*($3 + [88]) = ($8 + [32])
	CALL $7(($3 + [72]), ($3 + [48]))
	CALL db_update_i64(*($8 + [44]), $9, $3, [40])
	$6 = ($0 + [208])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [72]) = *($7)
	if ( (CALL $92(($3 + [40]), ($3 + [72]), [8]) == 0) ){ goto $label$1 }
	$6 = ($8 + [48])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*(($0 + [192])), *(($0 + [200])), (int_64)-3141035783125729280, ($3 + [48]), $1)
	*($6) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $9, ($3 + [72]))
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9545])
	$7 = CALL _Znwj([56])
	CALL current_time()
	*($7 + [40]) = $4
	*($7 + [32]) = (int_64)0
	*($7) = $1
	$1 = CALL current_time()
	*($7 + [16]) = (int_64)1
	*($7 + [24]) = $2
	*($7 + [8]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [64]) = ($3 + [40])
	*($3 + [60]) = $3
	*($3 + [56]) = $3
	*($3 + [48]) = ($3 + [56])
	$8 = ($7 + [8])
	*($3 + [76]) = $8
	*($3 + [72]) = $7
	*($3 + [80]) = ($7 + [16])
	*($3 + [84]) = ($7 + [24])
	*($3 + [88]) = ($7 + [32])
	CALL $7(($3 + [72]), ($3 + [48]))
	$1 = *($7)
	*($7 + [44]) = CALL db_store_i64(*($6), (int_64)-3141035783125729280, $9, $1, $3, [40])
	$6 = ($0 + [208])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *(($0 + [200]))
	$2 = *($7)
	*($3 + [72]) = *($8)
	*($7 + [48]) = CALL db_idx64_store($1, (int_64)-3141035783125729280, $9, $2, ($3 + [72]))
	*($3 + [72]) = $7
	$1 = *($7)
	*($3) = $1
	$8 = *(($7 + [44]))
	*($3 + [56]) = $8
	$5 = ($0 + [220])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [224]))) ){ goto $label$11 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [72]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( $7 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $8(($0 + [216]), ($3 + [72]), $3, ($3 + [56]))
	$7 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9349])
	CALL memcpy($5, $2, [1])
	CALL eosio_assert(((uint_32)($4 + [-1]) > (uint_32)[7]), [9349])
	CALL memcpy(($5 + [8]), ($2 + [1]), [8])
	*($5 + [20]) = $1
	*($3 + [8]) = $5
	$6 = *($5)
	*($3 + [7]) = $6
	*($3) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($8 + [16]) = $1
	*($3 + [8]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $3(($0 + [24]), ($3 + [8]), ($3 + [7]), $3)
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [16])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$8 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($9 = ((int_32)$5 * (int_32)[24]))))) = $2
	*($1 + [8]) = $8
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $9) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9275])
	CALL require_auth(*($0))
	$9 = *($0)
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-5918709142377201664, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $2($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9275])
	
.LABEL $label$7
	CALL require_auth(*($0))
	$9 = *($0)
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9389])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9435])
	*($8 + [8]) = $2
	$7 = *($8)
	*($8) = $1
	CALL eosio_assert(((int_32)$7 == (int_32)$1), [9486])
	CALL eosio_assert([1], [9112])
	CALL memcpy($3, $8, [1])
	CALL eosio_assert([1], [9112])
	CALL memcpy(($3 | [1]), ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), $9, $3, [9])
	$2 = (CASTING uint_64)(uint_32 $7)
	$6 = ($0 + [48])
	if ( ((uint_64)*($6) > (uint_64)$2) ){ goto $label$1 }
	*($6) = ((int_64)$2 + (int_64)1)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9545])
	*(($7 = CALL _Znwj([32])) + [16]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	CALL eosio_assert([1], [9112])
	CALL memcpy($3, $7, [1])
	CALL eosio_assert([1], [9112])
	CALL memcpy(($3 | [1]), ($7 + [8]), [8])
	$2 = *($7)
	$8 = CALL db_store_i64(*(($0 + [40])), (int_64)-5918709142377201664, $9, $2, $3, [9])
	*($7 + [20]) = $8
	$6 = ($0 + [48])
	if ( ((uint_64)*($6) > (uint_64)$2) ){ goto $label$8 }
	*($6) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$8
	*($3) = $7
	$1 = *($7)
	*($3 + [31]) = $1
	*($3 + [24]) = $8
	$5 = ($0 + [60])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$10 }
	*($6 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $1) & (int_64)255)
	*($6 + [16]) = $8
	*($3) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3)
	*($3) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	CALL $3(($0 + [56]), $3, ($3 + [31]), ($3 + [24]))
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	$5 = ($global$0 - [176])
	$global$0 = $5
	$7 = *($4)
	$6 = CALL $93([8409])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	if ( (CALL $70($4, [0], [-1], [8409], $6) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = *($4)
	$6 = ($4 + [4])
	$8 = CALL $93([8438])
	if ( ((int_32)$8 != (int_32)( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$4 }
	if ( (CALL $70($4, [0], [-1], [8438], $8) == 0) ){ goto $label$2 }
	
.LABEL $label$4
	$7 = *($4)
	$8 = CALL $93([8470])
	if ( ((int_32)$8 != (int_32)( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	if ( (CALL $70($4, [0], [-1], [8470], $8) == 0) ){ goto $label$2 }
	
.LABEL $label$5
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8504])
	CALL require_auth($1)
	$7 = [0]
	$9 = *($3 + [8])
	$10 = (uint_64)$9 >> (uint_64)(int_64)8
	$2 = $10)
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $11
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [8192])
	$7 = CALL $93([8221])
	if ( ($7 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9014])
	goto $label$13 
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$6 = *(($7 + [8220]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9059])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$2 = (int_64)0
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$9 == (int_64)((int_64)$2 | (int_64)4)), [8316])
	$6 = [0]
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$17 }
	$7 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$10 = $2
	$6 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$10 = $2
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $6 ){ goto $label$21 }
	$6 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$6 = [0]
	
.LABEL $label$17
	CALL eosio_assert($6, [8335])
	$12 = ($0 + [32])
	$6 = *(($0 + [60]))
	$13 = *(($0 + [56]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$27:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[6]) ){ goto $label$26 }
	$6 = $7
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	if ( $8 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = CALL db_find_i64(*($12), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$23 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$24
	$2 = *($8 + [8])
	goto $label$22 
	
.LABEL $label$23
	$2 = (int_64)1
	
.LABEL $label$22
	$6 = CALL $64(($5 + [80]), $4, [0], [1], $4)
	$7 = CALL $71($6, [0], [10])
	$9 = ((uint_64)((int_64)$2 * (int_64)$11) / (uint_64)(int_64)100)
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$28
	$14 = CALL $64(($5 + [64]), $4, [2], [-1], $4)
	$2 = (CASTING int_64)(int_32 CALL $71($14, [0], [10]))
	$7 = ($7 & [255])
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$44 }
	if ( $7 ){ goto $label$29 }
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$42 }
	
.LOOP $label$45:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[1]) ){ goto $label$43 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$45 }
	goto $label$42 
	
.LABEL $label$44
	$15 = ($0 + [152])
	$6 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$37 }
	
.LOOP $label$46:
	$7 = ($6 + [-24])
	$4 = *($7)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$38 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$46 }
	goto $label$37 
	
.LABEL $label$43
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$42 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	if ( $8 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$7 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$40 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$41
	CALL eosio_assert(((uint_64)$11 >= (uint_64)*($8 + [8])), [8543])
	goto $label$39 
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$11 > (int_64)9), [8543])
	
.LABEL $label$39
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$50 }
	
.LOOP $label$52:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[4]) ){ goto $label$51 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$50 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	if ( $8 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$7 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$48 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$49
	$10 = *($8 + [8])
	goto $label$47 
	
.LABEL $label$48
	$10 = (int_64)30
	
.LABEL $label$47
	$13 = ($0 + [112])
	$6 = *(($0 + [140]))
	$4 = *(($0 + [136]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$54 }
	
.LOOP $label$56:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$55 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$54 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$13), [9275])
	goto $label$53 
	
.LABEL $label$54
	$6 = ($0 + [120])
	$7 = CALL db_find_i64(*($13), *($6), (int_64)-8380745250750070784, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$35 }
	$8 = CALL $15($13, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$13), [9275])
	
.LABEL $label$53
	CALL eosio_assert(((uint_64)$10 > (uint_64)*($8 + [8])), [8567])
	$16 = *($0)
	$7 = *($8 + [8])
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$13), [9389])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$3()), [9435])
	$6 = ($7 + [1])
	*($8 + [8]) = $6
	$7 = ($8 + [16])
	*($5 + [160]) = *($7)
	$10 = *($8)
	*($8) = $2
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$10 == (int_64)*($8)), [9486])
	CALL eosio_assert([1], [9112])
	CALL memcpy(($5 + [80]), $8, [8])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($5 + [80]) | [8]), ($8 + [8]), [4])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($5 + [80]) | [12]), $7, [8])
	CALL db_update_i64(*($8 + [28]), $16, ($5 + [80]), [20])
	$4 = ($0 + [128])
	if ( (uint_64)($10 <= *($4)) ){ goto $label$57 }
	*($4) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$57
	*($5 + [24]) = *($7)
	if ( (CALL $92(($5 + [160]), ($5 + [24]), [8]) == 0) ){ goto $label$58 }
	$8 = ($8 + [32])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$59 }
	$7 = CALL db_idx64_find_primary(*(($0 + [112])), *(($0 + [120])), (int_64)-8380745250750070784, ($5 + [136]), $10)
	*($8) = $7
	
.LABEL $label$59
	CALL db_idx64_update($7, $16, ($5 + [24]))
	
.LABEL $label$58
	$17 = (CASTING uint_64)(uint_32 $6)
	goto $label$31 
	
.LABEL $label$38
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$15), [9275])
	goto $label$36 
	
.LABEL $label$37
	$4 = [0]
	$7 = CALL db_find_i64(*($15), *(($0 + [160])), (int_64)-4421658965813755904, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$36 }
	$4 = CALL $11($15, $7)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$15), [9275])
	
.LABEL $label$36
	$8 = [0]
	$18 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($18, [8604])
	CALL eosio_assert(((int_64)*($4 + [24]) != (int_64)$1), [8647])
	CALL eosio_assert(((uint_64)$11 >= (uint_64)*($4 + [40])), [8674])
	$19 = ($0 + [72])
	$11 = *($4 + [24])
	$6 = *(($0 + [100]))
	$13 = *(($0 + [96]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$61 }
	
.LOOP $label$63:
	$7 = ($6 + [-24])
	$20 = *($7)
	if ( ((int_64)*($20) == (int_64)$2) ){ goto $label$62 }
	$6 = $7
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$61 }
	CALL eosio_assert(((int_32)*($20 + [48]) == (int_32)$19), [9275])
	$8 = $20
	goto $label$60 
	
.LABEL $label$61
	$7 = CALL db_find_i64(*($19), *(($0 + [80])), (int_64)4520931362303115264, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$60 }
	$8 = CALL $10($19, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$19), [9275])
	
.LABEL $label$60
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8352])
	CALL eosio_assert(((int_64)*($8 + [24]) != (int_64)$1), [8693])
	$10 = *($0)
	CALL eosio_assert($7, [9354])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$19), [9389])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9435])
	$6 = ($8 + [16])
	*($5 + [136]) = *($6)
	*($5 + [144]) = *($8 + [24])
	$7 = ($8 + [40])
	*($5 + [152]) = *($7)
	*($8 + [24]) = $1
	*($8 + [32]) = *($3)
	$2 = *($8)
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [9486])
	*($5 + [168]) = (($5 + [80]) + [48])
	*($5 + [164]) = ($5 + [80])
	*($5 + [160]) = ($5 + [80])
	*($5 + [8]) = ($5 + [160])
	*($5 + [28]) = ($8 + [8])
	*($5 + [24]) = $8
	*($5 + [32]) = $6
	*($5 + [36]) = ($8 + [24])
	*($5 + [40]) = ($8 + [32])
	*($5 + [44]) = $7
	CALL $16(($5 + [24]), ($5 + [8]))
	CALL db_update_i64(*($8 + [52]), $10, ($5 + [80]), [48])
	$13 = ($0 + [88])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$64 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$64
	$13 = (($5 + [136]) + [8])
	*($5 + [24]) = *($6)
	if ( (CALL $92(($5 + [136]), ($5 + [24]), [8]) == 0) ){ goto $label$65 }
	$20 = ($8 + [56])
	$6 = *($20)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$66 }
	$6 = CALL db_idx64_find_primary(*(($0 + [72])), *(($0 + [80])), (int_64)4520931362303115264, ($5 + [8]), $2)
	*($20) = $6
	
.LABEL $label$66
	CALL db_idx64_update($6, $10, ($5 + [24]))
	
.LABEL $label$65
	$6 = (($5 + [136]) + [16])
	*($5 + [24]) = *(($8 + [24]))
	if ( (CALL $92($13, ($5 + [24]), [8]) == 0) ){ goto $label$67 }
	$20 = ($8 + [60])
	$13 = *($20)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$68 }
	$13 = CALL db_idx64_find_primary(*(($0 + [72])), *(($0 + [80])), (int_64)4520931362303115265, ($5 + [8]), $2)
	*($20) = $13
	
.LABEL $label$68
	CALL db_idx64_update($13, $10, ($5 + [24]))
	
.LABEL $label$67
	*($5 + [24]) = *($7)
	if ( (CALL $92($6, ($5 + [24]), [8]) == 0) ){ goto $label$69 }
	$6 = ($8 + [64])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$70 }
	$7 = CALL db_idx64_find_primary(*(($0 + [72])), *(($0 + [80])), (int_64)4520931362303115266, ($5 + [8]), $2)
	*($6) = $7
	
.LABEL $label$70
	CALL db_idx64_update($7, $10, ($5 + [24]))
	
.LABEL $label$69
	CALL eosio_assert($18, [9596])
	CALL eosio_assert($18, [9630])
	$7 = CALL db_next_i64(*($4 + [52]), ($5 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$71 }
	CALL $11($15, $7)
	
.LABEL $label$71
	CALL $17($15, $4)
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$75 }
	
.LOOP $label$77:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[5]) ){ goto $label$76 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$75 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	if ( $8 ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$7 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$73 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$74
	$10 = *($8 + [8])
	goto $label$72 
	
.LABEL $label$73
	$10 = (int_64)3
	
.LABEL $label$72
	$16 = *(($3 + [8]))
	$2 = *($3)
	*($5 + [144]) = (int_64)3617214756542218240
	*($5 + [136]) = *($0)
	*((($5 + [8]) + [8])) = [0]
	*($5 + [8]) = (int_64)0
	$10 = ((uint_64)((int_64)$2 * (int_64)$10) / (uint_64)(int_64)100)
	$7 = CALL $93([8409])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$34 }
	$2 = (int_64))($2 - $10)
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$80 }
	*($5 + [8]) = ($7 << [1])
	$6 = (($5 + [8]) | [1])
	if ( $7 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$8 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($5 + [8]) = ($8 | [1])
	*($5 + [16]) = $6
	*($5 + [12]) = $7
	
.LABEL $label$79
	CALL memcpy($6, [8409], $7)
	
.LABEL $label$78
	*(($6 + $7)) = [0]
	*(($5 + [104])) = $16
	$7 = ($5 + [16])
	*(($5 + [120])) = *($7)
	*($7) = [0]
	*($5 + [88]) = $11
	*($5 + [96]) = $2
	*($5 + [80]) = *($0)
	*($5 + [112]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	$7 = CALL $18(($5 + [24]), ($5 + [136]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [80]))
	CALL $19(($5 + [160]), $7)
	$6 = *($5 + [160])
	CALL send_inline($6, (*($5 + [164]) - $6))
	$6 = *($5 + [160])
	if ( ($6 == 0) ){ goto $label$81 }
	*($5 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$81
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$82 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$82
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$83 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$83
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$84
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($5 + [16])))
	goto $label$30 
	
.LABEL $label$35
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$3()), [9545])
	$7 = CALL _Znwj([40])
	$16 = CALL current_time()
	*($7 + [24]) = $13
	*($7 + [16]) = ((int_64)((uint_64)$16 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [8]) = [1]
	*($7) = $2
	CALL eosio_assert([1], [9112])
	CALL memcpy(($5 + [80]), $7, [8])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($5 + [80]) | [8]), ($7 + [8]), [4])
	CALL eosio_assert([1], [9112])
	$8 = ($7 + [16])
	CALL memcpy((($5 + [80]) | [12]), $8, [8])
	$16 = *($7)
	*($7 + [28]) = CALL db_store_i64(*($6), (int_64)-8380745250750070784, $10, $16, ($5 + [80]), [20])
	$6 = ($0 + [128])
	if ( (uint_64)($16 <= *($6)) ){ goto $label$85 }
	*($6) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$85
	$16 = *(($0 + [120]))
	$17 = *($7)
	*($5 + [24]) = *($8)
	*($7 + [32]) = CALL db_idx64_store($16, (int_64)-8380745250750070784, $10, $17, ($5 + [24]))
	*($5 + [24]) = $7
	$10 = *($7)
	*($5 + [80]) = $10
	$8 = *(($7 + [28]))
	*($5 + [136]) = $8
	$4 = ($0 + [140])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$86 }
	*($6 + [8]) = $10
	*($6 + [16]) = $8
	*($5 + [24]) = [0]
	*($6) = $7
	*($4) = ($6 + [24])
	$7 = *($5 + [24])
	*($5 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$86
	CALL $20(($0 + [136]), ($5 + [24]), ($5 + [80]), ($5 + [136]))
	$7 = *($5 + [24])
	*($5 + [24]) = [0]
	if ( $7 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	CALL $62(($5 + [8]))
	
.LABEL $label$33
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$17 = (int_64)1
	
.LABEL $label$31
	CALL $74(($5 + [160]), $17)
	CALL $21(($5 + [80]), $14, ($5 + [160]))
	$7 = CALL $71(($5 + [80]), [0], [10])
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$87
	$10 = (CASTING int_64)(int_32 $7)
	$13 = ($0 + [72])
	$6 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$89 }
	
.LOOP $label$91:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$10) ){ goto $label$90 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$91 }
	goto $label$89 
	
.LABEL $label$90
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$89 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$13), [9275])
	goto $label$88 
	
.LABEL $label$89
	$8 = [0]
	$7 = CALL db_find_i64(*($13), *(($0 + [80])), (int_64)4520931362303115264, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$88 }
	$8 = CALL $10($13, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$13), [9275])
	
.LABEL $label$88
	CALL eosio_assert(($8 == 0), [8581])
	$16 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9545])
	*(($7 = CALL _Znwj([72])) + [24]) = (int_64)0
	$21 = CALL current_time()
	*($7 + [48]) = $13
	*($7 + [40]) = ((int_64)((uint_64)$21 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [8]) = $2
	*($7) = $10
	*($7 + [16]) = $17
	*($7 + [24]) = $1
	*($7 + [32]) = $11
	*($5 + [144]) = (($5 + [80]) + [48])
	*($5 + [140]) = ($5 + [80])
	*($5 + [136]) = ($5 + [80])
	*($5 + [8]) = ($5 + [136])
	*($5 + [28]) = ($7 + [8])
	*($5 + [24]) = $7
	$8 = ($7 + [16])
	*($5 + [32]) = $8
	$4 = ($7 + [24])
	*($5 + [36]) = $4
	*($5 + [40]) = ($7 + [32])
	$13 = ($7 + [40])
	*($5 + [44]) = $13
	CALL $16(($5 + [24]), ($5 + [8]))
	$2 = *($7)
	$6 = ($0 + [80])
	*($7 + [52]) = CALL db_store_i64(*($6), (int_64)4520931362303115264, $16, $2, ($5 + [80]), [48])
	$20 = ($0 + [88])
	if ( (uint_64)($2 <= *($20)) ){ goto $label$92 }
	*($20) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$92
	$2 = *($6)
	$10 = *($7)
	*($5 + [24]) = *($8)
	*($7 + [56]) = CALL db_idx64_store($2, (int_64)4520931362303115264, $16, $10, ($5 + [24]))
	$2 = *($6)
	$10 = *($7)
	*($5 + [24]) = *($4)
	*($7 + [60]) = CALL db_idx64_store($2, (int_64)4520931362303115265, $16, $10, ($5 + [24]))
	$2 = *($6)
	$10 = *($7)
	*($5 + [24]) = *($13)
	*($7 + [64]) = CALL db_idx64_store($2, (int_64)4520931362303115266, $16, $10, ($5 + [24]))
	*($5 + [24]) = $7
	$2 = *($7)
	*($5 + [80]) = $2
	$8 = *(($7 + [52]))
	*($5 + [136]) = $8
	$4 = ($0 + [100])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$95 }
	*($6 + [8]) = $2
	*($6 + [16]) = $8
	*($5 + [24]) = [0]
	*($6) = $7
	*($4) = ($6 + [24])
	$7 = *($5 + [24])
	*($5 + [24]) = [0]
	if ( $7 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	CALL $22(($0 + [96]), ($5 + [24]), ($5 + [80]), ($5 + [136]))
	$7 = *($5 + [24])
	*($5 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$93 }
	
.LABEL $label$94
	CALL _ZdlPv($7)
	
.LABEL $label$93
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($5 + [168]))
	
.LABEL $label$30
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$99 }
	
.LOOP $label$101:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[9]) ){ goto $label$100 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$100
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$99 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	goto $label$98 
	
.LABEL $label$99
	$8 = ($0 + [40])
	$6 = ($0 + [32])
	$7 = CALL db_find_i64(*($6), *($8), (int_64)-5918709142377201664, (int_64)9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$97 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$98
	$10 = *($0)
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9389])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9435])
	*($8 + [8]) = ((int_64)*($8 + [8]) + (int_64)$9)
	$2 = *($8)
	CALL eosio_assert([1], [9486])
	CALL eosio_assert([1], [9112])
	CALL memcpy(($5 + [80]), $8, [1])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($5 + [80]) | [1]), ($8 + [8]), [8])
	CALL db_update_i64(*($8 + [20]), $10, ($5 + [80]), [9])
	$7 = ($0 + [48])
	if ( ((uint_64)*($7) > (uint_64)$2) ){ goto $label$96 }
	*($7) = ((int_64)$2 + (int_64)1)
	goto $label$96 
	
.LABEL $label$97
	$10 = *($0)
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$3()), [9545])
	*(($7 = CALL _Znwj([32])) + [16]) = $12
	*($7 + [8]) = $9
	*($7) = [9]
	CALL eosio_assert([1], [9112])
	CALL memcpy(($5 + [80]), $7, [1])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($5 + [80]) | [1]), ($7 + [8]), [8])
	$2 = *($7)
	$8 = CALL db_store_i64(*($8), (int_64)-5918709142377201664, $10, $2, ($5 + [80]), [9])
	*($7 + [20]) = $8
	$6 = ($0 + [48])
	if ( ((uint_64)*($6) > (uint_64)$2) ){ goto $label$102 }
	*($6) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$102
	*($5 + [80]) = $7
	$4 = *($7)
	*($5 + [136]) = $4
	*($5 + [24]) = $8
	$13 = ($0 + [60])
	$6 = *($13)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$104 }
	*($6 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)255)
	*($6 + [16]) = $8
	*($5 + [80]) = [0]
	*($6) = $7
	*($13) = ($6 + [24])
	$7 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( $7 ){ goto $label$103 }
	goto $label$96 
	
.LABEL $label$104
	CALL $3(($0 + [56]), ($5 + [80]), ($5 + [136]), ($5 + [24]))
	$7 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($7 == 0) ){ goto $label$96 }
	
.LABEL $label$103
	CALL _ZdlPv($7)
	
.LABEL $label$96
	$6 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$108 }
	
.LOOP $label$110:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_32)*($8) == (int_32)[7]) ){ goto $label$109 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$109
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$108 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	if ( $8 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$7 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)7)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$106 }
	$8 = CALL $2($12, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$12), [9275])
	
.LABEL $label$107
	$10 = *($8 + [8])
	goto $label$105 
	
.LABEL $label$106
	$10 = (int_64)1
	
.LABEL $label$105
	$7 = CALL $93([8720])
	if ( ($7 <= [8]) ){ goto $label$114 }
	CALL eosio_assert([0], [9014])
	goto $label$113 
	
.LABEL $label$114
	if ( ($7 == 0) ){ goto $label$112 }
	
.LABEL $label$113
	$2 = (int_64)0
	
.LOOP $label$115:
	$6 = *(($7 + [8719]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$116 }
	CALL eosio_assert([0], [9059])
	
.LABEL $label$116
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$115 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$111 
	
.LABEL $label$112
	$2 = (int_64)4
	
.LABEL $label$111
	$11 = *($3)
	*($5 + [144]) = (int_64)3617214756542218240
	*($5 + [136]) = *($0)
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$7 = CALL $93([8438])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	$10 = ((int_64)$11 * (int_64)$10)
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$119 }
	*($5 + [8]) = ($7 << [1])
	$6 = (($5 + [8]) | [1])
	if ( $7 ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	$8 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($5 + [8]) = ($8 | [1])
	*($5 + [16]) = $6
	*($5 + [12]) = $7
	
.LABEL $label$118
	CALL memcpy($6, [8438], $7)
	
.LABEL $label$117
	*(($6 + $7)) = [0]
	*(($5 + [104])) = $2
	$7 = ($5 + [16])
	*(($5 + [120])) = *($7)
	*($7) = [0]
	*($5 + [88]) = $1
	*($5 + [96]) = $10
	*($5 + [80]) = *($0)
	*($5 + [112]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	$7 = CALL $18(($5 + [24]), ($5 + [136]), (int_64)6138540784853032240, (int_64)-3617168760277827584, ($5 + [80]))
	CALL $19(($5 + [160]), $7)
	$6 = *($5 + [160])
	CALL send_inline($6, (*($5 + [164]) - $6))
	$6 = *($5 + [160])
	if ( ($6 == 0) ){ goto $label$120 }
	*($5 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$120
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$121 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$121
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$122 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$122
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$123 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$123
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$124 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$124
	CALL $5($0, $1, (int_64)0)
	
.LABEL $label$29
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($14 + [8]))
	
.LABEL $label$2
	$global$0 = ($5 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $62(($5 + [8]))
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	$5 = CALL _Znwj([40])
	$6 = CALL current_time()
	*($5 + [24]) = $0
	*($5 + [16]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9349])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9349])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((uint_32)($4 + [-12]) > (uint_32)[7]), [9349])
	CALL memcpy(($5 + [16]), ($2 + [12]), [8])
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9660])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9705])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9755])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4421658965813755904, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [60]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4421658965813755903, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [24]) = (int_64)0
	$6 = CALL current_time()
	*($5 + [48]) = $0
	*($5 + [40]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $44(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($5 + [64]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9326])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $96($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	$6 = CALL current_time()
	*($5 + [48]) = $0
	*($5 + [32]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $45(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $99($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $93($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $65($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $23($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $24(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9112])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9112])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $43(CALL $42($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $94(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9968])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $94(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $53($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $66($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $66($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $62($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9962])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $23($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9349])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $96($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9968])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $96($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9349])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9349])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [110])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [268])) = [0]
	*($4 + [232]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	CALL $38($4)
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9349])
	CALL memcpy(($4 + [280]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9349])
	CALL memcpy((($4 + [280]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9349])
	CALL memcpy((($4 + [280]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [118])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*(($4 + [276])) = [0]
	*($4 + [240]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [296])
	$1 = *($4 + [288])
	$8 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	CALL $38(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [248])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [232])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [240])), (int_64)-5003256636454731776, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $49(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [248])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9808])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [24]) = ((uint_64)((int_64)*(*($5 + [12])) * (int_64)*(*($5 + [8]))) / (uint_64)(int_64)10000)
	$2 = $2
	$5 = ($2 + [-32])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $2
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	$2 = ($1 + [16])
	*($3 + [40]) = $2
	*($3 + [44]) = ($1 + [24])
	CALL $50(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-5003256636454731776, *(*($0 + [8])), $8, $5, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [32]) = *($2)
	*($1 + [40]) = CALL db_idx64_store($8, (int_64)-5003256636454731776, $11, $12, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [32]) = $1
	$7 = *($4)
	$6 = CALL $93([8438])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $70($4, [0], [-1], [8438], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [8504])
	CALL require_auth($1)
	$8 = *($3 + [8])
	$1 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$1 = $2
	$7 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$1 = $2
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8192])
	$4 = CALL $93([8720])
	if ( ($4 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9014])
	goto $label$10 
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$1 = (int_64)0
	
.LOOP $label$12:
	$7 = *(($4 + [8719]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9059])
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$8 
	
.LABEL $label$9
	$1 = (int_64)4
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$8 == (int_64)$1), [8845])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$14 }
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $2
	$7 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $2
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $7 ){ goto $label$18 }
	$7 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [8335])
	CALL eosio_assert(((int_64)$8 > (int_64)9999), [8865])
	*($5 + [24]) = (int_64)1
	$9 = ($0 + [32])
	$7 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$21 }
	
.LOOP $label$23:
	$4 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)*($6) == (int_32)[3]) ){ goto $label$22 }
	$7 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$9), [9275])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$4 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$6 = CALL $2($9, $4)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$9), [9275])
	
.LABEL $label$20
	*($5 + [24]) = *($6 + [8])
	
.LABEL $label$19
	$1 = *($0)
	*($5 + [8]) = $0
	*($5 + [16]) = $3
	*($5 + [12]) = ($5 + [32])
	*($5 + [20]) = ($5 + [24])
	*($5 + [72]) = $1
	CALL eosio_assert(((int_64)*($0 + [232]) == (int_64)CALL $fimport$3()), [9545])
	$7 = ($0 + [232])
	*($5 + [48]) = $7
	*($5 + [52]) = ($5 + [8])
	*($5 + [56]) = ($5 + [72])
	*(($4 = CALL _Znwj([48])) + [8]) = (int_64)0
	$1 = CALL current_time()
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = $7
	*($4 + [16]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $29(($5 + [48]), $4)
	*($5 + [64]) = $4
	$1 = *($4)
	*($5 + [48]) = $1
	$6 = *($4 + [36])
	*($5 + [44]) = $6
	$10 = ($0 + [260])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [264]))) ){ goto $label$25 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($5 + [64]) = [0]
	*($7) = $4
	*($10) = ($7 + [24])
	$4 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( $4 ){ goto $label$24 }
	goto $label$1 
	
.LABEL $label$25
	CALL $30(($0 + [256]), ($5 + [64]), ($5 + [48]), ($5 + [44]))
	$4 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$24
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $69($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $62($0)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $78($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL require_auth($1)
	*($4 + [8]) = [8725]
	*($4 + [12]) = CALL $93([8725])
	*($4) = *($4 + [8])
	CALL eosio_assert(((int_64)*(CALL $26(($4 + [16]), $4)) == (int_64)$1), [8738])
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_32)*($9) == (int_32)[9]) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [9275])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)-5918709142377201664, (int_64)9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [9275])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8759])
	CALL eosio_assert(((uint_64)*($9 + [8]) >= (uint_64)$3), [8783])
	$11 = ($0 + [192])
	$7 = *(($0 + [220]))
	$12 = *(($0 + [216]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$10:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$9 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$11), [9275])
	goto $label$7 
	
.LABEL $label$8
	$7 = ($0 + [200])
	$8 = CALL db_find_i64(*($11), *($7), (int_64)-3141035783125729280, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $6($11, $8)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$11), [9275])
	
.LABEL $label$7
	$1 = *($0)
	CALL eosio_assert([1], [9354])
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$11), [9389])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9435])
	$8 = ($6 + [8])
	*($4 + [56]) = *($8)
	$2 = *($6)
	*($8) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [32]) = ((int_64)*($6 + [32]) + (int_64)$3)
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [9486])
	*($4 + [80]) = (($4 + [16]) + [40])
	*($4 + [76]) = ($4 + [16])
	*($4 + [72]) = ($4 + [16])
	*($4 + [64]) = ($4 + [72])
	*($4 + [92]) = $8
	*($4 + [88]) = $6
	*($4 + [96]) = ($6 + [16])
	*($4 + [100]) = ($6 + [24])
	*($4 + [104]) = ($6 + [32])
	CALL $7(($4 + [88]), ($4 + [64]))
	CALL db_update_i64(*($6 + [44]), $1, ($4 + [16]), [40])
	$7 = ($0 + [208])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$11 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [88]) = *($8)
	if ( (CALL $92(($4 + [56]), ($4 + [88]), [8]) == 0) ){ goto $label$5 }
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$12 }
	$8 = CALL db_idx64_find_primary(*(($0 + [192])), *(($0 + [200])), (int_64)-3141035783125729280, ($4 + [64]), $2)
	*($7) = $8
	
.LABEL $label$12
	CALL db_idx64_update($8, $1, ($4 + [88]))
	goto $label$5 
	
.LABEL $label$6
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9545])
	$8 = CALL _Znwj([56])
	CALL current_time()
	*($8 + [24]) = (int_64)0
	*($8 + [16]) = (int_64)1
	*($8 + [40]) = $11
	*($8) = $2
	$2 = CALL current_time()
	*($8 + [32]) = $3
	*($8 + [8]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [80]) = (($4 + [16]) + [40])
	*($4 + [76]) = ($4 + [16])
	*($4 + [72]) = ($4 + [16])
	*($4 + [64]) = ($4 + [72])
	$6 = ($8 + [8])
	*($4 + [92]) = $6
	*($4 + [88]) = $8
	*($4 + [96]) = ($8 + [16])
	*($4 + [100]) = ($8 + [24])
	*($4 + [104]) = ($8 + [32])
	CALL $7(($4 + [88]), ($4 + [64]))
	$2 = *($8)
	*($8 + [44]) = CALL db_store_i64(*($7), (int_64)-3141035783125729280, $1, $2, ($4 + [16]), [40])
	$7 = ($0 + [208])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$13 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$2 = *(($0 + [200]))
	$13 = *($8)
	*($4 + [88]) = *($6)
	*($8 + [48]) = CALL db_idx64_store($2, (int_64)-3141035783125729280, $1, $13, ($4 + [88]))
	*($4 + [88]) = $8
	$2 = *($8)
	*($4 + [16]) = $2
	$6 = *(($8 + [44]))
	*($4 + [72]) = $6
	$12 = ($0 + [220])
	$7 = *($12)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [224]))) ){ goto $label$15 }
	*($7 + [8]) = $2
	*($7 + [16]) = $6
	*($4 + [88]) = [0]
	*($7) = $8
	*($12) = ($7 + [24])
	$8 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( $8 ){ goto $label$14 }
	goto $label$5 
	
.LABEL $label$15
	CALL $8(($0 + [216]), ($4 + [88]), ($4 + [16]), ($4 + [72]))
	$8 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$14
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$1 = *($0)
	CALL eosio_assert($10, [9354])
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [9389])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9435])
	*(($8 = ($9 + [8]))) = (int_64))(*($8) - $3)
	$2 = *($9)
	CALL eosio_assert([1], [9486])
	CALL eosio_assert([1], [9112])
	CALL memcpy(($4 + [16]), $9, [1])
	CALL eosio_assert([1], [9112])
	CALL memcpy((($4 + [16]) | [1]), $8, [8])
	CALL db_update_i64(*($9 + [20]), $1, ($4 + [16]), [9])
	$8 = ($0 + [48])
	if ( ((uint_64)*($8) > (uint_64)$2) ){ goto $label$16 }
	*($8) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$16
	$global$0 = ($4 + [112])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9112])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9112])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [192])
	$5 = *(($0 + [220]))
	$4 = *(($0 + [216]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [9275])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)-3141035783125729280, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $6($3, $6)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [9275])
	
.LABEL $label$1
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [8817])
	CALL eosio_assert(((int_64)*($7 + [32]) != (int_64)0), [8817])
	$6 = CALL $93([8221])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9014])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$8 = (int_64)0
	
.LOOP $label$9:
	$5 = *(($6 + [8220]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9059])
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$8 = (int_64)4
	
.LABEL $label$5
	$9 = *(($7 + [32]))
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = *($0)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $93([8470])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$14 }
	*($2) = ($6 << [1])
	$5 = ($2 | [1])
	if ( $6 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$10 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $6
	
.LABEL $label$13
	CALL memcpy($5, [8470], $6)
	
.LABEL $label$12
	*(($5 + $6)) = [0]
	*(($2 + [40])) = $8
	$6 = ($2 + [8])
	*(($2 + [56])) = *($6)
	*($6) = [0]
	*($2 + [24]) = $1
	*($2 + [32]) = $9
	*($2 + [16]) = *($0)
	*($2 + [48]) = *($2)
	*($2) = (int_64)0
	$6 = CALL $18(($2 + [88]), ($2 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($2 + [16]))
	CALL $19(($2 + [128]), $6)
	$5 = *($2 + [128])
	CALL send_inline($5, (*($2 + [132]) - $5))
	$5 = *($2 + [128])
	if ( ($5 == 0) ){ goto $label$15 }
	*($2 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($6 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$18
	if ( ((*($2) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$19
	$1 = *($0)
	CALL eosio_assert($4, [9354])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [9389])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9435])
	$6 = ($7 + [8])
	*($2) = *($6)
	$8 = *($7)
	$9 = CALL current_time()
	*($7 + [32]) = (int_64)0
	*($6) = ((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)1)
	CALL eosio_assert(((int_64)$8 == (int_64)*($7)), [9486])
	*($2 + [80]) = (($2 + [16]) + [40])
	*($2 + [76]) = ($2 + [16])
	*($2 + [72]) = ($2 + [16])
	*($2 + [128]) = ($2 + [72])
	*($2 + [92]) = $6
	*($2 + [88]) = $7
	*($2 + [96]) = ($7 + [16])
	*($2 + [100]) = ($7 + [24])
	*($2 + [104]) = ($7 + [32])
	CALL $7(($2 + [88]), ($2 + [128]))
	CALL db_update_i64(*($7 + [44]), $1, ($2 + [16]), [40])
	$5 = ($0 + [208])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$20 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($2 + [88]) = *($6)
	if ( (CALL $92($2, ($2 + [88]), [8]) == 0) ){ goto $label$21 }
	$5 = ($7 + [48])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$22 }
	$6 = CALL db_idx64_find_primary(*(($0 + [192])), *(($0 + [200])), (int_64)-3141035783125729280, ($2 + [128]), $8)
	*($5) = $6
	
.LABEL $label$22
	CALL db_idx64_update($6, $1, ($2 + [88]))
	
.LABEL $label$21
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$11
	CALL $62($2)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9118])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9223])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9156])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9223])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $65($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $68($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $99($0)
	
.LABEL $label$1
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $87($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $86($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $81([9], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $83($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $83($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $83($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $83($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18384]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $83($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $83($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $83($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $80 (int_32 $0)
{
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $75($1, $0, [8934])
	CALL $76()
	(unreachable)
}

void .FUNC $73 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $75($1, $0, [8909])
	CALL $77()
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $92(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $93([8225])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8225], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $79())
	*(CALL $79()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $91($4, ($3 + [12]), $2)
	$5 = CALL $79()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $72($3)
	
.LABEL $label$1
	CALL $73($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $76 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $77 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $67(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $85(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8669], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $67(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $67(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9349])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9349])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9349])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [118])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*(($4 + [276])) = [0]
	*($4 + [240]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	CALL $38(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [312]) + [24])) = (int_64)0
	*((($4 + [312]) + [40])) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $5)
	*($4 + [400]) = ($4 + [296])
	*($4 + [24]) = ($4 + [312])
	CALL $40(($4 + [24]), ($4 + [400]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [304])
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [384])
	*($4 + [40]) = $1
	*($4 + [400]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [134])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*(($4 + [172])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = [0]
	*($4 + [176]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*(($4 + [292])) = [0]
	*(($4 + [284])) = (int_64)0
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [24])
	CALL $41(($4 + [400]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $99($2)
	
.LABEL $label$4
	CALL $38(($4 + [24]))
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [352])))
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $78 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $79 ()
{
	return [9972]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9349])
	CALL memcpy(($4 + [272]), $2, [1])
	CALL eosio_assert(((uint_32)($7 + [-1]) > (uint_32)[7]), [9349])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [1]), [8])
	*(($4 + [20])) = ($2 + [9])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [110])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [268])) = [0]
	*($4 + [232]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$8 = *($4 + [272])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($8 & [255])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	CALL $38($4)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $96($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [336]))) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [308]) = $2
	*($4 + [304]) = $2
	*($4 + [312]) = ($2 + $7)
	*($4 + [384]) = ($4 + [304])
	*($4 + [32]) = ($4 + [320])
	CALL $39(($4 + [32]), ($4 + [384]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [312])
	*($4 + [16]) = *($4 + [304])
	$10 = *($9)
	*(($3 = (($4 + [352]) + [8]))) = $10
	*(($9 = (($4 + [368]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [368]) = $11
	*($4 + [352]) = $11
	$10 = *($9)
	*((($4 + [384]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$1 = *($4 + [368])
	*($4 + [48]) = $1
	*($4 + [384]) = $1
	*(($4 + [72])) = $0
	*(($4 + [80])) = (int_64)-1
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = [0]
	*(($4 + [112])) = $0
	*(($4 + [120])) = (int_64)-1
	*(($4 + [128])) = (int_64)0
	*(($4 + [136])) = [0]
	*(($4 + [142])) = [0]
	*(($4 + [140])) = [0]
	*(($4 + [152])) = $0
	*(($4 + [160])) = (int_64)-1
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = [0]
	*($4 + [64]) = $0
	*($4 + [104]) = $0
	*($4 + [144]) = $0
	*(($4 + [180])) = [0]
	*(($4 + [192])) = $0
	*(($4 + [200])) = (int_64)-1
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [220])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*(($4 + [260])) = [0]
	*(($4 + [272])) = $0
	*(($4 + [280])) = (int_64)-1
	*(($4 + [288])) = [0]
	*($4 + [184]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = $0
	*(($4 + [300])) = [0]
	*(($4 + [292])) = (int_64)0
	*($3) = *($8)
	*($4 + [352]) = *($4 + [328])
	$0 = *($4 + [320])
	$1 = *($4 + [344])
	*($9) = *($3)
	*($4 + [368]) = *($4 + [352])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [368]) + [8]))
	*((($4 + [384]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [368])
	*($4) = $11
	*($4 + [384]) = $11
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $99($2)
	
.LABEL $label$5
	CALL $38(($4 + [32]))
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $78($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [256]) = [8897]
	*($3 + [260]) = CALL $93([8897])
	*($3 + [120]) = *($3 + [256])
	CALL $26(($3 + [264]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-4139046210412342272) ){ goto $label$3 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [1]
	*($3) = *($3 + [248])
	CALL $32($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [240]) = [8925]
	*($3 + [244]) = CALL $93([8925])
	*($3 + [112]) = *($3 + [240])
	CALL $26(($3 + [264]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-4421668614067716096) ){ goto $label$4 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [2]
	*($3 + [8]) = *($3 + [232])
	CALL $33($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [224]) = [8949]
	*($3 + [228]) = CALL $93([8949])
	*($3 + [104]) = *($3 + [224])
	CALL $26(($3 + [264]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-6533258704978968576) ){ goto $label$5 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [3]
	*($3 + [16]) = *($3 + [216])
	CALL $34($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [208]) = [8958]
	*($3 + [212]) = CALL $93([8958])
	*($3 + [96]) = *($3 + [208])
	CALL $26(($3 + [264]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)3966961940136591360) ){ goto $label$6 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [24]) = *($3 + [200])
	CALL $35($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [192]) = [8969]
	*($3 + [196]) = CALL $93([8969])
	*($3 + [88]) = *($3 + [192])
	CALL $26(($3 + [264]), ($3 + [88]))
	if ( ((int_64)$2 != (int_64)-5003311316097171456) ){ goto $label$2 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [5]
	*($3 + [32]) = *($3 + [184])
	CALL $36($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [176]) = [8980]
	*($3 + [180]) = CALL $93([8980])
	*($3 + [80]) = *($3 + [176])
	CALL $26(($3 + [264]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$7 }
	*($3 + [160]) = [8992]
	*($3 + [164]) = CALL $93([8992])
	*($3 + [72]) = *($3 + [160])
	CALL $26(($3 + [168]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$7 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [40]) = *($3 + [152])
	CALL $37($0, (int_64)6138663591592764928, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [144]) = [9001]
	*($3 + [148]) = CALL $93([9001])
	*($3 + [64]) = *($3 + [144])
	CALL $26(($3 + [264]), ($3 + [64]))
	if ( ((int_64)$1 != (int_64)6138540784853032240) ){ goto $label$1 }
	*($3 + [136]) = [8992]
	*($3 + [140]) = CALL $93([8992])
	*($3 + [56]) = *($3 + [136])
	CALL $26(($3 + [168]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [48]) = *($3 + [128])
	CALL $37($0, (int_64)6138540784853032240, ($3 + [48]))
	
.LABEL $label$1
	CALL $80([0])
	$global$0 = ($3 + [272])
}