(data (i32.const 8192) "eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "transfer\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) ": \00")
(data (i32.const 8316) ";\00")
(data (i32.const 8318) "101\00")
(data (i32.const 8324) "~ \00\00\d4 \00\00\d8 \00\00\dc \00\00\e0 \00\00\e4 \00\00\e8 \00\00\ec \00\00\f0 \00\00\f4 \00\00\f8 \00\00\fc \00\00\00!\00\00\04!\00\00\08!\00\00\0c!\00\00\10!\00\00\14!\00\00(!\00\00,!\00\00")
(data (i32.const 8404) "102\00")
(data (i32.const 8408) "103\00")
(data (i32.const 8412) "104\00")
(data (i32.const 8416) "106\00")
(data (i32.const 8420) "107\00")
(data (i32.const 8424) "108\00")
(data (i32.const 8428) "109\00")
(data (i32.const 8432) "110\00")
(data (i32.const 8436) "111\00")
(data (i32.const 8440) "113\00")
(data (i32.const 8444) "114\00")
(data (i32.const 8448) "115\00")
(data (i32.const 8452) "117\00")
(data (i32.const 8456) "118\00")
(data (i32.const 8460) "119\00")
(data (i32.const 8464) "120\00")
(data (i32.const 8468) "121\00: no conversion\00")
(data (i32.const 8488) "123\00")
(data (i32.const 8492) "124\00")
(data (i32.const 17356) "301\00")
(data (i32.const 17360) "302\00")
(data (i32.const 17364) "303\00")
(data (i32.const 17368) "304\00")
(data (i32.const 17372) "305\00")
(data (i32.const 17376) "306\00")
(data (i32.const 17380) "307\00")
(data (i32.const 17384) "308\00")
(data (i32.const 17388) "309\00")
(data (i32.const 17392) "310\00")
(data (i32.const 17396) "311\00")
(data (i32.const 17400) "312\00")
(data (i32.const 17404) "313\00")
(data (i32.const 17408) "314\00")
(data (i32.const 17412) "EOS\00")
(data (i32.const 17416) "Invalid token transfer...\00")
(data (i32.const 17442) "only EOS token is allowed\00")
(data (i32.const 17468) "must buy a positive amount\00")
(data (i32.const 17495) "action\00")
(data (i32.const 17502) "startgame\00")
(data (i32.const 17512) "id\00")
(data (i32.const 17515) "betendtime\00")
(data (i32.const 17526) "openendtime\00")
(data (i32.const 17538) "hash\00")
(data (i32.const 17543) "share\00")
(data (i32.const 17549) "invest\00")
(data (i32.const 17556) "gid\00")
(data (i32.const 17560) "is_agent\00")
(data (i32.const 17569) "true\00")
(data (i32.const 17574) "bet\00")
(data (i32.const 17578) "opt\00")
(data (i32.const 17582) "doappeal\00")
(data (i32.const 17591) "string is too long to be a valid name\00")
(data (i32.const 17629) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17696) "character is not in allowed character set for names\00")
(data (i32.const 17748) "active")
(data (i32.const 17754) "add")
(data (i32.const 17757) "write\00")
(data (i32.const 17763) "updatemoney")
(data (i32.const 17774) "string is too long to be a valid symbol_code\00")
(data (i32.const 17819) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17872) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17921) "invalid symbol name\00")
(data (i32.const 17941) "eosio.token")
(data (i32.const 17952) "transfer")
(data (i32.const 17960) "read\00")
(data (i32.const 17965) "get\00")
(data (i32.const 17969) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18020) "error reading iterator\00")
(data (i32.const 18043) "cannot create objects in table of another contract\00")
(data (i32.const 18094) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18146) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18200) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18248) "cannot pass end iterator to modify\00")
(data (i32.const 18283) "object passed to modify is not in multi_index\00")
(data (i32.const 18329) "cannot modify objects in table of another contract\00")
(data (i32.const 18380) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18439) "cannot increment end iterator\00")
(data (i32.const 18469) "cannot pass end iterator to erase\00")
(data (i32.const 18503) "object passed to erase is not in multi_index\00")
(data (i32.const 18548) "cannot erase objects in table of another contract\00")
(data (i32.const 18598) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18651) "reliablebetx\00")
(data (i32.const 18664) "reliablebet2\00")
(data (i32.const 18677) ": out of range\00")
(data (i32.const 18704) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "current_time" (func $fimport$13 (result i64)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$16 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $132))
(export "_ZdlPv" (func $134))
(export "_Znaj" (func $133))
(export "_ZdaPv" (func $135))
(export "_ZnwjSt11align_val_t" (func $136))
(export "_ZnajSt11align_val_t" (func $137))
(export "_ZdlPvSt11align_val_t" (func $138))
(export "_ZdaPvSt11align_val_t" (func $139))
(table $0 25 25 anyfunc)
(elem (i32.const 1) $2 $5 $7 $8 $10 $11 $13 $15 $17 $19 $63 $64 $65 $66 $67 $68 $69 $70 $71 $72 $73 $74 $75 $76)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18961))
(global $global$2 i32 (i32.const 18961))


int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $172([8960], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [312]) + [24])) = (int_64)0
	*(($4 + [352])) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $5)
	*($4 + [400]) = ($4 + [296])
	*($4 + [16]) = ($4 + [312])
	CALL $53(($4 + [16]), ($4 + [400]))
	*(($3 = ($4 + [8]))) = *($4 + [304])
	*($4) = *($4 + [296])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4)
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [384])
	*($4 + [32]) = $1
	*($4 + [400]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [48]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [176]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [16])
	CALL $54(($4 + [400]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $175($2)
	
.LABEL $label$4
	CALL $21(($4 + [16]))
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [352])))
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $171($1)
	
.LABEL $label$2
	*(CALL $155()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $171(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $175($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $171 (int_32 $0)
{
	return CALL $172([8960], $0)
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $173($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [40]), *(($0 + [48])), (int_64)-3902253456596926464, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [40])
	$4 = CALL $30($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [164]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $30($3, $5)
	
.LABEL $label$3
	CALL $45($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL db_lowerbound_i64(*($0 + [80]), *(($0 + [88])), (int_64)-3897482046112530432, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [80])
	$4 = CALL $28($3, $2)
	
.LOOP $label$5:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [68]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $28($3, $5)
	
.LABEL $label$6
	CALL $46($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$2 = CALL db_lowerbound_i64(*($0 + [120]), *(($0 + [128])), (int_64)-3900893897155238000, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = ($0 + [120])
	$4 = CALL $47($3, $2)
	
.LOOP $label$8:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [64]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $47($3, $5)
	
.LABEL $label$9
	CALL $48($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$8 }
	
.LABEL $label$7
	$2 = CALL db_lowerbound_i64(*($0 + [160]), *(($0 + [168])), (int_64)-3897455725261094912, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$3 = ($0 + [160])
	$4 = CALL $49($3, $2)
	
.LOOP $label$11:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [68]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $49($3, $5)
	
.LABEL $label$12
	CALL $50($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$11 }
	
.LABEL $label$10
	$2 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-3905365620752908288, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	$3 = ($0 + [200])
	$4 = CALL $51($3, $2)
	
.LOOP $label$14:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [44]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$2 = CALL $51($3, $5)
	
.LABEL $label$15
	CALL $52($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$14 }
	
.LABEL $label$13
	$2 = CALL db_lowerbound_i64(*($0 + [240]), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$16 }
	$3 = ($0 + [240])
	$4 = CALL $22($3, $2)
	
.LOOP $label$17:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$2 = [0]
	$0 = CALL db_next_i64(*($4 + [28]), ($1 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$18 }
	$2 = CALL $22($3, $0)
	
.LABEL $label$18
	CALL $23($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$17 }
	
.LABEL $label$16
	$global$0 = ($1 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17591])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17696])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17629])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17696])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL require_auth($1)
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17416])
	$8 = CALL $166([17412])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [17774])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($8 + [17411]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [17819])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$7 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)), [17442])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [17468])
	if ( ((int_64)*($0 + [32]) != (int_64)$2) ){ goto $label$13 }
	CALL $55(($5 + [144]), $4)
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17495])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$76 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$79 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$78
	CALL memcpy($6, [17495], $8)
	
.LABEL $label$77
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$80 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [136])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [128]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [144]))
	if ( ($11 == 0) ){ goto $label$81 }
	*($5 + [144]) = $11
	$4 = *($6)
	
.LABEL $label$81
	CALL $57(*($5 + [148]), $4)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$80
	$4 = ($8 + [28])
	$8 = *($4)
	$6 = CALL $166([17502])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$83 }
	$10 = (CALL $147($4, [0], [-1], [17502], $6) == 0)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$82 }
	goto $label$75 
	
.LABEL $label$83
	if ( (*($5 + [128]) & [1]) ){ goto $label$75 }
	
.LABEL $label$82
	if ( ($10 == 0) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	CALL $140(($5 + [128]))
	
.LABEL $label$75
	CALL _ZdlPv(*($5 + [136]))
	if ( $10 ){ goto $label$73 }
	
.LABEL $label$74
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17495])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$66 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$72 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17512])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$65 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$69 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$72
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$71
	CALL memcpy($6, [17495], $8)
	
.LABEL $label$70
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$84 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [136])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [128]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [144]))
	if ( ($11 == 0) ){ goto $label$85 }
	*($5 + [144]) = $11
	$4 = *($6)
	
.LABEL $label$85
	CALL $57(*($5 + [148]), $4)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$84
	$4 = ($8 + [28])
	$8 = *($4)
	$6 = CALL $166([17549])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$87 }
	$10 = (CALL $147($4, [0], [-1], [17549], $6) == 0)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$86 }
	goto $label$50 
	
.LABEL $label$87
	if ( (*($5 + [128]) & [1]) ){ goto $label$50 }
	
.LABEL $label$86
	if ( ($10 == 0) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$69
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$68
	CALL memcpy($6, [17512], $8)
	
.LABEL $label$67
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$88 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [136])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [128]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$89 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$89
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$88
	$7 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$90 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$7 = (int_64)0
	
.LOOP $label$91:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$91 }
	
.LABEL $label$90
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$8 = CALL $166([17515])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$64 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$94 }
	*($5 + [112]) = ($8 << [1])
	$6 = (($5 + [112]) | [1])
	if ( $8 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [112]) = ($10 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $8
	
.LABEL $label$93
	CALL memcpy($6, [17515], $8)
	
.LABEL $label$92
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [96]), ($5 + [112]))
	$8 = *($6)
	if ( $8 ){ goto $label$95 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [120])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [112])
	*($8 + [8]) = *($5 + [96])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [112]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$96 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$96
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$95
	$9 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$97 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$9 = (int_64)0
	
.LOOP $label$98:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$98 }
	
.LABEL $label$97
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$8 = CALL $166([17526])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$101 }
	*($5 + [96]) = ($8 << [1])
	$6 = (($5 + [96]) | [1])
	if ( $8 ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$101
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [96]) = ($10 | [1])
	*($5 + [104]) = $6
	*($5 + [100]) = $8
	
.LABEL $label$100
	CALL memcpy($6, [17526], $8)
	
.LABEL $label$99
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [64]), ($5 + [96]))
	$8 = *($6)
	if ( $8 ){ goto $label$102 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [104])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [96])
	*($8 + [8]) = *($5 + [64])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [96]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$103 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$103
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$102
	$2 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$104 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$2 = (int_64)0
	
.LOOP $label$105:
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$105 }
	
.LABEL $label$104
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$8 = CALL $166([17538])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$108 }
	*($5 + [64]) = ($8 << [1])
	$6 = (($5 + [64]) | [1])
	if ( $8 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [64]) = ($10 | [1])
	*($5 + [72]) = $6
	*($5 + [68]) = $8
	
.LABEL $label$107
	CALL memcpy($6, [17538], $8)
	
.LABEL $label$106
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [32]), ($5 + [64]))
	$8 = *($6)
	if ( $8 ){ goto $label$109 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [72])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [64])
	*($8 + [8]) = *($5 + [32])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [64]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$110 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$110
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$109
	$6 = CALL $141(($5 + [80]), ($8 + [28]))
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$8 = CALL $166([17543])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$113 }
	*($5 + [32]) = ($8 << [1])
	$10 = (($5 + [32]) | [1])
	if ( $8 ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	$4 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($4)
	*($5 + [32]) = ($4 | [1])
	*($5 + [40]) = $10
	*($5 + [36]) = $8
	
.LABEL $label$112
	CALL memcpy($10, [17543], $8)
	
.LABEL $label$111
	*(($10 + $8)) = [0]
	$10 = CALL $56(($5 + [144]), ($5 + [156]), ($5 + [32]))
	$8 = *($10)
	if ( $8 ){ goto $label$114 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [40])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [32])
	*($8 + [8]) = *($5 + [156])
	*($10) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [32]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [144]))
	if ( ($11 == 0) ){ goto $label$115 }
	*($5 + [144]) = $11
	$4 = *($10)
	
.LABEL $label$115
	CALL $57(*($5 + [148]), $4)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$114
	$8 = CALL $141(($5 + [48]), ($8 + [28]))
	CALL $58($0, $1, $7, $9, $2, $6, $8, *($3))
	if ( (*($8) & [1]) ){ goto $label$117 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$116 }
	goto $label$60 
	
.LABEL $label$117
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$60 }
	
.LABEL $label$116
	CALL _ZdlPv(*($5 + [40]))
	$8 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$66
	CALL $140(($5 + [128]))
	
.LABEL $label$65
	CALL $140(($5 + [128]))
	
.LABEL $label$64
	CALL $140(($5 + [112]))
	
.LABEL $label$63
	CALL $140(($5 + [96]))
	
.LABEL $label$62
	CALL $140(($5 + [64]))
	
.LABEL $label$61
	CALL $140(($5 + [32]))
	
.LABEL $label$60
	$8 = [1]
	if ( (*($6) & [1]) ){ goto $label$58 }
	
.LABEL $label$59
	if ( (*($5 + [64]) & $8) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5 + [64]) & $8) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL _ZdlPv(*($5 + [72]))
	$8 = [1]
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$8 = [1]
	if ( (*($5 + [96]) & [1]) ){ goto $label$54 }
	
.LABEL $label$55
	if ( (*($5 + [112]) & $8) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL _ZdlPv(*($5 + [104]))
	if ( ((*($5 + [112]) & $8) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL _ZdlPv(*($5 + [120]))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$14 }
	goto $label$51 
	
.LABEL $label$52
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$51
	CALL _ZdlPv(*($5 + [136]))
	goto $label$14 
	
.LABEL $label$50
	CALL _ZdlPv(*($5 + [136]))
	if ( $10 ){ goto $label$48 }
	
.LABEL $label$49
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17495])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$41 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$47 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17556])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$44 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$47
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$46
	CALL memcpy($6, [17495], $8)
	
.LABEL $label$45
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$118 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [136])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [128]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [144]))
	if ( ($11 == 0) ){ goto $label$119 }
	*($5 + [144]) = $11
	$4 = *($6)
	
.LABEL $label$119
	CALL $57(*($5 + [148]), $4)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$118
	$4 = ($8 + [28])
	$8 = *($4)
	$6 = CALL $166([17574])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$121 }
	$10 = (CALL $147($4, [0], [-1], [17574], $6) == 0)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$120 }
	goto $label$33 
	
.LABEL $label$121
	if ( (*($5 + [128]) & [1]) ){ goto $label$33 }
	
.LABEL $label$120
	if ( ($10 == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$44
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$43
	CALL memcpy($6, [17556], $8)
	
.LABEL $label$42
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$122 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [136])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [128]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$123 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$123
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$122
	$7 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$124 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$7 = (int_64)0
	
.LOOP $label$125:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$125 }
	
.LABEL $label$124
	$9 = *($3)
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$8 = CALL $166([17560])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$128 }
	*($5 + [112]) = ($8 << [1])
	$6 = (($5 + [112]) | [1])
	if ( $8 ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$128
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [112]) = ($10 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $8
	
.LABEL $label$127
	CALL memcpy($6, [17560], $8)
	
.LABEL $label$126
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [96]), ($5 + [112]))
	$8 = *($6)
	if ( $8 ){ goto $label$129 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$3 = ($5 + [120])
	*(($8 + [24])) = *($3)
	*($8 + [16 align=4]) = *($5 + [112])
	*($8 + [8]) = *($5 + [96])
	*($6) = $8
	*($8 + [36]) = [0]
	*($3) = [0]
	*($5 + [112]) = (int_64)0
	$3 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$130 }
	*($5 + [144]) = $4
	$3 = *($6)
	
.LABEL $label$130
	CALL $57(*($5 + [148]), $3)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$129
	$3 = ($8 + [28])
	$8 = *($3)
	$6 = CALL $166([17569])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$131 }
	$10 = (CALL $147($3, [0], [-1], [17569], $6) == 0)
	
.LABEL $label$131
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$8 = CALL $166([17543])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$134 }
	*($5 + [96]) = ($8 << [1])
	$6 = (($5 + [96]) | [1])
	if ( $8 ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$134
	$3 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [96]) = ($3 | [1])
	*($5 + [104]) = $6
	*($5 + [100]) = $8
	
.LABEL $label$133
	CALL memcpy($6, [17543], $8)
	
.LABEL $label$132
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [64]), ($5 + [96]))
	$8 = *($6)
	if ( $8 ){ goto $label$135 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$3 = ($5 + [104])
	*(($8 + [24])) = *($3)
	*($8 + [16 align=4]) = *($5 + [96])
	*($8 + [8]) = *($5 + [64])
	*($6) = $8
	*($8 + [36]) = [0]
	*($3) = [0]
	*($5 + [96]) = (int_64)0
	$3 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$136 }
	*($5 + [144]) = $4
	$3 = *($6)
	
.LABEL $label$136
	CALL $57(*($5 + [148]), $3)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$135
	$8 = CALL $141(($5 + [16]), ($8 + [28]))
	CALL $59($0, $1, $7, $9, $10, $8)
	if ( (*($8) & [1]) ){ goto $label$138 }
	if ( (*($5 + [96]) & [1]) ){ goto $label$137 }
	goto $label$37 
	
.LABEL $label$138
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$137
	CALL _ZdlPv(*($5 + [104]))
	$8 = [1]
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$41
	CALL $140(($5 + [128]))
	
.LABEL $label$40
	CALL $140(($5 + [128]))
	
.LABEL $label$39
	CALL $140(($5 + [112]))
	
.LABEL $label$38
	CALL $140(($5 + [96]))
	
.LABEL $label$37
	$8 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$35 }
	
.LABEL $label$36
	if ( (*($5 + [128]) & $8) ){ goto $label$34 }
	goto $label$14 
	
.LABEL $label$35
	CALL _ZdlPv(*($5 + [120]))
	if ( ((*($5 + [128]) & $8) == 0) ){ goto $label$14 }
	
.LABEL $label$34
	CALL _ZdlPv(*($5 + [136]))
	goto $label$14 
	
.LABEL $label$33
	CALL _ZdlPv(*($5 + [136]))
	if ( $10 ){ goto $label$31 }
	
.LABEL $label$32
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17495])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$30 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17556])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$30
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$29
	CALL memcpy($6, [17495], $8)
	
.LABEL $label$28
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$139 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [136])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [128]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [144]))
	if ( ($11 == 0) ){ goto $label$140 }
	*($5 + [144]) = $11
	$4 = *($6)
	
.LABEL $label$140
	CALL $57(*($5 + [148]), $4)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$139
	$4 = ($8 + [28])
	$8 = *($4)
	$6 = CALL $166([17582])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$142 }
	$10 = (CALL $147($4, [0], [-1], [17582], $6) == 0)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$141 }
	goto $label$16 
	
.LABEL $label$142
	if ( (*($5 + [128]) & [1]) ){ goto $label$16 }
	
.LABEL $label$141
	if ( ($10 == 0) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$27
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$26
	CALL memcpy($6, [17556], $8)
	
.LABEL $label$25
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$143 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [136])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [128]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$144 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$144
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$143
	$7 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$145 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$7 = (int_64)0
	
.LOOP $label$146:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$146 }
	
.LABEL $label$145
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$8 = CALL $166([17578])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$149 }
	*($5 + [112]) = ($8 << [1])
	$6 = (($5 + [112]) | [1])
	if ( $8 ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [112]) = ($10 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $8
	
.LABEL $label$148
	CALL memcpy($6, [17578], $8)
	
.LABEL $label$147
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [96]), ($5 + [112]))
	$8 = *($6)
	if ( $8 ){ goto $label$150 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [120])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [112])
	*($8 + [8]) = *($5 + [96])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [112]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$151 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$151
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$150
	$10 = CALL $148(($8 + [28]), [0], [10])
	$9 = *($3)
	*(($5 + [104])) = [0]
	*($5 + [96]) = (int_64)0
	$8 = CALL $166([17543])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$154 }
	*($5 + [96]) = ($8 << [1])
	$6 = (($5 + [96]) | [1])
	if ( $8 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	$3 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [96]) = ($3 | [1])
	*($5 + [104]) = $6
	*($5 + [100]) = $8
	
.LABEL $label$153
	CALL memcpy($6, [17543], $8)
	
.LABEL $label$152
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [64]), ($5 + [96]))
	$8 = *($6)
	if ( $8 ){ goto $label$155 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$3 = ($5 + [104])
	*(($8 + [24])) = *($3)
	*($8 + [16 align=4]) = *($5 + [96])
	*($8 + [8]) = *($5 + [64])
	*($6) = $8
	*($8 + [36]) = [0]
	*($3) = [0]
	*($5 + [96]) = (int_64)0
	$3 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$156 }
	*($5 + [144]) = $4
	$3 = *($6)
	
.LABEL $label$156
	CALL $57(*($5 + [148]), $3)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$155
	$8 = CALL $141($5, ($8 + [28]))
	CALL $60($0, $1, $7, ($10 & [255]), $9, $8)
	if ( (*($8) & [1]) ){ goto $label$158 }
	if ( (*($5 + [96]) & [1]) ){ goto $label$157 }
	goto $label$20 
	
.LABEL $label$158
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$157
	CALL _ZdlPv(*($5 + [104]))
	$8 = [1]
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$24
	CALL $140(($5 + [128]))
	
.LABEL $label$23
	CALL $140(($5 + [128]))
	
.LABEL $label$22
	CALL $140(($5 + [112]))
	
.LABEL $label$21
	CALL $140(($5 + [96]))
	
.LABEL $label$20
	$8 = [1]
	if ( (*($5 + [112]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($5 + [128]) & $8) ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$18
	CALL _ZdlPv(*($5 + [120]))
	if ( ((*($5 + [128]) & $8) == 0) ){ goto $label$14 }
	
.LABEL $label$17
	CALL _ZdlPv(*($5 + [136]))
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($5 + [136]))
	if ( ($10 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$8 = CALL $166([17556])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$161 }
	*($5 + [128]) = ($8 << [1])
	$6 = (($5 + [128]) | [1])
	if ( $8 ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $6
	*($5 + [132]) = $8
	
.LABEL $label$160
	CALL memcpy($6, [17556], $8)
	
.LABEL $label$159
	*(($6 + $8)) = [0]
	$6 = CALL $56(($5 + [144]), ($5 + [112]), ($5 + [128]))
	$8 = *($6)
	if ( $8 ){ goto $label$162 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [136])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [128])
	*($8 + [8]) = *($5 + [112])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [128]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [144]))
	if ( ($4 == 0) ){ goto $label$163 }
	*($5 + [144]) = $4
	$10 = *($6)
	
.LABEL $label$163
	CALL $57(*($5 + [148]), $10)
	*($5 + [152]) = (*($5 + [152]) + [1])
	
.LABEL $label$162
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$165 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$7 = (int_64)0
	
.LOOP $label$166:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$166 }
	goto $label$164 
	
.LABEL $label$165
	$7 = (int_64)0
	
.LABEL $label$164
	CALL $61($0, $1, $7, *($3))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$14
	CALL $62(($5 + [144]), *($5 + [148]))
	
.LABEL $label$13
	$global$0 = ($5 + [160])
	return (unreachable)
	
.LABEL $label$12
	CALL $140(($5 + [128]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17960])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*($4 + [208]) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [248]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [56]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $127(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18598])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [64]))
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3900893897155238000, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3900893897155237999, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
	CALL $131()
}

int_32 .FUNC $43 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [40])
	$4 = *(($0 + [68]))
	$3 = *(($0 + [64]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	if ( *($6 + [73]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $30($2, $5)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	
.LABEL $label$7
	if ( (*($6 + [73]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( *($6 + [76]) ){ goto $label$2 }
	if ( (*($6 + [74]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($0 + [40])
	$4 = *(($0 + [68]))
	$3 = *(($0 + [64]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $30($2, $5)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	
.LABEL $label$1
	$7 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18248])
	CALL $110($2, $6, $7)
	CALL $111($0, $1)
	CALL $112($0, $1)
}

void .FUNC $41 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [208])
	$global$0 = $5
	*($5 + [48]) = $4
	*($5 + [56]) = $1
	*($5 + [40]) = ($0 + [160])
	CALL $96(($5 + [64]), ($5 + [40]), ($5 + [56]))
	$6 = *($5 + [68])
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_64)*($5 + [56]) != (int_64)*($6 + [8])) ){ goto $label$3 }
	$1 = *($5 + [64])
	*($5 + [32]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$2 }
	$7 = (($5 + [64]) + [57])
	$8 = (($5 + [152]) + [8])
	$1 = (int_64)0
	$9 = ($5 + [188])
	$10 = ($5 + [196])
	$11 = ($5 + [204])
	
.LOOP $label$4:
	if ( ((int_64)*($6 + [8]) != (int_64)*($5 + [56])) ){ goto $label$5 }
	if ( ((int_32)*($6 + [16]) != (int_32)$2) ){ goto $label$5 }
	$12 = *($0)
	$4 = *($6 + [24])
	$13 = *($5 + [48])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18248])
	$14 = *($5 + [40])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$14), [18283])
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$6()), [18329])
	$13 = ((uint_64)((int_64)$13 * (int_64)$4) / (uint_64)$3)
	*($6 + [48]) = $13
	$15 = ($6 + [40])
	*($8) = *($15)
	$16 = ($6 + [8])
	*($5 + [152]) = *($16)
	$4 = *($6)
	CALL eosio_assert([1], [18380])
	*((($5 + [136]) + [8])) = $7
	*($5 + [140]) = ($5 + [64])
	*($5 + [136]) = ($5 + [64])
	*($5 + [168]) = ($5 + [136])
	*((($5 + [176]) + [8])) = ($6 + [16])
	*($9) = ($6 + [24])
	*((($5 + [176]) + [16])) = ($6 + [32])
	*($10) = $15
	*((($5 + [176]) + [24])) = ($6 + [48])
	*($11) = ($6 + [56])
	*($5 + [180]) = $16
	*($5 + [176]) = $6
	CALL $99(($5 + [176]), ($5 + [168]))
	CALL db_update_i64(*($6 + [68]), $12, ($5 + [64]), [57])
	if ( (uint_64)($4 <= *($14 + [16])) ){ goto $label$6 }
	*(($14 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [176]) = *($16)
	if ( (CALL $165(($5 + [152]), ($5 + [176]), [8]) == 0) ){ goto $label$7 }
	$17 = ($6 + [72])
	$16 = *($17)
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$8 }
	$16 = CALL db_idx64_find_primary(*($14), *($14 + [8]), (int_64)-3897455725261094912, ($5 + [168]), $4)
	*($17) = $16
	
.LABEL $label$8
	CALL db_idx64_update($16, $12, ($5 + [176]))
	
.LABEL $label$7
	*($5 + [176]) = *($15)
	if ( (CALL $165($8, ($5 + [176]), [8]) == 0) ){ goto $label$9 }
	$15 = ($6 + [76])
	$6 = *($15)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$10 }
	$6 = CALL db_idx64_find_primary(*($14), *($14 + [8]), (int_64)-3897455725261094911, ($5 + [168]), $4)
	*($15) = $6
	
.LABEL $label$10
	CALL db_idx64_update($6, $12, ($5 + [176]))
	
.LABEL $label$9
	$6 = *($5 + [36])
	CALL $44($0, *($6 + [40]), ((int_64)*($6 + [24]) + (int_64)$13), CALL $141(($5 + [16]), [8616]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*((($5 + [16]) + [8])))
	
.LABEL $label$11
	$1 = ((int_64)$13 + (int_64)$1)
	
.LABEL $label$5
	CALL $97(($5 + [32]))
	$6 = *($5 + [36])
	if ( $6 ){ goto $label$4 }
	$4 = *($5 + [48])
	goto $label$1 
	
.LABEL $label$3
	*($5 + [36]) = [0]
	*($5 + [32]) = ($5 + [40])
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	$4 = (int_64)
	CALL eosio_assert((uint_64)($4($4 - $1)) <= (int_64)1000), *([0] + [8388]))
	$6 = CALL $141($5, [8544])
	CALL $95($0, *($5 + [56]), $4, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$12
	$2 = ($0 + [40])
	$4 = *($5 + [56])
	$14 = *(($0 + [68]))
	$16 = *(($0 + [64]))
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($14 + [-24])
	$15 = *($6)
	if ( ((int_64)*($15) == (int_64)$4) ){ goto $label$15 }
	$14 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($15 + [160]) == (int_32)$2), [17969])
	goto $label$13 
	
.LABEL $label$14
	$15 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$15 = CALL $30($2, $6)
	CALL eosio_assert(((int_32)*($15 + [160]) == (int_32)$2), [17969])
	
.LABEL $label$13
	$4 = *($0)
	*($5 + [64]) = ($5 + [48])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [18248])
	CALL $100($2, $15, $4, ($5 + [64]))
	$global$0 = ($5 + [208])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [24]) = $1
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17969])
	*($2 + [20]) = $7
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $30($3, $6)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$3), [17969])
	*($2 + [20]) = $6
	goto $label$1 
	
.LABEL $label$5
	*($2 + [20]) = [0]
	
.LABEL $label$1
	*($2 + [16]) = $3
	*($2 + [8]) = ($0 + [120])
	CALL $26(($2 + [32]), ($2 + [8]), ($2 + [24]))
	$6 = *($2 + [36])
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((int_64)*($2 + [24]) != (int_64)*($6 + [8])) ){ goto $label$8 }
	$1 = *($2 + [32])
	*($2) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$6 }
	$8 = (($2 + [32]) + [58])
	$9 = (($2 + [112]) + [8])
	$1 = (int_64)0
	$10 = ($2 + [148])
	$11 = ($2 + [156])
	$12 = ($2 + [164])
	
.LOOP $label$9:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [24])) ){ goto $label$10 }
	$14 = ((int_64)*($6 + [24]) + (int_64)$1)
	$13 = *(*($2 + [20]) + [80])
	if ( ((uint_64)$13 <= (uint_64)$14) ){ goto $label$7 }
	$13 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18248])
	$5 = *($2 + [8])
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$5), [18283])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$6()), [18329])
	$4 = ($6 + [16])
	*($9) = *($4)
	*($6 + [48]) = *(*($2 + [4]) + [24])
	$7 = ($6 + [8])
	*($2 + [112]) = *($7)
	$1 = *($6)
	CALL eosio_assert([1], [18380])
	*((($2 + [96]) + [8])) = $8
	*($2 + [100]) = ($2 + [32])
	*($2 + [96]) = ($2 + [32])
	*($2 + [128]) = ($2 + [96])
	*((($2 + [136]) + [8])) = $4
	*($10) = ($6 + [24])
	*((($2 + [136]) + [16])) = ($6 + [32])
	*($11) = ($6 + [40])
	*((($2 + [136]) + [24])) = ($6 + [48])
	*($12) = ($6 + [56])
	*((($2 + [136]) + [32])) = ($6 + [57])
	*($2 + [140]) = $7
	*($2 + [136]) = $6
	CALL $29(($2 + [136]), ($2 + [128]))
	CALL db_update_i64(*($6 + [64]), $13, ($2 + [32]), [58])
	if ( (uint_64)($1 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($2 + [136]) = *($7)
	if ( (CALL $165(($2 + [112]), ($2 + [136]), [8]) == 0) ){ goto $label$12 }
	$7 = *($6 + [68])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$13 }
	$7 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3900893897155238000, ($2 + [128]), $1)
	*(($6 + [68])) = $7
	
.LABEL $label$13
	CALL db_idx64_update($7, $13, ($2 + [136]))
	
.LABEL $label$12
	*($2 + [136]) = *($4)
	if ( (CALL $165($9, ($2 + [136]), [8]) == 0) ){ goto $label$14 }
	$4 = ($6 + [72])
	$6 = *($4)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3900893897155237999, ($2 + [128]), $1)
	*($4) = $6
	
.LABEL $label$15
	CALL db_idx64_update($6, $13, ($2 + [136]))
	
.LABEL $label$14
	$1 = $14
	
.LABEL $label$10
	CALL $27($2)
	$6 = *($2 + [4])
	if ( $6 ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	*($2 + [4]) = [0]
	*($2) = ($2 + [8])
	goto $label$6 
	
.LABEL $label$7
	$14 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18248])
	$5 = *($2 + [8])
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$5), [18283])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$6()), [18329])
	*($6 + [48]) = (int_64))($13 - $1)
	$4 = ($6 + [8])
	*($2 + [112]) = *($4)
	$7 = ($6 + [16])
	*($2 + [120]) = *($7)
	$1 = *($6)
	CALL eosio_assert([1], [18380])
	*($2 + [104]) = $8
	*($2 + [100]) = ($2 + [32])
	*($2 + [96]) = ($2 + [32])
	*($2 + [128]) = ($2 + [96])
	*($2 + [140]) = $4
	*($2 + [136]) = $6
	*($2 + [144]) = $7
	*($2 + [148]) = ($6 + [24])
	*($2 + [152]) = ($6 + [32])
	*($2 + [156]) = ($6 + [40])
	*($2 + [160]) = ($6 + [48])
	*($2 + [164]) = ($6 + [56])
	*($2 + [168]) = ($6 + [57])
	CALL $29(($2 + [136]), ($2 + [128]))
	CALL db_update_i64(*($6 + [64]), $14, ($2 + [32]), [58])
	if ( (uint_64)($1 <= *($5 + [16])) ){ goto $label$16 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$7 = (($2 + [112]) + [8])
	*($2 + [136]) = *($4)
	if ( (CALL $165(($2 + [112]), ($2 + [136]), [8]) == 0) ){ goto $label$17 }
	$4 = *($6 + [68])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$18 }
	$4 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3900893897155238000, ($2 + [128]), $1)
	*(($6 + [68])) = $4
	
.LABEL $label$18
	CALL db_idx64_update($4, $14, ($2 + [136]))
	
.LABEL $label$17
	*($2 + [136]) = *(($6 + [16]))
	if ( (CALL $165($7, ($2 + [136]), [8]) == 0) ){ goto $label$6 }
	$4 = ($6 + [72])
	$6 = *($4)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3900893897155237999, ($2 + [128]), $1)
	*($4) = $6
	
.LABEL $label$19
	CALL db_idx64_update($6, $14, ($2 + [136]))
	
.LABEL $label$6
	$6 = *($2 + [20])
	$1 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [18248])
	CALL $108($3, $6, $1, ($2 + [32]))
	$global$0 = ($2 + [176])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [60]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [57])
	CALL $125(($3 + [40]), ($3 + [32]))
	*($5 + [64]) = $1
	*($5 + [68 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18598])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18598])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [164]))
	$6 = *(($1 + [168]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	if ( ((int_64)*($0 + [32]) == (int_64)$1) ){ goto $label$1 }
	$5 = CALL $166([17412])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17774])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [17411]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17819])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17872])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [17921])
	$5 = ($0 + [32])
	$8 = *($5)
	*($4 + [76]) = [6]
	*($4 + [72]) = [17748]
	*($4 + [16]) = *($4 + [72])
	$6 = *(CALL $4(($4 + [24]), ($4 + [16])))
	*($4 + [76]) = [11]
	*($4 + [72]) = [17941]
	*($4 + [8]) = *($4 + [72])
	$11 = *(CALL $4(($4 + [24]), ($4 + [8])))
	*($4 + [76]) = [8]
	*($4 + [72]) = [17952]
	*($4) = *($4 + [72])
	$12 = *(CALL $4(($4 + [24]), $4))
	*((($4 + [24]) + [24])) = $9
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($5)
	$7 = CALL $141((($4 + [24]) + [32]), $3)
	*($4 + [80]) = $12
	*($4 + [72]) = $11
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = $6
	*((($4 + [72]) + [36])) = [0]
	$10 = ($5 + [16])
	*((($4 + [72]) + [24])) = $10
	*(($4 + [92])) = $10
	*($4 + [88]) = $5
	*($4 + [100 align=4]) = (int_64)0
	$5 = *($7)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [100])
	
.LOOP $label$13:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$13 }
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $84($7, $5)
	$7 = *(($4 + [104]))
	$5 = *(($4 + [100]))
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$5 = [0]
	
.LABEL $label$14
	*($4 + [132]) = $5
	*($4 + [128]) = $5
	*($4 + [136]) = $7
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [24])
	CALL $104(($4 + [120]), ($4 + [112]))
	CALL $85(($4 + [128]), ($4 + [72]))
	$5 = *($4 + [128])
	CALL send_inline($5, (*($4 + [132]) - $5))
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$16 }
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [100])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [104])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($4 + [88])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($4 + [92])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $167 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $166 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $160($3, (int_64)0)
	$4 = CALL $162($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $161($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $155()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $161($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18705]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $160($0, (int_64)0)
	*(CALL $155()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $161($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $161($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $161($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $161($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18705])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $161($0)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $161($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $161($0)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $161($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $160($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18705]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18705]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $161($0) + [18705]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $155()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $155()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $155()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $161 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $159($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $160 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $155())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $170($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $168 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $175 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17344])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17152]
	$3 = (((int_32)$1 * (int_32)[12]) + [17152])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$8 = ($global$0 - [224])
	$global$0 = $8
	*($8 + [80]) = $2
	*($8 + [88]) = $1
	*($8 + [72]) = $3
	*($8 + [64]) = $4
	*($8 + [56]) = $7
	CALL eosio_assert(((uint_64)$7 > (uint_64)(int_64)99999), *([0] + [8328]))
	$9 = ($0 + [240])
	$11 = *(($0 + [268]))
	$10 = *(($0 + [264]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$2 }
	
.LOOP $label$4:
	$12 = ($11 + [-24])
	$13 = *($12)
	if ( ((int_64)*($13) == (int_64)1) ){ goto $label$3 }
	$11 = $12
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17969])
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL $22($9, CALL $fimport$9(*($9), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)1))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($13 + [8]) != (int_64)1), *([0] + [8368]))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)1800000) <= $4), *([0] + [8376]))
	CALL eosio_assert((uint_64)($7 <= (int_64)1000000001), *([0] + [8328]))
	$7 = *($0)
	*($8 + [108]) = $5
	*($8 + [100]) = ($8 + [88])
	*($8 + [96]) = ($8 + [80])
	*($8 + [104]) = ($8 + [56])
	*($8 + [112]) = ($8 + [72])
	*($8 + [116]) = ($8 + [64])
	*($8 + [208]) = $7
	CALL eosio_assert(((int_64)*($0 + [40]) == (int_64)CALL $fimport$6()), [18043])
	$11 = ($0 + [40])
	*($8 + [168]) = $11
	*($8 + [172]) = ($8 + [96])
	*($8 + [176]) = ($8 + [208])
	*(($12 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($12 + [16 align=4]) = (int_64)0
	*($12 + [24]) = [0]
	*($12 + [160]) = $11
	CALL $78(($8 + [168]), $12)
	*($8 + [48]) = $12
	$7 = *($12)
	*($8 + [168]) = $7
	$13 = *($12 + [164])
	*($8 + [40]) = $13
	$10 = ($0 + [68])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [72]))) ){ goto $label$7 }
	*($11 + [8]) = $7
	*($11 + [16]) = $13
	*($8 + [48]) = [0]
	*($11) = $12
	*($10) = ($11 + [24])
	$11 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($11 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $79(($0 + [64]), ($8 + [48]), ($8 + [168]), ($8 + [40]))
	$11 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($11 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($11 + [24])))
	
.LABEL $label$8
	CALL _ZdlPv($11)
	
.LABEL $label$5
	$7 = *($12)
	*($8 + [48]) = $7
	$4 = *($0)
	CALL eosio_assert(((int_64)*($0 + [80]) == (int_64)CALL $fimport$6()), [18043])
	*(($12 = CALL _Znwj([80])) + [64]) = ($0 + [80])
	*($12 + [8]) = (int_64)0
	*($12) = $7
	*($12 + [16]) = (int_64)0
	*($12 + [24]) = (int_64)0
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = (int_64)0
	*($12 + [48]) = (int_64)0
	*($12 + [56]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	*($8 + [216]) = (($8 + [96]) + [64])
	*($8 + [212]) = ($8 + [96])
	*($8 + [208]) = ($8 + [96])
	*($8 + [40]) = ($8 + [208])
	*($8 + [172]) = ($12 + [8])
	*($8 + [168]) = $12
	*($8 + [176]) = ($12 + [16])
	*($8 + [180]) = ($12 + [24])
	*($8 + [184]) = ($12 + [32])
	*($8 + [188]) = ($12 + [40])
	*($8 + [192]) = ($12 + [48])
	*($8 + [196]) = ($12 + [56])
	CALL $80(($8 + [168]), ($8 + [40]))
	$7 = *($12)
	$13 = CALL db_store_i64(*(($0 + [88])), (int_64)-3897482046112530432, $4, $7, ($8 + [96]), [64])
	*($12 + [68]) = $13
	$11 = ($0 + [96])
	if ( (uint_64)($7 <= *($11)) ){ goto $label$9 }
	*($11) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($8 + [168]) = $12
	$7 = *($12)
	*($8 + [96]) = $7
	*($8 + [208]) = $13
	$10 = ($0 + [108])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [112]))) ){ goto $label$12 }
	*($11 + [8]) = $7
	*($11 + [16]) = $13
	*($8 + [168]) = [0]
	*($11) = $12
	*($10) = ($11 + [24])
	$12 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( $12 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $81(($0 + [104]), ($8 + [168]), ($8 + [96]), ($8 + [208]))
	$12 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( ($12 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($12)
	
.LABEL $label$10
	$7 = *($0)
	*($8 + [96]) = $0
	*($8 + [100]) = ($8 + [48])
	*($8 + [104]) = ($8 + [88])
	*($8 + [108]) = ($8 + [56])
	*($8 + [208]) = $7
	CALL eosio_assert(((int_64)*($0 + [120]) == (int_64)CALL $fimport$6()), [18043])
	$11 = ($0 + [120])
	*($8 + [168]) = $11
	*($8 + [172]) = ($8 + [96])
	*($8 + [176]) = ($8 + [208])
	*(($12 = CALL _Znwj([80])) + [60]) = $11
	*($12 + [16]) = (int_64)0
	CALL $82(($8 + [168]), $12)
	*($8 + [40]) = $12
	$7 = *($12)
	*($8 + [168]) = $7
	$13 = *($12 + [64])
	*($8 + [204]) = $13
	$10 = ($0 + [148])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [152]))) ){ goto $label$15 }
	*($11 + [8]) = $7
	*($11 + [16]) = $13
	*($8 + [40]) = [0]
	*($11) = $12
	*($10) = ($11 + [24])
	$12 = *($8 + [40])
	*($8 + [40]) = [0]
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $83(($0 + [144]), ($8 + [40]), ($8 + [168]), ($8 + [204]))
	$12 = *($8 + [40])
	*($8 + [40]) = [0]
	if ( ($12 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($12)
	
.LABEL $label$13
	$11 = *(($0 + [268]))
	$10 = *(($0 + [264]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$19:
	$12 = ($11 + [-24])
	$13 = *($12)
	if ( ((int_64)*($13) == (int_64)7) ){ goto $label$18 }
	$11 = $12
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17969])
	goto $label$16 
	
.LABEL $label$17
	$13 = [0]
	$12 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)7)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$16 }
	$13 = CALL $22($9, $12)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$16
	$7 = *($0 + [32])
	*($8 + [172]) = [6]
	*($8 + [168]) = [17748]
	*($8 + [24]) = *($8 + [168])
	$4 = *(CALL $4(($8 + [96]), ($8 + [24])))
	$3 = *($13 + [16])
	*($8 + [172]) = [3]
	*($8 + [168]) = [17754]
	*($8 + [16]) = *($8 + [168])
	$1 = *(CALL $4(($8 + [96]), ($8 + [16])))
	$12 = *($6)
	if ( ($12 & [1]) ){ goto $label$21 }
	$12 = uint_32($12 >> [1])
	$0 = ($6 + [1])
	goto $label$20 
	
.LABEL $label$21
	$12 = *($6 + [4])
	$0 = *($6 + [8])
	
.LABEL $label$20
	*($8 + [36]) = $12
	*($8 + [32]) = $0
	*($8 + [8]) = *($8 + [32])
	$12 = CALL $4(($8 + [40]), ($8 + [8]))
	*($8 + [96]) = $3
	*($8 + [104]) = $1
	*($8 + [168]) = *($8 + [88])
	*($8 + [176]) = *($12)
	*(($12 = CALL _Znwj([16]))) = $7
	*($12 + [8]) = $4
	*(($8 + [132])) = [0]
	$0 = ($12 + [16])
	*(($8 + [120])) = $0
	*(($8 + [116])) = $0
	*($8 + [112]) = $12
	*($8 + [124 align=4]) = (int_64)0
	CALL $84(($8 + [124]), [16])
	$12 = *($8 + [124])
	$0 = (*(($8 + [128])) - $12)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17757])
	CALL memcpy($12, ($8 + [168]), [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17757])
	CALL memcpy(($12 + [8]), (($8 + [168]) + [8]), [8])
	CALL $85(($8 + [208]), ($8 + [96]))
	$12 = *($8 + [208])
	CALL send_inline($12, (*($8 + [212]) - $12))
	$12 = *($8 + [208])
	if ( ($12 == 0) ){ goto $label$22 }
	*($8 + [212]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$22
	$12 = *($8 + [124])
	if ( ($12 == 0) ){ goto $label$23 }
	*(($8 + [128])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$23
	$12 = *($8 + [112])
	if ( ($12 == 0) ){ goto $label$24 }
	*(($8 + [116])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$24
	$global$0 = ($8 + [224])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [120]) = $2
	*($6 + [128]) = $1
	*($6 + [112]) = $3
	*($6 + [111]) = $4
	CALL eosio_assert(((uint_64)$3 > (uint_64)(int_64)99999), *([0] + [8328]))
	CALL eosio_assert(CALL $77($0, $2), *([0] + [8324]))
	$7 = ($0 + [40])
	$9 = *(($0 + [68]))
	$8 = *(($0 + [64]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$3 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [160]) == (int_32)$7), [17969])
	goto $label$1 
	
.LABEL $label$2
	$10 = CALL $30($7, CALL $fimport$9(*($7), *(($0 + [48])), (int_64)-3902253456596926464, $2))
	CALL eosio_assert(((int_32)*($10 + [160]) == (int_32)$7), [17969])
	
.LABEL $label$1
	*($6 + [100]) = $10
	*($6 + [96]) = $7
	CALL eosio_assert((uint_64)(((int_64)*($10 + [88]) + (int_64)$3) <= (int_64)1000000001), *([0] + [8328]))
	$2 = *($0)
	*($6 + [56]) = $0
	*($6 + [60]) = ($6 + [120])
	*($6 + [64]) = ($6 + [128])
	*($6 + [68]) = ($6 + [112])
	*($6 + [72]) = ($6 + [111])
	*($6 + [144]) = $2
	CALL eosio_assert(((int_64)*($0 + [120]) == (int_64)CALL $fimport$6()), [18043])
	$9 = ($0 + [120])
	*($6 + [40]) = $9
	*($6 + [44]) = ($6 + [56])
	*($6 + [48]) = ($6 + [144])
	*(($4 = CALL _Znwj([80])) + [60]) = $9
	*($4 + [16]) = (int_64)0
	CALL $86(($6 + [40]), $4)
	*($6 + [32]) = $4
	$2 = *($4)
	*($6 + [40]) = $2
	$10 = *($4 + [64])
	*($6 + [140]) = $10
	$8 = ($0 + [148])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [152]))) ){ goto $label$7 }
	*($9 + [8]) = $2
	*($9 + [16]) = $10
	*($6 + [32]) = [0]
	*($9) = $4
	*($8) = ($9 + [24])
	$4 = *($6 + [32])
	$9 = [0]
	*($6 + [32]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $83(($0 + [144]), ($6 + [32]), ($6 + [40]), ($6 + [140]))
	$4 = *($6 + [32])
	$9 = [0]
	*($6 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($6 + [100])
	$2 = *($0)
	*($6 + [60]) = ($6 + [112])
	*($6 + [56]) = ($6 + [96])
	CALL eosio_assert(((int_32)$4 != (int_32)$9), [18248])
	CALL $87($7, $4, $2, ($6 + [56]))
	$7 = ($0 + [240])
	$9 = *(($0 + [268]))
	$8 = *(($0 + [264]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)7) ){ goto $label$10 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$7), [17969])
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $22($7, $4)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$7), [17969])
	
.LABEL $label$8
	$2 = *($0 + [32])
	*($6 + [44]) = [6]
	*($6 + [40]) = [17748]
	*($6 + [16]) = *($6 + [40])
	$3 = *(CALL $4(($6 + [56]), ($6 + [16])))
	$1 = *($10 + [16])
	*($6 + [44]) = [3]
	*($6 + [40]) = [17754]
	*($6 + [8]) = *($6 + [40])
	$11 = *(CALL $4(($6 + [56]), ($6 + [8])))
	$4 = *($5)
	if ( ($4 & [1]) ){ goto $label$13 }
	$4 = uint_32($4 >> [1])
	$9 = ($5 + [1])
	goto $label$12 
	
.LABEL $label$13
	$4 = *($5 + [4])
	$9 = *($5 + [8])
	
.LABEL $label$12
	*($6 + [28]) = $4
	*($6 + [24]) = $9
	*($6) = *($6 + [24])
	$4 = CALL $4(($6 + [32]), $6)
	*($6 + [56]) = $1
	*($6 + [64]) = $11
	*($6 + [40]) = *($6 + [128])
	*($6 + [48]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($6 + [92])) = [0]
	$9 = ($4 + [16])
	*(($6 + [80])) = $9
	*(($6 + [76])) = $9
	*($6 + [72]) = $4
	*($6 + [84 align=4]) = (int_64)0
	CALL $84(($6 + [84]), [16])
	$4 = *($6 + [84])
	$9 = (*(($6 + [88])) - $4)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [17757])
	CALL memcpy($4, ($6 + [40]), [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [17757])
	CALL memcpy(($4 + [8]), (($6 + [40]) + [8]), [8])
	CALL $85(($6 + [144]), ($6 + [56]))
	$4 = *($6 + [144])
	CALL send_inline($4, (*($6 + [148]) - $4))
	$4 = *($6 + [144])
	if ( ($4 == 0) ){ goto $label$14 }
	*($6 + [148]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4 = *($6 + [84])
	if ( ($4 == 0) ){ goto $label$15 }
	*(($6 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$4 = *($6 + [72])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($6 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$global$0 = ($6 + [160])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18598])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094912, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [76]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094911, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($5 + [24]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $130(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($5 + [48 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18598])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3905365620752908288, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [52]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3905365620752908287, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17960])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $118(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $141($2, ($1 + [32]))
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	$6 = CALL $141(($2 + [48]), $1)
	CALL void $3((int_32 $5), (int_64 $4), (int_64 ($2 + [32])), (int_32 $6), (int_32 $0))
	if ( (*($2 + [48]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [4 align=4]) = (int_64)0
	$3 = ($0 + [4])
	*($0) = $3
	$4 = CALL $146($1, [58], [0])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = ($1 + [4])
	$7 = ($1 + [8])
	$8 = [0]
	
.LOOP $label$2:
	$9 = *($1)
	$13 = *($6)
	$11 = *($7)
	$10 = CALL $166([8313])
	$9 = ($9 & [1])
	$13 = ( $13 ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$13 <= (uint_32)$4) ){ goto $label$1 }
	$11 = ( $11 ? $5 : $9 )
	$9 = ($11 + $4)
	if ( ($10 == 0) ){ goto $label$3 }
	$13 = ($13 - $4)
	
.LOOP $label$4:
	if ( (CALL $164([8313], *($9), $10) == 0) ){ goto $label$3 }
	$9 = ($9 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$13 = ($9 - $11)
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$1 }
	$11 = *($1)
	$12 = *($6)
	$14 = *($7)
	$9 = CALL $166([8316])
	$10 = [-1]
	$11 = ($11 & [1])
	$12 = ( $12 ? uint_32($11 >> [1]) : $11 )
	if ( ($12 <= $13) ){ goto $label$5 }
	$10 = $13
	if ( ($9 == 0) ){ goto $label$5 }
	$11 = ($14 + $13)
	$14 = ( $14 ? $5 : $11 )
	$12 = ($14 + $12)
	$10 = ($12 - $11)
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = (($10 - $9) + [1])
	if ( ($10 == 0) ){ goto $label$7 }
	$10 = CALL $164($11, [59], $10)
	if ( ($10 == 0) ){ goto $label$7 }
	if ( (CALL $165($10, [8316], $9) == 0) ){ goto $label$6 }
	$11 = ($10 + [1])
	$10 = ($12 - $11)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = $12
	
.LABEL $label$6
	$10 = ( [-1] ? ($10 - $14) : ((int_32)$10 == (int_32)$12) )
	
.LABEL $label$5
	$9 = CALL $142(($2 + [16]), $1, $8, ($4 - $8), $1)
	CALL $142($2, $1, $13, ($10 - $13), $1)
	$13 = CALL $56($0, ($2 + [28]), $9)
	if ( *($13) ){ goto $label$13 }
	*(($9 = CALL _Znwj([40]))) = (int_64)0
	$4 = (($2 + [16]) + [8])
	*(($9 + [24])) = *($4)
	*($9 + [16 align=4]) = *($2 + [16])
	*($9 + [28 align=4]) = *($2)
	$8 = ($2 + [8])
	*(($9 + [36])) = *($8)
	*($9 + [8]) = *($2 + [28])
	*($2) = (int_64)0
	*($13) = $9
	*($4) = [0]
	*($8) = [0]
	*($2 + [16]) = (int_64)0
	$4 = *(*($0))
	if ( ($4 == 0) ){ goto $label$14 }
	*($0) = $4
	$9 = *($13)
	
.LABEL $label$14
	CALL $57(*($3), $9)
	*(($9 = ($0 + [8]))) = (*($9) + [1])
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [8])))
	if ( (*($2 + [16]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	
.LABEL $label$9
	$8 = ( [-1] ? ($10 + [1]) : ((int_32)$10 == (int_32)[-1]) )
	$4 = CALL $146($1, [58], $8)
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $165(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $165(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8952]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8956])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8952]) = [1]
	$2 = ($2 << [16])
	*([0] + [8956]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8956])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8956]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8952]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8952]) = [1]
	$3 = ($3 << [16])
	*([0] + [8956]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8956])
	
.LABEL $label$10
	*([0] + [8956]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $152 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $153 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $151($1, $0, [8472])
	CALL $153()
	(unreachable)
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $166($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $144($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $156 (int_32 $0)
{
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $167([8676])
	$3 = *([0] + [8684])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8688])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8692]
	*([0] + [8684]) = [8692]
	$4 = *([0] + [8688])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $174([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8684])
	*([0] + [8684]) = $3
	*([0] + [8688]) = [0]
	
.LABEL $label$2
	*([0] + [8688]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $168([8676])
	return [0]
	
.LABEL $label$1
	CALL $168([8676])
	return [-1]
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 ()
{
	return [8668]
}

int_32 .FUNC $158 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $159 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $158($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $69 (int_32 $0)
{
	if ( ((*([0] + [8568]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8576]))
	
.LABEL $label$1
}

void .FUNC $68 (int_32 $0)
{
	if ( ((*([0] + [8556]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8564]))
	
.LABEL $label$1
}

void .FUNC $65 (int_32 $0)
{
	if ( ((*([0] + [8520]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8528]))
	
.LABEL $label$1
}

void .FUNC $64 (int_32 $0)
{
	if ( ((*([0] + [8508]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8516]))
	
.LABEL $label$1
}

void .FUNC $67 (int_32 $0)
{
	if ( ((*([0] + [8544]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8552]))
	
.LABEL $label$1
}

void .FUNC $66 (int_32 $0)
{
	if ( ((*([0] + [8532]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8540]))
	
.LABEL $label$1
}

void .FUNC $61 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [40]) = $2
	*($4 + [48]) = $1
	*($4 + [32]) = $3
	$5 = [0]
	CALL eosio_assert(CALL $43($0, $2), *([0] + [8340]))
	$6 = ($0 + [40])
	$8 = *(($0 + [68]))
	$7 = *(($0 + [64]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [160]) == (int_32)$6), [17969])
	$5 = $10
	goto $label$1 
	
.LABEL $label$2
	$9 = CALL db_find_i64(*($6), *(($0 + [48])), (int_64)-3902253456596926464, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $30($6, $9)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$6), [17969])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($5 + [74]) ^ (int_32)[1]), *([0] + [8344]))
	*($4 + [24]) = ($0 + [160])
	CALL $96(($4 + [8]), ($4 + [24]), ($4 + [40]))
	$9 = *($4 + [12])
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((int_64)*($4 + [40]) != (int_64)*($9 + [8])) ){ goto $label$6 }
	$3 = *($4 + [8])
	*($4 + [64]) = $3
	$2 = (int_64)0
	$9 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($9) == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_64)*($9 + [8]) != (int_64)*($4 + [40])) ){ goto $label$8 }
	if ( ((int_64)*($9 + [40]) != (int_64)*($4 + [48])) ){ goto $label$8 }
	$2 = ((int_64)*($9 + [24]) + (int_64)$2)
	
.LABEL $label$8
	CALL $97(($4 + [64]))
	$9 = *($4 + [68])
	if ( $9 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	*($4 + [68]) = [0]
	*($4 + [64]) = ($4 + [24])
	$2 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert(((uint_64)$2 > (uint_64)(int_64)9999), *([0] + [8372]))
	$2 = *($0)
	*($4 + [8]) = $0
	*($4 + [12]) = ($4 + [48])
	*($4 + [16]) = ($4 + [40])
	*($4 + [20]) = ($4 + [32])
	*($4 + [88]) = $2
	CALL eosio_assert(((int_64)*($0 + [200]) == (int_64)CALL $fimport$6()), [18043])
	$8 = ($0 + [200])
	*($4 + [64]) = $8
	*($4 + [68]) = ($4 + [8])
	*($4 + [72]) = ($4 + [88])
	*(($9 = CALL _Znwj([56])) + [40]) = $8
	*($9 + [24]) = (int_64)0
	CALL $105(($4 + [64]), $9)
	*($4 + [80]) = $9
	$2 = *($9)
	*($4 + [64]) = $2
	$7 = *($9 + [44])
	*($4 + [60]) = $7
	$10 = ($0 + [228])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [232]))) ){ goto $label$11 }
	*($8 + [8]) = $2
	*($8 + [16]) = $7
	*($4 + [80]) = [0]
	*($8) = $9
	*($10) = ($8 + [24])
	$9 = *($4 + [80])
	$8 = [0]
	*($4 + [80]) = [0]
	if ( $9 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $106(($0 + [224]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	$9 = *($4 + [80])
	$8 = [0]
	*($4 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($9)
	
.LABEL $label$9
	$2 = *($0)
	*($4 + [8]) = ($4 + [32])
	CALL eosio_assert(((int_32)$5 != (int_32)$8), [18248])
	CALL $107($6, $5, $2, ($4 + [8]))
	$global$0 = ($4 + [96])
}

void .FUNC $60 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [128]) = $2
	*($6 + [136]) = $1
	*($6 + [112]) = $4
	*($6 + [127]) = $3
	CALL eosio_assert(((($3 + [-1]) & [255]) <= [2]), *([0] + [8392]))
	CALL eosio_assert(((uint_64)$4 > (uint_64)(int_64)999), *([0] + [8332]))
	CALL eosio_assert(CALL $77($0, $2), *([0] + [8324]))
	$7 = ($0 + [40])
	$9 = *(($0 + [68]))
	$8 = *(($0 + [64]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$3 = ($9 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$3 }
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [160]) == (int_32)$7), [17969])
	goto $label$1 
	
.LABEL $label$2
	$10 = CALL $30($7, CALL $fimport$9(*($7), *(($0 + [48])), (int_64)-3902253456596926464, $2))
	CALL eosio_assert(((int_32)*($10 + [160]) == (int_32)$7), [17969])
	
.LABEL $label$1
	*($6 + [104]) = $7
	*($6 + [108]) = $10
	CALL eosio_assert(((uint_64)(int_64))(*($10 + [88]) - *($10 + [80])) >= (uint_64)$4), *([0] + [8336]))
	$2 = *($0)
	*($6 + [56]) = $0
	*($6 + [76]) = $5
	*($6 + [60]) = ($6 + [136])
	*($6 + [64]) = ($6 + [128])
	*($6 + [68]) = ($6 + [127])
	*($6 + [72]) = ($6 + [112])
	*($6 + [144]) = $2
	CALL eosio_assert(((int_64)*($0 + [160]) == (int_64)CALL $fimport$6()), [18043])
	$9 = ($0 + [160])
	*($6 + [40]) = $9
	*($6 + [44]) = ($6 + [56])
	*($6 + [48]) = ($6 + [144])
	*(($3 = CALL _Znwj([80])) + [56]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [64]) = $9
	CALL $88(($6 + [40]), $3)
	*($6 + [96]) = $3
	$2 = *($3)
	*($6 + [40]) = $2
	$10 = *($3 + [68])
	*($6 + [32]) = $10
	$8 = ($0 + [188])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [192]))) ){ goto $label$7 }
	*($9 + [8]) = $2
	*($9 + [16]) = $10
	*($6 + [96]) = [0]
	*($9) = $3
	*($8) = ($9 + [24])
	$3 = *($6 + [96])
	*($6 + [96]) = [0]
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $89(($0 + [184]), ($6 + [96]), ($6 + [40]), ($6 + [32]))
	$3 = *($6 + [96])
	*($6 + [96]) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$11 = ($0 + [80])
	$2 = *($6 + [128])
	$9 = *(($0 + [108]))
	$8 = *(($0 + [104]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$3 = ($9 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$10 }
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [17969])
	goto $label$8 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*($11), *(($0 + [88])), (int_64)-3897482046112530432, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$12 }
	$10 = CALL $28($11, $3)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [17969])
	goto $label$8 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$8
	*($6 + [100]) = $10
	*($6 + [96]) = $11
	$12 = [0]
	$2 = *($0)
	*($6 + [60]) = ($6 + [96])
	*($6 + [56]) = ($6 + [127])
	*($6 + [64]) = ($6 + [112])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [18248])
	CALL $90($11, $10, $2, ($6 + [56]))
	$3 = *($6 + [108])
	$2 = *($0)
	*($6 + [60]) = ($6 + [112])
	*($6 + [56]) = ($6 + [104])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [18248])
	CALL $91($7, $3, $2, ($6 + [56]))
	$7 = ($0 + [240])
	$9 = *(($0 + [268]))
	$10 = *(($0 + [264]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$16:
	$3 = ($9 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)7) ){ goto $label$15 }
	$9 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [17969])
	$12 = $8
	goto $label$13 
	
.LABEL $label$14
	$3 = CALL db_find_i64(*($7), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $22($7, $3)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$7), [17969])
	
.LABEL $label$13
	$2 = *($0 + [32])
	*($6 + [44]) = [6]
	*($6 + [40]) = [17748]
	*($6 + [16]) = *($6 + [40])
	$4 = *(CALL $4(($6 + [56]), ($6 + [16])))
	$1 = *($12 + [16])
	*($6 + [44]) = [3]
	*($6 + [40]) = [17754]
	*($6 + [8]) = *($6 + [40])
	$13 = *(CALL $4(($6 + [56]), ($6 + [8])))
	$3 = *($5)
	if ( ($3 & [1]) ){ goto $label$18 }
	$3 = uint_32($3 >> [1])
	$0 = ($5 + [1])
	goto $label$17 
	
.LABEL $label$18
	$3 = *($5 + [4])
	$0 = *($5 + [8])
	
.LABEL $label$17
	*($6 + [28]) = $3
	*($6 + [24]) = $0
	*($6) = *($6 + [24])
	$3 = CALL $4(($6 + [32]), $6)
	*($6 + [56]) = $1
	*($6 + [64]) = $13
	*($6 + [40]) = *($6 + [136])
	*($6 + [48]) = *($3)
	*(($3 = CALL _Znwj([16]))) = $2
	*($3 + [8]) = $4
	*(($6 + [92])) = [0]
	$0 = ($3 + [16])
	*(($6 + [80])) = $0
	*(($6 + [76])) = $0
	*($6 + [72]) = $3
	*($6 + [84 align=4]) = (int_64)0
	CALL $84(($6 + [84]), [16])
	$3 = *($6 + [84])
	$0 = (*(($6 + [88])) - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17757])
	CALL memcpy($3, ($6 + [40]), [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17757])
	CALL memcpy(($3 + [8]), (($6 + [40]) + [8]), [8])
	CALL $85(($6 + [144]), ($6 + [56]))
	$3 = *($6 + [144])
	CALL send_inline($3, (*($6 + [148]) - $3))
	$3 = *($6 + [144])
	if ( ($3 == 0) ){ goto $label$19 }
	*($6 + [148]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$19
	$3 = *($6 + [84])
	if ( ($3 == 0) ){ goto $label$20 }
	*(($6 + [88])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$3 = *($6 + [72])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($6 + [76])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$global$0 = ($6 + [160])
}

void .FUNC $63 (int_32 $0)
{
	if ( ((*([0] + [8496]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8504]))
	
.LABEL $label$1
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $62($0, *($1))
	CALL $62($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)-2507760774001197057) ){ goto $label$9 }
	if ( ((int_64)$2 <= (int_64)4923676611399090175) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4923676611399090176) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)9120568799169347584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3) = *($3 + [200])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$10
	*($3 + [120]) = [8192]
	*($3 + [124]) = CALL $166([8192])
	*($3 + [88]) = *($3 + [120])
	CALL $4(($3 + [128]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [104]) = [8213]
	*($3 + [108]) = CALL $166([8213])
	*($3 + [80]) = *($3 + [104])
	CALL $4(($3 + [112]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [2]
	*($3 + [72]) = *($3 + [96])
	CALL $6($0, (int_64)6138663591592764928, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-5002966724954292224) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [48]) = *($3 + [152])
	CALL $3($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-2507760774001197056) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626112715155570688) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [56]) = *($3 + [144])
	CALL $9($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3075276122089661248) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [64]) = *($3 + [136])
	CALL $9($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [40]) = *($3 + [160])
	CALL $12($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [188]) = [0]
	*($3 + [184]) = [7]
	*($3 + [16]) = *($3 + [184])
	CALL $14($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3 + [32]) = *($3 + [168])
	CALL $16($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [196]) = [0]
	*($3 + [192]) = [9]
	*($3 + [8]) = *($3 + [192])
	CALL $18($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [180]) = [0]
	*($3 + [176]) = [10]
	*($3 + [24]) = *($3 + [176])
	CALL $20($1, $1, ($3 + [24]))
	
.LABEL $label$1
	CALL $156([0])
	$global$0 = ($3 + [208])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [176])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [160])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [168])), (int_64)-3897455725261094912, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $49($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $126(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [176])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18094])
	*($1) = *($7)
	*($1 + [40]) = *(*($5 + [4]))
	*($1 + [8]) = *(*($5 + [8]))
	$6 = *(*($5 + [12]))
	*($1 + [24]) = *(*($5 + [16]))
	*($1 + [48]) = (int_64)0
	*($1 + [16]) = $6
	$6 = ($1 + [48])
	$7 = ($1 + [24])
	$9 = ($1 + [16])
	$10 = ($1 + [8])
	$5 = *($5 + [20])
	$11 = *($5)
	if ( ($11 & [1]) ){ goto $label$4 }
	$11 = uint_32($11 >> [1])
	$5 = ($5 + [1])
	goto $label$3 
	
.LABEL $label$4
	$11 = *($5 + [4])
	$5 = *($5 + [8])
	
.LABEL $label$3
	*($3 + [12]) = $11
	*($3 + [8]) = $5
	*($3) = *($3 + [8])
	*($1 + [56]) = *(CALL $4(($3 + [32]), $3))
	*($1 + [32]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-7])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	*($3 + [44]) = $7
	*($3 + [48]) = ($1 + [32])
	$2 = ($1 + [40])
	*($3 + [52]) = $2
	*($3 + [56]) = $6
	*($3 + [60]) = ($1 + [56])
	CALL $99(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3897455725261094912, *(*($0 + [8])), $8, $5, [57])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$12 = *($0)
	$13 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [72]) = CALL db_idx64_store($8, (int_64)-3897455725261094912, $12, $13, ($3 + [32]))
	$8 = *($0)
	$12 = *($5)
	$13 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [76])) = CALL db_idx64_store($12, (int_64)-3897455725261094911, $8, $13, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [88]) = ((int_64)*(*(*($3) + [4]) + [88]) + (int_64)*(*(($3 + [4]))))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [88])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [88]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [136])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [120])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [128])), (int_64)-3900893897155238000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $124(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [136])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18094])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	$8 = CALL current_time()
	*($1 + [56]) = *(*($5 + [16]))
	*($1 + [32]) = ((int_64)((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-6])
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	$6 = ($1 + [16])
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [57])
	CALL $29(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)-3900893897155238000, *(*($0 + [8])), $8, $5, [58])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [68]) = CALL db_idx64_store($8, (int_64)-3900893897155238000, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = *($6)
	*(($1 + [72])) = CALL db_idx64_store($11, (int_64)-3900893897155237999, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $84($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17757])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17757])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $117(CALL $116($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [136])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [120])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [128])), (int_64)-3900893897155238000, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $47($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $124(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [136])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18094])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = *(*($5 + [12]))
	*($1 + [32]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-6])
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	$6 = ($1 + [16])
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [57])
	CALL $29(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($4 + [8]), (int_64)-3900893897155238000, *(*($0 + [8])), $8, $5, [58])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$8 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [68]) = CALL db_idx64_store($8, (int_64)-3900893897155238000, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = *($6)
	*(($1 + [72])) = CALL db_idx64_store($11, (int_64)-3900893897155237999, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $149 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $151($1, $0, [18677])
	CALL $152()
	(unreachable)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $166([8222])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8222], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $155())
	*(CALL $155()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $163($4, ($3 + [12]), $2)
	$5 = CALL $155()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $149($3)
	
.LABEL $label$1
	CALL $150($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $165(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $164(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $140 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $144($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $72 (int_32 $0)
{
	if ( ((*([0] + [8604]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8612]))
	
.LABEL $label$1
}

void .FUNC $73 (int_32 $0)
{
	if ( ((*([0] + [8616]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8624]))
	
.LABEL $label$1
}

void .FUNC $70 (int_32 $0)
{
	if ( ((*([0] + [8580]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8588]))
	
.LABEL $label$1
}

void .FUNC $71 (int_32 $0)
{
	if ( ((*([0] + [8592]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8600]))
	
.LABEL $label$1
}

void .FUNC $76 (int_32 $0)
{
	if ( ((*([0] + [8652]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8660]))
	
.LABEL $label$1
}

int_32 .FUNC $77 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	((uint_64)*($6 + [32]) > (uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000))
	$2 = ($0 + [40])
	$4 = *(($0 + [68]))
	$3 = *(($0 + [64]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $30($2, CALL $fimport$9(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $1))
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	return .LABEL $label$1
}

void .FUNC $74 (int_32 $0)
{
	if ( ((*([0] + [8628]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8636]))
	
.LABEL $label$1
}

void .FUNC $75 (int_32 $0)
{
	if ( ((*([0] + [8640]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8648]))
	
.LABEL $label$1
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [88]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $143($6, *($4 + [12]))
	*($1 + [32]) = *(*($4 + [16]))
	*($1 + [40]) = *(*($4 + [20]))
	*($1 + [48]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [134])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [48])
	$9 = ($1 + [40])
	$10 = ($1 + [32])
	$11 = ($1 + [88])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $10
	*($3 + [48]) = $9
	*($3 + [52]) = $7
	*($3 + [56]) = ($1 + [56])
	*($3 + [60]) = ($1 + [64])
	*($3 + [64]) = ($1 + [72])
	*($3 + [68]) = ($1 + [73])
	*($3 + [72]) = ($1 + [74])
	*($3 + [76]) = ($1 + [75])
	*($3 + [80]) = ($1 + [76])
	*($3 + [84]) = ($1 + [80])
	*($3 + [88]) = $11
	*($3 + [92]) = ($1 + [96])
	*($3 + [96]) = ($1 + [104])
	*($3 + [100]) = ($1 + [112])
	*($3 + [104]) = ($1 + [120])
	*($3 + [112]) = ($1 + [136])
	*($3 + [108]) = ($1 + [128])
	*($3 + [116]) = ($1 + [144])
	*($3 + [120]) = ($1 + [152])
	CALL $122(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [164]) = CALL db_store_i64(*($5 + [8]), (int_64)-3902253456596926464, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $175($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($5 + [8]))
	$12 = *(*(($0 + [8])))
	$13 = *($1)
	*($3 + [32]) = *(($1 + [32]))
	*($1 + [168]) = CALL db_idx64_store($8, (int_64)-3902253456596926464, $12, $13, ($3 + [32]))
	$global$0 = ($3 + [128])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [144]) = ((int_64)*($1 + [144]) + (int_64)*(*($3)))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [144])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = $10
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $94 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($3 + [64]) = $2
	*($3 + [72]) = $1
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $30($4, $7)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$1
	*($3 + [56]) = ($0 + [120])
	CALL $26(($3 + [80]), ($3 + [56]), ($3 + [72]))
	$7 = *($3 + [84])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((int_64)*($3 + [72]) != (int_64)*($7 + [8])) ){ goto $label$8 }
	$1 = *($3 + [80])
	*($3 + [48]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$7 }
	$9 = (($3 + [80]) + [58])
	$10 = (($3 + [160]) + [8])
	$1 = (int_64)0
	$11 = ($8 + [80])
	$12 = ($3 + [196])
	$13 = ($3 + [204])
	$14 = ($3 + [212])
	$15 = (int_64)0
	
.LOOP $label$9:
	if ( ((int_64)*($7 + [8]) != (int_64)*($3 + [72])) ){ goto $label$10 }
	$17 = *($7 + [24])
	$18 = ((int_64)$17 + (int_64)$1)
	$16 = *($11)
	if ( ((uint_64)$16 <= (uint_64)$18) ){ goto $label$6 }
	$2 = *($0)
	$1 = *($3 + [64])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	$6 = *($3 + [56])
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$6), [18283])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$6()), [18329])
	$16 = ((uint_64)((int_64)$1 * (int_64)$17) / (uint_64)$16)
	*($7 + [40]) = $16
	$5 = ($7 + [16])
	*($10) = *($5)
	$19 = ($7 + [8])
	*($3 + [160]) = *($19)
	$1 = *($7)
	CALL eosio_assert([1], [18380])
	*((($3 + [144]) + [8])) = $9
	*($3 + [148]) = ($3 + [80])
	*($3 + [144]) = ($3 + [80])
	*($3 + [176]) = ($3 + [144])
	*((($3 + [184]) + [8])) = $5
	*($12) = ($7 + [24])
	*((($3 + [184]) + [16])) = ($7 + [32])
	*($13) = ($7 + [40])
	*((($3 + [184]) + [24])) = ($7 + [48])
	*($14) = ($7 + [56])
	*((($3 + [184]) + [32])) = ($7 + [57])
	*($3 + [188]) = $19
	*($3 + [184]) = $7
	CALL $29(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($7 + [64]), $2, ($3 + [80]), [58])
	if ( (uint_64)($1 <= *($6 + [16])) ){ goto $label$11 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($3 + [184]) = *($19)
	if ( (CALL $165(($3 + [160]), ($3 + [184]), [8]) == 0) ){ goto $label$12 }
	$19 = *($7 + [68])
	if ( ((int_32)$19 > (int_32)[-1]) ){ goto $label$13 }
	$19 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155238000, ($3 + [176]), $1)
	*(($7 + [68])) = $19
	
.LABEL $label$13
	CALL db_idx64_update($19, $2, ($3 + [184]))
	
.LABEL $label$12
	*($3 + [184]) = *($5)
	if ( (CALL $165($10, ($3 + [184]), [8]) == 0) ){ goto $label$14 }
	$5 = ($7 + [72])
	$7 = *($5)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155237999, ($3 + [176]), $1)
	*($5) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, $2, ($3 + [184]))
	
.LABEL $label$14
	CALL $44($0, *(*($3 + [52]) + [16]), $16, CALL $141(($3 + [16]), [8628]))
	$15 = ((int_64)$16 + (int_64)$15)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*((($3 + [16]) + [8])))
	
.LABEL $label$16
	$1 = $18
	
.LABEL $label$10
	CALL $27(($3 + [48]))
	$7 = *($3 + [52])
	if ( $7 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$8
	*($3 + [52]) = [0]
	*($3 + [48]) = ($3 + [56])
	
.LABEL $label$7
	$15 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$17 = *($3 + [64])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	$6 = *($3 + [56])
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$6), [18283])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$6()), [18329])
	$16 = ((uint_64)((int_64)$17 * (int_64))($16 - $1)) / (uint_64)$16
	*($7 + [40]) = $16)
	$5 = ($7 + [8])
	*($3 + [160]) = *($5)
	$19 = ($7 + [16])
	*($3 + [168]) = *($19)
	$1 = *($7)
	CALL eosio_assert([1], [18380])
	*($3 + [152]) = $9
	*($3 + [148]) = ($3 + [80])
	*($3 + [144]) = ($3 + [80])
	*($3 + [176]) = ($3 + [144])
	*($3 + [188]) = $5
	*($3 + [184]) = $7
	*($3 + [192]) = $19
	*($3 + [196]) = ($7 + [24])
	*($3 + [200]) = ($7 + [32])
	*($3 + [204]) = ($7 + [40])
	*($3 + [208]) = ($7 + [48])
	*($3 + [212]) = ($7 + [56])
	*($3 + [216]) = ($7 + [57])
	CALL $29(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($7 + [64]), $2, ($3 + [80]), [58])
	if ( (uint_64)($1 <= *($6 + [16])) ){ goto $label$17 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$19 = (($3 + [160]) + [8])
	*($3 + [184]) = *($5)
	if ( (CALL $165(($3 + [160]), ($3 + [184]), [8]) == 0) ){ goto $label$18 }
	$5 = *($7 + [68])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$19 }
	$5 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155238000, ($3 + [176]), $1)
	*(($7 + [68])) = $5
	
.LABEL $label$19
	CALL db_idx64_update($5, $2, ($3 + [184]))
	
.LABEL $label$18
	*($3 + [184]) = *(($7 + [16]))
	if ( (CALL $165($19, ($3 + [184]), [8]) == 0) ){ goto $label$20 }
	$5 = ($7 + [72])
	$7 = *($5)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$21 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155237999, ($3 + [176]), $1)
	*($5) = $7
	
.LABEL $label$21
	CALL db_idx64_update($7, $2, ($3 + [184]))
	
.LABEL $label$20
	$15 = ((int_64)$16 + (int_64)$15)
	$7 = CALL $141(($3 + [32]), [8628])
	CALL $44($0, *(*($3 + [52]) + [16]), $16, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$5
	$1 = (int_64)
	CALL eosio_assert((uint_64)($1(*($3 + [64]) - $15)) <= (int_64)1000), *([0] + [8396]))
	$7 = CALL $141($3, [8640])
	CALL $95($0, *($3 + [72]), $1, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$22
	$1 = *($0)
	*($3 + [80]) = ($3 + [64])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18248])
	CALL $102($4, $8, $1, ($3 + [80]))
	$global$0 = ($3 + [224])
}

void .FUNC $95 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$5 = ($0 + [40])
	$7 = *(($0 + [68]))
	$6 = *(($0 + [64]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$5), [17969])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($5), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL $30($5, $8)
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$5), [17969])
	goto $label$2 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$2
	*($4 + [36]) = $9
	*($4 + [32]) = $5
	$1 = *($0)
	*($4 + [28]) = ($4 + [40])
	*($4 + [24]) = ($4 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [18248])
	CALL $103($5, $9, $1, ($4 + [24]))
	$5 = ($0 + [240])
	$7 = *(($0 + [268]))
	$6 = *(($0 + [264]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$10:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)6) ){ goto $label$9 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [17969])
	goto $label$7 
	
.LABEL $label$8
	$9 = CALL $22($5, CALL $fimport$9(*($5), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)6))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [17969])
	
.LABEL $label$7
	$8 = CALL $141(($4 + [8]), $3)
	CALL $44($0, *($9 + [16]), *($4 + [40]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3897455725261094912, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [17969])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $49($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)-3897455725261094912, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [17969])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18439])
	$2 = *($0 + [4])
	$3 = *($2 + [72])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3897455725261094912, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [72]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [17969])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $49($6, CALL $fimport$9(*($6), *($6 + [8]), (int_64)-3897455725261094912, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [17969])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = *(($3 + [8]))
	$7 = *(($3 + [4]))
	$8 = *($1)
	$3 = *(*($3))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	$3 = *($7 + [4])
	*($1 + [8]) = ((int_64)*($3 + [8]) + (int_64)1)
	*($1 + [16]) = ((int_64)*($6) + (int_64)*($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *($7 + [4])
	*($1 + [32]) = ((int_64)*($3 + [32]) + (int_64)1)
	*($1 + [40]) = ((int_64)*($6) + (int_64)*($3 + [40]))
	
.LABEL $label$1
	CALL eosio_assert([1], [18380])
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [52]) = ($1 + [40])
	*($5 + [56]) = ($1 + [48])
	*($5 + [60]) = ($1 + [56])
	CALL $80(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [80]) = ((int_64)*(*(*($3) + [4]) + [80]) + (int_64)*(*(($3 + [4]))))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [80])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [84]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	*($1 + [73]) = [1]
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [56]) = *(*($3))
	$7 = *($1)
	*($1 + [64]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [64])
	$11 = ($1 + [56])
	$12 = ($1 + [73])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [56]) = $11
	*($5 + [60]) = $10
	*($5 + [68]) = $12
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [64]) = ($1 + [72])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $93 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$3 = ($global$0 - [176])
	$global$0 = $3
	*($3 + [144]) = $2
	*($3 + [152]) = $1
	*($3 + [136]) = ($0 + [160])
	$4 = ($0 + [240])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL $22($4, CALL $fimport$9(*($4), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)4))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	
.LABEL $label$1
	$9 = *($8 + [8])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)7) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)7)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $22($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	
.LABEL $label$5
	CALL $96(($3 + [72]), ($3 + [136]), ($3 + [152]))
	$7 = *($3 + [76])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_64)*($3 + [152]) != (int_64)*($7 + [8])) ){ goto $label$11 }
	$1 = *($3 + [72])
	*($3 + [128]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$10 }
	$6 = ($3 + [100])
	$4 = (($3 + [48]) + [16])
	$10 = (($3 + [48]) + [8])
	$11 = ($8 + [16])
	$12 = ($3 + [96])
	$13 = ($3 + [108])
	$14 = ($3 + [92])
	$2 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$12:
	if ( ((int_64)*($7 + [8]) != (int_64)*($3 + [152])) ){ goto $label$13 }
	$1 = ((uint_64)((int_64)*($7 + [24]) * (int_64)$9) / (uint_64)(int_64)10000)
	$16 = *($7 + [56])
	if ( (int_64)($16 == 0) ){ goto $label$16 }
	if ( ((int_64)$16 != (int_64)*($7 + [40])) ){ goto $label$15 }
	
.LABEL $label$16
	$15 = ((int_64)$1 + (int_64)$15)
	goto $label$14 
	
.LABEL $label$15
	CALL $44($0, $16, $1, CALL $141(($3 + [112]), [8556]))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*((($3 + [112]) + [8])))
	
.LABEL $label$17
	$16 = *(($0 + [32]))
	*($3 + [164]) = [6]
	*($3 + [160]) = [17748]
	*($3 + [8]) = *($3 + [160])
	CALL $4(($3 + [48]), ($3 + [8]))
	$17 = *($3 + [48])
	$18 = *($11)
	*($3 + [164]) = [11]
	*($3 + [160]) = [17763]
	*($3) = *($3 + [160])
	CALL $4(($3 + [48]), $3)
	$19 = *($3 + [48])
	*($10) = [1]
	*($4) = $1
	*((($3 + [72]) + [8])) = $19
	*(($8 = (($3 + [72]) + [16]))) = (int_64)0
	*($12) = [0]
	*($3 + [72]) = $18
	*($3 + [48]) = *(*($3 + [132]) + [40])
	$7 = CALL _Znwj([16])
	*($8) = $7
	*($7) = $16
	*($7 + [8]) = $17
	*($6) = (int_64)0
	*($13) = [0]
	$7 = ($7 + [16])
	*($12) = $7
	*($14) = $7
	CALL $84($6, [17])
	$7 = *($6)
	$20 = (($3 + [72]) + [32])
	$5 = (*($20) - $7)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [17757])
	CALL memcpy($7, ($3 + [48]), [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[0]), [17757])
	CALL memcpy(($7 + [8]), $10, [1])
	CALL eosio_assert(((int_32)($5 + [-9]) > (int_32)[7]), [17757])
	CALL memcpy(($7 + [9]), $4, [8])
	CALL $85(($3 + [160]), ($3 + [72]))
	$7 = *($3 + [160])
	CALL send_inline($7, (*($3 + [164]) - $7))
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$18 }
	*($3 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	$7 = *($6)
	if ( ($7 == 0) ){ goto $label$19 }
	*($20) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$14 }
	*($14) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$2 = ((int_64)$1 + (int_64)$2)
	
.LABEL $label$13
	CALL $97(($3 + [128]))
	$7 = *($3 + [132])
	if ( $7 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	*($3 + [132]) = [0]
	*($3 + [128]) = ($3 + [136])
	
.LABEL $label$10
	$15 = (int_64)0
	$2 = (int_64)0
	
.LABEL $label$9
	$7 = CALL $141(($3 + [32]), [8520])
	CALL $95($0, *($3 + [152]), $15, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$20
	$1 = (int_64)
	CALL eosio_assert((uint_64)($1(*($3 + [144]) - $2)) <= (int_64)1000), *([0] + [8400]))
	$7 = CALL $141(($3 + [16]), [8652])
	CALL $95($0, *($3 + [152]), $1, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$21
	$4 = ($0 + [40])
	$1 = *($3 + [152])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$25:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$24 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	goto $label$22 
	
.LABEL $label$23
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	$8 = CALL $30($4, $7)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$22
	$1 = *($0)
	*($3 + [72]) = ($3 + [144])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18248])
	CALL $101($4, $8, $1, ($3 + [72]))
	$global$0 = ($3 + [176])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $175($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $131 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8496 align=4]) = (int_64)0
	*([0] + [8504]) = [0]
	$0 = CALL $166([17356])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$17 }
	*([0] + [8496]) = ($0 << [1])
	$1 = [8497]
	if ( $0 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8496]) = ($2 | [1])
	*([0] + [8504]) = $1
	*([0] + [8500]) = $0
	
.LABEL $label$16
	CALL memcpy($1, [17356], $0)
	
.LABEL $label$15
	*(($1 + $0)) = [0]
	CALL $157([11], [0], [8192])
	*([0] + [8508 align=4]) = (int_64)0
	*([0] + [8516]) = [0]
	$0 = CALL $166([17360])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$20 }
	*([0] + [8508]) = ($0 << [1])
	$1 = [8509]
	if ( $0 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8508]) = ($2 | [1])
	*([0] + [8516]) = $1
	*([0] + [8512]) = $0
	
.LABEL $label$19
	CALL memcpy($1, [17360], $0)
	
.LABEL $label$18
	*(($1 + $0)) = [0]
	CALL $157([12], [0], [8192])
	*([0] + [8520 align=4]) = (int_64)0
	*([0] + [8528]) = [0]
	$0 = CALL $166([17364])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$23 }
	*([0] + [8520]) = ($0 << [1])
	$1 = [8521]
	if ( $0 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8520]) = ($2 | [1])
	*([0] + [8528]) = $1
	*([0] + [8524]) = $0
	
.LABEL $label$22
	CALL memcpy($1, [17364], $0)
	
.LABEL $label$21
	*(($1 + $0)) = [0]
	CALL $157([13], [0], [8192])
	*([0] + [8532 align=4]) = (int_64)0
	*([0] + [8540]) = [0]
	$0 = CALL $166([17368])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$26 }
	*([0] + [8532]) = ($0 << [1])
	$1 = [8533]
	if ( $0 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8532]) = ($2 | [1])
	*([0] + [8540]) = $1
	*([0] + [8536]) = $0
	
.LABEL $label$25
	CALL memcpy($1, [17368], $0)
	
.LABEL $label$24
	*(($1 + $0)) = [0]
	CALL $157([14], [0], [8192])
	*([0] + [8544 align=4]) = (int_64)0
	*([0] + [8552]) = [0]
	$0 = CALL $166([17372])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$29 }
	*([0] + [8544]) = ($0 << [1])
	$1 = [8545]
	if ( $0 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8544]) = ($2 | [1])
	*([0] + [8552]) = $1
	*([0] + [8548]) = $0
	
.LABEL $label$28
	CALL memcpy($1, [17372], $0)
	
.LABEL $label$27
	*(($1 + $0)) = [0]
	CALL $157([15], [0], [8192])
	*([0] + [8556 align=4]) = (int_64)0
	*([0] + [8564]) = [0]
	$0 = CALL $166([17376])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$32 }
	*([0] + [8556]) = ($0 << [1])
	$1 = [8557]
	if ( $0 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8556]) = ($2 | [1])
	*([0] + [8564]) = $1
	*([0] + [8560]) = $0
	
.LABEL $label$31
	CALL memcpy($1, [17376], $0)
	
.LABEL $label$30
	*(($1 + $0)) = [0]
	CALL $157([16], [0], [8192])
	*([0] + [8568 align=4]) = (int_64)0
	*([0] + [8576]) = [0]
	$0 = CALL $166([17380])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$35 }
	*([0] + [8568]) = ($0 << [1])
	$1 = [8569]
	if ( $0 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8568]) = ($2 | [1])
	*([0] + [8576]) = $1
	*([0] + [8572]) = $0
	
.LABEL $label$34
	CALL memcpy($1, [17380], $0)
	
.LABEL $label$33
	*(($1 + $0)) = [0]
	CALL $157([17], [0], [8192])
	*([0] + [8580 align=4]) = (int_64)0
	*([0] + [8588]) = [0]
	$0 = CALL $166([17384])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$38 }
	*([0] + [8580]) = ($0 << [1])
	$1 = [8581]
	if ( $0 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8580]) = ($2 | [1])
	*([0] + [8588]) = $1
	*([0] + [8584]) = $0
	
.LABEL $label$37
	CALL memcpy($1, [17384], $0)
	
.LABEL $label$36
	*(($1 + $0)) = [0]
	CALL $157([18], [0], [8192])
	*([0] + [8592 align=4]) = (int_64)0
	*([0] + [8600]) = [0]
	$0 = CALL $166([17388])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$41 }
	*([0] + [8592]) = ($0 << [1])
	$1 = [8593]
	if ( $0 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8592]) = ($2 | [1])
	*([0] + [8600]) = $1
	*([0] + [8596]) = $0
	
.LABEL $label$40
	CALL memcpy($1, [17388], $0)
	
.LABEL $label$39
	*(($1 + $0)) = [0]
	CALL $157([19], [0], [8192])
	*([0] + [8604 align=4]) = (int_64)0
	*([0] + [8612]) = [0]
	$0 = CALL $166([17392])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$44 }
	*([0] + [8604]) = ($0 << [1])
	$1 = [8605]
	if ( $0 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8604]) = ($2 | [1])
	*([0] + [8612]) = $1
	*([0] + [8608]) = $0
	
.LABEL $label$43
	CALL memcpy($1, [17392], $0)
	
.LABEL $label$42
	*(($1 + $0)) = [0]
	CALL $157([20], [0], [8192])
	*([0] + [8616 align=4]) = (int_64)0
	*([0] + [8624]) = [0]
	$0 = CALL $166([17396])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$47 }
	*([0] + [8616]) = ($0 << [1])
	$1 = [8617]
	if ( $0 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8616]) = ($2 | [1])
	*([0] + [8624]) = $1
	*([0] + [8620]) = $0
	
.LABEL $label$46
	CALL memcpy($1, [17396], $0)
	
.LABEL $label$45
	*(($1 + $0)) = [0]
	CALL $157([21], [0], [8192])
	*([0] + [8628 align=4]) = (int_64)0
	*([0] + [8636]) = [0]
	$0 = CALL $166([17400])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$50 }
	*([0] + [8628]) = ($0 << [1])
	$1 = [8629]
	if ( $0 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8628]) = ($2 | [1])
	*([0] + [8636]) = $1
	*([0] + [8632]) = $0
	
.LABEL $label$49
	CALL memcpy($1, [17400], $0)
	
.LABEL $label$48
	*(($1 + $0)) = [0]
	CALL $157([22], [0], [8192])
	*([0] + [8640 align=4]) = (int_64)0
	*([0] + [8648]) = [0]
	$0 = CALL $166([17404])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$53 }
	*([0] + [8640]) = ($0 << [1])
	$1 = [8641]
	if ( $0 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8640]) = ($2 | [1])
	*([0] + [8648]) = $1
	*([0] + [8644]) = $0
	
.LABEL $label$52
	CALL memcpy($1, [17404], $0)
	
.LABEL $label$51
	*(($1 + $0)) = [0]
	CALL $157([23], [0], [8192])
	*([0] + [8652 align=4]) = (int_64)0
	*([0] + [8660]) = [0]
	$0 = CALL $166([17408])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$56 }
	*([0] + [8652]) = ($0 << [1])
	$1 = [8653]
	if ( $0 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8652]) = ($2 | [1])
	*([0] + [8660]) = $1
	*([0] + [8656]) = $0
	
.LABEL $label$55
	CALL memcpy($1, [17408], $0)
	
.LABEL $label$54
	*(($1 + $0)) = [0]
	CALL $157([24], [0], [8192])
	return (unreachable)
	
.LABEL $label$14
	CALL $140([8496])
	
.LABEL $label$13
	CALL $140([8508])
	
.LABEL $label$12
	CALL $140([8520])
	
.LABEL $label$11
	CALL $140([8532])
	
.LABEL $label$10
	CALL $140([8544])
	
.LABEL $label$9
	CALL $140([8556])
	
.LABEL $label$8
	CALL $140([8568])
	
.LABEL $label$7
	CALL $140([8580])
	
.LABEL $label$6
	CALL $140([8592])
	
.LABEL $label$5
	CALL $140([8604])
	
.LABEL $label$4
	CALL $140([8616])
	
.LABEL $label$3
	CALL $140([8628])
	
.LABEL $label$2
	CALL $140([8640])
	
.LABEL $label$1
	CALL $140([8652])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $171($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8664])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $171($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $175($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $169(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8664])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $169(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18200])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3905365620752908288)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18146])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18146])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $51(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($0)
	CALL eosio_assert(((int_64)*($0 + [240]) == (int_64)CALL $fimport$6()), [18043])
	*(($5 = CALL _Znwj([40])) + [24]) = ($0 + [240])
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = $2
	*($5) = $1
	CALL eosio_assert([1], [17757])
	CALL memcpy(($3 + [16]), $5, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy((($3 + [16]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy((($3 + [16]) + [16]), ($5 + [16]), [8])
	$1 = *($5)
	$6 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $4, $1, ($3 + [16]), [24])
	*($5 + [28]) = $6
	$7 = ($0 + [256])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$1 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($3 + [8]) = $5
	$1 = *($5)
	*($3 + [16]) = $1
	*($3 + [4]) = $6
	$8 = ($0 + [268])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [272]))) ){ goto $label$4 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($3 + [8]) = [0]
	*($7) = $5
	*($8) = ($7 + [24])
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $24(($0 + [264]), ($3 + [8]), ($3 + [16]), ($3 + [4]))
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [288]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17960])
	CALL memcpy((($4 + [288]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*($4 + [208]) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [248]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [296])
	$1 = *($4 + [288])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17757])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17757])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $123(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [12]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [12]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [13]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [13]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [72])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [76])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [80])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [84])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $118(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy(($2 + [12]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [12]) != (int_32)[0])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [72])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [76])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [80])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [84])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [240])
	$3 = ($0 + [248])
	$4 = CALL db_lowerbound_i64(*($0 + [240]), *($3), (int_64)-3904258391152787456, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $22($2, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18469])
	CALL eosio_assert([1], [18439])
	$4 = [0]
	$6 = CALL db_next_i64(*($5 + [28]), ($1 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $22($2, $6)
	
.LABEL $label$3
	CALL $23($2, $5)
	$5 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)1
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	$5 = (($1 + [16]) | [8])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	$6 = (($1 + [16]) + [16])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*($3), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$4 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$7 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)300
	*($4) = (int_64)2
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$11 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)100
	*($4) = (int_64)3
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$12 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$15 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)100
	*($4) = (int_64)4
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$16 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$19 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)1000
	*($4) = (int_64)5
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$20 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$23 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)6
	*($1 + [48]) = [18651]
	*($1 + [52]) = CALL $166([18651])
	*($1 + [8]) = *($1 + [48])
	*($4 + [16]) = *(CALL $4(($1 + [56]), ($1 + [8])))
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $9
	$3 = ($0 + [256])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$24 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [268])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [272]))) ){ goto $label$27 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv($4)
	
.LABEL $label$25
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18043])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)7
	*($1 + [48]) = [18664]
	*($1 + [52]) = CALL $166([18664])
	*($1) = *($1 + [48])
	*($4 + [16]) = *(CALL $4(($1 + [56]), $1))
	CALL eosio_assert([1], [17757])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($5, ($4 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$2 = CALL db_store_i64(*(($0 + [248])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [24])
	*($4 + [28]) = $2
	$5 = ($0 + [256])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$28 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $2
	$6 = ($0 + [268])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [272]))) ){ goto $label$31 }
	*($5 + [8]) = $8
	*($5 + [16]) = $2
	*($1 + [56]) = [0]
	*($5) = $4
	*($6) = ($5 + [24])
	$0 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $0 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $24(($0 + [264]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$0 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv($0)
	
.LABEL $label$29
	$global$0 = ($1 + [64])
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18200])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3897455725261094912)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18146])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18146])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $49(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17960])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17960])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17960])
	CALL memcpy($4, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18200])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3900893897155238000)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18146])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18146])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $47(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [296]) = [0]
	*($4 + [288]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [288]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [17960])
	CALL memcpy((($4 + [288]) + [8]), ($2 + [8]), [1])
	*(($4 + [28])) = ($2 + [9])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*($4 + [208]) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [248]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [296])
	$0 = *($4 + [288])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [240])
	$5 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [17969])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $22($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [17969])
	
.LABEL $label$1
	$8 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [18283])
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18329])
	*($7 + [8]) = $1
	$1 = *($7)
	CALL eosio_assert([1], [18380])
	CALL eosio_assert([1], [17757])
	CALL memcpy($2, $7, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy(($2 | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy(($2 + [16]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), $8, $2, [24])
	$6 = ($0 + [256])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($2 + [32])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($4 + [240]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21($4)
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [23]) = $3
	*($4 + [24]) = $2
	CALL eosio_assert(CALL $25($0, $2), *([0] + [8352]))
	*($4 + [16]) = ($0 + [120])
	CALL $26(($4 + [32]), ($4 + [16]), ($4 + [24]))
	$3 = *($4 + [36])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_64)*($4 + [24]) != (int_64)*($3 + [8])) ){ goto $label$3 }
	$2 = *($4 + [32])
	*($4 + [136]) = $2
	$3 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$2 }
	$2 = (int_64)0
	$5 = (int_64)0
	
.LOOP $label$4:
	if ( ((int_64)*($3 + [8]) != (int_64)*($4 + [24])) ){ goto $label$5 }
	if ( ((int_64)*($3 + [16]) != (int_64)$1) ){ goto $label$5 }
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$5 + (int_64)(CASTING uint_64)(uint_32 ((int_32)*($3 + [57]) != (int_32)[0])))
	
.LABEL $label$5
	CALL $27(($4 + [136]))
	$3 = *($4 + [140])
	if ( $3 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [140]) = [0]
	*($4 + [136]) = ($4 + [16])
	
.LABEL $label$2
	$5 = (int_64)0
	$2 = (int_64)0
	
.LABEL $label$1
	$6 = [0]
	CALL eosio_assert(((int_64)$2 != (int_64)0), *([0] + [8356]))
	CALL eosio_assert((int_64)($5 == 0), *([0] + [8360]))
	$7 = ($0 + [80])
	$2 = *($4 + [24])
	$9 = *(($0 + [108]))
	$8 = *(($0 + [104]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$9:
	$3 = ($9 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$8 }
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$7), [17969])
	$6 = $10
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL db_find_i64(*($7), *(($0 + [88])), (int_64)-3897482046112530432, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $28($7, $3)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$7), [17969])
	
.LABEL $label$6
	$3 = *($4 + [23])
	if ( ((uint_32)(($3 + [-1]) & [255]) >= (uint_32)[2]) ){ goto $label$11 }
	$3 = [0]
	if ( (int_64)(*($6 + [16]) == 0) ){ goto $label$12 }
	$3 = ((int_64)*($6 + [40]) != (int_64)0)
	
.LABEL $label$12
	CALL eosio_assert($3, *([0] + [8380]))
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert(((int_32)($3 & [255]) == (int_32)[3]), *([0] + [8384]))
	
.LABEL $label$10
	CALL $26(($4 + [32]), ($4 + [16]), ($4 + [24]))
	$3 = *($4 + [36])
	if ( ($3 == 0) ){ goto $label$14 }
	if ( ((int_64)*($4 + [24]) != (int_64)*($3 + [8])) ){ goto $label$14 }
	$2 = *($4 + [32])
	*($4 + [8]) = $2
	$3 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$13 }
	$11 = (($4 + [32]) + [58])
	$6 = (($4 + [112]) + [8])
	$12 = ($4 + [148])
	$13 = ($4 + [156])
	$14 = ($4 + [164])
	
.LOOP $label$15:
	if ( ((int_64)*($3 + [8]) != (int_64)*($4 + [24])) ){ goto $label$16 }
	if ( ((int_64)*($3 + [16]) != (int_64)$1) ){ goto $label$16 }
	$5 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [18248])
	$9 = *($4 + [16])
	CALL eosio_assert(((int_32)*($3 + [60]) == (int_32)$9), [18283])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$6()), [18329])
	$8 = ($3 + [16])
	*($6) = *($8)
	*($3 + [57]) = *($4 + [23])
	$10 = ($3 + [8])
	*($4 + [112]) = *($10)
	$2 = *($3)
	CALL eosio_assert([1], [18380])
	*((($4 + [96]) + [8])) = $11
	*($4 + [100]) = ($4 + [32])
	*($4 + [96]) = ($4 + [32])
	*($4 + [128]) = ($4 + [96])
	*((($4 + [136]) + [8])) = $8
	*($12) = ($3 + [24])
	*((($4 + [136]) + [16])) = ($3 + [32])
	*($13) = ($3 + [40])
	*((($4 + [136]) + [24])) = ($3 + [48])
	*($14) = ($3 + [56])
	*((($4 + [136]) + [32])) = ($3 + [57])
	*($4 + [140]) = $10
	*($4 + [136]) = $3
	CALL $29(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($3 + [64]), $5, ($4 + [32]), [58])
	if ( (uint_64)($2 <= *($9 + [16])) ){ goto $label$17 }
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*($4 + [136]) = *($10)
	if ( (CALL $165(($4 + [112]), ($4 + [136]), [8]) == 0) ){ goto $label$18 }
	$10 = *($3 + [68])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$19 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-3900893897155238000, ($4 + [128]), $2)
	*(($3 + [68])) = $10
	
.LABEL $label$19
	CALL db_idx64_update($10, $5, ($4 + [136]))
	
.LABEL $label$18
	*($4 + [136]) = *($8)
	if ( (CALL $165($6, ($4 + [136]), [8]) == 0) ){ goto $label$16 }
	$8 = ($3 + [72])
	$3 = *($8)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$20 }
	$3 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-3900893897155237999, ($4 + [128]), $2)
	*($8) = $3
	
.LABEL $label$20
	CALL db_idx64_update($3, $5, ($4 + [136]))
	
.LABEL $label$16
	CALL $27(($4 + [8]))
	$3 = *($4 + [12])
	if ( $3 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	*($4 + [12]) = [0]
	*($4 + [8]) = ($4 + [16])
	
.LABEL $label$13
	$6 = ($0 + [40])
	$2 = *($4 + [24])
	$9 = *(($0 + [68]))
	$10 = *(($0 + [64]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$24:
	$3 = ($9 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$23 }
	$9 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$6), [17969])
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	$3 = CALL db_find_i64(*($6), *(($0 + [48])), (int_64)-3902253456596926464, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$21 }
	$8 = CALL $30($6, $3)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$6), [17969])
	
.LABEL $label$21
	*($4 + [8]) = (int_64)1
	if ( ((int_64)*($8 + [8]) != (int_64)$1) ){ goto $label$25 }
	CALL $26(($4 + [32]), ($4 + [16]), ($4 + [24]))
	$3 = *($4 + [36])
	if ( ($3 == 0) ){ goto $label$26 }
	if ( ((int_64)*($4 + [24]) != (int_64)*($3 + [8])) ){ goto $label$26 }
	$2 = *($4 + [32])
	*($4) = $2
	$3 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$25 }
	$11 = (($4 + [32]) + [58])
	$6 = (($4 + [112]) + [8])
	$12 = ($4 + [148])
	$13 = ($4 + [156])
	$14 = ($4 + [164])
	
.LOOP $label$27:
	if ( ((int_64)*($3 + [8]) != (int_64)*($4 + [24])) ){ goto $label$28 }
	if ( (*($3 + [56]) == 0) ){ goto $label$28 }
	*($4 + [8]) = ((int_64)*($4 + [8]) + (int_64)1)
	$1 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [18248])
	$9 = *($4 + [16])
	CALL eosio_assert(((int_32)*($3 + [60]) == (int_32)$9), [18283])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$6()), [18329])
	$8 = ($3 + [16])
	*($6) = *($8)
	*($3 + [57]) = *($4 + [23])
	$10 = ($3 + [8])
	*($4 + [112]) = *($10)
	$2 = *($3)
	CALL eosio_assert([1], [18380])
	*((($4 + [96]) + [8])) = $11
	*($4 + [100]) = ($4 + [32])
	*($4 + [96]) = ($4 + [32])
	*($4 + [128]) = ($4 + [96])
	*((($4 + [136]) + [8])) = $8
	*($12) = ($3 + [24])
	*((($4 + [136]) + [16])) = ($3 + [32])
	*($13) = ($3 + [40])
	*((($4 + [136]) + [24])) = ($3 + [48])
	*($14) = ($3 + [56])
	*((($4 + [136]) + [32])) = ($3 + [57])
	*($4 + [140]) = $10
	*($4 + [136]) = $3
	CALL $29(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($3 + [64]), $1, ($4 + [32]), [58])
	if ( (uint_64)($2 <= *($9 + [16])) ){ goto $label$29 }
	*(($9 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	*($4 + [136]) = *($10)
	if ( (CALL $165(($4 + [112]), ($4 + [136]), [8]) == 0) ){ goto $label$30 }
	$10 = *($3 + [68])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$31 }
	$10 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-3900893897155238000, ($4 + [128]), $2)
	*(($3 + [68])) = $10
	
.LABEL $label$31
	CALL db_idx64_update($10, $1, ($4 + [136]))
	
.LABEL $label$30
	*($4 + [136]) = *($8)
	if ( (CALL $165($6, ($4 + [136]), [8]) == 0) ){ goto $label$28 }
	$8 = ($3 + [72])
	$3 = *($8)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$32 }
	$3 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-3900893897155237999, ($4 + [128]), $2)
	*($8) = $3
	
.LABEL $label$32
	CALL db_idx64_update($3, $1, ($4 + [136]))
	
.LABEL $label$28
	CALL $27($4)
	$3 = *($4 + [4])
	if ( $3 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	*($4 + [4]) = [0]
	*($4) = ($4 + [16])
	
.LABEL $label$25
	$2 = *($4 + [24])
	$9 = *(($0 + [108]))
	$10 = *(($0 + [104]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$34 }
	
.LOOP $label$36:
	$3 = ($9 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$35 }
	$9 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [17969])
	goto $label$33 
	
.LABEL $label$34
	$3 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-3897482046112530432, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$37 }
	$8 = CALL $28($7, $3)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [17969])
	goto $label$33 
	
.LABEL $label$37
	$8 = [0]
	
.LABEL $label$33
	*($4 + [140]) = $8
	*($4 + [136]) = $7
	$2 = *($0)
	*($4 + [36]) = ($4 + [136])
	*($4 + [32]) = ($4 + [23])
	*($4 + [40]) = ($4 + [8])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18248])
	CALL $31($7, $8, $2, ($4 + [32]))
	if ( (CALL $32($0, *($4 + [24]), *($4 + [23])) == 0) ){ goto $label$38 }
	CALL $33($0, *($4 + [24]), *($4 + [23]))
	
.LABEL $label$38
	$global$0 = ($4 + [176])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [240])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [248])), (int_64)-3904258391152787456, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $22($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17969])
	
.LABEL $label$1
	$9 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18248])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [18283])
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$6()), [18329])
	*($8 + [8]) = $2
	$1 = *($8)
	CALL eosio_assert([1], [18380])
	CALL eosio_assert([1], [17757])
	CALL memcpy($3, $8, [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy(($3 | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [17757])
	CALL memcpy(($3 + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, $3, [24])
	$7 = ($0 + [256])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$2 = CALL $141($3, [8604])
	CALL $44($0, $1, *($2), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [280]) + [16]))) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [280]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [17960])
	CALL memcpy((($4 + [280]) + [8]), ($2 + [8]), [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [17960])
	CALL memcpy($4, ($2 + [16]), [8])
	*($3) = *($4)
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($4 + [240]) = $0
	*(($8 = (($4 + [304]) + [8]))) = *($3)
	*($4 + [304]) = *($4 + [288])
	$0 = *($4 + [280])
	*((($4 + [320]) + [8])) = *($8)
	*($4 + [320]) = *($4 + [304])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [320])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21($4)
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [31]) = $2
	CALL require_auth(*($0))
	$4 = [0]
	CALL eosio_assert(CALL $34($0, $1), *([0] + [8364]))
	$5 = ($0 + [80])
	$7 = *(($0 + [108]))
	$6 = *(($0 + [104]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [17969])
	$4 = $9
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL db_find_i64(*($5), *(($0 + [88])), (int_64)-3897482046112530432, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $28($5, $8)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$5), [17969])
	
.LABEL $label$1
	if ( ((uint_32)(($2 + [-1]) & [255]) > (uint_32)[1]) ){ goto $label$6 }
	$8 = [0]
	if ( (int_64)(*($4 + [16]) == 0) ){ goto $label$7 }
	$8 = ((int_64)*($4 + [40]) != (int_64)0)
	
.LABEL $label$7
	CALL eosio_assert($8, *([0] + [8380]))
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$2 == (int_32)[3]), *([0] + [8384]))
	
.LABEL $label$5
	$4 = ($0 + [40])
	$7 = *(($0 + [68]))
	$9 = *(($0 + [64]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$11:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$10 }
	$7 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$4), [17969])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $30($4, $8)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$8
	$10 = *($0)
	*($3 + [16]) = ($3 + [31])
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [18248])
	CALL $35($4, $6, $10, ($3 + [16]))
	$7 = *(($0 + [108]))
	$9 = *(($0 + [104]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$18:
	$8 = ($7 + [-24])
	$2 = *($8)
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$17 }
	$7 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$5), [17969])
	$8 = *($3 + [31])
	if ( *($6 + [73]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$8 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-3897482046112530432, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(CALL $28($5, $8) + [64]) == (int_32)$5), [17969])
	
.LABEL $label$19
	$8 = *($3 + [31])
	if ( (*($6 + [73]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = *($6 + [56])
	$9 = ($8 & [255])
	if ( ((int_32)$9 != (int_32)[3]) ){ goto $label$13 }
	if ( ((int_32)($7 & [255]) == (int_32)$9) ){ goto $label$12 }
	CALL $36($0, $1, ($7 & [255]))
	$10 = CALL $37($0, $1, *(($6 + [56])))
	*($3 + [16]) = (int_64))(*($6 + [80]) - $10)
	$10 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert($11, [18248])
	CALL $38($4, $6, $10, ($3 + [8]))
	goto $label$12 
	
.LABEL $label$14
	CALL $39($0, $1, ($8 & [255]))
	CALL $33($0, $1, *($3 + [31]))
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)($7 & [255]) == (int_32)$9) ){ goto $label$12 }
	$10 = CALL $37($0, $1, ($8 & [255]))
	$12 = *($6 + [80])
	CALL $40($0, $1)
	CALL $41($0, $1, *($3 + [31]), $10, (int_64))($12 - $10))
	
.LABEL $label$12
	CALL $42($0, $1)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [280]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17960])
	CALL memcpy((($4 + [280]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [17960])
	CALL memcpy((($4 + [280]) + [16]), ($2 + [16]), [1])
	*(($4 + [20])) = ($2 + [17])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*($4 + [120]) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*($4 + [240]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [296])
	$0 = *($4 + [288])
	$1 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21($4)
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(CALL $43($0, $2), *([0] + [8340]))
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17969])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL $30($3, CALL $fimport$9(*($3), *(($0 + [48])), (int_64)-3902253456596926464, $2))
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17969])
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)*($7 + [64]) + (int_64)86400) <= ((int_64)((int_64)((uint_64)CALL $fimport$13() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)), *([0] + [8348]))
	CALL $42($0, $2)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17757])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17757])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17757])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17757])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17757])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3905365620752908288, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [17969])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)-3905365620752908288, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [17969])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18439])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3905365620752908288, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [17969])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $51($6, CALL $fimport$9(*($6), *($6 + [8]), (int_64)-3905365620752908288, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [17969])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [48]) = $1
	$3 = ($0 + [40])
	$5 = *(($0 + [68]))
	$4 = *(($0 + [64]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17969])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $30($3, $6)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$3), [17969])
	
.LABEL $label$1
	*($2 + [40]) = ($0 + [200])
	CALL $114(($2 + [56]), ($2 + [40]), ($2 + [48]))
	$6 = *($2 + [60])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_64)*($2 + [48]) != (int_64)*($6 + [8])) ){ goto $label$6 }
	$8 = *($2 + [56])
	*($2 + [32]) = $8
	$1 = (int_64)0
	$6 = (CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$5 }
	$5 = ($7 + [56])
	$7 = ($7 + [72])
	$4 = ($2 + [24])
	
.LOOP $label$7:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [48])) ){ goto $label$8 }
	if ( ((int_32)*($7) != (int_32)*($5)) ){ goto $label$9 }
	$1 = ((int_64)*($6 + [16]) + (int_64)$1)
	goto $label$8 
	
.LABEL $label$9
	CALL $44($0, *($6 + [24]), *($6 + [16]), CALL $141(($2 + [16]), [8580]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$8
	CALL $115(($2 + [32]))
	$6 = *($2 + [36])
	if ( $6 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [40])
	$1 = (int_64)0
	
.LABEL $label$5
	$6 = CALL $141($2, [8496])
	CALL $95($0, *($2 + [48]), $1, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$10
	$global$0 = ($2 + [64])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [136]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [136])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = $10
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	*($1 + [76]) = [1]
	$5 = ($1 + [32])
	*(($4 = $3) + [16]) = *($5)
	$6 = *($1)
	CALL eosio_assert([1], [18380])
	$7 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [76])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $7)
	*($4 + [24]) = $4
	*($4 + [40]) = $8
	*($4 + [44]) = $5
	*($4 + [80]) = $10
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [48]) = ($1 + [40])
	*($4 + [52]) = ($1 + [48])
	*($4 + [56]) = ($1 + [56])
	*($4 + [60]) = ($1 + [64])
	*($4 + [64]) = ($1 + [72])
	*($4 + [68]) = ($1 + [73])
	*($4 + [72]) = ($1 + [74])
	*($4 + [76]) = ($1 + [75])
	*($4 + [84]) = ($1 + [80])
	*($4 + [88]) = ($1 + [88])
	*($4 + [92]) = ($1 + [96])
	*($4 + [96]) = ($1 + [104])
	*($4 + [100]) = ($1 + [112])
	*($4 + [104]) = ($1 + [120])
	*($4 + [112]) = ($1 + [136])
	*($4 + [108]) = ($1 + [128])
	*($4 + [116]) = ($1 + [144])
	*($4 + [120]) = ($1 + [152])
	CALL $122(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $175($3)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *($5)
	if ( (CALL $165(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$7 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($4 + [24]), $6)
	*($1) = $7
	
.LABEL $label$7
	CALL db_idx64_update($7, $2, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [128])
}

void .FUNC $111 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [48]) = $1
	*($2 + [40]) = ($0 + [120])
	*($2 + [32]) = (int_64)0
	CALL $26(($2 + [56]), ($2 + [40]), ($2 + [48]))
	$3 = *($2 + [60])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_64)*($2 + [48]) != (int_64)*($3 + [8])) ){ goto $label$2 }
	$1 = *($2 + [56])
	*($2 + [24]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$1 }
	$4 = ($2 + [16])
	
.LOOP $label$3:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [48])) ){ goto $label$4 }
	$1 = (int_64)
	if ( (int_64)($1(*($3 + [24]) - *($3 + [48]))) == 0) ){ goto $label$5 }
	CALL $44($0, *($3 + [16]), $1, CALL $141(($2 + [8]), [8592]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$5
	*($2 + [32]) = ((int_64)*($2 + [32]) + (int_64)$1)
	
.LABEL $label$4
	CALL $27(($2 + [24]))
	$3 = *($2 + [28])
	if ( $3 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [28]) = [0]
	*($2 + [24]) = ($2 + [40])
	
.LABEL $label$1
	$5 = ($0 + [40])
	$1 = *($2 + [48])
	$4 = *(($0 + [68]))
	$6 = *(($0 + [64]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$9:
	$3 = ($4 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$8 }
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$5), [17969])
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$3 = CALL db_find_i64(*($5), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $30($5, $3)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$5), [17969])
	
.LABEL $label$6
	$1 = *($0)
	*($2 + [56]) = ($2 + [32])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	CALL $113($5, $7, $1, ($2 + [56]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $119($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $145($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $145($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $140($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17965])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $84($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17960])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [17757])
	CALL memcpy(*($0 + [4]), $4, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $121(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [268])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [264]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [228])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [224]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [184]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [188])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [184]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [144]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [148])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [104]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [108])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [104]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [64]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [68])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$31
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [64]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $171($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17960])
	CALL memcpy(($4 + [288]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17960])
	CALL memcpy((($4 + [288]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*($4 + [208]) = $0
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [248]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [296])
	$1 = *($4 + [288])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $175($2)
	
.LABEL $label$5
	CALL $21(($4 + [8]))
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18548])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18598])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17960])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17960])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17960])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [40])
	$4 = *(($0 + [68]))
	$3 = *(($0 + [64]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $30($2, $5)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	
.LABEL $label$1
	if ( ((uint_64)*($6 + [32]) >= (uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)) ){ goto $label$6 }
	if ( ((uint_64)*($6 + [40]) <= (uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)) ){ goto $label$6 }
	if ( (*($6 + [73]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18439])
	$3 = *($0 + [4])
	$4 = *($3 + [68])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3900893897155238000, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [68]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [60])) == (int_32)$7), [17969])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $47($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)-3900893897155238000, $6))
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [17969])
	
.LABEL $label$3
	*($2 + [68]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3900893897155238000, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [60])) == (int_32)$7), [17969])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $47($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)-3900893897155238000, $6))
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)$7), [17969])
	
.LABEL $label$2
	*($4 + [68]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [152]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [152])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = $10
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [144]) = ((int_64)*($1 + [144]) + (int_64)*(*($3)))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [144])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = $10
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [104]) = ((int_64)*(*(*($3) + [4]) + [104]) + (int_64)*(*(($3 + [4]))))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [104])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [96]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [112]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [112])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [100]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [216])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [200])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [208])), (int_64)-3905365620752908288, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $51($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $128(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [216])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18094])
	*($1) = *($7)
	*($1 + [24]) = *(*($5 + [4]))
	*($1 + [8]) = *(*($5 + [8]))
	*($1 + [16]) = *(*($5 + [12]))
	*($1 + [32]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$2 = $2
	$5 = ($2 + [-48])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-8])
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	$6 = ($1 + [24])
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [32])
	CALL $129(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-3905365620752908288, *(*($0 + [8])), $8, $5, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$8 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [48]) = CALL db_idx64_store($8, (int_64)-3905365620752908288, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = *($6)
	*(($1 + [52])) = CALL db_idx64_store($11, (int_64)-3905365620752908287, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17757])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $123(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	*($1 + [74]) = [1]
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [96]) = ((int_64)*($1 + [96]) + (int_64)*(*($3)))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [96])
	$11 = ($1 + [74])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [72]) = $11
	*($5 + [92]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [120]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [120])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [104]) = $10
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [128]) = *(*(*($3) + [4]) + [80])
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [128])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = $10
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [128]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [128])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [64]) = ($1 + [72])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [76]) = ($1 + [75])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = $10
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [40]) = $1
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $30($4, $7)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$1
	*($3 + [32]) = ($0 + [120])
	*($3 + [24]) = (int_64)0
	$9 = ($0 + [240])
	$6 = *(($0 + [268]))
	$10 = *(($0 + [264]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)5) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL $22($9, CALL $fimport$9(*($9), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)5))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$5
	$11 = *($5 + [8])
	CALL $26(($3 + [48]), ($3 + [32]), ($3 + [40]))
	$7 = *($3 + [52])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_64)*($3 + [40]) != (int_64)*($7 + [8])) ){ goto $label$11 }
	$1 = *($3 + [48])
	*($3 + [16]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$9 }
	$12 = (($3 + [48]) + [58])
	$13 = (($3 + [128]) + [8])
	$14 = (int_64)0
	$9 = ($8 + [80])
	$15 = ($3 + [164])
	$16 = ($3 + [172])
	$17 = ($3 + [180])
	
.LOOP $label$12:
	if ( ((int_64)*($7 + [8]) != (int_64)*($3 + [40])) ){ goto $label$13 }
	$1 = *($7 + [24])
	$14 = ((int_64)$1 + (int_64)$14)
	$18 = *($9)
	if ( ((uint_64)$18 <= (uint_64)$14) ){ goto $label$10 }
	$6 = *($7 + [57])
	if ( ($6 == 0) ){ goto $label$15 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	if ( ((int_64)($1 == 0) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = ((uint_64)((int_64)$1 * (int_64)$11) / (uint_64)(int_64)10000)
	if ( (int_64)($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$19 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	$6 = *($3 + [32])
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$6), [18283])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$6()), [18329])
	*($7 + [48]) = $1
	$5 = ($7 + [16])
	*($13) = *($5)
	$10 = ($7 + [8])
	*($3 + [128]) = *($10)
	$18 = *($7)
	CALL eosio_assert([1], [18380])
	*((($3 + [112]) + [8])) = $12
	*($3 + [116]) = ($3 + [48])
	*($3 + [112]) = ($3 + [48])
	*($3 + [144]) = ($3 + [112])
	*((($3 + [152]) + [8])) = $5
	*($15) = ($7 + [24])
	*((($3 + [152]) + [16])) = ($7 + [32])
	*($16) = ($7 + [40])
	*((($3 + [152]) + [24])) = ($7 + [48])
	*($17) = ($7 + [56])
	*((($3 + [152]) + [32])) = ($7 + [57])
	*($3 + [156]) = $10
	*($3 + [152]) = $7
	CALL $29(($3 + [152]), ($3 + [144]))
	CALL db_update_i64(*($7 + [64]), $19, ($3 + [48]), [58])
	if ( (uint_64)($18 <= *($6 + [16])) ){ goto $label$16 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($3 + [152]) = *($10)
	if ( (CALL $165(($3 + [128]), ($3 + [152]), [8]) == 0) ){ goto $label$17 }
	$10 = *($7 + [68])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$18 }
	$10 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155238000, ($3 + [144]), $18)
	*(($7 + [68])) = $10
	
.LABEL $label$18
	CALL db_idx64_update($10, $19, ($3 + [152]))
	
.LABEL $label$17
	*($3 + [152]) = *($5)
	if ( (CALL $165($13, ($3 + [152]), [8]) == 0) ){ goto $label$19 }
	$5 = ($7 + [72])
	$7 = *($5)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$20 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155237999, ($3 + [144]), $18)
	*($5) = $7
	
.LABEL $label$20
	CALL db_idx64_update($7, $19, ($3 + [152]))
	
.LABEL $label$19
	*($3 + [24]) = ((int_64)*($3 + [24]) + (int_64)$1)
	
.LABEL $label$13
	CALL $27(($3 + [16]))
	$7 = *($3 + [20])
	if ( $7 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	*($3 + [20]) = [0]
	*($3 + [16]) = ($3 + [32])
	goto $label$9 
	
.LABEL $label$10
	$1 = ((int_64))($18 - $14) + (int_64)$1)
	$6 = *($7 + [57])
	if ( ($6 == 0) ){ goto $label$22 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	goto $label$21 
	
.LABEL $label$22
	$1 = ((uint_64)((int_64)$1 * (int_64)$11) / (uint_64)(int_64)10000)
	
.LABEL $label$21
	if ( (int_64)($1 == 0) ){ goto $label$9 }
	$18 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	$6 = *($3 + [32])
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$6), [18283])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$6()), [18329])
	*($7 + [48]) = $1
	$5 = ($7 + [8])
	*($3 + [128]) = *($5)
	$10 = ($7 + [16])
	*($3 + [136]) = *($10)
	$14 = *($7)
	CALL eosio_assert([1], [18380])
	*($3 + [120]) = $12
	*($3 + [116]) = ($3 + [48])
	*($3 + [112]) = ($3 + [48])
	*($3 + [144]) = ($3 + [112])
	*($3 + [156]) = $5
	*($3 + [152]) = $7
	*($3 + [160]) = $10
	*($3 + [164]) = ($7 + [24])
	*($3 + [168]) = ($7 + [32])
	*($3 + [172]) = ($7 + [40])
	*($3 + [176]) = ($7 + [48])
	*($3 + [180]) = ($7 + [56])
	*($3 + [184]) = ($7 + [57])
	CALL $29(($3 + [152]), ($3 + [144]))
	CALL db_update_i64(*($7 + [64]), $18, ($3 + [48]), [58])
	if ( (uint_64)($14 <= *($6 + [16])) ){ goto $label$23 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$10 = (($3 + [128]) + [8])
	*($3 + [152]) = *($5)
	if ( (CALL $165(($3 + [128]), ($3 + [152]), [8]) == 0) ){ goto $label$24 }
	$5 = *($7 + [68])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$25 }
	$5 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155238000, ($3 + [144]), $14)
	*(($7 + [68])) = $5
	
.LABEL $label$25
	CALL db_idx64_update($5, $18, ($3 + [152]))
	
.LABEL $label$24
	*($3 + [152]) = *(($7 + [16]))
	if ( (CALL $165($10, ($3 + [152]), [8]) == 0) ){ goto $label$26 }
	$5 = ($7 + [72])
	$7 = *($5)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$27 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3900893897155237999, ($3 + [144]), $14)
	*($5) = $7
	
.LABEL $label$27
	CALL db_idx64_update($7, $18, ($3 + [152]))
	
.LABEL $label$26
	*($3 + [24]) = ((int_64)*($3 + [24]) + (int_64)$1)
	
.LABEL $label$9
	$1 = *($0)
	*($3 + [48]) = ($3 + [24])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [18248])
	CALL $109($4, $8, $1, ($3 + [48]))
	$7 = CALL $141($3, [8532])
	CALL $95($0, *($3 + [40]), *($3 + [24]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$28
	$global$0 = ($3 + [192])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [48]) = $1
	*($3 + [40]) = ($0 + [160])
	*($3 + [32]) = (int_64)0
	CALL $96(($3 + [56]), ($3 + [40]), ($3 + [48]))
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_64)*($3 + [48]) != (int_64)*($4 + [8])) ){ goto $label$2 }
	$1 = *($3 + [56])
	*($3 + [24]) = $1
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($4) == 0) ){ goto $label$1 }
	$5 = ($3 + [16])
	
.LOOP $label$3:
	if ( ((int_64)*($4 + [8]) != (int_64)*($3 + [48])) ){ goto $label$4 }
	if ( ((int_32)*($4 + [16]) == (int_32)$2) ){ goto $label$4 }
	CALL $44($0, *($4 + [40]), *($4 + [24]), CALL $141(($3 + [8]), [8568]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$5
	*($3 + [32]) = ((int_64)*($3 + [32]) + (int_64)*(*($3 + [28]) + [24]))
	
.LABEL $label$4
	CALL $97(($3 + [24]))
	$4 = *($3 + [28])
	if ( $4 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($3 + [28]) = [0]
	*($3 + [24]) = ($3 + [40])
	
.LABEL $label$1
	$6 = ($0 + [40])
	$1 = *($3 + [48])
	$2 = *(($0 + [68]))
	$7 = *(($0 + [64]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($2 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$8 }
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$6), [17969])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $30($6, $4)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$6), [17969])
	
.LABEL $label$6
	$1 = *($0)
	*($3 + [56]) = ($3 + [32])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18248])
	CALL $98($6, $5, $1, ($3 + [56]))
	$global$0 = ($3 + [64])
}

int_64 .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($0 + [80])
	$5 = *(($0 + [108]))
	$4 = *(($0 + [104]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [17969])
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [88])), (int_64)-3897482046112530432, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $28($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [17969])
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = (int_64)0
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$1 }
	$6 = ($7 + [16])
	goto $label$2 
	
.LABEL $label$3
	$6 = ($7 + [40])
	
.LABEL $label$2
	$1 = *($6)
	
.LABEL $label$1
	return $1
}

int_32 .FUNC $34 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [40])
	$4 = *(($0 + [68]))
	$3 = *(($0 + [64]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$7 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	if ( *($6 + [73]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $30($2, $5)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$2), [17969])
	
.LABEL $label$9
	if ( (*($6 + [73]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6 + [76]) == 0) ){ goto $label$3 }
	return ([0] | [0])
	
.LABEL $label$4
	if ( ((uint_64)*($6 + [40]) >= (uint_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)) ){ goto $label$2 }
	return ([0] | (*($6 + [75]) == 0))
	
.LABEL $label$3
	if ( (*($6 + [74]) == 0) ){ goto $label$1 }
	return ((*($6 + [75]) == 0) | [0])
	
.LABEL $label$2
	return ([0] | [0])
	
.LABEL $label$1
	return ([0] | [0])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	*($1 + [75]) = [1]
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	*($1 + [72]) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18380])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [134])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$10 = ($1 + [72])
	$11 = ($1 + [75])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $171($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [24]) = $5
	*($5 + [40]) = $8
	*($5 + [44]) = $6
	*($5 + [64]) = $10
	*($5 + [76]) = $11
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [64])
	*($5 + [68]) = ($1 + [73])
	*($5 + [72]) = ($1 + [74])
	*($5 + [80]) = ($1 + [76])
	*($5 + [84]) = ($1 + [80])
	*($5 + [88]) = ($1 + [88])
	*($5 + [92]) = ($1 + [96])
	*($5 + [96]) = ($1 + [104])
	*($5 + [100]) = ($1 + [112])
	*($5 + [104]) = ($1 + [120])
	*($5 + [112]) = ($1 + [136])
	*($5 + [108]) = ($1 + [128])
	*($5 + [116]) = ($1 + [144])
	*($5 + [120]) = ($1 + [152])
	CALL $122(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [164]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $175($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [32]) = *($6)
	if ( (CALL $165(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$6 }
	$1 = ($1 + [168])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3902253456596926464, ($5 + [24]), $7)
	*($1) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [32]))
	
.LABEL $label$6
	$global$0 = ($5 + [128])
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $1
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $30($4, $7)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$1
	*($3 + [8]) = ($0 + [120])
	CALL $26(($3 + [24]), ($3 + [8]), ($3 + [16]))
	$7 = *($3 + [28])
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_64)*($3 + [16]) != (int_64)*($7 + [8])) ){ goto $label$9 }
	$1 = *($3 + [24])
	*($3) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$8 }
	$6 = [0]
	$1 = (int_64)0
	$5 = ($8 + [80])
	$9 = (int_64)0
	
.LOOP $label$10:
	if ( ((int_64)*($7 + [8]) != (int_64)*($3 + [16])) ){ goto $label$11 }
	$8 = *($7 + [57])
	$6 = ( $6 ? $8 : ($6 & [255]) )
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)*($7 + [24]) + (int_64)$9)
	if ( ((uint_64)$9 >= (uint_64)*($5)) ){ goto $label$7 }
	$7 = ($8 & [255])
	if ( ((int_32)$7 != (int_32)($6 & [255])) ){ goto $label$6 }
	$6 = $8
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$11
	CALL $27($3)
	$7 = *($3 + [4])
	if ( $7 ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$9
	$6 = [0]
	*($3 + [4]) = [0]
	*($3) = ($3 + [8])
	$1 = (int_64)0
	goto $label$5 
	
.LABEL $label$8
	$1 = (int_64)0
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	$7 = ($8 & [255])
	if ( ((int_32)$7 != (int_32)($6 & [255])) ){ goto $label$6 }
	$6 = $8
	if ( $7 ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return [0]
	
.LABEL $label$5
	$global$0 = ($3 + [32])
	return (((int_64)$1 != (int_64)0) & ((int_32)($6 & [255]) == (int_32)$2))
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [31]) = $2
	$4 = ($0 + [40])
	$6 = *(($0 + [68]))
	$5 = *(($0 + [64]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$4), [17969])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [48])), (int_64)-3902253456596926464, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $30($4, $2)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$4), [17969])
	
.LABEL $label$1
	$8 = *($0)
	*($3 + [24]) = ($3 + [31])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18248])
	CALL $92($4, $7, $8, ($3 + [24]))
	if ( ((int_32)*($3 + [31]) != (int_32)[3]) ){ goto $label$5 }
	CALL $36($0, $1, [3])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$5
	$9 = ($0 + [80])
	$6 = *(($0 + [108]))
	$5 = *(($0 + [104]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$2 = ($6 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$8 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$9), [17969])
	goto $label$6 
	
.LABEL $label$7
	$2 = CALL db_find_i64(*($9), *(($0 + [88])), (int_64)-3897482046112530432, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $28($9, $2) + [64]) == (int_32)$9), [17969])
	
.LABEL $label$6
	$9 = ($0 + [240])
	$6 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$2 = ($6 + [-24])
	$5 = *($2)
	if ( ((int_64)*($5) == (int_64)3) ){ goto $label$12 }
	$6 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	goto $label$10 
	
.LABEL $label$11
	$5 = CALL $22($9, CALL $fimport$9(*($9), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)3))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$10
	$8 = ((uint_64)((int_64)*($7 + [80]) * (int_64)*($5 + [8])) / (uint_64)(int_64)10000)
	$6 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$2 = ($6 + [-24])
	$5 = *($2)
	if ( ((int_64)*($5) == (int_64)2) ){ goto $label$16 }
	$6 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	goto $label$14 
	
.LABEL $label$15
	$5 = CALL $22($9, CALL $fimport$9(*(($0 + [240])), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)2))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$14
	$10 = ((uint_64)((int_64)*(($7 + [80])) * (int_64)*($5 + [8])) / (uint_64)(int_64)10000)
	$6 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$21:
	$2 = ($6 + [-24])
	$5 = *($2)
	if ( ((int_64)*($5) == (int_64)4) ){ goto $label$20 }
	$6 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	goto $label$18 
	
.LABEL $label$19
	$5 = CALL $22($9, CALL $fimport$9(*(($0 + [240])), *(($0 + [248])), (int_64)-3904258391152787456, (int_64)4))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$9), [17969])
	
.LABEL $label$18
	$2 = ($7 + [80])
	$11 = *($2)
	$12 = *($5 + [8])
	$13 = CALL $37($0, $1, *($3 + [31]))
	$11 = ((uint_64)((int_64)$11 * (int_64)$12) / (uint_64)(int_64)10000)
	CALL $41($0, $1, *($3 + [31]), $13, (int_64))(*($2) - ((int_64)((int_64)$13 + (int_64)((int_64)$10 + (int_64)$8)) + (int_64)$11)))
	CALL $93($0, $1, $11)
	CALL $94($0, $1, $8)
	$2 = CALL $141(($3 + [8]), [8508])
	CALL $95($0, $1, $10, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$22
	$global$0 = ($3 + [32])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18020])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $171($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [160]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [73])
	*($3 + [72]) = ($5 + [74])
	*($3 + [76]) = ($5 + [75])
	*($3 + [80]) = ($5 + [76])
	*($3 + [84]) = ($5 + [80])
	*($3 + [88]) = ($5 + [88])
	*($3 + [92]) = ($5 + [96])
	*($3 + [96]) = ($5 + [104])
	*($3 + [100]) = ($5 + [112])
	*($3 + [104]) = ($5 + [120])
	*($3 + [112]) = ($5 + [136])
	*($3 + [108]) = ($5 + [128])
	*($3 + [116]) = ($5 + [144])
	*($3 + [120]) = ($5 + [152])
	CALL $120(($3 + [32]), ($3 + [24]))
	*($5 + [168]) = [-1]
	*($5 + [164]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $79(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $175($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [128])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18283])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [18329])
	$6 = *(($3 + [8]))
	$7 = *(($3 + [4]))
	$8 = *($1)
	$3 = *(*($3))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$1 }
	*($1 + [24]) = ((int_64)*($6) + (int_64)*(*($7 + [4]) + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($1 + [48]) = ((int_64)*($6) + (int_64)*(*($7 + [4]) + [48]))
	
.LABEL $label$1
	CALL eosio_assert([1], [18380])
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $4
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [52]) = ($1 + [40])
	*($5 + [56]) = ($1 + [48])
	*($5 + [60]) = ($1 + [56])
	CALL $80(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [64])
}