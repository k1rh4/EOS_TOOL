(data (i32.const 8192) "onerror action\'s are only valid from the \"EOS\" system account\00")
(data (i32.const 8254) "eosio.token\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8352) "luckgamecoin\00")
(data (i32.const 8365) "string is too long to be a valid name\00")
(data (i32.const 8403) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8470) "character is not in allowed character set for names\00")
(data (i32.const 8522) "deposit\00")
(data (i32.const 8531) "Invalid transfer amount.\00")
(data (i32.const 8556) "candy\00")
(data (i32.const 8562) "LK\00")
(data (i32.const 8565) "Token Error\00")
(data (i32.const 8577) ",\00")
(data (i32.const 8579) "Type Error!\00")
(data (i32.const 8591) "1\00")
(data (i32.const 8593) "luckgamefish\00")
(data (i32.const 8606) "luckgamedice\00")
(data (i32.const 8619) "Auth Error\00")
(data (i32.const 8630) "2\00")
(data (i32.const 8632) "read_transaction failed\00")
(data (i32.const 8656) "wrong transaction\00")
(data (i32.const 8674) "EOS\00")
(data (i32.const 8678) "Token not supported!\00")
(data (i32.const 8699) "string is too long to be a valid symbol_code\00")
(data (i32.const 8744) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8797) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8848) "error reading iterator\00")
(data (i32.const 8871) "read\00")
(data (i32.const 8876) "cannot create objects in table of another contract\00")
(data (i32.const 8927) "write\00")
(data (i32.const 8933) "cannot pass end iterator to modify\00")
(data (i32.const 8968) "object passed to modify is not in multi_index\00")
(data (i32.const 9014) "cannot modify objects in table of another contract\00")
(data (i32.const 9065) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9124) "GLOBAL_FEE_CURRENT_BOUNS Not Found\00")
(data (i32.const 9159) "GLOBAL_FEE_HISTORY_BOUNS Not Found\00")
(data (i32.const 9194) "VIP Bouns![https://luckgame.one]\00")
(data (i32.const 9227) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9276) "invalid symbol name\00")
(data (i32.const 9296) "attempt to add asset with different symbol\00")
(data (i32.const 9339) "addition underflow\00")
(data (i32.const 9358) "addition overflow\00")
(data (i32.const 9376) "get\00")
(data (i32.const 9380) "GLOBAL_TOTAL_PLEDGE Not Found\00")
(data (i32.const 9410) "Account Not Exists\00")
(data (i32.const 9429) "No Pledge\00")
(data (i32.const 9439) "Pledge Withdraw![https://luckgame.one]\00")
(data (i32.const 9478) "attempt to subtract asset with different symbol\00")
(data (i32.const 9526) "subtraction underflow\00")
(data (i32.const 9548) "subtraction overflow\00")
(data (i32.const 9569) "Set Golbal Error\00")
(data (i32.const 9586) "GLOBAL_FEE_LAST_TIME Not Exist\00")
(data (i32.const 9617) "GLOBAL_FEE_CURRENT_BOUNS Not Exist\00")
(data (i32.const 9652) "GLOBAL_TOTAL_PLEDGE Not Exist\00")
(data (i32.const 9682) "cannot increment end iterator\00")
(data (i32.const 9712) "No Bouns\00")
(data (i32.const 9721) "Bouns Withdraw![https://luckgame.one]\00")
(data (i32.const 9759) "You have no red packet\00")
(data (i32.const 9782) "You can only get a red packet once in 24 hours.\00")
(data (i32.const 9830) "\e6\96\b0\e5\b9\b4\e7\ba\a2\e5\8c\85\e5\a4\a9\e5\a4\a9\e9\a2\86![https://luckgame.one]\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "transaction_size" (func $fimport$5 (result i32)))
(import "env" "read_transaction" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "memset" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $102))
(export "_Znwj" (func $100))
(export "_Znaj" (func $101))
(export "_ZdaPv" (func $103))
(export "_ZnwjSt11align_val_t" (func $104))
(export "_ZnajSt11align_val_t" (func $105))
(export "_ZdlPvSt11align_val_t" (func $106))
(export "_ZdaPvSt11align_val_t" (func $107))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $13 $15)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18292))
(global $global$2 i32 (i32.const 18292))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $111($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $111($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $108($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = *(*($0))
	$0 = CALL $119([8674])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8699])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($0 + [8673]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9227])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $0
	$0 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$7 = ($0 + [1])
	$0 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$0 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9276])
	if ( ((int_64)*($1 + [56]) == (int_64)0) ){ goto $label$12 }
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [64]))), [9296])
	$5 = ((int_64)*($1 + [56]) + (int_64)$2)
	*($1 + [56]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9339])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9358])
	return 
	
.LABEL $label$12
	*(($1 + [64])) = $6
	*(($1 + [56])) = $2
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = *(*($0) + [4])
	*($1) = *($2)
	*(($1 + [16])) = *(($2 + [16]))
	*($1 + [8]) = *($2 + [8])
	$2 = *(*($0) + [4])
	*($1 + [24]) = *($2 + [24])
	*(($1 + [32])) = *(($2 + [32]))
	$2 = *(*($0) + [4])
	*($1 + [40]) = *($2 + [40])
	*(($1 + [48])) = *(($2 + [48]))
	$0 = *(*($0) + [4])
	*($1 + [56]) = *($0 + [56])
	*(($1 + [64])) = *(($0 + [64]))
	$3 = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	$0 = CALL $119([8562])
	if ( ($0 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8699])
	goto $label$2 
	
.LABEL $label$3
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = (int_64)0
	
.LOOP $label$4:
	$2 = *(($0 + [8561]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$5
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$4 }
	
.LABEL $label$1
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [9276])
	*(($1 + [96])) = $5
	*($1 + [88]) = (int_64)0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8871])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8927])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8927])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8927])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $75(CALL $74($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8927])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8927])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $75($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $94($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $124($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8266])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $115 (int_32 $0)
{
}

int_32 .FUNC $122 (int_32 $0)
{
	return CALL $123([9896], $0)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $122($1)
	
.LABEL $label$2
	*(CALL $114()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $122(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $125($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $114())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $121($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	CALL eosio_assert([1], [9478])
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [9526])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [9548])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	CALL eosio_assert([1], [9478])
	*($1 + [56]) = (int_64)0
	CALL eosio_assert([1], [9526])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9548])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $70(($7 + [28]), [1])
	$1 = *(($7 + [32]))
	$2 = *($7 + [28])
	*($5 + [15]) = *($4)
	CALL eosio_assert(((int_32)($1 - $2) > (int_32)[0]), [8927])
	CALL memcpy($2, ($5 + [15]), [1])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18280])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18088]
	$3 = (((int_32)$1 * (int_32)[12]) + [18088])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [96])
	$6 = *(($0 + [124]))
	$5 = *(($0 + [120]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8797])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [104])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $39($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8797])
	
.LABEL $label$2
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [8933])
	CALL $92($4, $8, (int_64)0, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $93($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $88($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $70($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $89($2, $1)
	CALL $91(CALL $90(CALL $90($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $70($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $71(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	CALL $95($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = ((int_64)*(*($3)) + (int_64)-28800)
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9888]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9892])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9888]) = [1]
	$2 = ($2 << [16])
	*([0] + [9892]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9892])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9892]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9888]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9888]) = [1]
	$3 = ($3 << [16])
	*([0] + [9892]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9892])
	
.LABEL $label$10
	*([0] + [9892]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8871])
	CALL memcpy(($4 + [248]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $17(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	CALL $19($8)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [96])
	CALL $30($1, $2, *($0), ($1 + [8]))
	CALL $31($1, $2, *($0), ($1 + [8]))
	CALL $32($1, $2, *($0), ($1 + [8]))
	CALL $33($1, $2, *($0), ($1 + [8]))
	CALL $34($1, $2, *($0), ($1 + [8]))
	CALL $35($1, $2, *($0), ($1 + [8]))
	CALL $36($1, $2, *($0), ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8871])
	CALL memcpy(($4 + [40]), $2, [1])
	$8 = *($4 + [40])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [1])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$9 = CALL $17(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	CALL $19($9)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [176])
	$5 = *(($0 + [204]))
	$4 = *(($0 + [200]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [184])), (int_64)-6030912129340538880, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $37($3, $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	
.LABEL $label$1
	$8 = [0]
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9410])
	CALL eosio_assert(((int_64)*($7 + [40]) > (int_64)0), [9429])
	*(($2 + [168])) = *(($7 + [48]))
	*($2 + [160]) = *($7 + [40])
	CALL eosio_assert($6, [8933])
	CALL $38($3, $7, (int_64)0, ($2 + [48]))
	$3 = ($0 + [96])
	$5 = *(($0 + [124]))
	$7 = *(($0 + [120]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)10007) ){ goto $label$7 }
	$5 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$3), [8797])
	$8 = $4
	goto $label$5 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*($3), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10007)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $39($3, $6)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [8797])
	
.LABEL $label$5
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9380])
	*($2 + [48]) = ($2 + [160])
	CALL eosio_assert($6, [8933])
	CALL $40($3, $8, (int_64)0, ($2 + [48]))
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$6 = CALL $119([9439])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	*($2 + [48]) = ($6 << [1])
	$5 = (($2 + [48]) | [1])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2 + [48]) = ($7 | [1])
	*($2 + [56]) = $5
	*($2 + [52]) = $6
	
.LABEL $label$11
	CALL memcpy($5, [9439], $6)
	
.LABEL $label$10
	*(($5 + $6)) = [0]
	*(($2 + [136])) = *((($2 + [160]) + [8]))
	*(($2 + [152])) = *((($2 + [48]) + [8]))
	*($2 + [112]) = *($0)
	*($2 + [128]) = *($2 + [160])
	*($2 + [144]) = *($2 + [48])
	*($2 + [120]) = $1
	$9 = CALL current_time()
	*(($2 + [76])) = (int_64)0
	*(($2 + [92])) = (int_64)0
	*(($2 + [100])) = (int_64)0
	*($2 + [60]) = [0]
	*($2 + [64]) = [0]
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [40]) = (int_64)3617214756542218240
	*($2 + [32]) = *($0)
	*($2 + [24]) = [8352]
	*($2 + [28]) = CALL $119([8352])
	*($2 + [8]) = *($2 + [24])
	$6 = CALL $2(($2 + [176]), ($2 + [8]))
	*($2 + [16]) = (int_64)-3617168760277827584
	CALL $41(($2 + [84]), ($2 + [32]), $6, ($2 + [16]), ($2 + [112]))
	*($2 + [68]) = [86400]
	$9 = CALL current_time()
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = ((int_64)((int_64)((int_64)((uint_64)$9 / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)100000000000000) + (int_64)$1)
	$1 = *($0)
	CALL $42(($2 + [176]), ($2 + [48]))
	$6 = *($2 + [176])
	CALL send_deferred(($2 + [32]), $1, $6, (*($2 + [180]) - $6), [0])
	$6 = *($2 + [176])
	if ( ($6 == 0) ){ goto $label$13 }
	*($2 + [180]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	CALL $28(($2 + [48]))
	if ( ((*(($2 + [144])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($2 + [152])))
	
.LABEL $label$14
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$9
	CALL $108(($2 + [48]))
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [304])) = (int_64)0
	*(($4 + [320])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [24]) = ($4 + [264])
	*($4 + [48]) = ($4 + [280])
	CALL $16(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [272])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [264])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $17(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [328])
	CALL $18(($4 + [24]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $125($2)
	
.LABEL $label$4
	CALL $19($3)
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [320])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [112])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = ((int_64)((int_64)$3 & (int_64)4294967295) + (int_64)28800)
	$4 = (int_64)
	*($2 + [88]) = $4($4 - ((uint_64)$4 % (uint_64)(int_64)86400)))
	$5 = ($0 + [96])
	$7 = *(($0 + [124]))
	$6 = *(($0 + [120]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)10003) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [8797])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10003)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $39($5, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [8797])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [9586])
	if ( ((int_64)*($9 + [8]) == (int_64)0) ){ goto $label$9 }
	$11 = (CASTING uint_32)(uint_64 $3)
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*($2 + [24]) = ($2 + [88])
	CALL eosio_assert($10, [8933])
	CALL $44($5, $9, (int_64)0, ($2 + [24]))
	$11 = (CASTING uint_32)(uint_64 $3)
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$8
	$6 = *(($0 + [124]))
	$1 = *(($0 + [120]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($6 + [-24])
	$7 = *($8)
	if ( ((int_64)*($7) == (int_64)10001) ){ goto $label$12 }
	$6 = $8
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [8797])
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10001)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $39($5, $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [8797])
	
.LABEL $label$10
	$1 = [0]
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [9617])
	$6 = *(($0 + [124]))
	$13 = *(($0 + [120]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$8 = ($6 + [-24])
	$14 = *($8)
	if ( ((int_64)*($14) == (int_64)10007) ){ goto $label$16 }
	$6 = $8
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$5), [8797])
	$1 = $14
	goto $label$14 
	
.LABEL $label$15
	$8 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10007)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	$1 = CALL $39($5, $8)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$5), [8797])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9652])
	if ( (int_64)(*($1 + [8]) == 0) ){ goto $label$19 }
	$8 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)-6030912129340538880, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$6 = ($0 + [176])
	$8 = CALL $37($6, $8)
	$3 = *($8 + [40])
	if ( ((int_64)$3 >= (int_64)1) ){ goto $label$20 }
	$15 = [1]
	goto $label$5 
	
.LABEL $label$20
	$15 = [0]
	goto $label$5 
	
.LABEL $label$19
	$15 = [3]
	goto $label$5 
	
.LABEL $label$18
	$15 = [3]
	goto $label$5 
	
.LABEL $label$7
	$15 = [4]
	goto $label$5 
	
.LABEL $label$6
	$15 = [4]
	
.LABEL $label$5
	
.LOOP $label$21:
	goto $label$30 
	
.LABEL $label$31
	$8 = CALL $37($6, $8)
	$3 = *($8 + [40])
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$24 }
	$15 = [0]
	goto $label$21 
	
.LABEL $label$30
	*($2 + [24]) = ((uint_64)((int_64)*(($7 + [8])) * (int_64)$3) / (uint_64)*(($1 + [8])))
	*($2) = ($2 + [24])
	CALL eosio_assert([1], [8933])
	CALL $45($6, $8, (int_64)0, $2)
	$15 = [1]
	goto $label$21 
	
.LABEL $label$29
	CALL eosio_assert([1], [9682])
	$8 = CALL db_next_i64(*($8 + [108]), ($2 + [24]))
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$23 }
	$15 = [3]
	goto $label$21 
	
.LABEL $label$28
	CALL eosio_assert($10, [8933])
	CALL $46($5, $9, (int_64)0, ($2 + [24]))
	CALL eosio_assert($12, [8933])
	CALL $47($5, $7, (int_64)0, ($2 + [24]))
	$15 = [4]
	goto $label$21 
	
.LABEL $label$27
	$3 = CALL current_time()
	*(($2 + [52])) = (int_64)0
	*(($2 + [68])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [40]) = [0]
	*($2 + [44 align=4]) = (int_64)0
	*($2 + [60 align=4]) = (int_64)0
	*($2 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [16]) = [1]
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = *($0)
	*($2 + [96]) = (int_64)-4420683448365088768
	CALL $48(($2 + [60]), $2, $0, ($2 + [96]), ($2 + [16]))
	$3 = *($0)
	*($2 + [44]) = (([57600] - $11) + (CASTING uint_32)(uint_64 $4))
	*($2 + [8]) = (int_64)0
	*($2) = ((int_64)$3 + (int_64)1120000000000000000)
	CALL $42(($2 + [96]), ($2 + [24]))
	$8 = *($2 + [96])
	CALL send_deferred($2, $3, $8, (*($2 + [100]) - $8), [1])
	$8 = *($2 + [96])
	if ( ($8 == 0) ){ goto $label$22 }
	$15 = [5]
	goto $label$21 
	
.LABEL $label$26
	*($2 + [100]) = $8
	CALL _ZdlPv($8)
	$15 = [6]
	goto $label$21 
	
.LABEL $label$25
	CALL $28(($2 + [24]))
	$global$0 = ($2 + [112])
	return 
	
.LABEL $label$24
	$15 = [1]
	goto $label$21 
	
.LABEL $label$23
	$15 = [2]
	goto $label$21 
	
.LABEL $label$22
	$15 = [6]
	goto $label$21 
	$15
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8365])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8470])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8403])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8470])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [240])
	$6 = $5
	$global$0 = $5
	if ( ((int_64)$1 == (int_64)6138663590285202592) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$2 }
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$2 }
	$9 = *($4)
	$8 = CALL $119([8522])
	if ( ((int_32)$8 != (int_32)( *($4 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$3 }
	if ( (CALL $112($4, [0], [-1], [8522], $8) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = *($4)
	$8 = CALL $119([8530])
	if ( ((int_32)$8 != (int_32)( *(($4 + [4])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$4 }
	if ( (CALL $112($4, [0], [-1], [8530], $8) == 0) ){ goto $label$2 }
	
.LABEL $label$4
	$10 = *($0 + [8])
	CALL $20($0, $3)
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$2 = $7
	$8 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$2 = $7
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $8 ){ goto $label$9 }
	$8 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($8, [8531])
	$9 = *($4)
	$8 = CALL $119([8556])
	if ( ((int_32)$8 != (int_32)( *(($4 + [4])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$28 }
	if ( (CALL $112($4, [0], [-1], [8556], $8) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	*($6 + [224]) = [0]
	*($6 + [216]) = (int_64)0
	*(($6 + [136])) = [0]
	*($6 + [128]) = (int_64)0
	$9 = CALL $119([8577])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$31 }
	*($6 + [128]) = ($9 << [1])
	$8 = (($6 + [128]) | [1])
	if ( $9 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$11 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($6 + [128]) = ($11 | [1])
	*($6 + [136]) = $8
	*($6 + [132]) = $9
	
.LABEL $label$30
	CALL memcpy($8, [8577], $9)
	
.LABEL $label$29
	*(($8 + $9)) = [0]
	CALL $21($0, ($6 + [216]), $4, ($6 + [128]))
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($6 + [136]))
	
.LABEL $label$32
	$9 = *($6 + [216])
	$8 = *($9)
	if ( ($8 & [1]) ){ goto $label$34 }
	$9 = uint_32($8 >> [1])
	goto $label$33 
	
.LABEL $label$34
	$9 = *($9 + [4])
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8579])
	$9 = *($6 + [216])
	$8 = *($9)
	$4 = CALL $119([8591])
	if ( ((int_32)$4 != (int_32)( *($9 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$35 }
	if ( (CALL $112($9, [0], [-1], [8591], $4) == 0) ){ goto $label$26 }
	
.LABEL $label$35
	$9 = *($6 + [216])
	$8 = *($9)
	$4 = CALL $119([8630])
	if ( ((int_32)$4 != (int_32)( *($9 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$22 }
	if ( CALL $112($9, [0], [-1], [8630], $4) ){ goto $label$22 }
	$11 = $5
	$8 = CALL transaction_size()
	$9 = ($5 - (($8 + [15]) & [-16]))
	$global$0 = $9
	$4 = CALL read_transaction($9, $8)
	CALL eosio_assert(((int_32)$8 == (int_32)$4), [8632])
	$2 = CALL current_time()
	*(($6 + [156])) = (int_64)0
	*(($6 + [172])) = (int_64)0
	*(($6 + [180])) = (int_64)0
	*($6 + [140]) = [0]
	*($6 + [144]) = [0]
	*($6 + [148 align=4]) = (int_64)0
	*($6 + [164 align=4]) = (int_64)0
	*($6 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [92]) = $9
	*($6 + [88]) = $9
	*($6 + [96]) = ($9 + $4)
	CALL $22(($6 + [88]), ($6 + [128]))
	CALL $24(CALL $23(CALL $23(($6 + [88]), ($6 + [152])), ($6 + [164])), ($6 + [176]))
	$4 = CALL $25(($6 + [88]), *($6 + [164]))
	CALL eosio_assert((((int_64)*($4 + [8]) == (int_64)-3617168760277827584) & ((int_64)*($4) == (int_64)$10)), [8656])
	*($6 + [72]) = [8352]
	*($6 + [76]) = CALL $119([8352])
	*($6 + [48]) = *($6 + [72])
	if ( ((int_64)$10 != (int_64)*(CALL $2(($6 + [80]), ($6 + [48])))) ){ goto $label$21 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = CALL $119([8562])
	if ( ($9 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [8699])
	goto $label$17 
	
.LABEL $label$27
	*($6 + [232]) = [8352]
	*($6 + [236]) = CALL $119([8352])
	*($6) = *($6 + [232])
	if ( ((int_64)$10 != (int_64)*(CALL $2(($6 + [128]), $6))) ){ goto $label$25 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = CALL $119([8562])
	if ( ($9 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [8699])
	goto $label$19 
	
.LABEL $label$26
	CALL require_auth($1)
	*($6 + [208]) = [8593]
	*($6 + [212]) = CALL $119([8593])
	*($6 + [24]) = *($6 + [208])
	if ( ((int_64)*(CALL $2(($6 + [128]), ($6 + [24]))) != (int_64)$1) ){ goto $label$24 }
	CALL eosio_assert([1], [8619])
	goto $label$23 
	
.LABEL $label$25
	CALL eosio_assert([0], [8565])
	goto $label$10 
	
.LABEL $label$24
	*($6 + [200]) = [8606]
	*($6 + [204]) = CALL $119([8606])
	*($6 + [16]) = *($6 + [200])
	CALL eosio_assert(((int_64)*(CALL $2(($6 + [88]), ($6 + [16]))) == (int_64)$1), [8619])
	
.LABEL $label$23
	$9 = *($6 + [216])
	if ( (*($9 + [24]) & [1]) ){ goto $label$37 }
	$9 = (($9 + [24]) + [1])
	goto $label$36 
	
.LABEL $label$37
	$9 = *(($9 + [32]))
	
.LABEL $label$36
	*($6 + [192]) = $9
	*($6 + [196]) = CALL $119($9)
	*($6 + [8]) = *($6 + [192])
	$9 = CALL $2(($6 + [128]), ($6 + [8]))
	$8 = *($6 + [216])
	if ( (*($8 + [36]) & [1]) ){ goto $label$39 }
	$8 = (($8 + [36]) + [1])
	goto $label$38 
	
.LABEL $label$39
	$8 = *(($8 + [44]))
	
.LABEL $label$38
	$2 = (CASTING int_64)(int_32 CALL $116($8))
	$8 = *($6 + [216])
	if ( (*($8 + [48]) & [1]) ){ goto $label$41 }
	$8 = (($8 + [48]) + [1])
	goto $label$40 
	
.LABEL $label$41
	$8 = *(($8 + [56]))
	
.LABEL $label$40
	$8 = CALL $116($8)
	CALL $26($0, *($9), $2, (CASTING int_64)(int_32 $8))
	
.LABEL $label$22
	$4 = *($6 + [216])
	if ( ($4 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$21
	CALL eosio_assert([0], [8565])
	goto $label$12 
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$16 }
	
.LABEL $label$19
	$2 = (int_64)0
	
.LOOP $label$42:
	$8 = *(($9 + [8561]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$43 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$43
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$42 }
	goto $label$11 
	
.LABEL $label$18
	if ( ($9 == 0) ){ goto $label$15 }
	
.LABEL $label$17
	$2 = (int_64)0
	
.LOOP $label$44:
	$8 = *(($9 + [8561]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$45
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$44 }
	goto $label$13 
	
.LABEL $label$16
	$2 = (int_64)0
	goto $label$11 
	
.LABEL $label$15
	$2 = (int_64)0
	goto $label$13 
	
.LABEL $label$14
	CALL $108(($6 + [128]))
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$7 == (int_64)$2), [8565])
	
.LABEL $label$12
	$7 = *(($3 + [8]))
	*((($6 + [56]) + [8])) = $7
	$2 = *($3)
	*((($6 + [32]) + [8])) = $7
	*($6 + [56]) = $2
	*($6 + [32]) = $2
	CALL $27($0, $1, ($6 + [32]))
	$9 = *($4 + [28])
	if ( ($9 == 0) ){ goto $label$46 }
	*(($4 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$46
	$9 = *($4 + [16])
	if ( ($9 == 0) ){ goto $label$47 }
	*(($4 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$47
	CALL $28(($6 + [128]))
	$11
	$4 = *($6 + [216])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$1 == (int_64)$2), [8565])
	
.LABEL $label$10
	CALL $29($0, (int_64)20001, *($3))
	
.LABEL $label$2
	$global$0 = ($6 + [240])
	return 
	
.LABEL $label$1
	$8 = *($6 + [220])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$49 }
	
.LOOP $label$50:
	$9 = ($8 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$51
	$8 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$50 }
	$9 = *($6 + [216])
	goto $label$48 
	
.LABEL $label$49
	$9 = $4
	
.LABEL $label$48
	*($6 + [220]) = $4
	CALL _ZdlPv($9)
	$global$0 = ($6 + [240])
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert([1], [8192])
	
.LABEL $label$1
	*($3 + [176]) = [8254]
	*($3 + [180]) = CALL $119([8254])
	*($3 + [80]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($3 + [160]) = [8352]
	*($3 + [164]) = CALL $119([8352])
	*($3 + [72]) = *($3 + [160])
	CALL $2(($3 + [168]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)-8173745138715779792) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3) = *($3 + [152])
	CALL $4($0, $1, $3)
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $115([0])
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)-2139406296279941121) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)-4417247484950609921) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-7811085199540748288) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4420683448365088768) ){ goto $label$7 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [2]
	*($3 + [40]) = *($3 + [112])
	CALL $6($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 > (int_64)5606355718207285247) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-2139406296279941120) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [24]) = *($3 + [128])
	CALL $8($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$7 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [16]) = *($3 + [136])
	CALL $4($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)5606355718207285248) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [8]) = *($3 + [144])
	CALL $10($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [92]) = [0]
	*($3 + [88]) = [5]
	*($3 + [64]) = *($3 + [88])
	CALL $10($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [48]) = *($3 + [104])
	CALL $8($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [32]) = *($3 + [120])
	CALL $14($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [100]) = [0]
	*($3 + [96]) = [8]
	*($3 + [56]) = *($3 + [96])
	CALL $8($1, $1, ($3 + [56]))
	
.LABEL $label$7
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	*($4 + [256]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8871])
	CALL memcpy(($4 + [256]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8871])
	CALL memcpy((($4 + [256]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $17(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	CALL $19($8)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [176])
	$5 = *(($0 + [204]))
	$4 = *(($0 + [200]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [184])), (int_64)-6030912129340538880, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $37($3, $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9410])
	CALL eosio_assert(((int_64)*($7 + [88]) > (int_64)0), [9759])
	*(($5 = ($2 + [88]))) = *(($7 + [96]))
	*($2 + [80]) = *($7 + [88])
	$8 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($2 + [76]) = $8
	CALL eosio_assert(((uint_64)(int_64))(((int_64)$8 & (int_64)4294967295) - *($7 + [80])) > (uint_64)(int_64)86399), [9782])
	*($2 + [96]) = ($2 + [76])
	CALL eosio_assert($6, [8933])
	CALL $51($3, $7, (int_64)0, ($2 + [96]))
	*($2 + [56]) = [8352]
	*($2 + [60]) = CALL $119([8352])
	*($2) = *($2 + [56])
	$3 = CALL $2(($2 + [64]), $2)
	*(($2 + [48])) = [0]
	*(($2 + [32])) = *($5)
	*($2 + [16]) = $1
	*($2 + [40]) = (int_64)0
	$1 = *($0)
	*($2 + [8]) = $1
	*($2 + [24]) = *($2 + [80])
	$5 = ($2 + [40])
	$6 = CALL $119([9830])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	$7 = ($2 + [24])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*(($2 + [40])) = ($6 << [1])
	$4 = ($5 + [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*(($2 + [48])) = $4
	*(($2 + [44])) = $6
	*($2 + [40]) = ($0 | [1])
	
.LABEL $label$7
	CALL memcpy($4, [9830], $6)
	
.LABEL $label$6
	*(($4 + $6)) = [0]
	$8 = *($3)
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*(($2 + [120])) = *(($7 + [8]))
	*(($4 = (($2 + [96]) + [40]))) = *(($5 + [8]))
	$1 = *($5)
	*(($2 + [40])) = (int_64)0
	*($2 + [144]) = $6
	$6 = ($6 + [16])
	*($2 + [152]) = $6
	*($2 + [148]) = $6
	*($2 + [96]) = *($2 + [8])
	*($2 + [104]) = *((($2 + [8]) + [8]))
	*($2 + [112]) = *($7)
	*($2 + [128]) = $1
	*((($2 + [8]) + [40])) = [0]
	CALL $50($8, (int_64)-3617168760277827584, ($2 + [144]), ($2 + [96]))
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$9
	$6 = *($2 + [144])
	if ( ($6 == 0) ){ goto $label$10 }
	*($2 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((*(($2 + [40])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$11
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$5
	CALL $108($5)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8871])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8871])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8871])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $99(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [192])
	$global$0 = $4
	$6 = ($3 + [8])
	*(($5 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$5 = *($5)
	*(($7 = (($4 + [176]) + [8]))) = $5
	$2 = *($4 + [128])
	*($0 + [16]) = $2
	*(($0 + [24])) = $5
	*($4 + [176]) = $2
	*($4 + [112]) = [8254]
	*($4 + [116]) = CALL $119([8254])
	*($4 + [24]) = *($4 + [112])
	$5 = CALL $2(($4 + [120]), ($4 + [24]))
	*($4 + [96]) = [8254]
	*($4 + [100]) = CALL $119([8254])
	*($4 + [16]) = *($4 + [96])
	$8 = CALL $2(($4 + [104]), ($4 + [16]))
	*(($9 = (($4 + [80]) + [8]))) = *($6)
	*($4 + [80]) = *($3)
	$2 = *($8)
	$10 = *($5)
	$9 = *($9)
	*(($8 = (($4 + [144]) + [8]))) = $9
	*(($5 = (($4 + [160]) + [8]))) = $9
	$11 = *($4 + [80])
	*($4 + [160]) = $11
	*($4 + [144]) = $11
	*($0 + [32]) = $10
	*(($0 + [40])) = $2
	$9 = *($5)
	*($7) = $9
	$2 = *($4 + [160])
	*(($0 + [48])) = $2
	*(($0 + [56])) = $9
	*($4 + [176]) = $2
	*($4 + [64]) = [8352]
	*($4 + [68]) = CALL $119([8352])
	*($4 + [8]) = *($4 + [64])
	$9 = CALL $2(($4 + [72]), ($4 + [8]))
	*($4 + [48]) = [8352]
	*($4 + [52]) = CALL $119([8352])
	*($4) = *($4 + [48])
	$12 = CALL $2(($4 + [56]), $4)
	*(($13 = (($4 + [32]) + [8]))) = *($6)
	*($4 + [32]) = *($3)
	$2 = *($12)
	$10 = *($9)
	$3 = *($13)
	*($8) = $3
	*($5) = $3
	$11 = *($4 + [32])
	*($4 + [160]) = $11
	*($4 + [144]) = $11
	*($0 + [64]) = $10
	*(($0 + [72])) = $2
	$3 = *($5)
	*($7) = $3
	$2 = *($4 + [160])
	*(($0 + [80])) = $2
	*(($0 + [88])) = $3
	*($4 + [176]) = $2
	*(($0 + [104])) = $1
	*($0 + [96]) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = (int_64)0
	*(($0 + [128])) = [0]
	*($0 + [136]) = $1
	*(($0 + [144])) = $1
	*(($0 + [152])) = (int_64)-1
	*(($0 + [160])) = (int_64)0
	*(($0 + [168])) = [0]
	*($0 + [176]) = $1
	*(($0 + [184])) = $1
	*(($0 + [192])) = (int_64)-1
	*(($0 + [200])) = (int_64)0
	*(($0 + [208])) = [0]
	$global$0 = ($4 + [192])
	return $0
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $17(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $125($2)
	
.LABEL $label$6
	CALL $19($8)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [136])
	$3 = CALL db_lowerbound_i64(*($0 + [136]), *(($0 + [144])), (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	*($1 + [20]) = CALL $52($2, $3)
	*($1 + [16]) = $2
	$3 = ($0 + [176])
	
.LOOP $label$3:
	$4 = *($0)
	*($1 + [8]) = ($1 + [16])
	CALL $53(($1 + [24]), $3, $4, ($1 + [8]))
	CALL eosio_assert(((int_32)*($1 + [20]) != (int_32)[0]), [9682])
	$2 = CALL db_next_i64(*(*($1 + [20]) + [76]), ($1 + [24]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	*($1 + [20]) = CALL $52(*($1 + [16]), $2)
	goto $label$3 
	
.LABEL $label$2
	*($1 + [20]) = [0]
	$global$0 = ($1 + [32])
	return 
	
.LABEL $label$1
	*($1 + [20]) = [0]
	*($1 + [16]) = $2
	$global$0 = ($1 + [32])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [176])
	$5 = *(($0 + [204]))
	$4 = *(($0 + [200]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [184])), (int_64)-6030912129340538880, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $37($3, $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [8797])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9410])
	CALL eosio_assert(((int_64)*($7 + [56]) > (int_64)0), [9712])
	*(($5 = ($2 + [88]))) = *(($7 + [64]))
	*($2 + [80]) = *($7 + [56])
	CALL eosio_assert($6, [8933])
	CALL $49($3, $7, (int_64)0, ($2 + [96]))
	*($2 + [64]) = [8254]
	*($2 + [68]) = CALL $119([8254])
	*($2 + [8]) = *($2 + [64])
	$3 = CALL $2(($2 + [72]), ($2 + [8]))
	*(($2 + [56])) = [0]
	*(($2 + [40])) = *($5)
	*($2 + [24]) = $1
	*($2 + [48]) = (int_64)0
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [32]) = *($2 + [80])
	$5 = ($2 + [48])
	$6 = CALL $119([9721])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	$7 = ($2 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*(($2 + [48])) = ($6 << [1])
	$4 = ($5 + [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*(($2 + [56])) = $4
	*(($2 + [52])) = $6
	*($2 + [48]) = ($0 | [1])
	
.LABEL $label$7
	CALL memcpy($4, [9721], $6)
	
.LABEL $label$6
	*(($4 + $6)) = [0]
	$8 = *($3)
	*(($6 = CALL _Znwj([16]))) = $1
	*($6 + [8]) = (int_64)3617214756542218240
	*(($2 + [120])) = *(($7 + [8]))
	*(($4 = (($2 + [96]) + [40]))) = *(($5 + [8]))
	$1 = *($5)
	*(($2 + [48])) = (int_64)0
	*($2 + [144]) = $6
	$6 = ($6 + [16])
	*($2 + [152]) = $6
	*($2 + [148]) = $6
	*($2 + [96]) = *($2 + [16])
	*($2 + [104]) = *((($2 + [16]) + [8]))
	*($2 + [112]) = *($7)
	*($2 + [128]) = $1
	*((($2 + [16]) + [40])) = [0]
	CALL $50($8, (int_64)-3617168760277827584, ($2 + [144]), ($2 + [96]))
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$9
	$6 = *($2 + [144])
	if ( ($6 == 0) ){ goto $label$10 }
	*($2 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$11
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$5
	CALL $108($5)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)($1 <= (int_64)10000), [9569])
	CALL $43($0, $1, $2)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8927])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8927])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $109(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $109(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [200]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [204])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [200]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [160]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [164])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [160]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [120]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [124])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [120]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = ((float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.005) + (float_64)(CASTING float_64)(uint_64 *($1 + [8])))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($1 + [8]) = $6
	$6 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [48]))), [9296])
	$6 = ((int_64)*($1 + [40]) + (int_64)*($3))
	*($1 + [40]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9339])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [9358])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $50 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $70($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $71(($4 + [72]), ($4 + [64]))
	CALL $72(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $113(($4 + [8]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	CALL eosio_assert([1], [9478])
	*($1 + [88]) = (int_64)0
	CALL eosio_assert([1], [9526])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [9548])
	*($1 + [80]) = *(*($3))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8848])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	CALL $97(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*(($5 = CALL _Znwj([120])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $1
	CALL $96($3, $5)
	*($4 + [136]) = (($4 + [16]) + [104])
	*($4 + [132]) = ($4 + [16])
	*($4 + [128]) = ($4 + [16])
	CALL $66(($4 + [128]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-6030912129340538880, $2, $6, ($4 + [16]), [104])
	*($5 + [108]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [128]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [128]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $67(($1 + [24]), ($4 + [128]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $85($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = *($1)
	CALL $69($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9065])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $66(($4 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	$5 = ((float_64)((float_64)(CASTING float_64)(uint_64 *(*($3))) * (float_64)(float_64)0.005) + (float_64)(CASTING float_64)(uint_64 *($1 + [8])))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($1 + [8]) = $6
	$6 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $114 ()
{
	return [9880]
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $86($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $118(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [96])
	$6 = *(($0 + [124]))
	$5 = *(($0 + [120]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8797])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [104])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $39($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8797])
	
.LABEL $label$2
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [8933])
	CALL $61($4, $8, (int_64)0, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $62($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*(($5 = CALL _Znwj([120])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $1
	CALL $65($3, $5)
	*($4 + [136]) = (($4 + [16]) + [104])
	*($4 + [132]) = ($4 + [16])
	*($4 + [128]) = ($4 + [16])
	CALL $66(($4 + [128]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-6030912129340538880, $2, $6, ($4 + [16]), [104])
	*($5 + [108]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [128]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [128]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $67(($1 + [24]), ($4 + [128]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($2 + [1])
	$8 = ($7 & [1])
	$7 = *($2)
	$9 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	$10 = [0]
	$11 = ($7 & [1])
	$7 = *($3)
	$7 = ( *($3 + [4]) ? uint_32($7 >> [1]) : $11 )
	if ( ($7 == 0) ){ goto $label$2 }
	$12 = [0]
	if ( ((int_32)$9 < (int_32)$7) ){ goto $label$1 }
	$13 = ( *($2 + [8]) ? $6 : $8 )
	$14 = ($13 + $9)
	$15 = ( *($3 + [8]) ? $5 : $11 )
	$11 = *($15)
	$10 = $9
	$8 = $13
	
.LOOP $label$3:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL $117($8, $11, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL $118($10, $15, $7) == 0) ){ goto $label$4 }
	$8 = ($10 + [1])
	$10 = ($14 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$1 }
	$10 = ($10 - $13)
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	$16 = ($1 + [8])
	$13 = ($1 + [4])
	$12 = [0]
	
.LOOP $label$5:
	$8 = CALL $110($4, $2, $12, ($10 - $12), $2)
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*($16)) ){ goto $label$7 }
	*($7) = *($4)
	$7 = ($4 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($13) = (*($13) + [12])
	*($4) = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	CALL $54($1, $8)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$6
	$14 = ($7 & [1])
	$7 = *($3)
	$7 = ( *(($3 + [4])) ? uint_32($7 >> [1]) : $14 )
	$12 = ($7 + $10)
	$8 = ($7 & [1])
	$7 = *($2)
	$11 = ( *(($2 + [4])) ? uint_32($7 >> [1]) : $8 )
	if ( ($11 <= $12) ){ goto $label$1 }
	$10 = $12
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = ($17 + $12)
	$17 = ( *(($2 + [8])) ? $6 : $8 )
	$15 = ($17 + $11)
	$10 = ($15 - $8)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$14 = ( *(($3 + [8])) ? $5 : $14 )
	$11 = *($14)
	
.LOOP $label$9:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL $117($8, $11, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL $118($10, $14, $7) == 0) ){ goto $label$10 }
	$8 = ($10 + [1])
	$10 = ($15 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$1 }
	$10 = ($10 - $17)
	
.LABEL $label$8
	if ( ((int_32)$10 != (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$1
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	$7 = CALL $110($4, $2, $12, [-1], $2)
	$10 = *($1 + [4])
	if ( ((uint_32)$10 >= (uint_32)*($1 + [8])) ){ goto $label$12 }
	*($10) = *($4)
	*(($10 + [8])) = *(($4 + [8]))
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*(($7 = ($1 + [4]))) = (*($7) + [12])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$12
	CALL $54($1, $7)
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$11
	$global$0 = ($4 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [8])
	*($2 + [32]) = [8254]
	*($2 + [36]) = CALL $119([8254])
	*($2 + [8]) = *($2 + [32])
	if ( ((int_64)$3 != (int_64)*(CALL $2(($2 + [40]), ($2 + [8])))) ){ goto $label$2 }
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$0 = CALL $119([8674])
	if ( ($0 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8699])
	goto $label$4 
	
.LABEL $label$5
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($0 + [8673]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$6 }
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [16]) = [8352]
	*($2 + [20]) = CALL $119([8352])
	*($2) = *($2 + [16])
	if ( ((int_64)$3 != (int_64)*(CALL $2(($2 + [24]), $2))) ){ goto $label$12 }
	$3 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$0 = CALL $119([8562])
	if ( ($0 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [8699])
	goto $label$10 
	
.LABEL $label$12
	CALL eosio_assert([0], [8678])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$11
	if ( ($0 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = (int_64)0
	
.LOOP $label$13:
	$6 = *(($0 + [8561]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$13 }
	goto $label$8 
	
.LABEL $label$9
	$5 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$3 == (int_64)$5), [8678])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL eosio_assert([1], [8678])
	$global$0 = ($2 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $78($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8871])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $77(CALL $79($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8871])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8871])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8871])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [9376])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8871])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [9376])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $113(($0 + [16]))
	
.LABEL $label$1
	CALL $113(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $76($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8871])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $77($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $27 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	$4 = ($0 + [176])
	$6 = *(($0 + [204]))
	$5 = *(($0 + [200]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$4), [8797])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [184])), (int_64)-6030912129340538880, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $37($4, $7)
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$4), [8797])
	goto $label$1 
	
.LABEL $label$5
	$1 = *($0)
	*($3 + [8]) = ($3 + [24])
	CALL $55(($3 + [16]), $4, $1, ($3 + [8]))
	$8 = *($3 + [20])
	
.LABEL $label$1
	*($3 + [24]) = $2
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8933])
	CALL $59($4, $8, (int_64)0, ($3 + [24]))
	$4 = ($0 + [96])
	$6 = *(($0 + [124]))
	$8 = *(($0 + [120]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)10007) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [8797])
	$9 = $5
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*($4), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10007)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $39($4, $7)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$4), [8797])
	
.LABEL $label$6
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [9380])
	*($3 + [24]) = $2
	CALL eosio_assert($7, [8933])
	CALL $60($4, $9, (int_64)0, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [96]) = $3
	*($4 + [104]) = $2
	*($4 + [112]) = $1
	$5 = ($0 + [176])
	$7 = *(($0 + [204]))
	$6 = *(($0 + [200]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)$5), [8797])
	goto $label$1 
	
.LABEL $label$2
	$8 = CALL db_find_i64(*($5), *(($0 + [184])), (int_64)-6030912129340538880, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $37($5, $8)
	CALL eosio_assert(((int_32)*($9 + [104]) == (int_32)$5), [8797])
	goto $label$1 
	
.LABEL $label$5
	$2 = *($0)
	*($4 + [160]) = ($4 + [112])
	CALL $55(($4 + [72]), $5, $2, ($4 + [160]))
	$9 = *($4 + [76])
	
.LABEL $label$1
	*($4 + [92]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = CALL $119([8562])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8699])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = (int_64)0
	
.LOOP $label$10:
	$7 = *(($8 + [8561]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$11
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$2 = (int_64)0
	
.LABEL $label$6
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9227])
	$2 = (uint_64)*($4 + [80]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$16 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	
.LABEL $label$12
	CALL eosio_assert($7, [9276])
	if ( ((int_64)*($9 + [88]) != (int_64)0) ){ goto $label$17 }
	$8 = CALL $119([8562])
	if ( ($8 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [8699])
	goto $label$20 
	
.LABEL $label$21
	if ( ($8 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = (int_64)0
	
.LOOP $label$22:
	$7 = *(($8 + [8561]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$23
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$22 }
	goto $label$18 
	
.LABEL $label$19
	$3 = (int_64)0
	
.LABEL $label$18
	CALL eosio_assert([1], [9227])
	$2 = ((int_64)$3 & (int_64)72057594037927935)
	$10 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$2 = $3
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$2 = $3
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$28 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$7 = [0]
	
.LABEL $label$24
	CALL eosio_assert($7, [9276])
	*(($4 + [80])) = $10
	*($4 + [72]) = (int_64)3000000
	CALL $29($0, (int_64)20001, (int_64)-3000000)
	
.LABEL $label$17
	$11 = [0]
	*($4 + [116]) = ($4 + [96])
	*($4 + [112]) = ($4 + [104])
	*($4 + [120]) = ($4 + [72])
	*($4 + [124]) = ($4 + [92])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8933])
	CALL $56($5, $9, (int_64)0, ($4 + [112]))
	$12 = ($0 + [96])
	$7 = *(($0 + [124]))
	$6 = *(($0 + [120]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$30 }
	
.LOOP $label$32:
	$8 = ($7 + [-24])
	$5 = *($8)
	if ( ((int_64)*($5) == (int_64)10001) ){ goto $label$31 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$30 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$12), [8797])
	$11 = $5
	goto $label$29 
	
.LABEL $label$30
	$8 = CALL db_find_i64(*($12), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10001)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	$11 = CALL $39($12, $8)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$12), [8797])
	
.LABEL $label$29
	$13 = [0]
	$14 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($14, [9124])
	$7 = *(($0 + [124]))
	$6 = *(($0 + [120]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$34 }
	
.LOOP $label$36:
	$8 = ($7 + [-24])
	$5 = *($8)
	if ( ((int_64)*($5) == (int_64)10002) ){ goto $label$35 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$12), [8797])
	$13 = $5
	goto $label$33 
	
.LABEL $label$34
	$8 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)7235159550150574080, (int_64)10002)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	$13 = CALL $39($12, $8)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$12), [8797])
	
.LABEL $label$33
	$8 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($8, [9159])
	*($4 + [112]) = ($4 + [104])
	CALL eosio_assert($14, [8933])
	CALL $57($12, $11, (int_64)0, ($4 + [112]))
	*($4 + [112]) = ($4 + [104])
	CALL eosio_assert($8, [8933])
	CALL $58($12, $13, (int_64)0, ($4 + [112]))
	$2 = (int_64)10
	$3 = ((int_64)*($9 + [8]) / (int_64)10000)
	if ( ((uint_64)$3 > (uint_64)(int_64)4999999) ){ goto $label$39 }
	$2 = (int_64)9
	if ( ((uint_64)$3 > (uint_64)(int_64)999999) ){ goto $label$39 }
	$2 = (int_64)8
	if ( ((uint_64)$3 > (uint_64)(int_64)499999) ){ goto $label$39 }
	$2 = (int_64)7
	if ( ((uint_64)$3 > (uint_64)(int_64)99999) ){ goto $label$39 }
	$2 = (int_64)6
	if ( ((uint_64)$3 > (uint_64)(int_64)49999) ){ goto $label$39 }
	$2 = (int_64)5
	if ( ((uint_64)$3 > (uint_64)(int_64)9999) ){ goto $label$39 }
	$2 = (int_64)4
	if ( ((uint_64)$3 > (uint_64)(int_64)4999) ){ goto $label$39 }
	$2 = (int_64)3
	if ( ((uint_64)$3 > (uint_64)(int_64)999) ){ goto $label$39 }
	$2 = (int_64)2
	if ( ((uint_64)$3 > (uint_64)(int_64)499) ){ goto $label$39 }
	$2 = (int_64)1
	if ( (uint_64)($3 <= (int_64)100) ){ goto $label$38 }
	
.LABEL $label$39
	$10 = ((int_64)*($4 + [104]) * (int_64)$2)
	$15 = ((uint_64)$10 / (uint_64)(int_64)10000)
	$8 = CALL $119([8674])
	if ( ($8 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [8699])
	goto $label$42 
	
.LABEL $label$43
	if ( ($8 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$3 = (int_64)0
	
.LOOP $label$44:
	$7 = *(($8 + [8673]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$45
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$44 }
	goto $label$40 
	
.LABEL $label$41
	$3 = (int_64)0
	
.LABEL $label$40
	CALL eosio_assert([1], [9227])
	$2 = ((int_64)$3 & (int_64)72057594037927935)
	$16 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$8 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$2 = $3
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$2 = $3
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$50 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$7 = [0]
	
.LABEL $label$46
	CALL eosio_assert($7, [9276])
	if ( (uint_64)($10 <= (int_64)10000) ){ goto $label$38 }
	*($4 + [56]) = [8254]
	*($4 + [60]) = CALL $119([8254])
	*($4) = *($4 + [56])
	$9 = CALL $2(($4 + [64]), $4)
	*(($4 + [32])) = $16
	*(($4 + [48])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = $15
	*($4 + [40]) = (int_64)0
	$2 = *($0)
	*($4 + [8]) = $2
	$7 = ($4 + [40])
	$8 = CALL $119([9194])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$53 }
	*(($4 + [40])) = ($8 << [1])
	$6 = ($7 + [1])
	if ( $8 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$0 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($0)
	*(($4 + [48])) = $6
	*(($4 + [44])) = $8
	*($4 + [40]) = ($0 | [1])
	
.LABEL $label$52
	CALL memcpy($6, [9194], $8)
	
.LABEL $label$51
	*(($6 + $8)) = [0]
	$3 = *($9)
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = (int_64)3617214756542218240
	*((($4 + [112]) + [24])) = *((($4 + [8]) + [24]))
	*(($6 = (($4 + [112]) + [40]))) = *(($7 + [8]))
	$2 = *($7)
	*(($4 + [40])) = (int_64)0
	*($4 + [160]) = $8
	$8 = ($8 + [16])
	*($4 + [168]) = $8
	*($4 + [164]) = $8
	*($4 + [112]) = *($4 + [8])
	*($4 + [120]) = *((($4 + [8]) + [8]))
	*($4 + [128]) = *($4 + [24])
	*($4 + [144]) = $2
	*((($4 + [8]) + [40])) = [0]
	CALL $50($3, (int_64)-3617168760277827584, ($4 + [160]), ($4 + [112]))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$54
	$8 = *($4 + [160])
	if ( ($8 == 0) ){ goto $label$55 }
	*($4 + [164]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$55
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$38
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$37
	CALL $108($7)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = *(*($0))
	$3 = CALL $119([8674])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8699])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8673]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9227])
	$6 = ((int_64)$4 & (int_64)72057594037927935)
	$7 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $4
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9276])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [16]))), [9296])
	$6 = ((int_64)*($1 + [8]) + (int_64)$2)
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9339])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9358])
	$2 = *(*($0 + [4]))
	$3 = CALL $119([8674])
	if ( ($3 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8699])
	goto $label$14 
	
.LABEL $label$15
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = (int_64)0
	
.LOOP $label$16:
	$5 = *(($3 + [8673]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$17
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$4 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9227])
	$6 = ((int_64)$4 & (int_64)72057594037927935)
	$7 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $4
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [9276])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($1 + [32]))), [9296])
	$6 = ((int_64)*($1 + [24]) + (int_64)$2)
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9339])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9358])
	$3 = *($0 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [96]))), [9296])
	$6 = ((int_64)*($1 + [88]) + (int_64)*($3))
	*($1 + [88]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9339])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [9358])
	*($1 + [72]) = *(*($0 + [12]))
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8871])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $108 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	*($1) = *(*($0))
	$0 = CALL $119([8674])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8699])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($0 + [8673]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $2
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [9276])
	*(($1 + [16])) = $5
	$2 = (int_64)0
	*($1 + [8]) = (int_64)0
	$0 = CALL $119([8674])
	if ( ($0 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8699])
	goto $label$13 
	
.LABEL $label$14
	if ( ($0 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$3 = *(($0 + [8673]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$15 }
	
.LABEL $label$12
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$4 = $2
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$21 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$3 = [0]
	
.LABEL $label$17
	CALL eosio_assert($3, [9276])
	*(($1 + [32])) = $5
	$2 = (int_64)0
	*($1 + [24]) = (int_64)0
	$0 = CALL $119([8562])
	if ( ($0 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [8699])
	goto $label$23 
	
.LABEL $label$24
	if ( ($0 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$2 = (int_64)0
	
.LOOP $label$25:
	$3 = *(($0 + [8561]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$26
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$25 }
	
.LABEL $label$22
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$4 = $2
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$31 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$3 = [0]
	
.LABEL $label$27
	CALL eosio_assert($3, [9276])
	*(($1 + [48])) = $5
	$2 = (int_64)0
	*($1 + [40]) = (int_64)0
	$0 = CALL $119([8674])
	if ( ($0 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [8699])
	goto $label$33 
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$2 = (int_64)0
	
.LOOP $label$35:
	$3 = *(($0 + [8673]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$36
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$35 }
	
.LABEL $label$32
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$4 = $2
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$41 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$3 = [0]
	
.LABEL $label$37
	CALL eosio_assert($3, [9276])
	*(($1 + [64])) = $5
	$2 = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	$0 = CALL $119([8562])
	if ( ($0 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [8699])
	goto $label$43 
	
.LABEL $label$44
	if ( ($0 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$2 = (int_64)0
	
.LOOP $label$45:
	$3 = *(($0 + [8561]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [8744])
	
.LABEL $label$46
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$45 }
	
.LABEL $label$42
	CALL eosio_assert([1], [9227])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$4 = $2
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$51 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$3 = [0]
	
.LABEL $label$47
	CALL eosio_assert($3, [9276])
	*(($1 + [96])) = $5
	*($1 + [88]) = (int_64)0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9014])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9065])
	CALL eosio_assert([1], [8927])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $63($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $122($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9876])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $122($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $120(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9876])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $120(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8927])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8927])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8927])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8927])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8927])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10007
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10006
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10005
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10004
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10003
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10002
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)10001
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [8927])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8927])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $70($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8927])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8927])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $75(CALL $74($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8927])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8927])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8927])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8927])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8927])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8927])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $73(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $70($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8871])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8927])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8927])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8927])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8848])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8871])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8871])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $87($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8848])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $0
	CALL $68(($3 + [32]), $5)
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $80($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8871])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8871])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $83($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $84($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $81($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8876])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $82($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}