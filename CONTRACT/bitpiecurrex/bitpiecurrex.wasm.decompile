(data (i32.const 8244) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00-+   0X0x\00Assertion failed: %s (%s: %s: %d)\n\00unexpected error in fixed_bytes constructor\00invalid token\00")
(data (i32.const 8384) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8656) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8736) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 8832) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 10636) "(null)\00Invalid hex character\00")
(data (i32.const 10672) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 11136) "0123456789ABCDEF")
(data (i32.const 11152) "-0X+0X 0X-0x+0x 0x\00invalid sha256\00")
(data (i32.const 11186) "inf\00")
(data (i32.const 11190) "INF\00")
(data (i32.const 11194) "nan\00")
(data (i32.const 11198) "NAN\00carry == 0\00")
(data (i32.const 11213) ".\00utils.hpp\00")
(data (i32.const 11232) "\05\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\05\00\00\004 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\d22\00\00")
(data (i32.const 11380) "\e0+\00\00")
(data (i32.const 11384) "\01\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\10\'\00\00\00\00\00\00\a0\86\01\00\00\00\00\00@B\0f\00\00\00\00\00\80\96\98\00\00\00\00\00\00\e1\f5\05\00\00\00\00\00\ca\9a;\00\00\00\00\00\e4\0bT\02\00\00\00\00\e8vH\17\00\00\00\00\10\a5\d4\e8\00\00\00\00\a0rN\18\t\00\00\00@z\10\f3Z\00\00\00\80\c6\a4~\8d\03\00\00\00\c1o\f2\86#\00\00\00\8a]xEc\01\00\00d\a7\b3\b6\e0\0d\00\00\e8\89\04#\c7\8a")
(data (i32.const 11552) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11808) "DecodeBase58\00")
(data (i32.const 11821) "read_transaction failed\00")
(data (i32.const 11845) "transfer\00")
(data (i32.const 11854) "only 1 request permitted at a time\00")
(data (i32.const 11889) "already has exchange address\00")
(data (i32.const 11918) "user exists\00")
(data (i32.const 11930) "user not found\00")
(data (i32.const 11945) "sub_account exceeded max value\00")
(data (i32.const 11976) "bot not authorized\00")
(data (i32.const 11995) "user not active\00")
(data (i32.const 12011) "not found new address request\00")
(data (i32.const 12041) "user mismatch\00")
(data (i32.const 12055) "symbol mismatch\00")
(data (i32.const 12071) "invalid base58 bitcoin address\00")
(data (i32.const 12102) "sub account mismatch\00")
(data (i32.const 12123) "not found account symbol\00")
(data (i32.const 12148) "not found sell order by id\00")
(data (i32.const 12175) "to_address mismatch\00")
(data (i32.const 12195) "amount mismatch\00")
(data (i32.const 12211) "transfer_tx mismatch\00")
(data (i32.const 12232) "found in sold order by id\00")
(data (i32.const 12258) "active\00")
(data (i32.const 12265) "minimal transfer amount is \00")
(data (i32.const 12293) "count must be positive\00")
(data (i32.const 12316) "invalid table name\00")
(data (i32.const 12335) "%d rows removed\00")
(data (i32.const 12351) "string is too long to be a valid name\00")
(data (i32.const 12389) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 12456) "character is not in allowed character set for names\00")
(data (i32.const 12508) "string is too long to be a valid symbol_code\00")
(data (i32.const 12553) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 12606) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 12657) "error reading iterator\00")
(data (i32.const 12680) "object passed to modify is not in multi_index\00")
(data (i32.const 12726) "cannot modify objects in table of another contract\00")
(data (i32.const 12777) "write\00")
(data (i32.const 12783) "cannot create objects in table of another contract\00")
(data (i32.const 12834) "invalid symbol\00")
(data (i32.const 12849) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 12903) "cannot decrement iterator at beginning of table\00")
(data (i32.const 12951) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 13010) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 13043) "invalid memo\00")
(data (i32.const 13056) "no user field in memo\00")
(data (i32.const 13078) "sub_account value overflow\00")
(data (i32.const 13105) "error when parsing nonce data\00")
(data (i32.const 13135) "no address\00")
(data (i32.const 13146) "not a valid address\00")
(data (i32.const 13166) "too many data fields\00")
(data (i32.const 13187) "invalid symbol name\00")
(data (i32.const 13207) "insufficient space in buffer\00")
(data (i32.const 13236) "log\00")
(data (i32.const 13240) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 13284) "read\00")
(data (i32.const 13289) "cannot pass end iterator to erase\00")
(data (i32.const 13323) "cannot increment end iterator\00")
(data (i32.const 13353) "object passed to erase is not in multi_index\00")
(data (i32.const 13398) "cannot erase objects in table of another contract\00")
(data (i32.const 13448) "attempt to remove object that was not in multi_index\00")
(data (i32.const 13501) "get\00")
(data (i32.const 0) "\c84\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "sha256" (func $fimport$23 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$24 (result i32)))
(import "env" "read_transaction" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$26 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$27 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$28 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$29 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$30 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$31 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$32 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$33 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$34 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$35 (param i32 i32 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$36 (result i32)))
(import "env" "read_action_data" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$38 (result i64)))
(import "env" "require_auth" (func $fimport$39 (param i64)))
(import "env" "db_find_i64" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$41 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$42 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$43 (param i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$44 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$45 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$46 (param i32 i64 i32)))
(import "env" "db_idx256_store" (func $fimport$47 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$48 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$49 (param i32)))
(import "env" "send_inline" (func $fimport$50 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$52 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$53 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$54 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$55 (param i64 i64 i64) (result i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$56 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$57 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$58 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$59 (result i64)))
(import "env" "get_active_producers" (func $fimport$60 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$61 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$62 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$63 (param i32)))
(export "apply" (func $80))
(table $0 20 20 anyfunc)
(elem (i32.const 1) $32 $34 $61 $62 $63 $82 $84 $86 $88 $90 $92 $94 $96 $98 $100 $102 $104 $106 $108)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 13505))
(global $global$2 i32 (i32.const 13505))


void .FUNC $220 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$1
	*(($5 = CALL $7([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, $2, (int_64)7235159550150574080, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159550150574080
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)7235159550150574080
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $221(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $9($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [48])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [48])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
	$9 = *(($1 + [104]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4241658174089854976, ($2 + [8]), (int_64))((int_64)0 - *($1))
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $135($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*($3) = $1
	CALL $219($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $220($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_64 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4520708925519560704, (int_64)4520708925519560704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $186($1, $4)
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$1
	*($2 + [8]) = ((int_64)*(( $3 ? ($2 + [8]) : $3 )) + (int_64)1)
	CALL $187($1, ($2 + [8]), *($0))
	$5 = *($2 + [8])
	$global$0 = ($2 + [16])
	return $5
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [96]) = $0
	*(($5 + [88])) = (int_64)0
	*(($5 + [80])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [64])
	CALL $230(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [32]) = $5
	$7 = (int_64)
	*($3 + [40]) = $7((int_64)0 - *($5)))
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $172(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *(*($4 + [4]) + [4])
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$6 = ($1 + [40])
	CALL $53($6, *($4 + [12]))
	$4 = *($4 + [16])
	*($1 + [64]) = *($4)
	*(($1 + [88])) = *(($4 + [24]))
	*(($1 + [80])) = *(($4 + [16]))
	*(($1 + [72])) = *(($4 + [8]))
	$4 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [64])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $9
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	CALL $250(($3 + [24]), ($3 + [16]))
	$10 = *($1)
	$8 = (int_64)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)-4241658174089854976, *(*($0 + [8])), $8((int_64)0 - $10)), $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	if ( ((uint_64)*($5 + [16]) > (uint_64)$8) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? (int_64))((int_64)1 - $10) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($5 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [104]) = CALL db_idx64_store($8, (int_64)-4241658174089854976, $10, (int_64))((int_64)0 - $11), ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$6 = *($4 + [12])
	*($1 + [32]) = *($6)
	*(($1 + [56])) = *(($6 + [24]))
	*(($1 + [48])) = *(($6 + [16]))
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [64]) = *(*($4 + [16]))
	*($1 + [72]) = *(*($4 + [20]))
	$7 = ($1 + [80])
	CALL $53($7, *($4 + [24]))
	$4 = *($1 + [80])
	$6 = ( *(($1 + [84])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [76])
	$8 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [72])
	$10 = ($1 + [64])
	$6 = ($1 + [32])
	$11 = ($1 + [16])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [56]) = $3
	*($3 + [20]) = ($1 + [8])
	*($3 + [16]) = $1
	*($3 + [24]) = $11
	*($3 + [28]) = $6
	*($3 + [32]) = $10
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $247(($3 + [16]), ($3 + [56]))
	$12 = *($1)
	$8 = (int_64)
	*($1 + [96]) = CALL db_store_i64(*($5 + [8]), (int_64)6291439975096774656, *(*($0 + [8])), $8((int_64)0 - $12)), $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	if ( ((uint_64)*($5 + [16]) > (uint_64)$8) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? (int_64))((int_64)1 - $12) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($5 + [8])
	$8 = *($4)
	$2 = *(($0 + [8]))
	$12 = *($2)
	$13 = *($1)
	*($3 + [16]) = ((int_64)((int_64)*(($1 + [64])) * (int_64)100000000000) + (int_64)*(($1 + [72])))
	*($1 + [100]) = CALL db_idx64_store($8, (int_64)6291439975096774656, $12, (int_64))((int_64)0 - $13), ($3 + [16]))
	$8 = *($2)
	$12 = *($4)
	$13 = *($1)
	*((($3 + [16]) + [24])) = *(($6 + [24]))
	*((($3 + [16]) + [16])) = *(($6 + [16]))
	*($3 + [24]) = *(($6 + [8]))
	*($3 + [16]) = *($6)
	*(($1 + [104])) = CALL db_idx256_store($12, (int_64)6291439975096774657, $8, (int_64))((int_64)0 - $13), ($3 + [16]), [2])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $4 ()
{
	return [8208]
}

void .FUNC $221 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $189 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [100])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)6291439975096774656, $3, (int_64))((int_64)0 - *($5))
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [104]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$0 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)6291439975096774657, $3, [2], (int_64))((int_64)0 - *($4))
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx256_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [72])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4520852774463733760, $3, (int_64))((int_64)0 - *($5))
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$6 = *($0)
	$4 = *($6 + [4])
	$0 = *(($4 + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($6)
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	$0 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)4520852774463733761, $3, [2], (int_64))((int_64)0 - *($4))
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx256_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $46($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

void .FUNC $0 ()
{
	CALL $3()
}

void .FUNC $236 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $42([8832], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [8736])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [8832]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $42($3, *([0] + [20]))
	return .LABEL $label$1
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	return CALL $41($0, $1)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	return $0
}

int_32 .FUNC $40 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $39($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $48(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $48(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $48(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $48(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $48(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $48(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $48(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $48(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $48(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [10672]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $48(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8278]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $40($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [11152]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $30($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [11158] ? [11153] : $31 )
	if ( ((int_32)CALL $30($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8280] ? [8278] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [11155]
	if ( ((int_32)CALL $30($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $37(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $43(*(CALL $4()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8278]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8278]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [11136])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8278])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [10636] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $44($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8278]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8278]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8279]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8278] ? [8283] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $4()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $39(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $39(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $37(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $39(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $39(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $39(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($31 <= [256])
	$31 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $31 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $31
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $39(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$31 = ($31 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $39(($5 + [432]), $31, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $39($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $39(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $39(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $39(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $39(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $39($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $39(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $39(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $39(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $39($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $39(( ( [11194] ? [11198] : $15 ) ? ( [11186] ? [11190] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $39(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $45(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$17 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $17
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$17 = *($5 + [748])
	
.LABEL $label$175
	$26 = ( [6] ? $16 : $15 )
	$27 = ( ($5 + [752]) ? $9 : ((int_32)$17 < (int_32)[0]) )
	$19 = $27
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$179 }
	$18 = $27
	
.LOOP $label$180:
	$17 = ( $17 ? [29] : ((int_32)$17 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$181 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$182:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$182 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$181 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$181
	
.LOOP $label$184:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$183 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$184 }
	
.LABEL $label$183
	$17 = (*($5 + [748]) - $17)
	*($5 + [748]) = $17
	$19 = $15
	if ( ((int_32)$17 > (int_32)[0]) ){ goto $label$180 }
	goto $label$178 
	
.LABEL $label$179
	$15 = $19
	$18 = $27
	
.LABEL $label$178
	if ( ((int_32)$17 > (int_32)[-1]) ){ goto $label$185 }
	$24 = (((uint_32)($26 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$186 }
	$36 = ($27 + ($24 << [2]))
	
.LOOP $label$187:
	$19 = ([0] - $17)
	$22 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$189 }
	$23 = uint_32([1000000000] >> $22)
	$25 = ((int_32)([-1] << $22) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$190:
	$16 = *($19)
	*($19) = (uint_32($16 >> $22) + $17)
	$17 = ((int_32)($16 & $25) * (int_32)$23)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$190 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$188 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$188 
	
.LABEL $label$189
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$188
	$17 = (*($5 + [748]) + $22)
	*($5 + [748]) = $17
	$15 = ( $36 ? $15 : ((int_32)int_32(($15 - $27) >> [2]) > (int_32)$24) )
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$187 }
	goto $label$185 
	
.LABEL $label$186
	
.LOOP $label$191:
	$19 = ([0] - $17)
	$22 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$193 }
	$23 = uint_32([1000000000] >> $22)
	$25 = ((int_32)([-1] << $22) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$194:
	$16 = *($19)
	*($19) = (uint_32($16 >> $22) + $17)
	$17 = ((int_32)($16 & $25) * (int_32)$23)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$194 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$192 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$192 
	
.LABEL $label$193
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$192
	$17 = (*($5 + [748]) + $22)
	*($5 + [748]) = $17
	$15 = ( ($18 + ($24 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$24) )
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$191 }
	
.LABEL $label$185
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$195 }
	$19 = ((int_32)int_32(($27 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$195 }
	$17 = [10]
	
.LOOP $label$196:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$196 }
	
.LABEL $label$195
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$26 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($26 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $27) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$197 }
	$24 = ($17 + [147456])
	$36 = ((int_32)$24 / (int_32)[9])
	$33 = ($27 + ($36 << [2]))
	$22 = ($33 + [-65532])
	$17 = [10]
	$36 = ((int_32)$36 * (int_32)[9])
	if ( ((int_32)($24 - $36) > (int_32)[7]) ){ goto $label$198 }
	$16 = (((($26 + ([0] - $25)) + [147455]) - $16) - $36)
	$17 = [10]
	
.LOOP $label$199:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$199 }
	
.LABEL $label$198
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$36 = ($22 + [4])
	if ( ((int_32)$36 != (int_32)$15) ){ goto $label$201 }
	if ( ($16 == 0) ){ goto $label$200 }
	
.LABEL $label$201
	if ( ($24 & [1]) ){ goto $label$203 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$202 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$202 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$202 }
	
.LABEL $label$203
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$202
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$204 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$36 == (int_32)$15) )
	
.LABEL $label$204
	if ( ($31 == 0) ){ goto $label$205 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$205 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$205
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$200 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$206 }
	$19 = ($33 + [-65536])
	
.LOOP $label$207:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$208 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$208
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$207 }
	$22 = ($19 + [4])
	
.LABEL $label$206
	$19 = ((int_32)int_32(($27 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$200 }
	$17 = [10]
	
.LOOP $label$209:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$209 }
	
.LABEL $label$200
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$197
	$22 = ([0] - $19)
	
.LOOP $label$212:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$211 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$212 }
	$24 = [1]
	if ( $23 ){ goto $label$210 }
	goto $label$162 
	
.LABEL $label$211
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$210
	$15 = ($26 + ($26 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$26 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$214 }
	$18 = [0]
	
.LOOP $label$215:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$215 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$213 }
	
.LABEL $label$214
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$213
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$216 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$217:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [11136])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$218 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$218
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$217 }
	goto $label$167 
	
.LABEL $label$216
	$15 = ($5 + [704])
	
.LOOP $label$219:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [11136])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$220 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$220
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$219 }
	goto $label$167 
	
.LABEL $label$170
	$26 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$221 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$221 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$221 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$222:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$222 }
	
.LABEL $label$221
	$17 = (((int_32)int_32(($16 - $27) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$26 = ( $26 ? $15 : ((int_32)$26 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$223:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [11136])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$224 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$224 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$224
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$223 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$225:
	if ( (($15 & [1]) == 0) ){ goto $label$226 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$226
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$225 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$26 = ( $26 ? $15 : ((int_32)$26 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $39(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$227 }
	CALL $39($26, $25, $0)
	
.LABEL $label$227
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$228 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$228 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$230 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$231:
	if ( (($15 & [1]) == 0) ){ goto $label$232 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$232
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$231 }
	if ( $17 ){ goto $label$228 }
	$25 = ($25 & [255])
	goto $label$229 
	
.LABEL $label$230
	if ( $18 ){ goto $label$228 }
	
.LABEL $label$229
	CALL $39(($5 + [432]), $25, $0)
	
.LABEL $label$228
	if ( (*($0) & [32]) ){ goto $label$233 }
	CALL $39(($5 + [704]), $23, $0)
	
.LABEL $label$233
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$234 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$236 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$237:
	if ( (($15 & [1]) == 0) ){ goto $label$238 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$238
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$237 }
	if ( $17 ){ goto $label$234 }
	$23 = ($23 & [255])
	goto $label$235 
	
.LABEL $label$236
	if ( $18 ){ goto $label$234 }
	
.LABEL $label$235
	CALL $39(($5 + [432]), $23, $0)
	
.LABEL $label$234
	if ( (*($0) & [32]) ){ goto $label$239 }
	CALL $39($24, $22, $0)
	
.LABEL $label$239
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$240 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$240 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$242 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$243:
	if ( (($15 & [1]) == 0) ){ goto $label$244 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$244
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$243 }
	if ( $17 ){ goto $label$240 }
	$22 = ($22 & [255])
	goto $label$241 
	
.LABEL $label$242
	if ( $18 ){ goto $label$240 }
	
.LABEL $label$241
	CALL $39(($5 + [432]), $22, $0)
	
.LABEL $label$240
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($26 | $23)
	if ( ((int_32)$26 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$36 = (($26 + ((int_32)$25 != (int_32)[0])) + [1])
	$37 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $37 ){ goto $label$246 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $36)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$245 
	
.LABEL $label$246
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$247 }
	
.LOOP $label$248:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$248 }
	
.LABEL $label$247
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$249 }
	$15 = ($17 + [-1])
	
.LOOP $label$250:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$250 }
	$17 = ($17 + [1])
	
.LABEL $label$249
	*(($33 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $33)
	if ( ((int_32)$19 > (int_32)([2147483647] - $36)) ){ goto $label$5 }
	
.LABEL $label$245
	$15 = [-1]
	$19 = ($19 + $36)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$28 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$251 }
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$251 }
	$15 = ($36 <= [256])
	$36 = ($20 - $28)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$253 }
	$15 = ($19 == 0)
	$19 = $36
	
.LOOP $label$254:
	if ( (($15 & [1]) == 0) ){ goto $label$255 }
	CALL $39(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$255
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$254 }
	if ( $22 ){ goto $label$251 }
	$36 = ($36 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $19 ){ goto $label$251 }
	
.LABEL $label$252
	CALL $39(($5 + [432]), $36, $0)
	
.LABEL $label$251
	if ( (*($0) & [32]) ){ goto $label$256 }
	CALL $39($32, $31, $0)
	
.LABEL $label$256
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$257 }
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$257 }
	$15 = ($31 <= [256])
	$31 = ($20 - $28)
	CALL memset(($5 + [432]), [48], ( $31 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$259 }
	$15 = ($19 == 0)
	$19 = $31
	
.LOOP $label$260:
	if ( (($15 & [1]) == 0) ){ goto $label$261 }
	CALL $39(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$261
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$260 }
	if ( $22 ){ goto $label$257 }
	$31 = ($31 & [255])
	goto $label$258 
	
.LABEL $label$259
	if ( $19 ){ goto $label$257 }
	
.LABEL $label$258
	CALL $39(($5 + [432]), $31, $0)
	
.LABEL $label$257
	if ( $37 ){ goto $label$272 }
	$23 = ( $27 ? $18 : ((uint_32)$18 > (uint_32)$27) )
	$22 = $23
	
.LOOP $label$273:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$275 }
	$18 = [0]
	
.LOOP $label$276:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$276 }
	goto $label$274 
	
.LABEL $label$275
	$18 = [0]
	
.LABEL $label$274
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$280 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$279 }
	
.LOOP $label$281:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$281 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$278 }
	goto $label$277 
	
.LABEL $label$280
	if ( $18 ){ goto $label$279 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$279
	if ( (*($0) & [32]) ){ goto $label$277 }
	
.LABEL $label$278
	CALL $39($15, ($7 - $15), $0)
	
.LABEL $label$277
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$27) ){ goto $label$273 }
	if ( ($25 == 0) ){ goto $label$282 }
	if ( (*($0) & [32]) ){ goto $label$282 }
	CALL $39([11213], [1], $0)
	
.LABEL $label$282
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$271 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$270 }
	
.LOOP $label$283:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$285 }
	$15 = $7
	
.LOOP $label$286:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$286 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$284 }
	
.LABEL $label$285
	
.LOOP $label$287:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$287 }
	
.LABEL $label$284
	if ( (*($0) & [32]) ){ goto $label$288 }
	CALL $39($15, ( $26 ? [9] : ((int_32)$26 < (int_32)[9]) ), $0)
	
.LABEL $label$288
	$15 = ($26 + [-9])
	if ( ((int_32)$26 < (int_32)[10]) ){ goto $label$269 }
	$26 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$283 }
	goto $label$269 
	
.LABEL $label$272
	if ( ((int_32)$26 <= (int_32)[-1]) ){ goto $label$265 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$267 }
	$22 = $18
	
.LOOP $label$289:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$291 }
	$19 = [0]
	
.LOOP $label$292:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$292 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$290 }
	
.LABEL $label$291
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$290
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$294 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$293 }
	
.LOOP $label$295:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$295 }
	goto $label$293 
	
.LABEL $label$294
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$296 }
	CALL $39($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$296
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$293 }
	CALL $39([11213], [1], $0)
	
.LABEL $label$293
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$297 }
	CALL $39($17, ( $15 ? $26 : ((int_32)$26 > (int_32)$15) ), $0)
	
.LABEL $label$297
	$26 = ($26 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$266 }
	if ( ((int_32)$26 > (int_32)[-1]) ){ goto $label$289 }
	goto $label$266 
	
.LABEL $label$271
	$15 = $26
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$268 }
	goto $label$264 
	
.LABEL $label$270
	$15 = $26
	
.LABEL $label$269
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$264 }
	
.LABEL $label$268
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$299 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$300:
	if ( (($18 & [1]) == 0) ){ goto $label$301 }
	CALL $39(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$301
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$300 }
	if ( $16 ){ goto $label$264 }
	$15 = ($15 & [255])
	goto $label$298 
	
.LABEL $label$299
	if ( $19 ){ goto $label$264 }
	
.LABEL $label$298
	CALL $39(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$263 }
	goto $label$262 
	
.LABEL $label$267
	$22 = $18
	
.LOOP $label$302:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$304 }
	$19 = [0]
	
.LOOP $label$305:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$305 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$303 }
	
.LABEL $label$304
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$303
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$307 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$306 }
	
.LOOP $label$308:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$308 }
	goto $label$306 
	
.LABEL $label$307
	if ( (*($0) & [32]) ){ goto $label$309 }
	CALL $39($17, [1], $0)
	
.LABEL $label$309
	$17 = ($17 + [1])
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$306 }
	if ( (*($0) & [32]) ){ goto $label$306 }
	CALL $39([11213], [1], $0)
	
.LABEL $label$306
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $39($17, ( $15 ? $26 : ((int_32)$26 > (int_32)$15) ), $0)
	
.LABEL $label$310
	$26 = ($26 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$266 }
	if ( ((int_32)$26 > (int_32)[-1]) ){ goto $label$302 }
	
.LABEL $label$266
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$265 }
	$18 = ($26 <= [256])
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$312 }
	$15 = ($15 == 0)
	$18 = $26
	
.LOOP $label$313:
	if ( (($15 & [1]) == 0) ){ goto $label$314 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$314
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$313 }
	if ( $17 ){ goto $label$265 }
	$26 = ($26 & [255])
	goto $label$311 
	
.LABEL $label$312
	if ( $15 ){ goto $label$265 }
	
.LABEL $label$311
	CALL $39(($5 + [432]), $26, $0)
	
.LABEL $label$265
	if ( (*($0) & [32]) ){ goto $label$264 }
	CALL $39($33, ($10 - $33), $0)
	
.LABEL $label$264
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$262 }
	
.LABEL $label$263
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$262 }
	$15 = ($16 <= [256])
	$16 = ($20 - $28)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$316 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$317:
	if ( (($15 & [1]) == 0) ){ goto $label$318 }
	CALL $39(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$318
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$317 }
	if ( $17 ){ goto $label$262 }
	$16 = ($16 & [255])
	goto $label$315 
	
.LABEL $label$316
	if ( $18 ){ goto $label$262 }
	
.LABEL $label$315
	CALL $39(($5 + [432]), $16, $0)
	
.LABEL $label$262
	$15 = ( $20 ? $28 : ((int_32)$20 > (int_32)$28) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $4()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $47([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $22($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $47($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $47($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $23($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $45(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $16($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $222 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12680])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [12726])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4520708925519560704) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)4520708925519560705
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $234 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12680])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [12726])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4421665916975824896) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)-4421665916975824895
	
.LABEL $label$3
	$global$0 = $5
}

int_32 .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $249 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

void .FUNC $226 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0)
	CALL $122(*($1), ($6 + [8]))
	$5 = ($6 + [24])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $0, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [48]), $0, [8])
	*(($6 + [32])) = *($2 + [48])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[31]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$0 = *(($4 + [4]))
	
.LABEL $label$4
	$7 = ($6 + [48])
	CALL memcpy(($2 + [48]), $0, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$8 = (int_64)0
	$4 = [16]
	$5 = ($2 + [16])
	$0 = [0]
	$9 = (int_64)0
	
.LOOP $label$6:
	$3 = (($2 + [48]) + $0)
	if ( ($4 <= [2]) ){ goto $label$7 }
	$8 = ((int_64)$8 | (int_64)*($3))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$8 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$8 = ((int_64)$8 << (int_64)8)
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$8
	*($5 + [8]) = $9
	*($5) = ((int_64)$8 | (int_64)*($3))
	$4 = [16]
	$5 = ($5 + [16])
	$8 = (int_64)0
	$9 = (int_64)0
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$9 }
	if ( ($4 <= [2]) ){ goto $label$10 }
	CALL __ashlti3($2, $8, $9, (($4 << [3]) + [-8]))
	$9 = *(($2 + [8]))
	$8 = *($2)
	
.LABEL $label$10
	*($5) = $8
	*($5 + [8]) = $9
	
.LABEL $label$9
	*($7) = *($2 + [16])
	*(($7 + [8])) = *($2 + [24])
	*(($7 + [24])) = *((($2 + [16]) + [24]))
	*(($7 + [16])) = *((($2 + [16]) + [16]))
	*($2 + [48]) = $6
	CALL $237(($2 + [48]), $1)
	$global$0 = ($2 + [80])
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0)
	*($2 + [40]) = [12258]
	*($2 + [44]) = CALL $15([12258])
	*($2 + [16]) = *($2 + [40])
	$4 = *(CALL $81(($2 + [48]), ($2 + [16])))
	$5 = *($0)
	*($2 + [24]) = [13236]
	*($2 + [28]) = CALL $15([13236])
	*($2 + [8]) = *($2 + [24])
	$0 = CALL $81(($2 + [32]), ($2 + [8]))
	*($2 + [56]) = $5
	*($2 + [64]) = *($0)
	*(($0 = CALL $7([16]))) = $3
	*($0 + [8]) = $4
	*(($2 + [92])) = [0]
	$6 = ($0 + [16])
	*(($2 + [80])) = $6
	*(($2 + [76])) = $6
	*($2 + [72]) = $0
	*($2 + [84 align=4]) = (int_64)0
	$0 = *($1)
	$0 = ( *($1 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$3 = (CASTING uint_64)(uint_32 $0)
	$6 = ($2 + [84])
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $113($6, $0)
	$6 = *(($2 + [88]))
	$0 = *(($2 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$0 = [0]
	
.LABEL $label$2
	*($2 + [100]) = $0
	*($2 + [96]) = $0
	*($2 + [104]) = $6
	CALL $198(($2 + [96]), $1)
	CALL $116(($2 + [56]))
	$0 = *($2 + [84])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($2 + [88])) = $0
	CALL $9($0)
	
.LABEL $label$4
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($2 + [76])) = $0
	CALL $9($0)
	
.LABEL $label$5
	$global$0 = ($2 + [112])
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4241658174089854976, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $170($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [100]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $170($0, $6)
	
.LABEL $label$3
	CALL $174($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-7297972528087689856, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $130($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [28]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $130($0, $6)
	
.LABEL $label$3
	CALL $131($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-2109263375683915776, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $143($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [44]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $143($0, $6)
	
.LABEL $label$3
	CALL $196($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4421661421696319488, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $169($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [100]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $169($0, $6)
	
.LABEL $label$3
	CALL $175($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $124($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [32]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $124($0, $6)
	
.LABEL $label$3
	CALL $194($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-2109262807403457152, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $149($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [56]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $149($0, $6)
	
.LABEL $label$3
	CALL $150($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [16]))
	CALL $231(*($0 + [20]), $1, [1])
	$global$0 = ($2 + [16])
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [96]) = $0
	*(($5 + [88])) = (int_64)0
	*(($5 + [80])) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [64])
	CALL $248(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $120(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [240])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $51(($2 + [112]), ($1 + [8]))
	*(($5 = (($2 + [96]) + [8]))) = *(($1 + [32]))
	*(($6 = (($2 + [64]) + [16]))) = *(($1 + [64]))
	*(($7 = (($2 + [64]) + [24]))) = *(($1 + [72]))
	*(($8 = (($2 + [32]) + [16]))) = *(($1 + [96]))
	*(($9 = (($2 + [32]) + [24]))) = *(($1 + [104]))
	*($2 + [96]) = *($1 + [24])
	*($2 + [64]) = *($1 + [48])
	*($2 + [72]) = *(($1 + [56]))
	*($2 + [32]) = *($1 + [80])
	*($2 + [40]) = *(($1 + [88]))
	*(($10 = (($2 + [16]) + [8]))) = *(($1 + [120]))
	*(($11 = ($2 + [8]))) = *(($1 + [136]))
	*($2 + [16]) = *($1 + [112])
	*($2) = *($1 + [128])
	*((($2 + [224]) + [8])) = *($11)
	*((($2 + [208]) + [8])) = *($10)
	*((($2 + [176]) + [16])) = *($8)
	*((($2 + [176]) + [24])) = *($9)
	*((($2 + [144]) + [16])) = *($6)
	*((($2 + [144]) + [24])) = *($7)
	*($2 + [224]) = *($2)
	*($2 + [208]) = *($2 + [16])
	*($2 + [176]) = *($2 + [32])
	*($2 + [184]) = *($2 + [40])
	*($2 + [144]) = *($2 + [64])
	*($2 + [152]) = *($2 + [72])
	*((($2 + [128]) + [8])) = *($5)
	*($2 + [128]) = *($2 + [96])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $3), (int_64 $4), (int_32 ($2 + [128])), (int_32 ($2 + [144])), (int_32 ($2 + [176])), (int_32 ($2 + [208])), (int_32 ($2 + [224])), (int_32 $1))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $9(*($4 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [240])
}

void .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	$4 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, ($2 + [8]), [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $198(*($1), *($0 + [8]))
	CALL $198(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [48])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [48])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
	$9 = *(($1 + [104]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4421661421696319488, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [8])
	$0 = *($1)
	*($2 + [8]) = (int_64)0
	$1 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$1 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $1, [8])
	*($4) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	$4 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, ($2 + [8]), [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$5 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $198(*($1), *($0 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $54($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $16(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [8]))
	CALL $122(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $7($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $54($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $9($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $56($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $246(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $198(*($1), *($0 + [24]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $173 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12903])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4241658174089854976)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $170(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [36])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$12
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $9($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($4 + [16])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$3 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [52]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [48])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [48])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
	$9 = *($1 + [60])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2109262807403457152, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $53($6, *($4 + [8]))
	$7 = ($1 + [28])
	CALL $53($7, *($4 + [12]))
	$4 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [16])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$10 = *(($1 + [28]))
	$10 = ( *(($1 + [32])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$4 = ($10 + $4)
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	CALL $245(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-2109263375683915776, *(*($0 + [8])), $9, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $2($2)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $156 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12680])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [12726])
	
.LABEL $label$2
	*($1 + [24]) = *(*($3))
	*($5 + [24]) = *($1)
	$3 = ($1 + [16])
	*($5 + [32]) = *($3)
	$6 = *($1 + [8])
	$7 = $4
	$4 = ($7 + [-32])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($7 + [-11])
	*($5 + [40]) = ($5 + [8])
	*($5 + [52]) = ($1 + [8])
	*($5 + [48]) = $1
	*($5 + [56]) = $3
	*($5 + [60]) = ($1 + [24])
	CALL $154(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [32]), $2, $4, [21])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = (($5 + [24]) + [8])
	*($5 + [48]) = *($1)
	if ( (CALL $17(($5 + [24]), ($5 + [48]), [8]) == 0) ){ goto $label$4 }
	$7 = ($1 + [36])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2108902700040753152, ($5 + [40]), $6)
	*($7) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, $2, ($5 + [48]))
	
.LABEL $label$4
	*($5 + [48]) = *(($1 + [16]))
	if ( (CALL $17($4, ($5 + [48]), [8]) == 0) ){ goto $label$6 }
	$4 = ($1 + [40])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2108902700040753151, ($5 + [40]), $6)
	*($4) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($5 + [48]))
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [12]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$0 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [15]), [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-2108902700040753152, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $148($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [32]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $148($0, $6)
	
.LABEL $label$3
	CALL $197($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)4520852774463733760, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $195($0, $1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$2 = (int_64))((int_64)1 - $2)
	$4 = [0]
	
.LOOP $label$2:
	$1 = [0]
	$6 = CALL db_next_i64(*($5 + [68]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $195($0, $6)
	
.LABEL $label$3
	CALL $183($0, $5)
	$4 = ($4 + [1])
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = ((int_64)$2 != (int_64)0)
	$2 = ((int_64)$2 + (int_64)1)
	$5 = $1
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $4
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $246(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $9($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $188(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$6 = [20]
	$7 = [11384]
	
.LOOP $label$1:
	$9 = ((uint_64)*($9) > (uint_64)$3)
	$8 = ((int_32)$6 / (int_32)[2])
	$9 = ($7 + ($8 << [3]))
	$7 = ( $7 ? ($9 + [8]) : $9 )
	$6 = ( $8 ? (($6 + [-1]) - $8) : $9 )
	if ( $6 ){ goto $label$1 }
	$6 = ($7 & [255])
	$7 = uint_32(($7 - [11384]) >> [3])
	$7 = (( $4 ? $7 : ($6 <= $4) ) & [255])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$3 }
	$6 = ($6 - $4)
	goto $label$2 
	
.LABEL $label$3
	$6 = [1]
	$7 = ($7 + [1])
	
.LABEL $label$2
	$7 = ((($5 + ((int_32)$4 != (int_32)[0])) + $7) & [65535])
	$9 = ($0 + $7)
	if ( ((uint_32)$9 > (uint_32)$1) ){ goto $label$5 }
	if ( $2 ){ goto $label$5 }
	$7 = ($7 + [-1])
	$6 = (($6 + $5) & [65535])
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	if ( ((int_32)$7 <= (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$10 = ((uint_64)$3 / (uint_64)(int_64)10)
	*(($0 + $7)) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) | [48])
	$7 = ($7 + [-1])
	if ( (uint_64)($3 <= (int_64)10) ){ goto $label$11 }
	$3 = $10
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$7 <= (int_32)$6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = $3
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	
.LOOP $label$13:
	*(($0 + $7)) = [48]
	$7 = ($7 + [-1])
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$7
	*(($0 + $6)) = [46]
	$7 = ($6 + [-1])
	
.LABEL $label$6
	if ( ((int_32)$7 >= (int_32)$5) ){ goto $label$14 }
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$14
	
.LOOP $label$15:
	$3 = ((uint_64)$10 / (uint_64)(int_64)10)
	*(($0 + $7)) = ((CASTING uint_32)(uint_64 (int_64))($10 - ((int_64)$3 * (int_64)10))) | [48])
	$6 = ((int_32)$7 > (int_32)$5)
	$8 = ($7 + [-1])
	$7 = $8
	$10 = $3
	if ( $6 ){ goto $label$15 }
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	return $9
	
.LABEL $label$4
	*($0) = [45]
	return $9
}

void .FUNC $68 (int_32 $0)
{
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [16]))
	CALL $249(*($0 + [20]), $1, [1])
	$global$0 = ($2 + [16])
}

void .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $226(*($0 + [12]), $1, [1])
	$global$0 = ($2 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $49(*([0] + [11380]), [8288], $4)
	CALL $64([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $22($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [8232]) == 0) ){ goto $label$8 }
	$4 = CALL $64(*([0] + [8232]))
	
.LABEL $label$8
	$0 = *(CALL $20())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $22($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $22($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $23($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $23($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $21()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $23($0)
	
.LABEL $label$1
	return $2
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8323])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $66 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $60 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_64 .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8244])
	return $3
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([112])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [92]) = $0
	*(($5 + [56])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [40])) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [64])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [80])
	CALL $228(($3 + [32]), ($3 + [24]))
	*($5 + [96]) = $1
	*($5 + [100 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = (int_64)
	*($3 + [32]) = $7((int_64)0 - *($5)))
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $180(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [88])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $229(*($0 + [12]), $1, [1])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [24]))
	$global$0 = ($2 + [16])
}

void .FUNC $229 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $89 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $128(($4 + [16]), ($4 + [144]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$5 = *($5)
	*((($4 + [112]) + [8])) = $5
	*(($6 = (($4 + [128]) + [8]))) = $5
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [16]) + [24])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $129(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $2($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $88 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [112]) = $1
	CALL require_auth((int_64)4301877902857333136)
	$6 = [0]
	*(($5 + [104])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [108]) = [0]
	$7 = *($0)
	*($5 + [72]) = $7
	*($5 + [80]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)-7297972528087689856, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL $130(($5 + [72]), $8)
	if ( ((int_32)*($6 + [24]) == (int_32)($5 + [72])) ){ goto $label$4 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$4
	if ( ((int_64)*($6 + [8]) == (int_64)*($2)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [12011])
	if ( ((int_64)*([0] + [8]) == (int_64)*($2)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [12041])
	
.LABEL $label$1
	$9 = *($3 + [8])
	$10 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $10 )
	if ( ($8 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [12508])
	goto $label$9 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = ( $9 ? ($3 + [1]) : $10 )
	$7 = (int_64)0
	
.LOOP $label$11:
	$9 = (($10 + $8) + [-1])
	$3 = *($9)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [12553])
	$3 = *($9)
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	if ( ((int_64)$7 == (int_64)1129595461) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)1146312005) ){ goto $label$7 }
	
.LABEL $label$13
	*($5 + [64]) = $7
	if ( ((int_64)*($6 + [16]) == (int_64)$7) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	$7 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert([0], [12834])
	*($5 + [64]) = $7
	if ( ((int_64)*($6 + [16]) == (int_64)$7) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [12055])
	$7 = *($5 + [64])
	
.LABEL $label$5
	if ( ((int_64)$7 == (int_64)1146312005) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)1129595461) ){ goto $label$14 }
	
.LABEL $label$15
	*($5 + [32]) = [0]
	*($5 + [24]) = (int_64)0
	if ( CALL $77(( *($4 + [8]) ? ($4 + [1]) : (*($4) & [1]) ), ($5 + [24])) ){ goto $label$16 }
	CALL eosio_assert([0], [12071])
	
.LABEL $label$16
	$8 = *($5 + [24])
	if ( ($8 == 0) ){ goto $label$14 }
	*($5 + [28]) = $8
	CALL $9($8)
	
.LABEL $label$14
	if ( $6 ){ goto $label$17 }
	CALL eosio_assert([0], [13289])
	CALL eosio_assert([0], [13323])
	
.LABEL $label$17
	$8 = CALL db_next_i64(*($6 + [28]), ($5 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	CALL $130(($5 + [72]), $8)
	
.LABEL $label$18
	CALL $131(($5 + [72]), $6)
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$7 = *($0)
	*($5 + [24]) = $7
	$1 = *($2)
	*($5 + [32]) = $1
	$8 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, *($5 + [64]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	if ( ((int_32)*(CALL $124(($5 + [24]), $8) + [28]) == (int_32)($5 + [24])) ){ goto $label$20 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$20
	CALL eosio_assert([0], [11889])
	$7 = *($5 + [24])
	
.LABEL $label$19
	$1 = *($0)
	*($5 + [16]) = $4
	*($5 + [12]) = ($5 + [112])
	*($5 + [8]) = ($5 + [64])
	*($5 + [152]) = $1
	if ( ((int_64)$7 == (int_64)CALL current_receiver()) ){ goto $label$21 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$21
	*($5 + [132]) = ($5 + [8])
	*($5 + [128]) = ($5 + [24])
	*($5 + [136]) = ($5 + [152])
	*(($8 = CALL $7([40]))) = (int_64)0
	*($8 + [16 align=4]) = (int_64)0
	*($8 + [24]) = [0]
	*($8 + [28]) = ($5 + [24])
	CALL $132(($5 + [128]), $8)
	*($5 + [144]) = $8
	$7 = *($8)
	*($5 + [128]) = $7
	$9 = *($8 + [32])
	*($5 + [124]) = $9
	$10 = ($5 + [52])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [56]))) ){ goto $label$26 }
	*($3 + [8]) = $7
	*($3 + [16]) = $9
	*($5 + [144]) = [0]
	*($3) = $8
	*($10) = ($3 + [24])
	$8 = *($5 + [144])
	*($5 + [144]) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $133(($5 + [48]), ($5 + [144]), ($5 + [128]), ($5 + [124]))
	$8 = *($5 + [144])
	*($5 + [144]) = [0]
	if ( $8 ){ goto $label$24 }
	
.LABEL $label$25
	$9 = *($5 + [48])
	if ( ($9 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$27 }
	CALL $9(*(($8 + [24])))
	
.LABEL $label$27
	CALL $9($8)
	$9 = *($5 + [48])
	if ( ($9 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$10 = ($5 + [52])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$29 }
	
.LOOP $label$30:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$31 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$32 }
	CALL $9(*(($3 + [24])))
	
.LABEL $label$32
	CALL $9($3)
	
.LABEL $label$31
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$30 }
	$8 = *(($5 + [48]))
	goto $label$28 
	
.LABEL $label$29
	$8 = $9
	
.LABEL $label$28
	*($10) = $9
	CALL $9($8)
	
.LABEL $label$22
	$9 = *($5 + [96])
	if ( ($9 == 0) ){ goto $label$33 }
	$10 = ($5 + [100])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$35 }
	
.LOOP $label$36:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$37 }
	CALL $9($3)
	
.LABEL $label$37
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$36 }
	$8 = *(($5 + [96]))
	goto $label$34 
	
.LABEL $label$35
	$8 = $9
	
.LABEL $label$34
	*($10) = $9
	CALL $9($8)
	
.LABEL $label$33
	$global$0 = ($5 + [160])
}

int_32 .FUNC $87 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $137(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($8 = (($4 + [128]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [128]) = $9
	*($4 + [112]) = $9
	$3 = *($8)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	$0 = *($4 + [96])
	$1 = *($4 + [88])
	$9 = *($4 + [72])
	*($4 + [128]) = *($4 + [80])
	*($4 + [144]) = $9
	*($4 + [112]) = $1
	*($4 + [104]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 ($4 + [112])), (int_32 ($4 + [104])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $104($0, $1, $2, $3, $4)
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [64]) + [16])) = [0]
	*(($8 = ($4 + [96]))) = (int_64)0
	*(($9 = ($4 + [136]))) = (int_64)0
	*(($10 = ($4 + [128]))) = (int_64)0
	*(($11 = ($4 + [120]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [224]) = ($4 + [64])
	CALL $134(($4 + [224]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*(($12 = (($4 + [208]) + [8]))) = $3
	*(($13 = (($4 + [144]) + [8]))) = $3
	$14 = *($4)
	*($4 + [144]) = $14
	*($4 + [208]) = $14
	$3 = *($13)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [224]) = $0
	$0 = *($4 + [64])
	$3 = CALL $51(($4 + [192]), (($4 + [64]) | [8]))
	*(($13 = (($4 + [176]) + [8]))) = *($8)
	*(($8 = (($4 + [144]) + [16]))) = *($10)
	*(($10 = (($4 + [144]) + [24]))) = *($9)
	*($4 + [176]) = *($4 + [88])
	*($4 + [144]) = *($4 + [112])
	*($4 + [152]) = *($11)
	*((($4 + [224]) + [24])) = *($10)
	*((($4 + [224]) + [16])) = *($8)
	*($12) = *($13)
	*($4 + [232]) = *($4 + [152])
	*($4 + [224]) = *($4 + [144])
	*($4 + [208]) = *($4 + [176])
	$8 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 $0), (int_64 $3), (int_32 ($4 + [208])), (int_32 ($4 + [224])), (int_32 $6))
	if ( (*($4 + [192]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [256])
	return $2
	
.LABEL $label$5
	CALL $9(*(($4 + [80])))
	$global$0 = ($4 + [256])
	return $2
}

void .FUNC $84 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [32])
	$global$0 = $5
	*(($5 + [24])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	CALL $108($0, $1, $2, $3, $4, $5, $5, $5)
	$global$0 = ($5 + [32])
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $110(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*(($3 = (($4 + [112]) + [8]))) = $9
	$10 = *($4)
	*($4 + [112]) = $10
	*($4 + [160]) = $10
	$11 = *($3)
	*(($9 = (($4 + [128]) + [8]))) = $11
	*((($4 + [16]) + [24])) = $11
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($3) = *($8)
	*($4 + [112]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $51(($4 + [160]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [152]) = $1
	*($4 + [144]) = $0
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [152])), (int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [160]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL $9(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [400])
	$global$0 = $5
	$7 = *($0)
	$6 = *($1)
	if ( ((int_64)$6 == (int_64)$7) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$7) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	if ( ((int_64)$7) == (int_64)1129595461) ){ goto $label$2 }
	if ( ((int_64)$7 == (int_64)1146312005) ){ goto $label$2 }
	CALL eosio_assert([0], [12834])
	$6 = *($1)
	
.LABEL $label$2
	if ( ((int_64)$6 != (int_64)4301877904239043216) ){ goto $label$17 }
	*($5 + [360]) = (int_64)0
	*($5 + [176]) = [0]
	*($5 + [168]) = (int_64)0
	*(($5 + [152])) = (int_64)0
	*(($5 + [144])) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [384]) = [0]
	*($5 + [376]) = (int_64)0
	*($5 + [344]) = [0]
	*($5 + [336]) = (int_64)0
	CALL $111($0, $4, ($5 + [360]), ($5 + [168]), ($5 + [128]), ($5 + [376]), ($5 + [352]), ($5 + [336]))
	*($5 + [328]) = [0]
	*($5 + [320]) = (int_64)0
	CALL $112($0, ($5 + [360]), $3, ($5 + [128]), *($5 + [352]), ($5 + [320]))
	$4 = CALL $51(($5 + [304]), $4)
	$2 = *($5 + [320])
	if ( (( *($5 + [324]) ? uint_32($2 >> [1]) : ($2 & [1]) ) == 0) ){ goto $label$18 }
	CALL $57($4, [44])
	$2 = *($5 + [320])
	$8 = ($2 & [1])
	CALL $58($4, ( *(($5 + [328])) ? (($5 + [320]) | [1]) : $8 ), ( *($5 + [324]) ? uint_32($2 >> [1]) : $8 ))
	
.LABEL $label$18
	$9 = *($0)
	*($5 + [248]) = [12258]
	*($5 + [252]) = CALL $15([12258])
	*($5 + [16]) = *($5 + [248])
	$10 = *(CALL $81(($5 + [256]), ($5 + [16])))
	$7 = (int_64)4301877912145143680
	$2 = ($3 + [8])
	$6 = *($2)
	if ( ((int_64)$6 == (int_64)289176438024) ){ goto $label$19 }
	if ( ((int_64)$6 == (int_64)293455873288) ){ goto $label$19 }
	if ( ((int_64)$6 == (int_64)310651471112) ){ goto $label$19 }
	CALL eosio_assert([0], [8367])
	$7 = (int_64)0
	
.LABEL $label$19
	*($5 + [232]) = [11845]
	*($5 + [236]) = CALL $15([11845])
	*($5 + [8]) = *($5 + [232])
	$8 = CALL $81(($5 + [240]), ($5 + [8]))
	*((($5 + [184]) + [24])) = *($2)
	*($5 + [184]) = *($0)
	*($5 + [192]) = *($5 + [360])
	*($5 + [200]) = *($3)
	$0 = CALL $51((($5 + [184]) + [32]), $4)
	*($5 + [264]) = $7
	*($5 + [272]) = *($8)
	*(($2 = CALL $7([16]))) = $9
	*($2 + [8]) = $10
	*((($5 + [264]) + [36])) = [0]
	$8 = ($2 + [16])
	*((($5 + [264]) + [24])) = $8
	*(($5 + [284])) = $8
	*($5 + [280]) = $2
	*($5 + [292 align=4]) = (int_64)0
	$2 = *($0)
	$0 = ( *((($5 + [184]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($0 + [32])
	$7 = (CASTING uint_64)(uint_32 $0)
	$0 = ($5 + [292])
	
.LOOP $label$20:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $113($0, $2)
	$0 = *(($5 + [296]))
	$2 = *(($5 + [292]))
	goto $label$15 
	
.LABEL $label$17
	*($5 + [344]) = [0]
	*($5 + [336]) = (int_64)0
	*($5 + [304]) = (int_64)0
	CALL $114($0, $4, ($5 + [336]), ($5 + [304]))
	if ( ((int_64)*($5 + [304]) != (int_64)0) ){ goto $label$21 }
	*($5 + [304]) = *($1)
	
.LABEL $label$21
	$7 = *(($3 + [8]))
	if ( ((int_64)$7 == (int_64)289176438024) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)293455873288) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)310651471112) ){ goto $label$12 }
	$6 = (int_64)10000000
	goto $label$11 
	
.LABEL $label$16
	$0 = [0]
	$2 = [0]
	
.LABEL $label$15
	*($5 + [92]) = $2
	*($5 + [88]) = $2
	*($5 + [96]) = $0
	*($5 + [368]) = ($5 + [88])
	*($5 + [392]) = ($5 + [184])
	CALL $115(($5 + [392]), ($5 + [368]))
	CALL $116(($5 + [264]))
	$2 = *($5 + [292])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($5 + [296])) = $2
	CALL $9($2)
	
.LABEL $label$22
	$2 = *($5 + [280])
	if ( ($2 == 0) ){ goto $label$23 }
	*(($5 + [284])) = $2
	CALL $9($2)
	
.LABEL $label$23
	if ( (*($5 + [216]) & [1]) ){ goto $label$25 }
	if ( (*($5 + [304]) & [1]) ){ goto $label$24 }
	goto $label$10 
	
.LABEL $label$25
	CALL $9(*(($5 + [224])))
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$24
	CALL $9(*($4 + [8]))
	$2 = [1]
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	$6 = (int_64)2000000000
	goto $label$11 
	
.LABEL $label$13
	$6 = (int_64)100000
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [8367])
	$7 = *(($3 + [8]))
	$6 = (int_64)2147483647
	
.LABEL $label$11
	*($5 + [168]) = $6
	*($5 + [176]) = $7
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$7 = $6
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$7 = $6
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $4 ){ goto $label$30 }
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	CALL eosio_assert([0], [13187])
	if ( ((int_64)*(($3 + [8])) == (int_64)*((($5 + [168]) + [8]))) ){ goto $label$26 }
	CALL eosio_assert([0], [12951])
	
.LABEL $label$26
	if ( ((int_64)*($3) >= (int_64)*($5 + [168])) ){ goto $label$37 }
	*(($5 + [192])) = [0]
	*($5 + [184]) = (int_64)0
	$2 = CALL $15([12265])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$40 }
	*($5 + [184]) = ($2 << [1])
	$4 = (($5 + [184]) | [1])
	if ( $2 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$8 = (($2 + [16]) & [-16])
	$4 = CALL $7($8)
	*($5 + [184]) = ($8 | [1])
	*($5 + [192]) = $4
	*($5 + [188]) = $2
	
.LABEL $label$39
	CALL memcpy($4, [12265], $2)
	
.LABEL $label$38
	*(($4 + $2)) = [0]
	CALL $117(($5 + [264]), ($5 + [168]))
	$2 = *($5 + [264])
	$4 = ($2 & [1])
	CALL $58(($5 + [184]), ( *($5 + [272]) ? (($5 + [264]) | [1]) : $4 ), ( *($5 + [268]) ? uint_32($2 >> [1]) : $4 ))
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$41 }
	CALL $9(*(($5 + [272])))
	
.LABEL $label$41
	CALL eosio_assert([0], ( *($5 + [192]) ? (($5 + [184]) | [1]) : (*($5 + [184]) & [1]) ))
	if ( ((*($5 + [184]) & [1]) == 0) ){ goto $label$37 }
	CALL $9(*(($5 + [192])))
	
.LABEL $label$37
	$7 = *(($3 + [8]))
	if ( ((int_64)$7 == (int_64)293455873288) ){ goto $label$43 }
	if ( ((int_64)$7 != (int_64)289176438024) ){ goto $label$42 }
	
.LABEL $label$43
	*($5 + [192]) = [0]
	*($5 + [184]) = (int_64)0
	if ( CALL $77(( *((($5 + [336]) + [8])) ? (($5 + [336]) | [1]) : (*($5 + [336]) & [1]) ), ($5 + [184])) ){ goto $label$44 }
	CALL eosio_assert([0], [12071])
	
.LABEL $label$44
	$2 = *($5 + [184])
	if ( ($2 == 0) ){ goto $label$42 }
	*($5 + [188]) = $2
	CALL $9($2)
	
.LABEL $label$42
	*((($5 + [264]) + [32])) = [0]
	*($5 + [280]) = (int_64)-1
	*($5 + [288]) = (int_64)0
	$7 = *($0)
	*($5 + [264]) = $7
	*($5 + [272]) = $7
	*($5 + [360]) = CALL $118($0, ($5 + [264]))
	*(($8 = (($5 + [128]) + [32]))) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	*($5 + [164]) = [0]
	$7 = *($0)
	*($5 + [128]) = $7
	*($5 + [136]) = $7
	*($5 + [188]) = $1
	*($5 + [200]) = $3
	*($5 + [184]) = ($5 + [360])
	*($5 + [192]) = ($5 + [336])
	*($5 + [196]) = ($5 + [304])
	*($5 + [376]) = $7
	if ( ((int_64)$7 == (int_64)CALL current_receiver()) ){ goto $label$45 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$45
	*($5 + [92]) = ($5 + [184])
	*($5 + [88]) = ($5 + [128])
	*($5 + [96]) = ($5 + [376])
	*(($2 = CALL $7([112])) + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*($2 + [64]) = (int_64)0
	*(($2 + [88])) = (int_64)0
	*(($2 + [80])) = (int_64)0
	*(($2 + [72])) = (int_64)0
	*($2 + [96]) = ($5 + [128])
	CALL $119(($5 + [88]), $2)
	*($5 + [320]) = $2
	$7 = *($2)
	*($5 + [88]) = $7
	$11 = *($2 + [100])
	*($5 + [352]) = $11
	$12 = ($5 + [156])
	$4 = *($12)
	if ( ((uint_32)$4 >= (uint_32)*($8)) ){ goto $label$48 }
	*($4 + [8]) = $7
	*($4 + [16]) = $11
	*($5 + [320]) = [0]
	*($4) = $2
	*($12) = ($4 + [24])
	$2 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( $2 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL $120(($5 + [152]), ($5 + [320]), ($5 + [88]), ($5 + [352]))
	$2 = *($5 + [320])
	*($5 + [320]) = [0]
	if ( ($2 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$49 }
	CALL $9(*(($2 + [48])))
	
.LABEL $label$49
	CALL $9($2)
	
.LABEL $label$46
	$9 = *($0)
	*($5 + [72]) = [12258]
	*($5 + [76]) = CALL $15([12258])
	*($5 + [32]) = *($5 + [72])
	$10 = *(CALL $81(($5 + [80]), ($5 + [32])))
	$7 = (int_64)4301877912145143680
	$2 = ($3 + [8])
	$6 = *($2)
	if ( ((int_64)$6 == (int_64)289176438024) ){ goto $label$50 }
	if ( ((int_64)$6 == (int_64)293455873288) ){ goto $label$50 }
	if ( ((int_64)$6 == (int_64)310651471112) ){ goto $label$50 }
	CALL eosio_assert([0], [8367])
	$7 = (int_64)0
	
.LABEL $label$50
	*($5 + [56]) = [11845]
	*($5 + [60]) = CALL $15([11845])
	*($5 + [24]) = *($5 + [56])
	$8 = CALL $81(($5 + [64]), ($5 + [24]))
	$4 = CALL $51(($5 + [40]), ($5 + [336]))
	CALL $121(($5 + [320]), $5, *($5 + [360]), $1, ($5 + [304]), $4)
	*(($1 = (($5 + [88]) + [24]))) = [0]
	*((($5 + [184]) + [24])) = *($2)
	$2 = (($5 + [320]) + [8])
	*(($5 + [224])) = *($2)
	*($2) = [0]
	*($5 + [192]) = (int_64)4301877904239043216
	*($5 + [88]) = $7
	*($5 + [104]) = (int_64)0
	*($5 + [184]) = *($0)
	*($5 + [200]) = *($3)
	*($5 + [216]) = *($5 + [320])
	*($5 + [320]) = (int_64)0
	*($5 + [96]) = *($8)
	*(($2 = CALL $7([16]))) = $9
	*($2 + [8]) = $10
	*((($5 + [88]) + [36])) = [0]
	$0 = ($2 + [16])
	*($1) = $0
	*(($5 + [108])) = $0
	*($5 + [104]) = $2
	*($5 + [116 align=4]) = (int_64)0
	$2 = *($5 + [216])
	$0 = ( *((($5 + [184]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($0 + [32])
	$7 = (CASTING uint_64)(uint_32 $0)
	$0 = ($5 + [116])
	
.LOOP $label$51:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$51 }
	if ( ($2 == 0) ){ goto $label$53 }
	CALL $113($0, $2)
	$0 = *(($5 + [120]))
	$2 = *(($5 + [116]))
	goto $label$52 
	
.LABEL $label$53
	$0 = [0]
	$2 = [0]
	
.LABEL $label$52
	*($5 + [380]) = $2
	*($5 + [376]) = $2
	*($5 + [384]) = $0
	*($5 + [392]) = ($5 + [376])
	*($5 + [352]) = ($5 + [184])
	CALL $115(($5 + [352]), ($5 + [392]))
	CALL $116(($5 + [88]))
	$2 = *($5 + [116])
	if ( ($2 == 0) ){ goto $label$54 }
	*(($5 + [120])) = $2
	CALL $9($2)
	
.LABEL $label$54
	$2 = *($5 + [104])
	if ( ($2 == 0) ){ goto $label$55 }
	*(($5 + [108])) = $2
	CALL $9($2)
	
.LABEL $label$55
	if ( (*(($5 + [216])) & [1]) ){ goto $label$57 }
	if ( (*($5 + [320]) & [1]) ){ goto $label$56 }
	goto $label$35 
	
.LABEL $label$57
	CALL $9(*(($5 + [224])))
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$56
	CALL $9(*(($5 + [328])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	CALL $50(($5 + [184]))
	
.LABEL $label$35
	if ( (*($4) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	$0 = *($5 + [152])
	if ( $0 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL $9(*($4 + [8]))
	$0 = *($5 + [152])
	if ( ($0 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$8 = ($5 + [156])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$59 }
	
.LOOP $label$60:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$61 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$62 }
	CALL $9(*(($4 + [48])))
	
.LABEL $label$62
	CALL $9($4)
	
.LABEL $label$61
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$60 }
	$2 = *(($5 + [152]))
	goto $label$58 
	
.LABEL $label$59
	$2 = $0
	
.LABEL $label$58
	*($8) = $0
	CALL $9($2)
	
.LABEL $label$31
	$0 = *($5 + [288])
	if ( ($0 == 0) ){ goto $label$63 }
	$8 = ($5 + [292])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$65 }
	
.LOOP $label$66:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$67 }
	CALL $9($4)
	
.LABEL $label$67
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$66 }
	$2 = *(($5 + [288]))
	goto $label$64 
	
.LABEL $label$65
	$2 = $0
	
.LABEL $label$64
	*($8) = $0
	CALL $9($2)
	
.LABEL $label$63
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($5 + [344])))
	goto $label$1 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($5 + [320]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($5 + [336]) & $2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(*(($5 + [328])))
	if ( ((*($5 + [336]) & $2) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $9(*(($5 + [344])))
	$2 = [1]
	if ( ((*($5 + [376]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = [1]
	if ( (*($5 + [376]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5 + [168]) & $2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	CALL $9(*(($5 + [384])))
	if ( ((*($5 + [168]) & $2) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	CALL $9(*(($5 + [176])))
	$global$0 = ($5 + [400])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [400])
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [12351])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [12456])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [12389])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [12456])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL $0()
	*($3 + [240]) = [11845]
	*($3 + [244]) = CALL $15([11845])
	*($3 + [120]) = *($3 + [240])
	if ( ((int_64)*(CALL $81(($3 + [248]), ($3 + [120]))) != (int_64)$2) ){ goto $label$15 }
	if ( ((int_64)$1 != (int_64)4301877912145143680) ){ goto $label$14 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [6]
	*($3 + [8]) = *($3 + [232])
	CALL $83($0, (int_64)4301877912145143680, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-2109033241963020289) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)4982871653292146687) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)4982871653568766495) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4982871653292146688) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4982871653568766464) ){ goto $label$1 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [40]) = *($3 + [200])
	CALL $85($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$14
	CALL eosio_assert([0], [8367])
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 > (int_64)-4997502822602144769) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7297972528087695360) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-4997502823276370784) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4997502822602145792) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [8]
	*($3 + [56]) = *($3 + [184])
	CALL $87($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-2109033241963020288) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)3626459241337176064) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4982871653266124288) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [9]
	*($3 + [24]) = *($3 + [216])
	CALL $89($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4997502822602144768) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4416969693139988080) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-2150128270049127568) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [80]) = *($3 + [160])
	CALL $91($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4982871653568766496) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [11]
	*($3 + [48]) = *($3 + [192])
	CALL $93($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [212]) = [0]
	*($3 + [208]) = [12]
	*($3 + [32]) = *($3 + [208])
	CALL $95($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [228]) = [0]
	*($3 + [224]) = [13]
	*($3 + [16]) = *($3 + [224])
	CALL $97($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [180]) = [0]
	*($3 + [176]) = [14]
	*($3 + [64]) = *($3 + [176])
	CALL $99($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [172]) = [0]
	*($3 + [168]) = [15]
	*($3 + [72]) = *($3 + [168])
	CALL $101($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [156]) = [0]
	*($3 + [152]) = [16]
	*($3 + [88]) = *($3 + [152])
	CALL $103($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [17]
	*($3 + [104]) = *($3 + [136])
	CALL $105($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [148]) = [0]
	*($3 + [144]) = [18]
	*($3 + [96]) = *($3 + [144])
	CALL $107($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [132]) = [0]
	*($3 + [128]) = [19]
	*($3 + [112]) = *($3 + [128])
	CALL $109($1, $1, ($3 + [112]))
	
.LABEL $label$1
	CALL $68([0])
	$global$0 = ($3 + [256])
}

int_32 .FUNC $182 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12903])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4520852774463733760)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $195(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $7([64])) + [32]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $244(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $145(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [28]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $239(($3 + [32]), ($3 + [24]))
	*($5 + [32]) = $1
	*($5 + [36 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5 + [8])
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $155(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [32]) = *(*($4 + [4]))
	$5 = *(*($4 + [8]) + [4])
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5)
	*($1 + [24]) = *(*($4 + [12]))
	$5 = *($0)
	$6 = ($1 + [40])
	CALL $53($6, *($4 + [16]))
	$4 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [36])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [24])
	$9 = ($1 + [16])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $7
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $6
	CALL $241(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($5 + [8]), (int_64)-2109262807403457152, *(*($0 + [8])), $8, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($5 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = ((int_64)((int_64)*(($1 + [16])) * (int_64)100000000000) + (int_64)*(($1 + [24])))
	*($1 + [60]) = CALL db_idx64_store($8, (int_64)-2109262807403457152, $10, $11, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = *($1 + [8])
	$5 = *($1 + [16])
	$6 = CALL $51(($2 + [16]), ($1 + [24]))
	$1 = CALL $51($2, ($1 + [36]))
	*($2 + [32]) = $5
	*($2 + [40]) = $4
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	CALL void $8((int_32 $3), (int_64 ($2 + [40])), (int_32 ($2 + [32])), (int_32 $6), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($1 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($6 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $122(*($1), ($3 + [24]))
	CALL $122(*($1), ($3 + [36]))
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-2108902700040753151, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [8]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*(($4 + [28])) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $148($7, CALL $fimport$40(*($7), *($7 + [8]), (int_64)-2108902700040753152, $6))
	if ( ((int_32)*($4 + [28]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = *($1 + [8])
	$5 = CALL $51(($2 + [16]), ($1 + [16]))
	$1 = CALL $51($2, ($1 + [28]))
	*($2 + [32]) = $4
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	CALL void $7((int_32 ($2 + [40])), (int_32 ($2 + [32])), (int_32 $5), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($5 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([56]))) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	CALL $240(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $152(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [36])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$12
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-2109262807403457152, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [52]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $149($7, CALL $fimport$40(*($7), *($7 + [8]), (int_64)-2109262807403457152, $6))
	if ( ((int_32)*($4 + [52]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_64 $36
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ((int_32)( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ) == (int_32)[64]) ){ goto $label$1 }
	CALL eosio_assert([0], [11171])
	
.LABEL $label$1
	CALL $71($1, $2, [32])
	$4 = *($2 + [7])
	$5 = *($2 + [6])
	$6 = *($2 + [5])
	$7 = *($2 + [4])
	$8 = *($2 + [3])
	$9 = *($2 + [2])
	$10 = *($2 + [1])
	$11 = *($2)
	$12 = *($2 + [23])
	$13 = *($2 + [22])
	$14 = *($2 + [21])
	$15 = *($2 + [20])
	$16 = *($2 + [19])
	$17 = *($2 + [18])
	$18 = *($2 + [17])
	$19 = *($2 + [16])
	$20 = *($2 + [15])
	$21 = *($2 + [14])
	$22 = *($2 + [13])
	$23 = *($2 + [12])
	$24 = *($2 + [11])
	$25 = *($2 + [10])
	$26 = *($2 + [8])
	$27 = *($2 + [9])
	$28 = ((int_64)*($2 + [24]) << (int_64)56)
	$29 = ((int_64)$28 | (int_64)((int_64)*($2 + [25]) << (int_64)48))
	$30 = ((int_64)$29 | (int_64)((int_64)*($2 + [26]) << (int_64)40))
	$31 = ((int_64)$30 | (int_64)((int_64)*($2 + [27]) << (int_64)32))
	$32 = ((int_64)$31 | (int_64)((int_64)*($2 + [28]) << (int_64)24))
	$33 = ((int_64)$32 | (int_64)((int_64)*($2 + [29]) << (int_64)16))
	$34 = ((int_64)$33 | (int_64)((int_64)*($2 + [30]) << (int_64)8))
	$35 = ((int_64)$34 + (int_64)*($2 + [31]))
	*($0 + [16]) = $35
	$36 = ((int_64)$26 << (int_64)56)
	$26 = ((int_64)$36 | (int_64)((int_64)$27 << (int_64)48))
	$25 = ((int_64)$26 | (int_64)((int_64)$25 << (int_64)40))
	$24 = ((int_64)$25 | (int_64)((int_64)$24 << (int_64)32))
	$23 = ((int_64)$24 | (int_64)((int_64)$23 << (int_64)24))
	$22 = ((int_64)$23 | (int_64)((int_64)$22 << (int_64)16))
	$21 = ((int_64)$22 | (int_64)((int_64)$21 << (int_64)8))
	$20 = ((int_64)$20 + (int_64)$21)
	*($0) = $20
	*(($0 + [24])) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$12 + (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$18 << (int_64)48) | (int_64)((int_64)$19 << (int_64)56)) | (int_64)((int_64)$17 << (int_64)40)) | (int_64)((int_64)$16 << (int_64)32)) | (int_64)((int_64)$15 << (int_64)24)) | (int_64)((int_64)$14 << (int_64)16)) | (int_64)((int_64)$13 << (int_64)8))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($29 <= $28))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($30 <= $29))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($31 <= $30))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($32 <= $31))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($33 <= $32))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($34 <= $33))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($35 <= $34)))
	*($0 + [8]) = ((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$4 + (int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)$10 << (int_64)48) | (int_64)((int_64)$11 << (int_64)56)) | (int_64)((int_64)$9 << (int_64)40)) | (int_64)((int_64)$8 << (int_64)32)) | (int_64)((int_64)$7 << (int_64)24)) | (int_64)((int_64)$6 << (int_64)16)) | (int_64)((int_64)$5 << (int_64)8))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($26 <= $36))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($25 <= $26))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($24 <= $25))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($23 <= $24))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($22 <= $23))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($21 <= $22))) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($20 <= $21)))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [-1]
	$6 = *($0)
	if ( ((uint_32)( *($0 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= (uint_32)$3) ){ goto $label$3 }
	$5 = CALL $59($0, $2, $3)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$6 }
	CALL $52($4, $0, $3, ($5 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	goto $label$4 
	
.LABEL $label$6
	$5 = *($0)
	CALL $52($4, $0, $3, (( *(($0 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) ) - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$4
	CALL $55($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return $5
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $55($1, [0])
	*(($1 + [8])) = *(($4 + [8]))
	*($1) = *($4)
	$global$0 = ($4 + [16])
	return [-1]
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL $7($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $58($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $50($0)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [10643])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [10643])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $7($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $9($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	if ( (CALL $74($0, $1) == 0) ){ goto $label$3 }
	$3 = ($1 + [4])
	$0 = *($1)
	$4 = (*($1 + [4]) - $0)
	if ( ((uint_32)$4 <= (uint_32)[3]) ){ goto $label$2 }
	CALL sha256($0, ($4 + [-4]), ($2 + [32]))
	CALL sha256(($2 + [32]), [32], $2)
	if ( (CALL $17($2, (*(($1 + [4])) + [-4]), [4]) == 0) ){ goto $label$1 }
	*(($1 + [4])) = *($1)
	$global$0 = ($2 + [64])
	return [0]
	
.LABEL $label$3
	$3 = ($1 + [4])
	$0 = *($1)
	
.LABEL $label$2
	*($3) = $0
	$global$0 = ($2 + [64])
	return [0]
	
.LABEL $label$1
	$0 = *($1)
	$4 = (*(($1 + [4])) - $0)
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$5 }
	CALL $78($1, [-4])
	goto $label$4 
	
.LABEL $label$5
	*($3) = (($0 + $4) + [-4])
	
.LABEL $label$4
	$global$0 = ($2 + [64])
	return [1]
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $60(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $15($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL $7($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $60(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [11552]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $60(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL $7($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL $9($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $75($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $76($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $65([11202], [11215], [211], [11808])
	
.LABEL $label$8
	CALL $9($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $9($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL $7($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $66($0)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = $global$0
	$2 = $1
	$3 = CALL transaction_size()
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	$4 = CALL read_transaction($1, $3)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [11821])
	
.LABEL $label$1
	CALL $67($0, $1, $4)
	$global$0 = $2
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [16]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $198(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $223 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$1
	*(($5 = CALL $7([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4520708925519560704, $2, (int_64)4520708925519560704, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4520708925519560704) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)4520708925519560705
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4520708925519560704
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)4520708925519560704
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $224(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $9($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $198(*($1), *($0 + [16]))
	CALL $246(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $3, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $198(*($1), *($0 + [16]))
	CALL $246(*($1), *($0 + [20]))
	$global$0 = ($2 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $104($0, $1, $2, $3, $4)
}

int_32 .FUNC $99 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $138(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($8 = (($4 + [128]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [128]) = $9
	*($4 + [112]) = $9
	$3 = *($8)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	$0 = *($4 + [96])
	$1 = *($4 + [88])
	$9 = *($4 + [72])
	*($4 + [128]) = *($4 + [80])
	*($4 + [144]) = $9
	*($4 + [112]) = $1
	*($4 + [104]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 ($4 + [112])), (int_32 ($4 + [104])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [12])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy(($2 + [15]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $5, [8])
	*($3) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $122(*($1), *($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL require_auth((int_64)4301877902857333136)
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	CALL $112($0, $1, $2, $3, (int_64)-1, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($4 + [8])))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $95 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$8 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$2
	CALL read_action_data($8, $7)
	
.LABEL $label$1
	*(($4 + [64])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [88])) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [80]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($4 + [48]), $8, [8])
	$2 = ($8 + [8])
	$9 = (($4 + [48]) | [8])
	$3 = ($7 & [-8])
	if ( ((int_32)$3 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy($9, $2, [8])
	*($4 + [192]) = (int_64)0
	$2 = ($8 + [16])
	if ( ((int_32)$3 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy(($4 + [192]), $2, [8])
	*((($4 + [48]) + [16])) = *($4 + [192])
	$2 = ($8 + [24])
	if ( ((uint_32)($7 + [-24]) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$8
	$10 = ($8 + $7)
	$11 = ($4 + [80])
	$12 = (($4 + [48]) + [32])
	CALL memcpy(($4 + [192]), $2, [32])
	$13 = ($8 + [56])
	$14 = (int_64)0
	$2 = [16]
	$15 = ($4 + [160])
	$3 = [0]
	$16 = (int_64)0
	
.LOOP $label$10:
	$17 = (($4 + [192]) + $3)
	if ( ($2 <= [2]) ){ goto $label$11 }
	$14 = ((int_64)$14 | (int_64)*($17))
	$16 = ((int_64)((int_64)$16 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$14 = ((int_64)$14 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$12
	*($15 + [8]) = $16
	*($15) = ((int_64)$14 | (int_64)*($17))
	$2 = [16]
	$15 = ($15 + [16])
	$14 = (int_64)0
	$16 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$13 }
	if ( ($2 <= [2]) ){ goto $label$14 }
	CALL __ashlti3($4, $14, $16, (($2 << [3]) + [-8]))
	$16 = *(($4 + [8]))
	$14 = *($4)
	
.LABEL $label$14
	*($15) = $14
	*($15 + [8]) = $16
	
.LABEL $label$13
	*($12) = *($4 + [160])
	*(($12 + [8])) = *($4 + [168])
	$2 = (($4 + [160]) + [24])
	*(($12 + [24])) = *($2)
	$3 = (($4 + [160]) + [16])
	*(($12 + [16])) = *($3)
	*(($4 + [36])) = $13
	*((($4 + [16]) + [24])) = $10
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $8
	*(($15 = (($4 + [120]) + [8]))) = *(($9 + [8]))
	*($3) = *(($11 + [16]))
	*($2) = *(($11 + [24]))
	*($4 + [120]) = *($9)
	*($4 + [160]) = *($11)
	*($4 + [168]) = *(($11 + [8]))
	$14 = *($4 + [48])
	*((($4 + [192]) + [24])) = *($2)
	*((($4 + [192]) + [16])) = *($3)
	*((($4 + [136]) + [8])) = *($15)
	*($4 + [152]) = $14
	*($4 + [200]) = *($4 + [168])
	*($4 + [192]) = *($4 + [160])
	*($4 + [136]) = *($4 + [120])
	$2 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$15 }
	$6 = *((*($2) + $6))
	
.LABEL $label$15
	CALL void $2((int_32 ($4 + [152])), (int_32 ($4 + [136])), (int_32 ($4 + [192])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$16 }
	CALL $2($8)
	
.LABEL $label$16
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL require_auth(*($1))
	$4 = *($2 + [8])
	$6 = ($5 & [1])
	$5 = *($2)
	$5 = ( *($2 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [12508])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ( $4 ? ($2 + [1]) : $6 )
	$7 = (int_64)0
	
.LOOP $label$6:
	$4 = (($6 + $5) + [-1])
	$2 = *($4)
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [12553])
	$2 = *($4)
	
.LABEL $label$7
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	if ( ((int_64)$7 == (int_64)1129595461) ){ goto $label$1 }
	if ( ((int_64)$7 == (int_64)1146312005) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$7 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert([0], [12834])
	
.LABEL $label$1
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [124]) = [0]
	$8 = *($0)
	*($3 + [88]) = $8
	*($3 + [96]) = $8
	*($3 + [80]) = ($3 + [88])
	CALL $123(($3 + [40]), ($3 + [80]), $1)
	$5 = *($3 + [44])
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_64)*($1) != (int_64)*($5 + [8])) ){ goto $label$8 }
	CALL eosio_assert([0], [11854])
	
.LABEL $label$8
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$8 = *($0)
	*($3 + [40]) = $8
	$9 = *($1)
	*($3 + [48]) = $9
	$5 = CALL db_find_i64($8, $9, (int_64)3607749779137757184, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	if ( ((int_32)*(CALL $124(($3 + [40]), $5) + [28]) == (int_32)($3 + [40])) ){ goto $label$10 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$10
	CALL eosio_assert([0], [11889])
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$8 = *($0)
	*($3) = $8
	*($3 + [8]) = $8
	$9 = CALL $125($0, $3)
	$8 = *($0)
	if ( ((int_64)*($3 + [88]) == (int_64)CALL current_receiver()) ){ goto $label$11 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$11
	*(($5 = CALL $7([40])) + [24]) = ($3 + [88])
	*($5 + [16]) = $7
	*($5) = $9
	*($5 + [8]) = *($1)
	*($3 + [160]) = (($3 + [128]) + [24])
	*($3 + [156]) = ($3 + [128])
	*($3 + [152]) = ($3 + [128])
	*($3 + [168]) = ($3 + [152])
	$2 = ($5 + [8])
	*($3 + [180]) = $2
	*($3 + [176]) = $5
	*($3 + [184]) = ($5 + [16])
	CALL $126(($3 + [176]), ($3 + [168]))
	$7 = *($5)
	$4 = (($3 + [88]) + [8])
	*($5 + [28]) = CALL db_store_i64(*($4), (int_64)-7297972528087689856, $8, $7, ($3 + [128]), [24])
	$6 = (($3 + [88]) + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$12 }
	*($6) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$7 = *($5)
	$9 = *($4)
	*($3 + [176]) = *($2)
	*($5 + [32]) = CALL db_idx64_store($9, (int_64)-7297972528087689856, $8, $7, ($3 + [176]))
	*($3 + [176]) = $5
	$7 = *($5)
	*($3 + [128]) = $7
	$4 = *(($5 + [28]))
	*($3 + [152]) = $4
	$6 = (($3 + [88]) + [28])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [120]))) ){ goto $label$15 }
	*($2 + [8]) = $7
	*($2 + [16]) = $4
	*($3 + [176]) = [0]
	*($2) = $5
	*($6) = ($2 + [24])
	$5 = *($3 + [176])
	*($3 + [176]) = [0]
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $127(($3 + [112]), ($3 + [176]), ($3 + [128]), ($3 + [152]))
	$5 = *($3 + [176])
	*($3 + [176]) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $9($5)
	
.LABEL $label$13
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$16 }
	$6 = ($3 + [28])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $9($2)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($3 + [24]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $4
	
.LABEL $label$17
	*($6) = $4
	CALL $9($5)
	
.LABEL $label$16
	$4 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$21 }
	$6 = ($3 + [68])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$26 }
	CALL $9(*(($2 + [24])))
	
.LABEL $label$26
	CALL $9($2)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($3 + [64]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $4
	
.LABEL $label$22
	*($6) = $4
	CALL $9($5)
	
.LABEL $label$21
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$27 }
	$6 = ($3 + [116])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $9($2)
	
.LABEL $label$31
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$30 }
	$5 = *(($3 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$5 = $4
	
.LABEL $label$28
	*($6) = $4
	CALL $9($5)
	
.LABEL $label$27
	$global$0 = ($3 + [192])
}

int_32 .FUNC $97 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *($4 + [60])
	
.LABEL $label$4
	CALL memcpy(($4 + [72]), $3, [8])
	*($4 + [60]) = ($3 + [8])
	$3 = (($4 + [72]) + [8])
	CALL $122(($4 + [56]), $3)
	*(($8 = (($4 + [8]) + [8]))) = *((($4 + [56]) + [8]))
	*($4 + [8]) = *($4 + [56])
	$8 = *($8)
	*((($4 + [96]) + [8])) = $8
	*(($9 = (($4 + [112]) + [8]))) = $8
	$10 = *($4 + [8])
	*($4 + [112]) = $10
	*($4 + [96]) = $10
	$8 = *($9)
	*((($4 + [128]) + [8])) = $8
	*(($4 + [48])) = $8
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$0 = *($4 + [72])
	$3 = CALL $51(($4 + [128]), $3)
	*($4 + [112]) = $0
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($8) + $6))
	
.LABEL $label$5
	CALL void $8((int_32 ($4 + [112])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $9(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$6
	CALL $9(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $90 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [208])
	$global$0 = $6
	*($6 + [160]) = $1
	CALL require_auth((int_64)4301877902857333136)
	$7 = [0]
	*(($6 + [152])) = [0]
	*($6 + [136]) = (int_64)-1
	*($6 + [144]) = (int_64)0
	*($6 + [156]) = [0]
	$1 = *($0)
	*($6 + [120]) = $1
	*($6 + [128]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-2108902700040753152, *($2))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $148(($6 + [120]), $8)
	if ( ((int_32)*($7 + [28]) == (int_32)($6 + [120])) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11930])
	
.LABEL $label$1
	$9 = [0]
	*(($6 + [112])) = [0]
	*($6 + [96]) = (int_64)-1
	*($6 + [104]) = (int_64)0
	*($6 + [116]) = [0]
	$1 = *($0)
	*($6 + [80]) = $1
	*($6 + [88]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-2109262807403457152, *($6 + [160]))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $149(($6 + [80]), $8)
	if ( ((int_32)*($9 + [52]) == (int_32)($6 + [80])) ){ goto $label$6 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$6
	if ( ((int_64)*($9 + [8]) == (int_64)*($2)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [12011])
	if ( ((int_64)*([0] + [8]) == (int_64)*($2)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [12041])
	
.LABEL $label$3
	$8 = *($4 + [8])
	$10 = ($2 & [1])
	$2 = *($4)
	$2 = ( *($4 + [4]) ? uint_32($2 >> [1]) : $10 )
	if ( ($2 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [12508])
	goto $label$16 
	
.LABEL $label$17
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$10 = ( $8 ? ($4 + [1]) : $10 )
	$1 = (int_64)0
	
.LOOP $label$18:
	$8 = (($10 + $2) + [-1])
	$4 = *($8)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [12553])
	$4 = *($8)
	
.LABEL $label$19
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$18 }
	if ( ((int_64)$1 == (int_64)1129595461) ){ goto $label$20 }
	if ( ((int_64)$1 != (int_64)1146312005) ){ goto $label$14 }
	
.LABEL $label$20
	*($6 + [72]) = $1
	if ( ((int_64)*($9 + [32]) != (int_64)$1) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$1 = (int_64)0
	
.LABEL $label$14
	CALL eosio_assert([0], [12834])
	*($6 + [72]) = $1
	if ( ((int_64)*($9 + [32]) == (int_64)$1) ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert([0], [12055])
	if ( ((int_64)*($9 + [24]) == (int_64)*($3)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_64)*($9 + [24]) != (int_64)*($3)) ){ goto $label$10 }
	
.LABEL $label$11
	$1 = *($6 + [72])
	if ( ((int_64)$1 == (int_64)1146312005) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [12102])
	$1 = *($6 + [72])
	if ( ((int_64)$1 == (int_64)1146312005) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_64)$1 != (int_64)1129595461) ){ goto $label$7 }
	
.LABEL $label$8
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	if ( CALL $77(( *($5 + [8]) ? ($5 + [1]) : (*($5) & [1]) ), ($6 + [16])) ){ goto $label$21 }
	CALL eosio_assert([0], [12071])
	
.LABEL $label$21
	$2 = *($6 + [16])
	if ( ($2 == 0) ){ goto $label$7 }
	*($6 + [20]) = $2
	CALL $9($2)
	
.LABEL $label$7
	$10 = CALL $51(($6 + [56]), ($9 + [40]))
	if ( $9 ){ goto $label$22 }
	CALL eosio_assert([0], [13289])
	CALL eosio_assert([0], [13323])
	
.LABEL $label$22
	$2 = CALL db_next_i64(*($9 + [56]), ($6 + [16]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$23 }
	CALL $149(($6 + [80]), $2)
	
.LABEL $label$23
	CALL $150(($6 + [80]), $9)
	$1 = *($3)
	$11 = *($7)
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$12 = *($0)
	*($6 + [16]) = $12
	$1 = ((int_64)$1 + (int_64)((int_64)$11 * (int_64)100000000000))
	*($6 + [24]) = $1
	$2 = CALL db_find_i64($12, $1, (int_64)-2109263375683915776, *($6 + [72]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$24 }
	if ( ((int_32)*(CALL $143(($6 + [16]), $2) + [40]) == (int_32)($6 + [16])) ){ goto $label$25 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$25
	CALL eosio_assert([0], [11889])
	
.LABEL $label$24
	$1 = *($0)
	*($6 + [8]) = $5
	*($6 + [12]) = $10
	*($6 + [4]) = ($6 + [160])
	*($6) = ($6 + [72])
	*($6 + [200]) = $1
	if ( ((int_64)*($6 + [16]) == (int_64)CALL current_receiver()) ){ goto $label$26 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$26
	*($6 + [180]) = $6
	*($6 + [176]) = ($6 + [16])
	*($6 + [184]) = ($6 + [200])
	*(($2 = CALL $7([56]))) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*($2 + [24 align=4]) = (int_64)0
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [40]) = ($6 + [16])
	CALL $151(($6 + [176]), $2)
	*($6 + [192]) = $2
	$1 = *($2)
	*($6 + [176]) = $1
	$8 = *($2 + [44])
	*($6 + [172]) = $8
	$9 = ($6 + [44])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($6 + [48]))) ){ goto $label$31 }
	*($4 + [8]) = $1
	*($4 + [16]) = $8
	*($6 + [192]) = [0]
	*($4) = $2
	*($9) = ($4 + [24])
	$2 = *($6 + [192])
	*($6 + [192]) = [0]
	if ( ($2 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $152(($6 + [40]), ($6 + [192]), ($6 + [176]), ($6 + [172]))
	$2 = *($6 + [192])
	*($6 + [192]) = [0]
	if ( $2 ){ goto $label$29 }
	
.LABEL $label$30
	$8 = *($6 + [40])
	if ( ($8 == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$32 }
	CALL $9(*(($2 + [36])))
	
.LABEL $label$32
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$33 }
	CALL $9(*(($2 + [24])))
	
.LABEL $label$33
	CALL $9($2)
	$8 = *($6 + [40])
	if ( ($8 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$9 = ($6 + [44])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$35 }
	
.LOOP $label$36:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$37 }
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$38 }
	CALL $9(*(($2 + [36])))
	
.LABEL $label$38
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$39 }
	CALL $9(*(($2 + [24])))
	
.LABEL $label$39
	CALL $9($2)
	
.LABEL $label$37
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$36 }
	$2 = *(($6 + [40]))
	goto $label$34 
	
.LABEL $label$35
	$2 = $8
	
.LABEL $label$34
	*($9) = $8
	CALL $9($2)
	
.LABEL $label$27
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$40 }
	CALL $9(*($10 + [8]))
	
.LABEL $label$40
	$8 = *($6 + [104])
	if ( ($8 == 0) ){ goto $label$41 }
	$10 = ($6 + [108])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$43 }
	
.LOOP $label$44:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$46 }
	CALL $9(*(($4 + [48])))
	
.LABEL $label$46
	CALL $9($4)
	
.LABEL $label$45
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$44 }
	$2 = *(($6 + [104]))
	goto $label$42 
	
.LABEL $label$43
	$2 = $8
	
.LABEL $label$42
	*($10) = $8
	CALL $9($2)
	
.LABEL $label$41
	$8 = *($6 + [144])
	if ( ($8 == 0) ){ goto $label$47 }
	$10 = ($6 + [148])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$49 }
	
.LOOP $label$50:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$51 }
	CALL $9($4)
	
.LABEL $label$51
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$50 }
	$2 = *(($6 + [144]))
	goto $label$48 
	
.LABEL $label$49
	$2 = $8
	
.LABEL $label$48
	*($10) = $8
	CALL $9($2)
	
.LABEL $label$47
	$global$0 = ($6 + [208])
}

int_32 .FUNC $91 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $146(($4 + [24]), ($4 + [160]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$5 = *($5)
	*((($4 + [128]) + [8])) = $5
	*(($6 = (($4 + [144]) + [8]))) = $5
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$5 = *($6)
	*((($4 + [160]) + [8])) = $5
	*(($4 + [48])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $147(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [108]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $2($3)
	$3 = [1]
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($4 + [116])))
	if ( (*($4 + [96]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [96]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($4 + [104])))
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth((int_64)4301877903122879952)
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	$0 = CALL db_find_i64($2, $2, (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $135($1, $0)
	if ( ((int_32)*($0 + [8]) == (int_32)$1) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	$3 = CALL db_next_i64(*($0 + [12]), ($1 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL $135($1, $3)
	
.LABEL $label$3
	CALL $136($1, $0)
	
.LABEL $label$1
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $9($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $9($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

int_32 .FUNC $93 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), ($0 + [16]))
	CALL $122(*($1), ($0 + [28]))
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([40])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $242(($3 + [32]), ($3 + [24]))
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $127(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $9($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$9 = *(($1 + [32]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7297972528087689856, ($2 + [8]), *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $53($6, *($4 + [8]))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [16])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $7
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	CALL $243(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $2($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	CALL $122(*($1), ($0 + [8]))
	$3 = ($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [48]), $5, [8])
	*(($0 + [32])) = *($2 + [48])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $1) > (uint_32)[31]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$1 = *(($4 + [4]))
	
.LABEL $label$4
	$3 = ($0 + [48])
	CALL memcpy(($2 + [48]), $1, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$6 = (int_64)0
	$4 = [16]
	$0 = ($2 + [16])
	$1 = [0]
	$7 = (int_64)0
	
.LOOP $label$6:
	$5 = (($2 + [48]) + $1)
	if ( ($4 <= [2]) ){ goto $label$7 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$8 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$8
	*($0 + [8]) = $7
	*($0) = ((int_64)$6 | (int_64)*($5))
	$4 = [16]
	$0 = ($0 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$9 }
	if ( ($4 <= [2]) ){ goto $label$10 }
	CALL __ashlti3($2, $6, $7, (($4 << [3]) + [-8]))
	$7 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$10
	*($0) = $6
	*($0 + [8]) = $7
	
.LABEL $label$9
	*($3) = *($2 + [16])
	*(($3 + [8])) = *($2 + [24])
	*(($3 + [24])) = *((($2 + [16]) + [24]))
	*(($3 + [16])) = *((($2 + [16]) + [16]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159550150574080
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)7235159550150574080
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $221(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$5 }
	$4 = ($3 + [-24])
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([0], [13448])
	$5 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$2 = $3
	
.LOOP $label$7:
	$4 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $4
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $9($3)
	
.LABEL $label$8
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$7 }
	$4 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ($3 + [-24])
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $9($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $4
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = ($0 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $213 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $92($3)
	$global$0 = ($3 + [32])
}

void .FUNC $208 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	$5 = ($2 + $4)
	*($3 + [104]) = $5
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($3 + [104]))
	$2 = *($3 + [100])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [100]) = $2
	*($3 + [80]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [100])
	
.LABEL $label$6
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [100]) = ($2 + [8])
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	CALL $122(($3 + [96]), ($3 + [64]))
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	CALL $122(($3 + [96]), ($3 + [48]))
	*(($2 = ($3 + [8]))) = *((($3 + [96]) + [8]))
	*($3) = *($3 + [96])
	$2 = *($2)
	*((($3 + [112]) + [8])) = $2
	*(($4 = (($3 + [128]) + [8]))) = $2
	$6 = *($3)
	*($3 + [128]) = $6
	*($3 + [112]) = $6
	$2 = *($4)
	*((($3 + [144]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [128])
	*($3 + [32]) = $0
	*($3 + [144]) = $0
	CALL $88(($3 + [16]), *($3 + [88]), ($3 + [80]), ($3 + [64]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($3 + [56])))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($3 + [72])))
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [160])
}

void .FUNC $209 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$5 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $4)
	
.LABEL $label$1
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [64]) = (int_64)0
	*($3 + [56]) = (int_64)0
	$2 = ($5 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [112]) = (int_64)0
	$2 = ($5 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	*((($3 + [56]) + [8])) = *($3 + [112])
	*((($3 + [16]) + [24])) = (int_64)0
	*((($3 + [16]) + [16])) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$2 = ($5 + [24])
	if ( ((uint_32)($4 + [-24]) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$8
	$7 = ($5 + $4)
	CALL memcpy(($3 + [112]), $2, [32])
	$8 = ($5 + [56])
	$9 = (int_64)0
	$4 = [16]
	$6 = ($3 + [80])
	$2 = [0]
	$10 = (int_64)0
	
.LOOP $label$10:
	$11 = (($3 + [112]) + $2)
	if ( ($4 <= [2]) ){ goto $label$11 }
	$9 = ((int_64)$9 | (int_64)*($11))
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$9 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$9 = ((int_64)$9 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$12
	*($6 + [8]) = $10
	*($6) = ((int_64)$9 | (int_64)*($11))
	$4 = [16]
	$6 = ($6 + [16])
	$9 = (int_64)0
	$10 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$13 }
	if ( ($4 <= [2]) ){ goto $label$14 }
	CALL __ashlti3($3, $9, $10, (($4 << [3]) + [-8]))
	$10 = *(($3 + [8]))
	$9 = *($3)
	
.LABEL $label$14
	*($6) = $9
	*($6 + [8]) = $10
	
.LABEL $label$13
	*((($3 + [16]) + [24])) = *((($3 + [80]) + [24]))
	*((($3 + [16]) + [16])) = *((($3 + [80]) + [16]))
	*($3 + [24]) = *($3 + [88])
	*($3 + [16]) = *($3 + [80])
	*(($3 + [132])) = $8
	*((($3 + [112]) + [24])) = $7
	*($3 + [120]) = $1
	*($3 + [112]) = $0
	*($3 + [128]) = $5
	CALL require_auth((int_64)4301877902857333136)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL $112(($3 + [112]), ($3 + [72]), ($3 + [56]), ($3 + [16]), (int_64)-1, ($3 + [80]))
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*(($3 + [88])))
	
.LABEL $label$15
	$global$0 = ($3 + [144])
}

void .FUNC $202 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [84]) = $2
	*($3 + [80]) = $2
	*($3 + [88]) = ($2 + $4)
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [84])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $2, [8])
	*($3 + [84]) = ($2 + [8])
	*($3 + [64]) = [0]
	*($3 + [56]) = (int_64)0
	CALL $122(($3 + [80]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *((($3 + [80]) + [8]))
	*($3 + [8]) = *($3 + [80])
	$2 = *($2)
	*((($3 + [96]) + [8])) = $2
	*(($4 = (($3 + [112]) + [8]))) = $2
	$5 = *($3 + [8])
	*($3 + [112]) = $5
	*($3 + [96]) = $5
	$2 = *($4)
	*((($3 + [128]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [112])
	*($3 + [40]) = $0
	*($3 + [128]) = $0
	CALL $96(($3 + [24]), ($3 + [72]), ($3 + [56]))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $9(*((($3 + [56]) + [8])))
	
.LABEL $label$6
	$global$0 = ($3 + [144])
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [13501])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $113($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $53($7, (*(*($4) + [4]) + [40]))
	*($1 + [16]) = *(*(*($4) + [4]) + [16])
	$5 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [72])
	$8 = (CASTING uint_64)(uint_32 $4)
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [64])
	CALL $251(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($6 + [8]), (int_64)-4421661421696319488, *(*($0 + [8])), $8, $4, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($4)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($6 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [104]) = CALL db_idx64_store($8, (int_64)-4421661421696319488, $10, $11, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *(*($4) + [4])
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	$6 = *($0)
	*(($1 + [32])) = *(($5 + [32]))
	*($1 + [24]) = *($5 + [24])
	$7 = ($1 + [40])
	CALL $53($7, (*(*($4) + [4]) + [40]))
	*($1 + [16]) = *(*(*($4) + [4]) + [16])
	$5 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [72])
	$8 = (CASTING uint_64)(uint_32 $4)
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [64])
	CALL $251(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($6 + [8]), (int_64)-4421661421696319488, *(*($0 + [8])), $8, $4, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($4)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$5 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($6 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [104]) = CALL db_idx64_store($8, (int_64)-4421661421696319488, $10, $11, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $206 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	$5 = ($2 + $4)
	*($3 + [104]) = $5
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($3 + [104]))
	$2 = *($3 + [100])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [100]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [100])
	
.LABEL $label$6
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [100]) = ($2 + [8])
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	CALL $122(($3 + [96]), ($3 + [64]))
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	CALL $122(($3 + [96]), ($3 + [48]))
	*(($2 = ($3 + [8]))) = *((($3 + [96]) + [8]))
	*($3) = *($3 + [96])
	$2 = *($2)
	*((($3 + [112]) + [8])) = $2
	*(($4 = (($3 + [128]) + [8]))) = $2
	$6 = *($3)
	*($3 + [128]) = $6
	*($3 + [112]) = $6
	$2 = *($4)
	*((($3 + [144]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [128])
	*($3 + [32]) = $0
	*($3 + [144]) = $0
	CALL $100(($3 + [16]), ($3 + [88]), ($3 + [80]), ($3 + [64]), ($3 + [48]))
	if ( (*($3 + [48]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $9(*(($3 + [56])))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($3 + [72])))
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [160])
}

void .FUNC $207 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	$5 = ($2 + $4)
	*($3 + [120]) = $5
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($3 + [120]))
	$2 = *($3 + [116])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [116]) = $2
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$5 = *((($3 + [112]) + [8]))
	$2 = *($3 + [116])
	
.LABEL $label$6
	CALL memcpy(($3 + [96]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [116]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [116])
	
.LABEL $label$7
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [116]) = ($2 + [8])
	*($3 + [80]) = [0]
	*($3 + [72]) = (int_64)0
	CALL $122(($3 + [112]), ($3 + [72]))
	*($3 + [64]) = [0]
	*($3 + [56]) = (int_64)0
	CALL $122(($3 + [112]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *((($3 + [112]) + [8]))
	*($3 + [8]) = *($3 + [112])
	$2 = *($2)
	*((($3 + [128]) + [8])) = $2
	*(($4 = (($3 + [144]) + [8]))) = $2
	$6 = *($3 + [8])
	*($3 + [144]) = $6
	*($3 + [128]) = $6
	$2 = *($4)
	*((($3 + [160]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [144])
	*($3 + [40]) = $0
	*($3 + [160]) = $0
	CALL $90(($3 + [24]), *($3 + [104]), ($3 + [96]), ($3 + [88]), ($3 + [72]), ($3 + [56]))
	if ( (*($3 + [56]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [72]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $9(*((($3 + [56]) + [8])))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $9(*(($3 + [80])))
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [176])
}

void .FUNC $204 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [48]) = (int_64)0
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	$6 = ($2 + $4)
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)($4 & [-4]) != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy(($3 + [44]), $5, [4])
	*(($3 + [32])) = $6
	*($3 + [24]) = $2
	*((($3 + [8]) + [20])) = ($2 + [20])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $102(($3 + [8]), ($3 + [56]), ($3 + [48]), *($3 + [44]))
	$global$0 = ($3 + [64])
}

void .FUNC $205 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [8]), $6, [1])
	$4 = *($3 + [8])
	*(($3 + [32])) = $5
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [9])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $106(($3 + [8]), ($3 + [40]), ((int_32)$4 != (int_32)[0]))
	$global$0 = ($3 + [48])
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $9($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = *($1 + [8])
	$5 = CALL $51(($2 + [24]), ($1 + [16]))
	$1 = CALL $51(($2 + [8]), ($1 + [28]))
	*($2 + [40]) = $4
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	CALL void $7((int_32 $3), (int_64 ($2 + [40])), (int_32 $5), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($5) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($5 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), ($0 + [16]))
	CALL $122(*($1), ($0 + [28]))
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-7297972528087689856, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [24]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $130($7, CALL $fimport$40(*($7), *($7 + [8]), (int_64)-7297972528087689856, $6))
	if ( ((int_32)*($4 + [24]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*(($4 + [32])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $203($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $55($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $55($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $50($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [32])
	$global$0 = $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$8 = ((uint_64)$2 / (uint_64)(int_64)10)
	$9 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))
	CALL $70(($6 + [16]), int_32((( ($9) | [48]) ? ($9 + [55]) : ($9 <= [10]) ) << [24]) >> [24]), $0)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($7) = [0]
	
.LABEL $label$2
	CALL $55($0, [0])
	*(($0 + [8])) = *((($6 + [16]) + [8]))
	*($0) = *($6 + [16])
	$9 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $8
	if ( $9 ){ goto $label$1 }
	CALL $57($0, [44])
	$2 = *($3)
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$7 }
	$7 = [0]
	$3 = *([0] + [11376])
	
.LOOP $label$9:
	*((($6 + [16]) + ($9 = $7))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$8 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$8
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($7 << [1])
	$3 = ($6 | [1])
	goto $label$5 
	
.LABEL $label$7
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*($6) = [0]
	$9 = ($6 | [1])
	$7 = $9
	goto $label$4 
	
.LABEL $label$6
	$10 = (($7 + [16]) & [-16])
	$3 = CALL $7($10)
	*($6) = ($10 | [1])
	*($6 + [8]) = $3
	*($6 + [4]) = $7
	
.LABEL $label$5
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$10:
	*(($3 + $9)) = *((($6 + [16]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$10 }
	$7 = ($3 + $7)
	$9 = ($6 | [1])
	
.LABEL $label$4
	*($7) = [0]
	$7 = *($6)
	$3 = ($7 & [1])
	CALL $58($0, ( *($6 + [8]) ? $9 : $3 ), ( *($6 + [4]) ? uint_32($7 >> [1]) : $3 ))
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($6 + [8])))
	
.LABEL $label$11
	CALL $57($0, [44])
	$2 = *($4)
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$15 }
	$7 = [0]
	$3 = *([0] + [11376])
	
.LOOP $label$17:
	*((($6 + [16]) + ($9 = $7))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$16 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$17 }
	
.LABEL $label$16
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($6) = ($7 << [1])
	$3 = ($6 | [1])
	goto $label$13 
	
.LABEL $label$15
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*($6) = [0]
	$9 = ($6 | [1])
	$7 = $9
	goto $label$12 
	
.LABEL $label$14
	$10 = (($7 + [16]) & [-16])
	$3 = CALL $7($10)
	*($6) = ($10 | [1])
	*($6 + [8]) = $3
	*($6 + [4]) = $7
	
.LABEL $label$13
	$10 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$18:
	*(($3 + $9)) = *((($6 + [16]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$18 }
	$7 = ($3 + $7)
	$9 = ($6 | [1])
	
.LABEL $label$12
	*($7) = [0]
	$7 = *($6)
	$3 = ($7 & [1])
	CALL $58($0, ( *($6 + [8]) ? $9 : $3 ), ( *($6 + [4]) ? uint_32($7 >> [1]) : $3 ))
	if ( ((*($6) & [1]) == 0) ){ goto $label$19 }
	CALL $9(*(($6 + [8])))
	
.LABEL $label$19
	CALL $57($0, [44])
	$9 = *($5)
	$7 = ($9 & [1])
	CALL $58($0, ( *($5 + [8]) ? ($5 + [1]) : $7 ), ( *($5 + [4]) ? uint_32($9 >> [1]) : $7 ))
	$global$0 = ($6 + [32])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [8]))
	$0 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$0 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, ($2 + [8]), [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159550150574080, (int_64)7235159550150574080)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $135($1, $4)
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$1
	*($2 + [8]) = ((int_64)*(( $3 ? ($2 + [8]) : $3 )) + (int_64)1)
	CALL $176($1, ($2 + [8]), *($0))
	$5 = *($2 + [8])
	$global$0 = ($2 + [16])
	return $5
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([40]))) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [28]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $238(($3 + [32]), ($3 + [24]))
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $133(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [92]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [88])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [88])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [96]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $189(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

void .FUNC $18 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $19 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $184 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [96]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12903])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)6291439975096774656)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12849])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $227(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4520708925519560704, (int_64)4520708925519560704)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $186($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*($3) = $1
	CALL $222($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $223($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $218 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	CALL $122(($3 + [16]), $3)
	CALL require_auth($0)
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	CALL $9(*(($3 + [8])))
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4520708925519560704
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)4520708925519560704
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $224(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $66($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [88])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $113($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $190(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [8])
	$4 = ( $4 ? [19] : ((uint_32)$4 > (uint_32)[19]) )
	$2 = ($2 - (($4 + [26]) & [496]))
	$global$0 = $2
	$4 = (($2 + $4) + [11])
	$1 = CALL $191($1, $2, $4, [0])
	if ( ((uint_32)$1 <= (uint_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [13207])
	
.LABEL $label$1
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = ($1 - $2)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$4
	$0 = $5
	
.LOOP $label$6:
	*($0) = *($2)
	$0 = ($0 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$6 }
	*(($5 + $4)) = [0]
	$global$0 = $3
	return (unreachable)
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	*($5) = [0]
	$global$0 = $3
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = ($5 & [1])
	$5 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$7 = [0]
	
.LOOP $label$2:
	$7 = ($7 + ((int_32)*($5) == (int_32)[44]))
	$5 = ($5 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$2 }
	if ( ($7 <= [2]) ){ goto $label$1 }
	CALL eosio_assert([0], [13043])
	
.LABEL $label$1
	$5 = CALL $73($1, $2, [44], [0])
	$7 = ($7 & [1])
	$7 = *($2)
	$8 = uint_32($7 >> [1])
	$6 = *($2 + [4])
	if ( (( $6 ? $8 : $7 ) == 0) ){ goto $label$7 }
	if ( ((uint_32)( $6 ? $8 : $7 ) >= (uint_32)[65]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [13135])
	$7 = *($2)
	if ( (( *(($2 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) ) <= [65]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [13146])
	$7 = [-1]
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [-1]
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $73($1, ($4 + [32]), [44], ($5 + [1]))
	$6 = *($4 + [32])
	$1 = ($6 & [1])
	*($4 + [16]) = ( *($4 + [40]) ? (($4 + [32]) | [1]) : $1 )
	*($4 + [20]) = ( *($4 + [36]) ? uint_32($6 >> [1]) : $1 )
	*($4 + [8]) = *($4 + [16])
	*($3) = *(CALL $81(($4 + [24]), ($4 + [8])))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert([0], [13166])
	
.LABEL $label$8
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $9(*(($4 + [40])))
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [12777])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $198(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [272])
	$global$0 = $6
	*($6 + [136]) = $4
	$4 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	if ( ((int_64)$4) == (int_64)1129595461) ){ goto $label$1 }
	if ( ((int_64)$4 == (int_64)1146312005) ){ goto $label$1 }
	CALL eosio_assert([0], [12834])
	
.LABEL $label$1
	*((($6 + [96]) + [32])) = [0]
	*($6 + [120]) = (int_64)0
	$7 = *($0)
	*($6 + [96]) = $7
	*($6 + [104]) = $7
	*($6 + [112]) = (int_64)-1
	*($6 + [88]) = CALL $177($0, ($6 + [96]))
	if ( ((int_64)*($6 + [136]) == (int_64)-1) ){ goto $label$12 }
	*((($6 + [144]) + [32])) = [0]
	*($6 + [160]) = (int_64)-1
	*($6 + [168]) = (int_64)0
	*($6 + [180]) = [0]
	$7 = *($0)
	*($6 + [144]) = $7
	*($6 + [152]) = $7
	$8 = CALL db_find_i64($7, $7, (int_64)-2108902700040753152, *($1))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $148(($6 + [144]), $8)
	if ( ((int_32)*($8 + [28]) == (int_32)($6 + [144])) ){ goto $label$13 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$13
	$9 = *($8)
	*($6 + [84]) = $9
	$7 = *($6 + [136])
	$8 = [0]
	*(($6 + [72])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	$10 = *($0)
	*($6 + [40]) = $10
	$7 = ((int_64)$7 + (int_64)((int_64)(CASTING uint_64)(uint_32 $9) * (int_64)100000000000))
	*($6 + [48]) = $7
	$9 = CALL db_find_i64($10, $7, (int_64)-2109263375683915776, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $143(($6 + [40]), $9)
	if ( ((int_32)*($8 + [40]) == (int_32)($6 + [40])) ){ goto $label$10 }
	CALL eosio_assert([0], [12606])
	goto $label$10 
	
.LABEL $label$12
	*((($6 + [144]) + [32])) = [0]
	*($6 + [160]) = (int_64)-1
	*($6 + [168]) = (int_64)0
	$7 = *($0)
	*($6 + [144]) = $7
	$10 = *($1)
	*($6 + [152]) = $10
	$8 = CALL db_find_i64($7, $10, (int_64)3607749779137757184, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	if ( ((int_32)*(CALL $124(($6 + [144]), $8) + [28]) == (int_32)($6 + [144])) ){ goto $label$14 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$14
	$11 = *($6 + [168])
	if ( $11 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$11
	CALL eosio_assert([0], [12123])
	
.LABEL $label$10
	CALL $53($5, ($8 + [28]))
	$11 = *($6 + [64])
	if ( ($11 == 0) ){ goto $label$15 }
	$9 = *((($6 + [40]) + [28]))
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	if ( ((*($8 + [28]) & [1]) == 0) ){ goto $label$20 }
	CALL $9(*(($8 + [36])))
	
.LABEL $label$20
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL $9(*(($8 + [24])))
	
.LABEL $label$21
	CALL $9($8)
	
.LABEL $label$19
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$18 }
	$8 = *(($6 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$8 = $11
	
.LABEL $label$16
	*(($6 + [68])) = $11
	CALL $9($8)
	
.LABEL $label$15
	$11 = *($6 + [168])
	if ( ($11 == 0) ){ goto $label$7 }
	$12 = ($6 + [172])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$23 }
	
.LOOP $label$24:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL $9($9)
	
.LABEL $label$25
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$24 }
	$8 = *(($6 + [168]))
	goto $label$22 
	
.LABEL $label$23
	$8 = $11
	
.LABEL $label$22
	*($12) = $11
	CALL $9($8)
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([0], [12123])
	$11 = *($6 + [168])
	if ( ($11 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$12 = ($6 + [172])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$27 }
	
.LOOP $label$28:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$30 }
	CALL $9(*(($9 + [24])))
	
.LABEL $label$30
	CALL $9($9)
	
.LABEL $label$29
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$28 }
	$8 = *(($6 + [168]))
	goto $label$26 
	
.LABEL $label$27
	$8 = $11
	
.LABEL $label$26
	*($12) = $11
	CALL $9($8)
	
.LABEL $label$7
	*((($6 + [40]) + [32])) = [0]
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	*($6 + [76]) = [0]
	$4 = *($0)
	*($6 + [40]) = $4
	*($6 + [48]) = $4
	*(($6 + [32])) = [0]
	*($6 + [8]) = $4
	*($6) = $4
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	*($6 + [36]) = [0]
	if ( ((int_64)*($6 + [136]) == (int_64)-1) ){ goto $label$35 }
	*($6 + [148]) = $1
	*($6 + [152]) = $2
	*($6 + [156]) = $3
	*($6 + [168]) = $5
	*($6 + [144]) = ($6 + [88])
	*($6 + [160]) = ($6 + [84])
	*($6 + [164]) = ($6 + [136])
	*($6 + [208]) = $4
	if ( ((int_64)$4 == (int_64)CALL current_receiver()) ){ goto $label$36 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$36
	*($6 + [228]) = ($6 + [144])
	*($6 + [224]) = $6
	*($6 + [232]) = ($6 + [208])
	*(($8 = CALL $7([112])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [80 align=4]) = (int_64)0
	*($8 + [88]) = [0]
	*(($8 + [56])) = (int_64)0
	*(($8 + [48])) = (int_64)0
	*(($8 + [40])) = (int_64)0
	*($8 + [92]) = $6
	CALL $178(($6 + [224]), $8)
	*($6 + [264]) = $8
	$4 = (int_64)
	*($6 + [224]) = $4((int_64)0 - *($8)))
	$11 = *($8 + [96])
	*($6 + [260]) = $11
	$0 = ($6 + [28])
	$9 = *($0)
	if ( ((uint_32)$9 >= (uint_32)*(($6 + [32]))) ){ goto $label$34 }
	*($9 + [8]) = $4
	*($9 + [16]) = $11
	*($6 + [264]) = [0]
	*($9) = $8
	*($0) = ($9 + [24])
	$8 = *($6 + [264])
	*($6 + [264]) = [0]
	if ( ($8 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$35
	if ( ((int_64)$4 == (int_64)CALL current_receiver()) ){ goto $label$37 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$37
	*(($8 = CALL $7([80])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*(($9 = ($8 + [56]))) = (int_64)0
	*(($11 = ($8 + [48]))) = (int_64)0
	*(($0 = ($8 + [40]))) = (int_64)0
	*($8 + [64]) = ($6 + [40])
	*($8) = *($6 + [88])
	*($8 + [8]) = *($1)
	*($8 + [16]) = *($2)
	*($8 + [24]) = *(($2 + [8]))
	*($8 + [32]) = *($3)
	*($0) = *(($3 + [8]))
	*($11) = *(($3 + [16]))
	*($9) = *(($3 + [24]))
	*($6 + [216]) = (($6 + [144]) + [64])
	*($6 + [212]) = ($6 + [144])
	*($6 + [208]) = ($6 + [144])
	*($6 + [264]) = ($6 + [208])
	$0 = ($8 + [8])
	*($6 + [228]) = $0
	*($6 + [224]) = $8
	*($6 + [232]) = ($8 + [16])
	$9 = ($8 + [32])
	*($6 + [236]) = $9
	CALL $179(($6 + [224]), ($6 + [264]))
	$10 = *($8)
	$7 = (int_64)
	$11 = (($6 + [40]) + [8])
	*($8 + [68]) = CALL db_store_i64(*($11), (int_64)4520852774463733760, $4, $7((int_64)0 - $10)), ($6 + [144]), [64])
	$2 = (($6 + [40]) + [16])
	if ( ((uint_64)*($2) > (uint_64)$7) ){ goto $label$38 }
	*($2) = ( (int_64)-2 ? (int_64))((int_64)1 - $10) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	$7 = *($11)
	$10 = *($8)
	*($6 + [224]) = *($0)
	*($8 + [72]) = CALL db_idx64_store($7, (int_64)4520852774463733760, $4, (int_64))((int_64)0 - $10), ($6 + [224]))
	$7 = *($11)
	$10 = *($8)
	*((($6 + [224]) + [24])) = *(($9 + [24]))
	*((($6 + [224]) + [16])) = *(($9 + [16]))
	*($6 + [232]) = *(($9 + [8]))
	*($6 + [224]) = *($9)
	*($8 + [76]) = CALL db_idx256_store($7, (int_64)4520852774463733761, $4, (int_64))((int_64)0 - $10), ($6 + [224]), [2])
	*($6 + [224]) = $8
	$4 = (int_64)
	*($6 + [144]) = $4((int_64)0 - *($8)))
	$11 = *(($8 + [68]))
	*($6 + [208]) = $11
	$0 = ($6 + [68])
	$9 = *($0)
	if ( ((uint_32)$9 >= (uint_32)*((($6 + [40]) + [32]))) ){ goto $label$33 }
	*($9 + [8]) = $4
	*($9 + [16]) = $11
	*($6 + [224]) = [0]
	*($9) = $8
	*($0) = ($9 + [24])
	$8 = *($6 + [224])
	*($6 + [224]) = [0]
	if ( $8 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	CALL $180(($6 + [24]), ($6 + [264]), ($6 + [224]), ($6 + [260]))
	$8 = *($6 + [264])
	*($6 + [264]) = [0]
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$33
	CALL $181(($6 + [64]), ($6 + [224]), ($6 + [144]), ($6 + [208]))
	$8 = *($6 + [224])
	*($6 + [224]) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL $9($8)
	
.LABEL $label$31
	*($6 + [144]) = (CASTING uint_64)(uint_32 ($6 + [40]))
	CALL $183(($6 + [40]), *(CALL $182(($6 + [144])) + [4]))
	$11 = *($6 + [24])
	if ( ($11 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$6
	CALL eosio_assert([0], [11930])
	
.LABEL $label$5
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$39 }
	CALL $9(*(($8 + [88])))
	
.LABEL $label$39
	CALL $9($8)
	
.LABEL $label$4
	*($6 + [144]) = (CASTING uint_64)(uint_32 $6)
	CALL $185($6, *(CALL $184(($6 + [144])) + [4]))
	$11 = *($6 + [24])
	if ( ($11 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ($6 + [28])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$41 }
	
.LOOP $label$42:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$43 }
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$44 }
	CALL $9(*(($9 + [88])))
	
.LABEL $label$44
	CALL $9($9)
	
.LABEL $label$43
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$42 }
	$8 = *(($6 + [24]))
	goto $label$40 
	
.LABEL $label$41
	$8 = $11
	
.LABEL $label$40
	*($0) = $11
	CALL $9($8)
	
.LABEL $label$2
	$11 = *($6 + [64])
	if ( ($11 == 0) ){ goto $label$45 }
	$0 = ($6 + [68])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$49 }
	CALL $9($9)
	
.LABEL $label$49
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$48 }
	$8 = *(($6 + [64]))
	goto $label$46 
	
.LABEL $label$47
	$8 = $11
	
.LABEL $label$46
	*($0) = $11
	CALL $9($8)
	
.LABEL $label$45
	$11 = *($6 + [120])
	if ( ($11 == 0) ){ goto $label$50 }
	$0 = ($6 + [124])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$52 }
	
.LOOP $label$53:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$54 }
	CALL $9($9)
	
.LABEL $label$54
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$53 }
	$8 = *(($6 + [120]))
	goto $label$51 
	
.LABEL $label$52
	$8 = $11
	
.LABEL $label$51
	*($0) = $11
	CALL $9($8)
	
.LABEL $label$50
	$global$0 = ($6 + [272])
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $66($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [13284])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [13284])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $122(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$8 = ($global$0 - [64])
	$global$0 = $8
	$9 = [0]
	$10 = ($10 & [1])
	$10 = *($1)
	$11 = ( *($1 + [4]) ? uint_32($10 >> [1]) : $10 )
	if ( ($11 == 0) ){ goto $label$2 }
	$10 = ( *($1 + [8]) ? ($1 + [1]) : $10 )
	$12 = [0]
	
.LOOP $label$3:
	$12 = ($12 + ((int_32)*($10) == (int_32)[44]))
	$10 = ($10 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$3 }
	$9 = ((int_32)$12 == (int_32)[1])
	if ( (($12 + [-1]) <= [2]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [13043])
	
.LABEL $label$1
	$13 = CALL $73($1, $3, [44], [0])
	$10 = ($10 & [1])
	$10 = *($3)
	$11 = uint_32($10 >> [1])
	$12 = *($3 + [4])
	if ( ( $12 ? $11 : $10 ) ){ goto $label$4 }
	CALL eosio_assert([0], [13056])
	$10 = *($3)
	$11 = uint_32($10 >> [1])
	$10 = ($10 & [1])
	$12 = *(($3 + [4]))
	
.LABEL $label$4
	*($8 + [60]) = ( $12 ? $11 : $10 )
	*($8 + [56]) = ( *($3 + [8]) ? ($3 + [1]) : $10 )
	*($8 + [8]) = *($8 + [56])
	*($2) = *(CALL $81(($8 + [16]), ($8 + [8])))
	if ( ($9 == 0) ){ goto $label$9 }
	CALL $52(($8 + [16]), $1, ($13 + [1]), [-1], $1)
	if ( (*($5) & [1]) ){ goto $label$8 }
	*($5) = [0]
	goto $label$7 
	
.LABEL $label$9
	$10 = CALL $73($1, $5, [44], ($13 + [1]))
	CALL $72(($8 + [16]), $5)
	*(($4 + [24])) = *((($8 + [16]) + [24]))
	*(($4 + [16])) = *((($8 + [16]) + [16]))
	*(($4 + [8])) = *($8 + [24])
	*($4) = *($8 + [16])
	CALL $52(($8 + [16]), $1, ($10 + [1]), [-1], $1)
	if ( (*($7) & [1]) ){ goto $label$6 }
	*($7) = [0]
	goto $label$5 
	
.LABEL $label$8
	*(*($5 + [8])) = [0]
	*($5 + [4]) = [0]
	
.LABEL $label$7
	CALL $55($5, [0])
	*(($5 + [8])) = *((($8 + [16]) + [8]))
	*($5) = *($8 + [16])
	CALL $72(($8 + [16]), $5)
	*(($4 + [24])) = *((($8 + [16]) + [24]))
	*(($4 + [16])) = *((($8 + [16]) + [16]))
	*(($4 + [8])) = *($8 + [24])
	*($4) = *($8 + [16])
	*($6) = (int_64)-1
	$global$0 = ($8 + [64])
	return 
	
.LABEL $label$6
	*(*($7 + [8])) = [0]
	*($7 + [4]) = [0]
	
.LABEL $label$5
	CALL $55($7, [0])
	*($7) = *($8 + [16])
	$10 = *((($8 + [16]) + [8]))
	*(($7 + [8])) = $10
	$10 = ( $10 ? ($7 + [1]) : (*($7) & [1]) )
	$14 = CALL $29($10, ($8 + [16]), [0])
	*($6) = $14
	if ( (uint_64)(((int_64)$14 + (int_64)-1) <= (int_64)99999999999) ){ goto $label$10 }
	CALL eosio_assert([0], [13078])
	
.LABEL $label$10
	$12 = *($7)
	if ( ((int_32)*($8 + [16]) == (int_32)($10 + ( *($7 + [4]) ? uint_32($12 >> [1]) : ($12 & [1]) ))) ){ goto $label$11 }
	CALL eosio_assert([0], [13105])
	
.LABEL $label$11
	$global$0 = ($8 + [64])
}

void .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	$6 = ($3 + [80])
	CALL memcpy(($2 + [48]), $5, [32])
	*(($4 = ($4 + [4]))) = (*($4) + [32])
	$7 = (int_64)0
	$4 = [16]
	$3 = ($2 + [16])
	$5 = [0]
	$8 = (int_64)0
	
.LOOP $label$3:
	$9 = (($2 + [48]) + $5)
	if ( ($4 <= [2]) ){ goto $label$4 }
	$7 = ((int_64)$7 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$7 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$7 = ((int_64)$7 << (int_64)8)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$5
	*($3 + [8]) = $8
	*($3) = ((int_64)$7 | (int_64)*($9))
	$4 = [16]
	$3 = ($3 + [16])
	$7 = (int_64)0
	$8 = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$6 }
	if ( ($4 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($2, $7, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$7 = *($2)
	
.LABEL $label$7
	*($3) = $7
	*($3 + [8]) = $8
	
.LABEL $label$6
	*($6) = *($2 + [16])
	*(($6 + [8])) = *($2 + [24])
	*(($6 + [24])) = *((($2 + [16]) + [24]))
	*(($6 + [16])) = *((($2 + [16]) + [16]))
	$3 = *($0)
	$9 = ($3 + [112])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($9, $5, [8])
	$9 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $9
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $9) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [13284])
	$9 = *($5)
	
.LABEL $label$9
	CALL memcpy(($2 + [48]), $9, [8])
	*(($3 + [120])) = *($2 + [48])
	*($5) = (*($5) + [8])
	$9 = ($3 + [128])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [13284])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($9, $5, [8])
	$9 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $9
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $9) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [13284])
	$9 = *($5)
	
.LABEL $label$11
	CALL memcpy(($2 + [48]), $9, [8])
	*(($3 + [136])) = *($2 + [48])
	*($5) = (*($5) + [8])
	$global$0 = ($2 + [80])
}

int_64 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4421665916975824896, (int_64)-4421665916975824896)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $192($1, $4)
	if ( ((int_32)*($3 + [8]) == (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$1
	*($2 + [8]) = ((int_64)*(( $3 ? ($2 + [8]) : $3 )) + (int_64)1)
	CALL $193($1, ($2 + [8]), *($0))
	$5 = *($2 + [8])
	$global$0 = ($2 + [16])
	return $5
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	$5 = ($1 + [40])
	CALL $53($5, *($3 + [8]))
	*($1 + [16]) = *(*($3 + [12]))
	$3 = *($3 + [16])
	*(($1 + [32])) = *(($3 + [8]))
	*($1 + [24]) = *($3)
	$6 = $2
	CALL $79(($6 + [16]))
	*(($1 + [88])) = *((($6 + [16]) + [24]))
	*(($1 + [80])) = *(($6 + [32]))
	*(($1 + [72])) = *($6 + [24])
	*($1 + [64]) = *($6 + [16])
	$3 = *($1 + [40])
	$7 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [72])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [64])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($3)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $3)
	*($6 + [56]) = $6
	*($6 + [20]) = ($1 + [8])
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + [16])
	*($6 + [28]) = $9
	*($6 + [32]) = $5
	*($6 + [36]) = $7
	CALL $251(($6 + [16]), ($6 + [56]))
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($4 + [8]), (int_64)-4421661421696319488, *(*($0 + [8])), $8, $2, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($6 + [16]) = *(($1 + [8]))
	*($1 + [104]) = CALL db_idx64_store($8, (int_64)-4421661421696319488, $10, $11, ($6 + [16]))
	$global$0 = ($6 + [64])
}

int_64 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $26($3, (int_64)0)
	$4 = CALL $28($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_64 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $27($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $27($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8385]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $26($0, (int_64)0)
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $27($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $27($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $27($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $27($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8385])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $27($0)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $27($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8269]))
	$8 = (int_64)0
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $27($0)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $27($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8385]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $26($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8385]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8385]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $27($0) + [8385]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $4()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $4()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $4()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $235 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_64)*($1) == (int_64)CALL current_receiver()) ){ goto $label$1 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$1
	*(($5 = CALL $7([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4421665916975824896, $2, (int_64)-4421665916975824896, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4421665916975824896) ){ goto $label$2 }
	*(($1 + [16])) = (int_64)-4421665916975824895
	
.LABEL $label$2
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-4421665916975824896
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = (int_64)-4421665916975824896
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $236(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $9($1)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
}

void .FUNC $21 ()
{
	CALL $19([8220])
}

int_32 .FUNC $20 ()
{
	CALL $18([8220])
	return [8228]
}

void .FUNC $23 (int_32 $0)
{
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $24($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $27 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $25($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [12777])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [12777])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $101 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $139(($4 + [16]), ($4 + [144]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$5 = *($5)
	*((($4 + [112]) + [8])) = $5
	*(($6 = (($4 + [128]) + [8]))) = $5
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [16]) + [24])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $140(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $2($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $9(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_auth(*($1))
	if ( (uint_64)(*($2) <= (int_64)100000000000) ){ goto $label$1 }
	CALL eosio_assert([0], [11945])
	
.LABEL $label$1
	*(($5 + [224])) = [0]
	*($5 + [208]) = (int_64)-1
	*($5 + [216]) = (int_64)0
	*($5 + [228]) = [0]
	$6 = *($0)
	*($5 + [192]) = $6
	*($5 + [200]) = $6
	*($5 + [184]) = ($5 + [192])
	CALL $141(($5 + [128]), ($5 + [184]), $1)
	$7 = *($5 + [132])
	if ( ($7 == 0) ){ goto $label$7 }
	if ( ((int_64)*($1) != (int_64)*($7 + [16])) ){ goto $label$6 }
	$6 = *($5 + [128])
	*($5 + [176]) = $6
	$8 = (($5 + [176]) | [4])
	$1 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( ($1) == 0) ){ goto $label$4 }
	if ( (*($1 + [24]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	*($5 + [176]) = ($5 + [184])
	$8 = (($5 + [176]) | [4])
	goto $label$5 
	
.LABEL $label$6
	*($5 + [176]) = ($5 + [184])
	$8 = (($5 + [176]) | [4])
	
.LABEL $label$5
	*($8) = [0]
	
.LABEL $label$4
	CALL eosio_assert([0], [11976])
	if ( *(*($8) + [24]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [11995])
	
.LABEL $label$2
	$7 = *($4 + [8])
	$9 = ($1 & [1])
	$1 = *($4)
	$1 = ( *($4 + [4]) ? uint_32($1 >> [1]) : $9 )
	if ( ($1 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [12508])
	goto $label$11 
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$9 = ( $7 ? ($4 + [1]) : $9 )
	$6 = (int_64)0
	
.LOOP $label$13:
	$7 = (($9 + $1) + [-1])
	$4 = *($7)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [12553])
	$4 = *($7)
	
.LABEL $label$14
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	if ( ((int_64)$6 == (int_64)1129595461) ){ goto $label$8 }
	if ( ((int_64)$6 == (int_64)1146312005) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$6 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert([0], [12834])
	
.LABEL $label$8
	*($5 + [168]) = $6
	*(($5 + [160])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	*($5 + [164]) = [0]
	$6 = *($0)
	*($5 + [128]) = $6
	*($5 + [136]) = $6
	*($5 + [120]) = ($5 + [128])
	*($5 + [112]) = ((int_64)((int_64)*(*($8)) * (int_64)100000000000) + (int_64)*($2))
	CALL $142(($5 + [72]), ($5 + [120]), ($5 + [112]))
	$1 = *($5 + [76])
	if ( ($1 == 0) ){ goto $label$15 }
	if ( ((int_64)*($5 + [112]) != (int_64)((int_64)((int_64)*($1 + [16]) * (int_64)100000000000) + (int_64)*($1 + [24]))) ){ goto $label$15 }
	CALL eosio_assert([0], [11854])
	
.LABEL $label$15
	*((($5 + [72]) + [32])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$6 = *($0)
	*($5 + [72]) = $6
	$10 = *($5 + [112])
	*($5 + [80]) = $10
	$1 = CALL db_find_i64($6, $10, (int_64)-2109263375683915776, *($5 + [168]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	if ( ((int_32)*(CALL $143(($5 + [72]), $1) + [40]) == (int_32)($5 + [72])) ){ goto $label$17 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$17
	CALL eosio_assert([0], [11889])
	
.LABEL $label$16
	*((($5 + [32]) + [32])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$6 = *($0)
	*($5 + [32]) = $6
	*($5 + [40]) = $6
	*($5 + [24]) = CALL $125($0, ($5 + [32]))
	$6 = *($0)
	*($5 + [12]) = $2
	*($5 + [16]) = $3
	*($5 + [4]) = ($5 + [168])
	*($5) = ($5 + [24])
	*($5 + [8]) = ($5 + [176])
	*($5 + [264]) = $6
	if ( ((int_64)*($5 + [128]) == (int_64)CALL current_receiver()) ){ goto $label$18 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$18
	*($5 + [244]) = $5
	*($5 + [240]) = ($5 + [128])
	*($5 + [248]) = ($5 + [264])
	*(($1 = CALL $7([64])) + [32]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [52]) = ($5 + [128])
	CALL $144(($5 + [240]), $1)
	*($5 + [256]) = $1
	$6 = *($1)
	*($5 + [240]) = $6
	$7 = *($1 + [56])
	*($5 + [236]) = $7
	$9 = ($5 + [156])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [160]))) ){ goto $label$23 }
	*($4 + [8]) = $6
	*($4 + [16]) = $7
	*($5 + [256]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	$1 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $145(($5 + [152]), ($5 + [256]), ($5 + [240]), ($5 + [236]))
	$1 = *($5 + [256])
	*($5 + [256]) = [0]
	if ( $1 ){ goto $label$21 }
	
.LABEL $label$22
	$7 = *($5 + [56])
	if ( ($7 == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$24
	CALL $9($1)
	$7 = *($5 + [56])
	if ( ($7 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$9 = ($5 + [60])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL $9($4)
	
.LABEL $label$28
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($5 + [56]))
	goto $label$25 
	
.LABEL $label$26
	$1 = $7
	
.LABEL $label$25
	*($9) = $7
	CALL $9($1)
	
.LABEL $label$19
	$7 = *($5 + [96])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($5 + [100])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$33 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($1 + [36])))
	
.LABEL $label$34
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$35 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$35
	CALL $9($1)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$32 }
	$1 = *(($5 + [96]))
	goto $label$30 
	
.LABEL $label$31
	$1 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL $9($1)
	
.LABEL $label$29
	$7 = *($5 + [152])
	if ( ($7 == 0) ){ goto $label$36 }
	$9 = ($5 + [156])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$38 }
	
.LOOP $label$39:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$41 }
	CALL $9(*(($4 + [48])))
	
.LABEL $label$41
	CALL $9($4)
	
.LABEL $label$40
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$39 }
	$1 = *(($5 + [152]))
	goto $label$37 
	
.LABEL $label$38
	$1 = $7
	
.LABEL $label$37
	*($9) = $7
	CALL $9($1)
	
.LABEL $label$36
	$7 = *($5 + [216])
	if ( ($7 == 0) ){ goto $label$42 }
	$9 = ($5 + [220])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$46 }
	CALL $9($4)
	
.LABEL $label$46
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$45 }
	$1 = *(($5 + [216]))
	goto $label$43 
	
.LABEL $label$44
	$1 = $7
	
.LABEL $label$43
	*($9) = $7
	CALL $9($1)
	
.LABEL $label$42
	$global$0 = ($5 + [272])
}

int_32 .FUNC $103 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $153(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$8 = *($4 + [88])
	$0 = *($4 + [72])
	*($4 + [112]) = *($4 + [80])
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [128])), (int_32 ($4 + [112])), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL require_auth((int_64)4301877903122879952)
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [44]) = [0]
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-2108902700040753152, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $148(($4 + [8]), $6) + [28]) == (int_32)($4 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	CALL eosio_assert([0], [11918])
	$5 = *($4 + [8])
	
.LABEL $label$1
	$7 = *($0)
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$3 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$3
	*(($0 = CALL $7([48])) + [28]) = ($4 + [8])
	*($0) = $3
	*($0 + [24]) = [1]
	*($0 + [8]) = *($1)
	*($0 + [16]) = *($2)
	*($4 + [80]) = (($4 + [48]) + [21])
	*($4 + [76]) = ($4 + [48])
	*($4 + [72]) = ($4 + [48])
	*($4 + [88]) = ($4 + [72])
	$1 = ($0 + [8])
	*($4 + [100]) = $1
	*($4 + [96]) = $0
	$3 = ($0 + [16])
	*($4 + [104]) = $3
	*($4 + [108]) = ($0 + [24])
	CALL $154(($4 + [96]), ($4 + [88]))
	$5 = *($0 + [8])
	$2 = (($4 + [8]) + [8])
	*($0 + [32]) = CALL db_store_i64(*($2), (int_64)-2108902700040753152, $7, $5, ($4 + [48]), [21])
	$6 = (($4 + [8]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$4 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$5 = *($1)
	$8 = *($2)
	*($4 + [96]) = *($0)
	*($0 + [36]) = CALL db_idx64_store($8, (int_64)-2108902700040753152, $7, $5, ($4 + [96]))
	$5 = *($1)
	$8 = *($2)
	*($4 + [96]) = *($3)
	*($0 + [40]) = CALL db_idx64_store($8, (int_64)-2108902700040753151, $7, $5, ($4 + [96]))
	*($4 + [96]) = $0
	$5 = *($1)
	*($4 + [48]) = $5
	$2 = *(($0 + [32]))
	*($4 + [72]) = $2
	$3 = ($4 + [36])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$7 }
	*($1 + [8]) = $5
	*($1 + [16]) = $2
	*($4 + [96]) = [0]
	*($1) = $0
	*($3) = ($1 + [24])
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $155(($4 + [32]), ($4 + [96]), ($4 + [48]), ($4 + [72]))
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $9($0)
	
.LABEL $label$5
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$8 }
	$3 = ($4 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $9($1)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($4 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($3) = $2
	CALL $9($0)
	
.LABEL $label$8
	$global$0 = ($4 + [112])
}

int_32 .FUNC $105 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $157(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($8 = (($4 + [128]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [128]) = $9
	*($4 + [112]) = $9
	$3 = *($8)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	$0 = *($4 + [96])
	$1 = *($4 + [88])
	$9 = *($4 + [72])
	*($4 + [128]) = *($4 + [80])
	*($4 + [144]) = $9
	*($4 + [112]) = $1
	*($4 + [104]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 ($4 + [112])), (int_32 ($4 + [104])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [288])
	$global$0 = $5
	CALL require_auth((int_64)4301877903122879952)
	if ( ((int_64)*($4) == (int_64)0) ){ goto $label$13 }
	$6 = *($1)
	if ( ((int_64)$6 > (int_64)-2109262807403457153) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [12293])
	$6 = *($1)
	if ( ((int_64)$6 <= (int_64)-2109262807403457153) ){ goto $label$11 }
	
.LABEL $label$12
	if ( ((int_64)$6 > (int_64)3607749779137757183) ){ goto $label$24 }
	if ( ((int_64)$6 == (int_64)-2109262807403457152) ){ goto $label$23 }
	if ( ((int_64)$6 != (int_64)-2108902700040753152) ){ goto $label$10 }
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $158(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$26 }
	CALL $9($1)
	
.LABEL $label$26
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($5 + [56]))
	goto $label$20 
	
.LABEL $label$24
	if ( ((int_64)$6 == (int_64)3607749779137757184) ){ goto $label$22 }
	if ( ((int_64)$6 != (int_64)4520852774463733760) ){ goto $label$10 }
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $159(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$28 }
	CALL $9($1)
	
.LABEL $label$28
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($5 + [56]))
	goto $label$18 
	
.LABEL $label$23
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $160(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$30 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$31 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$31
	CALL $9($1)
	
.LABEL $label$30
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$29 }
	$4 = *(($5 + [56]))
	goto $label$16 
	
.LABEL $label$22
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $161(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$33 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($1 + [24])))
	
.LABEL $label$34
	CALL $9($1)
	
.LABEL $label$33
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($5 + [56]))
	goto $label$14 
	
.LABEL $label$21
	$4 = $3
	
.LABEL $label$20
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$19
	$4 = $3
	
.LABEL $label$18
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$17
	$4 = $3
	
.LABEL $label$16
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$15
	$4 = $3
	
.LABEL $label$14
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$6 > (int_64)-4241658174089854977) ){ goto $label$37 }
	if ( ((int_64)$6 == (int_64)-7297972528087689856) ){ goto $label$36 }
	if ( ((int_64)$6 != (int_64)-4421661421696319488) ){ goto $label$10 }
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $162(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$38:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$39 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$40 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$40
	CALL $9($1)
	
.LABEL $label$39
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$38 }
	$4 = *(($5 + [56]))
	goto $label$8 
	
.LABEL $label$37
	if ( ((int_64)$6 == (int_64)-4241658174089854976) ){ goto $label$35 }
	if ( ((int_64)$6 != (int_64)-2109263375683915776) ){ goto $label$10 }
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $163(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$41:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$43 }
	CALL $9(*(($4 + [36])))
	
.LABEL $label$43
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$44 }
	CALL $9(*(($4 + [24])))
	
.LABEL $label$44
	CALL $9($4)
	
.LABEL $label$42
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$41 }
	$4 = *(($5 + [56]))
	goto $label$6 
	
.LABEL $label$36
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $164(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$46 }
	CALL $9($1)
	
.LABEL $label$46
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($5 + [56]))
	goto $label$4 
	
.LABEL $label$35
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = [0]
	*($5 + [32]) = *($0)
	*($5 + [40]) = *($2)
	$2 = CALL $165(($5 + [32]), $3, *($4))
	$3 = *($5 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	$7 = ($5 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$47:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$48 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$49 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$49
	CALL $9($1)
	
.LABEL $label$48
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$47 }
	$4 = *(($5 + [56]))
	goto $label$2 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [12316])
	goto $label$1 
	
.LABEL $label$9
	$4 = $3
	
.LABEL $label$8
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$7
	$4 = $3
	
.LABEL $label$6
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$5
	$4 = $3
	
.LABEL $label$4
	*($7) = $3
	CALL $9($4)
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$2
	*($7) = $3
	CALL $9($4)
	
.LABEL $label$1
	*($5) = $2
	CALL $35(($5 + [32]), [256], [12335], $5)
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL $15(($5 + [32]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$51 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$54 }
	*($5 + [16]) = ($4 << [1])
	$2 = (($5 + [16]) | [1])
	$1 = $2
	if ( $4 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$2 = (($4 + [16]) & [-16])
	$1 = CALL $7($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $1
	*($5 + [20]) = $4
	$2 = (($5 + [16]) | [1])
	
.LABEL $label$53
	CALL memcpy($1, ($5 + [32]), $4)
	
.LABEL $label$52
	*(($1 + $4)) = [0]
	$4 = *($5 + [16])
	$1 = ($4 & [1])
	CALL prints_l(( *($5 + [24]) ? $2 : $1 ), ( *($5 + [20]) ? uint_32($4 >> [1]) : $1 ))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$55 }
	CALL $9(*(($5 + [24])))
	
.LABEL $label$55
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL $15(($5 + [32]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$50 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$58 }
	*($5 + [16]) = ($4 << [1])
	$1 = (($5 + [16]) | [1])
	if ( $4 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$2 = (($4 + [16]) & [-16])
	$1 = CALL $7($2)
	*($5 + [16]) = ($2 | [1])
	*($5 + [24]) = $1
	*($5 + [20]) = $4
	
.LABEL $label$57
	CALL memcpy($1, ($5 + [32]), $4)
	
.LABEL $label$56
	*(($1 + $4)) = [0]
	CALL $166($0, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$59 }
	CALL $9(*($5 + [24]))
	
.LABEL $label$59
	$global$0 = ($5 + [288])
	return (unreachable)
	
.LABEL $label$51
	CALL $50(($5 + [16]))
	
.LABEL $label$50
	CALL $50(($5 + [16]))
	(unreachable)
}

int_32 .FUNC $107 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = [0]
	*($4 + [40]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$4
	$3 = ($2 + $7)
	CALL memcpy(($4 + [40]), $2, [8])
	$8 = ($2 + [8])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($4 + [8]), $8, [1])
	$8 = *($4 + [8])
	*((($4 + [40]) + [8])) = ((int_32)$8 != (int_32)[0])
	*(($4 + [32])) = $3
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [9])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [56]) = *($4 + [40])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [56])), (int_32 ((int_32)$8 != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $2($2)
	
.LABEL $label$7
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [63]) = $2
	CALL require_auth((int_64)4301877903122879952)
	$2 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-2108902700040753152, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $148(($3 + [16]), $1)
	if ( ((int_32)*($2 + [28]) == (int_32)($3 + [16])) ){ goto $label$1 }
	CALL eosio_assert([0], [12606])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11930])
	
.LABEL $label$1
	$4 = *($0)
	*($3 + [8]) = ($3 + [63])
	CALL $156(($3 + [16]), $2, $4, ($3 + [8]))
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($3 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $9($2)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $109 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [272])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*(($4 + [96])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*(($4 + [152])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [200])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [256]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $167(($4 + [16]), ($4 + [256]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [224]) + [8])) = $3
	*(($6 = (($4 + [240]) + [8]))) = $3
	$7 = *($4)
	*($4 + [240]) = $7
	*($4 + [224]) = $7
	$3 = *($6)
	*((($4 + [256]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [240])
	*($4 + [32]) = $0
	*($4 + [256]) = $0
	*($4 + [260]) = ($4 + [216])
	*($4 + [256]) = ($4 + [16])
	CALL $168(($4 + [256]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [72]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*(($4 + [80])))
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC $108 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$8 = ($global$0 - [160])
	$global$0 = $8
	*($8 + [112]) = $1
	CALL require_auth((int_64)4301877902857333136)
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	if ( ((int_64)$9) == (int_64)1129595461) ){ goto $label$1 }
	if ( ((int_64)$9 == (int_64)1146312005) ){ goto $label$1 }
	CALL eosio_assert([0], [12834])
	
.LABEL $label$1
	*(($8 + [104])) = [0]
	*($8 + [88]) = (int_64)-1
	*($8 + [96]) = (int_64)0
	*($8 + [108]) = [0]
	$9 = *($0)
	*($8 + [72]) = $9
	*($8 + [80]) = $9
	$10 = CALL db_find_i64($9, $9, (int_64)-4421661421696319488, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $169(($8 + [72]), $10)
	if ( ((int_32)*($11 + [96]) == (int_32)($8 + [72])) ){ goto $label$4 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$4
	*($8 + [68]) = $11
	*($8 + [64]) = ($8 + [72])
	goto $label$2 
	
.LABEL $label$3
	*($8 + [68]) = [0]
	*($8 + [64]) = ($8 + [72])
	CALL eosio_assert([0], [12148])
	$11 = *($8 + [68])
	
.LABEL $label$2
	$15 = ($10 & [1])
	$10 = *($2)
	$13 = ($10 & [1])
	$10 = *($11 + [40])
	$12 = uint_32($10 >> [1])
	$14 = ( *(($11 + [44])) ? $12 : $13 )
	if ( ((int_32)$14 != (int_32)( *($2 + [4]) ? uint_32($10 >> [1]) : $15 )) ){ goto $label$6 }
	$10 = (($11 + [40]) + [1])
	$15 = ( *($2 + [8]) ? ($2 + [1]) : $15 )
	if ( $13 ){ goto $label$7 }
	if ( ($14 == 0) ){ goto $label$5 }
	$11 = ([0] - $12)
	
.LOOP $label$8:
	if ( ((int_32)*($10) != (int_32)*($15)) ){ goto $label$6 }
	$15 = ($15 + [1])
	$10 = ($10 + [1])
	$11 = ($11 + [1])
	if ( $11 ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($14 == 0) ){ goto $label$5 }
	if ( (CALL $17(( *(($11 + [48])) ? $10 : $13 ), $15, $14) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [12175])
	
.LABEL $label$5
	$10 = *($8 + [68])
	if ( ((int_64)*(($10 + [32])) == (int_64)*(($3 + [8]))) ){ goto $label$9 }
	CALL eosio_assert([0], [12951])
	
.LABEL $label$9
	if ( ((int_64)*($10 + [24]) == (int_64)*($3)) ){ goto $label$10 }
	CALL eosio_assert([0], [12195])
	
.LABEL $label$10
	$1 = *(($5 + [8]))
	$9 = *($5)
	if ( ((int_64)((int_64)$9 | (int_64)$1) != (int_64)0) ){ goto $label$12 }
	if ( (int_64)(((int_64)*($5 + [16]) | (int_64)*(($5 + [24]))) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($8 + [68])
	if ( ((int_64)((int_64)((int_64)*($10 + [64]) ^ (int_64)$9) | (int_64)((int_64)*(($10 + [72])) ^ (int_64)$1)) != (int_64)0) ){ goto $label$13 }
	if ( (int_64)(((int_64)((int_64)*(($10 + [80])) ^ (int_64)*($5 + [16])) | (int_64)((int_64)*(($10 + [88])) ^ (int_64)*(($5 + [24])))) == 0) ){ goto $label$11 }
	
.LABEL $label$13
	CALL eosio_assert([0], [12211])
	
.LABEL $label$11
	*(($8 + [56])) = [0]
	*($8 + [40]) = (int_64)-1
	*($8 + [60]) = [0]
	$9 = *($0)
	*($8 + [24]) = $9
	*($8 + [32]) = $9
	*($8 + [48]) = (int_64)0
	$10 = CALL db_find_i64($9, $9, (int_64)-4241658174089854976, (int_64))((int_64)0 - *($8 + [112]))
	if ( ((int_32)$10) < (int_32)[0]) ){ goto $label$14 }
	if ( ((int_32)*(CALL $170(($8 + [24]), $10) + [96]) == (int_32)($8 + [24])) ){ goto $label$15 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$15
	CALL eosio_assert([0], [12232])
	
.LABEL $label$14
	$9 = *($0)
	*($8 + [8]) = $3
	*($8 + [12]) = $2
	*($8 + [16]) = $4
	*($8 + [4]) = ($8 + [64])
	*($8) = ($8 + [112])
	*($8 + [152]) = $9
	if ( ((int_64)*($8 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$16 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$16
	*($8 + [132]) = $8
	*($8 + [128]) = ($8 + [24])
	*($8 + [136]) = ($8 + [152])
	*(($10 = CALL $7([112])) + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	*($10 + [32]) = (int_64)0
	*($10 + [40 align=4]) = (int_64)0
	*($10 + [48]) = [0]
	*($10 + [64]) = (int_64)0
	*(($10 + [88])) = (int_64)0
	*(($10 + [80])) = (int_64)0
	*(($10 + [72])) = (int_64)0
	*($10 + [96]) = ($8 + [24])
	CALL $171(($8 + [128]), $10)
	*($8 + [144]) = $10
	$9 = (int_64)
	*($8 + [128]) = $9((int_64)0 - *($10)))
	$11 = *($10 + [100])
	*($8 + [124]) = $11
	$3 = ($8 + [52])
	$15 = *($3)
	if ( ((uint_32)$15 >= (uint_32)*(($8 + [56]))) ){ goto $label$19 }
	*($15 + [8]) = $9
	*($15 + [16]) = $11
	*($8 + [144]) = [0]
	*($15) = $10
	*($3) = ($15 + [24])
	$10 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( ($10 == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	CALL $172(($8 + [48]), ($8 + [144]), ($8 + [128]), ($8 + [124]))
	$10 = *($8 + [144])
	*($8 + [144]) = [0]
	if ( ($10 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((*($10 + [40]) & [1]) == 0) ){ goto $label$20 }
	CALL $9(*(($10 + [48])))
	
.LABEL $label$20
	CALL $9($10)
	
.LABEL $label$17
	*($8) = (CASTING uint_64)(uint_32 ($8 + [24]))
	CALL $174(($8 + [24]), *(CALL $173($8) + [4]))
	$9 = *($8 + [64])
	$10 = (CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)32)
	if ( $10) ){ goto $label$21 }
	CALL eosio_assert([0], [13289])
	CALL eosio_assert([0], [13323])
	
.LABEL $label$21
	$15 = CALL db_next_i64(*($10 + [100]), $8)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$22 }
	CALL $169((CASTING uint_32)(uint_64 $9), $15)
	
.LABEL $label$22
	CALL $175(($8 + [72]), $10)
	$11 = *($8 + [48])
	if ( ($11 == 0) ){ goto $label$23 }
	$3 = ($8 + [52])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$15 = *($10)
	*($10) = [0]
	if ( ($15 == 0) ){ goto $label$27 }
	if ( ((*($15 + [40]) & [1]) == 0) ){ goto $label$28 }
	CALL $9(*(($15 + [48])))
	
.LABEL $label$28
	CALL $9($15)
	
.LABEL $label$27
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($8 + [48]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $11
	
.LABEL $label$24
	*($3) = $11
	CALL $9($10)
	
.LABEL $label$23
	$11 = *($8 + [96])
	if ( ($11 == 0) ){ goto $label$29 }
	$3 = ($8 + [100])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$31 }
	
.LOOP $label$32:
	$10 = ($10 + [-24])
	$15 = *($10)
	*($10) = [0]
	if ( ($15 == 0) ){ goto $label$33 }
	if ( ((*($15 + [40]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($15 + [48])))
	
.LABEL $label$34
	CALL $9($15)
	
.LABEL $label$33
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$32 }
	$10 = *(($8 + [96]))
	goto $label$30 
	
.LABEL $label$31
	$10 = $11
	
.LABEL $label$30
	*($3) = $11
	CALL $9($10)
	
.LABEL $label$29
	$global$0 = ($8 + [160])
}

void .FUNC $212 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [304])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	*($3 + [184]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [168]), $2, [8])
	*($3 + [180]) = (*($3 + [180]) + [8])
	*($3 + [160]) = [0]
	*($3 + [152]) = (int_64)0
	CALL $122(($3 + [176]), ($3 + [152]))
	*($3 + [144]) = (int_64)0
	*($3 + [136]) = (int_64)0
	$2 = *($3 + [180])
	$4 = (($3 + [176]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = (*($3 + [180]) + [8])
	*($3 + [180]) = $2
	*($3 + [224]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$7
	CALL memcpy(($3 + [224]), $2, [8])
	*((($3 + [136]) + [8])) = *($3 + [224])
	$4 = (*($3 + [180]) + [8])
	*($3 + [180]) = $4
	$5 = (int_64)0
	*(($3 + [120])) = (int_64)0
	$2 = [16]
	*((($3 + [96]) + [16])) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)(*((($3 + [176]) + [8])) - $4) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	$4 = *($3 + [180])
	
.LABEL $label$8
	CALL memcpy(($3 + [224]), $4, [32])
	*($3 + [180]) = (*($3 + [180]) + [32])
	$6 = ($3 + [192])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$10:
	$8 = (($3 + [224]) + $4)
	if ( ($2 <= [2]) ){ goto $label$11 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$12
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$2 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$13 }
	if ( ($2 <= [2]) ){ goto $label$14 }
	CALL __ashlti3(($3 + [16]), $5, $7, (($2 << [3]) + [-8]))
	$7 = *(($3 + [24]))
	$5 = *($3 + [16])
	
.LABEL $label$14
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$13
	*((($3 + [96]) + [24])) = *((($3 + [192]) + [24]))
	*((($3 + [96]) + [16])) = *((($3 + [192]) + [16]))
	*($3 + [104]) = *($3 + [200])
	*($3 + [96]) = *($3 + [192])
	$5 = (int_64)0
	*((($3 + [64]) + [24])) = (int_64)0
	*((($3 + [64]) + [16])) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	$2 = *($3 + [180])
	if ( ((uint_32)(*(($3 + [184])) - $2) > (uint_32)[31]) ){ goto $label$15 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$15
	CALL memcpy(($3 + [224]), $2, [32])
	*($3 + [180]) = (*($3 + [180]) + [32])
	$2 = [16]
	$6 = ($3 + [192])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$17:
	$8 = (($3 + [224]) + $4)
	if ( ($2 <= [2]) ){ goto $label$18 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$19 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$19
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$2 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$20 }
	if ( ($2 <= [2]) ){ goto $label$21 }
	CALL __ashlti3($3, $5, $7, (($2 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$21
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$20
	*((($3 + [64]) + [24])) = *((($3 + [192]) + [24]))
	*((($3 + [64]) + [16])) = *((($3 + [192]) + [16]))
	*($3 + [72]) = *($3 + [200])
	*($3 + [64]) = *($3 + [192])
	*($3 + [200]) = (int_64)0
	*($3 + [192]) = (int_64)0
	$2 = *($3 + [180])
	$4 = (($3 + [176]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$22 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$22
	CALL memcpy(($3 + [192]), $2, [8])
	$2 = (*($3 + [180]) + [8])
	*($3 + [180]) = $2
	*($3 + [224]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$23 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$23
	CALL memcpy(($3 + [224]), $2, [8])
	*((($3 + [192]) + [8])) = *($3 + [224])
	$2 = (*($3 + [180]) + [8])
	*($3 + [180]) = $2
	*($3 + [56]) = (int_64)0
	*($3 + [48]) = (int_64)0
	$4 = (($3 + [176]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$24 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$24
	CALL memcpy(($3 + [48]), $2, [8])
	$2 = (*($3 + [180]) + [8])
	*($3 + [180]) = $2
	*($3 + [224]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$25 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [180])
	
.LABEL $label$25
	CALL memcpy(($3 + [224]), $2, [8])
	*((($3 + [48]) + [8])) = *($3 + [224])
	*($3 + [180]) = (*($3 + [180]) + [8])
	*(($2 = (($3 + [32]) + [8]))) = *((($3 + [176]) + [8]))
	*($3 + [32]) = *($3 + [176])
	$2 = *($2)
	*((($3 + [256]) + [8])) = $2
	*(($4 = (($3 + [272]) + [8]))) = $2
	$5 = *($3 + [32])
	*($3 + [272]) = $5
	*($3 + [256]) = $5
	$2 = *($4)
	*((($3 + [288]) + [8])) = $2
	*(($3 + [248])) = $2
	*($3 + [224]) = $0
	*($3 + [232]) = $1
	$5 = *($3 + [272])
	*($3 + [240]) = $5
	*($3 + [288]) = $5
	CALL $108(($3 + [224]), *($3 + [168]), ($3 + [152]), ($3 + [136]), ($3 + [96]), ($3 + [64]), $3, $3)
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$26 }
	CALL $9(*((($3 + [152]) + [8])))
	
.LABEL $label$26
	$global$0 = ($3 + [304])
}

void .FUNC $231 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [13284])
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy(($3 + [48]), $4, [32])
	*(($1 = ($1 + [4]))) = (*($1) + [32])
	$5 = (int_64)0
	$1 = [16]
	$6 = ($3 + [16])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$3:
	$8 = (($3 + [48]) + $4)
	if ( ($1 <= [2]) ){ goto $label$4 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$5 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$5
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$1 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$6 }
	if ( ($1 <= [2]) ){ goto $label$7 }
	CALL __ashlti3($3, $5, $7, (($1 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$7
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$6
	*($0) = *($3 + [16])
	*(($0 + [8])) = *($3 + [24])
	*(($0 + [24])) = *((($3 + [16]) + [24]))
	*(($0 + [16])) = *((($3 + [16]) + [16]))
	$global$0 = ($3 + [80])
}

void .FUNC $219 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12680])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [12726])
	
.LABEL $label$2
	*($1) = *(*($3))
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $3, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159550150574080) ){ goto $label$3 }
	*(($0 + [16])) = (int_64)7235159550150574081
	
.LABEL $label$3
	$global$0 = $5
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $38($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $4()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $4()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $36($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $31([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $30 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $33($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $33($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $33($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $33($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8656]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $33($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $33($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $33($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $215 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [40]), $5, [8])
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [8])
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [32])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $104($3, ($3 + [56]), ($3 + [48]), ($3 + [40]), ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $214 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [48]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [40]), $5, [8])
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [8])
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [32])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $104($3, ($3 + [56]), ($3 + [48]), ($3 + [40]), ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $217 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $199($3, ($3 + [40]), $3)
	$global$0 = ($3 + [48])
}

void .FUNC $216 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [48]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	$4 = ($2 + $4)
	CALL memcpy(($3 + [40]), $5, [8])
	$5 = ($2 + [24])
	if ( ((int_32)$6 != (int_32)[24]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $5, [8])
	*(($3 + [24])) = $4
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [32])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $104($3, ($3 + [56]), ($3 + [48]), ($3 + [40]), ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $211 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [224])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [116])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [116]) = ($2 + [8])
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $122(($3 + [112]), ($3 + [88]))
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$2 = *($3 + [116])
	$4 = (($3 + [112]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [116])
	
.LABEL $label$6
	CALL memcpy(($3 + [72]), $2, [8])
	$2 = (*($3 + [116]) + [8])
	*($3 + [116]) = $2
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [116])
	
.LABEL $label$7
	CALL memcpy(($3 + [160]), $2, [8])
	*((($3 + [72]) + [8])) = *($3 + [160])
	$4 = (*($3 + [116]) + [8])
	*($3 + [116]) = $4
	$5 = (int_64)0
	*(($3 + [56])) = (int_64)0
	$2 = [16]
	*((($3 + [32]) + [16])) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)(*((($3 + [112]) + [8])) - $4) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	$4 = *($3 + [116])
	
.LABEL $label$8
	CALL memcpy(($3 + [160]), $4, [32])
	*($3 + [116]) = (*($3 + [116]) + [32])
	$6 = ($3 + [128])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$10:
	$8 = (($3 + [160]) + $4)
	if ( ($2 <= [2]) ){ goto $label$11 }
	$5 = ((int_64)$5 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$12
	*($6 + [8]) = $7
	*($6) = ((int_64)$5 | (int_64)*($8))
	$2 = [16]
	$6 = ($6 + [16])
	$5 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$13 }
	if ( ($2 <= [2]) ){ goto $label$14 }
	CALL __ashlti3($3, $5, $7, (($2 << [3]) + [-8]))
	$7 = *(($3 + [8]))
	$5 = *($3)
	
.LABEL $label$14
	*($6) = $5
	*($6 + [8]) = $7
	
.LABEL $label$13
	$2 = (($3 + [128]) + [24])
	*((($3 + [32]) + [24])) = *($2)
	*((($3 + [32]) + [16])) = *((($3 + [128]) + [16]))
	*($3 + [40]) = *($3 + [136])
	*($3 + [32]) = *($3 + [128])
	*(($4 = (($3 + [16]) + [8]))) = *((($3 + [112]) + [8]))
	*($3 + [16]) = *($3 + [112])
	$4 = *($4)
	*((($3 + [192]) + [8])) = $4
	*(($6 = (($3 + [208]) + [8]))) = $4
	$5 = *($3 + [16])
	*($3 + [208]) = $5
	*($3 + [192]) = $5
	$4 = *($6)
	*((($3 + [160]) + [8])) = $4
	*($2) = $4
	*($3 + [128]) = $0
	*($3 + [136]) = $1
	$5 = *($3 + [208])
	*($3 + [144]) = $5
	*($3 + [160]) = $5
	$5 = *($3 + [104])
	*((($3 + [160]) + [24])) = (int_64)0
	*((($3 + [160]) + [16])) = (int_64)0
	*($3 + [168]) = (int_64)0
	*($3 + [160]) = (int_64)0
	CALL $108(($3 + [128]), $5, ($3 + [88]), ($3 + [72]), ($3 + [32]), ($3 + [160]), $3, $3)
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$15 }
	CALL $9(*((($3 + [88]) + [8])))
	
.LABEL $label$15
	$global$0 = ($3 + [224])
}

void .FUNC $210 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	$5 = ($2 + $4)
	*($3 + [136]) = $5
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [13284])
	$5 = *(($3 + [136]))
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [132]) = $2
	*($3 + [112]) = (int_64)0
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [13284])
	$5 = *((($3 + [128]) + [8]))
	$2 = *($3 + [132])
	
.LABEL $label$6
	CALL memcpy(($3 + [104]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [132]) = $2
	*($3 + [176]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	$5 = *(($3 + [136]))
	$2 = *($3 + [132])
	
.LABEL $label$7
	CALL memcpy(($3 + [176]), $2, [8])
	*((($3 + [104]) + [8])) = *($3 + [176])
	$4 = ($2 + [8])
	*($3 + [132]) = $4
	*(($3 + [88])) = (int_64)0
	$2 = [16]
	*((($3 + [64]) + [16])) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $4) > (uint_32)[31]) ){ goto $label$8 }
	CALL eosio_assert([0], [13284])
	$4 = *($3 + [132])
	
.LABEL $label$8
	CALL memcpy(($3 + [176]), $4, [32])
	*($3 + [132]) = ($4 + [32])
	$6 = (int_64)0
	$4 = ($3 + [144])
	$5 = [0]
	$7 = (int_64)0
	
.LOOP $label$10:
	$8 = (($3 + [176]) + $5)
	if ( ($2 <= [2]) ){ goto $label$11 }
	$6 = ((int_64)$6 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert([0], [13240])
	
.LABEL $label$12
	*($4 + [8]) = $7
	*($4) = ((int_64)$6 | (int_64)*($8))
	$2 = [16]
	$4 = ($4 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$13 }
	if ( ($2 <= [2]) ){ goto $label$14 }
	CALL __ashlti3(($3 + [8]), $6, $7, (($2 << [3]) + [-8]))
	$7 = *(($3 + [16]))
	$6 = *($3 + [8])
	
.LABEL $label$14
	*($4) = $6
	*($4 + [8]) = $7
	
.LABEL $label$13
	*((($3 + [64]) + [24])) = *((($3 + [144]) + [24]))
	*((($3 + [64]) + [16])) = *((($3 + [144]) + [16]))
	*($3 + [72]) = *($3 + [152])
	*($3 + [64]) = *($3 + [144])
	$2 = *($3 + [132])
	$5 = (($3 + [128]) + [8])
	if ( ((uint_32)(*($5) - $2) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [13284])
	$2 = *($3 + [132])
	
.LABEL $label$15
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [132]) = ($2 + [8])
	*($3 + [48]) = [0]
	*($3 + [40]) = (int_64)0
	CALL $122(($3 + [128]), ($3 + [40]))
	*(($2 = (($3 + [24]) + [8]))) = *($5)
	*($3 + [24]) = *($3 + [128])
	$2 = *($2)
	*((($3 + [208]) + [8])) = $2
	*(($5 = (($3 + [224]) + [8]))) = $2
	$6 = *($3 + [24])
	*($3 + [224]) = $6
	*($3 + [208]) = $6
	$2 = *($5)
	*((($3 + [144]) + [8])) = $2
	*((($3 + [176]) + [24])) = $2
	*($3 + [176]) = $0
	*($3 + [184]) = $1
	$6 = *($3 + [224])
	*($3 + [192]) = $6
	*($3 + [144]) = $6
	CALL $112(($3 + [176]), ($3 + [120]), ($3 + [104]), ($3 + [64]), *($3 + [56]), ($3 + [40]))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($3 + [48])))
	
.LABEL $label$16
	$global$0 = ($3 + [240])
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [12777])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth((int_64)4301877903122879952)
	if ( ((int_64)*($1) != (int_64)-4421661421696319488) ){ goto $label$2 }
	*(($4 = (($3 + [64]) + [32]))) = [0]
	*($3 + [72]) = (int_64)-3699144143931441152
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	*($3 + [100]) = [0]
	$5 = *($0)
	*($3 + [64]) = $5
	*((($3 + [24]) + [32])) = [0]
	*($3 + [32]) = $5
	*($3 + [24]) = $5
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [60]) = [0]
	$1 = CALL db_lowerbound_i64($5, $5, (int_64)-4421661421696319488, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	*($3 + [20]) = CALL $169(($3 + [24]), $1)
	*($3 + [16]) = ($3 + [24])
	$6 = (($3 + [64]) + [24])
	$7 = ($3 + [120])
	$8 = ($3 + [92])
	
.LOOP $label$5:
	$5 = *($0)
	*($3 + [8]) = ($3 + [16])
	*($3 + [136]) = $5
	if ( ((int_64)*($3 + [64]) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$6
	*($7) = ($3 + [136])
	*($3 + [116]) = ($3 + [8])
	*($3 + [112]) = ($3 + [64])
	*(($1 = CALL $7([112])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [64]) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*(($1 + [80])) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*($1 + [96]) = ($3 + [64])
	CALL $200(($3 + [112]), $1)
	*($3 + [128]) = $1
	$5 = *($1)
	*($3 + [112]) = $5
	$9 = *($1 + [100])
	*($3 + [108]) = $9
	$10 = *($8)
	if ( ((uint_32)$10 >= (uint_32)*($4)) ){ goto $label$11 }
	*($10 + [8]) = $5
	*($10 + [16]) = $9
	*($3 + [128]) = [0]
	*($10) = $1
	*($8) = ($10 + [24])
	$1 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $120($6, ($3 + [128]), ($3 + [112]), ($3 + [108]))
	$1 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *($3 + [16])
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $10) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$12
	CALL $9($1)
	$5 = *($3 + [16])
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $10) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [13289])
	CALL eosio_assert([0], [13323])
	
.LABEL $label$7
	$1 = [0]
	$9 = CALL db_next_i64(*($10 + [100]), ($3 + [112]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$1 = CALL $169((CASTING uint_32)(uint_64 $5), $9)
	
.LABEL $label$13
	CALL $175(($3 + [24]), $10)
	*($3 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)((int_64)$5 & (int_64)4294967295))
	if ( $1 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	*($3 + [20]) = [0]
	*($3 + [16]) = ($3 + [24])
	
.LABEL $label$3
	$1 = CALL db_lowerbound_i64(*($3 + [64]), *((($3 + [64]) + [8])), (int_64)-4421661421696319488, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$16 }
	*($3 + [20]) = CALL $169(($3 + [64]), $1)
	*($3 + [16]) = ($3 + [64])
	$6 = (($3 + [24]) + [24])
	$4 = (($3 + [112]) + [8])
	$7 = ($3 + [56])
	$8 = ($3 + [52])
	
.LOOP $label$17:
	$5 = *($0)
	*($3 + [8]) = ($3 + [16])
	*($3 + [136]) = $5
	if ( ((int_64)*($3 + [24]) == (int_64)CALL current_receiver()) ){ goto $label$18 }
	CALL eosio_assert([0], [12783])
	
.LABEL $label$18
	*($4) = ($3 + [136])
	*($3 + [116]) = ($3 + [8])
	*($3 + [112]) = ($3 + [24])
	*(($1 = CALL $7([112])) + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [64]) = (int_64)0
	*(($1 + [88])) = (int_64)0
	*(($1 + [80])) = (int_64)0
	*(($1 + [72])) = (int_64)0
	*($1 + [96]) = ($3 + [24])
	CALL $201(($3 + [112]), $1)
	*($3 + [128]) = $1
	$5 = *($1)
	*($3 + [112]) = $5
	$9 = *($1 + [100])
	*($3 + [108]) = $9
	$10 = *($8)
	if ( ((uint_32)$10 >= (uint_32)*($7)) ){ goto $label$23 }
	*($10 + [8]) = $5
	*($10 + [16]) = $9
	*($3 + [128]) = [0]
	*($10) = $1
	*($8) = ($10 + [24])
	$1 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( ($1 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $120($6, ($3 + [128]), ($3 + [112]), ($3 + [108]))
	$1 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( $1 ){ goto $label$21 }
	
.LABEL $label$22
	$5 = *($3 + [16])
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $10) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL $9(*(($1 + [48])))
	
.LABEL $label$24
	CALL $9($1)
	$5 = *($3 + [16])
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $10) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [13289])
	CALL eosio_assert([0], [13323])
	
.LABEL $label$19
	$1 = [0]
	$9 = CALL db_next_i64(*($10 + [100]), ($3 + [112]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$25 }
	$1 = CALL $169((CASTING uint_32)(uint_64 $5), $9)
	
.LABEL $label$25
	CALL $175(($3 + [64]), $10)
	*($3 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)32) | (int_64)((int_64)$5 & (int_64)4294967295))
	if ( $1 ){ goto $label$17 }
	$0 = *($3 + [48])
	if ( $0 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	*($3 + [20]) = [0]
	*($3 + [16]) = ($3 + [64])
	$0 = *($3 + [48])
	if ( ($0 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = ($3 + [52])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$28 }
	if ( ((*($10 + [40]) & [1]) == 0) ){ goto $label$29 }
	CALL $9(*(($10 + [48])))
	
.LABEL $label$29
	CALL $9($10)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$27 }
	$1 = *(($3 + [48]))
	*($9) = $0
	CALL $9($1)
	$0 = *($3 + [88])
	if ( $0 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$26
	*($9) = $0
	CALL $9($0)
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	$0 = *($3 + [88])
	if ( $0 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$1
	$9 = ($3 + [92])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$31 }
	
.LOOP $label$32:
	$1 = ($1 + [-24])
	$10 = *($1)
	*($1) = [0]
	if ( ($10 == 0) ){ goto $label$33 }
	if ( ((*($10 + [40]) & [1]) == 0) ){ goto $label$34 }
	CALL $9(*(($10 + [48])))
	
.LABEL $label$34
	CALL $9($10)
	
.LABEL $label$33
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$32 }
	$1 = *(($3 + [88]))
	goto $label$30 
	
.LABEL $label$31
	$1 = $0
	
.LABEL $label$30
	*($9) = $0
	CALL $9($1)
	$global$0 = ($3 + [144])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($5 + [36])))
	
.LABEL $label$13
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL $9(*(($5 + [24])))
	
.LABEL $label$14
	CALL $9($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$15:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	if ( ((*($8 + [28]) & [1]) == 0) ){ goto $label$17 }
	CALL $9(*(($8 + [36])))
	
.LABEL $label$17
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL $9(*(($8 + [24])))
	
.LABEL $label$18
	CALL $9($8)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*(($1 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10) + [8]) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL $9($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
	$9 = *(($1 + [36]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2108902700040753152, ($2 + [8]), *(($1 + [8])))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($9)
	
.LABEL $label$15
	$9 = *(($1 + [40]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2108902700040753151, ($2 + [8]), *(($1 + [8])))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [16])
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [28]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [13398])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [13448])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($5 + [24])))
	
.LABEL $label$13
	CALL $9($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($8 + [24])))
	
.LABEL $label$16
	CALL $9($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $7([80])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	*(($5 + [56])) = (int_64)0
	*(($5 + [48])) = (int_64)0
	*(($5 + [40])) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $225(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = (int_64)
	*($3 + [32]) = $7((int_64)0 - *($5)))
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $181(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [12657])
	
.LABEL $label$5
	$2 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $7([24])) + [8]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [13284])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4421665916975824896
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = (int_64)-4421665916975824896
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $236(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $9($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$4 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4421665916975824896, (int_64)-4421665916975824896)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $192($0, $4)
	if ( ((int_32)*($4 + [8]) == (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [12606])
	
.LABEL $label$2
	*($3) = $1
	CALL $234($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $235($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $233(CALL $232($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [12777])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [12777])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$5 = (int_64)$4 >> (int_64)63
	$4 = *($0)
	$6 = ((int_64)((int_64)$4 + (int_64)$5)) ^ (int_64)$5)
	$7 = *($0 + [8])
	$8 = ($7 & [255])
	if ( $3 ){ goto $label$4 }
	if ( ((uint_32)(($1 + ( $8 ? [19] : ((uint_32)$8 > (uint_32)[19]) )) + [11]) <= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = (CALL $69($1, $2, [1], $6, $8, (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63))) + [1])
	$8 = [0]
	$5 = *(($0 + [8]))
	if ( (int_64)(((int_64)$5 & (int_64)65280) == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[7]) ){ goto $label$5 }
	$10 = ((int_64)$5 & (int_64)16711680)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($9 + $8)
	if ( ((uint_32)$8 > (uint_32)$2) ){ goto $label$2 }
	if ( ($8 <= $1) ){ goto $label$2 }
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [0]
	*(($3 = CALL $69($1, $2, [0], $6, ($7 & [255]), (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63))))) = [32]
	$1 = ($3 + [1])
	$10 = *(($0 + [8]))
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((uint_32)($3 + [8]) <= (uint_32)$2) ){ goto $label$7 }
	if ( (int_64)(((int_64)$10 & (int_64)65280) == 0) ){ goto $label$8 }
	$8 = [0]
	$10 = $5
	
.LOOP $label$9:
	$8 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[7]) ){ goto $label$8 }
	$4 = ((int_64)$10 & (int_64)65280)
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = ($1 + $8)
	if ( ((uint_32)$8 > (uint_32)$2) ){ goto $label$2 }
	
.LABEL $label$7
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	$8 = [0]
	
.LOOP $label$11:
	*(($1 + $8)) = $5
	$2 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$10 }
	$8 = $2
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = ($1 + $2)
	
.LABEL $label$2
	return $8
	
.LABEL $label$1
	return $1
}