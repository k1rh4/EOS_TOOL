(data (i32.const 4) "\d0\91\00\00")
(data (i32.const 12) "\00\00\00\00\00\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00")
(data (i32.const 48) "\01\02\03\04\05\06\07\08\t\n\0b\0c\0d\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d!\"#$%&\'()*+,-123456789:;<=")
(data (i32.const 100) "\00\00\00\00\00\00\00\00\0f\00\00\00\10\00\00\00\0d\00\00\00\0e\00\00\00\11\00\00\00\12\00\00\00")
(data (i32.const 144) "\0b\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00\n\00\00\00")
(data (i32.const 192) "5==cbCardCount\00")
(data (i32.const 208) "./niuniu_logic.cpp\00")
(data (i32.const 240) "GetCardType\00")
(data (i32.const 256) "5==cbFirstCardCount && 5==cbNextCardCount\00")
(data (i32.const 304) "CompareCard\00")
(data (i32.const 320) "\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05\00\00\00")
(data (i32.const 384) "\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00")
(data (i32.const 448) "\00\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\05\00\00\00\05\00\00\00\05\00\00\00")
(data (i32.const 512) "onerror\00")
(data (i32.const 528) "eosio\00")
(data (i32.const 544) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 608) "transfer\00")
(data (i32.const 624) "award\00")
(data (i32.const 640) "gamebet\00")
(data (i32.const 648) "\00\00\00\00\00\00\00\00\13\00\00\00")
(data (i32.const 672) "black\00")
(data (i32.const 688) "white\00")
(data (i32.const 696) "\00\00\00\00\00\00\00\00\14\00\00\00")
(data (i32.const 720) "read\00")
(data (i32.const 736) "get\00")
(data (i32.const 752) "ctrl.admin\00")
(data (i32.const 768) "eostgcbonus1\00")
(data (i32.const 784) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 848) "No permission\00")
(data (i32.const 864) "unable to find key\00")
(data (i32.const 896) "nniu\00")
(data (i32.const 912) "No supported game. gname:%s, %s\00")
(data (i32.const 944) "\00\00\00\00\00\00\00\00\15\00\00\00\16\00\00\00\17\00\00\00")
(data (i32.const 976) "cannot pass end iterator to modify\00")
(data (i32.const 1024) "-\00")
(data (i32.const 1040) "object passed to modify is not in multi_index\00")
(data (i32.const 1088) "cannot modify objects in table of another contract\00")
(data (i32.const 1152) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1216) "write\00")
(data (i32.const 1232) "nniu.feerate\00")
(data (i32.const 1248) "%02X : %02X, %02X : %02X\00")
(data (i32.const 1280) "win\00")
(data (i32.const 1296) "lose\00")
(data (i32.const 1312) "%02X,%02X,%02X,%02X,%02X-%02X,%02X,,%s\00")
(data (i32.const 1360) "logic failed.\00")
(data (i32.const 1376) "invalid symbol name\00")
(data (i32.const 1408) "|\00")
(data (i32.const 1424) "|left-\00")
(data (i32.const 1456) "attempt to add asset with different symbol\00")
(data (i32.const 1504) "addition underflow\00")
(data (i32.const 1536) "addition overflow\00")
(data (i32.const 1568) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1632) "logic failed 3.\00")
(data (i32.const 1648) "nniu.afterlk\00")
(data (i32.const 1664) "Not time2 %d %d %d, ju=%llu, %s\00")
(data (i32.const 1696) "nniu.eosdiff\00")
(data (i32.const 1712) "Not allow amount.\00")
(data (i32.const 1744) "Must EOS.\00")
(data (i32.const 1760) "Must EOS 2.\00")
(data (i32.const 1776) "The amount must be an integer multiple of 3.\00")
(data (i32.const 1824) "Not allow value.\00")
(data (i32.const 1844) "@\07\00\00")
(data (i32.const 1856) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1904) "error reading iterator\00")
(data (i32.const 1936) "exits ju\00")
(data (i32.const 1952) ".curju\00")
(data (i32.const 1968) "cannot pass end iterator to erase\00")
(data (i32.const 2016) "cannot increment end iterator\00")
(data (i32.const 2048) "object passed to erase is not in multi_index\00")
(data (i32.const 2096) "cannot erase objects in table of another contract\00")
(data (i32.const 2160) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2224) "cannot create objects in table of another contract\00")
(data (i32.const 2288) ".betid\00")
(data (i32.const 2304) ".nseed\00")
(data (i32.const 2320) "Must betid-seed\00")
(data (i32.const 2336) "trans.eosth\00")
(data (i32.const 2352) "eosio.token\00")
(data (i32.const 2368) "ctrl.boss\00")
(data (i32.const 2384) "eostgcfirst1\00")
(data (i32.const 2400) "trans.tgcth\00")
(data (i32.const 2416) "ctrl.token\00")
(data (i32.const 2432) "eostgctoken1\00")
(data (i32.const 2448) "\00\00\00\00\00\00\00\00\18\00\00\00\19\00\00\00\1a\00\00\00")
(data (i32.const 2468) "\00\00\00\00\00\00\00\00\18\00\00\00\1b\00\00\00\1c\00\00\00")
(data (i32.const 2488) "\00\00\00\00\00\00\00\00\18\00\00\00\1d\00\00\00\1e\00\00\00")
(data (i32.const 2512) "tiger\00")
(data (i32.const 2528) "Not supported game.\00")
(data (i32.const 2560) ".ids\00")
(data (i32.const 2576) ".save\00")
(data (i32.const 2592) "Must betid-seed1-seed2\00")
(data (i32.const 2624) "active\00")
(data (i32.const 2640) "sndid.award\00")
(data (i32.const 2656) ".queue\00")
(data (i32.const 2672) "global.testx\00")
(data (i32.const 2688) ".testx\00")
(data (i32.const 2704) "1\00")
(data (i32.const 2720) "0123456789abcdef\00")
(data (i32.const 2752) "tiger2.testn\00")
(data (i32.const 2768) "20000\00")
(data (i32.const 2784) "0\00")
(data (i32.const 2800) "Not match bet detail.\00")
(data (i32.const 2832) "tiger.testn\00")
(data (i32.const 2848) "\00\00\00\01\01d\01\01d\01\02\19\01\02\19\01\02\19\01\02\19\01\02\19\01\02\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1eb\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00")
(data (i32.const 4400) "\00\00\00\01\01d\01\01d\01\02\19\01\02\19\01\02\19\01\02\19\01\02\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1eb\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0bf\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00")
(data (i32.const 5952) "\00\00\00\01\01d\01\01d\01\02\19\01\02\19\01\02\19\01\02\19\01\02\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\01\18\19\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0d(\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\02\0c\02\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1e\03\11\1eb\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\0b\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\17\14\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\05\15\02\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\04\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\10\0f\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\06\0f\02\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\n\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\16\n\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\07\t\02\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\03\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\08\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\0e\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\08\14\05\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\07\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00\00\13\00")
(data (i32.const 7504) ",\00")
(data (i32.const 7520) "tiger.eosge\00")
(data (i32.const 7536) "tiger.tgcge\00")
(data (i32.const 7552) "tiger.eosle1\00")
(data (i32.const 7568) "tiger.tgcle1\00")
(data (i32.const 7584) "Amount is out of range\00")
(data (i32.const 7616) "slot.testn\00")
(data (i32.const 7632) "\00ABCCDDEEEXXXYYY#####\00ABBCDDEEXXXYYYY#####\00ABCCDDEEEXXXYYY#####")
(data (i32.const 7696) "multiplication overflow\00")
(data (i32.const 7728) "multiplication underflow\00")
(data (i32.const 7760) "divide by zero\00")
(data (i32.const 7776) "signed division overflow\00")
(data (i32.const 7808) "Amount error.\00")
(data (i32.const 7824) "Not enought ticket.\00")
(data (i32.const 7856) "ticketbet\00")
(data (i32.const 7872) "Return money!\00")
(data (i32.const 7888) "[bettor-]slot-11000,3000-cseed-ref\00")
(data (i32.const 7936) "Bettor not match\00")
(data (i32.const 7968) "Game not match 1\00")
(data (i32.const 8000) "Game not match 2\00")
(data (i32.const 8032) "bet_detail not match 1\00")
(data (i32.const 8064) "bet_detail not match 2\00")
(data (i32.const 8096) "Ref not match.\00")
(data (i32.const 8112) "Amount not match detail\00")
(data (i32.const 8144) "Amount out of range.\00")
(data (i32.const 8176) "No server side seed. rejected.\00")
(data (i32.const 8208) "Not allow.\00")
(data (i32.const 8224) ".eosle\00")
(data (i32.const 8240) ".tgcle\00")
(data (i32.const 8256) ".eosge\00")
(data (i32.const 8272) ".tgcge\00")
(data (i32.const 8288) "global.state\00")
(data (i32.const 8304) "invest\00")
(data (i32.const 8320) "No allow.\00")
(data (i32.const 8336) "Must transfer to self.\00")
(data (i32.const 8368) "Must transfer EOS\00")
(data (i32.const 8400) "disable\00")
(data (i32.const 8416) "contract closed.\00")
(data (i32.const 8448) "default\00")
(data (i32.const 16864) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 16960) "%d\00")
(data (i32.const 16976) "%lld\00")
(data (i32.const 16992) "%llu\00")
(data (i32.const 17000) "8Q\00\00")
(data (i32.const 17008) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 17044) "\a8B\00\00")
(data (i32.const 17064) "\05\00\00\00\00\00\00\00\00\00\00\00\1f\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00!\00\00\00HC\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 18256) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 18720) "0123456789ABCDEF")
(data (i32.const 18736) "-+   0X0x\00")
(data (i32.const 18752) "(null)\00")
(data (i32.const 18768) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 18800) "inf\00")
(data (i32.const 18816) "INF\00")
(data (i32.const 18832) "nan\00")
(data (i32.const 18848) "NAN\00")
(data (i32.const 18864) ".\00")
(data (i32.const 18880) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 18976) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 20792) "\05\00\00\00\00\00\00\00\00\00\00\00\1f\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\"\00\00\00!\00\00\00\d0Q\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_find_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$20 (param i32)))
(import "env" "db_idx64_store" (func $fimport$21 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$22 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "db_store_i64" (func $fimport$26 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$27 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$28 (param i32 i32)))
(import "env" "has_auth" (func $fimport$29 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "read_action_data" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$35 (param i64)))
(import "env" "require_auth2" (func $fimport$36 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$37 (param i64)))
(import "env" "send_deferred" (func $fimport$38 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$39 (param i32 i32)))
(import "env" "sha256" (func $fimport$40 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZN11CPokerLogic11IsValidCardEh" (func $2))
(export "_ZN11CPokerLogic12MakeCardDataEhh" (func $3))
(export "_ZN11CPokerLogicD2Ev" (func $6))
(export "_ZN12CNiuNiuLogicD0Ev" (func $7))
(export "_ZeqRK11checksum256S1_" (func $8))
(export "_ZeqRK11checksum160S1_" (func $9))
(export "_ZneRK11checksum160S1_" (func $10))
(export "now" (func $11))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $12))
(export "_ZN11CPokerLogicC2Ev" (func $13))
(export "_ZN11CPokerLogic11CombinationERKNSt3__16vectorIhNS0_9allocatorIhEEEEiRNS1_IS4_NS2_IS4_EEEE" (func $14))
(export "_ZN11CPokerLogic12PrintCombResERKNSt3__16vectorIhNS0_9allocatorIhEEEERNS1_IiNS2_IiEEEERNS1_IS4_NS2_IS4_EEEE" (func $15))
(export "_ZN11CPokerLogic7compareEhh" (func $16))
(export "_ZN11CPokerLogic9SubVectorERKNSt3__16vectorIhNS0_9allocatorIhEEEES6_RS4_" (func $24))
(export "_ZN12CNiuNiuLogicC2Ev" (func $25))
(export "_ZN12CNiuNiuLogic12RandCardListEPhhPFivE" (func $26))
(export "_ZN12CNiuNiuLogic14RandCardListExEPhhPFivE" (func $27))
(export "_ZN12CNiuNiuLogic7RetTypeEi" (func $28))
(export "_ZN12CNiuNiuLogic11GetCardTypeEPKhhPh" (func $29))
(export "_ZN12CNiuNiuLogic12SortCardListEPhhh" (func $30))
(export "_ZN12CNiuNiuLogic17GetCardLogicValueEh" (func $31))
(export "_ZN12CNiuNiuLogic15GetCardNewValueEh" (func $32))
(export "_ZN12CNiuNiuLogic11CompareCardEPKhhS1_hRhh" (func $33))
(export "_ZN12CNiuNiuLogic14GetCardListPipEPKhh" (func $34))
(export "apply" (func $35))
(export "malloc" (func $201))
(export "free" (func $204))
(export "_ZNSt3__19to_stringEi" (func $217))
(export "_ZNSt3__19to_stringEx" (func $220))
(export "_ZNSt3__19to_stringEy" (func $221))
(export "__assert_fail" (func $225))
(export "fprintf" (func $226))
(export "fflush" (func $227))
(export "__ofl_lock" (func $228))
(export "__lockfile" (func $229))
(export "__unlockfile" (func $230))
(export "__ofl_unlock" (func $231))
(export "__unlock" (func $232))
(export "__lock" (func $233))
(export "__stdio_close" (func $234))
(export "__stdout_write" (func $235))
(export "__stdio_seek" (func $236))
(export "__stdio_write" (func $237))
(export "vfprintf" (func $238))
(export "__fwritex" (func $240))
(export "__errno_location" (func $242))
(export "strerror" (func $243))
(export "strnlen" (func $244))
(export "wctomb" (func $245))
(export "__signbitl" (func $246))
(export "__fpclassifyl" (func $247))
(export "frexpl" (func $248))
(export "wcrtomb" (func $249))
(export "memchr" (func $250))
(export "__lctrans" (func $251))
(export "__lctrans_impl" (func $252))
(export "__mo_lookup" (func $253))
(export "strcmp" (func $254))
(export "__towrite" (func $255))
(export "snprintf" (func $256))
(export "vsnprintf" (func $257))
(export "sprintf" (func $259))
(export "vsprintf" (func $260))
(export "atoll" (func $261))
(export "memcmp" (func $262))
(export "strlen" (func $263))
(table $0 35 35 anyfunc)
(elem (i32.const 0) $264 $16 $38 $49 $46 $36 $40 $42 $47 $44 $258 $0 $1 $2 $3 $4 $5 $6 $7 $200 $199 $65 $80 $81 $159 $167 $168 $164 $165 $160 $161 $234 $235 $236 $237)



void .FUNC _ZNSt3__19to_stringEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [16976], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $218(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $218(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [304])
	*([0] + [4]) = $11
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $223(($11 + [288]), ($1 + [24]))
	*((($11 + [256]) + [24])) = *(($1 + [72]))
	*((($11 + [256]) + [16])) = *(($1 + [64]))
	*($11 + [264]) = *(($1 + [56]))
	*($11 + [256]) = *($1 + [48])
	*((($11 + [240]) + [8])) = *(($1 + [88]))
	*($11 + [240]) = *($1 + [80])
	*($11 + [224]) = [0]
	*($11 + [228]) = [0]
	*($11 + [232]) = [0]
	$6 = (*(($1 + [100])) - *($1 + [96]))
	$5 = int_32($6 >> [4])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	$6 = CALL $205($6)
	*(($11 + [232])) = ($6 + ($5 << [4]))
	*($11 + [224]) = $6
	*($11 + [228]) = $6
	$9 = *(($1 + [96]))
	$5 = (*(($1 + [100])) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $9, $5)
	*($11 + [228]) = (*($11 + [228]) + $5)
	
.LABEL $label$3
	$9 = *($1 + [120])
	$8 = *($1 + [112])
	$7 = *($1 + [108])
	CALL $223(($11 + [208]), ($1 + [124]))
	CALL $223(($11 + [192]), ($1 + [136]))
	*((($11 + [160]) + [24])) = *(($1 + [184]))
	*((($11 + [160]) + [16])) = *(($1 + [176]))
	*($11 + [168]) = *(($1 + [168]))
	*($11 + [160]) = *($1 + [160])
	CALL $223(($11 + [144]), ($1 + [192]))
	*((($11 + [128]) + [8])) = *(($1 + [216]))
	*($11 + [128]) = *($1 + [208])
	*($11 + [116]) = [0]
	*($11 + [112]) = [0]
	*($11 + [120]) = [0]
	$6 = (*(($1 + [228])) - *($1 + [224]))
	$5 = int_32($6 >> [4])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = CALL $205($6)
	*(($11 + [120])) = ($6 + ($5 << [4]))
	*($11 + [112]) = $6
	*($11 + [116]) = $6
	$10 = *(($1 + [224]))
	$5 = (*(($1 + [228])) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $10, $5)
	*($11 + [116]) = (*($11 + [116]) + $5)
	
.LABEL $label$4
	CALL $223(($11 + [96]), ($1 + [236]))
	*((($11 + [64]) + [24])) = *((($11 + [256]) + [24]))
	*((($11 + [64]) + [16])) = *((($11 + [256]) + [16]))
	*($11 + [72]) = *($11 + [264])
	*($11 + [64]) = *($11 + [256])
	*((($11 + [48]) + [8])) = *((($11 + [240]) + [8]))
	*($11 + [48]) = *($11 + [240])
	*((($11 + [16]) + [24])) = *((($11 + [160]) + [24]))
	*((($11 + [16]) + [16])) = *((($11 + [160]) + [16]))
	*($11 + [24]) = *($11 + [168])
	*($11 + [16]) = *($11 + [160])
	*(($11 + [8])) = *((($11 + [128]) + [8]))
	*($11) = *($11 + [128])
	CALL $175($0, $2, $3, $4, ($11 + [288]), ($11 + [64]), ($11 + [48]), ($11 + [224]), $7, $8, $9, ($11 + [208]), ($11 + [192]), ($11 + [16]), ($11 + [144]), $11, ($11 + [112]), ($11 + [96]))
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$5 }
	CALL $207(*($11 + [104]))
	
.LABEL $label$5
	$1 = *($11 + [112])
	if ( ($1 == 0) ){ goto $label$6 }
	*($11 + [116]) = $1
	CALL $207($1)
	
.LABEL $label$6
	if ( ((*($11 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL $207(*($11 + [152]))
	
.LABEL $label$7
	if ( ((*($11 + [192]) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*($11 + [200]))
	
.LABEL $label$8
	if ( ((*($11 + [208]) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*($11 + [216]))
	
.LABEL $label$9
	$1 = *($11 + [224])
	if ( ($1 == 0) ){ goto $label$10 }
	*($11 + [228]) = $1
	CALL $207($1)
	
.LABEL $label$10
	if ( ((*($11 + [288]) & [1]) == 0) ){ goto $label$11 }
	CALL $207(*($11 + [296]))
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [304])
	return (unreachable)
	
.LABEL $label$2
	CALL $222(($11 + [224]))
	
.LABEL $label$1
	CALL $222(($11 + [112]))
	(unreachable)
}

int_32 .FUNC _ZN11CPokerLogicD2Ev (int_32 $0)
{
	return $0
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $55(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $177(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($2 + [48]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($3 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($3 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $90(*($1), ($3 + [96]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($3 + [108]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($3 + [112]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($3 + [120]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $55(*($1), ($3 + [124]))
	CALL $55(*($1), ($3 + [136]))
	*($4 + [8]) = $3
	CALL $178(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [-48]
	$3 = *($1)
	$4 = ($3 & [1])
	$1 = (( *($1 + [8]) ? ($1 + [1]) : $4 ) + ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 ))
	$3 = *(($1 + [-6]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$3 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($5 + $3)
	goto $label$1 
	
.LABEL $label$2
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$1
	$4 = ($3 << [4])
	$5 = [-48]
	$3 = *(($1 + [-5]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($5 + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$4
	*($2) = (((int_32)($3 + $4) % (int_32)[20]) + [1])
	$5 = [-48]
	$3 = *(($1 + [-4]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = ($5 + $3)
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$7
	$4 = ($3 << [4])
	$5 = [-48]
	$3 = *(($1 + [-3]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$12 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$11 }
	
.LABEL $label$12
	$3 = ($5 + $3)
	goto $label$10 
	
.LABEL $label$11
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$10
	*($2 + [1]) = (((int_32)($3 + $4) % (int_32)[20]) + [1])
	$5 = [-48]
	$3 = *(($1 + [-2]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$15 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = ($5 + $3)
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$13
	$5 = ($3 << [4])
	$3 = [-48]
	$1 = *(($1 + [-1]))
	if ( ((($1 + [-48]) & [255]) <= [10]) ){ goto $label$18 }
	$3 = [-55]
	if ( ((uint_32)(($1 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = ($3 + $1)
	goto $label$16 
	
.LABEL $label$17
	$1 = ( ($1 + [-87]) ? [0] : ((($1 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$16
	*($2 + [2]) = (((int_32)($1 + $5) % (int_32)[20]) + [1])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72(*($1), ($0 + [32]))
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $61($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1216])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1216])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $149(CALL $150($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN12CNiuNiuLogicD0Ev (int_32 $0)
{
	CALL $207($0)
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($2 + [160]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$0 = *($0)
	CALL $55(*($1), ($0 + [192]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [208]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [216]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $90(*($1), ($0 + [224]))
	CALL $55(*($1), ($0 + [236]))
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	return ($1 & [15])
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [16992], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $218(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $218(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	return uint_32($1 >> [4])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [96])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [100])) = $6
	CALL $207($6)
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*(($4 + [32])))
	
.LABEL $label$8
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	$6 = *($4 + [96])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [100])) = $6
	CALL $207($6)
	
.LABEL $label$11
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($4 + [32])))
	
.LABEL $label$12
	CALL $207($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [128]))
	$7 = *($1 + [132])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$14 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL db_idx64_remove($7)
	
.LABEL $label$13
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC _ZN11CPokerLogic12MakeCardDataEhh (int_32 $0, int_32 $1, int_32 $2)
{
	return ((($2 << [4]) | ($1 + [1])) & [255])
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]) + [8])
	CALL $210(($1 + [24]), (*($0 + [8]) + [28]))
	$4 = *(*($0 + [12]) + [4])
	*($1 + [48]) = *($4 + [16])
	*(($1 + [72])) = *(($4 + [40]))
	*(($1 + [64])) = *(($4 + [32]))
	*(($1 + [56])) = *(($4 + [24]))
	$4 = *($0 + [16])
	*($1 + [80]) = *($4)
	*(($1 + [88])) = *(($4 + [8]))
	$2 = *($0 + [8])
	$5 = ($2 + [16])
	$4 = ($1 + [96])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	CALL $105($4, *($5), *(($2 + [20])))
	
.LABEL $label$1
	*($1 + [108]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [112]) = *(*(($0 + [8])) + [40])
	$3 = *(*($0 + [20]))
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [7856]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$7 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$2 }
	*($1 + [120]) = ((int_64)$3 == (int_64)$8)
}

void .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	CALL $189(*($0 + [4]), $1)
	$9 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + [72])
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [96])
	$4 = *(($1 + [100]))
	$5 = ($4 - $3)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$2:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$9 = (($5 & [-16]) + $9)
	
.LABEL $label$3
	$4 = ($9 + [16])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($4)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [12]) = $9
	*($10 + [8]) = $9
	*($10 + [16]) = ($9 + $4)
	CALL $142(($10 + [8]), $1)
	$8 = *($1)
	*($1 + [128]) = CALL db_store_i64(*($2 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $8, $9, $4)
	if ( ($4 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$8 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($10 + [24]) = *($1 + [8])
	*($1 + [132]) = CALL db_idx64_store($8, (int_64)4229865212519383040, $6, $7, ($10 + [24]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [416])
	*([0] + [4]) = $23
	$10 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$17 = (int_64)0
	$16 = (int_64)59
	$10 = [752]
	$18 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$17 > (uint_64)(int_64)9) ){ goto $label$7 }
	$21 = *($10)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$21 = ($21 + [165])
	goto $label$5 
	
.LABEL $label$7
	$19 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$3
	$10 = ($10 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$2 }
	$17 = (int_64)0
	$19 = (int_64)59
	$10 = [768]
	$20 = (int_64)0
	
.LOOP $label$8:
	$16 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$9 }
	$21 = *($10)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$21 = ($21 + [165])
	goto $label$10 
	
.LABEL $label$11
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($21 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$9
	$10 = ($10 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$20 = ((int_64)$16 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$8 }
	$14 = *(($0 + [40]))
	$15 = *(($0 + [44]))
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$12 }
	$10 = ($15 + [-24])
	$22 = ([0] - $14)
	
.LOOP $label$13:
	if ( ((int_64)*(*($10)) == (int_64)$18) ){ goto $label$12 }
	$15 = $10
	$21 = ($10 + [-24])
	$10 = $21
	if ( ((int_32)($21 + $22) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$21 = ($0 + [16])
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$16 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$21), [784])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $18)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $62($21, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$21), [784])
	
.LABEL $label$15
	$20 = *($10 + [8])
	
.LABEL $label$14
	$10 = CALL has_auth($20)
	
.LABEL $label$1
	CALL eosio_assert($10, [848])
	*(($23 + [408])) = [0]
	*($23 + [384]) = $1
	*($23 + [392]) = (int_64)-1
	*($23 + [400]) = (int_64)0
	*($23 + [376]) = *(($0 + [8]))
	CALL $63(($23 + [368]), ($23 + [376]), $2, [864])
	if ( ((int_32)*($5 + [4]) != (int_32)*($5)) ){ goto $label$17 }
	*($23 + [64]) = $1
	CALL $64(($23 + [96]), ($23 + [64]))
	$15 = ( *($23 + [104]) ? (($23 + [96]) | [1]) : (*($23 + [96]) & [1]) )
	$16 = (int_64)59
	$10 = [896]
	$17 = (int_64)0
	$18 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$17 > (uint_64)(int_64)3) ){ goto $label$23 }
	$21 = *($10)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$21 = ($21 + [165])
	goto $label$21 
	
.LABEL $label$23
	$19 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$19
	$10 = ($10 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$18 }
	*($23 + [48]) = $18
	CALL $64(($23 + [80]), ($23 + [48]))
	$10 = *($23 + [80])
	*($23) = $15
	*($23 + [4]) = ( *($23 + [88]) ? (($23 + [80]) | [1]) : ($10 & [1]) )
	CALL sprintf(($23 + [112]), [912], $23)
	if ( ((*($23 + [80]) & [1]) == 0) ){ goto $label$24 }
	CALL $207(*(($23 + [88])))
	
.LABEL $label$24
	if ( ((*($23 + [96]) & [1]) == 0) ){ goto $label$25 }
	CALL $207(*(($23 + [104])))
	
.LABEL $label$25
	$17 = (int_64)0
	$16 = (int_64)59
	$10 = [896]
	$18 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$17 > (uint_64)(int_64)3) ){ goto $label$31 }
	$21 = *($10)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$21 = ($21 + [165])
	goto $label$29 
	
.LABEL $label$31
	$19 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$27
	$10 = ($10 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$26 }
	CALL eosio_assert(((int_64)$18 == (int_64)$1), ($23 + [112]))
	*($23 + [96]) = [952]
	*($23 + [100]) = $0
	CALL $65(($23 + [96]), *($23 + [372]), $3, $4, $5, $6, $7)
	
.LABEL $label$17
	*($23 + [104]) = [0]
	*($23 + [96]) = (int_64)0
	$10 = *($23 + [372])
	if ( ((int_32)*(($10 + [80])) == (int_32)*($10 + [76])) ){ goto $label$32 }
	$9 = ($4 + [1])
	$8 = ($3 + [1])
	$21 = [0]
	$22 = [0]
	
.LOOP $label$33:
	CALL _ZNSt3__19to_stringEy(($23 + [32]), *((*($10 + [76]) + $21)))
	$10 = CALL $215(($23 + [32]), [1024])
	$15 = ($10 + [8])
	*(($11 = (($23 + [48]) + [8]))) = *($15)
	*($23 + [48]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($15) = [0]
	$10 = *($3)
	$15 = ($10 & [1])
	$10 = CALL $214(($23 + [48]), ( *(($3 + [8])) ? $8 : $15 ), ( *(($3 + [4])) ? uint_32($10 >> [1]) : $15 ))
	$15 = ($10 + [8])
	*(($12 = (($23 + [64]) + [8]))) = *($15)
	*($23 + [64]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($15) = [0]
	$10 = CALL $215(($23 + [64]), [1024])
	$15 = ($10 + [8])
	*(($13 = (($23 + [80]) + [8]))) = *($15)
	*($23 + [80]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($15) = [0]
	$10 = *($4)
	$14 = ($10 & [1])
	$10 = CALL $214(($23 + [80]), ( *(($4 + [8])) ? $9 : $14 ), ( *(($4 + [4])) ? uint_32($10 >> [1]) : $14 ))
	$14 = ($10 + [8])
	*(($15 = (($23 + [112]) + [8]))) = *($14)
	*($23 + [112]) = *($10)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($14) = [0]
	$10 = *($23 + [100])
	if ( ((uint_32)$10 >= (uint_32)*((($23 + [96]) + [8]))) ){ goto $label$35 }
	*($10) = *($23 + [112])
	*(($10 + [8])) = *($15)
	*($15) = [0]
	*($23 + [112]) = [0]
	*($23 + [116]) = [0]
	*($23 + [100]) = (*($23 + [100]) + [12])
	goto $label$34 
	
.LABEL $label$35
	CALL $68(($23 + [96]), ($23 + [112]))
	if ( ((*($23 + [112]) & [1]) == 0) ){ goto $label$34 }
	CALL $207(*($15))
	
.LABEL $label$34
	if ( ((*($23 + [80]) & [1]) == 0) ){ goto $label$36 }
	CALL $207(*($13))
	
.LABEL $label$36
	if ( ((*($23 + [64]) & [1]) == 0) ){ goto $label$37 }
	CALL $207(*($12))
	
.LABEL $label$37
	if ( ((*($23 + [48]) & [1]) == 0) ){ goto $label$38 }
	CALL $207(*($11))
	
.LABEL $label$38
	if ( ((*($23 + [32]) & [1]) == 0) ){ goto $label$39 }
	CALL $207(*((($23 + [32]) + [8])))
	
.LABEL $label$39
	$21 = ($21 + [8])
	$10 = *($23 + [372])
	$22 = ($22 + [1])
	if ( ($22 <= int_32((*(($10 + [80])) - *($10 + [76])) >> [3])) ){ goto $label$33 }
	
.LABEL $label$32
	$10 = *($23 + [372])
	*($23 + [116]) = $6
	*($23 + [112]) = $5
	*($23 + [120]) = $7
	*($23 + [124]) = $3
	*($23 + [128]) = $4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [976])
	CALL $66(($23 + [376]), $10, (int_64)0, ($23 + [112]))
	*($23 + [16]) = (int_64)0
	*($23 + [24]) = [0]
	$10 = (*($23 + [100]) - *($23 + [96]))
	$4 = ((int_32)$10 / (int_32)[12])
	if ( ($10 == 0) ){ goto $label$41 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$40 }
	$3 = CALL $205($10)
	*(($23 + [24])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($23 + [16]) = $3
	*($23 + [20]) = $3
	$4 = *($23 + [100])
	$10 = *($23 + [96])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$41 }
	
.LOOP $label$42:
	CALL $223($3, $10)
	$3 = (*($23 + [20]) + [12])
	*($23 + [20]) = $3
	$10 = ($10 + [12])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$42 }
	
.LABEL $label$41
	CALL $44($0, $1, ($23 + [16]))
	$4 = *($23 + [16])
	if ( ($4 == 0) ){ goto $label$43 }
	$10 = *($23 + [20])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$45 }
	$3 = ([0] - $4)
	$10 = ($10 + [-12])
	
.LOOP $label$46:
	if ( ((*($10) & [1]) == 0) ){ goto $label$47 }
	CALL $207(*(($10 + [8])))
	
.LABEL $label$47
	$10 = ($10 + [-12])
	if ( ((int_32)($10 + $3) != (int_32)[-12]) ){ goto $label$46 }
	$10 = *($23 + [16])
	goto $label$44 
	
.LABEL $label$45
	$10 = $4
	
.LABEL $label$44
	*($23 + [20]) = $4
	CALL $207($10)
	
.LABEL $label$43
	$4 = *($23 + [96])
	if ( ($4 == 0) ){ goto $label$48 }
	$10 = *($23 + [100])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$50 }
	$3 = ([0] - $4)
	$10 = ($10 + [-12])
	
.LOOP $label$51:
	if ( ((*($10) & [1]) == 0) ){ goto $label$52 }
	CALL $207(*(($10 + [8])))
	
.LABEL $label$52
	$10 = ($10 + [-12])
	if ( ((int_32)($10 + $3) != (int_32)[-12]) ){ goto $label$51 }
	$10 = *($23 + [96])
	goto $label$49 
	
.LABEL $label$50
	$10 = $4
	
.LABEL $label$49
	*($23 + [100]) = $4
	CALL $207($10)
	
.LABEL $label$48
	$4 = *($23 + [400])
	if ( ($4 == 0) ){ goto $label$53 }
	$21 = ($23 + [404])
	$10 = *($21)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$55 }
	
.LOOP $label$56:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$57 }
	CALL $67($3)
	CALL $207($3)
	
.LABEL $label$57
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$56 }
	$10 = *(($23 + [400]))
	goto $label$54 
	
.LABEL $label$55
	$10 = $4
	
.LABEL $label$54
	*($21) = $4
	CALL $207($10)
	
.LABEL $label$53
	*([0] + [4]) = ($23 + [416])
	return (unreachable)
	
.LABEL $label$40
	CALL $222(($23 + [16]))
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($4 = $2) + [92]) = $0
	*($4 + [80]) = *($1)
	*($4 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [40])) = (int_64)0
	*(($4 + [32])) = (int_64)0
	*(($4 + [24])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = [0]
	*(($4 + [52])) = [0]
	*(($4 + [56])) = [0]
	*($4 + [60]) = [0]
	*($4 + [64]) = [0]
	*($4 + [68]) = [0]
	*($4 + [100]) = $1
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + $0)
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = $4
	CALL $94(($4 + [120]), ($4 + [112]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [100]) = ($4 + [80])
	*($4 + [96]) = ($4 + [92])
	CALL $95(($4 + [96]), $4)
	$2 = *($4 + [48])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($4 + [52])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($4 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $207($1)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [128])
	return [1]
}

void .FUNC $264 ()
{
	(unreachable)
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return ($1 & [15])
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [288])
	*([0] + [4]) = $2
	*(($3 = $2) + [284]) = $0
	*($3 + [272]) = *($1)
	*($3 + [276]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $173(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [272])
	*($3 + [8]) = ($3 + [284])
	CALL $174(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [252]) & [1]) == 0) ){ goto $label$6 }
	CALL $207(*(($3 + [260])))
	
.LABEL $label$6
	$1 = *($3 + [240])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($3 + [244])) = $1
	CALL $207($1)
	
.LABEL $label$7
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*(($3 + [216])))
	
.LABEL $label$8
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*(($3 + [160])))
	
.LABEL $label$9
	if ( ((*($3 + [140]) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($3 + [148])))
	
.LABEL $label$10
	$1 = *($3 + [112])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($3 + [116])) = $1
	CALL $207($1)
	
.LABEL $label$11
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($3 + [48])))
	
.LABEL $label$12
	*([0] + [4]) = ($3 + [288])
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17)
{
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_64 $27
	CALL require_auth(*($0 + [8]))
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [2368]
	$24 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$23 > (uint_64)(int_64)8) ){ goto $label$6 }
	$18 = *($21)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$18 = ($18 + [165])
	goto $label$4 
	
.LABEL $label$6
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$2
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$1 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [2384]
	$27 = (int_64)0
	
.LOOP $label$7:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$8 }
	$18 = *($21)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$18 = ($18 + [165])
	goto $label$9 
	
.LABEL $label$10
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$8
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$27 = ((int_64)$22 | (int_64)$27)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$7 }
	$19 = *(($0 + [40]))
	$26 = *(($0 + [44]))
	if ( ((int_32)$26 == (int_32)$19) ){ goto $label$11 }
	$21 = ($26 + [-24])
	$20 = ([0] - $19)
	
.LOOP $label$12:
	if ( ((int_64)*(*($21)) == (int_64)$24) ){ goto $label$11 }
	$26 = $21
	$18 = ($21 + [-24])
	$21 = $18
	if ( ((int_32)($18 + $20) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$21 = ($0 + [16])
	if ( ((int_32)$26 == (int_32)$19) ){ goto $label$15 }
	$18 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [24]) == (int_32)$21), [784])
	if ( $18 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$18 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $24)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$13 }
	$18 = CALL $62($21, $18)
	CALL eosio_assert(((int_32)*($18 + [24]) == (int_32)$21), [784])
	
.LABEL $label$14
	$27 = *($18 + [8])
	
.LABEL $label$13
	CALL require_recipient($27)
	CALL require_recipient($2)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [128])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$7 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [1376])
	*(($10 + [56])) = [0]
	*($10 + [48]) = (int_64)0
	*($10 + [116]) = $6
	*($10 + [112]) = $6
	*($10 + [120]) = ($6 + $3)
	*($10 + [80]) = ($10 + [112])
	*($10 + [96]) = ($10 + [16])
	CALL $179(($10 + [96]), ($10 + [80]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($6)
	
.LABEL $label$9
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [92])) = *(($10 + [44]))
	*(($1 = (($10 + [80]) + [8]))) = *(($10 + [40]))
	*($10 + [84]) = *(($10 + [36]))
	$4 = *($10 + [16])
	*($10 + [80]) = *($10 + [32])
	CALL $223(($10 + [64]), ($10 + [48]))
	*((($10 + [96]) + [8])) = *($1)
	*($10 + [96]) = *($10 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$9 = *((*($1) + $9))
	
.LABEL $label$10
	$5 = *((($10 + [96]) + [8]))
	*((($10 + [112]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [96])
	*($10 + [112]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 ($10 + [64])), (int_32 $9))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL $207(*($10 + [72]))
	
.LABEL $label$11
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($10 + [56])))
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [128])
	return [1]
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [1744])
	$10 = [0]
	$5 = *($3)
	if ( ((int_64)$5 < (int_64)1000) ){ goto $label$1 }
	$10 = (int_64)(((uint_64)$5 % (uint_64)(int_64)1000) == 0)
	
.LABEL $label$1
	CALL eosio_assert($10, [7808])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [2368]
	$13 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$12 > (uint_64)(int_64)8) ){ goto $label$7 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$7
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$3
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$2 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [2384]
	$15 = (int_64)0
	
.LOOP $label$8:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$9
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$8 }
	$7 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$12 }
	$10 = ($9 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$13:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$12 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$10 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$16 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$10), [784])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $62($10, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$10), [784])
	
.LABEL $label$15
	$15 = *($6 + [8])
	
.LABEL $label$14
	*(($16 + [72])) = [0]
	*($16 + [48]) = $15
	*($16 + [40]) = $15
	*($16 + [56]) = (int_64)-1
	$12 = (int_64)0
	*($16 + [64]) = (int_64)0
	CALL $180(($16 + [32]), ($16 + [40]), $1, [864])
	CALL eosio_assert(((uint_64)((int_64)$5 / (int_64)1000) <= (uint_64)*(*($16 + [36]) + [32])), [7824])
	$11 = (int_64)59
	$10 = [7856]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$12 > (uint_64)(int_64)8) ){ goto $label$22 }
	$6 = *($10)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	$12 = *(($3 + [8]))
	*((($16 + [16]) + [8])) = $12
	$14 = *($3)
	*(($16 + [8])) = $12
	*($16 + [16]) = $14
	*($16 + [4]) = *($16 + [20])
	*($16) = *($16 + [16])
	CALL $181($0, $1, $13, $16, $4)
	$9 = *($16 + [64])
	if ( ($9 == 0) ){ goto $label$23 }
	$8 = ($16 + [68])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$6 = *($10)
	*($10) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL $207($6)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($16 + [64]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $9
	
.LABEL $label$24
	*($8) = $9
	CALL $207($10)
	
.LABEL $label$23
	*([0] + [4]) = ($16 + [80])
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	*($16 + [152]) = $1
	*($16 + [144]) = $2
	*($16 + [140]) = $5
	*($16 + [136]) = $6
	*($16 + [132]) = $7
	$15 = [1]
	$7 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$12 = (int_64)0
	$14 = (int_64)59
	$7 = [752]
	$13 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$7 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$2 }
	$12 = (int_64)0
	$11 = (int_64)59
	$7 = [768]
	$10 = (int_64)0
	
.LOOP $label$8:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$14 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$8 }
	$8 = *(($0 + [40]))
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$12 }
	$7 = ($5 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$13:
	if ( ((int_64)*(*($7)) == (int_64)$13) ){ goto $label$12 }
	$5 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $9) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = ($0 + [16])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$7), [784])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $62($7, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$7), [784])
	
.LABEL $label$15
	$10 = *($6 + [8])
	
.LABEL $label$14
	$7 = CALL has_auth($10)
	
.LABEL $label$1
	CALL eosio_assert($7, [848])
	$7 = [0]
	*(($16 + [120])) = [0]
	*($16 + [104]) = (int_64)-1
	*($16 + [112]) = (int_64)0
	$12 = *(($0 + [8]))
	*($16 + [88]) = $12
	*($16 + [96]) = $1
	$6 = CALL db_find_i64($12, $1, (int_64)-7850577621849997312, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(CALL $86(($16 + [88]), $6) + [156]) == (int_32)($16 + [88])), [784])
	$15 = [0]
	
.LABEL $label$17
	CALL eosio_assert($15, [1936])
	*($16 + [80]) = (int_64)1397703940
	*($16 + [72]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$12 = (uint_64)*($16 + [80]) >> (uint_64)(int_64)8)
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [1376])
	*($16 + [64]) = [0]
	*($16 + [56]) = (int_64)0
	CALL $97(($16 + [56]), ($16 + [72]))
	$7 = *($16 + [60])
	if ( ((uint_32)$7 >= (uint_32)*($16 + [64])) ){ goto $label$24 }
	*($7) = *($16 + [72])
	*(($7 + [8])) = *((($16 + [72]) + [8]))
	*($16 + [60]) = ($7 + [16])
	goto $label$23 
	
.LABEL $label$24
	CALL $97(($16 + [56]), ($16 + [72]))
	
.LABEL $label$23
	$12 = *(($0 + [8]))
	*($16 + [32]) = $3
	*($16 + [36]) = $4
	*($16 + [28]) = ($16 + [152])
	*($16 + [24]) = ($16 + [144])
	*($16 + [40]) = ($16 + [140])
	*($16 + [44]) = ($16 + [136])
	*($16 + [48]) = ($16 + [132])
	*($16 + [52]) = ($16 + [56])
	CALL $98(($16 + [8]), ($16 + [88]), $12, ($16 + [24]))
	*($16) = *($16 + [152])
	CALL $64(($16 + [8]), $16)
	$7 = CALL $215(($16 + [8]), [1952])
	$12 = *($7)
	*($7) = (int_64)0
	$7 = ($7 + [8])
	$15 = *($7)
	*((($16 + [24]) + [8])) = $15
	*($7) = [0]
	*($16 + [24]) = $12
	$3 = (*($16 + [24]) & [1])
	$7 = ( $15 ? (($16 + [24]) | [1]) : $3 )
	$6 = [-1]
	
.LOOP $label$25:
	$5 = ($7 + $6)
	$9 = ($6 + [1])
	$6 = $9
	if ( *(($5 + [1])) ){ goto $label$25 }
	$10 = (CASTING uint_64)(uint_32 $9)
	$12 = (int_64)0
	$11 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$26:
	$14 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$10) ){ goto $label$27 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$31 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$30
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$26 }
	CALL $99($0, $13, *($16 + [144]))
	if ( ($3 == 0) ){ goto $label$32 }
	CALL $207($15)
	
.LABEL $label$32
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL $207(*($16 + [16]))
	
.LABEL $label$33
	$7 = CALL db_lowerbound_i64(*($16 + [88]), *(($16 + [96])), (int_64)-7850577621849997312, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$34 }
	$7 = CALL $86(($16 + [88]), $7)
	
.LOOP $label$35:
	if ( ((uint_64)*($7) >= (uint_64)((int_64)*($16 + [144]) + (int_64)-50)) ){ goto $label$34 }
	$6 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [1968])
	CALL eosio_assert($5, [2016])
	$5 = CALL db_next_i64(*($7 + [160]), ($16 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$36 }
	$6 = CALL $86(($16 + [88]), $5)
	
.LABEL $label$36
	CALL $100(($16 + [88]), $7)
	$7 = $6
	if ( $6 ){ goto $label$35 }
	
.LABEL $label$34
	$7 = *($16 + [56])
	if ( ($7 == 0) ){ goto $label$37 }
	*($16 + [60]) = $7
	CALL $207($7)
	
.LABEL $label$37
	$5 = *($16 + [112])
	if ( ($5 == 0) ){ goto $label$38 }
	$9 = ($16 + [116])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$40 }
	
.LOOP $label$41:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	CALL $67($6)
	CALL $207($6)
	
.LABEL $label$42
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$41 }
	$7 = *(($16 + [112]))
	goto $label$39 
	
.LABEL $label$40
	$7 = $5
	
.LABEL $label$39
	*($9) = $5
	CALL $207($7)
	
.LABEL $label$38
	*([0] + [4]) = ($16 + [160])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [96])
	*([0] + [4]) = $18
	$17 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$4 = (int_64)0
	$12 = (int_64)59
	$17 = [752]
	$11 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$4 > (uint_64)(int_64)9) ){ goto $label$7 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$3
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$2 }
	$4 = (int_64)0
	$10 = (int_64)59
	$17 = [768]
	$9 = (int_64)0
	
.LOOP $label$8:
	$12 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$9 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$9
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$8 }
	$13 = *(($0 + [40]))
	$14 = *(($0 + [44]))
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$12 }
	$17 = ($14 + [-24])
	$5 = ([0] - $13)
	
.LOOP $label$13:
	if ( ((int_64)*(*($17)) == (int_64)$11) ){ goto $label$12 }
	$14 = $17
	$6 = ($17 + [-24])
	$17 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$17 = ($0 + [16])
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$16 }
	$6 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$17), [784])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $62($17, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$17), [784])
	
.LABEL $label$15
	$9 = *($6 + [8])
	
.LABEL $label$14
	$17 = CALL has_auth($9)
	
.LABEL $label$1
	CALL eosio_assert($17, [848])
	*($18 + [8]) = $1
	CALL $64(($18 + [80]), ($18 + [8]))
	$17 = CALL $215(($18 + [80]), [2288])
	$4 = *($17)
	*($17) = (int_64)0
	$17 = ($17 + [8])
	$8 = *($17)
	*((($18 + [40]) + [8])) = $8
	*($17) = [0]
	*($18 + [40]) = $4
	$7 = (*($18 + [40]) & [1])
	$17 = ( $8 ? (($18 + [40]) | [1]) : $7 )
	$6 = [-1]
	
.LOOP $label$17:
	$14 = ($17 + $6)
	$5 = ($6 + [1])
	$6 = $5
	if ( *(($14 + [1])) ){ goto $label$17 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$4 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$18:
	$12 = (int_64)0
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$19 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$23 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$22 
	
.LABEL $label$23
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$22
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$18 }
	$3 = *(($0 + [40]))
	$14 = *(($0 + [44]))
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$24 }
	$17 = ($14 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$25:
	if ( ((int_64)*(*($17)) == (int_64)$11) ){ goto $label$24 }
	$14 = $17
	$6 = ($17 + [-24])
	$17 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	$13 = ($0 + [16])
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$30 }
	$17 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$13), [784])
	if ( $17 ){ goto $label$29 }
	$16 = (int_64)0
	if ( $7 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$30
	$17 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$28 }
	$17 = CALL $62($13, $17)
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$13), [784])
	
.LABEL $label$29
	$16 = *($17 + [8])
	if ( ($7 == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	$16 = (int_64)0
	if ( ($7 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL $207($8)
	
.LABEL $label$26
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$31 }
	CALL $207(*($18 + [88]))
	
.LABEL $label$31
	*($18 + [8]) = $1
	CALL $64(($18 + [80]), ($18 + [8]))
	$17 = CALL $215(($18 + [80]), [2304])
	$4 = *($17)
	*($17) = (int_64)0
	$17 = ($17 + [8])
	$8 = *($17)
	*((($18 + [40]) + [8])) = $8
	*($17) = [0]
	*($18 + [40]) = $4
	$7 = (*($18 + [40]) & [1])
	$17 = ( $8 ? (($18 + [40]) | [1]) : $7 )
	$6 = [-1]
	
.LOOP $label$32:
	$14 = ($17 + $6)
	$5 = ($6 + [1])
	$6 = $5
	if ( *(($14 + [1])) ){ goto $label$32 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$4 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$33:
	$12 = (int_64)0
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$34 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$6 = ($6 + [165])
	goto $label$35 
	
.LABEL $label$36
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$38 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$37 
	
.LABEL $label$38
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$37
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$33 }
	$3 = *(($0 + [40]))
	$14 = *(($0 + [44]))
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$39 }
	$17 = ($14 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$40:
	if ( ((int_64)*(*($17)) == (int_64)$11) ){ goto $label$39 }
	$14 = $17
	$6 = ($17 + [-24])
	$17 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$40 }
	
.LABEL $label$39
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$45 }
	$17 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$13), [784])
	if ( $17 ){ goto $label$44 }
	$15 = (int_64)0
	if ( $7 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$45
	$17 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$43 }
	$17 = CALL $62($13, $17)
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$13), [784])
	
.LABEL $label$44
	$15 = *($17 + [8])
	if ( ($7 == 0) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	$15 = (int_64)0
	if ( ($7 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	CALL $207($8)
	
.LABEL $label$41
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$46 }
	CALL $207(*($18 + [88]))
	
.LABEL $label$46
	*(($18 + [72])) = [0]
	*($18 + [48]) = $1
	*($18 + [56]) = (int_64)-1
	*($18 + [64]) = (int_64)0
	$7 = ($0 + [8])
	*($18 + [40]) = *($7)
	$3 = *($2 + [4])
	$13 = *($2)
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$47 }
	$8 = ($18 + [68])
	
.LOOP $label$48:
	CALL $106(($18 + [80]), $13, [45])
	CALL eosio_assert(((int_32)(*($18 + [84]) - *($18 + [80])) == (int_32)[24]), [2320])
	$17 = *($18 + [80])
	if ( (*($17) & [1]) ){ goto $label$50 }
	$17 = ($17 + [1])
	goto $label$49 
	
.LABEL $label$50
	$17 = *($17 + [8])
	
.LABEL $label$49
	$4 = CALL atoll($17)
	*($18 + [8]) = $4
	if ( (int_64)($4 == 0) ){ goto $label$53 }
	$2 = *((($18 + [40]) + [24]))
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$2) ){ goto $label$54 }
	$17 = ($14 + [-24])
	$5 = ([0] - $2)
	
.LOOP $label$55:
	if ( ((int_64)*(*($17)) == (int_64)$4) ){ goto $label$54 }
	$14 = $17
	$6 = ($17 + [-24])
	$17 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$55 }
	
.LABEL $label$54
	if ( ((int_32)$14 == (int_32)$2) ){ goto $label$57 }
	$17 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [48]) == (int_32)($18 + [40])), [784])
	if ( $17 ){ goto $label$53 }
	goto $label$56 
	
.LABEL $label$57
	$17 = CALL db_find_i64(*($18 + [40]), *((($18 + [40]) + [8])), (int_64)-4111921522686296064, $4)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$56 }
	CALL eosio_assert(((int_32)*(CALL $107(($18 + [40]), $17) + [48]) == (int_32)($18 + [40])), [784])
	$14 = *($18 + [80])
	if ( $14 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$56
	$4 = *($7)
	*($18 + [36]) = ($18 + [80])
	*($18 + [32]) = ($18 + [8])
	CALL $108(($18 + [24]), ($18 + [40]), $4, ($18 + [32]))
	$4 = *($18 + [8])
	$16 = ( $4 ? $16 : (uint_64)($16 <= $4) )
	$15 = ((int_64)$15 + (int_64)1)
	
.LABEL $label$53
	$14 = *($18 + [80])
	if ( ($14 == 0) ){ goto $label$51 }
	
.LABEL $label$52
	$17 = *($18 + [84])
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$59 }
	$6 = ([0] - $14)
	$17 = ($17 + [-12])
	
.LOOP $label$60:
	if ( ((*($17) & [1]) == 0) ){ goto $label$61 }
	CALL $207(*(($17 + [8])))
	
.LABEL $label$61
	$17 = ($17 + [-12])
	if ( ((int_32)($17 + $6) != (int_32)[-12]) ){ goto $label$60 }
	$17 = *($18 + [80])
	goto $label$58 
	
.LABEL $label$59
	$17 = $14
	
.LABEL $label$58
	*($18 + [84]) = $14
	CALL $207($17)
	
.LABEL $label$51
	$13 = ($13 + [12])
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$48 }
	
.LABEL $label$47
	*($18 + [32]) = $1
	CALL $64(($18 + [8]), ($18 + [32]))
	$17 = CALL $215(($18 + [8]), [2288])
	$4 = *($17)
	*($17) = (int_64)0
	$17 = ($17 + [8])
	$13 = *($17)
	*((($18 + [80]) + [8])) = $13
	*($17) = [0]
	*($18 + [80]) = $4
	$2 = (*($18 + [80]) & [1])
	$17 = ( $13 ? (($18 + [80]) | [1]) : $2 )
	$6 = [-1]
	
.LOOP $label$62:
	$14 = ($17 + $6)
	$5 = ($6 + [1])
	$6 = $5
	if ( *(($14 + [1])) ){ goto $label$62 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$4 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$63:
	$12 = (int_64)0
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$64 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$6 = ($6 + [165])
	goto $label$65 
	
.LABEL $label$66
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$68 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$67 
	
.LABEL $label$68
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$67
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$63 }
	CALL $99($0, $11, $16)
	if ( ($2 == 0) ){ goto $label$69 }
	CALL $207($13)
	
.LABEL $label$69
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$70 }
	CALL $207(*($18 + [16]))
	
.LABEL $label$70
	*($18 + [32]) = $1
	CALL $64(($18 + [8]), ($18 + [32]))
	$17 = CALL $215(($18 + [8]), [2304])
	$4 = *($17)
	*($17) = (int_64)0
	$17 = ($17 + [8])
	$13 = *($17)
	*((($18 + [80]) + [8])) = $13
	*($17) = [0]
	*($18 + [80]) = $4
	$2 = (*($18 + [80]) & [1])
	$17 = ( $13 ? (($18 + [80]) | [1]) : $2 )
	$6 = [-1]
	
.LOOP $label$71:
	$14 = ($17 + $6)
	$5 = ($6 + [1])
	$6 = $5
	if ( *(($14 + [1])) ){ goto $label$71 }
	$9 = (CASTING uint_64)(uint_32 $5)
	$4 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$72:
	$12 = (int_64)0
	if ( ((uint_64)$4 >= (uint_64)$9) ){ goto $label$73 }
	$6 = *($17)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$6 = ($6 + [165])
	goto $label$74 
	
.LABEL $label$75
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$77 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$76 
	
.LABEL $label$77
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$76
	$17 = ($17 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$72 }
	CALL $99($0, $11, $15)
	if ( ($2 == 0) ){ goto $label$78 }
	CALL $207($13)
	
.LABEL $label$78
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$79 }
	CALL $207(*($18 + [16]))
	
.LABEL $label$79
	$14 = *($18 + [64])
	if ( ($14 == 0) ){ goto $label$80 }
	$5 = ($18 + [68])
	$17 = *($5)
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$82 }
	
.LOOP $label$83:
	$17 = ($17 + [-24])
	$6 = *($17)
	*($17) = [0]
	if ( ($6 == 0) ){ goto $label$84 }
	CALL $207($6)
	
.LABEL $label$84
	if ( ((int_32)$14 != (int_32)$17) ){ goto $label$83 }
	$17 = *(($18 + [64]))
	goto $label$81 
	
.LABEL $label$82
	$17 = $14
	
.LABEL $label$81
	*($5) = $14
	CALL $207($17)
	
.LABEL $label$80
	*([0] + [4]) = ($18 + [96])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	*(($4 = $2) + [44]) = $0
	*($4 + [32]) = *($1)
	*($4 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [24])) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [56]) = ($1 + $0)
	*($4 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [720])
	CALL memcpy(($4 + [8]), $1, [8])
	*($4 + [52]) = ($1 + [8])
	CALL $57(($4 + [48]), (($4 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [52]) = ($4 + [32])
	*($4 + [48]) = ($4 + [44])
	CALL $113(($4 + [48]), ($4 + [8]))
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($4 + [20])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $207($1)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [64])
	return [1]
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_64 $50
	int_32 $51
	int_64 $52
	int_32 $53
	int_64 $54
	int_64 $55
	int_64 $56
	int_32 $57
	int_32 $58
	$58 = (*([0] + [4]) - [768])
	*([0] + [4]) = $58
	*($58 + [728]) = $1
	$53 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [752]
	$55 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$7 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$57 = ($57 + [165])
	goto $label$5 
	
.LABEL $label$7
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$3
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$2 }
	$1 = (int_64)0
	$56 = (int_64)59
	$53 = [768]
	$27 = (int_64)0
	
.LOOP $label$8:
	$54 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$9 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$57 = ($57 + [165])
	goto $label$10 
	
.LABEL $label$11
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$54 = ((int_64)(CASTING uint_64)(uint_32 ($57 & [31])) << (int_64)((int_64)$56 & (int_64)4294967295))
	
.LABEL $label$9
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$27 = ((int_64)$54 | (int_64)$27)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$8 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$12 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$13:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$12 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$57 = ($0 + [16])
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$16 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$57), [784])
	if ( $53 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$14 }
	$53 = CALL $62($57, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$57), [784])
	
.LABEL $label$15
	$27 = *($53 + [8])
	
.LABEL $label$14
	$53 = CALL has_auth($27)
	
.LABEL $label$1
	$3 = ($0 + [8])
	CALL eosio_assert($53, [848])
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2336]
	$55 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$22 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$57 = ($57 + [165])
	goto $label$20 
	
.LABEL $label$22
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$18
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$55 = ((int_64)$56 | (int_64)$55)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$17 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$23 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$24:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$23 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$4 = ($0 + [16])
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$28 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$27 }
	$27 = (int_64)0
	goto $label$25 
	
.LABEL $label$28
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$26 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$27
	$27 = *($53 + [8])
	goto $label$25 
	
.LABEL $label$26
	$27 = (int_64)0
	
.LABEL $label$25
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2352]
	$55 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$34 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$57 = ($57 + [165])
	goto $label$32 
	
.LABEL $label$34
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$30
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$55 = ((int_64)$56 | (int_64)$55)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$29 }
	CALL $131(($58 + [712]), $55, *($3), (int_64)5459781)
	if ( (int_64)($27 == 0) ){ goto $label$35 }
	if ( (uint_64)(*($58 + [712]) <= $27) ){ goto $label$35 }
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2352]
	$50 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$41 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$57 = ($57 + [165])
	goto $label$39 
	
.LABEL $label$41
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$37
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$50 = ((int_64)$56 | (int_64)$50)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$36 }
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2368]
	$55 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$47 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$57 = ($57 + [165])
	goto $label$45 
	
.LABEL $label$47
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$43
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$42 }
	$1 = (int_64)0
	$56 = (int_64)59
	$53 = [2384]
	$27 = (int_64)0
	
.LOOP $label$48:
	$54 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$49 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$57 = ($57 + [165])
	goto $label$50 
	
.LABEL $label$51
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$54 = ((int_64)(CASTING uint_64)(uint_32 ($57 & [31])) << (int_64)((int_64)$56 & (int_64)4294967295))
	
.LABEL $label$49
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$27 = ((int_64)$54 | (int_64)$27)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$48 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$52 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$53:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$52 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$53 }
	
.LABEL $label$52
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$56 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$54 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$55
	$27 = *($53 + [8])
	
.LABEL $label$54
	*(($57 = (($58 + [696]) + [8]))) = *((($58 + [712]) + [8]))
	*($58 + [696]) = *($58 + [712])
	*($58 + [320]) = *($58 + [728])
	CALL $64(($58 + [32]), ($58 + [320]))
	$53 = CALL $215(($58 + [32]), [1024])
	$48 = ($53 + [8])
	*((($58 + [680]) + [8])) = *($48)
	*($58 + [680]) = *($53)
	*($53) = [0]
	*(($53 + [4])) = [0]
	*($48) = [0]
	*((($58 + [16]) + [8])) = *($57)
	*($58 + [16]) = *($58 + [696])
	CALL $115($0, $50, $27, ($58 + [16]), ($58 + [680]))
	if ( ((*($58 + [680]) & [1]) == 0) ){ goto $label$57 }
	CALL $207(*($58 + [688]))
	
.LABEL $label$57
	if ( ((*($58 + [32]) & [1]) == 0) ){ goto $label$35 }
	CALL $207(*($58 + [40]))
	
.LABEL $label$35
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2400]
	$55 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$63 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$57 = ($57 + [165])
	goto $label$61 
	
.LABEL $label$63
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$59
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$55 = ((int_64)$56 | (int_64)$55)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$58 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$64 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$65:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$64 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$65 }
	
.LABEL $label$64
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$69 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$68 }
	$50 = (int_64)0
	goto $label$66 
	
.LABEL $label$69
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$67 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$68
	$50 = *($53 + [8])
	goto $label$66 
	
.LABEL $label$67
	$50 = (int_64)0
	
.LABEL $label$66
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2416]
	$55 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$75 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$57 = ($57 + [165])
	goto $label$73 
	
.LABEL $label$75
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$71
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$70 }
	$1 = (int_64)0
	$56 = (int_64)59
	$53 = [2432]
	$27 = (int_64)0
	
.LOOP $label$76:
	$54 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$77 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$57 = ($57 + [165])
	goto $label$78 
	
.LABEL $label$79
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$54 = ((int_64)(CASTING uint_64)(uint_32 ($57 & [31])) << (int_64)((int_64)$56 & (int_64)4294967295))
	
.LABEL $label$77
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$27 = ((int_64)$54 | (int_64)$27)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$76 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$80 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$81:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$80 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$81 }
	
.LABEL $label$80
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$84 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$82 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$83
	$27 = *($53 + [8])
	
.LABEL $label$82
	CALL $131(($58 + [664]), $27, *($3), (int_64)4409172)
	if ( (int_64)($50 == 0) ){ goto $label$85 }
	if ( (uint_64)(*($58 + [664]) <= $50) ){ goto $label$85 }
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2416]
	$55 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$91 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$57 = ($57 + [165])
	goto $label$89 
	
.LABEL $label$91
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$87
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$86 }
	$1 = (int_64)0
	$56 = (int_64)59
	$53 = [2432]
	$27 = (int_64)0
	
.LOOP $label$92:
	$54 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$93 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$57 = ($57 + [165])
	goto $label$94 
	
.LABEL $label$95
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$54 = ((int_64)(CASTING uint_64)(uint_32 ($57 & [31])) << (int_64)((int_64)$56 & (int_64)4294967295))
	
.LABEL $label$93
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$27 = ((int_64)$54 | (int_64)$27)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$92 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$96 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$97:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$96 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$97 }
	
.LABEL $label$96
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$100 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$98 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$99
	$27 = *($53 + [8])
	
.LABEL $label$98
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2368]
	$55 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$106 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$57 = ($57 + [165])
	goto $label$104 
	
.LABEL $label$106
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$102
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$101 }
	$1 = (int_64)0
	$56 = (int_64)59
	$53 = [2384]
	$50 = (int_64)0
	
.LOOP $label$107:
	$54 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$108 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$110 }
	$57 = ($57 + [165])
	goto $label$109 
	
.LABEL $label$110
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$109
	$54 = ((int_64)(CASTING uint_64)(uint_32 ($57 & [31])) << (int_64)((int_64)$56 & (int_64)4294967295))
	
.LABEL $label$108
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$50 = ((int_64)$54 | (int_64)$50)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$107 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$111 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$112:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$111 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$112 }
	
.LABEL $label$111
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$115 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$113 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$114
	$50 = *($53 + [8])
	
.LABEL $label$113
	*(($57 = (($58 + [648]) + [8]))) = *((($58 + [664]) + [8]))
	*($58 + [648]) = *($58 + [664])
	*($58 + [320]) = *($58 + [728])
	CALL $64(($58 + [32]), ($58 + [320]))
	$53 = CALL $215(($58 + [32]), [1024])
	$48 = ($53 + [8])
	*((($58 + [632]) + [8])) = *($48)
	*($58 + [632]) = *($53)
	*($53) = [0]
	*(($53 + [4])) = [0]
	*($48) = [0]
	*(($58 + [8])) = *($57)
	*($58) = *($58 + [648])
	CALL $115($0, $27, $50, $58, ($58 + [632]))
	if ( ((*($58 + [632]) & [1]) == 0) ){ goto $label$116 }
	CALL $207(*($58 + [640]))
	
.LABEL $label$116
	if ( ((*($58 + [32]) & [1]) == 0) ){ goto $label$85 }
	CALL $207(*($58 + [40]))
	
.LABEL $label$85
	*($58 + [624]) = [2456]
	*($58 + [628]) = $0
	*($58 + [616]) = [2476]
	*($58 + [620]) = $0
	*($58 + [608]) = [2496]
	*($58 + [612]) = $0
	*($58 + [600]) = [952]
	*($58 + [604]) = $0
	$52 = *($58 + [728])
	if ( ((int_64)$52 > (int_64)-3776079721305997313) ){ goto $label$121 }
	if ( ((int_64)$52 == (int_64)-7143377512079294464) ){ goto $label$120 }
	if ( ((int_64)$52 != (int_64)-4293742440046657536) ){ goto $label$118 }
	$51 = ($58 + [624])
	$52 = (int_64)-4293742440046657536
	goto $label$117 
	
.LABEL $label$121
	if ( ((int_64)$52 == (int_64)-3776079721305997312) ){ goto $label$119 }
	if ( ((int_64)$52 != (int_64)-3776079686946258944) ){ goto $label$118 }
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2512]
	$52 = (int_64)0
	
.LOOP $label$122:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$127 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$57 = ($57 + [165])
	goto $label$125 
	
.LABEL $label$127
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$126
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$125
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$124
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$123
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$52 = ((int_64)$56 | (int_64)$52)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$122 }
	$51 = ($58 + [608])
	goto $label$117 
	
.LABEL $label$120
	$51 = ($58 + [600])
	$52 = (int_64)-7143377512079294464
	goto $label$117 
	
.LABEL $label$119
	$51 = ($58 + [616])
	$52 = (int_64)-3776079721305997312
	goto $label$117 
	
.LABEL $label$118
	$51 = [0]
	CALL eosio_assert([0], [2528])
	
.LABEL $label$117
	$1 = CALL current_time()
	*(($58 + [564])) = [0]
	*(($58 + [568])) = [0]
	*($58 + [548]) = [0]
	*($58 + [552]) = [0]
	*($58 + [556]) = [0]
	*($58 + [560]) = [0]
	*($58 + [536]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($58 + [572]) = [0]
	*(($58 + [576])) = [0]
	*(($58 + [580])) = [0]
	*($58 + [584]) = [0]
	*(($58 + [588])) = [0]
	*(($58 + [592])) = [0]
	*($58 + [496]) = $52
	CALL $64(($58 + [320]), ($58 + [496]))
	$53 = CALL $215(($58 + [320]), [2560])
	$1 = *($53)
	*($53) = (int_64)0
	$53 = ($53 + [8])
	$13 = *($53)
	*((($58 + [32]) + [8])) = $13
	*($53) = [0]
	*($58 + [32]) = $1
	$18 = (*($58 + [32]) & [1])
	$53 = ( $13 ? (($58 + [32]) | [1]) : $18 )
	$57 = [-1]
	
.LOOP $label$128:
	$48 = ($53 + $57)
	$26 = ($57 + [1])
	$57 = $26
	if ( *(($48 + [1])) ){ goto $label$128 }
	$27 = (CASTING uint_64)(uint_32 $26)
	$1 = (int_64)0
	$56 = (int_64)59
	$55 = (int_64)0
	
.LOOP $label$129:
	$54 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$27) ){ goto $label$130 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$132 }
	$57 = ($57 + [165])
	goto $label$131 
	
.LABEL $label$132
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$131
	$54 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$130
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$134 }
	$54 = ((int_64)((int_64)$54 & (int_64)31) << (int_64)((int_64)$56 & (int_64)4294967295))
	goto $label$133 
	
.LABEL $label$134
	$54 = ((int_64)$54 & (int_64)15)
	
.LABEL $label$133
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$54 | (int_64)$55)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$129 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$135 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$136:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$135 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$136 }
	
.LABEL $label$135
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$141 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$140 }
	$5 = (int_64)0
	if ( $18 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$141
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$139 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$140
	$5 = *($53 + [8])
	if ( ($18 == 0) ){ goto $label$137 }
	goto $label$138 
	
.LABEL $label$139
	$5 = (int_64)0
	if ( ($18 == 0) ){ goto $label$137 }
	
.LABEL $label$138
	CALL $207($13)
	
.LABEL $label$137
	if ( ((*($58 + [320]) & [1]) == 0) ){ goto $label$142 }
	CALL $207(*($58 + [328]))
	
.LABEL $label$142
	*(($58 + [528])) = [0]
	*($58 + [504]) = $52
	*($58 + [512]) = (int_64)-1
	*($58 + [520]) = (int_64)0
	*($58 + [496]) = *($3)
	*($58 + [456]) = *($58 + [728])
	CALL $64(($58 + [320]), ($58 + [456]))
	$53 = CALL $215(($58 + [320]), [2576])
	$1 = *($53)
	*($53) = (int_64)0
	$53 = ($53 + [8])
	$13 = *($53)
	*((($58 + [32]) + [8])) = $13
	*($53) = [0]
	*($58 + [32]) = $1
	$18 = (*($58 + [32]) & [1])
	$53 = ( $13 ? (($58 + [32]) | [1]) : $18 )
	$57 = [-1]
	
.LOOP $label$143:
	$48 = ($53 + $57)
	$26 = ($57 + [1])
	$57 = $26
	if ( *(($48 + [1])) ){ goto $label$143 }
	$27 = (CASTING uint_64)(uint_32 $26)
	$1 = (int_64)0
	$56 = (int_64)59
	$55 = (int_64)0
	
.LOOP $label$144:
	$54 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$27) ){ goto $label$145 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$147 }
	$57 = ($57 + [165])
	goto $label$146 
	
.LABEL $label$147
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$146
	$54 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$145
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$149 }
	$54 = ((int_64)((int_64)$54 & (int_64)31) << (int_64)((int_64)$56 & (int_64)4294967295))
	goto $label$148 
	
.LABEL $label$149
	$54 = ((int_64)$54 & (int_64)15)
	
.LABEL $label$148
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$54 | (int_64)$55)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$144 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$150 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$151:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$150 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$151 }
	
.LABEL $label$150
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$156 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$155 }
	$6 = (int_64)0
	if ( $18 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$156
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$154 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$155
	$6 = *($53 + [8])
	if ( ($18 == 0) ){ goto $label$152 }
	goto $label$153 
	
.LABEL $label$154
	$6 = (int_64)0
	if ( ($18 == 0) ){ goto $label$152 }
	
.LABEL $label$153
	CALL $207($13)
	
.LABEL $label$152
	if ( ((*($58 + [320]) & [1]) == 0) ){ goto $label$157 }
	CALL $207(*($58 + [328]))
	
.LABEL $label$157
	*($58 + [472]) = (int_64)-1
	*($58 + [480]) = [0]
	$1 = *($58 + [728])
	*($58 + [456]) = *($3)
	*($58 + [464]) = $1
	*(($28 = (($58 + [456]) + [28]))) = [0]
	*((($58 + [456]) + [32])) = [0]
	*($58 + [492]) = [0]
	$7 = *($2 + [4])
	$24 = *($2)
	if ( ((int_32)$24 == (int_32)$7) ){ goto $label$158 }
	$23 = (($58 + [32]) | [1])
	$22 = ($58 + [268])
	$21 = ($58 + [256])
	$20 = (($58 + [32]) + [208])
	$19 = ($58 + [224])
	$18 = ($58 + [192])
	$17 = ($58 + [168])
	$16 = ($58 + [156])
	$15 = (($58 + [32]) + [96])
	$14 = (($58 + [32]) + [80])
	$13 = (($58 + [32]) + [48])
	$12 = (($58 + [32]) + [24])
	$11 = (($58 + [320]) + [72])
	$10 = (($58 + [320]) + [32])
	$9 = ($58 + [380])
	$8 = (($58 + [536]) + [36])
	$29 = (($58 + [456]) + [8])
	$30 = (($58 + [320]) + [40])
	$31 = (($58 + [320]) + [56])
	$32 = (($58 + [320]) + [64])
	$36 = ($58 + [136])
	$38 = ($58 + [264])
	$39 = ($58 + [372])
	$40 = (($58 + [536]) + [44])
	$49 = ($58 + [388])
	$46 = ($58 + [164])
	$45 = ($58 + [176])
	$44 = ($58 + [232])
	$43 = ($58 + [260])
	$42 = ($58 + [276])
	$50 = (int_64)0
	
.LOOP $label$162:
	CALL $106(($58 + [440]), $24, [45])
	CALL eosio_assert(((int_32)(*($58 + [444]) - *($58 + [440])) == (int_32)[36]), [2592])
	$53 = *($58 + [440])
	if ( (*($53) & [1]) ){ goto $label$164 }
	$53 = ($53 + [1])
	goto $label$163 
	
.LABEL $label$164
	$53 = *($53 + [8])
	
.LABEL $label$163
	$1 = CALL atoll($53)
	*($58 + [432]) = $1
	$2 = *((($58 + [456]) + [24]))
	$48 = *($28)
	if ( ((int_32)$48 == (int_32)$2) ){ goto $label$165 }
	$53 = ($48 + [-24])
	$26 = ([0] - $2)
	
.LOOP $label$166:
	if ( ((int_64)*(*($53)) == (int_64)$1) ){ goto $label$165 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$166 }
	
.LABEL $label$165
	if ( ((int_32)$48 == (int_32)$2) ){ goto $label$175 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [124]) == (int_32)($58 + [456])), [784])
	*($58 + [428]) = $53
	*($58 + [424]) = ($58 + [456])
	if ( $53 ){ goto $label$174 }
	goto $label$169 
	
.LABEL $label$175
	$53 = CALL db_find_i64(*($58 + [456]), *($29), (int_64)4229865212519383040, $1)
	if ( ((int_32)$53 <= (int_32)[-1]) ){ goto $label$173 }
	$53 = CALL $116(($58 + [456]), $53)
	CALL eosio_assert(((int_32)*($53 + [124]) == (int_32)($58 + [456])), [784])
	*($58 + [428]) = $53
	*($58 + [424]) = ($58 + [456])
	
.LABEL $label$174
	*($30) = (int_64)1398362884
	*($10) = (int_64)0
	CALL eosio_assert([1], [1568])
	$1 = (uint_64)*($30) >> (uint_64)(int_64)8)
	$53 = [0]
	
.LOOP $label$178:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$177 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$179 }
	
.LOOP $label$180:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$177 }
	$53 = ($53 + [1])
	if ( ((int_32)$53 < (int_32)[7]) ){ goto $label$180 }
	
.LABEL $label$179
	$57 = [1]
	$53 = ($53 + [1])
	if ( ((int_32)$53 < (int_32)[7]) ){ goto $label$178 }
	goto $label$176 
	
.LABEL $label$177
	$57 = [0]
	
.LABEL $label$176
	CALL eosio_assert($57, [1376])
	$1 = (int_64)0
	*(($2 = (($58 + [320]) + [48]))) = (int_64)0
	*($31) = (int_64)0
	*($32) = (int_64)0
	*($11) = (int_64)0
	*(($33 = (($58 + [320]) + [80]))) = [0]
	$53 = *($58 + [440])
	CALL $117($51, *($58 + [428]), ($53 + [12]), ($53 + [24]), ($58 + [320]))
	$27 = *($3)
	$54 = (int_64)59
	$53 = [2624]
	$55 = (int_64)0
	
.LOOP $label$181:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$186 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$185 }
	$57 = ($57 + [165])
	goto $label$184 
	
.LABEL $label$186
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$185
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$184
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$183
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$182
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$181 }
	*(($34 = (($58 + [304]) + [8]))) = $55
	*($58 + [304]) = $27
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [624]
	$55 = (int_64)0
	
.LOOP $label$187:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$192 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$191 }
	$57 = ($57 + [165])
	goto $label$190 
	
.LABEL $label$192
	$56 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$191
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$190
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$189
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$188
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$56 | (int_64)$55)
	$54 = ((int_64)$54 + (int_64)-5)
	if ( ((int_64)$54 != (int_64)-6) ){ goto $label$187 }
	*($58 + [296]) = $55
	$48 = *($58 + [440])
	*($58 + [32]) = *($58 + [432])
	$53 = *($58 + [428])
	*($58 + [40]) = *($53 + [8])
	*(($35 = (($58 + [32]) + [16]))) = *($58 + [728])
	CALL $223($12, ($53 + [24]))
	*(($13 + [24])) = *(($53 + [72]))
	*(($13 + [16])) = *(($53 + [64]))
	*(($13 + [8])) = *(($53 + [56]))
	*($13) = *($53 + [48])
	*(($14 + [8])) = *(($53 + [88]))
	*($14) = *($53 + [80])
	*($15) = [0]
	*(($57 = (($58 + [32]) + [100]))) = [0]
	*($36) = [0]
	$37 = ($53 + [100])
	$26 = (*($37) - *($53 + [96]))
	$41 = int_32($26 >> [4])
	if ( ($41 == 0) ){ goto $label$193 }
	if ( ((uint_32)$41 >= (uint_32)[268435456]) ){ goto $label$161 }
	$26 = CALL $205($26)
	*($15) = $26
	*($57) = $26
	*($36) = ($26 + ($41 << [4]))
	$37 = *(($53 + [96]))
	$41 = (*($37) - $37)
	if ( ((int_32)$41 < (int_32)[1]) ){ goto $label$193 }
	CALL memcpy($26, $37, $41)
	*($57) = (*($57) + $41)
	
.LABEL $label$193
	*((($58 + [32]) + [108])) = *(($53 + [108]))
	*((($58 + [32]) + [112])) = *(($53 + [112]))
	*((($58 + [32]) + [120])) = *(($53 + [120]))
	CALL $223($16, ($48 + [12]))
	CALL $223($17, ($48 + [24]))
	*(($18 + [24])) = *((($58 + [320]) + [24]))
	*(($18 + [16])) = *((($58 + [320]) + [16]))
	*(($18 + [8])) = *($58 + [328])
	*($18) = *($58 + [320])
	CALL $223($19, $9)
	*($21) = (int_64)0
	*($38) = [0]
	*(($20 + [8])) = *(($10 + [8]))
	*($20) = *($10)
	$53 = (*($39) - *($2))
	$48 = int_32($53 >> [4])
	if ( ($48 == 0) ){ goto $label$194 }
	if ( ((uint_32)$48 >= (uint_32)[268435456]) ){ goto $label$160 }
	$53 = CALL $205($53)
	*($21) = $53
	*($43) = $53
	*($38) = ($53 + ($48 << [4]))
	$26 = *($2)
	$48 = (*($39) - $26)
	if ( ((int_32)$48 < (int_32)[1]) ){ goto $label$194 }
	CALL memcpy($53, $26, $48)
	*($43) = (*($43) + $48)
	
.LABEL $label$194
	CALL $223($22, $11)
	$41 = (($58 + [536]) + [40])
	$53 = *($41)
	if ( ((uint_32)$53 >= (uint_32)*($40)) ){ goto $label$195 }
	*($53 + [16 align=4]) = (int_64)0
	$1 = *($3)
	*($53 + [8]) = *($58 + [296])
	*($53) = $1
	$26 = [0]
	*(($37 = ($53 + [24]))) = [0]
	$48 = CALL $205([16])
	*($53 + [16]) = $48
	$25 = ($48 + [16])
	*($37) = $25
	*(($48 + [8])) = *($34)
	*($48) = *($58 + [304])
	*(($53 + [20])) = $25
	*($53 + [28]) = [0]
	*(($48 = ($53 + [32]))) = [0]
	*(($53 + [36])) = [0]
	*($58 + [752]) = [0]
	*($58 + [760]) = ($58 + [752])
	*($58 + [736]) = ($58 + [32])
	CALL $118(($58 + [736]), ($58 + [760]))
	$37 = *($58 + [752])
	if ( ($37 == 0) ){ goto $label$172 }
	$53 = ($53 + [28])
	CALL $61($53, $37)
	$26 = *($48)
	$53 = *($53)
	goto $label$171 
	
.LABEL $label$195
	CALL $120($8, ($58 + [304]), $3, ($58 + [296]), ($58 + [32]))
	goto $label$170 
	
.LABEL $label$173
	*($58 + [428]) = [0]
	*($58 + [424]) = ($58 + [456])
	$48 = *($58 + [440])
	if ( $48 ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$172
	$53 = [0]
	
.LABEL $label$171
	*((($58 + [736]) + [8])) = $26
	*($58 + [740]) = $53
	*($58 + [736]) = $53
	*($58 + [752]) = ($58 + [736])
	*($58 + [760]) = ($58 + [32])
	CALL $119(($58 + [760]), ($58 + [752]))
	*($41) = (*($41) + [40])
	
.LABEL $label$170
	if ( ((*($22) & [1]) == 0) ){ goto $label$196 }
	CALL $207(*($42))
	
.LABEL $label$196
	$53 = *($21)
	if ( ($53 == 0) ){ goto $label$197 }
	*($43) = $53
	CALL $207($53)
	
.LABEL $label$197
	if ( ((*($19) & [1]) == 0) ){ goto $label$198 }
	CALL $207(*($44))
	
.LABEL $label$198
	if ( ((*($17) & [1]) == 0) ){ goto $label$199 }
	CALL $207(*($45))
	
.LABEL $label$199
	if ( ((*($16) & [1]) == 0) ){ goto $label$200 }
	CALL $207(*($46))
	
.LABEL $label$200
	$53 = *($15)
	if ( ($53 == 0) ){ goto $label$201 }
	*($57) = $53
	CALL $207($53)
	
.LABEL $label$201
	if ( ((*($12) & [1]) == 0) ){ goto $label$202 }
	CALL $207(*((($58 + [32]) + [32])))
	
.LABEL $label$202
	$50 = ((int_64)$50 + (int_64)1)
	if ( ((int_64)((uint_64)$50 % (uint_64)(int_64)10) != (int_64)0) ){ goto $label$203 }
	*((($58 + [536]) + [20])) = [0]
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2640]
	$55 = (int_64)0
	
.LOOP $label$204:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$209 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$208 }
	$57 = ($57 + [165])
	goto $label$207 
	
.LABEL $label$209
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$206 }
	goto $label$205 
	
.LABEL $label$208
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$207
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$206
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$205
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$55 = ((int_64)$56 | (int_64)$55)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$204 }
	$37 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$37) ){ goto $label$210 }
	$53 = ($48 + [-24])
	$26 = ([0] - $37)
	
.LOOP $label$211:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$210 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$211 }
	
.LABEL $label$210
	if ( ((int_32)$48 == (int_32)$37) ){ goto $label$214 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$213 }
	$1 = (int_64)1
	goto $label$212 
	
.LABEL $label$214
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 >= (int_32)[0]) ){ goto $label$215 }
	$1 = (int_64)1
	goto $label$212 
	
.LABEL $label$215
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$213
	$1 = *($53 + [8])
	
.LABEL $label$212
	CALL $99($0, $55, ((int_64)$1 + (int_64)1))
	*($58 + [40]) = $55
	*($58 + [32]) = $1
	$1 = *(($0 + [8]))
	CALL $121(($58 + [304]), ($58 + [536]))
	$53 = *($58 + [304])
	CALL send_deferred(($58 + [32]), $1, $53, (*($58 + [308]) - $53), [0])
	$53 = *($58 + [304])
	if ( ($53 == 0) ){ goto $label$216 }
	*($58 + [308]) = $53
	CALL $207($53)
	
.LABEL $label$216
	$26 = *($8)
	$53 = *($41)
	if ( ((int_32)$53 == (int_32)$26) ){ goto $label$217 }
	$48 = ([0] - $26)
	$53 = ($53 + [-24])
	
.LOOP $label$218:
	$57 = *(($53 + [12]))
	if ( ($57 == 0) ){ goto $label$219 }
	*(($53 + [16])) = $57
	CALL $207($57)
	
.LABEL $label$219
	$57 = *($53)
	if ( ($57 == 0) ){ goto $label$220 }
	*(($53 + [4])) = $57
	CALL $207($57)
	
.LABEL $label$220
	$53 = ($53 + [-40])
	if ( ((int_32)($53 + $48) != (int_32)[-24]) ){ goto $label$218 }
	
.LABEL $label$217
	*($41) = $26
	
.LABEL $label$203
	if ( ((int_64)$6 != (int_64)-959266720629915648) ){ goto $label$221 }
	$1 = *(*($58 + [428]) + [8])
	*((($58 + [32]) + [8])) = $1
	*($35) = (int_64)-1
	$56 = *($3)
	*($58 + [32]) = $56
	*($12) = [0]
	*(($26 = (($58 + [32]) + [28]))) = [0]
	*((($58 + [32]) + [32])) = [0]
	$53 = CALL db_find_i64($56, $1, (int_64)3966955352204771328, *($58 + [728]))
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$222 }
	$53 = CALL $122(($58 + [32]), $53)
	CALL eosio_assert(((int_32)*($53 + [248]) == (int_32)($58 + [32])), [784])
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$57 = CALL db_next_i64(*($53 + [252]), ($58 + [304]))
	if ( ((int_32)$57 < (int_32)[0]) ){ goto $label$223 }
	CALL $122(($58 + [32]), $57)
	
.LABEL $label$223
	CALL $123(($58 + [32]), $53)
	
.LABEL $label$222
	$1 = *($3)
	*($34) = ($58 + [728])
	*((($58 + [304]) + [12])) = ($58 + [320])
	*($58 + [308]) = ($58 + [424])
	*($58 + [304]) = ($58 + [432])
	CALL $124(($58 + [736]), ($58 + [32]), $1, ($58 + [304]))
	$48 = *($12)
	if ( ($48 == 0) ){ goto $label$221 }
	$53 = *($26)
	if ( ((int_32)$53 == (int_32)$48) ){ goto $label$225 }
	
.LOOP $label$226:
	$53 = ($53 + [-24])
	$57 = *($53)
	*($53) = [0]
	if ( ($57 == 0) ){ goto $label$227 }
	CALL $125($57)
	CALL $207($57)
	
.LABEL $label$227
	if ( ((int_32)$48 != (int_32)$53) ){ goto $label$226 }
	$53 = *($12)
	goto $label$224 
	
.LABEL $label$225
	$53 = $48
	
.LABEL $label$224
	*($26) = $48
	CALL $207($53)
	
.LABEL $label$221
	if ( (int_64)($5 == 0) ){ goto $label$228 }
	*($58 + [736]) = $52
	CALL $64(($58 + [304]), ($58 + [736]))
	$53 = CALL $215(($58 + [304]), [2656])
	$1 = *($53)
	*($53) = (int_64)0
	$53 = ($53 + [8])
	$37 = *($53)
	*(($47 = (($58 + [32]) + [8]))) = $37
	*($53) = [0]
	*($58 + [32]) = $1
	$25 = (*($58 + [32]) & [1])
	$53 = ( $37 ? $23 : $25 )
	$57 = [-1]
	
.LOOP $label$229:
	$48 = ($53 + $57)
	$26 = ($57 + [1])
	$57 = $26
	if ( *(($48 + [1])) ){ goto $label$229 }
	$27 = (CASTING uint_64)(uint_32 $26)
	$1 = (int_64)0
	$56 = (int_64)59
	$55 = (int_64)0
	
.LOOP $label$230:
	$54 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$27) ){ goto $label$231 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$233 }
	$57 = ($57 + [165])
	goto $label$232 
	
.LABEL $label$233
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$232
	$54 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$231
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$235 }
	$54 = ((int_64)((int_64)$54 & (int_64)31) << (int_64)((int_64)$56 & (int_64)4294967295))
	goto $label$234 
	
.LABEL $label$235
	$54 = ((int_64)$54 & (int_64)15)
	
.LABEL $label$234
	$53 = ($53 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$55 = ((int_64)$54 | (int_64)$55)
	$56 = ((int_64)$56 + (int_64)-5)
	if ( ((int_64)$56 != (int_64)-6) ){ goto $label$230 }
	$41 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$41) ){ goto $label$236 }
	$53 = ($48 + [-24])
	$26 = ([0] - $41)
	
.LOOP $label$237:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$236 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$237 }
	
.LABEL $label$236
	if ( ((int_32)$48 == (int_32)$41) ){ goto $label$240 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$239 }
	$1 = (int_64)1
	goto $label$238 
	
.LABEL $label$240
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 >= (int_32)[0]) ){ goto $label$241 }
	$1 = (int_64)1
	goto $label$238 
	
.LABEL $label$241
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$239
	$1 = *($53 + [8])
	
.LABEL $label$238
	CALL $99($0, $55, ((int_64)$1 + (int_64)1))
	if ( ($25 == 0) ){ goto $label$242 }
	CALL $207($37)
	
.LABEL $label$242
	if ( ((*($58 + [304]) & [1]) == 0) ){ goto $label$243 }
	CALL $207(*($34))
	
.LABEL $label$243
	*($58 + [304]) = $1
	$1 = *($3)
	*($47) = ($58 + [424])
	*((($58 + [32]) + [12])) = ($58 + [728])
	*($35) = ($58 + [320])
	*($58 + [36]) = ($58 + [304])
	*($58 + [32]) = ($58 + [432])
	CALL $126(($58 + [736]), ($58 + [496]), $1, ($58 + [32]))
	
.LABEL $label$228
	$1 = *($58 + [424])
	$53 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$57 = ((int_32)$53) != (int_32)[0]
	CALL eosio_assert($57), [1968])
	CALL eosio_assert($57, [2016])
	$57 = CALL db_next_i64(*($53 + [128]), ($58 + [32]))
	if ( ((int_32)$57 < (int_32)[0]) ){ goto $label$244 }
	CALL $116((CASTING uint_32)(uint_64 $1), $57)
	
.LABEL $label$244
	CALL $127(($58 + [456]), $53)
	if ( ((*($11) & [1]) == 0) ){ goto $label$245 }
	CALL $207(*($33))
	
.LABEL $label$245
	if ( ((*($9) & [1]) == 0) ){ goto $label$246 }
	CALL $207(*($49))
	
.LABEL $label$246
	$53 = *($2)
	if ( ($53 == 0) ){ goto $label$169 }
	*($39) = $53
	CALL $207($53)
	
.LABEL $label$169
	$48 = *($58 + [440])
	if ( ($48 == 0) ){ goto $label$167 }
	
.LABEL $label$168
	$53 = *($58 + [444])
	if ( ((int_32)$53 == (int_32)$48) ){ goto $label$248 }
	$57 = ([0] - $48)
	$53 = ($53 + [-12])
	
.LOOP $label$249:
	if ( ((*($53) & [1]) == 0) ){ goto $label$250 }
	CALL $207(*(($53 + [8])))
	
.LABEL $label$250
	$53 = ($53 + [-12])
	if ( ((int_32)($53 + $57) != (int_32)[-12]) ){ goto $label$249 }
	$53 = *($58 + [440])
	goto $label$247 
	
.LABEL $label$248
	$53 = $48
	
.LABEL $label$247
	*($58 + [444]) = $48
	CALL $207($53)
	
.LABEL $label$167
	$24 = ($24 + [12])
	if ( ((int_32)$24 != (int_32)$7) ){ goto $label$162 }
	if ( (int_64)($5 == 0) ){ goto $label$252 }
	if ( ((int_64)$50 == (int_64)0) ){ goto $label$252 }
	$1 = CALL current_time()
	$53 = CALL db_lowerbound_i64(*($58 + [496]), *(($58 + [504])), (int_64)3774700499559776256, (int_64)0)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$251 }
	$1 = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$53 = CALL $128(($58 + [496]), $53)
	
.LOOP $label$253:
	if ( ((uint_64)((int_64)*($53 + [108]) + (int_64)$5) >= (uint_64)$1) ){ goto $label$252 }
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$57 = [0]
	$48 = CALL db_next_i64(*($53 + [260]), ($58 + [32]))
	if ( ((int_32)$48 < (int_32)[0]) ){ goto $label$254 }
	$57 = CALL $128(($58 + [496]), $48)
	
.LABEL $label$254
	CALL $129(($58 + [496]), $53)
	$53 = $57
	if ( $57 ){ goto $label$253 }
	
.LABEL $label$252
	if ( (int_64)($50 == 0) ){ goto $label$158 }
	
.LABEL $label$251
	if ( ((int_32)*(($58 + [576])) == (int_32)*($58 + [572])) ){ goto $label$158 }
	*(($58 + [556])) = [0]
	$1 = (int_64)0
	$54 = (int_64)59
	$53 = [2640]
	$55 = (int_64)0
	
.LOOP $label$255:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$260 }
	$57 = *($53)
	if ( ((uint_32)(($57 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$259 }
	$57 = ($57 + [165])
	goto $label$258 
	
.LABEL $label$260
	$56 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$259
	$57 = ( ($57 + [208]) ? [0] : ((($57 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$258
	$56 = (int_64)((int_64)(CASTING uint_64)(uint_32 $57) << (int_64)56) >> (int_64)56)
	
.LABEL $label$257
	$56 = ((int_64)((int_64)$56 & (int_64)31) << (int_64)((int_64)$54 & (int_64)4294967295))
	
.LABEL $label$256
	$53 = ($53 + [1])
	$54 = ((int_64)$54 + (int_64)-5)
	$55 = ((int_64)$56 | (int_64)$55)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$255 }
	$24 = *(($0 + [40]))
	$48 = *(($0 + [44]))
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$261 }
	$53 = ($48 + [-24])
	$26 = ([0] - $24)
	
.LOOP $label$262:
	if ( ((int_64)*(*($53)) == (int_64)$55) ){ goto $label$261 }
	$48 = $53
	$57 = ($53 + [-24])
	$53 = $57
	if ( ((int_32)($57 + $26) != (int_32)[-24]) ){ goto $label$262 }
	
.LABEL $label$261
	if ( ((int_32)$48 == (int_32)$24) ){ goto $label$265 }
	$53 = *(($48 + [-24]))
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	if ( $53 ){ goto $label$264 }
	$1 = (int_64)1
	goto $label$159 
	
.LABEL $label$265
	$53 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $55)
	if ( ((int_32)$53 < (int_32)[0]) ){ goto $label$263 }
	$53 = CALL $62($4, $53)
	CALL eosio_assert(((int_32)*($53 + [24]) == (int_32)$4), [784])
	
.LABEL $label$264
	$1 = *($53 + [8])
	goto $label$159 
	
.LABEL $label$263
	$1 = (int_64)1
	goto $label$159 
	
.LABEL $label$161
	CALL $222($15)
	
.LABEL $label$160
	CALL $222($21)
	
.LABEL $label$159
	CALL $99($0, $55, ((int_64)$1 + (int_64)1))
	*($58 + [40]) = $55
	*($58 + [32]) = $1
	$1 = *(($0 + [8]))
	CALL $121(($58 + [320]), ($58 + [536]))
	$53 = *($58 + [320])
	CALL send_deferred(($58 + [32]), $1, $53, (*($58 + [324]) - $53), [0])
	$53 = *($58 + [320])
	if ( ($53 == 0) ){ goto $label$158 }
	*($58 + [324]) = $53
	CALL $207($53)
	
.LABEL $label$158
	$26 = *($58 + [480])
	if ( ($26 == 0) ){ goto $label$266 }
	$0 = ($58 + [484])
	$57 = *($0)
	if ( ((int_32)$57 == (int_32)$26) ){ goto $label$268 }
	
.LOOP $label$269:
	$57 = ($57 + [-24])
	$53 = *($57)
	*($57) = [0]
	if ( ($53 == 0) ){ goto $label$270 }
	$48 = *($53 + [96])
	if ( ($48 == 0) ){ goto $label$271 }
	*(($53 + [100])) = $48
	CALL $207($48)
	
.LABEL $label$271
	if ( ((*($53 + [24]) & [1]) == 0) ){ goto $label$272 }
	CALL $207(*(($53 + [32])))
	
.LABEL $label$272
	CALL $207($53)
	
.LABEL $label$270
	if ( ((int_32)$26 != (int_32)$57) ){ goto $label$269 }
	$53 = *(($58 + [480]))
	goto $label$267 
	
.LABEL $label$268
	$53 = $26
	
.LABEL $label$267
	*($0) = $26
	CALL $207($53)
	
.LABEL $label$266
	$48 = *($58 + [520])
	if ( ($48 == 0) ){ goto $label$273 }
	$26 = ($58 + [524])
	$53 = *($26)
	if ( ((int_32)$53 == (int_32)$48) ){ goto $label$275 }
	
.LOOP $label$276:
	$53 = ($53 + [-24])
	$57 = *($53)
	*($53) = [0]
	if ( ($57 == 0) ){ goto $label$277 }
	CALL $125($57)
	CALL $207($57)
	
.LABEL $label$277
	if ( ((int_32)$48 != (int_32)$53) ){ goto $label$276 }
	$53 = *(($58 + [520]))
	goto $label$274 
	
.LABEL $label$275
	$53 = $48
	
.LABEL $label$274
	*($26) = $48
	CALL $207($53)
	
.LABEL $label$273
	CALL $130(($58 + [536]))
	*([0] + [4]) = ($58 + [768])
	(unreachable)
	(unreachable)
}

void .FUNC $222 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = [-48]
	$2 = *($1)
	$3 = ($2 & [1])
	$1 = (( *($1 + [8]) ? ($1 + [1]) : $3 ) + ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 ))
	$2 = *(($1 + [-3]))
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$3 }
	$4 = [-55]
	if ( ((uint_32)(($2 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($4 + $2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ( ($2 + [-87]) ? [0] : ((($2 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$1
	$3 = ($2 << [8])
	$4 = [-48]
	$2 = *(($1 + [-2]))
	if ( ((($2 + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	$4 = [-55]
	if ( ((uint_32)(($2 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($4 + $2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ( ($2 + [-87]) ? [0] : ((($2 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$4
	$4 = (($2 << [4]) + $3)
	$2 = [-48]
	$1 = *(($1 + [-1]))
	if ( ((($1 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	$2 = [-55]
	if ( ((uint_32)(($1 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = ($2 + $1)
	goto $label$7 
	
.LABEL $label$8
	$1 = ( ($1 + [-87]) ? [0] : ((($1 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$7
	return ((($4 + $1) & [511]) + [1])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [288])
	*([0] + [4]) = $24
	CALL $162(($24 + [208]), $2, ($1 + [24]))
	$2 = *($3)
	$23 = ($2 & [1])
	$3 = CALL $214(($24 + [208]), ( *($3 + [8]) ? ($3 + [1]) : $23 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $23 ))
	$23 = ($3 + [8])
	*((($24 + [160]) + [8])) = *($23)
	*($24 + [160]) = *($3)
	$2 = [0]
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($23) = [0]
	if ( ((*($24 + [208]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*($24 + [216]))
	
.LABEL $label$1
	$3 = *($24 + [160])
	$23 = ($3 & [1])
	CALL sha256(( *($24 + [168]) ? (($24 + [160]) | [1]) : $23 ), ( *($24 + [164]) ? uint_32($3 >> [1]) : $23 ), $4)
	*(($3 = (($24 + [112]) + [24]))) = *(($4 + [24]))
	*(($23 = (($24 + [112]) + [16]))) = *(($4 + [16]))
	*($24 + [120]) = *(($4 + [8]))
	*($24 + [112]) = *($4)
	*((($24 + [176]) + [24])) = *($3)
	*((($24 + [176]) + [16])) = *($23)
	*($24 + [184]) = *($24 + [120])
	*($24 + [176]) = *($24 + [112])
	$3 = ($24 + [208])
	
.LOOP $label$2:
	$23 = *((($24 + [176]) + $2))
	*(($3 + [1])) = *((($23 & [15]) + [2720]))
	*($3) = *(((uint_32($23 >> [4]) & [15]) + [2720]))
	$3 = ($3 + [2])
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	*($24 + [148 align=4]) = (int_64)0
	*($24 + [144]) = [0]
	*($24 + [272]) = [0]
	$3 = CALL strlen(($24 + [208]))
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($24 + [144]) = ($3 << [1])
	$2 = (($24 + [144]) | [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$23 = (($3 + [16]) & [-16])
	$2 = CALL $205($23)
	*($24 + [144]) = ($23 | [1])
	*($24 + [152]) = $2
	*($24 + [148]) = $3
	
.LABEL $label$6
	CALL memcpy($2, ($24 + [208]), $3)
	
.LABEL $label$5
	*(($2 + $3)) = [0]
	$5 = CALL $166($0, ($24 + [144]))
	$14 = *($0 + [4])
	$22 = (int_64)0
	$17 = (int_64)59
	$3 = [2832]
	$18 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$22 > (uint_64)(int_64)10) ){ goto $label$13 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$13
	$19 = (int_64)0
	if ( ((int_64)$22 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$22 = ((int_64)$22 + (int_64)1)
	if ( ((int_64)$22 != (int_64)13) ){ goto $label$8 }
	$7 = *(($14 + [40]))
	$23 = *(($14 + [44]))
	if ( ((int_32)$23 == (int_32)$7) ){ goto $label$14 }
	$3 = ($23 + [-24])
	$0 = ([0] - $7)
	
.LOOP $label$15:
	if ( ((int_64)*(*($3)) == (int_64)$18) ){ goto $label$14 }
	$23 = $3
	$2 = ($3 + [-24])
	$3 = $2
	if ( ((int_32)($2 + $0) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = ($14 + [16])
	if ( ((int_32)$23 == (int_32)$7) ){ goto $label$18 }
	$3 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	if ( $3 ){ goto $label$17 }
	$22 = (int_64)0
	goto $label$3 
	
.LABEL $label$18
	$3 = CALL db_find_i64(*(($14 + [16])), *(($14 + [24])), (int_64)4982871467403247616, $18)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$16 }
	$3 = CALL $62($2, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	
.LABEL $label$17
	$22 = *($3 + [8])
	goto $label$3 
	
.LABEL $label$16
	$22 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	CALL $209(($24 + [144]))
	
.LABEL $label$3
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$22 % (uint_64)(int_64)3))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$22 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$21 }
	if ( $3 ){ goto $label$20 }
	$2 = ((int_32)$5 * (int_32)[3])
	$21 = *(($2 + [2850]))
	$3 = *(($2 + [2849]))
	$20 = *(($2 + [2848]))
	goto $label$19 
	
.LABEL $label$22
	$2 = ((int_32)$5 * (int_32)[3])
	$21 = *(($2 + [5954]))
	$3 = *(($2 + [5953]))
	$20 = *(($2 + [5952]))
	goto $label$19 
	
.LABEL $label$21
	$2 = ((int_32)$5 * (int_32)[3])
	$21 = *(($2 + [4402]))
	$3 = *(($2 + [4401]))
	$20 = *(($2 + [4400]))
	goto $label$19 
	
.LABEL $label$20
	$3 = [0]
	CALL eosio_assert([0], [1360])
	
.LABEL $label$19
	$19 = *(($1 + [88]))
	CALL eosio_assert([1], [1568])
	$6 = ($3 & [255])
	$22 = (uint_64)$19 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$2 = [0]
	
.LABEL $label$23
	CALL eosio_assert($2, [1376])
	*(($4 + [40])) = $19
	*($4 + [32]) = (int_64)0
	$0 = ($4 + [72])
	$9 = ($4 + [48])
	$8 = ($20 & [65535])
	$7 = ($4 + [32])
	$19 = (CASTING uint_64)(uint_32 ($21 & [65535]))
	$12 = ($1 + [96])
	$13 = ($4 + [56])
	$14 = ($4 + [52])
	$15 = ($4 + [80])
	$16 = ($4 + [76])
	$10 = ($1 + [88])
	$2 = [0]
	
.LOOP $label$29:
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$32 }
	$23 = ($3 << [4])
	*($7) = ((int_64)*((*($12) + $23)) * (int_64)$19)
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)*($13)) ){ goto $label$31 }
	*($3) = *($7)
	*(($3 + [8])) = *(($7 + [8]))
	*($14) = (*($14) + [16])
	goto $label$30 
	
.LABEL $label$32
	*(($11 = (($24 + [208]) + [8]))) = *($10)
	*($24 + [208]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$22 = (uint_64)*($11) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	
.LOOP $label$37:
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$37 }
	
.LABEL $label$36
	$23 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$23 = [0]
	
.LABEL $label$33
	CALL eosio_assert($23, [1376])
	$3 = *($14)
	if ( ((uint_32)$3 >= (uint_32)*($13)) ){ goto $label$38 }
	*($3) = *($24 + [208])
	*(($3 + [8])) = *($11)
	*($14) = (*($14) + [16])
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$38
	CALL $163($9, ($24 + [208]))
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	CALL $82($9, $7)
	
.LABEL $label$30
	CALL _ZNSt3__19to_stringEx(($24 + [208]), ((int_64)*((*($12) + $23)) * (int_64)10))
	if ( (*($0) & [1]) ){ goto $label$40 }
	*($0) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*($15)) = [0]
	*($16) = [0]
	
.LABEL $label$39
	CALL $212($0, [0])
	*(($0 + [8])) = *((($24 + [208]) + [8]))
	*($0) = *($24 + [208])
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$29 }
	
.LABEL $label$28
	CALL _ZNSt3__19to_stringEi(($24 + [48]), $8)
	$3 = CALL $215(($24 + [48]), [7504])
	$2 = ($3 + [8])
	*((($24 + [64]) + [8])) = *($2)
	*($24 + [64]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	CALL _ZNSt3__19to_stringEi(($24 + [32]), $6)
	$3 = *($24 + [32])
	$2 = ($3 & [1])
	$3 = CALL $214(($24 + [64]), ( *($24 + [40]) ? (($24 + [32]) | [1]) : $2 ), ( *($24 + [36]) ? uint_32($3 >> [1]) : $2 ))
	$2 = ($3 + [8])
	*((($24 + [80]) + [8])) = *($2)
	*($24 + [80]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	$3 = CALL $215(($24 + [80]), [7504])
	$2 = ($3 + [8])
	*((($24 + [96]) + [8])) = *($2)
	*($24 + [96]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	CALL _ZNSt3__19to_stringEi(($24 + [16]), ($21 & [65535]))
	$3 = *($24 + [16])
	$2 = ($3 & [1])
	$3 = CALL $214(($24 + [96]), ( *($24 + [24]) ? (($24 + [16]) | [1]) : $2 ), ( *($24 + [20]) ? uint_32($3 >> [1]) : $2 ))
	$2 = ($3 + [8])
	*((($24 + [176]) + [8])) = *($2)
	*($24 + [176]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	$3 = CALL $215(($24 + [176]), [7504])
	$2 = ($3 + [8])
	*((($24 + [208]) + [8])) = *($2)
	*($24 + [208]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	CALL _ZNSt3__19to_stringEi($24, $5)
	$3 = *($24)
	$2 = ($3 & [1])
	$3 = CALL $214(($24 + [208]), ( *($24 + [8]) ? ($24 | [1]) : $2 ), ( *($24 + [4]) ? uint_32($3 >> [1]) : $2 ))
	$2 = *($3)
	*($3) = [0]
	$23 = *($3 + [4])
	*($3 + [4]) = [0]
	$14 = *($3 + [8])
	*($3 + [8]) = [0]
	$3 = ($4 + [60])
	if ( (*($4 + [60]) & [1]) ){ goto $label$42 }
	*($3) = [0]
	$7 = ($4 + [68])
	goto $label$41 
	
.LABEL $label$42
	*(*(($7 = ($4 + [68])))) = [0]
	*(($4 + [64])) = [0]
	
.LABEL $label$41
	CALL $212($3, [0])
	*(($4 + [64])) = $23
	*($4 + [60]) = $2
	*($7) = $14
	if ( ((*($24) & [1]) == 0) ){ goto $label$43 }
	CALL $207(*(($24 + [8])))
	
.LABEL $label$43
	if ( ((*($24 + [208]) & [1]) == 0) ){ goto $label$44 }
	CALL $207(*($24 + [216]))
	
.LABEL $label$44
	if ( ((*($24 + [176]) & [1]) == 0) ){ goto $label$45 }
	CALL $207(*($24 + [184]))
	
.LABEL $label$45
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$46 }
	CALL $207(*(($24 + [24])))
	
.LABEL $label$46
	if ( ((*($24 + [96]) & [1]) == 0) ){ goto $label$47 }
	CALL $207(*($24 + [104]))
	
.LABEL $label$47
	if ( ((*($24 + [80]) & [1]) == 0) ){ goto $label$48 }
	CALL $207(*($24 + [88]))
	
.LABEL $label$48
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$49 }
	CALL $207(*(($24 + [40])))
	
.LABEL $label$49
	if ( ((*($24 + [64]) & [1]) == 0) ){ goto $label$50 }
	CALL $207(*($24 + [72]))
	
.LABEL $label$50
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$51 }
	CALL $207(*($24 + [56]))
	
.LABEL $label$51
	if ( ($20 & [65535]) ){ goto $label$53 }
	*(($24 + [184])) = [0]
	*($24 + [176]) = (int_64)0
	$3 = CALL strlen([7504])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$56 }
	*($24 + [176]) = ($3 << [1])
	$2 = (($24 + [176]) | [1])
	if ( $3 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$23 = (($3 + [16]) & [-16])
	$2 = CALL $205($23)
	*($24 + [176]) = ($23 | [1])
	*($24 + [184]) = $2
	*($24 + [180]) = $3
	
.LABEL $label$55
	CALL memcpy($2, [7504], $3)
	
.LABEL $label$54
	*(($2 + $3)) = [0]
	CALL _ZNSt3__19to_stringEx(($24 + [96]), *($1 + [80]))
	$3 = *($24 + [96])
	$23 = ($3 & [1])
	$3 = CALL $214(($24 + [176]), ( *($24 + [104]) ? (($24 + [96]) | [1]) : $23 ), ( *($24 + [100]) ? uint_32($3 >> [1]) : $23 ))
	$23 = ($3 + [8])
	*(($2 = (($24 + [208]) + [8]))) = *($23)
	*($24 + [208]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($23) = [0]
	$3 = *($24 + [208])
	$23 = ($3 & [1])
	CALL $214($0, ( *($2) ? (($24 + [208]) | [1]) : $23 ), ( *($24 + [212]) ? uint_32($3 >> [1]) : $23 ))
	if ( ((*($24 + [208]) & [1]) == 0) ){ goto $label$57 }
	CALL $207(*($2))
	
.LABEL $label$57
	if ( ((*($24 + [96]) & [1]) == 0) ){ goto $label$58 }
	CALL $207(*(($24 + [104])))
	
.LABEL $label$58
	if ( ((*($24 + [176]) & [1]) == 0) ){ goto $label$53 }
	CALL $207(*($24 + [184]))
	
.LABEL $label$53
	if ( ((*($24 + [144]) & [1]) == 0) ){ goto $label$59 }
	CALL $207(*($24 + [152]))
	
.LABEL $label$59
	if ( ((*($24 + [160]) & [1]) == 0) ){ goto $label$60 }
	CALL $207(*(($24 + [168])))
	
.LABEL $label$60
	*([0] + [4]) = ($24 + [288])
	return (unreachable)
	
.LABEL $label$52
	CALL $209(($24 + [176]))
	(unreachable)
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	CALL eosio_assert(((int_32)(*(($1 + [100])) - *($1 + [96])) == (int_32)[128]), [2800])
	$16 = *(($1 + [88]))
	$4 = *($0 + [4])
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [7520]
	$12 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$6 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$1 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [7536]
	$14 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$7 }
	$11 = ( $12 ? $14 : ((int_64)$16 == (int_64)1397703940) )
	$6 = *(($4 + [40]))
	$15 = *(($4 + [44]))
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$13 }
	$9 = ($15 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$14:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$13 }
	$15 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = ($4 + [16])
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$18 }
	$9 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [784])
	if ( $9 ){ goto $label$17 }
	$16 = (int_64)10
	goto $label$15 
	
.LABEL $label$18
	$9 = CALL db_find_i64(*(($4 + [16])), *(($4 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$16 }
	$9 = CALL $62($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [784])
	
.LABEL $label$17
	$16 = *($9 + [8])
	goto $label$15 
	
.LABEL $label$16
	$16 = (int_64)10
	
.LABEL $label$15
	$8 = *(($1 + [88]))
	$4 = *(($0 + [4]))
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [7552]
	$12 = (int_64)0
	
.LOOP $label$19:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$20 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [165])
	goto $label$21 
	
.LABEL $label$22
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$20
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$19 }
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [7568]
	$14 = (int_64)0
	
.LOOP $label$23:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$24 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$5 = ($5 + [165])
	goto $label$25 
	
.LABEL $label$26
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$24
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$23 }
	$11 = ( $12 ? $14 : ((int_64)$8 == (int_64)1397703940) )
	$0 = *(($4 + [40]))
	$15 = *(($4 + [44]))
	if ( ((int_32)$15 == (int_32)$0) ){ goto $label$27 }
	$9 = ($15 + [-24])
	$7 = ([0] - $0)
	
.LOOP $label$28:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$27 }
	$15 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	$5 = ($4 + [16])
	if ( ((int_32)$15 == (int_32)$0) ){ goto $label$32 }
	$9 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [784])
	if ( $9 ){ goto $label$31 }
	$11 = (int_64)1000000
	goto $label$29 
	
.LABEL $label$32
	$9 = CALL db_find_i64(*(($4 + [16])), *(($4 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$30 }
	$9 = CALL $62($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [784])
	
.LABEL $label$31
	$11 = *($9 + [8])
	goto $label$29 
	
.LABEL $label$30
	$11 = (int_64)1000000
	
.LABEL $label$29
	$9 = [1]
	$5 = [1]
	$15 = ($1 + [96])
	$13 = *(*($15))
	if ( (int_64)($13 == 0) ){ goto $label$33 }
	$5 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$33
	CALL eosio_assert($5, [7584])
	$13 = *(*($15) + [16])
	if ( (int_64)($13 == 0) ){ goto $label$34 }
	$9 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$34
	CALL eosio_assert($9, [7584])
	$9 = [1]
	$5 = [1]
	$15 = ($1 + [96])
	$13 = *(*($15) + [32])
	if ( (int_64)($13 == 0) ){ goto $label$35 }
	$5 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$35
	CALL eosio_assert($5, [7584])
	$13 = *(*($15) + [48])
	if ( (int_64)($13 == 0) ){ goto $label$36 }
	$9 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$36
	CALL eosio_assert($9, [7584])
	$9 = [1]
	$5 = [1]
	$15 = ($1 + [96])
	$13 = *(*($15) + [64])
	if ( (int_64)($13 == 0) ){ goto $label$37 }
	$5 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$37
	CALL eosio_assert($5, [7584])
	$13 = *(*($15) + [80])
	if ( (int_64)($13 == 0) ){ goto $label$38 }
	$9 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$38
	CALL eosio_assert($9, [7584])
	$9 = [1]
	$5 = [1]
	$15 = ($1 + [96])
	$13 = *(*($15) + [96])
	if ( (int_64)($13 == 0) ){ goto $label$39 }
	$5 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$39
	CALL eosio_assert($5, [7584])
	$13 = *(*($15) + [112])
	if ( (int_64)($13 == 0) ){ goto $label$40 }
	$9 = (((uint_64)$13 <= (uint_64)$11) & ((uint_64)$13 >= (uint_64)$16))
	
.LABEL $label$40
	CALL eosio_assert($9, [7584])
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $205(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $207($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $205($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $214($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $209($0)
}

void .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	CALL $162(($12 + [96]), $2, ($1 + [24]))
	$2 = *($3)
	$7 = ($2 & [1])
	$3 = CALL $214(($12 + [96]), ( *($3 + [8]) ? ($3 + [1]) : $7 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $7 ))
	$7 = ($3 + [8])
	*((($12 + [48]) + [8])) = *($7)
	*($12 + [48]) = *($3)
	$2 = [0]
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($7) = [0]
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*($12 + [104]))
	
.LABEL $label$1
	$3 = *($12 + [48])
	$7 = ($3 & [1])
	CALL sha256(( *($12 + [56]) ? (($12 + [48]) | [1]) : $7 ), ( *($12 + [52]) ? uint_32($3 >> [1]) : $7 ), $4)
	*(($3 = ($12 + [24]))) = *(($4 + [24]))
	*(($7 = ($12 + [16]))) = *(($4 + [16]))
	*($12 + [8]) = *(($4 + [8]))
	*($12) = *($4)
	*((($12 + [64]) + [24])) = *($3)
	*((($12 + [64]) + [16])) = *($7)
	*($12 + [72]) = *($12 + [8])
	*($12 + [64]) = *($12)
	$3 = ($12 + [96])
	
.LOOP $label$2:
	$7 = *((($12 + [64]) + $2))
	*(($3 + [1])) = *((($7 & [15]) + [2720]))
	*($3) = *(((uint_32($7 >> [4]) & [15]) + [2720]))
	$3 = ($3 + [2])
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	*($12 + [36 align=4]) = (int_64)0
	*($12 + [32]) = [0]
	*($12 + [160]) = [0]
	$3 = CALL strlen(($12 + [96]))
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($12 + [32]) = ($3 << [1])
	$2 = (($12 + [32]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = (($3 + [16]) & [-16])
	$2 = CALL $205($7)
	*($12 + [32]) = ($7 | [1])
	*($12 + [40]) = $2
	*($12 + [36]) = $3
	
.LABEL $label$5
	CALL memcpy($2, ($12 + [96]), $3)
	
.LABEL $label$4
	*(($2 + $3)) = [0]
	$5 = *($0 + [4])
	$9 = (int_64)0
	$8 = (int_64)59
	$3 = [2752]
	$10 = (int_64)0
	
.LOOP $label$7:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = *(($5 + [40]))
	$7 = *(($5 + [44]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$11 }
	$3 = ($7 + [-24])
	$0 = ([0] - $6)
	
.LOOP $label$12:
	if ( ((int_64)*(*($3)) == (int_64)$10) ){ goto $label$11 }
	$7 = $3
	$2 = ($3 + [-24])
	$3 = $2
	if ( ((int_32)($2 + $0) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$2 = ($5 + [16])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$21 }
	$3 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	if ( $3 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$3 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)4982871467403247616, $10)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	$3 = CALL $62($2, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	
.LABEL $label$20
	if ( (*($3 + [8]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	$2 = [-48]
	$3 = *($12 + [32])
	$7 = ($3 & [1])
	$3 = *(((( *($12 + [40]) ? (($12 + [32]) | [1]) : $7 ) + ( *($12 + [36]) ? uint_32($3 >> [1]) : $7 )) + [-1]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$22 }
	$2 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$17 }
	
.LABEL $label$22
	$3 = ($2 + $3)
	goto $label$16 
	
.LABEL $label$18
	$2 = [-48]
	$3 = *($12 + [32])
	$7 = ($3 & [1])
	$3 = *(((( *($12 + [40]) ? (($12 + [32]) | [1]) : $7 ) + ( *($12 + [36]) ? uint_32($3 >> [1]) : $7 )) + [-1]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$23 }
	$2 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$15 }
	
.LABEL $label$23
	$3 = ($2 + $3)
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$16
	$7 = ([13] - ((uint_32)($3 & [65535]) % (uint_32)[13]))
	goto $label$13 
	
.LABEL $label$15
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$14
	$7 = (((uint_32)($3 & [65535]) % (uint_32)[13]) + [1])
	
.LABEL $label$13
	$8 = *(($1 + [88]))
	CALL eosio_assert([1], [1568])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	
.LOOP $label$28:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$28 }
	
.LABEL $label$27
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$2 = [0]
	
.LABEL $label$24
	CALL eosio_assert($2, [1376])
	*(($4 + [40])) = $8
	*($4 + [32]) = (int_64)0
	$0 = ($7 & [255])
	$2 = ($4 + [32])
	if ( ((uint_32)(($7 + [-1]) & [255]) <= (uint_32)[5]) ){ goto $label$41 }
	if ( ((uint_32)(($7 + [-8]) & [255]) > (uint_32)[5]) ){ goto $label$40 }
	*($12 + [96]) = (int_64)0
	$9 = *(($1 + [88]))
	*($12 + [104]) = $9
	CALL eosio_assert([1], [1568])
	$5 = ($4 + [48])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	
.LOOP $label$44:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$44 }
	
.LABEL $label$43
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$42 }
	goto $label$38 
	
.LABEL $label$41
	*($2) = ((int_64)*(*($1 + [96])) << (int_64)1)
	CALL $213(($4 + [72]), [2768])
	$5 = ($4 + [48])
	$3 = ($4 + [52])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)*(($4 + [56]))) ){ goto $label$37 }
	*($7) = *($2)
	*(($7 + [8])) = *(($2 + [8]))
	*($3) = (*($3) + [16])
	goto $label$36 
	
.LABEL $label$40
	CALL $213(($4 + [72]), [2784])
	$5 = ($4 + [48])
	$7 = ($4 + [52])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)*(($4 + [56]))) ){ goto $label$33 }
	*($3) = *($2)
	*(($3 + [8])) = *(($2 + [8]))
	$3 = (*($7) + [16])
	*($7) = $3
	goto $label$32 
	
.LABEL $label$39
	$7 = [0]
	
.LABEL $label$38
	CALL eosio_assert($7, [1376])
	$3 = ($4 + [52])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [56]))) ){ goto $label$35 }
	*($7) = *($12 + [96])
	*(($7 + [8])) = *((($12 + [96]) + [8]))
	*($3) = (*($3) + [16])
	goto $label$34 
	
.LABEL $label$37
	CALL $82($5, $2)
	
.LABEL $label$36
	*($12 + [96]) = (int_64)0
	$9 = *(($1 + [88]))
	*($12 + [104]) = $9
	CALL eosio_assert([1], [1568])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	
.LOOP $label$49:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$49 }
	
.LABEL $label$48
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$2 = [0]
	
.LABEL $label$45
	CALL eosio_assert($2, [1376])
	$3 = ($4 + [52])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [56]))) ){ goto $label$50 }
	*($2) = *($12 + [96])
	*(($2 + [8])) = *((($12 + [96]) + [8]))
	*($3) = (*($3) + [16])
	goto $label$29 
	
.LABEL $label$50
	CALL $163($5, ($12 + [96]))
	goto $label$29 
	
.LABEL $label$35
	CALL $163($5, ($12 + [96]))
	
.LABEL $label$34
	*(($4 + [32])) = ((int_64)*(*($1 + [96]) + [16]) << (int_64)1)
	CALL $213(($4 + [72]), [2768])
	$3 = ($4 + [52])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)*(($4 + [56]))) ){ goto $label$31 }
	*($7) = *($2)
	*(($7 + [8])) = *(($2 + [8]))
	*($3) = (*($3) + [16])
	goto $label$29 
	
.LABEL $label$33
	CALL $82($5, $2)
	$3 = *($7)
	
.LABEL $label$32
	if ( ((int_32)$3 == (int_32)*(($4 + [56]))) ){ goto $label$30 }
	*($3) = *($2)
	*(($3 + [8])) = *(($2 + [8]))
	*(($3 = ($4 + [52]))) = (*($3) + [16])
	goto $label$29 
	
.LABEL $label$31
	CALL $82($5, $2)
	goto $label$29 
	
.LABEL $label$30
	CALL $82($5, $2)
	
.LABEL $label$29
	CALL _ZNSt3__19to_stringEi(($12 + [96]), $0)
	$3 = ($4 + [60])
	if ( (*($4 + [60]) & [1]) ){ goto $label$52 }
	*($3) = [0]
	goto $label$51 
	
.LABEL $label$52
	*(*(($4 + [68]))) = [0]
	*(($4 + [64])) = [0]
	
.LABEL $label$51
	CALL $212($3, [0])
	*(($3 + [8])) = *((($12 + [96]) + [8]))
	*($3) = *($12 + [96])
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$53 }
	CALL $207(*($12 + [40]))
	
.LABEL $label$53
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$54 }
	CALL $207(*(($12 + [56])))
	
.LABEL $label$54
	*([0] + [4]) = ($12 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $209(($12 + [32]))
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL eosio_assert(((int_32)(*(($1 + [100])) - *($1 + [96])) == (int_32)[32]), [2800])
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [-48]
	$3 = *($1)
	$4 = ($3 & [1])
	$1 = (( *($1 + [8]) ? ($1 + [1]) : $4 ) + ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 ))
	$3 = *(($1 + [-6]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$3 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($5 + $3)
	goto $label$1 
	
.LABEL $label$2
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$1
	$4 = ($3 << [4])
	$5 = [-48]
	$3 = *(($1 + [-5]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($5 + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$4
	*($2) = ([20] - ((int_32)($3 + $4) % (int_32)[20]))
	$5 = [-48]
	$3 = *(($1 + [-4]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = ($5 + $3)
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$7
	$4 = ($3 << [4])
	$5 = [-48]
	$3 = *(($1 + [-3]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$12 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$11 }
	
.LABEL $label$12
	$3 = ($5 + $3)
	goto $label$10 
	
.LABEL $label$11
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$10
	*($2 + [1]) = ([20] - ((int_32)($3 + $4) % (int_32)[20]))
	$5 = [-48]
	$3 = *(($1 + [-2]))
	if ( ((($3 + [-48]) & [255]) <= [10]) ){ goto $label$15 }
	$5 = [-55]
	if ( ((uint_32)(($3 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = ($5 + $3)
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [-87]) ? [0] : ((($3 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$13
	$5 = ($3 << [4])
	$3 = [-48]
	$1 = *(($1 + [-1]))
	if ( ((($1 + [-48]) & [255]) <= [10]) ){ goto $label$18 }
	$3 = [-55]
	if ( ((uint_32)(($1 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = ($3 + $1)
	goto $label$16 
	
.LABEL $label$17
	$1 = ( ($1 + [-87]) ? [0] : ((($1 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$16
	*($2 + [2]) = ([20] - ((int_32)($1 + $5) % (int_32)[20]))
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [256])
	*([0] + [4]) = $13
	CALL $162(($13 + [176]), $2, ($1 + [24]))
	$2 = *($3)
	$8 = ($2 & [1])
	$3 = CALL $214(($13 + [176]), ( *($3 + [8]) ? ($3 + [1]) : $8 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $8 ))
	$8 = ($3 + [8])
	*((($13 + [128]) + [8])) = *($8)
	*($13 + [128]) = *($3)
	$2 = [0]
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($8) = [0]
	if ( ((*($13 + [176]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*($13 + [184]))
	
.LABEL $label$1
	$3 = *($13 + [128])
	$8 = ($3 & [1])
	CALL sha256(( *($13 + [136]) ? (($13 + [128]) | [1]) : $8 ), ( *($13 + [132]) ? uint_32($3 >> [1]) : $8 ), $4)
	*(($3 = (($13 + [80]) + [24]))) = *(($4 + [24]))
	*(($8 = (($13 + [80]) + [16]))) = *(($4 + [16]))
	*($13 + [88]) = *(($4 + [8]))
	*($13 + [80]) = *($4)
	*((($13 + [144]) + [24])) = *($3)
	*((($13 + [144]) + [16])) = *($8)
	*($13 + [152]) = *($13 + [88])
	*($13 + [144]) = *($13 + [80])
	$3 = ($13 + [176])
	
.LOOP $label$2:
	$8 = *((($13 + [144]) + $2))
	*(($3 + [1])) = *((($8 & [15]) + [2720]))
	*($3) = *(((uint_32($8 >> [4]) & [15]) + [2720]))
	$3 = ($3 + [2])
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	*($13 + [116 align=4]) = (int_64)0
	*($13 + [112]) = [0]
	*($13 + [240]) = [0]
	$3 = CALL strlen(($13 + [176]))
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($13 + [112]) = ($3 << [1])
	$2 = (($13 + [112]) | [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($3 + [16]) & [-16])
	$2 = CALL $205($8)
	*($13 + [112]) = ($8 | [1])
	*($13 + [120]) = $2
	*($13 + [116]) = $3
	
.LABEL $label$6
	CALL memcpy($2, ($13 + [176]), $3)
	
.LABEL $label$5
	*(($2 + $3)) = [0]
	$5 = *($0 + [4])
	$10 = (int_64)0
	$9 = (int_64)59
	$3 = [7616]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)9) ){ goto $label$13 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	$6 = *(($5 + [40]))
	$8 = *(($5 + [44]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$14 }
	$3 = ($8 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_64)*(*($3)) == (int_64)$11) ){ goto $label$14 }
	$8 = $3
	$2 = ($3 + [-24])
	$3 = $2
	if ( ((int_32)($2 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = ($5 + [16])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$20 }
	$3 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$3 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)4982871467403247616, $11)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$18 }
	$3 = CALL $62($2, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [784])
	
.LABEL $label$19
	if ( (*($3 + [8]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL $169($0, ($13 + [112]), ($13 + [125]))
	goto $label$16 
	
.LABEL $label$17
	CALL $170($0, ($13 + [112]), ($13 + [125]))
	
.LABEL $label$16
	$2 = *((*($13 + [126]) + [7653]))
	$3 = *((*($13 + [125]) + [7632]))
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$28 }
	$8 = *((*($13 + [127]) + [7674]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$27 }
	$8 = $3
	$7 = [0]
	$5 = ($3 + [-65])
	if ( ((uint_32)$5 > (uint_32)[24]) ){ goto $label$26 }
	$12 = (int_64)5000000
	goto $label$3 
	
.LABEL $label$29
	$12 = (int_64)2000000
	goto $label$3 
	
.LABEL $label$28
	$7 = ((int_32)$3 == (int_32)[89])
	$8 = *((*($13 + [127]) + [7674]))
	goto $label$26 
	
.LABEL $label$27
	$7 = [0]
	$12 = (int_64)20000
	if ( ((int_32)$3 == (int_32)[89]) ){ goto $label$3 }
	
.LABEL $label$26
	$3 = ((int_32)$2 == (int_32)[89])
	$5 = ($8 & [255])
	$10 = ( ( (int_64)20000 ? (int_64)11000 : ((int_32)$3 == (int_32)$5) ) ? (int_64)11000 : $7 )
	$12 = ( ( (int_64)20000 ? $10 : ((int_32)$2 == (int_32)$5) ) ? $10 : $3 )
	if ( $3 ){ goto $label$3 }
	if ( $7 ){ goto $label$3 }
	$12 = ( (int_64)11000 ? (int_64)0 : ((int_32)($8 & [255]) == (int_32)[89]) )
	goto $label$3 
	
.LABEL $label$25
	$12 = (int_64)1200000
	goto $label$3 
	
.LABEL $label$24
	$12 = (int_64)600000
	goto $label$3 
	
.LABEL $label$23
	$12 = (int_64)400000
	goto $label$3 
	
.LABEL $label$22
	$12 = (int_64)200000
	goto $label$3 
	
.LABEL $label$21
	$12 = (int_64)100000
	goto $label$3 
	
.LABEL $label$4
	CALL $209(($13 + [112]))
	
.LABEL $label$3
	$10 = *($1 + [80])
	CALL __multi3($13, $10, (int_64)$10 >> (int_64)63), $12, (int_64)0)
	$11 = *(($1 + [88]))
	$10 = *(($13 + [8]))
	$9 = *($13)
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$10 < (int_64)0) : (int_64)($10 == 0) ), [7696])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$10 > (int_64)-1) : ((int_64)$10 == (int_64)-1) ), [7728])
	CALL eosio_assert([1], [7760])
	CALL eosio_assert([1], [7776])
	*(($4 + [40])) = $11
	*($4 + [32]) = ((int_64)$9 / (int_64)10000)
	$3 = ($4 + [32])
	$2 = ($4 + [52])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)*(($4 + [56]))) ){ goto $label$31 }
	*($8) = *($3)
	*(($8 + [8])) = *(($3 + [8]))
	*($2) = (*($2) + [16])
	goto $label$30 
	
.LABEL $label$31
	CALL $82(($4 + [48]), $3)
	
.LABEL $label$30
	CALL _ZNSt3__19to_stringEi(($13 + [48]), *($13 + [125]))
	$3 = CALL $215(($13 + [48]), [7504])
	$2 = ($3 + [8])
	*((($13 + [64]) + [8])) = *($2)
	*($13 + [64]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	CALL _ZNSt3__19to_stringEi(($13 + [32]), *((($13 + [125]) + [1])))
	$3 = *($13 + [32])
	$2 = ($3 & [1])
	$3 = CALL $214(($13 + [64]), ( *($13 + [40]) ? (($13 + [32]) | [1]) : $2 ), ( *($13 + [36]) ? uint_32($3 >> [1]) : $2 ))
	$2 = ($3 + [8])
	*((($13 + [144]) + [8])) = *($2)
	*($13 + [144]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	$3 = CALL $215(($13 + [144]), [7504])
	$2 = ($3 + [8])
	*((($13 + [176]) + [8])) = *($2)
	*($13 + [176]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($2) = [0]
	CALL _ZNSt3__19to_stringEi(($13 + [16]), *($13 + [127]))
	$3 = *($13 + [16])
	$2 = ($3 & [1])
	$3 = CALL $214(($13 + [176]), ( *($13 + [24]) ? (($13 + [16]) | [1]) : $2 ), ( *($13 + [20]) ? uint_32($3 >> [1]) : $2 ))
	$2 = *($3)
	*($3) = [0]
	$8 = *($3 + [4])
	*($3 + [4]) = [0]
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	$3 = ($4 + [60])
	if ( (*($4 + [60]) & [1]) ){ goto $label$33 }
	*($3) = [0]
	$5 = ($4 + [68])
	goto $label$32 
	
.LABEL $label$33
	*(*(($5 = ($4 + [68])))) = [0]
	*(($4 + [64])) = [0]
	
.LABEL $label$32
	CALL $212($3, [0])
	*(($4 + [64])) = $8
	*($4 + [60]) = $2
	*($5) = $7
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$34 }
	CALL $207(*(($13 + [24])))
	
.LABEL $label$34
	if ( ((*($13 + [176]) & [1]) == 0) ){ goto $label$35 }
	CALL $207(*($13 + [184]))
	
.LABEL $label$35
	if ( ((*($13 + [144]) & [1]) == 0) ){ goto $label$36 }
	CALL $207(*($13 + [152]))
	
.LABEL $label$36
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$37 }
	CALL $207(*(($13 + [40])))
	
.LABEL $label$37
	if ( ((*($13 + [64]) & [1]) == 0) ){ goto $label$38 }
	CALL $207(*($13 + [72]))
	
.LABEL $label$38
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$39 }
	CALL $207(*($13 + [56]))
	
.LABEL $label$39
	CALL _ZNSt3__19to_stringEy(($13 + [176]), $12)
	$3 = ($4 + [72])
	if ( (*($4 + [72]) & [1]) ){ goto $label$41 }
	*($3) = [0]
	goto $label$40 
	
.LABEL $label$41
	*(*(($4 + [80]))) = [0]
	*(($4 + [76])) = [0]
	
.LABEL $label$40
	CALL $212($3, [0])
	*(($3 + [8])) = *((($13 + [176]) + [8]))
	*($3) = *($13 + [176])
	if ( ((*($13 + [112]) & [1]) == 0) ){ goto $label$42 }
	CALL $207(*($13 + [120]))
	
.LABEL $label$42
	if ( ((*($13 + [128]) & [1]) == 0) ){ goto $label$43 }
	CALL $207(*(($13 + [136])))
	
.LABEL $label$43
	*([0] + [4]) = ($13 + [256])
	$5
	(unreachable)
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $175 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17)
{
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [304])
	*([0] + [4]) = $20
	$0 = *($0 + [4])
	$19 = *($0 + [4])
	$18 = (*(*($0)) + int_32($19 >> [1]))
	$0 = *($0)
	if ( (($19 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($18) + $0))
	
.LABEL $label$1
	CALL $223(($20 + [288]), $4)
	*((($20 + [256]) + [24])) = *(($5 + [24]))
	*((($20 + [256]) + [16])) = *(($5 + [16]))
	*($20 + [264]) = *(($5 + [8]))
	*($20 + [256]) = *($5)
	*((($20 + [240]) + [8])) = *(($6 + [8]))
	*($20 + [240]) = *($6)
	*($20 + [224]) = [0]
	*($20 + [228]) = [0]
	*($20 + [232]) = [0]
	$5 = (*($7 + [4]) - *($7))
	$6 = int_32($5 >> [4])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = CALL $205($5)
	*(($20 + [232])) = ($5 + ($6 << [4]))
	*($20 + [224]) = $5
	*($20 + [228]) = $5
	$6 = *($7)
	$7 = (*(($7 + [4])) - $6)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $6, $7)
	*($20 + [228]) = (*($20 + [228]) + $7)
	
.LABEL $label$4
	CALL $223(($20 + [208]), $11)
	CALL $223(($20 + [192]), $12)
	*((($20 + [160]) + [24])) = *(($13 + [24]))
	*((($20 + [160]) + [16])) = *(($13 + [16]))
	*($20 + [168]) = *(($13 + [8]))
	*($20 + [160]) = *($13)
	CALL $223(($20 + [144]), $14)
	*((($20 + [128]) + [8])) = *(($15 + [8]))
	*($20 + [128]) = *($15)
	*($20 + [116]) = [0]
	*($20 + [112]) = [0]
	*($20 + [120]) = [0]
	$5 = (*($16 + [4]) - *($16))
	$13 = int_32($5 >> [4])
	if ( ($13 == 0) ){ goto $label$5 }
	if ( ((uint_32)$13 >= (uint_32)[268435456]) ){ goto $label$2 }
	$5 = CALL $205($5)
	*(($20 + [120])) = ($5 + ($13 << [4]))
	*($20 + [112]) = $5
	*($20 + [116]) = $5
	$7 = *($16)
	$13 = (*(($16 + [4])) - $7)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $7, $13)
	*($20 + [116]) = (*($20 + [116]) + $13)
	
.LABEL $label$5
	CALL $223(($20 + [96]), $17)
	*((($20 + [64]) + [24])) = *((($20 + [256]) + [24]))
	*((($20 + [64]) + [16])) = *((($20 + [256]) + [16]))
	*($20 + [72]) = *($20 + [264])
	*($20 + [64]) = *($20 + [256])
	*((($20 + [48]) + [8])) = *((($20 + [240]) + [8]))
	*($20 + [48]) = *($20 + [240])
	*((($20 + [16]) + [24])) = *((($20 + [160]) + [24]))
	*((($20 + [16]) + [16])) = *((($20 + [160]) + [16]))
	*($20 + [24]) = *($20 + [168])
	*($20 + [16]) = *($20 + [160])
	*(($20 + [8])) = *((($20 + [128]) + [8]))
	*($20) = *($20 + [128])
	CALL void $18((int_32 $1), (int_64 $2), (int_64 $3), (int_64 ($20 + [288])), (int_32 ($20 + [64])), (int_32 ($20 + [48])), (int_32 ($20 + [224])), (int_32 $8), (int_32 $9), (int_64 $10), (int_32 ($20 + [208])), (int_32 ($20 + [192])), (int_32 ($20 + [16])), (int_32 ($20 + [144])), (int_32 $20), (int_32 ($20 + [112])), (int_32 ($20 + [96])), (int_32 $0))
	if ( ((*($20 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $207(*($20 + [104]))
	
.LABEL $label$6
	$5 = *($20 + [112])
	if ( ($5 == 0) ){ goto $label$7 }
	*($20 + [116]) = $5
	CALL $207($5)
	
.LABEL $label$7
	if ( ((*($20 + [144]) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*($20 + [152]))
	
.LABEL $label$8
	if ( ((*($20 + [192]) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*($20 + [200]))
	
.LABEL $label$9
	if ( ((*($20 + [208]) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*($20 + [216]))
	
.LABEL $label$10
	$5 = *($20 + [224])
	if ( ($5 == 0) ){ goto $label$11 }
	*($20 + [228]) = $5
	CALL $207($5)
	
.LABEL $label$11
	if ( ((*($20 + [288]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*($20 + [296]))
	
.LABEL $label$12
	*([0] + [4]) = ($20 + [304])
	return (unreachable)
	
.LABEL $label$3
	CALL $222(($20 + [224]))
	
.LABEL $label$2
	CALL $222(($20 + [112]))
	(unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [20780]
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [18880])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [18976]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [18976]
	return .LABEL $label$1
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $205(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $207(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $207($5)
	
.LABEL $label$14
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $205(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $207($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	*(($4 = $2) + [92]) = $0
	*($4 + [80]) = *($1)
	*($4 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [24])) = (int_64)0
	*(($4 + [32])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [40]) = [0]
	*(($4 + [44])) = [0]
	*(($4 + [48])) = [0]
	*($4 + [52]) = [0]
	*(($4 + [56])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [64]) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [72])) = [0]
	*($4 + [100]) = $1
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + $0)
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = $4
	CALL $52(($4 + [120]), ($4 + [112]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [100]) = ($4 + [80])
	*($4 + [96]) = ($4 + [92])
	CALL $53(($4 + [96]), $4)
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $207(*(($4 + [72])))
	
.LABEL $label$5
	$2 = *($4 + [52])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($4 + [56])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$9:
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$9 }
	$1 = *(($4 + [52]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $2
	
.LABEL $label$7
	*($3) = $2
	CALL $207($1)
	
.LABEL $label$6
	$1 = *(($4 + [40]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($4 + [44])) = $1
	CALL $207($1)
	
.LABEL $label$11
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($4 + [36])))
	
.LABEL $label$12
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $207(*(($4 + [24])))
	
.LABEL $label$13
	*([0] + [4]) = ($4 + [128])
	return [1]
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = [656]
	$1 = *(($0 + [120]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [124])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $207($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $207($4)
	
.LABEL $label$1
	$1 = *(($0 + [80]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [84])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $207($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $207($4)
	
.LABEL $label$6
	$1 = *(($0 + [40]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [44])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $207($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $207($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $55(*($1), ($3 + [16]))
	CALL $55(*($1), ($3 + [28]))
	CALL $56(*($1), ($3 + [40]))
	CALL $57(*($1), ($3 + [52]))
	CALL $55(*($1), ($3 + [64]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $223(($7 + [64]), ($1 + [16]))
	CALL $223(($7 + [48]), ($1 + [28]))
	*($7 + [40]) = [0]
	*($7 + [32]) = (int_64)0
	$6 = (*(($1 + [44])) - *($1 + [40]))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$6 = CALL $205($6)
	*(($7 + [40])) = ($6 + ($5 << [2]))
	*($7 + [32]) = $6
	*($7 + [36]) = $6
	$4 = *(($1 + [40]))
	$5 = (*(($1 + [44])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $4, $5)
	*($7 + [36]) = (*($7 + [36]) + $5)
	
.LABEL $label$3
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = (*(($1 + [56])) - *($1 + [52]))
	$4 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL $205($6)
	*(($7 + [24])) = ($5 + ((int_32)$4 * (int_32)[12]))
	*($7 + [16]) = $5
	*($7 + [20]) = $5
	$4 = *(($1 + [56]))
	$6 = *(($1 + [52]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $223($5, $6)
	$5 = (*($7 + [20]) + [12])
	*($7 + [20]) = $5
	$6 = ($6 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $223($7, ($1 + [64]))
	CALL $54($0, $2, $3, ($7 + [64]), ($7 + [48]), ($7 + [32]), ($7 + [16]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL $207(*($7 + [8]))
	
.LABEL $label$6
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = *($7 + [20])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	$5 = ([0] - $4)
	$6 = ($6 + [-12])
	
.LOOP $label$10:
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL $207(*(($6 + [8])))
	
.LABEL $label$11
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$10 }
	$6 = *($7 + [16])
	goto $label$8 
	
.LABEL $label$9
	$6 = $4
	
.LABEL $label$8
	*($7 + [20]) = $4
	CALL $207($6)
	
.LABEL $label$7
	$6 = *($7 + [32])
	if ( ($6 == 0) ){ goto $label$12 }
	*($7 + [36]) = $6
	CALL $207($6)
	
.LABEL $label$12
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $207(*($7 + [56]))
	
.LABEL $label$13
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL $207(*($7 + [72]))
	
.LABEL $label$14
	*([0] + [4]) = ($7 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $222(($7 + [32]))
	
.LABEL $label$1
	CALL $222(($7 + [16]))
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$8 = (*(*($0)) + int_32($10 >> [1]))
	$9 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	CALL $223(($11 + [64]), $3)
	CALL $223(($11 + [48]), $4)
	*($11 + [40]) = [0]
	*($11 + [32]) = (int_64)0
	$0 = (*($5 + [4]) - *($5))
	$3 = int_32($0 >> [2])
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$0 = CALL $205($0)
	*(($11 + [40])) = ($0 + ($3 << [2]))
	*($11 + [32]) = $0
	*($11 + [36]) = $0
	$3 = *($5)
	$5 = (*(($5 + [4])) - $3)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($0, $3, $5)
	*($11 + [36]) = (*($11 + [36]) + $5)
	
.LABEL $label$4
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$5 = (*($6 + [4]) - *($6))
	$3 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL $205($5)
	*(($11 + [24])) = ($0 + ((int_32)$3 * (int_32)[12]))
	*($11 + [16]) = $0
	*($11 + [20]) = $0
	$6 = *(($6 + [4]))
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $223($0, $5)
	$0 = (*($11 + [20]) + [12])
	*($11 + [20]) = $0
	$5 = ($5 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $223($11, $7)
	CALL void $8((int_32 $1), (int_64 $2), (int_64 ($11 + [64])), (int_32 ($11 + [48])), (int_32 ($11 + [32])), (int_32 ($11 + [16])), (int_32 $11), (int_32 $9))
	if ( ((*($11) & [1]) == 0) ){ goto $label$7 }
	CALL $207(*($11 + [8]))
	
.LABEL $label$7
	$6 = *($11 + [16])
	if ( ($6 == 0) ){ goto $label$8 }
	$5 = *($11 + [20])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	$0 = ([0] - $6)
	$5 = ($5 + [-12])
	
.LOOP $label$11:
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($5 + [8])))
	
.LABEL $label$12
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $0) != (int_32)[-12]) ){ goto $label$11 }
	$5 = *($11 + [16])
	goto $label$9 
	
.LABEL $label$10
	$5 = $6
	
.LABEL $label$9
	*($11 + [20]) = $6
	CALL $207($5)
	
.LABEL $label$8
	$5 = *($11 + [32])
	if ( ($5 == 0) ){ goto $label$13 }
	*($11 + [36]) = $5
	CALL $207($5)
	
.LABEL $label$13
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL $207(*($11 + [56]))
	
.LABEL $label$14
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $207(*($11 + [72]))
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $222(($11 + [32]))
	
.LABEL $label$2
	CALL $222(($11 + [16]))
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $60($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $212($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $205($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $212($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $207($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $209($7)
	return (unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [736])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $59($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [720])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [736])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $58($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $207(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $55($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$4 = [0]
	*(($0 + [32])) = [0]
	*($0 + [48]) = (int_64)0
	*(($0 + [72])) = [0]
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [76])) = [0]
	*($0 + [80]) = (int_64)0
	*(($5 = ($0 + [88]))) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1376])
	*($0 + [96]) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*($0 + [112]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*($0 + [136]) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*(($0 + [184])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*($0 + [160]) = (int_64)0
	*($0 + [192]) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*($0 + [208]) = (int_64)0
	*(($4 = ($0 + [216]))) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [1376])
	*($0 + [224]) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $176(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [1216])
	CALL memcpy(*($3 + [4]), ($2 + [160]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$0 = *($0)
	CALL $72(*($1), ($0 + [192]))
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [208]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($3 + [4]), ($0 + [216]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $74(*($1), ($0 + [224]))
	CALL $72(*($1), ($0 + [236]))
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [4])
	$0 = *($2 + [124])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [128])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$4 = *(($2 + [124]))
	$4 = ( *(($2 + [128])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($3) = ($4 + $0)
	
.LABEL $label$2
	$0 = *($2 + [136])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [140])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $0
	$4 = *(($2 + [136]))
	$4 = ( *(($2 + [140])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	*($3) = ($4 + $0)
	
.LABEL $label$4
	*($6 + [8]) = $2
	CALL $154(($6 + [8]), $1)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1216])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [1216])
	CALL memcpy(*($3 + [4]), ($2 + [48]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($3 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($3 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $74(*($1), ($3 + [96]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($3 + [108]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($3 + [112]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($3 + [120]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $72(*($1), ($3 + [124]))
	CALL $72(*($1), ($3 + [136]))
	*($4 + [8]) = $3
	CALL $152(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $156 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*(($4 = CALL $205([24])) + [8]) = $1
	*($4) = *(*($3) + [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $157(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $207($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($2 = *($1))) = (*($2) + [32])
	$0 = *($2 + [192])
	$2 = *($0)
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [196])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$5 = *(($2 + [192]))
	$5 = ( *(($2 + [196])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	*($3) = ($5 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [16])
	$5 = *($2 + [224])
	$3 = *(($2 + [228]))
	$6 = ($3 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$4 = *($1)
	$0 = *($4)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$0 = (($6 & [-16]) + $0)
	
.LABEL $label$4
	*($4) = $0
	$0 = *($2 + [236])
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [240])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$1 = *($1)
	$0 = *($1)
	
.LOOP $label$5:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	*($1) = $0
	$2 = *(($2 + [236]))
	$2 = ( *(($2 + [240])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($1) = ($2 + $0)
	
.LABEL $label$6
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1904])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $205([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [720])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $157(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [96])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [100])) = $6
	CALL $207($6)
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $207(*(($1 + [32])))
	
.LABEL $label$12
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $207($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $55(*($1), ($0 + [32]))
}

int_32 .FUNC $224 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $205($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = [0]
	*(($4 = CALL $205([144])) + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$2 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1376])
	*($4 + [104]) = [0]
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [124]) = $1
	CALL $188(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [128])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $158(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$4 = *($3 + [96])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($3 + [100])) = $4
	CALL $207($4)
	
.LABEL $label$9
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($3 + [32])))
	
.LABEL $label$10
	CALL $207($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$2 = *($0)
	$4 = ($1 + [100])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$1 }
	CALL $76($4, *($2), *($2 + [4]))
	
.LABEL $label$1
	$2 = *($0 + [4])
	$4 = ($1 + [112])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	CALL $77($4, *($2), *($2 + [4]))
	
.LABEL $label$2
	CALL $210(($1 + [124]), *($0 + [8]))
	CALL $78($6, *($0 + [12]), [1024])
	$2 = *($0)
	$4 = ($2 & [1])
	$0 = *($0 + [16])
	$0 = CALL $214($6, ( *($0 + [8]) ? ($0 + [1]) : $4 ), ( *($0 + [4]) ? uint_32($2 >> [1]) : $4 ))
	$2 = *($0)
	*($0) = [0]
	$4 = *($0 + [4])
	*($0 + [4]) = [0]
	$3 = *($0 + [8])
	*($0 + [8]) = [0]
	$0 = ($1 + [144])
	if ( (*($1 + [144]) & [1]) ){ goto $label$4 }
	*($0) = [0]
	$5 = ($1 + [152])
	goto $label$3 
	
.LABEL $label$4
	*(*(($5 = ($1 + [152])))) = [0]
	*(($1 + [148])) = [0]
	
.LABEL $label$3
	CALL $212($0, [0])
	*(($1 + [148])) = $4
	*($1 + [144]) = $2
	*($5) = $3
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	CALL $207(*($6 + [8]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $207($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [17000]), [17008], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [400])
	*([0] + [4]) = $25
	*($4 + [4]) = *($4)
	*($25 + [128]) = [108]
	$19 = *($5)
	$18 = *($5 + [4])
	if ( ((int_32)$18 == (int_32)$19) ){ goto $label$1 }
	$20 = ([0] - $19)
	$18 = ($18 + [-12])
	
.LOOP $label$2:
	if ( ((*($18) & [1]) == 0) ){ goto $label$3 }
	CALL $207(*(($18 + [8])))
	
.LABEL $label$3
	$18 = ($18 + [-12])
	if ( ((int_32)($18 + $20) != (int_32)[-12]) ){ goto $label$2 }
	
.LABEL $label$1
	*(($5 + [4])) = $19
	$8 = (($25 + [112]) | [1])
	$7 = (($25 + [144]) | [1])
	$20 = ($25 + [139])
	$19 = ($25 + [134])
	$13 = (($25 + [144]) + [8])
	$18 = [2]
	$23 = [0]
	$24 = [0]
	
.LOOP $label$4:
	CALL $224(($25 + [144]), $2, ($18 + [-2]), [2], ($25 + [112]))
	$21 = [-48]
	$9 = ( *($13) ? $7 : (*($25 + [144]) & [1]) )
	$22 = *($9)
	if ( ((($22 + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	$21 = [-55]
	if ( ((uint_32)(($22 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$6 }
	
.LABEL $label$7
	$22 = ($21 + $22)
	goto $label$5 
	
.LABEL $label$6
	$22 = ( ($22 + [-87]) ? [0] : ((($22 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$5
	$10 = ($22 << [4])
	$21 = [-48]
	$22 = *($9 + [1])
	if ( ((($22 + [-48]) & [255]) <= [10]) ){ goto $label$10 }
	$21 = [-55]
	if ( ((uint_32)(($22 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	$22 = ($21 + $22)
	goto $label$8 
	
.LABEL $label$9
	$22 = ( ($22 + [-87]) ? [0] : ((($22 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$8
	$21 = ($22 | $10)
	*($20) = $21
	$22 = ($22 & [15])
	$9 = ($23 & [15])
	if ( ((uint_32)$9 > (uint_32)$22) ){ goto $label$11 }
	$10 = ($23 & [255])
	if ( ((int_32)$9 != (int_32)$22) ){ goto $label$13 }
	if ( ((uint_32)($10 & [240]) > (uint_32)($21 & [240])) ){ goto $label$11 }
	if ( ((int_32)$10 != (int_32)($21 & [255])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((int_32)$10 == (int_32)($21 & [255])) ){ goto $label$11 }
	
.LABEL $label$12
	$23 = $21
	
.LABEL $label$11
	CALL $224(($25 + [112]), $2, $18, [2], ($25 + [96]))
	$21 = [-48]
	$9 = (*($25 + [112]) & [1])
	$11 = *((($25 + [112]) + [8]))
	$10 = ( $11 ? $8 : $9 )
	$22 = *($10)
	if ( ((($22 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$21 = [-55]
	if ( ((uint_32)(($22 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$15 }
	
.LABEL $label$16
	$22 = ($21 + $22)
	goto $label$14 
	
.LABEL $label$15
	$22 = ( ($22 + [-87]) ? [0] : ((($22 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$14
	$12 = ($22 << [4])
	$21 = [-48]
	$22 = *($10 + [1])
	if ( ((($22 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$21 = [-55]
	if ( ((uint_32)(($22 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	$22 = ($21 + $22)
	goto $label$17 
	
.LABEL $label$18
	$22 = ( ($22 + [-87]) ? [0] : ((($22 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$17
	$21 = ($22 | $12)
	*($19) = $21
	$22 = ($22 & [15])
	$10 = ($24 & [15])
	if ( ((uint_32)$10 > (uint_32)$22) ){ goto $label$20 }
	$12 = ($24 & [255])
	if ( ((int_32)$10 != (int_32)$22) ){ goto $label$22 }
	if ( ((uint_32)($12 & [240]) > (uint_32)($21 & [240])) ){ goto $label$20 }
	if ( ((int_32)$12 != (int_32)($21 & [255])) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$12 == (int_32)($21 & [255])) ){ goto $label$20 }
	
.LABEL $label$21
	$24 = $21
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$23 }
	CALL $207($11)
	
.LABEL $label$23
	if ( ((*($25 + [144]) & [1]) == 0) ){ goto $label$24 }
	CALL $207(*($13))
	
.LABEL $label$24
	$19 = ($19 + [1])
	$20 = ($20 + [1])
	$18 = ($18 + [4])
	if ( ((int_32)$18 != (int_32)[22]) ){ goto $label$4 }
	$21 = *($0 + [4])
	$15 = (int_64)0
	$14 = (int_64)59
	$18 = [1232]
	$16 = (int_64)0
	
.LOOP $label$25:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$26 }
	$20 = *($18)
	if ( ((uint_32)(($20 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$20 = ($20 + [165])
	goto $label$27 
	
.LABEL $label$28
	$20 = ( ($20 + [208]) ? [0] : ((($20 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($20 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$26
	$18 = ($18 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$25 }
	$9 = *(($21 + [40]))
	$19 = *(($21 + [44]))
	if ( ((int_32)$19 == (int_32)$9) ){ goto $label$29 }
	$18 = ($19 + [-24])
	$22 = ([0] - $9)
	
.LOOP $label$30:
	if ( ((int_64)*(*($18)) == (int_64)$16) ){ goto $label$29 }
	$19 = $18
	$20 = ($18 + [-24])
	$18 = $20
	if ( ((int_32)($20 + $22) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	$20 = ($21 + [16])
	if ( ((int_32)$19 == (int_32)$9) ){ goto $label$34 }
	$18 = *(($19 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [24]) == (int_32)$20), [784])
	if ( $18 ){ goto $label$33 }
	$15 = (int_64)30
	goto $label$31 
	
.LABEL $label$34
	$18 = CALL db_find_i64(*(($21 + [16])), *(($21 + [24])), (int_64)4982871467403247616, $16)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$32 }
	$18 = CALL $62($20, $18)
	CALL eosio_assert(((int_32)*($18 + [24]) == (int_32)$20), [784])
	
.LABEL $label$33
	$15 = *($18 + [8])
	goto $label$31 
	
.LABEL $label$32
	$15 = (int_64)30
	
.LABEL $label$31
	$18 = (CASTING uint_32)(uint_64 $15)
	*($25 + [120]) = ([4000] - $18)
	*($25 + [116]) = ([5000] - ($18 << [1]))
	*($25 + [112]) = (((int_32)$18 * (int_32)[-3]) + [6000])
	$22 = CALL _ZN12CNiuNiuLogic11GetCardTypeEPKhhPh(($25 + [128]), ($25 + [134]), [5], [0])
	$18 = CALL _ZN12CNiuNiuLogic11GetCardTypeEPKhhPh(($25 + [128]), ($25 + [139]), [5], [0])
	if ( ((uint_32)$18 > (uint_32)$22) ){ goto $label$37 }
	$20 = ((int_32)$18 != (int_32)$22)
	if ( $20 ){ goto $label$36 }
	$21 = ($24 & [15])
	$19 = ($23 & [15])
	if ( ((uint_32)$19 > (uint_32)$21) ){ goto $label$37 }
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$36 }
	if ( ((uint_32)(($23 & [255]) & [240]) <= (uint_32)(($24 & [255]) & [240])) ){ goto $label$36 }
	
.LABEL $label$37
	$21 = ((uint_32)$18 > (uint_32)[10])
	$19 = ((uint_32)$18 > (uint_32)[7])
	$20 = ( [0] ? ( [1000] ? [2000] : $19 ) : $21 )
	$19 = *((($25 + [112]) + (( [0] ? ( [1] ? [2] : $19 ) : $21 ) << [2])))
	goto $label$35 
	
.LABEL $label$36
	if ( ($18 <= $22) ){ goto $label$38 }
	if ( $20 ){ goto $label$39 }
	$19 = ($24 & [15])
	$20 = ($23 & [15])
	if ( ((uint_32)$20 > (uint_32)$19) ){ goto $label$39 }
	if ( ((int_32)$20 != (int_32)$19) ){ goto $label$40 }
	if ( ((int_32)($23 & [255]) == (int_32)($24 & [255])) ){ goto $label$39 }
	if ( ((uint_32)(($23 & [255]) & [240]) <= (uint_32)(($24 & [255]) & [240])) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$40
	if ( ((int_32)($23 & [255]) != (int_32)($24 & [255])) ){ goto $label$38 }
	
.LABEL $label$39
	$19 = [0]
	*($25 + [76]) = [0]
	*($25 + [72]) = [0]
	*($25 + [68]) = $22
	*($25 + [64]) = $18
	CALL sprintf(($25 + [144]), [1248], ($25 + [64]))
	CALL eosio_assert([0], ($25 + [144]))
	$20 = [0]
	goto $label$35 
	
.LABEL $label$38
	$21 = ((uint_32)$22 > (uint_32)[10])
	$20 = ((uint_32)$22 > (uint_32)[7])
	$19 = ( [0] ? ( [1000] ? [2000] : $20 ) : $21 )
	$20 = *((($25 + [112]) + (( [0] ? ( [1] ? [2] : $20 ) : $21 ) << [2])))
	
.LABEL $label$35
	*($25 + [96]) = $19
	$9 = *($4 + [8])
	$10 = ($4 + [4])
	$21 = *($10)
	if ( ((uint_32)$21 >= (uint_32)$9) ){ goto $label$42 }
	*($21) = $19
	$21 = ($21 + [4])
	*($10) = $21
	goto $label$41 
	
.LABEL $label$42
	CALL $79($4, ($25 + [96]))
	$9 = *(($4 + [8]))
	$21 = *($10)
	
.LABEL $label$41
	*($25 + [96]) = $20
	if ( ((uint_32)$21 >= (uint_32)$9) ){ goto $label$44 }
	*($21) = $20
	*(($4 + [4])) = ($21 + [4])
	goto $label$43 
	
.LABEL $label$44
	CALL $79($4, ($25 + [96]))
	
.LABEL $label$43
	*(($25 + [52])) = ($23 & [255])
	*(($25 + [48])) = *($25 + [143])
	*(($25 + [60])) = ( [1280] ? [1296] : ((int_32)$19 > (int_32)$20) )
	*(($25 + [56])) = (( $23 ? ($18 | [224]) : ($18 <= [2]) ) & [255])
	*($25 + [44]) = *($25 + [142])
	*($25 + [40]) = *($25 + [141])
	*($25 + [36]) = *($25 + [140])
	*($25 + [32]) = *($25 + [139])
	CALL snprintf(($25 + [144]), [255], [1312], ($25 + [32]))
	*(($25 + [104])) = [0]
	*($25 + [96]) = (int_64)0
	$18 = CALL strlen(($25 + [144]))
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$46 }
	$21 = ($22 <= [2])
	$9 = ($22 | [224])
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$49 }
	*($25 + [96]) = ($18 << [1])
	$22 = (($25 + [96]) | [1])
	if ( $18 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$10 = (($18 + [16]) & [-16])
	$22 = CALL $205($10)
	*($25 + [96]) = ($10 | [1])
	*($25 + [104]) = $22
	*($25 + [100]) = $18
	
.LABEL $label$48
	CALL memcpy($22, ($25 + [144]), $18)
	
.LABEL $label$47
	$21 = ( $24 ? $9 : $21 )
	*(($22 + $18)) = [0]
	$18 = ($5 + [4])
	$22 = *($18)
	if ( ((uint_32)$22 >= (uint_32)*($5 + [8])) ){ goto $label$51 }
	*($22) = *($25 + [96])
	$22 = (($25 + [96]) + [8])
	*(($22 + [8])) = *($22)
	*($22) = [0]
	*($25 + [96]) = [0]
	*($25 + [100]) = [0]
	*($18) = (*($18) + [12])
	goto $label$50 
	
.LABEL $label$51
	CALL $68($5, ($25 + [96]))
	if ( ((*($25 + [96]) & [1]) == 0) ){ goto $label$50 }
	CALL $207(*($25 + [104]))
	
.LABEL $label$50
	*(($25 + [24])) = ($21 & [255])
	*(($25 + [20])) = ($24 & [255])
	*(($25 + [16])) = *($25 + [138])
	*(($25 + [28])) = ( [1280] ? [1296] : ((int_32)$19 < (int_32)$20) )
	*($25 + [12]) = *($25 + [137])
	*($25 + [8]) = *($25 + [136])
	*($25 + [4]) = *($25 + [135])
	*($25) = *($25 + [134])
	CALL snprintf(($25 + [144]), [255], [1312], $25)
	*(($25 + [104])) = [0]
	*($25 + [96]) = (int_64)0
	$18 = CALL strlen(($25 + [144]))
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$54 }
	*($25 + [96]) = ($18 << [1])
	$20 = (($25 + [96]) | [1])
	if ( $18 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$19 = (($18 + [16]) & [-16])
	$20 = CALL $205($19)
	*($25 + [96]) = ($19 | [1])
	*($25 + [104]) = $20
	*($25 + [100]) = $18
	
.LABEL $label$53
	CALL memcpy($20, ($25 + [144]), $18)
	
.LABEL $label$52
	*(($20 + $18)) = [0]
	$18 = ($5 + [4])
	$20 = *($18)
	if ( ((uint_32)$20 >= (uint_32)*(($5 + [8]))) ){ goto $label$56 }
	*($20) = *($25 + [96])
	$20 = (($25 + [96]) + [8])
	*(($20 + [8])) = *($20)
	*($20) = [0]
	*($25 + [96]) = [0]
	*($25 + [100]) = [0]
	*($18) = (*($18) + [12])
	goto $label$55 
	
.LABEL $label$56
	CALL $68($5, ($25 + [96]))
	if ( ((*($25 + [96]) & [1]) == 0) ){ goto $label$55 }
	CALL $207(*($25 + [104]))
	
.LABEL $label$55
	$18 = *($2)
	CALL $224(($25 + [96]), $2, [20], (( *($2 + [4]) ? uint_32($18 >> [1]) : ($18 & [1]) ) + [-20]), ($25 + [88]))
	$18 = *($3)
	$20 = ($18 & [1])
	$18 = CALL $214(($25 + [96]), ( *($3 + [8]) ? ($3 + [1]) : $20 ), ( *($3 + [4]) ? uint_32($18 >> [1]) : $20 ))
	$20 = *($18)
	*($18) = [0]
	$19 = *($18 + [4])
	*($18 + [4]) = [0]
	$22 = *($18 + [8])
	*($18 + [8]) = [0]
	if ( (*($6) & [1]) ){ goto $label$58 }
	*($6) = [0]
	$18 = ($6 + [8])
	goto $label$57 
	
.LABEL $label$58
	*(*($6 + [8])) = [0]
	*($6 + [4]) = [0]
	$18 = ($6 + [8])
	
.LABEL $label$57
	CALL $212($6, [0])
	*(($6 + [4])) = $19
	*($6) = $20
	*($18) = $22
	if ( ((*($25 + [96]) & [1]) == 0) ){ goto $label$59 }
	CALL $207(*($25 + [104]))
	
.LABEL $label$59
	*([0] + [4]) = ($25 + [400])
	return (unreachable)
	
.LABEL $label$46
	CALL $209(($25 + [96]))
	
.LABEL $label$45
	CALL $209(($25 + [96]))
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $205([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1844]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $224($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $212($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( ((*($0 + [144]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*(($0 + [152])))
	
.LABEL $label$1
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$2 }
	CALL $207(*(($0 + [132])))
	
.LABEL $label$2
	$1 = *($0 + [112])
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$6:
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL $207(*(($4 + [8])))
	
.LABEL $label$7
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$6 }
	$4 = *(($0 + [112]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($3) = $1
	CALL $207($4)
	
.LABEL $label$3
	$4 = *($0 + [100])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [104])) = $4
	CALL $207($4)
	
.LABEL $label$8
	$4 = *($0 + [88])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($0 + [92])) = $4
	CALL $207($4)
	
.LABEL $label$9
	$4 = *($0 + [76])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($0 + [80])) = $4
	CALL $207($4)
	
.LABEL $label$10
	$1 = *($0 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [68])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$14:
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	CALL $207(*(($4 + [8])))
	
.LABEL $label$15
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$14 }
	$4 = *(($0 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $207($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1088])
	$4 = *($1)
	CALL $69($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1152])
	*(($3 = $6)) = [0]
	CALL $70($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $71($3, $1)
	CALL db_update_i64(*($1 + [160]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $205($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $207($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [736])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $61($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [720])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($1 + [24])
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$5 = ([0] - $4)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [156]) == (int_32)$1), [784])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7850577621849997312, $2)
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), $3)
	$7 = CALL $86($1, $7)
	CALL eosio_assert(((int_32)*($7 + [156]) == (int_32)$1), [784])
	
.LABEL $label$3
	*($0 + [4]) = $7
	*($0) = $1
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1904])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $205([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [720])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [720])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [720])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $1 (int_32 $0, int_32 $1)
{
	return ($1 & [240])
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [17044]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [17044]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([17048])
	return [17056]
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [736])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $92($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [720])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $67($1)
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $55($0, ($1 + [144]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [720])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $55(CALL $57(CALL $56(CALL $90(CALL $89(CALL $57($0, ($1 + [64])), ($1 + [76])), ($1 + [88])), ($1 + [100])), ($1 + [112])), ($1 + [124]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $205([176])) + [64 align=4]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80 align=4]) = (int_64)0
	*($6 + [88 align=4]) = (int_64)0
	*($6 + [96 align=4]) = (int_64)0
	*($6 + [104]) = [0]
	*($6 + [108]) = [0]
	*($6 + [112]) = [0]
	*($6 + [116]) = [0]
	*($6 + [120]) = [0]
	*($6 + [124]) = [0]
	*($6 + [128]) = [0]
	*($6 + [132]) = [0]
	*($6 + [144]) = [0]
	*($6 + [148]) = [0]
	*($6 + [152]) = [0]
	*($6 + [156]) = $0
	CALL $87(($8 + [32]), $6)
	*($6 + [160]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [160])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $88(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $67($4)
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $205(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $207($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	if ( *(*($0)) ){ goto $label$1 }
	$5 = *($0 + [4])
	$2 = ($1 + [80])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [84]))) ){ goto $label$2 }
	*($2) = ($6 + [8])
	*($6) = *($5)
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [76]), $5)
	
.LABEL $label$1
	$5 = *($0 + [8])
	if ( ((int_32)*($5 + [4]) == (int_32)*($5)) ){ goto $label$3 }
	$6 = [0]
	$3 = ($1 + [88])
	$1 = [8]
	
.LOOP $label$4:
	$5 = (*($3) + $1)
	$2 = (*($5) + $1)
	CALL eosio_assert(((int_64)*($2) == (int_64)*($5)), [1456])
	$4 = ((int_64)*($5) + (int_64)*(($2 + [-8])))
	*(($5 = ($5 + [-8]))) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1504])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [1536])
	$1 = ($1 + [16])
	$5 = *(($0 + [8]))
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*($5 + [4]) - *($5)) >> [4])) ){ goto $label$4 }
	
.LABEL $label$3
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1088])
	$4 = *($1)
	CALL $84($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1152])
	*(($3 = $6)) = [0]
	CALL $70($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $71($3, $1)
	CALL db_update_i64(*($1 + [160]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $205(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $207($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [96])
	*([0] + [4]) = $15
	if ( (*($1 + [24]) & [1]) ){ goto $label$2 }
	$14 = (($1 + [24]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$14 = *(($1 + [32]))
	
.LABEL $label$1
	$13 = CALL atoll($14)
	*($15 + [72]) = (int_64)-1
	*($15 + [64]) = *($1 + [16])
	*($15 + [56]) = *(*($0 + [4]) + [8])
	*($15 + [80]) = [0]
	*(($15 + [84])) = [0]
	*(($15 + [88])) = [0]
	CALL $63(($15 + [48]), ($15 + [56]), $13, [864])
	$0 = *($15 + [52])
	CALL eosio_assert(((int_32)int_32((*(($0 + [104])) - *($0 + [100])) >> [2]) == (int_32)int_32((*(($1 + [100])) - *($1 + [96])) >> [4])), [1360])
	CALL eosio_assert([1], [1568])
	$13 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$14 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	
.LABEL $label$3
	CALL eosio_assert($14, [1376])
	*(($6 = ($4 + [40]))) = (int_64)1397703940
	*($4 + [32]) = (int_64)0
	$7 = ($1 + [96])
	$8 = ($1 + [100])
	if ( ((int_32)*($8) == (int_32)*($7)) ){ goto $label$8 }
	$5 = ($4 + [48])
	$14 = [0]
	$9 = (($15 + [32]) + [8])
	$10 = ($4 + [32])
	$11 = ($4 + [56])
	$12 = ($4 + [52])
	
.LOOP $label$9:
	*($9) = (int_64)1397703940
	*($15 + [32]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$13 = (uint_64)*($9) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$11:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$1 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($1, [1376])
	*($15 + [32]) = ((int_64)((int_64)*((*(*($15 + [52]) + [100]) + ($14 << [2]))) * (int_64)*((*($7) + ($14 << [4])))) / (int_64)3000)
	CALL eosio_assert(((int_64)*($9) == (int_64)*($6)), [1456])
	$13 = ((int_64)*($10) + (int_64)*($15 + [32]))
	*($10) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1504])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [1536])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)*($11)) ){ goto $label$15 }
	*($0) = *($15 + [32])
	*(($0 + [8])) = *($9)
	*($12) = (*($12) + [16])
	goto $label$14 
	
.LABEL $label$15
	CALL $82($5, ($15 + [32]))
	
.LABEL $label$14
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($8) - *($7)) >> [4])) ){ goto $label$9 }
	
.LABEL $label$8
	$0 = *($15 + [52])
	*($4) = *($0 + [32])
	*(($4 + [28])) = *(($0 + [60]))
	*(($4 + [24])) = *(($0 + [56]))
	*(($4 + [20])) = *(($0 + [52]))
	*(($4 + [16])) = *(($0 + [48]))
	*(($4 + [12])) = *(($0 + [44]))
	*(($4 + [8])) = *(($0 + [40]))
	*(($4 + [4])) = *(($0 + [36]))
	CALL $78($15, *($0 + [112]), [1408])
	$1 = *($0 + [12])
	$14 = ($1 & [1])
	$0 = *(*($15 + [52]) + [112])
	$0 = CALL $214($15, ( *(($0 + [20])) ? ($0 + [13]) : $14 ), ( *(($0 + [16])) ? uint_32($1 >> [1]) : $14 ))
	$1 = ($0 + [8])
	*((($15 + [16]) + [8])) = *($1)
	*($15 + [16]) = *($0)
	*($0) = [0]
	*(($0 + [4])) = [0]
	*($1) = [0]
	$0 = CALL $215(($15 + [16]), [1424])
	$1 = ($0 + [8])
	*((($15 + [32]) + [8])) = *($1)
	*($15 + [32]) = *($0)
	*($0) = [0]
	*(($0 + [4])) = [0]
	*($1) = [0]
	$1 = *($0 + [124])
	$14 = ($1 & [1])
	$0 = *($15 + [52])
	$0 = CALL $214(($15 + [32]), ( *(($0 + [132])) ? ($0 + [125]) : $14 ), ( *(($0 + [128])) ? uint_32($1 >> [1]) : $14 ))
	$1 = *($0)
	*($0) = [0]
	$14 = *($0 + [4])
	*($0 + [4]) = [0]
	$9 = *($0 + [8])
	*($0 + [8]) = [0]
	$0 = ($4 + [60])
	if ( (*($4 + [60]) & [1]) ){ goto $label$17 }
	*($0) = [0]
	$10 = ($4 + [68])
	goto $label$16 
	
.LABEL $label$17
	*(*(($10 = ($4 + [68])))) = [0]
	*(($4 + [64])) = [0]
	
.LABEL $label$16
	CALL $212($0, [0])
	*(($4 + [64])) = $14
	*($4 + [60]) = $1
	*($10) = $9
	if ( ((*($15 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL $207(*($15 + [40]))
	
.LABEL $label$18
	if ( ((*($15 + [16]) & [1]) == 0) ){ goto $label$19 }
	CALL $207(*($15 + [24]))
	
.LABEL $label$19
	if ( ((*($15) & [1]) == 0) ){ goto $label$20 }
	CALL $207(*($15 + [8]))
	
.LABEL $label$20
	CALL $213(($4 + [72]), [1440])
	$14 = *($15 + [80])
	if ( ($14 == 0) ){ goto $label$21 }
	$9 = ($15 + [84])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$14) ){ goto $label$23 }
	
.LOOP $label$24:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$25 }
	CALL $67($1)
	CALL $207($1)
	
.LABEL $label$25
	if ( ((int_32)$14 != (int_32)$0) ){ goto $label$24 }
	$0 = *(($15 + [80]))
	goto $label$22 
	
.LABEL $label$23
	$0 = $14
	
.LABEL $label$22
	*($9) = $14
	CALL $207($0)
	
.LABEL $label$21
	*([0] + [4]) = ($15 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [368])
	*([0] + [4]) = $17
	*($17 + [367]) = $2
	CALL eosio_assert(((int_64)*(($1 + [88])) == (int_64)1397703940), [1744])
	CALL eosio_assert((*($1 + [120]) == 0), [1760])
	CALL eosio_assert((int_64)(((int_64)*($1 + [80]) % (int_64)3) == 0), [1776])
	CALL eosio_assert(((int_32)(*(($1 + [100])) - *($1 + [96])) == (int_32)[32]), [1824])
	$4 = ($1 + [24])
	if ( (*($1 + [24]) & [1]) ){ goto $label$2 }
	$2 = ($4 + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(($1 + [32]))
	
.LABEL $label$1
	$5 = CALL atoll($2)
	*($17 + [336]) = (int_64)-1
	*($17 + [328]) = *($1 + [16])
	*($17 + [320]) = *(*($0 + [4]) + [8])
	*($17 + [344]) = [0]
	*(($17 + [348])) = [0]
	*(($17 + [352])) = [0]
	CALL $63(($17 + [312]), ($17 + [320]), $5, [864])
	$14 = CALL current_time()
	$2 = *($17 + [316])
	CALL eosio_assert(((int_32)*(($2 + [104])) == (int_32)*($2 + [100])), [1632])
	$6 = ((uint_64)$14 / (uint_64)(int_64)1000000)
	$8 = (CASTING uint_32)(uint_64 $6)
	$7 = *($0 + [4])
	$14 = (int_64)0
	$13 = (int_64)59
	$2 = [1648]
	$15 = (int_64)0
	
.LOOP $label$3:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$4 }
	$12 = *($2)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$12 = ($12 + [165])
	goto $label$5 
	
.LABEL $label$6
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$4
	$2 = ($2 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$3 }
	$9 = *(($7 + [40]))
	$11 = *(($7 + [44]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$7 }
	$2 = ($11 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$8:
	if ( ((int_64)*(*($2)) == (int_64)$15) ){ goto $label$7 }
	$11 = $2
	$12 = ($2 + [-24])
	$2 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$12 = ($7 + [16])
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$12 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$12), [784])
	if ( $2 ){ goto $label$11 }
	$14 = (int_64)2
	goto $label$9 
	
.LABEL $label$12
	$2 = CALL db_find_i64(*(($7 + [16])), *(($7 + [24])), (int_64)4982871467403247616, $15)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$2 = CALL $62($12, $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$12), [784])
	
.LABEL $label$11
	$14 = *($2 + [8])
	goto $label$9 
	
.LABEL $label$10
	$14 = (int_64)2
	
.LABEL $label$9
	$2 = *($17 + [316])
	$13 = ((int_64)*($2 + [20]) + (int_64)$14)
	$2 = *($2 + [16])
	if ( (*($4) & [1]) ){ goto $label$14 }
	$12 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$12 = *(($1 + [32]))
	
.LABEL $label$13
	*(($17 + [24])) = $12
	*(($17 + [16])) = $5
	*($17 + [8]) = $13
	*($17) = $2
	*($17 + [4]) = $8
	CALL sprintf(($17 + [48]), [1664], $17)
	$2 = [0]
	$12 = *($17 + [316])
	if ( ((uint_32)$8 <= (uint_32)*($12 + [16])) ){ goto $label$15 }
	$2 = (uint_64)(((int_64)$6 & (int_64)4294967295) <= ((int_64)*($12 + [20]) + (int_64)$14))
	
.LABEL $label$15
	CALL eosio_assert($2, ($17 + [48]))
	$2 = *($17 + [316])
	*($17 + [36]) = $1
	*($17 + [40]) = $3
	*($17 + [32]) = ($17 + [367])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [976])
	$14 = (int_64)0
	CALL $83(($17 + [320]), $2, (int_64)0, ($17 + [32]))
	$10 = *(($0 + [4]))
	$13 = (int_64)59
	$2 = [1696]
	$15 = (int_64)0
	
.LOOP $label$16:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$17 }
	$12 = *($2)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$12 = ($12 + [165])
	goto $label$18 
	
.LABEL $label$19
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($12 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$16 }
	$7 = *(($10 + [40]))
	$11 = *(($10 + [44]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$20 }
	$2 = ($11 + [-24])
	$1 = ([0] - $7)
	
.LOOP $label$21:
	if ( ((int_64)*(*($2)) == (int_64)$15) ){ goto $label$20 }
	$11 = $2
	$12 = ($2 + [-24])
	$2 = $12
	if ( ((int_32)($12 + $1) != (int_32)[-24]) ){ goto $label$21 }
	
.LABEL $label$20
	$12 = ($10 + [16])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$24 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$12), [784])
	if ( $2 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$2 = CALL db_find_i64(*(($10 + [16])), *(($10 + [24])), (int_64)4982871467403247616, $15)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$22 }
	$2 = CALL $62($12, $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$12), [784])
	
.LABEL $label$23
	$14 = *($2 + [8])
	if ( (int_64)($14 == 0) ){ goto $label$22 }
	CALL $63(($17 + [32]), ($17 + [320]), $5, [864])
	$13 = *($17 + [32])
	*($17 + [312]) = $13
	$16 = *($2 + [16])
	$2 = *((CASTING uint_32)(uint_64 (uint_64)$13 >> (uint_64)(int_64)32)) + [88]
	$13 = *($2)
	$12 = ((int_64)$13) >= (int_64)$16
	$2 = ($12) & ((uint_64)$13 <= (uint_64)((int_64)$16 + (int_64)$14)))
	if ( $12 ){ goto $label$25 }
	if ( $2 ){ goto $label$25 }
	$2 = ((uint_64)((int_64)$13 + (int_64)$14) >= (uint_64)$16)
	
.LABEL $label$25
	CALL eosio_assert($2, [1712])
	
.LABEL $label$22
	$11 = *($17 + [344])
	if ( ($11 == 0) ){ goto $label$26 }
	$1 = ($17 + [348])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$12 = *($2)
	*($2) = [0]
	if ( ($12 == 0) ){ goto $label$30 }
	CALL $67($12)
	CALL $207($12)
	
.LABEL $label$30
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($17 + [344]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $11
	
.LABEL $label$27
	*($1) = $11
	CALL $207($2)
	
.LABEL $label$26
	*([0] + [4]) = ($17 + [368])
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229865212519383040, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [124]) == (int_32)$4), [784])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)4229865212519383040, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $116($4, $8)
	CALL eosio_assert(((int_32)*($2 + [124]) == (int_32)$4), [784])
	
.LABEL $label$4
	*($2 + [132]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1216])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1216])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [1216])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $149($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $125($1)
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1216])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1216])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1216])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $149(CALL $150($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [1216])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1216])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1216])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72(CALL $74($0, ($1 + [224])), ($1 + [236]))
	CALL $142($0, $1)
	$0 = CALL $72(CALL $72($0, ($1 + [124])), ($1 + [136]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $72($0, ($1 + [192]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [216]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [24])
	*($0) = $6
	$3 = *($1 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$3 = *(($1 + [24]))
	$3 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$2
	$6 = ($6 + [48])
	*($0) = $6
	$2 = *($1 + [96])
	$3 = *(($1 + [100]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$4
	$6 = ($6 + [16])
	*($0) = $6
	$3 = *($1 + [124])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [128])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $6
	$3 = *(($1 + [124]))
	$3 = ( *(($1 + [128])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$6
	$3 = *($1 + [136])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [140])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $6
	$3 = *(($1 + [136]))
	$3 = ( *(($1 + [140])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$8
	$6 = ($6 + [32])
	*($0) = $6
	$3 = *($1 + [192])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [196])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	$3 = *(($1 + [192]))
	$3 = ( *(($1 + [196])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$6 = ($3 + $6)
	*($0) = $6
	
.LABEL $label$10
	$6 = ($6 + [16])
	*($0) = $6
	$2 = *($1 + [224])
	$3 = *(($1 + [228]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$11:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$12
	*($0) = $6
	$3 = *($1 + [236])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [240])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$13:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$13 }
	*($0) = $6
	$1 = *(($1 + [236]))
	$1 = ( *(($1 + [240])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$14 }
	*($0) = ($1 + $6)
	
.LABEL $label$14
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	*($1 + [8]) = *(*(*($5 + [4]) + [4]) + [8])
	*($1 + [16]) = *(*($5 + [8]))
	CALL $210(($1 + [24]), (*(*($5 + [4]) + [4]) + [24]))
	$3 = *(*($5 + [4]) + [4])
	*($1 + [80]) = *($3 + [80])
	*(($1 + [88])) = *(($3 + [88]))
	*($1 + [108]) = *(*(*($5 + [4]) + [4]) + [108])
	*($1 + [120]) = *(*(*($5 + [4]) + [4]) + [120])
	CALL $210(($1 + [192]), (*($5 + [12]) + [60]))
	$3 = *($5 + [12])
	*($1 + [208]) = *($3 + [32])
	*(($1 + [216])) = *(($3 + [40]))
	CALL $210(($1 + [236]), (*($5 + [12]) + [72]))
	*(($5 = $6)) = [0]
	CALL $140($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL $141($5, $1)
	$4 = *(($1 + [16]))
	*($1 + [252]) = CALL db_store_i64(*($2 + [8]), (int_64)3966955352204771328, *(*($0 + [8])), $4, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $74($0, ($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [108]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1216])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [1216])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = (*($0) + [60])
	*($0) = $4
	$5 = *($1 + [64])
	$2 = *(($1 + [68]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($2 - $5) / (int_32)[12]))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = *($5)
	$6 = (CASTING uint_64)(uint_32 ( *($5 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($0) = $4
	$3 = *($5)
	$3 = ( *(($5 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($3 + $4)
	*($0) = $4
	
.LABEL $label$5
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($1 + [76])
	$5 = *(($1 + [80]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	$4 = (($2 & [-8]) + $4)
	
.LABEL $label$7
	*($0) = $4
	$3 = *($1 + [88])
	$5 = *(($1 + [92]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($2 >> [4]))
	
.LOOP $label$8:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	$4 = (($2 & [-16]) + $4)
	
.LABEL $label$9
	*($0) = $4
	$3 = *($1 + [100])
	$5 = *(($1 + [104]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($2 >> [2]))
	
.LOOP $label$10:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$11 }
	$4 = (($2 & [-4]) + $4)
	
.LABEL $label$11
	*($0) = $4
	$5 = *($1 + [112])
	$2 = *(($1 + [116]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($2 - $5) / (int_32)[12]))
	
.LOOP $label$12:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	*($0) = $4
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = *($5)
	$6 = (CASTING uint_64)(uint_32 ( *($5 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$15:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$15 }
	*($0) = $4
	$3 = *($5)
	$3 = ( *(($5 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$16 }
	$4 = ($3 + $4)
	*($0) = $4
	
.LABEL $label$16
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = *($1 + [124])
	$6 = (CASTING uint_64)(uint_32 ( *(($1 + [128])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$17:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$17 }
	*($0) = $4
	$5 = *(($1 + [124]))
	$5 = ( *(($1 + [128])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$18 }
	$4 = ($5 + $4)
	*($0) = $4
	
.LABEL $label$18
	$4 = ($4 + [8])
	*($0) = $4
	$5 = *($1 + [144])
	$6 = (CASTING uint_64)(uint_32 ( *(($1 + [148])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$19:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$19 }
	*($0) = $4
	$5 = *(($1 + [144]))
	$5 = ( *(($1 + [148])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$20 }
	*($0) = ($5 + $4)
	
.LABEL $label$20
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[31]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$6 = (*($0 + [4]) + [32])
	*($0 + [4]) = $6
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [68])) - *($1 + [64])) / (int_32)[12]))
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [14]) = (($3) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[0]), [1216])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($8 + [14]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $3 ){ goto $label$1 }
	$6 = *(($1 + [68]))
	$4 = *(($1 + [64]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $72($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = CALL $75(CALL $74(CALL $73($0, ($1 + [76])), ($1 + [88])), ($1 + [100]))
	$4 = *($2 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [116])) - *($1 + [112])) / (int_32)[12]))
	$5 = ($2 + [8])
	$0 = ($2 + [4])
	
.LOOP $label$4:
	$6 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [1216])
	CALL memcpy(*($0), ($8 + [15]), [1])
	$4 = (*($0) + [1])
	*($0) = $4
	if ( $3 ){ goto $label$4 }
	$4 = *(($1 + [116]))
	$0 = *(($1 + [112]))
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $72($2, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = CALL $72($2, ($1 + [124]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [144]))
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $207($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $205($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $222($0)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $210($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $223($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $207(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $207($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $205($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $223($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $222($0)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1216])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1216])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1216])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [1216])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $205($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $214($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $209($0)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $205(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $207($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $241 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC sprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vsprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC $258 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $205($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [10]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $205([176])) + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80 align=4]) = (int_64)0
	*($3 + [88 align=4]) = (int_64)0
	*($3 + [96 align=4]) = (int_64)0
	*($3 + [104]) = [0]
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [116]) = [0]
	*($3 + [120]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [0]
	*($3 + [132]) = [0]
	*($3 + [144]) = [0]
	*($3 + [148]) = [0]
	*($3 + [152]) = [0]
	*($3 + [156]) = $1
	CALL $104(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [160])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $67($3)
	CALL $207($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $99 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $1
	*($8 + [16]) = $2
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$6), [784])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $62($6, $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$6), [784])
	
.LABEL $label$5
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$3 }
	*($8 + [8]) = ($8 + [16])
	CALL eosio_assert([1], [976])
	CALL $102($6, $5, (int_64)0, ($8 + [8]))
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0 + [8])
	*($8 + [12]) = ($8 + [16])
	*($8 + [8]) = ($8 + [24])
	CALL $101($8, $6, $1, ($8 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $239 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [18256]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $241(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [18736]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [18768]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [18774] ? [18769] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [18738] ? [18736] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [18771]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $242()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [18736]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [18736]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [18720])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [18736])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [18752] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [18736]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [18832] ? [18848] : $30 ) ? ( [18800] ? [18816] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [18736]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [18737]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [18736] ? [18741] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [18720])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [18720])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [18720])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([18864], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([18864], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([18864], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $241(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $241(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $241(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $241(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $241(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $241(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $241(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $241(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $241(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $239([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $239($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $239($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($3 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $57(*($1), ($3 + [48]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($3 + [60]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($3 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($3 + [68]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*((($9 + [48]) + [28])) = *(($1 + [44]))
	*(($5 = (($9 + [48]) + [24]))) = *(($1 + [40]))
	*((($9 + [48]) + [20])) = *(($1 + [36]))
	*(($6 = (($9 + [48]) + [16]))) = *(($1 + [32]))
	*($9 + [48]) = *($1 + [16])
	*($9 + [60]) = *(($1 + [28]))
	*($9 + [56]) = *(($1 + [24]))
	*($9 + [52]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	*($9 + [36]) = [0]
	*($9 + [32]) = [0]
	*($9 + [40]) = [0]
	$8 = (*(($1 + [52])) - *($1 + [48]))
	$7 = ((int_32)$8 / (int_32)[12])
	if ( ($8 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL $205($8)
	*(($9 + [40])) = ($8 + ((int_32)$7 * (int_32)[12]))
	*($9 + [32]) = $8
	*($9 + [36]) = $8
	$4 = *(($1 + [52]))
	$7 = *(($1 + [48]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $223($8, $7)
	$8 = ($8 + [12])
	$7 = ($7 + [12])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$3 }
	*($9 + [36]) = $8
	
.LABEL $label$2
	$8 = *($1 + [68])
	$7 = *($1 + [64])
	$1 = *($1 + [60])
	*(($9 + [24])) = *($5)
	*(($9 + [16])) = *($6)
	*($9 + [8]) = *($9 + [56])
	*($9) = *($9 + [48])
	CALL $96($0, $2, $3, $9, ($9 + [32]), $1, $7, $8)
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	$8 = *($9 + [36])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$7 = ([0] - $1)
	$8 = ($8 + [-12])
	
.LOOP $label$7:
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*(($8 + [8])))
	
.LABEL $label$8
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $7) != (int_32)[-12]) ){ goto $label$7 }
	$8 = *($9 + [32])
	goto $label$5 
	
.LABEL $label$6
	$8 = $1
	
.LABEL $label$5
	*($9 + [36]) = $1
	CALL $207($8)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $222(($9 + [32]))
}

void .FUNC $96 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$8 = (*(*($0)) + int_32($9 >> [1]))
	$11 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$11 = *((*($8) + $11))
	
.LABEL $label$1
	*(($9 = (($12 + [48]) + [24]))) = *(($3 + [24]))
	*(($10 = (($12 + [48]) + [16]))) = *(($3 + [16]))
	*($12 + [48]) = *($3)
	*($12 + [56]) = *(($3 + [8]))
	*($12 + [32]) = [0]
	*($12 + [36]) = [0]
	*($12 + [40]) = [0]
	$3 = (*($4 + [4]) - *($4))
	$0 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$2 }
	$3 = CALL $205($3)
	*(($12 + [40])) = ($3 + ((int_32)$0 * (int_32)[12]))
	*($12 + [32]) = $3
	*($12 + [36]) = $3
	$4 = *(($4 + [4]))
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $223($3, $0)
	$3 = ($3 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	*($12 + [36]) = $3
	
.LABEL $label$3
	*(($12 + [24])) = *($9)
	*(($12 + [16])) = *($10)
	*($12 + [8]) = *($12 + [56])
	*($12) = *($12 + [48])
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $12), (int_32 ($12 + [32])), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $11))
	$4 = *($12 + [32])
	if ( ($4 == 0) ){ goto $label$5 }
	$3 = *($12 + [36])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	$0 = ([0] - $4)
	$3 = ($3 + [-12])
	
.LOOP $label$8:
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*(($3 + [8])))
	
.LABEL $label$9
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$3 = *($12 + [32])
	goto $label$6 
	
.LABEL $label$7
	$3 = $4
	
.LABEL $label$6
	*($12 + [36]) = $4
	CALL $207($3)
	
.LABEL $label$5
	*([0] + [4]) = ($12 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $222(($12 + [32]))
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $205(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $207($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [736])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $91($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [720])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [720])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $205(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [1568])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [1376])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $222($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [1568])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [1376])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $207($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $205(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $222($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $207($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $55($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($1 + [48]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $90($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [108]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [720])
	CALL memcpy(($1 + [120]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$7 = *($0 + [4])
	*($1) = ((int_64)((int_64)*(*($7 + [4])) << (int_64)32) | (int_64)*(*($7)))
	$2 = *($0)
	*($1 + [8]) = *(*(*($7 + [8]) + [4]) + [8])
	*($1 + [16]) = *(*($7 + [12]))
	CALL $210(($1 + [24]), (*(*($7 + [8]) + [4]) + [24]))
	$4 = *(*($7 + [8]) + [4])
	*($1 + [80]) = *($4 + [80])
	*(($1 + [88])) = *(($4 + [88]))
	*($1 + [108]) = *(*(*($7 + [8]) + [4]) + [108])
	*($1 + [120]) = *(*(*($7 + [8]) + [4]) + [120])
	CALL $210(($1 + [192]), (*($7 + [16]) + [60]))
	$4 = *($7 + [16])
	*($1 + [208]) = *($4 + [32])
	*(($1 + [216])) = *(($4 + [40]))
	CALL $210(($1 + [236]), (*($7 + [16]) + [72]))
	*($1 + [248]) = (int_64)0
	*(($7 = $6)) = [0]
	CALL $140($7, $1)
	$3 = ($1 + [248])
	$4 = (*($7) + [8])
	if ( ($4 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $141($7, $1)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($7 + [4]), $3, [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	$5 = *($1)
	*($1 + [260]) = CALL db_store_i64(*($2 + [8]), (int_64)3774700499559776256, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $207($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $207($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $207($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $207($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $207($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $207($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $207($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $207($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $131 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	*($7 + [16]) = $2
	*($7 + [8]) = $1
	$4 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $132(($7 + [8]), $4)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [784])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$4 = *($7 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $207($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [32]))
	goto $label$2 
	
.LABEL $label$4
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [1568])
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($0, [1376])
	goto $label$1 
	
.LABEL $label$3
	$6 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL $207($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $205([32])
	$6 = CALL $133($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $134(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [1568])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1376])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [720])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [80]) = (int_64)0
	$2 = [0]
	*(($0 + [32])) = [0]
	*(($3 = ($0 + [88]))) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1376])
	*(($0 + [104])) = [0]
	*($0 + [96 align=4]) = (int_64)0
	*($0 + [124]) = [0]
	*(($0 + [128])) = [0]
	*(($0 + [132])) = [0]
	*($0 + [136]) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*($0 + [192]) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*($0 + [208]) = (int_64)0
	*(($2 = ($0 + [216]))) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1376])
	*($0 + [224 align=4]) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = (int_64)0
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $55(CALL $90($0, ($1 + [224])), ($1 + [236]))
	CALL $138($0, $1)
	$0 = CALL $55(CALL $55($0, ($1 + [124])), ($1 + [136]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [720])
	CALL memcpy(($1 + [160]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $55($0, ($1 + [192]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [216]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $125($1)
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC vsprintf (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL vsnprintf($0, [2147483647], $1, $2)
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

int_32 .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $211($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $208 (int_32 $0)
{
	CALL $207($0)
}

void .FUNC $209 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $203($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [16864])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [16950]) == 0) ){ goto $label$2 }
	$7 = *([0] + [16952])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [16950]) = [1]
	$7 = ($7 << [16])
	*([0] + [16952]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [16952])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [16952]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [16950]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [16950]) = [1]
	$3 = ($3 << [16])
	*([0] + [16952]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [16952])
	
.LABEL $label$8
	*([0] + [16952]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $200 (int_32 $0)
{
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $202([8456], $0)
}

int_32 .FUNC $206 (int_32 $0)
{
	return CALL $205($0)
}

void .FUNC $207 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [16840])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [16648]
	$1 = (((int_32)$2 * (int_32)[12]) + [16648])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $205 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [16956])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $181 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [256])
	*([0] + [4]) = $16
	*($16 + [224]) = $1
	*($16 + [216]) = $2
	$11 = *(($0 + [80]))
	$9 = *(($0 + [84]))
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$1 }
	$14 = ($9 + [-24])
	$10 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$1 }
	$9 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$12 = ($0 + [56])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$4 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)$12), [784])
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	$9 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $155($12, $9)
	CALL eosio_assert(((int_32)*($14 + [8]) == (int_32)$12), [784])
	
.LABEL $label$3
	CALL eosio_assert(($14 == 0), [7872])
	CALL $223(($16 + [144]), $4)
	*(($16 + [184])) = (int_64)0
	*(($16 + [192])) = (int_64)0
	*($16 + [176]) = (int_64)0
	$5 = *($3 + [8])
	CALL $106(($16 + [56]), ($16 + [144]), [45])
	$14 = (*($16 + [60]) - *($16 + [56]))
	CALL eosio_assert((((int_32)$14 == (int_32)[48]) | ((int_32)$14 == (int_32)[60])), [7888])
	$14 = *($16 + [56])
	if ( (((int_32)(*($16 + [60]) - $14) / (int_32)[12]) <= [5]) ){ goto $label$8 }
	if ( (*($14) & [1]) ){ goto $label$7 }
	$14 = ($14 + [1])
	goto $label$6 
	
.LABEL $label$8
	*($16 + [160]) = (int_64)0
	goto $label$5 
	
.LABEL $label$7
	$14 = *($14 + [8])
	
.LABEL $label$6
	$12 = [-1]
	
.LOOP $label$9:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$9 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$10:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$11 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$12 = ($12 + [165])
	goto $label$12 
	
.LABEL $label$13
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$15 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$14 
	
.LABEL $label$15
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$14
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$10 }
	*($16 + [160]) = $15
	*($16 + [16]) = $15
	CALL $64(($16 + [104]), ($16 + [16]))
	$10 = [0]
	$4 = ($14 & [1])
	$14 = *($12)
	$12 = *($16 + [56])
	$9 = ($14 & [1])
	$14 = *($16 + [104])
	$7 = uint_32($14 >> [1])
	$11 = ( *($16 + [108]) ? $7 : $9 )
	if ( ((int_32)$11 != (int_32)( *($12 + [4]) ? uint_32($14 >> [1]) : $4 )) ){ goto $label$16 }
	$14 = (($16 + [104]) | [1])
	$12 = ( *($12 + [8]) ? ($12 + [1]) : $4 )
	if ( $9 ){ goto $label$19 }
	if ( ($11 == 0) ){ goto $label$18 }
	$9 = ([0] - $7)
	
.LOOP $label$20:
	if ( ((int_32)*($14) != (int_32)*($12)) ){ goto $label$17 }
	$10 = [1]
	$12 = ($12 + [1])
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$20 }
	goto $label$16 
	
.LABEL $label$19
	if ( ($11 == 0) ){ goto $label$18 }
	$10 = (CALL memcmp(( *($16 + [112]) ? $14 : $9 ), $12, $11) == 0)
	goto $label$16 
	
.LABEL $label$18
	$10 = [1]
	goto $label$16 
	
.LABEL $label$17
	$10 = [0]
	
.LABEL $label$16
	CALL eosio_assert($10, [7936])
	if ( ((*($16 + [104]) & [1]) == 0) ){ goto $label$21 }
	CALL $207(*($16 + [112]))
	
.LABEL $label$21
	$12 = *($16 + [60])
	$14 = *($16 + [56])
	$9 = ($14 + [12])
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$24 }
	$10 = ($12 + [-12])
	
.LOOP $label$25:
	if ( (*($14) & [1]) ){ goto $label$27 }
	*($14) = [0]
	goto $label$26 
	
.LABEL $label$27
	*(*(($14 + [8]))) = [0]
	*(($14 + [4])) = [0]
	
.LABEL $label$26
	CALL $212($14, [0])
	$12 = ($14 + [12])
	$1 = *($12)
	*(($14 + [16])) = [0]
	*($12) = [0]
	$9 = ($14 + [20])
	*(($14 + [8])) = *($9)
	*($14) = $1
	*($9) = [0]
	$14 = $12
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$25 }
	$9 = *($16 + [60])
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$12 = $14
	
.LABEL $label$23
	
.LOOP $label$28:
	$14 = ($9 + [-12])
	if ( ((*($14) & [1]) == 0) ){ goto $label$29 }
	CALL $207(*(($9 + [-4])))
	
.LABEL $label$29
	$9 = $14
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$28 }
	
.LABEL $label$22
	*($16 + [60]) = $12
	$14 = *($16 + [56])
	
.LABEL $label$5
	$12 = *($14)
	if ( ($12 & [1]) ){ goto $label$31 }
	$14 = uint_32($12 >> [1])
	goto $label$30 
	
.LABEL $label$31
	$14 = *($14 + [4])
	
.LABEL $label$30
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [7968])
	$14 = *($16 + [56])
	if ( (*($14) & [1]) ){ goto $label$33 }
	$14 = ($14 + [1])
	goto $label$32 
	
.LABEL $label$33
	$14 = *($14 + [8])
	
.LABEL $label$32
	$12 = [-1]
	
.LOOP $label$34:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$34 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$35:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$36 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$12 = ($12 + [165])
	goto $label$37 
	
.LABEL $label$38
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$40 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$39 
	
.LABEL $label$40
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$39
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$35 }
	*($16 + [168]) = $15
	*($16 + [16]) = $15
	CALL $64(($16 + [104]), ($16 + [16]))
	$10 = [0]
	$4 = ($14 & [1])
	$14 = *($12)
	$12 = *($16 + [56])
	$9 = ($14 & [1])
	$14 = *($16 + [104])
	$7 = uint_32($14 >> [1])
	$11 = ( *($16 + [108]) ? $7 : $9 )
	if ( ((int_32)$11 != (int_32)( *($12 + [4]) ? uint_32($14 >> [1]) : $4 )) ){ goto $label$41 }
	$14 = (($16 + [104]) | [1])
	$12 = ( *($12 + [8]) ? ($12 + [1]) : $4 )
	if ( $9 ){ goto $label$44 }
	if ( ($11 == 0) ){ goto $label$43 }
	$9 = ([0] - $7)
	
.LOOP $label$45:
	if ( ((int_32)*($14) != (int_32)*($12)) ){ goto $label$42 }
	$10 = [1]
	$12 = ($12 + [1])
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$45 }
	goto $label$41 
	
.LABEL $label$44
	if ( ($11 == 0) ){ goto $label$43 }
	$10 = (CALL memcmp(( *($16 + [112]) ? $14 : $9 ), $12, $11) == 0)
	goto $label$41 
	
.LABEL $label$43
	$10 = [1]
	goto $label$41 
	
.LABEL $label$42
	$10 = [0]
	
.LABEL $label$41
	CALL eosio_assert($10, [8000])
	if ( ((*($16 + [104]) & [1]) == 0) ){ goto $label$46 }
	CALL $207(*($16 + [112]))
	
.LABEL $label$46
	$14 = *($16 + [56])
	$12 = *($14 + [12])
	if ( ($12 & [1]) ){ goto $label$48 }
	$14 = uint_32($12 >> [1])
	goto $label$47 
	
.LABEL $label$48
	$14 = *(($14 + [16]))
	
.LABEL $label$47
	$9 = [0]
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [8032])
	CALL $106(($16 + [16]), (*($16 + [56]) + [12]), [44])
	CALL eosio_assert(((int_32)*($16 + [20]) != (int_32)*($16 + [16])), [8064])
	if ( ((int_32)*($16 + [20]) == (int_32)*($16 + [16])) ){ goto $label$49 }
	$7 = (($16 + [160]) + [16])
	$10 = (($16 + [104]) + [8])
	$11 = ($16 + [180])
	
.LOOP $label$50:
	*($10) = $5
	*($16 + [104]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$1 = (uint_64)*($10) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$12 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$12 = [0]
	
.LABEL $label$51
	CALL eosio_assert($12, [1376])
	$14 = (*($16 + [16]) + ((int_32)$9 * (int_32)[12]))
	$4 = *($14)
	$12 = ($4 & [1])
	if ( $12 ){ goto $label$58 }
	if ( uint_32($4 >> [1]) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	if ( (*($14 + [4]) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	if ( $12 ){ goto $label$60 }
	$14 = ($14 + [1])
	goto $label$59 
	
.LABEL $label$60
	$14 = *($14 + [8])
	
.LABEL $label$59
	*($16 + [104]) = CALL atoll($14)
	
.LABEL $label$56
	$14 = *($11)
	if ( ((int_32)$14 == (int_32)*((($16 + [160]) + [24]))) ){ goto $label$62 }
	*($14) = *($16 + [104])
	*(($14 + [8])) = *($10)
	*($11) = (*($11) + [16])
	goto $label$61 
	
.LABEL $label$62
	CALL $82($7, ($16 + [104]))
	
.LABEL $label$61
	$9 = ($9 + [1])
	if ( ($9 <= ((int_32)(*($16 + [20]) - *($16 + [16])) / (int_32)[12])) ){ goto $label$50 }
	
.LABEL $label$49
	CALL $210(($16 + [188]), (*($16 + [56]) + [24]))
	*($16 + [208]) = [0]
	*($16 + [200]) = (int_64)0
	$14 = *($16 + [56])
	$12 = *($14 + [36])
	if ( ($12 & [1]) ){ goto $label$65 }
	if ( uint_32($12 >> [1]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	if ( (*(($14 + [40])) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL $106(($16 + [104]), ($14 + [36]), [44])
	$9 = *($16 + [104])
	$12 = *($9)
	$14 = ($12 & [1])
	if ( $14 ){ goto $label$68 }
	if ( uint_32($12 >> [1]) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	if ( (*($9 + [4]) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	if ( $14 ){ goto $label$70 }
	$14 = ($9 + [1])
	goto $label$69 
	
.LABEL $label$70
	$14 = *($9 + [8])
	
.LABEL $label$69
	$12 = [-1]
	
.LOOP $label$71:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$71 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$72:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$73 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$12 = ($12 + [165])
	goto $label$74 
	
.LABEL $label$75
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$77 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$76 
	
.LABEL $label$77
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$76
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$72 }
	*(($16 + [200])) = $15
	*($16 + [232]) = $15
	CALL $64(($16 + [240]), ($16 + [232]))
	$10 = [0]
	$4 = ($14 & [1])
	$14 = *($12)
	$12 = *($16 + [104])
	$9 = ($14 & [1])
	$14 = *($16 + [240])
	$7 = uint_32($14 >> [1])
	$11 = ( *($16 + [244]) ? $7 : $9 )
	if ( ((int_32)$11 != (int_32)( *($12 + [4]) ? uint_32($14 >> [1]) : $4 )) ){ goto $label$78 }
	$14 = (($16 + [240]) | [1])
	$12 = ( *($12 + [8]) ? ($12 + [1]) : $4 )
	if ( $9 ){ goto $label$81 }
	if ( ($11 == 0) ){ goto $label$80 }
	$9 = ([0] - $7)
	
.LOOP $label$82:
	if ( ((int_32)*($14) != (int_32)*($12)) ){ goto $label$79 }
	$10 = [1]
	$12 = ($12 + [1])
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$82 }
	goto $label$78 
	
.LABEL $label$81
	if ( ($11 == 0) ){ goto $label$80 }
	$10 = (CALL memcmp(( *($16 + [248]) ? $14 : $9 ), $12, $11) == 0)
	goto $label$78 
	
.LABEL $label$80
	$10 = [1]
	goto $label$78 
	
.LABEL $label$79
	$10 = [0]
	
.LABEL $label$78
	CALL eosio_assert($10, [8096])
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$83 }
	CALL $207(*($16 + [248]))
	
.LABEL $label$83
	$9 = *($16 + [104])
	
.LABEL $label$66
	$14 = *($16 + [108])
	if ( (((int_32)($14 - $9) / (int_32)[12]) <= [2]) ){ goto $label$85 }
	$10 = *($9 + [12])
	$12 = ($10 & [1])
	if ( $12 ){ goto $label$87 }
	if ( uint_32($10 >> [1]) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$87
	if ( (*(($9 + [16])) == 0) ){ goto $label$84 }
	
.LABEL $label$86
	if ( $12 ){ goto $label$89 }
	$14 = (($9 + [12]) + [1])
	goto $label$88 
	
.LABEL $label$89
	$14 = *(($9 + [20]))
	
.LABEL $label$88
	*(($16 + [208])) = CALL atoll($14)
	$9 = *($16 + [104])
	
.LABEL $label$85
	if ( ($9 == 0) ){ goto $label$63 }
	$14 = *($16 + [108])
	
.LABEL $label$84
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$91 }
	$12 = ([0] - $9)
	$14 = ($14 + [-12])
	
.LOOP $label$92:
	if ( ((*($14) & [1]) == 0) ){ goto $label$93 }
	CALL $207(*(($14 + [8])))
	
.LABEL $label$93
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $12) != (int_32)[-12]) ){ goto $label$92 }
	$14 = *($16 + [104])
	goto $label$90 
	
.LABEL $label$91
	$14 = $9
	
.LABEL $label$90
	*($16 + [108]) = $9
	CALL $207($14)
	
.LABEL $label$63
	$9 = *($16 + [16])
	if ( ($9 == 0) ){ goto $label$94 }
	$14 = *($16 + [20])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$96 }
	$12 = ([0] - $9)
	$14 = ($14 + [-12])
	
.LOOP $label$97:
	if ( ((*($14) & [1]) == 0) ){ goto $label$98 }
	CALL $207(*(($14 + [8])))
	
.LABEL $label$98
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $12) != (int_32)[-12]) ){ goto $label$97 }
	$14 = *($16 + [16])
	goto $label$95 
	
.LABEL $label$96
	$14 = $9
	
.LABEL $label$95
	*($16 + [20]) = $9
	CALL $207($14)
	
.LABEL $label$94
	$9 = *($16 + [56])
	if ( ($9 == 0) ){ goto $label$99 }
	$14 = *($16 + [60])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$101 }
	$12 = ([0] - $9)
	$14 = ($14 + [-12])
	
.LOOP $label$102:
	if ( ((*($14) & [1]) == 0) ){ goto $label$103 }
	CALL $207(*(($14 + [8])))
	
.LABEL $label$103
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $12) != (int_32)[-12]) ){ goto $label$102 }
	$14 = *($16 + [56])
	goto $label$100 
	
.LABEL $label$101
	$14 = $9
	
.LABEL $label$100
	*($16 + [60]) = $9
	CALL $207($14)
	
.LABEL $label$99
	if ( ((*($16 + [144]) & [1]) == 0) ){ goto $label$104 }
	CALL $207(*($16 + [152]))
	
.LABEL $label$104
	$1 = (int_64)0
	$12 = *(($16 + [180]))
	$14 = *($16 + [176])
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$105 }
	$1 = (int_64)0
	
.LOOP $label$106:
	$1 = ((int_64)*($14) + (int_64)$1)
	$14 = ($14 + [16])
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$106 }
	
.LABEL $label$105
	CALL eosio_assert(((int_64)$1 == (int_64)*($3)), [8112])
	*($16 + [16]) = *((($16 + [160]) + [8]))
	CALL $64(($16 + [56]), ($16 + [16]))
	$14 = CALL $215(($16 + [56]), ( [8256] ? [8272] : ((int_64)*(($3 + [8])) == (int_64)1397703940) ))
	$1 = *($14)
	*($14) = (int_64)0
	$14 = ($14 + [8])
	$7 = *($14)
	*((($16 + [104]) + [8])) = $7
	*($14) = [0]
	*($16 + [104]) = $1
	$8 = (*($16 + [104]) & [1])
	$14 = ( $7 ? (($16 + [104]) | [1]) : $8 )
	$12 = [-1]
	
.LOOP $label$107:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$107 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$108:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$109 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$12 = ($12 + [165])
	goto $label$110 
	
.LABEL $label$111
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$109
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$113 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$112 
	
.LABEL $label$113
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$112
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$108 }
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$114 }
	$14 = ($9 + [-24])
	$10 = ([0] - $4)
	
.LOOP $label$115:
	if ( ((int_64)*(*($14)) == (int_64)$15) ){ goto $label$114 }
	$9 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$115 }
	
.LABEL $label$114
	$11 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$120 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	if ( $14 ){ goto $label$119 }
	$5 = (int_64)0
	if ( $8 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$120
	$14 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $15)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$118 }
	$14 = CALL $62($11, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	
.LABEL $label$119
	$5 = *($14 + [8])
	if ( ($8 == 0) ){ goto $label$116 }
	goto $label$117 
	
.LABEL $label$118
	$5 = (int_64)0
	if ( ($8 == 0) ){ goto $label$116 }
	
.LABEL $label$117
	CALL $207($7)
	
.LABEL $label$116
	if ( ((*($16 + [56]) & [1]) == 0) ){ goto $label$121 }
	CALL $207(*($16 + [64]))
	
.LABEL $label$121
	*($16 + [16]) = *((($16 + [160]) + [8]))
	CALL $64(($16 + [56]), ($16 + [16]))
	$14 = CALL $215(($16 + [56]), ( [8224] ? [8240] : ((int_64)*(($3 + [8])) == (int_64)1397703940) ))
	$1 = *($14)
	*($14) = (int_64)0
	$14 = ($14 + [8])
	$7 = *($14)
	*((($16 + [104]) + [8])) = $7
	*($14) = [0]
	*($16 + [104]) = $1
	$8 = (*($16 + [104]) & [1])
	$14 = ( $7 ? (($16 + [104]) | [1]) : $8 )
	$12 = [-1]
	
.LOOP $label$122:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$122 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$123:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$124 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$12 = ($12 + [165])
	goto $label$125 
	
.LABEL $label$126
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$125
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$124
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$128 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$127 
	
.LABEL $label$128
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$127
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$123 }
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$129 }
	$14 = ($9 + [-24])
	$10 = ([0] - $4)
	
.LOOP $label$130:
	if ( ((int_64)*(*($14)) == (int_64)$15) ){ goto $label$129 }
	$9 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$130 }
	
.LABEL $label$129
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$135 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	if ( $14 ){ goto $label$134 }
	$6 = (int_64)0
	if ( $8 ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$135
	$14 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $15)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$133 }
	$14 = CALL $62($11, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	
.LABEL $label$134
	$6 = *($14 + [8])
	if ( ($8 == 0) ){ goto $label$131 }
	goto $label$132 
	
.LABEL $label$133
	$6 = (int_64)0
	if ( ($8 == 0) ){ goto $label$131 }
	
.LABEL $label$132
	CALL $207($7)
	
.LABEL $label$131
	if ( ((*($16 + [56]) & [1]) == 0) ){ goto $label$136 }
	CALL $207(*($16 + [64]))
	
.LABEL $label$136
	$1 = *($3)
	CALL eosio_assert((((uint_64)$1 <= (uint_64)$6) & ((uint_64)$1 >= (uint_64)$5)), [8144])
	*($16 + [120]) = (int_64)-1
	*($16 + [128]) = [0]
	*($16 + [104]) = *($0 + [8])
	*($16 + [112]) = *(($16 + [168]))
	*(($16 + [132])) = [0]
	*(($16 + [136])) = [0]
	*($16 + [140]) = [0]
	*($16 + [96]) = ($16 + [104])
	CALL $182(($16 + [56]), ($16 + [96]), ($16 + [224]))
	$9 = *($16 + [60])
	if ( ($9 == 0) ){ goto $label$139 }
	if ( ((int_64)*($16 + [224]) != (int_64)*($9 + [8])) ){ goto $label$139 }
	$1 = (int_64)0
	*($16 + [232]) = (int_64)0
	if ( ($9 == 0) ){ goto $label$138 }
	$13 = (int_64)59
	$14 = [7856]
	$5 = *($16 + [216])
	$15 = (int_64)0
	
.LOOP $label$140:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$145 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$144 }
	$12 = ($12 + [165])
	goto $label$143 
	
.LABEL $label$145
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$142 }
	goto $label$141 
	
.LABEL $label$144
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$143
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$142
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$141
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$140 }
	CALL eosio_assert(((int_32)*($9 + [120]) == (int_32)((int_64)$5 == (int_64)$15)), [8208])
	CALL eosio_assert(((uint_64)((int_64)*($9 + [80]) + (int_64)*($3)) <= (uint_64)$6), [8144])
	*($16 + [56]) = $3
	*($16 + [60]) = ($16 + [160])
	CALL eosio_assert([1], [976])
	CALL $185(*($16 + [96]), $9, (int_64)0, ($16 + [56]))
	*($16 + [232]) = *($9)
	goto $label$137 
	
.LABEL $label$139
	*($16 + [232]) = (int_64)0
	
.LABEL $label$138
	*($16 + [72]) = (int_64)-1
	*($16 + [80]) = [0]
	$1 = *(($0 + [8]))
	*($16 + [56]) = $1
	$12 = (($16 + [160]) + [8])
	$2 = *($12)
	*($16 + [64]) = $2
	*(($16 + [84])) = [0]
	*(($16 + [88])) = [0]
	$14 = CALL db_lowerbound_i64($1, $2, (int_64)-4111921522686296064, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$147 }
	*($16 + [52]) = CALL $107(($16 + [56]), $14)
	*($16 + [48]) = ($16 + [56])
	$4 = (($16 + [48]) | [4])
	goto $label$146 
	
.LABEL $label$147
	*($16 + [52]) = [0]
	*($16 + [48]) = ($16 + [56])
	*($16 + [40]) = *($12)
	CALL $64(($16 + [240]), ($16 + [40]))
	$14 = CALL $215(($16 + [240]), [2304])
	$1 = *($14)
	*($14) = (int_64)0
	$14 = ($14 + [8])
	$7 = *($14)
	*((($16 + [16]) + [8])) = $7
	*($14) = [0]
	*($16 + [16]) = $1
	$8 = (*($16 + [16]) & [1])
	$14 = ( $7 ? (($16 + [16]) | [1]) : $8 )
	$4 = (($16 + [48]) | [4])
	$12 = [-1]
	
.LOOP $label$148:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$148 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$149:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$150 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$152 }
	$12 = ($12 + [165])
	goto $label$151 
	
.LABEL $label$152
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$151
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$150
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$154 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$153 
	
.LABEL $label$154
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$153
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$149 }
	CALL $99($0, $15, (int_64)0)
	if ( ($8 == 0) ){ goto $label$155 }
	CALL $207($7)
	
.LABEL $label$155
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$156 }
	CALL $207(*($16 + [248]))
	
.LABEL $label$156
	CALL eosio_assert([0], [8176])
	
.LABEL $label$146
	*($16 + [232]) = *(*($4))
	$1 = *(($0 + [8]))
	*($16 + [32]) = $3
	*($16 + [20]) = ($16 + [224])
	*($16 + [16]) = ($16 + [232])
	*($16 + [24]) = ($16 + [160])
	*($16 + [28]) = ($16 + [48])
	*($16 + [36]) = ($16 + [216])
	CALL $183(($16 + [240]), ($16 + [104]), $1, ($16 + [16]))
	$1 = *($16 + [48])
	$14 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$12 = ((int_32)$14) != (int_32)[0]
	CALL eosio_assert($12), [1968])
	CALL eosio_assert($12, [2016])
	$12 = CALL db_next_i64(*($14 + [52]), ($16 + [16]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$157 }
	CALL $107((CASTING uint_32)(uint_64 $1), $12)
	
.LABEL $label$157
	CALL $184(($16 + [56]), $14)
	*($16 + [40]) = *((($16 + [160]) + [8]))
	CALL $64(($16 + [240]), ($16 + [40]))
	$14 = CALL $215(($16 + [240]), [2304])
	$1 = *($14)
	*($14) = (int_64)0
	$14 = ($14 + [8])
	$3 = *($14)
	*((($16 + [16]) + [8])) = $3
	*($14) = [0]
	*($16 + [16]) = $1
	$7 = (*($16 + [16]) & [1])
	$14 = ( $3 ? (($16 + [16]) | [1]) : $7 )
	$12 = [-1]
	
.LOOP $label$158:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$158 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$159:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$160 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$162 }
	$12 = ($12 + [165])
	goto $label$161 
	
.LABEL $label$162
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$161
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$160
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$164 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$163 
	
.LABEL $label$164
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$163
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$159 }
	$4 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$165 }
	$14 = ($9 + [-24])
	$10 = ([0] - $4)
	
.LOOP $label$166:
	if ( ((int_64)*(*($14)) == (int_64)$15) ){ goto $label$165 }
	$9 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$166 }
	
.LABEL $label$165
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$171 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	if ( $14 ){ goto $label$170 }
	$5 = (int_64)0
	if ( $7 ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$171
	$14 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $15)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$169 }
	$14 = CALL $62($11, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$11), [784])
	
.LABEL $label$170
	$5 = *($14 + [8])
	if ( ($7 == 0) ){ goto $label$167 }
	goto $label$168 
	
.LABEL $label$169
	$5 = (int_64)0
	if ( ($7 == 0) ){ goto $label$167 }
	
.LABEL $label$168
	CALL $207($3)
	
.LABEL $label$167
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$172 }
	CALL $207(*($16 + [248]))
	
.LABEL $label$172
	*($16 + [40]) = *((($16 + [160]) + [8]))
	CALL $64(($16 + [240]), ($16 + [40]))
	$14 = CALL $215(($16 + [240]), [2304])
	$1 = *($14)
	*($14) = (int_64)0
	$14 = ($14 + [8])
	$11 = *($14)
	*((($16 + [16]) + [8])) = $11
	*($14) = [0]
	*($16 + [16]) = $1
	$4 = (*($16 + [16]) & [1])
	$14 = ( $11 ? (($16 + [16]) | [1]) : $4 )
	$12 = [-1]
	
.LOOP $label$173:
	$9 = ($14 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($9 + [1])) ){ goto $label$173 }
	$6 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$174:
	$13 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$6) ){ goto $label$175 }
	$12 = *($14)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$177 }
	$12 = ($12 + [165])
	goto $label$176 
	
.LABEL $label$177
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$176
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$175
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$179 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$178 
	
.LABEL $label$179
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$178
	$14 = ($14 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$174 }
	CALL $99($0, $15, ((int_64)$5 + (int_64)-1))
	if ( ($4 == 0) ){ goto $label$180 }
	CALL $207($11)
	
.LABEL $label$180
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$181 }
	CALL $207(*($16 + [248]))
	
.LABEL $label$181
	$9 = *($16 + [80])
	if ( ($9 == 0) ){ goto $label$182 }
	$10 = ($16 + [84])
	$14 = *($10)
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$184 }
	
.LOOP $label$185:
	$14 = ($14 + [-24])
	$12 = *($14)
	*($14) = [0]
	if ( ($12 == 0) ){ goto $label$186 }
	CALL $207($12)
	
.LABEL $label$186
	if ( ((int_32)$9 != (int_32)$14) ){ goto $label$185 }
	$14 = *(($16 + [80]))
	goto $label$183 
	
.LABEL $label$184
	$14 = $9
	
.LABEL $label$183
	*($10) = $9
	CALL $207($14)
	
.LABEL $label$182
	$9 = [0]
	
.LABEL $label$137
	*($16 + [56]) = [2456]
	*($16 + [60]) = $0
	*($16 + [16]) = [2476]
	*($16 + [20]) = $0
	*($16 + [240]) = [2496]
	*($16 + [244]) = $0
	*($16 + [48]) = [952]
	*($16 + [52]) = $0
	$1 = *(($16 + [168]))
	if ( ((int_64)$1 > (int_64)-3776079721305997313) ){ goto $label$191 }
	if ( ((int_64)$1 == (int_64)-7143377512079294464) ){ goto $label$190 }
	if ( ((int_64)$1 != (int_64)-4293742440046657536) ){ goto $label$188 }
	$14 = ($16 + [56])
	goto $label$187 
	
.LABEL $label$191
	if ( ((int_64)$1 == (int_64)-3776079721305997312) ){ goto $label$189 }
	if ( ((int_64)$1 != (int_64)-3776079686946258944) ){ goto $label$188 }
	$14 = ($16 + [240])
	goto $label$187 
	
.LABEL $label$190
	$14 = ($16 + [48])
	goto $label$187 
	
.LABEL $label$189
	$14 = ($16 + [16])
	goto $label$187 
	
.LABEL $label$188
	$14 = [0]
	CALL eosio_assert([0], [2528])
	
.LABEL $label$187
	CALL $186(($16 + [40]), ($16 + [104]), *($16 + [232]), [864])
	*($16) = [0]
	$11 = *(*($14) + [4])
	*($16 + [4]) = [0]
	*($16 + [8]) = [0]
	$4 = *($16 + [44])
	$12 = (*(($16 + [180])) - *(($16 + [176])))
	$10 = int_32($12 >> [4])
	if ( ($10 == 0) ){ goto $label$193 }
	if ( ((uint_32)$10 >= (uint_32)[268435456]) ){ goto $label$192 }
	$12 = CALL $205($12)
	*(($16 + [8])) = ($12 + ($10 << [4]))
	*($16) = $12
	*($16 + [4]) = $12
	$0 = *(($16 + [176]))
	$10 = (*(($16 + [180])) - $0)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$193 }
	CALL memcpy($12, $0, $10)
	*($16 + [4]) = (*($16 + [4]) + $10)
	
.LABEL $label$193
	CALL void $14((int_32 $4), (int_32 ((int_32)$9 != (int_32)[0])), (int_32 $16), (int_32 $11))
	$14 = *($16)
	if ( ($14 == 0) ){ goto $label$194 }
	*($16 + [4]) = $14
	CALL $207($14)
	
.LABEL $label$194
	$10 = *($16 + [128])
	if ( ($10 == 0) ){ goto $label$195 }
	$11 = ($16 + [132])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$197 }
	
.LOOP $label$198:
	$12 = ($12 + [-24])
	$14 = *($12)
	*($12) = [0]
	if ( ($14 == 0) ){ goto $label$199 }
	$9 = *($14 + [96])
	if ( ($9 == 0) ){ goto $label$200 }
	*(($14 + [100])) = $9
	CALL $207($9)
	
.LABEL $label$200
	if ( ((*($14 + [24]) & [1]) == 0) ){ goto $label$201 }
	CALL $207(*(($14 + [32])))
	
.LABEL $label$201
	CALL $207($14)
	
.LABEL $label$199
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$198 }
	$14 = *(($16 + [128]))
	goto $label$196 
	
.LABEL $label$197
	$14 = $10
	
.LABEL $label$196
	*($11) = $10
	CALL $207($14)
	
.LABEL $label$195
	if ( ((*(($16 + [188])) & [1]) == 0) ){ goto $label$202 }
	CALL $207(*(($16 + [196])))
	
.LABEL $label$202
	$14 = *(($16 + [176]))
	if ( ($14 == 0) ){ goto $label$203 }
	*(($16 + [180])) = $14
	CALL $207($14)
	
.LABEL $label$203
	*([0] + [4]) = ($16 + [256])
	return (unreachable)
	
.LABEL $label$192
	CALL $222($16)
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [256]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [260]))
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $205([272])
	$4 = CALL $135($6)
	*($6 + [256]) = $0
	CALL $136(($8 + [32]), $4)
	CALL eosio_assert(((uint_32)(*((($8 + [32]) + [8])) - *($8 + [36])) > (uint_32)[7]), [720])
	CALL memcpy(($6 + [248]), *($8 + [36]), [8])
	*($6 + [260]) = $1
	*($8 + [24]) = $6
	*($8 + [36]) = (*($8 + [36]) + [8])
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [260])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $137(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [248]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [16])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8) + [16]) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [252])))
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $205([272])
	$4 = CALL $135($6)
	*($6 + [248]) = $0
	CALL $136(($8 + [32]), $4)
	*($6 + [252]) = $1
	*($8 + [24]) = $6
	$5 = *($6 + [16])
	*($8 + [16]) = $5
	$7 = *($6 + [252])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $144(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $145($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $61($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $146($4, $1)
	CALL $148(CALL $147(CALL $147($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$8 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($5 = ($9 + [24]))) = [0]
	$2 = CALL $205([16])
	*($9 + [16]) = $2
	$7 = ($2 + [16])
	*($5) = $7
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $7
	*($9 + [28]) = [0]
	*(($2 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	*($10 + [16]) = [0]
	*($10 + [24]) = ($10 + [16])
	*($10) = $4
	$1 = ((int_32)$8 * (int_32)[40])
	CALL $118($10, ($10 + [24]))
	$8 = *($10 + [16])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($9 + [28])
	CALL $61($5, $8)
	$3 = *($2)
	$2 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$5 = ($6 + $1)
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $3
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$3 = ($9 + [40])
	CALL $119(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$9:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($8 = ($9 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($8) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($8 = ($9 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($8) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$9 }
	$2 = *(($0 + [4]))
	$8 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$8 = $2
	
.LABEL $label$7
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$10 }
	$1 = ([0] - $8)
	$9 = ($2 + [-24])
	
.LOOP $label$11:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($9 + [16])) = $2
	CALL $207($2)
	
.LABEL $label$12
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $2
	CALL $207($2)
	
.LABEL $label$13
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $207($8)
	
.LABEL $label$14
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC _ZN11CPokerLogic11IsValidCardEh (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$0 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)($1 & [254]) != (int_32)[78]) ){ goto $label$1 }
	return [1]
	
.LABEL $label$1
	return (($2 <= [49]) & ((($0 + [-1]) & [255]) <= [13]))
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $205([272])
	CALL $135($3)
	*($3 + [256]) = $1
	CALL $139(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [260])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $137(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $125($1)
	CALL $207($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	if ( ((*($0 + [236]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*(($0 + [244])))
	
.LABEL $label$1
	$1 = *($0 + [224])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [228])) = $1
	CALL $207($1)
	
.LABEL $label$2
	if ( ((*($0 + [192]) & [1]) == 0) ){ goto $label$3 }
	CALL $207(*(($0 + [200])))
	
.LABEL $label$3
	if ( ((*($0 + [136]) & [1]) == 0) ){ goto $label$4 }
	CALL $207(*(($0 + [144])))
	
.LABEL $label$4
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$5 }
	CALL $207(*(($0 + [132])))
	
.LABEL $label$5
	$1 = *($0 + [96])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($0 + [100])) = $1
	CALL $207($1)
	
.LABEL $label$6
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $207(*(($0 + [32])))
	
.LABEL $label$7
	return $0
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $205([272])
	CALL $135($3)
	*($3 + [248]) = $1
	CALL $143(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3 + [16])
	*($7 + [16]) = $2
	$4 = *($3 + [252])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $144(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $125($1)
	CALL $207($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN11CPokerLogic11CombinationERKNSt3__16vectorIhNS0_9allocatorIhEEEEiRNS1_IS4_NS2_IS4_EEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10) = (int_64)0
	$9 = [0]
	*($10 + [8]) = [0]
	$4 = *($1)
	$7 = *($1 + [4])
	$8 = ($7 - $4)
	if ( ($8 == 0) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$8 = ($8 << [2])
	$9 = CALL $205($8)
	$5 = ($9 + $8)
	*(($10 + [8])) = $5
	*($10) = $9
	*($10 + [4]) = $9
	$7 = ($4 - $7)
	$8 = $9
	
.LOOP $label$3:
	*($8) = [0]
	$8 = ($8 + [4])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$3 }
	*($10 + [4]) = $5
	
.LABEL $label$2
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	
.LOOP $label$5:
	*($9) = [1]
	$9 = ($9 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	CALL _ZN11CPokerLogic12PrintCombResERKNSt3__16vectorIhNS0_9allocatorIhEEEERNS1_IiNS2_IiEEEERNS1_IS4_NS2_IS4_EEEE($9, $1, $10, $3)
	$7 = *($1)
	$6 = ($1 + [4])
	$2 = *($6)
	if ( ((int_32)(($2 + [-1]) - $7) < (int_32)[1]) ){ goto $label$6 }
	$9 = [0]
	
.LOOP $label$7:
	$4 = *($10)
	$8 = ($4 + ($9 << [2]))
	if ( ((int_32)*($8) != (int_32)[1]) ){ goto $label$8 }
	$5 = ($8 + [4])
	if ( *($5) ){ goto $label$8 }
	*($5) = [1]
	*($8) = [0]
	*($10 + [12]) = [1]
	CALL $17($4, $8, ($10 + [12]))
	CALL _ZN11CPokerLogic12PrintCombResERKNSt3__16vectorIhNS0_9allocatorIhEEEERNS1_IiNS2_IiEEEERNS1_IS4_NS2_IS4_EEEE($9, $1, $10, $3)
	$2 = *($6)
	$7 = *($1)
	$9 = [-1]
	
.LABEL $label$8
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)(($2 + [-1]) - $7)) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = *($10)
	if ( ($9 == 0) ){ goto $label$9 }
	*($10 + [4]) = $9
	CALL $207($9)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $222($10)
}

void .FUNC _ZN11CPokerLogic12PrintCombResERKNSt3__16vectorIhNS0_9allocatorIhEEEERNS1_IiNS2_IiEEEERNS1_IS4_NS2_IS4_EEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = [0]
	*($9 + [8]) = [0]
	*($9) = (int_64)0
	$7 = *($2)
	if ( ((int_32)*($2 + [4]) == (int_32)$7) ){ goto $label$1 }
	$5 = ($9 + [8])
	$8 = [0]
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + $6)) != (int_32)[1]) ){ goto $label$3 }
	$7 = (*($1) + $8)
	$4 = *($9 + [4])
	if ( ((int_32)$4 == (int_32)*($5)) ){ goto $label$4 }
	*($4) = *($7)
	*($9 + [4]) = (*($9 + [4]) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $23($9, $7)
	
.LABEL $label$3
	$6 = ($6 + [4])
	$7 = *($2)
	$8 = ($8 + [1])
	if ( ($8 <= int_32((*(($2 + [4])) - $7) >> [2])) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($3 + [4])
	if ( ((int_32)$6 == (int_32)*($3 + [8])) ){ goto $label$8 }
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$8 = (*($9 + [4]) - *($9))
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL $205($8)
	*($6) = $2
	*(($6 + [8])) = ($2 + $8)
	*(($6 = ($6 + [4]))) = $2
	$7 = *($9)
	$8 = (*($9 + [4]) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $7, $8)
	*($6) = (*($6) + $8)
	
.LABEL $label$9
	*(($6 = ($3 + [4]))) = (*($6) + [12])
	$6 = *($9)
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22($3, $9)
	$6 = *($9)
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*($9 + [4]) = $6
	CALL $207($6)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
	return (unreachable)
	
.LABEL $label$5
	CALL $222($6)
}

int_32 .FUNC _ZN11CPokerLogic7compareEhh (int_32 $0, int_32 $1)
{
	return ((uint_32)$0 > (uint_32)$1)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	
.LOOP $label$1:
	$4 = ($1 + [-8])
	$3 = ($1 + [-4])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	$10 = int_32($0 >> [2])
	if ( ((uint_32)$10 <= (uint_32)[5]) ){ goto $label$15 }
	if ( ((int_32)$0 <= (int_32)[123]) ){ goto $label$14 }
	$9 = ($5 + (((int_32)$10 / (int_32)[2]) << [2]))
	if ( ((int_32)$0 < (int_32)[3997]) ){ goto $label$16 }
	$0 = (((int_32)$10 / (int_32)[4]) << [2])
	$8 = CALL $19($5, ($5 + $0), $9, ($9 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$16
	$0 = CALL int_32 *($9)((int_32 *($5)), (int_32 *($2)))
	$10 = CALL int_32 *($3)((int_32 *($9)), (int_32 *($2)))
	if ( ($0 == 0) ){ goto $label$19 }
	$0 = *($5)
	if ( ($10 == 0) ){ goto $label$18 }
	*($5) = *($3)
	*($3) = $0
	$8 = [1]
	goto $label$7 
	
.LABEL $label$19
	$8 = [0]
	if ( ($10 == 0) ){ goto $label$7 }
	$0 = *($9)
	*($9) = *($3)
	*($3) = $0
	$8 = [1]
	if ( (CALL int_32 *($9)((int_32 *($5)), (int_32 *($2))) == 0) ){ goto $label$7 }
	$0 = *($5)
	*($5) = *($9)
	*($9) = $0
	goto $label$17 
	
.LABEL $label$18
	*($5) = *($9)
	*($9) = $0
	$8 = [1]
	if ( (CALL int_32 *($3)((int_32 ($0 & [255])), (int_32 *($2))) == 0) ){ goto $label$7 }
	$0 = *($9)
	*($9) = *($3)
	*($3) = $0
	
.LABEL $label$17
	$8 = [2]
	goto $label$7 
	
.LABEL $label$15
	goto $label$6 
	
.LABEL $label$14
	CALL $20($5, $1, $2)
	return 
	
.LABEL $label$13
	if ( (CALL int_32 *($3)((int_32 *($5)), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = *($5)
	*($5) = *($3)
	*($3) = $2
	return 
	
.LABEL $label$12
	$9 = CALL int_32 *($5 + [4])((int_32 *($5)), (int_32 *($2)))
	$0 = CALL int_32 *($3)((int_32 *($5 + [4])), (int_32 *($2)))
	if ( ($9 == 0) ){ goto $label$9 }
	$9 = *($5)
	if ( ($0 == 0) ){ goto $label$8 }
	*($5) = *($3)
	*($3) = $9
	return 
	
.LABEL $label$11
	CALL $18($5, ($5 + [4]), ($5 + [8]), $3, $2)
	return 
	
.LABEL $label$10
	CALL $19($5, ($5 + [4]), ($5 + [8]), ($5 + [12]), $3, $2)
	return 
	
.LABEL $label$9
	if ( ($0 == 0) ){ goto $label$6 }
	$0 = ($5 + [4])
	$9 = *($0)
	*($0) = *($3)
	*($3) = $9
	if ( (CALL int_32 *($0)((int_32 *($5)), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = *($5)
	*($5) = *($0)
	*($0) = $2
	return 
	
.LABEL $label$8
	$0 = ($5 + [4])
	*($5) = *($0)
	*($0) = $9
	if ( (CALL int_32 *($3)((int_32 ($9 & [255])), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = *($0)
	*($0) = *($3)
	*($3) = $2
	return 
	
.LABEL $label$7
	if ( CALL int_32 *($5)((int_32 *($9)), (int_32 *($2))) ){ goto $label$21 }
	$0 = $4
	
.LOOP $label$24:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$23 }
	$10 = *($0)
	$0 = ($0 + [-4])
	if ( (CALL int_32 $10((int_32 *($9)), (int_32 *($2))) == 0) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$10 = ($5 + [4])
	if ( CALL int_32 *($5)((int_32 *($3)), (int_32 *($2))) ){ goto $label$25 }
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$6 }
	$10 = ($5 + [8])
	
.LOOP $label$27:
	$0 = ($10 + [-4])
	if ( CALL int_32 *($5)((int_32 *($0)), (int_32 *($2))) ){ goto $label$26 }
	$10 = ($10 + [4])
	if ( ((int_32)$1 != (int_32)$10) ){ goto $label$27 }
	goto $label$6 
	
.LABEL $label$26
	$9 = *($0)
	*($0) = *($3)
	*($3) = $9
	
.LABEL $label$25
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$6 }
	$9 = $3
	
.LOOP $label$28:
	$0 = ($10 + [-4])
	
.LOOP $label$29:
	$0 = ($0 + [4])
	if ( (CALL int_32 *($5)((int_32 *($0)), (int_32 *($2))) == 0) ){ goto $label$29 }
	$10 = ($0 + [4])
	
.LOOP $label$30:
	$9 = ($9 + [-4])
	if ( CALL int_32 *($5)((int_32 *($9)), (int_32 *($2))) ){ goto $label$30 }
	if ( ((uint_32)$0 >= (uint_32)$9) ){ goto $label$5 }
	$6 = *($0)
	*($0) = *($9)
	*($9) = $6
	goto $label$28 
	
.LABEL $label$22
	$6 = *($5)
	$10 = ($0 + [4])
	*($5) = *($10)
	*($10) = $6
	$8 = ($8 + [1])
	goto $label$20 
	
.LABEL $label$21
	$10 = $3
	
.LABEL $label$20
	$6 = ($5 + [4])
	if ( ((uint_32)$6 >= (uint_32)$10) ){ goto $label$31 }
	
.LOOP $label$32:
	$0 = ($6 + [-4])
	
.LOOP $label$33:
	$0 = ($0 + [4])
	if ( CALL int_32 *($0)((int_32 *($9)), (int_32 *($2))) ){ goto $label$33 }
	$6 = ($0 + [4])
	
.LOOP $label$34:
	$10 = ($10 + [-4])
	if ( (CALL int_32 *($10)((int_32 *($9)), (int_32 *($2))) == 0) ){ goto $label$34 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$35 }
	$7 = *($0)
	*($0) = *($10)
	*($10) = $7
	$9 = ( $10 ? $9 : ((int_32)$9 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$32 
	
.LABEL $label$35
	$6 = $0
	
.LABEL $label$31
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$36 }
	if ( (CALL int_32 *($9)((int_32 *($6)), (int_32 *($2))) == 0) ){ goto $label$36 }
	$0 = *($6)
	*($6) = *($9)
	*($9) = $0
	$8 = ($8 + [1])
	
.LABEL $label$36
	if ( $8 ){ goto $label$38 }
	$9 = CALL $21($5, $6, $2)
	$0 = ($6 + [4])
	if ( CALL $21($0, $1, $2) ){ goto $label$37 }
	if ( $9 ){ goto $label$2 }
	
.LABEL $label$38
	if ( ((int_32)($6 - $5) >= (int_32)($1 - $6)) ){ goto $label$3 }
	CALL $17($5, $6, $2)
	$0 = ($6 + [4])
	goto $label$2 
	
.LABEL $label$37
	$1 = $6
	$0 = $5
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $17(($6 + [4]), $1, $2)
	$1 = $6
	$0 = $5
	goto $label$1 
	$10
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN11CPokerLogicC2Ev (int_32 $0)
{
	*($0) = [20]
	return $0
}

void .FUNC $185 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1088])
	*(($9 = $10) + [24]) = *($1 + [8])
	$4 = *($1)
	CALL $187($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1152])
	$3 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [72])
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [96])
	$6 = *(($1 + [100]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$3
	$6 = ($3 + [16])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($9 + [12]) = $3
	*($9 + [8]) = $3
	*($9 + [16]) = ($3 + $6)
	CALL $142(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [128]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$8 }
	$3 = *($1 + [132])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($9 + [32]), $4)
	*(($1 + [132])) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, $2, ($9 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = CALL int_32 *($1)((int_32 *($0)), (int_32 *($4)))
	$5 = CALL int_32 *($2)((int_32 *($1)), (int_32 *($4)))
	if ( ($7 == 0) ){ goto $label$4 }
	$6 = *($0)
	if ( ($5 == 0) ){ goto $label$3 }
	*($0) = *($2)
	*($2) = $6
	$7 = [1]
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = *($1)
	*($1) = *($2)
	*($2) = $7
	$7 = [1]
	if ( (CALL int_32 *($1)((int_32 *($0)), (int_32 *($4))) == 0) ){ goto $label$1 }
	$7 = *($0)
	*($0) = *($1)
	*($1) = $7
	goto $label$2 
	
.LABEL $label$3
	*($0) = *($1)
	*($1) = $6
	$7 = [1]
	if ( (CALL int_32 *($2)((int_32 ($6 & [255])), (int_32 *($4))) == 0) ){ goto $label$1 }
	$7 = *($1)
	*($1) = *($2)
	*($2) = $7
	
.LABEL $label$2
	$7 = [2]
	
.LABEL $label$1
	if ( (CALL int_32 *($3)((int_32 *($2)), (int_32 *($4))) == 0) ){ goto $label$7 }
	$5 = *($2)
	*($2) = *($3)
	*($3) = $5
	if ( (CALL int_32 *($2)((int_32 *($1)), (int_32 *($4))) == 0) ){ goto $label$6 }
	$3 = *($1)
	*($1) = *($2)
	*($2) = $3
	if ( (CALL int_32 *($1)((int_32 *($0)), (int_32 *($4))) == 0) ){ goto $label$5 }
	$2 = *($0)
	*($0) = *($1)
	*($1) = $2
	$7 = ($7 + [3])
	
.LABEL $label$7
	return $7
	
.LABEL $label$6
	return ($7 + [1])
	
.LABEL $label$5
	return ($7 + [2])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = CALL $18($0, $1, $2, $3, $5)
	if ( (CALL int_32 *($4)((int_32 *($3)), (int_32 *($5))) == 0) ){ goto $label$4 }
	$6 = *($3)
	*($3) = *($4)
	*($4) = $6
	if ( (CALL int_32 *($3)((int_32 *($2)), (int_32 *($5))) == 0) ){ goto $label$3 }
	$4 = *($2)
	*($2) = *($3)
	*($3) = $4
	if ( (CALL int_32 *($2)((int_32 *($1)), (int_32 *($5))) == 0) ){ goto $label$2 }
	$3 = *($1)
	*($1) = *($2)
	*($2) = $3
	if ( (CALL int_32 *($1)((int_32 *($0)), (int_32 *($5))) == 0) ){ goto $label$1 }
	$3 = *($0)
	*($0) = *($1)
	*($1) = $3
	$7 = ($7 + [4])
	
.LABEL $label$4
	return $7
	
.LABEL $label$3
	return ($7 + [1])
	
.LABEL $label$2
	return ($7 + [2])
	
.LABEL $label$1
	return ($7 + [3])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [88]))), [1456])
	$4 = ((int_64)*($1 + [80]) + (int_64)*($6))
	*($1 + [80]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1504])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1536])
	$3 = *($1 + [96])
	$2 = ($1 + [100])
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$1 }
	$7 = [0]
	$6 = [8]
	$5 = ($1 + [96])
	
.LOOP $label$2:
	$3 = ($3 + $6)
	$1 = (*(*(($0 + [4])) + [16]) + $6)
	CALL eosio_assert(((int_64)*($1) == (int_64)*($3)), [1456])
	$4 = ((int_64)*($3) + (int_64)*(($1 + [-8])))
	*(($3 = ($3 + [-8]))) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1504])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [1536])
	$6 = ($6 + [16])
	$3 = *($5)
	$7 = ($7 + [1])
	if ( ($7 <= int_32((*($2) - $3) >> [4])) ){ goto $label$2 }
	
.LABEL $label$1
}

int_32 .FUNC $218 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $219($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($1 + [24])
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$5 = ([0] - $4)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [124]) == (int_32)$1), [784])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4229865212519383040, $2)
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), $3)
	$7 = CALL $116($1, $7)
	CALL eosio_assert(((int_32)*($7 + [124]) == (int_32)$1), [784])
	
.LABEL $label$3
	*($0 + [4]) = $7
	*($0) = $1
}

void .FUNC $180 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($1 + [24])
	$8 = *(($1 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$5 = ([0] - $4)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$1), [784])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3261841981285859328, $2)
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), $3)
	$7 = CALL $190($1, $7)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$1), [784])
	
.LABEL $label$3
	*($0 + [4]) = $7
	*($0) = $1
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $205([144])) + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)1398362884
	CALL eosio_assert([1], [1568])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [1376])
	*($4 + [104]) = [0]
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [124]) = $0
	CALL $138(($8 + [32]), $4)
	*($4 + [132]) = [-1]
	*($4 + [128]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [128])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $158($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [96])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [100])) = $6
	CALL $207($6)
	
.LABEL $label$15
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL $207(*(($5 + [32])))
	
.LABEL $label$16
	CALL $207($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [96])
	*([0] + [4]) = $17
	CALL void $0((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 *(*($0) + [8])))
	if ( ((int_64)*($4 + [32]) <= (int_64)0) ){ goto $label$1 }
	if ( ((int_64)*(($4 + [40])) != (int_64)1397703940) ){ goto $label$1 }
	$5 = *($0 + [4])
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [2672]
	$14 = (int_64)0
	
.LOOP $label$2:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$3 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$3
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$2 }
	$7 = *(($5 + [40]))
	$16 = *(($5 + [44]))
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$6 }
	$11 = ($16 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$7:
	if ( ((int_64)*(*($11)) == (int_64)$14) ){ goto $label$6 }
	$16 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($5 + [16])
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$9 }
	$11 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [784])
	if ( $11 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$11 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)4982871467403247616, $14)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $62($6, $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [784])
	
.LABEL $label$8
	$9 = *($11 + [8])
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	$5 = *(($0 + [4]))
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [2368]
	$14 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$13 > (uint_64)(int_64)8) ){ goto $label$15 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$11
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$10 }
	$10 = *($5 + [136])
	$7 = *(($5 + [40]))
	$16 = *(($5 + [44]))
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$16 }
	$11 = ($16 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$17:
	if ( ((int_64)*(*($11)) == (int_64)$14) ){ goto $label$16 }
	$16 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$6 = ($5 + [16])
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$20 }
	$11 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [784])
	if ( $11 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$11 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)4982871467403247616, $14)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$18 }
	$11 = CALL $62($6, $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [784])
	
.LABEL $label$19
	$10 = *($11 + [8])
	
.LABEL $label$18
	$13 = (int_64)0
	$15 = (int_64)59
	$11 = [2352]
	$14 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$26 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$6 = ($6 + [165])
	goto $label$24 
	
.LABEL $label$26
	$12 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$22
	$11 = ($11 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$14 = ((int_64)$12 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$21 }
	CALL $131(($17 + [80]), $14, $10, (int_64)5459781)
	if ( ((uint_64)*(($4 + [32])) <= (uint_64)((uint_64)*($17 + [80]) / (uint_64)$9)) ){ goto $label$1 }
	$9 = *(*(($0 + [4])) + [136])
	*($17) = *($1 + [16])
	CALL $64(($17 + [8]), $17)
	$11 = CALL $215(($17 + [8]), [2688])
	$13 = *($11)
	*($11) = (int_64)0
	$11 = ($11 + [8])
	$5 = *($11)
	*((($17 + [24]) + [8])) = $5
	*($11) = [0]
	*($17 + [24]) = $13
	$7 = (*($17 + [24]) & [1])
	$11 = ( $5 ? (($17 + [24]) | [1]) : $7 )
	$6 = [-1]
	
.LOOP $label$27:
	$16 = ($11 + $6)
	$8 = ($6 + [1])
	$6 = $8
	if ( *(($16 + [1])) ){ goto $label$27 }
	$10 = (CASTING uint_64)(uint_32 $8)
	$13 = (int_64)0
	$12 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$28:
	$15 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$10) ){ goto $label$29 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$33 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$32 
	
.LABEL $label$33
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$32
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$28 }
	*(($17 + [72])) = [0]
	*($17 + [48]) = $14
	*($17 + [40]) = $9
	*($17 + [56]) = (int_64)-1
	*($17 + [64]) = (int_64)0
	if ( ($7 == 0) ){ goto $label$34 }
	CALL $207($5)
	
.LABEL $label$34
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$35 }
	CALL $207(*($17 + [16]))
	
.LABEL $label$35
	$13 = *($1 + [8])
	$5 = *(($17 + [64]))
	$16 = *(($17 + [68]))
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$36 }
	$11 = ($16 + [-24])
	$8 = ([0] - $5)
	
.LOOP $label$37:
	if ( ((int_64)*(*($11)) == (int_64)$13) ){ goto $label$36 }
	$16 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$40 }
	$11 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)($17 + [40])), [784])
	if ( $11 ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$40
	$11 = CALL db_find_i64(*($17 + [40]), *(($17 + [48])), (int_64)-3020371635640205312, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$39 }
	CALL eosio_assert(((int_32)*(CALL $155(($17 + [40]), $11) + [8]) == (int_32)($17 + [40])), [784])
	goto $label$38 
	
.LABEL $label$39
	$13 = *(*(($0 + [4])) + [136])
	*($17 + [8]) = $1
	CALL $156(($17 + [24]), ($17 + [40]), $13, ($17 + [8]))
	
.LABEL $label$38
	CALL $78(($17 + [24]), $2, [2704])
	CALL $117($0, $1, ($17 + [24]), $3, $4)
	if ( ((*($17 + [24]) & [1]) == 0) ){ goto $label$41 }
	CALL $207(*($17 + [32]))
	
.LABEL $label$41
	$16 = *($17 + [64])
	if ( ($16 == 0) ){ goto $label$1 }
	$4 = ($17 + [68])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)$16) ){ goto $label$43 }
	
.LOOP $label$44:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$45 }
	CALL $207($6)
	
.LABEL $label$45
	if ( ((int_32)$16 != (int_32)$11) ){ goto $label$44 }
	$11 = *(($17 + [64]))
	goto $label$42 
	
.LABEL $label$43
	$11 = $16
	
.LABEL $label$42
	*($4) = $16
	CALL $207($11)
	
.LABEL $label$1
	*([0] + [4]) = ($17 + [96])
}

void .FUNC $114 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$4 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$4 = *((*($3) + $4))
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$0 = (*($2 + [4]) - *($2))
	$5 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL $205($0)
	*(($6 + [8])) = ($0 + ((int_32)$5 * (int_32)[12]))
	*($6) = $0
	*($6 + [4]) = $0
	$2 = *(($2 + [4]))
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $223($0, $5)
	$0 = ($0 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$4 }
	*($6 + [4]) = $0
	
.LABEL $label$3
	CALL void $3((int_32 $1), (int_64 $6), (int_32 $4))
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$5 }
	$0 = *($6 + [4])
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	$5 = ([0] - $2)
	$0 = ($0 + [-12])
	
.LOOP $label$8:
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL $207(*(($0 + [8])))
	
.LABEL $label$9
	$0 = ($0 + [-12])
	if ( ((int_32)($0 + $5) != (int_32)[-12]) ){ goto $label$8 }
	$0 = *($6)
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($6 + [4]) = $2
	CALL $207($0)
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $222($6)
}

void .FUNC $115 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$5 = *($0 + [8])
	$8 = (int_64)0
	$7 = (int_64)59
	$0 = [2624]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$0 = [608]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$12 }
	$6 = *($0)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*((($12 + [8]) + [28])) = *(($3 + [12]))
	*((($12 + [8]) + [24])) = *(($3 + [8]))
	*((($12 + [8]) + [20])) = *(($3 + [4]))
	*($12 + [16]) = $2
	*($12 + [8]) = $5
	*($12 + [24]) = *($3)
	CALL $223((($12 + [8]) + [32]), $4)
	*($12 + [64]) = $11
	*($12 + [56]) = $1
	*(($0 = CALL $205([16]))) = $5
	*($0 + [8]) = $9
	*((($12 + [56]) + [32])) = [0]
	$6 = ($0 + [16])
	*((($12 + [56]) + [24])) = $6
	*((($12 + [56]) + [20])) = $6
	*($12 + [72]) = $0
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$0 = *($12 + [40])
	$6 = ( *((($12 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($6 + [32])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = (($12 + [56]) + [28])
	
.LOOP $label$13:
	$0 = ($0 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$13 }
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $61($6, $0)
	$6 = *(($12 + [88]))
	$0 = *(($12 + [84]))
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$0 = [0]
	
.LABEL $label$14
	*($12 + [116]) = $0
	*($12 + [112]) = $0
	*($12 + [120]) = $6
	*($12 + [96]) = ($12 + [112])
	*($12 + [104]) = ($12 + [8])
	CALL $171(($12 + [104]), ($12 + [96]))
	CALL $172(($12 + [112]), ($12 + [56]))
	$0 = *($12 + [112])
	CALL send_inline($0, (*($12 + [116]) - $0))
	$0 = *($12 + [112])
	if ( ($0 == 0) ){ goto $label$16 }
	*($12 + [116]) = $0
	CALL $207($0)
	
.LABEL $label$16
	$0 = *($12 + [84])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($12 + [88])) = $0
	CALL $207($0)
	
.LABEL $label$17
	$0 = *($12 + [72])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($12 + [76])) = $0
	CALL $207($0)
	
.LABEL $label$18
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$19 }
	CALL $207(*(($12 + [48])))
	
.LABEL $label$19
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $207($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$4 = (*(($1 + [12])) - *($1 + [8]))
	$3 = ((int_32)$4 / (int_32)[12])
	$2 = *($1)
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$4 = CALL $205($4)
	*(($5 + [8])) = ($4 + ((int_32)$3 * (int_32)[12]))
	*($5) = $4
	*($5 + [4]) = $4
	$1 = *(($1 + [12]))
	$3 = *(($1 + [8]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $223($4, $3)
	$4 = ($4 + [12])
	$3 = ($3 + [12])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$3 }
	*($5 + [4]) = $4
	
.LABEL $label$2
	CALL $114($0, $2, $5)
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$4 }
	$4 = *($5 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	$3 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$7:
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $207(*(($4 + [8])))
	
.LABEL $label$8
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$7 }
	$4 = *($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = $1
	
.LABEL $label$5
	*($5 + [4]) = $1
	CALL $207($4)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $222($5)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($1) = *(*($0))
	CALL $223($11, (*(*($0 + [4])) + [12]))
	$2 = ($0 & [1])
	$0 = *($11)
	$3 = ( *($11 + [4]) ? uint_32($0 >> [1]) : $2 )
	$4 = *($11 + [8])
	$5 = ( $4 ? ($11 | [1]) : $2 )
	$0 = [0]
	$8 = [0]
	
.LOOP $label$1:
	$6 = (($11 + [16]) + $8)
	
.LOOP $label$4:
	if ( ((int_32)$0 >= (int_32)$3) ){ goto $label$3 }
	$7 = ($0 + [1])
	$9 = [-48]
	$0 = *(($5 + $0))
	if ( ((($0 + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	$9 = [-55]
	if ( ((uint_32)(($0 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($9 + $0)
	goto $label$5 
	
.LABEL $label$6
	$0 = ( ($0 + [-87]) ? [0] : ((($0 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$5
	$9 = ($0 << [4])
	*($6) = $9
	$0 = $7
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*($1 + [16]) = *($11 + [16])
	*(($1 + [24])) = *($11 + [24])
	*(($1 + [40])) = *((($11 + [16]) + [24]))
	*(($1 + [32])) = *(($11 + [32]))
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $207($4)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [48])
	return 
	
.LABEL $label$2
	$10 = [-48]
	$0 = *(($5 + $7))
	if ( ((($0 + [-48]) & [255]) <= [10]) ){ goto $label$11 }
	$10 = [-55]
	if ( ((uint_32)(($0 + [-65]) & [255]) >= (uint_32)[6]) ){ goto $label$10 }
	
.LABEL $label$11
	$10 = ($10 + $0)
	goto $label$9 
	
.LABEL $label$10
	$10 = ( ($0 + [-87]) ? [0] : ((($0 + [-97]) & [255]) <= [6]) )
	
.LABEL $label$9
	$0 = ($7 + [1])
	*($6) = ($10 | $9)
	$8 = ($8 + [1])
	goto $label$1 
}

int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
	$0 = *($2 + [24])
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [28])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$5 = *(($2 + [24]))
	$5 = ( *(($2 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	*($3) = ($5 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [32])
	*(($0 = *($1))) = (*($0) + [16])
	$5 = *($2 + [96])
	$3 = *(($2 + [100]))
	$6 = ($3 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$4 = *($1)
	$0 = *($4)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$0 = (($6 & [-16]) + $0)
	
.LABEL $label$4
	*($4) = $0
	*(($0 = *($1))) = (*($0) + [4])
	*($8 + [8]) = $2
	CALL $153(($8 + [8]), $1)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1216])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $72(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $151(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC _ZN12CNiuNiuLogic11GetCardTypeEPKhhPh (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [144])
	*([0] + [4]) = $22
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$4 }
	CALL memcpy(($22 + [16]), $1, $2)
	$1 = ($22 + [16])
	$5 = ($22 + [80])
	$17 = $2
	
.LOOP $label$5:
	$4 = *($1)
	$16 = CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4])))
	$4 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((int_32)$16 != (int_32)[4]) ){ goto $label$6 }
	$4 = ($4 + [15])
	
.LABEL $label$6
	*($5) = $4
	$5 = ($5 + [1])
	$1 = ($1 + [1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$5 }
	$14 = ($2 + [255])
	
.LOOP $label$8:
	$16 = ($14 & [255])
	if ( ($16 == 0) ){ goto $label$7 }
	$18 = [1]
	$17 = [0]
	$1 = ($22 + [16])
	$15 = ($22 + [80])
	$21 = *($22 + [80])
	
.LOOP $label$9:
	$19 = $17
	$17 = ($19 + [1])
	$4 = $15
	$15 = ($4 + [1])
	$5 = *($15)
	$9 = ($21 & [255])
	if ( ((uint_32)$9 >= (uint_32)$5) ){ goto $label$12 }
	$18 = ($1 + [1])
	$9 = *($18)
	$20 = *($1)
	$19 = $1
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	$9 = *(($1 + [1]))
	$20 = *($1)
	if ( ((uint_32)$20 >= (uint_32)$9) ){ goto $label$10 }
	$18 = (($22 + [16]) + $17)
	$19 = (($22 + [16]) + $19)
	goto $label$11 
	
.LABEL $label$13
	$21 = $5
	goto $label$10 
	
.LABEL $label$11
	*($19) = $9
	*($18) = $20
	*(($4 + [1])) = $21
	*($4) = $5
	$18 = [0]
	
.LABEL $label$10
	$1 = ($1 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$9 }
	$14 = ($14 + [-1])
	if ( (($18 & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$14 }
	CALL memcpy($3, ($22 + [16]), $2)
	
.LABEL $label$14
	$1 = [0]
	
.LOOP $label$16:
	$17 = (($22 + [16]) + $1)
	$4 = *($17)
	$5 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ){ goto $label$17 }
	if ( ((int_32)(( $5 ? [10] : ($5 <= [10]) ) & [254]) != (int_32)[10]) ){ goto $label$15 }
	
.LABEL $label$17
	$5 = *($17)
	CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)$2) ){ goto $label$16 }
	
.LABEL $label$15
	$16 = [0]
	CALL memset(($22 + [80]), [0], [5])
	$4 = *($22 + [16])
	*($22 + [80]) = $4
	$1 = ($2 + [-1])
	$5 = ($22 + [16])
	
.LOOP $label$18:
	$4 = ($4 & [255])
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$4 = CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4])))
	if ( ($17 <= [10]) ){ goto $label$21 }
	if ( ((int_32)$4 != (int_32)[4]) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = *($5)
	CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$19 }
	
.LABEL $label$20
	$16 = ($16 + [1])
	
.LABEL $label$19
	if ( ($1 == 0) ){ goto $label$22 }
	$1 = ($1 + [-1])
	$5 = ($5 + [1])
	$4 = *($5)
	goto $label$18 
	
.LABEL $label$22
	if ( ((int_32)$16 <= (int_32)[2]) ){ goto $label$30 }
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$29 }
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [17])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$29 }
	$1 = [12]
	if ( ($3 == 0) ){ goto $label$1 }
	*($3) = *($22 + [16])
	*($3 + [1]) = *($22 + [19])
	*($3 + [2]) = *($22 + [20])
	*($3 + [3]) = *($22 + [17])
	*($3 + [4]) = *($22 + [18])
	goto $label$1 
	
.LABEL $label$30
	if ( ((int_32)$16 == (int_32)[2]) ){ goto $label$27 }
	if ( ((int_32)$16 == (int_32)[1]) ){ goto $label$28 }
	$1 = [1]
	if ( $16 ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$29
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$31 }
	$1 = *($22 + [16])
	if ( ($3 == 0) ){ goto $label$32 }
	*($3) = $1
	*($3 + [1]) = *($22 + [19])
	*($3 + [2]) = *($22 + [20])
	*($3 + [3]) = *($22 + [17])
	*($3 + [4]) = *($22 + [18])
	
.LABEL $label$32
	$1 = ( [12] ? [13] : ((int_32)($1 & [255]) == (int_32)[66]) )
	goto $label$1 
	
.LABEL $label$31
	$5 = *($22 + [19])
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$4 = *($22 + [20])
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$1 = *(((((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10]) << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$28
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$26 }
	
.LABEL $label$27
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$33 }
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [17])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$33 }
	$1 = [12]
	if ( ($3 == 0) ){ goto $label$1 }
	*($3) = *($22 + [16])
	*($3 + [1]) = *($22 + [19])
	*($3 + [2]) = *($22 + [20])
	*($3 + [3]) = *($22 + [17])
	*($3 + [4]) = *($22 + [18])
	goto $label$1 
	
.LABEL $label$33
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$35 }
	$19 = (($22 + [16]) | [1])
	$5 = [0]
	$12 = [1]
	
.LOOP $label$36:
	$18 = (($22 + [16]) + $12)
	$4 = [0]
	$14 = [1]
	
.LOOP $label$37:
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$38 }
	$20 = (($22 + [16]) + $14)
	$17 = [0]
	
.LOOP $label$39:
	$1 = $17
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$40 }
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$40 }
	$15 = *($18)
	$17 = CALL int_32 $0((int_32 $15), (int_32 *(*($0))))
	$15 = CALL int_32 $0((int_32 $15), (int_32 *(*($0) + [4])))
	$17 = *(($19 + $1))
	$15 = CALL int_32 $0((int_32 $17), (int_32 *(*($0))))
	$21 = *($20)
	$9 = CALL int_32 $0((int_32 $21), (int_32 *(*($0))))
	if ( (((uint_32)((( [11] ? ( $9 ? [10] : ($9 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $21), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)$15 == (int_32)[4]) )) + ( [11] ? ( $15 ? [10] : ($15 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $17), (int_32 *(*($0) + [4]))) == (int_32)[4]) )) % (uint_32)[10]) == 0) ){ goto $label$34 }
	
.LABEL $label$40
	$17 = ($1 + [1])
	if ( ((int_32)($1 + [2]) < (int_32)$2) ){ goto $label$39 }
	
.LABEL $label$38
	$4 = ($4 + [1])
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)$2) ){ goto $label$37 }
	$5 = ($5 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)$2) ){ goto $label$36 }
	$8 = ($2 + [-1])
	$6 = (($22 + [16]) | [1])
	$12 = [0]
	$20 = [1]
	$15 = [0]
	
.LOOP $label$41:
	$18 = (($22 + [16]) + $20)
	$9 = [0]
	$21 = [1]
	
.LOOP $label$42:
	if ( ((int_32)$20 == (int_32)$21) ){ goto $label$43 }
	$5 = *($18)
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$19 = (($22 + [16]) + $21)
	$4 = *($19)
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$14 = ((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10])
	if ( ((int_32)$14 <= (int_32)$15) ){ goto $label$43 }
	$10 = *($19)
	$13 = *($18)
	$15 = [0]
	$1 = $12
	$5 = $9
	$4 = $6
	$17 = $8
	
.LOOP $label$44:
	if ( ($1 == 0) ){ goto $label$45 }
	if ( ($5 == 0) ){ goto $label$45 }
	*((($22 + [14]) + $15)) = *($4)
	$15 = ($15 + [1])
	
.LABEL $label$45
	$1 = ($1 + [-1])
	$5 = ($5 + [-1])
	$4 = ($4 + [1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$44 }
	$7 = *((($22 + [14]) + [1]))
	$11 = *($22 + [14])
	$15 = $14
	
.LABEL $label$43
	$9 = ($9 + [1])
	$21 = ($21 + [1])
	if ( ((int_32)$21 != (int_32)$2) ){ goto $label$42 }
	$12 = ($12 + [1])
	$20 = ($20 + [1])
	if ( ((int_32)$20 != (int_32)$2) ){ goto $label$41 }
	if ( ($3 == 0) ){ goto $label$46 }
	*($3) = *($22 + [16])
	*($3 + [1]) = $11
	*($3 + [2]) = $7
	*($3 + [3]) = $13
	*($3 + [4]) = $10
	
.LABEL $label$46
	if ( ((int_32)$16 != (int_32)[1]) ){ goto $label$47 }
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) == (int_32)[4]) ){ goto $label$26 }
	
.LABEL $label$47
	$5 = ($13 & [255])
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$4 = ($10 & [255])
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$1 = *(((((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10]) << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$35
	$1 = *($22 + [18])
	$5 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$4 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$1 = [11]
	$5 = *($22 + [20])
	$4 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$17 = *($22 + [19])
	$16 = CALL int_32 $0((int_32 $17), (int_32 *(*($0))))
	if ( (((uint_32)((( [11] ? ( $16 ? [10] : ($16 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $17), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $5 ? [10] : ($5 <= [10]) ) : ((int_32)$4 == (int_32)[4]) )) + ( [11] ? ( $4 ? [10] : ($4 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4]))) == (int_32)[4]) )) % (uint_32)[10]) == 0) ){ goto $label$25 }
	$12 = ($2 + [-2])
	$13 = (($22 + [16]) | [2])
	$14 = [0]
	$10 = ($3 + [3])
	$19 = [0]
	$9 = [2]
	
.LOOP $label$48:
	$20 = (($22 + [16]) + $9)
	$21 = [0]
	$15 = [2]
	
.LOOP $label$49:
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$50 }
	$5 = *($20)
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$18 = (($22 + [16]) + $15)
	$4 = *($18)
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10]) ){ goto $label$50 }
	$16 = [0]
	$5 = $21
	$17 = $12
	$4 = $13
	$1 = $14
	
.LOOP $label$51:
	if ( ($1 == 0) ){ goto $label$52 }
	if ( ($5 == 0) ){ goto $label$52 }
	*((($22 + [14]) + $16)) = *($4)
	$16 = ($16 + [1])
	
.LABEL $label$52
	$5 = ($5 + [-1])
	$4 = ($4 + [1])
	$1 = ($1 + [-1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$51 }
	$1 = *($22 + [14])
	if ( ((int_32)$19 > (int_32)((uint_32)$1 % (uint_32)[10])) ){ goto $label$50 }
	$5 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$19 = ( [1] ? ((uint_32)( $5 ? [10] : ($5 <= [10]) ) % (uint_32)[10]) : ((int_32)CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4]))) == (int_32)[4]) )
	if ( ($3 == 0) ){ goto $label$53 }
	*($3) = *($22 + [16])
	*(($3 + [1])) = *($20)
	*(($3 + [2])) = *($18)
	*($10) = *($22 + [17])
	*(($3 + [4])) = $1
	
.LABEL $label$53
	if ( ($19 == 0) ){ goto $label$2 }
	
.LABEL $label$50
	$21 = ($21 + [1])
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)$2) ){ goto $label$49 }
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)$2) ){ goto $label$48 }
	if ( ($19 == 0) ){ goto $label$26 }
	$1 = [1]
	$5 = ((int_32)$19 % (int_32)[10])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$1 }
	$1 = *((($5 << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$34
	$16 = ($2 + [-1])
	$17 = (($22 + [16]) | [1])
	$21 = ($17 + $1)
	$15 = [0]
	
.LOOP $label$54:
	if ( ($1 == 0) ){ goto $label$55 }
	if ( ($5 == 0) ){ goto $label$55 }
	if ( ($4 == 0) ){ goto $label$55 }
	*((($22 + [14]) + $15)) = *($17)
	$15 = ($15 + [1])
	
.LABEL $label$55
	$1 = ($1 + [-1])
	$4 = ($4 + [-1])
	$17 = ($17 + [1])
	$5 = ($5 + [-1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$54 }
	if ( ($3 == 0) ){ goto $label$24 }
	*($3) = *($18)
	*($3 + [1]) = *($20)
	*($3 + [2]) = *($21)
	$1 = *($22 + [16])
	*($3 + [3]) = $1
	*($3 + [4]) = *($22 + [14])
	goto $label$23 
	
.LABEL $label$26
	if ( ((int_32)CALL int_32 $0((int_32 *($22 + [16])), (int_32 *(*($0) + [4]))) != (int_32)[4]) ){ goto $label$57 }
	$9 = (($22 + [16]) | [1])
	$5 = [0]
	$20 = [1]
	
.LOOP $label$58:
	$21 = (($22 + [16]) + $20)
	$1 = [0]
	
.LOOP $label$59:
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$60 }
	$17 = *($21)
	$4 = CALL int_32 $0((int_32 $17), (int_32 *(*($0))))
	$17 = CALL int_32 $0((int_32 $17), (int_32 *(*($0) + [4])))
	$16 = *(($9 + $1))
	$15 = CALL int_32 $0((int_32 $16), (int_32 *(*($0))))
	if ( (((uint_32)(( [11] ? ( $15 ? [10] : ($15 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $16), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $4 ? [10] : ($4 <= [10]) ) : ((int_32)$17 == (int_32)[4]) )) % (uint_32)[10]) == 0) ){ goto $label$56 }
	
.LABEL $label$60
	$4 = ($1 + [2])
	$1 = ($1 + [1])
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$59 }
	$5 = ($5 + [1])
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)$2) ){ goto $label$58 }
	$7 = ($2 + [-1])
	$8 = (($22 + [16]) | [1])
	$14 = [0]
	$9 = [1]
	$16 = [0]
	
.LOOP $label$61:
	$20 = (($22 + [16]) + $9)
	$21 = [0]
	$15 = [1]
	
.LOOP $label$62:
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$63 }
	$5 = *($20)
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$18 = (($22 + [16]) + $15)
	$4 = *($18)
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$19 = ((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10])
	if ( ((int_32)$19 <= (int_32)$16) ){ goto $label$63 }
	$13 = *($18)
	$12 = *($20)
	$16 = [0]
	$1 = $14
	$5 = $21
	$4 = $8
	$17 = $7
	
.LOOP $label$64:
	if ( ($1 == 0) ){ goto $label$65 }
	if ( ($5 == 0) ){ goto $label$65 }
	*((($22 + [14]) + $16)) = *($4)
	$16 = ($16 + [1])
	
.LABEL $label$65
	$1 = ($1 + [-1])
	$5 = ($5 + [-1])
	$4 = ($4 + [1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$64 }
	$11 = *((($22 + [14]) + [1]))
	$10 = *($22 + [14])
	$16 = $19
	
.LABEL $label$63
	$21 = ($21 + [1])
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)$2) ){ goto $label$62 }
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$61 }
	if ( ($3 == 0) ){ goto $label$66 }
	*($3) = *($22 + [16])
	*($3 + [1]) = $10
	*($3 + [2]) = $11
	*($3 + [3]) = $12
	*($3 + [4]) = $13
	
.LABEL $label$66
	$5 = ($12 & [255])
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$4 = ($13 & [255])
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$1 = *(((((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10]) << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$57
	$12 = ($2 + [-1])
	$13 = (($22 + [16]) | [1])
	$14 = [0]
	$10 = ($22 + [83])
	$11 = ($22 + [82])
	$19 = [0]
	$9 = [1]
	
.LOOP $label$67:
	$20 = (($22 + [16]) + $9)
	$21 = [0]
	$15 = [1]
	
.LOOP $label$68:
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$69 }
	$5 = *($20)
	$1 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$5 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	$18 = (($22 + [16]) + $15)
	$4 = *($18)
	$17 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((uint_32)(( [11] ? ( $17 ? [10] : ($17 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$5 == (int_32)[4]) )) % (uint_32)[10]) ){ goto $label$69 }
	$16 = [0]
	$5 = $21
	$17 = $12
	$4 = $13
	$1 = $14
	
.LOOP $label$70:
	if ( ($1 == 0) ){ goto $label$71 }
	if ( ($5 == 0) ){ goto $label$71 }
	*((($22 + [14]) + $16)) = *($4)
	$16 = ($16 + [1])
	
.LABEL $label$71
	$5 = ($5 + [-1])
	$4 = ($4 + [1])
	$1 = ($1 + [-1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$70 }
	$1 = *($22 + [14])
	$4 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$17 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$5 = *((($22 + [14]) + [1]))
	$16 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	if ( ((int_32)$19 > (int_32)((uint_32)(( [11] ? ( $16 ? [10] : ($16 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $4 ? [10] : ($4 <= [10]) ) : ((int_32)$17 == (int_32)[4]) )) % (uint_32)[10])) ){ goto $label$69 }
	$4 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$16 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$17 = CALL int_32 $0((int_32 $5), (int_32 *(*($0))))
	$19 = CALL int_32 $0((int_32 $5), (int_32 *(*($0) + [4])))
	*($10) = $1
	*((($22 + [80]) + [1])) = *($18)
	*($11) = *($20)
	*($22 + [80]) = *($22 + [16])
	*((($22 + [80]) + [4])) = $5
	$19 = (( [1] ? ((uint_32)( $17 ? [10] : ($17 <= [10]) ) % (uint_32)[10]) : ((int_32)$19 == (int_32)[4]) ) + ( [11] ? ( $4 ? [10] : ($4 <= [10]) ) : ((int_32)$16 == (int_32)[4]) ))
	if ( ($3 == 0) ){ goto $label$72 }
	CALL memcpy($3, ($22 + [80]), $2)
	
.LABEL $label$72
	if ( ($19 == 0) ){ goto $label$2 }
	
.LABEL $label$69
	$21 = ($21 + [1])
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)$2) ){ goto $label$68 }
	$14 = ($14 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)$2) ){ goto $label$67 }
	if ( ($19 == 0) ){ goto $label$3 }
	$1 = [1]
	$5 = ((int_32)$19 % (int_32)[10])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$1 }
	$1 = *((($5 << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$56
	$17 = ($2 + [-1])
	$4 = (($22 + [16]) | [1])
	$15 = ($4 + $1)
	$16 = [0]
	
.LOOP $label$73:
	if ( ($5 == 0) ){ goto $label$74 }
	if ( ($1 == 0) ){ goto $label$74 }
	*((($22 + [14]) + $16)) = *($4)
	$16 = ($16 + [1])
	
.LABEL $label$74
	$1 = ($1 + [-1])
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	$17 = ($17 + [-1])
	if ( $17 ){ goto $label$73 }
	$1 = *($22 + [16])
	if ( ($3 == 0) ){ goto $label$75 }
	*($3) = $1
	*($3 + [1]) = *($22 + [14])
	*($3 + [2]) = *($22 + [15])
	*($3 + [3]) = *($21)
	*($3 + [4]) = *($15)
	
.LABEL $label$75
	$1 = ( [12] ? [13] : ((int_32)($1 & [255]) == (int_32)[66]) )
	goto $label$1 
	
.LABEL $label$25
	if ( ($3 == 0) ){ goto $label$1 }
	*($3) = *($22 + [18])
	*($3 + [2]) = *($22 + [20])
	*($3 + [3]) = *($22 + [16])
	*($3 + [4]) = *($22 + [17])
	goto $label$1 
	
.LABEL $label$24
	$1 = *($22 + [16])
	
.LABEL $label$23
	$1 = ( [12] ? [13] : ((int_32)($1 & [255]) == (int_32)[66]) )
	goto $label$1 
	
.LABEL $label$4
	CALL __assert_fail([192], [208], [112], [240])
	
.LABEL $label$3
	$18 = [0]
	$12 = ($22 + [83])
	$13 = ($22 + [82])
	$17 = [0]
	
.LOOP $label$76:
	$20 = (($22 + [16]) + $17)
	$16 = [0]
	
.LOOP $label$77:
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$78 }
	$9 = (($22 + [16]) + $16)
	$5 = [0]
	
.LOOP $label$79:
	if ( ((int_32)$5 == (int_32)$17) ){ goto $label$80 }
	if ( ((int_32)$5 == (int_32)$16) ){ goto $label$80 }
	$4 = *($20)
	$1 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$4 = CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4])))
	$15 = (($22 + [16]) + $5)
	$1 = *($15)
	$4 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$15 = *($9)
	$21 = CALL int_32 $0((int_32 $15), (int_32 *(*($0))))
	if ( ((uint_32)((( [11] ? ( $21 ? [10] : ($21 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $15), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $1 ? [10] : ($1 <= [10]) ) : ((int_32)$4 == (int_32)[4]) )) + ( [11] ? ( $4 ? [10] : ($4 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4]))) == (int_32)[4]) )) % (uint_32)[10]) ){ goto $label$80 }
	$1 = [0]
	$4 = [0]
	
.LOOP $label$81:
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$82 }
	if ( ((int_32)$17 == (int_32)$1) ){ goto $label$82 }
	if ( ((int_32)$16 == (int_32)$1) ){ goto $label$82 }
	*((($22 + [14]) + $4)) = *((($22 + [16]) + $1))
	$4 = ($4 + [1])
	
.LABEL $label$82
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$81 }
	$1 = *($22 + [14])
	$21 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$19 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$4 = *((($22 + [14]) + [1]))
	$14 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	if ( ((int_32)$18 > (int_32)((uint_32)(( [11] ? ( $14 ? [10] : ($14 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4]))) == (int_32)[4]) ) + ( [11] ? ( $21 ? [10] : ($21 <= [10]) ) : ((int_32)$19 == (int_32)[4]) )) % (uint_32)[10])) ){ goto $label$80 }
	$21 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	$19 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$18 = CALL int_32 $0((int_32 $4), (int_32 *(*($0))))
	$14 = CALL int_32 $0((int_32 $4), (int_32 *(*($0) + [4])))
	*($12) = $1
	*((($22 + [80]) + [1])) = *($9)
	*($13) = *($15)
	*($22 + [80]) = *($20)
	*((($22 + [80]) + [4])) = $4
	$18 = (( [1] ? ((uint_32)( $18 ? [10] : ($18 <= [10]) ) % (uint_32)[10]) : ((int_32)$14 == (int_32)[4]) ) + ( [11] ? ( $21 ? [10] : ($21 <= [10]) ) : ((int_32)$19 == (int_32)[4]) ))
	if ( ($3 == 0) ){ goto $label$83 }
	CALL memcpy($3, ($22 + [80]), $2)
	
.LABEL $label$83
	if ( ($18 == 0) ){ goto $label$2 }
	
.LABEL $label$80
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$2) ){ goto $label$79 }
	
.LABEL $label$78
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)$2) ){ goto $label$77 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)$2) ){ goto $label$76 }
	$1 = [1]
	if ( ($18 == 0) ){ goto $label$1 }
	$5 = ((int_32)$18 % (int_32)[10])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$1 }
	$1 = *((($5 << [2]) + [144]))
	goto $label$1 
	
.LABEL $label$2
	$1 = [11]
	
.LABEL $label$1
	*([0] + [4]) = ($22 + [144])
	(unreachable)
	return ($1 & [255])
}

int_32 .FUNC _ZN12CNiuNiuLogic7RetTypeEi (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 % (int_32)[10])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$1 }
	return *((($1 << [2]) + [144]))
	
.LABEL $label$1
	return [1]
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = int_32(($1 - $0) >> [2])
	if ( ((uint_32)$5 > (uint_32)[5]) ){ goto $label$8 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$11
	$5 = ($1 + [-4])
	if ( (CALL int_32 *($5)((int_32 *($0)), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = *($0)
	*($0) = *($5)
	*($5) = $2
	goto $label$1 
	
.LABEL $label$10
	$4 = CALL int_32 *($0 + [4])((int_32 *($0)), (int_32 *($2)))
	$5 = ($1 + [-4])
	$3 = CALL int_32 *($5)((int_32 *($0 + [4])), (int_32 *($2)))
	if ( ($4 == 0) ){ goto $label$6 }
	$4 = *($0)
	if ( ($3 == 0) ){ goto $label$4 }
	*($0) = *($5)
	*($5) = $4
	goto $label$1 
	
.LABEL $label$9
	CALL $19($0, ($0 + [4]), ($0 + [8]), ($0 + [12]), ($1 + [-4]), $2)
	goto $label$1 
	
.LABEL $label$8
	$8 = CALL int_32 *($0 + [4])((int_32 *($0)), (int_32 *($2)))
	$5 = CALL int_32 *($0 + [8])((int_32 *($0 + [4])), (int_32 *($2)))
	if ( ($8 == 0) ){ goto $label$5 }
	$8 = *($0)
	if ( ($5 == 0) ){ goto $label$3 }
	$5 = ($0 + [8])
	*($0) = *($5)
	*($5) = $8
	goto $label$2 
	
.LABEL $label$7
	CALL $18($0, ($0 + [4]), ($0 + [8]), ($1 + [-4]), $2)
	goto $label$1 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($0 + [4])
	$3 = *($4)
	*($4) = *($5)
	*($5) = $3
	if ( (CALL int_32 *($4)((int_32 *($0)), (int_32 *($2))) == 0) ){ goto $label$1 }
	$5 = *($0)
	*($0) = *($4)
	*($4) = $5
	goto $label$1 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$2 }
	$8 = ($0 + [4])
	$5 = *($8)
	$4 = ($0 + [8])
	$3 = *($4)
	*($8) = $3
	*($4) = $5
	if ( (CALL int_32 ($3 & [255])((int_32 *($0)), (int_32 *($2))) == 0) ){ goto $label$2 }
	$5 = *($0)
	*($0) = *($8)
	*($8) = $5
	goto $label$2 
	
.LABEL $label$4
	$3 = ($0 + [4])
	*($0) = *($3)
	*($3) = $4
	if ( (CALL int_32 *($5)((int_32 ($4 & [255])), (int_32 *($2))) == 0) ){ goto $label$1 }
	$0 = *($3)
	*($3) = *($5)
	*($5) = $0
	goto $label$1 
	
.LABEL $label$3
	$5 = ($0 + [4])
	*($0) = *($5)
	*($5) = $8
	$4 = ($0 + [8])
	if ( (CALL int_32 *($4)((int_32 ($8 & [255])), (int_32 *($2))) == 0) ){ goto $label$2 }
	$8 = *($5)
	*($5) = *($4)
	*($4) = $8
	
.LABEL $label$2
	$8 = ($0 + [12])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$14 }
	$5 = ($0 + [8])
	$6 = [0]
	$7 = [0]
	
.LOOP $label$15:
	$3 = $8
	if ( (CALL int_32 *($3)((int_32 *($5)), (int_32 *($2))) == 0) ){ goto $label$16 }
	$4 = *($3)
	$8 = $6
	
.LOOP $label$19:
	*((($5 = ($0 + $8)) + [12])) = *(($5 + [8]))
	if ( ((int_32)$8 == (int_32)[-8]) ){ goto $label$18 }
	$8 = ($8 + [-4])
	if ( CALL int_32 ($4 & [255])((int_32 *(($5 + [4]))), (int_32 *($2))) ){ goto $label$19 }
	$8 = (($0 + $8) + [12])
	goto $label$17 
	
.LABEL $label$18
	$8 = $0
	
.LABEL $label$17
	*($8) = $4
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$13 }
	
.LABEL $label$16
	$6 = ($6 + [4])
	$5 = $3
	$8 = ($3 + [4])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = [1]
	goto $label$12 
	
.LABEL $label$13
	$5 = ((int_32)($3 + [4]) == (int_32)$1)
	$8 = [0]
	
.LABEL $label$12
	$8 = ($5 | $8)
	
.LABEL $label$1
	$5
	return ($8 & [1])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = CALL int_32 *($0 + [4])((int_32 *($0)), (int_32 *($2)))
	$5 = CALL int_32 *($0 + [8])((int_32 *($0 + [4])), (int_32 *($2)))
	if ( ($7 == 0) ){ goto $label$3 }
	$7 = *($0)
	if ( ($5 == 0) ){ goto $label$2 }
	$5 = ($0 + [8])
	*($0) = *($5)
	*($5) = $7
	goto $label$1 
	
.LABEL $label$3
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = ($0 + [4])
	$5 = *($7)
	$4 = ($0 + [8])
	$3 = *($4)
	*($7) = $3
	*($4) = $5
	if ( (CALL int_32 ($3 & [255])((int_32 *($0)), (int_32 *($2))) == 0) ){ goto $label$1 }
	$5 = *($0)
	*($0) = *($7)
	*($7) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = ($0 + [4])
	*($0) = *($5)
	*($5) = $7
	$4 = ($0 + [8])
	if ( (CALL int_32 *($4)((int_32 ($7 & [255])), (int_32 *($2))) == 0) ){ goto $label$1 }
	$7 = *($5)
	*($5) = *($4)
	*($4) = $7
	
.LABEL $label$1
	$7 = ($0 + [12])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$4 }
	$5 = ($0 + [8])
	$6 = [0]
	
.LOOP $label$5:
	$3 = $7
	if ( (CALL int_32 *($3)((int_32 *($5)), (int_32 *($2))) == 0) ){ goto $label$6 }
	$4 = *($3)
	$7 = $6
	
.LOOP $label$9:
	*((($5 = ($0 + $7)) + [12])) = *(($5 + [8]))
	if ( ((int_32)$7 == (int_32)[-8]) ){ goto $label$8 }
	$7 = ($7 + [-4])
	if ( CALL int_32 ($4 & [255])((int_32 *(($5 + [4]))), (int_32 *($2))) ){ goto $label$9 }
	$7 = (($0 + $7) + [12])
	goto $label$7 
	
.LABEL $label$8
	$7 = $0
	
.LABEL $label$7
	*($7) = $4
	
.LABEL $label$6
	$6 = ($6 + [4])
	$5 = $3
	$7 = ($3 + [4])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $205($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $207($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $7) / (int_32)[12])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $7) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$7 = ($7 << [1])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$4 * (int_32)[12]))) + [8]) = [0]
	*($7) = (int_64)0
	$4 = (*($1 + [4]) - *($1))
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL $205($4)
	*($7) = $2
	*(($3 = ($7 + [4]))) = $2
	*(($7 + [8])) = ($2 + $4)
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $4, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	$2 = ($6 + ((int_32)$5 * (int_32)[12]))
	$3 = ($7 + [12])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$4 = ([0] - $1)
	$1 = ($5 + [-12])
	
.LOOP $label$9:
	*(($5 = ($7 + [-12]))) = (int_64)0
	*(($6 = ($7 + [-4]))) = [0]
	*($5) = *($1)
	*(($7 + [-8])) = *(($1 + [4]))
	$5 = ($1 + [8])
	*($6) = *($5)
	*($5) = [0]
	*($1) = (int_64)0
	$7 = ($7 + [-12])
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $4) != (int_32)[-12]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	$5 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$11:
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$12 }
	*(($1 + [4])) = $7
	CALL $207($7)
	
.LABEL $label$12
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $5) != (int_32)[-12]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $207($6)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $222($7)
	(unreachable)
}

int_32 .FUNC _ZN12CNiuNiuLogicC2Ev (int_32 $0)
{
	*($0) = [108]
	return $0
}

void .FUNC _ZN11CPokerLogic9SubVectorERKNSt3__16vectorIhNS0_9allocatorIhEEEES6_RS4_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$9) ){ goto $label$1 }
	$8 = [0]
	$6 = ($2 + [4])
	$7 = ($3 + [8])
	
.LOOP $label$2:
	$10 = ($9 + $8)
	$4 = *($2)
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$4 }
	$5 = ($9 - $4)
	$9 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*($10) == (int_32)*(($4 + $9))) ){ goto $label$3 }
	$9 = ($9 + [1])
	if ( ($9 <= $5) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = ($3 + [4])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)*($7)) ){ goto $label$6 }
	*($4) = *($10)
	*($9) = (*($9) + [1])
	goto $label$3 
	
.LABEL $label$6
	CALL $23($3, $10)
	
.LABEL $label$3
	$9 = *($1)
	$8 = ($8 + [1])
	if ( ($8 <= (*(($1 + [4])) - $9)) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC _ZN12CNiuNiuLogic14RandCardListExEPhhPFivE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = CALL $206($2)
	CALL memcpy($4, $1, $2)
	$7 = [0]
	$6 = $2
	
.LOOP $label$1:
	$5 = ($4 + (((int_32)CALL int_32 $3() % (int_32)$6) & [255]))
	*(($1 + $7)) = *($5)
	*($5) = *((($4 + $6) + [-1]))
	$6 = ($6 + [-1])
	$7 = ($7 + [1])
	if ( ((uint_32)$2 > (uint_32)$7) ){ goto $label$1 }
	CALL $208($4)
}

void .FUNC _ZN12CNiuNiuLogic12RandCardListEPhhPFivE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL memcpy($7, [48], [52])
	$6 = [0]
	$5 = [51]
	
.LOOP $label$1:
	$4 = ($7 + (((int_32)CALL int_32 $3() % (int_32)($5 + [1])) & [255]))
	*(($1 + $6)) = *($4)
	*($4) = *(($7 + $5))
	$5 = ($5 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $2) ){ goto $label$1 }
	*([0] + [4]) = ($7 + [64])
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $205([40])) + [24]) = $1
	CALL $103(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $93(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $207($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $67($4)
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $67($4)
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [160]))
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($4 + [4]))
	CALL eosio_assert([1], [1216])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)4982871467403247616, *(*($0 + [8])), $3, $5, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1040])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [1088])
	*($1 + [8]) = *(*($3))
	*($1 + [16]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1152])
	CALL eosio_assert([1], [1216])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $207($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $205($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $222($0)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$2 = *($0)
	$5 = *($3 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [56])) = *(($5 + [24]))
	*(($1 + [48])) = *(($5 + [16]))
	*(($1 + [40])) = *(($5 + [8]))
	$5 = *($3 + [12])
	$4 = ($1 + [64])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	CALL $77($4, *($5), *($5 + [4]))
	
.LABEL $label$1
	*($1 + [16]) = *(*($3 + [16]))
	*($1 + [20]) = *(*($3 + [20]))
	*($1 + [24]) = *(*($3 + [24]))
	$3 = *($3 + [28])
	$5 = ($1 + [88])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	CALL $105($5, *($3), *($3 + [4]))
	
.LABEL $label$2
	*($7) = [0]
	CALL $70($7, $1)
	$5 = *($7)
	if ( ($5 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($3 + $5)
	CALL $71($7, $1)
	$6 = *($1)
	*($1 + [160]) = CALL db_store_i64(*($2 + [8]), (int_64)-7850577621849997312, *(*($0 + [8])), $6, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1904])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $205([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [720])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [720])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $216($1, $2, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$3:
	CALL $224($7, $1, $6, ($5 - $6), $1)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$5 }
	*($6) = *($7)
	$6 = ($7 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($7) = [0]
	*($7 + [4]) = [0]
	*($4) = (*($4) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $112($0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL $207(*(($7 + [8])))
	
.LABEL $label$4
	$6 = ($5 + [1])
	$5 = CALL $216($1, $2, $6)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL $224($7, $1, $6, [-1], $1)
	$1 = ($0 + [4])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($6) = *($7)
	$6 = ($7 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($7) = [0]
	*($7 + [4]) = [0]
	*($1) = (*($1) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $112($0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL $207(*($7 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	*($0 + [48]) = $1
	$1 = *($2)
	CALL $111(*($2 + [4]), $0)
	CALL eosio_assert([1], [1216])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1216])
	CALL memcpy(($4 | [8]), ($0 + [16]), [32])
	$3 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)-4111921522686296064, *(*($2 + [8])), $3, $4, [40])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [48])
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $205([64])
	CALL $109($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $110(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $207($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $205(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $207($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([17048])
}

void .FUNC $219 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $205($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $207($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	*(($8 = (($15 + [64]) + [8]))) = *(($3 + [8]))
	*($15 + [64]) = *($3)
	CALL $223(($15 + [48]), $4)
	*((($15 + [16]) + [8])) = *($8)
	*($15 + [16]) = *($15 + [64])
	$8 = CALL $194($0, $1, $2, ($15 + [16]), ($15 + [48]))
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $207(*($15 + [56]))
	
.LABEL $label$1
	if ( ($8 == 0) ){ goto $label$2 }
	$13 = (int_64)0
	$14 = (int_64)59
	$8 = [8288]
	$9 = (int_64)0
	
.LOOP $label$3:
	$12 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$4 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$9 = ((int_64)$12 | (int_64)$9)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$3 }
	$6 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$7 }
	$8 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$8:
	if ( ((int_64)*(*($8)) == (int_64)$9) ){ goto $label$7 }
	$10 = $8
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$12 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [784])
	if ( $8 ){ goto $label$11 }
	$11 = (int_64)0
	goto $label$9 
	
.LABEL $label$12
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $62($5, $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [784])
	
.LABEL $label$11
	$11 = *($8 + [8])
	goto $label$9 
	
.LABEL $label$10
	$11 = (int_64)0
	
.LABEL $label$9
	$13 = (int_64)0
	$12 = (int_64)59
	$8 = [8304]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$18 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$14 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$9 = ((int_64)$14 | (int_64)$9)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	CALL eosio_assert(((int_64)$11 == (int_64)$9), [8320])
	*(($8 = (($15 + [32]) + [8]))) = *(($3 + [8]))
	$13 = *($3)
	*(($15 + [12])) = *((($15 + [32]) + [12]))
	*(($15 + [8])) = *($8)
	*($15 + [32]) = $13
	*($15 + [4]) = *($15 + [36])
	*($15) = *($15 + [32])
	CALL $181($0, $1, $2, $15, $4)
	
.LABEL $label$2
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [1568])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [1376])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $179(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $193(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $207(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$9 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [752]
	$12 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$7 }
	$4 = *($9)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$3
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$2 }
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [768]
	$14 = (int_64)0
	
.LOOP $label$8:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$9 }
	$4 = *($9)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$9
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$8 }
	$5 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$12 }
	$9 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$13:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$12 }
	$8 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$4 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$16 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [784])
	if ( $9 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $62($4, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [784])
	
.LABEL $label$15
	$14 = *($9 + [8])
	
.LABEL $label$14
	$9 = CALL has_auth($14)
	
.LABEL $label$1
	CALL eosio_assert($9, [848])
	if ( ((int_64)$1 <= (int_64)4941016444039238143) ){ goto $label$32 }
	if ( ((int_64)$1 == (int_64)4941024703289491456) ){ goto $label$31 }
	if ( ((int_64)$1 == (int_64)4941024698494734848) ){ goto $label$30 }
	if ( ((int_64)$1 != (int_64)4941016444039238144) ){ goto $label$28 }
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	$11 = *(($0 + [8]))
	*($15 + [40]) = $11
	*($15 + [48]) = $2
	*($15 + [64]) = (int_64)0
	$9 = CALL db_lowerbound_i64($11, $2, (int_64)-4111921522686296064, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$33 }
	CALL $107(($15 + [40]), $9)
	*($15) = $2
	CALL $64(($15 + [8]), $15)
	$9 = CALL $215(($15 + [8]), [2304])
	$11 = *($9)
	*($9) = (int_64)0
	$9 = ($9 + [8])
	$5 = *($9)
	*((($15 + [24]) + [8])) = $5
	*($9) = [0]
	*($15 + [24]) = $11
	$7 = (*($15 + [24]) & [1])
	$9 = ( $5 ? (($15 + [24]) | [1]) : $7 )
	$4 = [-1]
	
.LOOP $label$34:
	$8 = ($9 + $4)
	$6 = ($4 + [1])
	$4 = $6
	if ( *(($8 + [1])) ){ goto $label$34 }
	$14 = (CASTING uint_64)(uint_32 $6)
	$11 = (int_64)0
	$13 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$35:
	$10 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$14) ){ goto $label$36 }
	$4 = *($9)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$4 = ($4 + [165])
	goto $label$37 
	
.LABEL $label$38
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$40 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$39 
	
.LABEL $label$40
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$39
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$35 }
	CALL $99($0, $12, (int_64)0)
	if ( ($7 == 0) ){ goto $label$41 }
	CALL $207($5)
	
.LABEL $label$41
	if ( ((*($15 + [8]) & [1]) == 0) ){ goto $label$42 }
	CALL $207(*($15 + [16]))
	
.LABEL $label$42
	$2 = *(($15 + [48]))
	$11 = *($15 + [40])
	
.LABEL $label$33
	$9 = CALL db_lowerbound_i64($11, $2, (int_64)-4111921522686296064, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$43 }
	$4 = CALL $107(($15 + [40]), $9)
	
.LOOP $label$44:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$9 = [0]
	$8 = CALL db_next_i64(*($4 + [52]), ($15 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$45 }
	$9 = CALL $107(($15 + [40]), $8)
	
.LABEL $label$45
	CALL $184(($15 + [40]), $4)
	$4 = $9
	if ( $9 ){ goto $label$44 }
	
.LABEL $label$43
	$8 = *($15 + [64])
	if ( ($8 == 0) ){ goto $label$17 }
	$6 = ($15 + [68])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$27 }
	
.LOOP $label$46:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$47 }
	CALL $207($4)
	
.LABEL $label$47
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$46 }
	$9 = *(($15 + [64]))
	goto $label$26 
	
.LABEL $label$32
	if ( ((int_64)$1 == (int_64)4941016443754278912) ){ goto $label$29 }
	if ( ((int_64)$1 != (int_64)4941016443896463360) ){ goto $label$28 }
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	$11 = *(($0 + [8]))
	*($15 + [40]) = $11
	*($15 + [48]) = $2
	*($15 + [64]) = (int_64)0
	$9 = CALL db_lowerbound_i64($11, $2, (int_64)-7850577621849997312, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$48 }
	$9 = CALL $86(($15 + [40]), $9)
	
.LOOP $label$49:
	if ( ((uint_64)*($9) >= (uint_64)$3) ){ goto $label$48 }
	$4 = [0]
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [1968])
	CALL eosio_assert($8, [2016])
	$8 = CALL db_next_i64(*($9 + [160]), ($15 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$50 }
	$4 = CALL $86(($15 + [40]), $8)
	
.LABEL $label$50
	CALL $100(($15 + [40]), $9)
	$9 = $4
	if ( $4 ){ goto $label$49 }
	
.LABEL $label$48
	$8 = *($15 + [64])
	if ( ($8 == 0) ){ goto $label$17 }
	$6 = ($15 + [68])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$51:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$52 }
	CALL $67($4)
	CALL $207($4)
	
.LABEL $label$52
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$51 }
	$9 = *(($15 + [64]))
	goto $label$24 
	
.LABEL $label$31
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	*($15 + [64]) = (int_64)0
	$11 = *(($0 + [8]))
	*($15 + [40]) = $11
	*($15 + [48]) = $2
	$9 = CALL db_find_i64($11, $2, (int_64)-7850577621849997312, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$53 }
	$9 = CALL $86(($15 + [40]), $9)
	CALL eosio_assert(((int_32)*($9 + [156]) == (int_32)($15 + [40])), [784])
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$4 = CALL db_next_i64(*($9 + [160]), ($15 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$54 }
	CALL $86(($15 + [40]), $4)
	
.LABEL $label$54
	CALL $100(($15 + [40]), $9)
	
.LABEL $label$53
	$8 = *($15 + [64])
	if ( ($8 == 0) ){ goto $label$17 }
	$6 = ($15 + [68])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$23 }
	
.LOOP $label$55:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$56 }
	CALL $67($4)
	CALL $207($4)
	
.LABEL $label$56
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$55 }
	$9 = *(($15 + [64]))
	goto $label$22 
	
.LABEL $label$30
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	$11 = *(($0 + [8]))
	*($15 + [40]) = $11
	*($15 + [48]) = $2
	*($15 + [64]) = (int_64)0
	$9 = CALL db_lowerbound_i64($11, $2, (int_64)3966955352204771328, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$57 }
	$4 = CALL $122(($15 + [40]), $9)
	
.LOOP $label$58:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$9 = [0]
	$8 = CALL db_next_i64(*($4 + [252]), ($15 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$59 }
	$9 = CALL $122(($15 + [40]), $8)
	
.LABEL $label$59
	CALL $123(($15 + [40]), $4)
	$4 = $9
	if ( $9 ){ goto $label$58 }
	
.LABEL $label$57
	$8 = *($15 + [64])
	if ( ($8 == 0) ){ goto $label$17 }
	$6 = ($15 + [68])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$60:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$61 }
	CALL $125($4)
	CALL $207($4)
	
.LABEL $label$61
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$60 }
	$9 = *(($15 + [64]))
	goto $label$20 
	
.LABEL $label$29
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	$11 = *(($0 + [8]))
	*($15 + [40]) = $11
	*($15 + [48]) = $2
	*($15 + [64]) = (int_64)0
	*($15 + [76]) = [0]
	$9 = CALL db_lowerbound_i64($11, $2, (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$62 }
	$4 = CALL $116(($15 + [40]), $9)
	
.LOOP $label$63:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$9 = [0]
	$8 = CALL db_next_i64(*($4 + [128]), ($15 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$64 }
	$9 = CALL $116(($15 + [40]), $8)
	
.LABEL $label$64
	CALL $127(($15 + [40]), $4)
	$4 = $9
	if ( $9 ){ goto $label$63 }
	
.LABEL $label$62
	$6 = *($15 + [64])
	if ( ($6 == 0) ){ goto $label$17 }
	$0 = ($15 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$65:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$66 }
	$8 = *($9 + [96])
	if ( ($8 == 0) ){ goto $label$67 }
	*(($9 + [100])) = $8
	CALL $207($8)
	
.LABEL $label$67
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$68 }
	CALL $207(*(($9 + [32])))
	
.LABEL $label$68
	CALL $207($9)
	
.LABEL $label$66
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$65 }
	$9 = *(($15 + [64]))
	goto $label$18 
	
.LABEL $label$28
	CALL $195($0, $1, $2, $3)
	goto $label$17 
	
.LABEL $label$27
	$9 = $8
	
.LABEL $label$26
	*($6) = $8
	CALL $207($9)
	goto $label$17 
	
.LABEL $label$25
	$9 = $8
	
.LABEL $label$24
	*($6) = $8
	CALL $207($9)
	goto $label$17 
	
.LABEL $label$23
	$9 = $8
	
.LABEL $label$22
	*($6) = $8
	CALL $207($9)
	goto $label$17 
	
.LABEL $label$21
	$9 = $8
	
.LABEL $label$20
	*($6) = $8
	CALL $207($9)
	goto $label$17 
	
.LABEL $label$19
	$9 = $6
	
.LABEL $label$18
	*($0) = $6
	CALL $207($9)
	
.LABEL $label$17
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [720])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [720])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [720])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

int_32 .FUNC _ZN12CNiuNiuLogic14GetCardListPipEPKhh (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$3:
	$3 = CALL int_32 $0((int_32 *($1)), (int_32 *(*($0))))
	$4 = (( $3 ? [10] : ($3 <= [10]) ) + ($4 & [255]))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	$1 = ((uint_32)($4 & [255]) % (uint_32)[10])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	return ($1 & [255])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [512]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [528]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [544])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [608]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [512]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [640]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [152])) = $0
	*(($9 + [160])) = (int_64)-1
	*(($9 + [168])) = [0]
	*(($9 + [172])) = [0]
	*($9 + [128]) = [656]
	*($9 + [136]) = $0
	*($9 + [144]) = $0
	*(($9 + [176])) = [0]
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [672]
	$7 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$45 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$40 }
	*(($9 + [192])) = $7
	*(($9 + [200])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [208])) = (int_64)0
	*(($9 + [216])) = [0]
	*($9 + [184]) = $0
	$5 = (int_64)59
	$4 = [688]
	$7 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$51 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$3 = ($3 + [165])
	goto $label$49 
	
.LABEL $label$51
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$47
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$46 }
	*(($9 + [232])) = $7
	*(($9 + [240])) = (int_64)-1
	*(($9 + [248])) = (int_64)0
	*(($9 + [256])) = [0]
	*($9 + [224]) = $0
	*($9 + [264]) = $1
	*($9 + [128]) = [704]
	if ( ((int_64)$2 > (int_64)3966954939887910911) ){ goto $label$59 }
	if ( ((int_64)$2 > (int_64)3626238826428497919) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)-3778232681393291264) ){ goto $label$56 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$52 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [2]
	*($9 + [8 align=4]) = *($9 + [112])
	CALL $39(($9 + [128]), ($9 + [8]))
	goto $label$52 
	
.LABEL $label$59
	if ( ((int_64)$2 > (int_64)3966955352204771327) ){ goto $label$57 }
	if ( ((int_64)$2 == (int_64)3966954939887910912) ){ goto $label$55 }
	if ( ((int_64)$2 != (int_64)3966955211544592384) ){ goto $label$52 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [3]
	*($9 + [56 align=4]) = *($9 + [64])
	CALL $50(($9 + [128]), ($9 + [56]))
	goto $label$52 
	
.LABEL $label$58
	if ( ((int_64)$2 == (int_64)3626238826428497920) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)3626388537043058688) ){ goto $label$52 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [4]
	*($9 + [40 align=4]) = *($9 + [80])
	CALL $45(($9 + [128]), ($9 + [40]))
	goto $label$52 
	
.LABEL $label$57
	if ( ((int_64)$2 == (int_64)3966955352204771328) ){ goto $label$53 }
	if ( ((int_64)$2 != (int_64)4982871454518345728) ){ goto $label$52 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [5]
	*($9) = *($9 + [120])
	CALL $37(($9 + [128]), $9)
	goto $label$52 
	
.LABEL $label$56
	*($9 + [108]) = [0]
	*($9 + [104]) = [6]
	*($9 + [16 align=4]) = *($9 + [104])
	CALL $41(($9 + [128]), ($9 + [16]))
	goto $label$52 
	
.LABEL $label$55
	*($9 + [100]) = [0]
	*($9 + [96]) = [7]
	*($9 + [24 align=4]) = *($9 + [96])
	CALL $43(($9 + [128]), ($9 + [24]))
	goto $label$52 
	
.LABEL $label$54
	*($9 + [76]) = [0]
	*($9 + [72]) = [8]
	*($9 + [48 align=4]) = *($9 + [72])
	CALL $48(($9 + [128]), ($9 + [48]))
	goto $label$52 
	
.LABEL $label$53
	*($9 + [92]) = [0]
	*($9 + [88]) = [9]
	*($9 + [32 align=4]) = *($9 + [88])
	CALL $45(($9 + [128]), ($9 + [32]))
	
.LABEL $label$52
	CALL $51(($9 + [128]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [272])
}

int_32 .FUNC _ZN12CNiuNiuLogic15GetCardNewValueEh (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$0 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$1 }
	$0 = ($0 + [15])
	
.LABEL $label$1
	return ($0 & [255])
}

int_32 .FUNC _ZN12CNiuNiuLogic11CompareCardEPKhhS1_hRhh (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [256])
	*([0] + [4]) = $16
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)[5]) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$4 }
	if ( $6 ){ goto $label$3 }
	CALL memcpy(($16 + [128]), [320], [60])
	CALL memcpy(($16 + [192]), ($16 + [128]), [60])
	goto $label$2 
	
.LABEL $label$4
	CALL memcpy(($16 + [128]), [384], [60])
	CALL memcpy(($16 + [192]), ($16 + [128]), [60])
	goto $label$2 
	
.LABEL $label$3
	CALL memcpy(($16 + [128]), [448], [60])
	CALL memcpy(($16 + [192]), ($16 + [128]), [60])
	
.LABEL $label$2
	$6 = CALL _ZN12CNiuNiuLogic11GetCardTypeEPKhhPh($0, $1, [5], [0])
	$8 = CALL _ZN12CNiuNiuLogic11GetCardTypeEPKhhPh($0, $3, [5], [0])
	$7 = (($16 + [192]) + ($6 << [2]))
	$11 = *($7)
	*($5) = $11
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$7 }
	CALL memcpy(($16 + [64]), $1, $2)
	CALL memcpy($16, $3, $4)
	$6 = ($16 + [64])
	$8 = ($16 + [128])
	$3 = $2
	
.LOOP $label$9:
	$1 = *($6)
	$11 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)$11 != (int_32)[4]) ){ goto $label$10 }
	$1 = ($1 + [15])
	
.LABEL $label$10
	*($8) = $1
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$9 }
	$10 = ($2 + [255])
	
.LOOP $label$12:
	$11 = ($10 & [255])
	if ( ($11 == 0) ){ goto $label$11 }
	$12 = [1]
	$3 = [0]
	$6 = ($16 + [64])
	$2 = ($16 + [128])
	$15 = *($16 + [128])
	
.LOOP $label$13:
	$13 = $3
	$3 = ($13 + [1])
	$1 = $2
	$2 = ($1 + [1])
	$8 = *($2)
	$9 = ($15 & [255])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$17 }
	$12 = ($6 + [1])
	$9 = *($12)
	$14 = *($6)
	$13 = $6
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$15 }
	$9 = *(($6 + [1]))
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)$9) ){ goto $label$14 }
	$12 = (($16 + [64]) + $3)
	$13 = (($16 + [64]) + $13)
	
.LABEL $label$16
	*($13) = $9
	*($12) = $14
	*(($1 + [1])) = $15
	*($1) = $8
	$12 = [0]
	goto $label$14 
	
.LABEL $label$15
	$15 = $8
	
.LABEL $label$14
	$6 = ($6 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$13 }
	$10 = ($10 + [-1])
	if ( (($12 & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = $16
	$8 = ($16 + [128])
	$3 = $4
	
.LOOP $label$18:
	$1 = *($6)
	$11 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)$11 != (int_32)[4]) ){ goto $label$19 }
	$1 = ($1 + [15])
	
.LABEL $label$19
	*($8) = $1
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$18 }
	$10 = ($4 + [255])
	
.LOOP $label$21:
	$11 = ($10 & [255])
	if ( ($11 == 0) ){ goto $label$20 }
	$12 = [1]
	$3 = [0]
	$6 = $16
	$2 = ($16 + [128])
	$15 = *($16 + [128])
	
.LOOP $label$22:
	$13 = $3
	$3 = ($13 + [1])
	$1 = $2
	$2 = ($1 + [1])
	$8 = *($2)
	$9 = ($15 & [255])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$26 }
	$12 = ($6 + [1])
	$9 = *($12)
	$14 = *($6)
	$13 = $6
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$24 }
	$9 = *(($6 + [1]))
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)$9) ){ goto $label$23 }
	$12 = ($16 + $3)
	$13 = ($16 + $13)
	
.LABEL $label$25
	*($13) = $9
	*($12) = $14
	*(($1 + [1])) = $15
	*($1) = $8
	$12 = [0]
	goto $label$23 
	
.LABEL $label$24
	$15 = $8
	
.LABEL $label$23
	$6 = ($6 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$22 }
	$10 = ($10 + [-1])
	if ( (($12 & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$20
	$6 = *($16 + [64])
	$1 = CALL int_32 $0((int_32 $6), (int_32 *(*($0) + [4])))
	$8 = CALL int_32 $0((int_32 $6), (int_32 *(*($0))))
	if ( ((int_32)$1 != (int_32)[4]) ){ goto $label$27 }
	$8 = ($8 + [15])
	
.LABEL $label$27
	$6 = *($16)
	$3 = CALL int_32 $0((int_32 $6), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $6), (int_32 *(*($0))))
	if ( ((int_32)$3 != (int_32)[4]) ){ goto $label$28 }
	$1 = ($1 + [15])
	
.LABEL $label$28
	$3 = CALL int_32 $0((int_32 *($16 + [64])), (int_32 *(*($0) + [4])))
	$11 = CALL int_32 $0((int_32 *($16)), (int_32 *(*($0) + [4])))
	$6 = [1]
	$1 = ($1 & [255])
	$8 = ($8 & [255])
	if ( ($8 <= $1) ){ goto $label$5 }
	$6 = [-1]
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$5 }
	$6 = ( [1] ? [-1] : ($3 <= $11) )
	goto $label$5 
	
.LABEL $label$8
	if ( ((uint_32)$8 <= (uint_32)$6) ){ goto $label$6 }
	*($5) = *((($16 + [192]) + ($8 << [2])))
	$6 = [1]
	goto $label$5 
	
.LABEL $label$7
	CALL memcpy(($16 + [64]), $1, $2)
	CALL memcpy($16, $3, $4)
	$6 = ($16 + [64])
	$8 = ($16 + [128])
	$3 = $2
	
.LOOP $label$29:
	$1 = *($6)
	$11 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)$11 != (int_32)[4]) ){ goto $label$30 }
	$1 = ($1 + [15])
	
.LABEL $label$30
	*($8) = $1
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$29 }
	$10 = ($2 + [255])
	
.LOOP $label$32:
	$11 = ($10 & [255])
	if ( ($11 == 0) ){ goto $label$31 }
	$12 = [1]
	$3 = [0]
	$6 = ($16 + [64])
	$2 = ($16 + [128])
	$15 = *($16 + [128])
	
.LOOP $label$33:
	$13 = $3
	$3 = ($13 + [1])
	$1 = $2
	$2 = ($1 + [1])
	$8 = *($2)
	$9 = ($15 & [255])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$37 }
	$12 = ($6 + [1])
	$9 = *($12)
	$14 = *($6)
	$13 = $6
	goto $label$36 
	
.LABEL $label$37
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$35 }
	$9 = *(($6 + [1]))
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)$9) ){ goto $label$34 }
	$12 = (($16 + [64]) + $3)
	$13 = (($16 + [64]) + $13)
	
.LABEL $label$36
	*($13) = $9
	*($12) = $14
	*(($1 + [1])) = $15
	*($1) = $8
	$12 = [0]
	goto $label$34 
	
.LABEL $label$35
	$15 = $8
	
.LABEL $label$34
	$6 = ($6 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$33 }
	$10 = ($10 + [-1])
	if ( (($12 & [1]) == 0) ){ goto $label$32 }
	
.LABEL $label$31
	$6 = $16
	$8 = ($16 + [128])
	$3 = $4
	
.LOOP $label$38:
	$1 = *($6)
	$11 = CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	if ( ((int_32)$11 != (int_32)[4]) ){ goto $label$39 }
	$1 = ($1 + [15])
	
.LABEL $label$39
	*($8) = $1
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$38 }
	$10 = ($4 + [255])
	
.LOOP $label$41:
	$11 = ($10 & [255])
	if ( ($11 == 0) ){ goto $label$40 }
	$12 = [1]
	$3 = [0]
	$6 = $16
	$2 = ($16 + [128])
	$15 = *($16 + [128])
	
.LOOP $label$42:
	$13 = $3
	$3 = ($13 + [1])
	$1 = $2
	$2 = ($1 + [1])
	$8 = *($2)
	$9 = ($15 & [255])
	if ( ((uint_32)$9 >= (uint_32)$8) ){ goto $label$46 }
	$12 = ($6 + [1])
	$9 = *($12)
	$14 = *($6)
	$13 = $6
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$44 }
	$9 = *(($6 + [1]))
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)$9) ){ goto $label$43 }
	$12 = ($16 + $3)
	$13 = ($16 + $13)
	
.LABEL $label$45
	*($13) = $9
	*($12) = $14
	*(($1 + [1])) = $15
	*($1) = $8
	$12 = [0]
	goto $label$43 
	
.LABEL $label$44
	$15 = $8
	
.LABEL $label$43
	$6 = ($6 + [1])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$42 }
	$10 = ($10 + [-1])
	if ( (($12 & [1]) == 0) ){ goto $label$41 }
	
.LABEL $label$40
	*($5) = *($7)
	$6 = *($16 + [64])
	$1 = CALL int_32 $0((int_32 $6), (int_32 *(*($0) + [4])))
	$8 = CALL int_32 $0((int_32 $6), (int_32 *(*($0))))
	if ( ((int_32)$1 != (int_32)[4]) ){ goto $label$47 }
	$8 = ($8 + [15])
	
.LABEL $label$47
	$6 = *($16)
	$3 = CALL int_32 $0((int_32 $6), (int_32 *(*($0) + [4])))
	$1 = CALL int_32 $0((int_32 $6), (int_32 *(*($0))))
	if ( ((int_32)$3 != (int_32)[4]) ){ goto $label$48 }
	$1 = ($1 + [15])
	
.LABEL $label$48
	$3 = CALL int_32 $0((int_32 *($16 + [64])), (int_32 *(*($0) + [4])))
	$11 = CALL int_32 $0((int_32 *($16)), (int_32 *(*($0) + [4])))
	$6 = [1]
	$1 = ($1 & [255])
	$8 = ($8 & [255])
	if ( ($8 <= $1) ){ goto $label$5 }
	$6 = [-1]
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$5 }
	$6 = ( [1] ? [-1] : ($3 <= $11) )
	goto $label$5 
	
.LABEL $label$6
	*($5) = $11
	$6 = [-1]
	
.LABEL $label$5
	*([0] + [4]) = ($16 + [256])
	return $6
	
.LABEL $label$1
	CALL __assert_fail([256], [208], [747], [304])
	return (unreachable)
}

void .FUNC _ZN12CNiuNiuLogic12SortCardListEPhhh (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$4 }
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$3 }
	$3 = $13
	$8 = $2
	$4 = $1
	
.LOOP $label$5:
	$9 = *($4)
	$7 = CALL int_32 $0((int_32 $9), (int_32 *(*($0) + [4])))
	$9 = CALL int_32 $0((int_32 $9), (int_32 *(*($0))))
	if ( ((int_32)$7 != (int_32)[4]) ){ goto $label$6 }
	$9 = ($9 + [15])
	
.LABEL $label$6
	*($3) = $9
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$3 = $13
	$9 = $2
	$4 = $1
	
.LOOP $label$7:
	*($3) = CALL int_32 $0((int_32 *($4)), (int_32 *(*($0))))
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$3
	$3 = $13
	$9 = $2
	$4 = $1
	
.LOOP $label$8:
	$8 = *($4)
	$7 = CALL int_32 $0((int_32 $8), (int_32 *(*($0))))
	*($3) = ( [11] ? ( $7 ? [10] : ($7 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $8), (int_32 *(*($0) + [4]))) == (int_32)[4]) )
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$8 }
	
.LABEL $label$2
	$6 = ($2 + [255])
	
.LOOP $label$9:
	$8 = ($6 & [255])
	if ( ($8 == 0) ){ goto $label$1 }
	$10 = [1]
	$9 = [0]
	$7 = $13
	$2 = *($13)
	$0 = $1
	
.LOOP $label$10:
	$11 = $9
	$9 = ($11 + [1])
	$4 = $7
	$7 = ($4 + [1])
	$3 = *($7)
	$5 = ($2 & [255])
	if ( ((uint_32)$5 >= (uint_32)$3) ){ goto $label$13 }
	$10 = ($0 + [1])
	$5 = *($10)
	$12 = *($0)
	$11 = $0
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$14 }
	$5 = *(($0 + [1]))
	$12 = *($0)
	if ( ((uint_32)$12 >= (uint_32)$5) ){ goto $label$11 }
	$10 = ($1 + $9)
	$11 = ($1 + $11)
	goto $label$12 
	
.LABEL $label$14
	$2 = $3
	goto $label$11 
	
.LABEL $label$12
	*($11) = $5
	*($10) = $12
	*(($4 + [1])) = $2
	*($4) = $3
	$10 = [0]
	
.LABEL $label$11
	$0 = ($0 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$6 = ($6 + [-1])
	if ( (($10 & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC _ZN12CNiuNiuLogic17GetCardLogicValueEh (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL int_32 $0((int_32 $1), (int_32 *(*($0))))
	return ( [11] ? ( $2 ? [10] : ($2 <= [10]) ) : ((int_32)CALL int_32 $0((int_32 $1), (int_32 *(*($0) + [4]))) == (int_32)[4]) )
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	return CALL $214($0, $1, CALL $263($1))
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $211($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [16960], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $218(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $218(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $216 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $211 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $205($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $207($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $211($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $198 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $199 (int_32 $0)
{
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $207($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $207($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [2224])
	*(($4 = CALL $205([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [1216])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $157(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $207($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $194 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	$10 = [0]
	if ( ((int_64)*($0 + [8]) == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [752]
	$13 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$7 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$3
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$2 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [768]
	$16 = (int_64)0
	
.LOOP $label$8:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$9 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$9
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$8 }
	$7 = *(($0 + [40]))
	$15 = *(($0 + [44]))
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$12 }
	$10 = ($15 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$13:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$12 }
	$15 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$6 = ($0 + [16])
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$16 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	if ( $10 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$10 = CALL $62($6, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	
.LABEL $label$15
	$16 = *($10 + [8])
	
.LABEL $label$14
	$10 = [0]
	if ( ((int_64)$16 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)$2), [8336])
	$1 = *($0 + [136])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [2352]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$22 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$17 }
	$7 = [1]
	$10 = [1]
	if ( ((int_64)$1 == (int_64)$13) ){ goto $label$23 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [2416]
	$13 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$29 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$5 = ($5 + [165])
	goto $label$27 
	
.LABEL $label$29
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$25
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$24 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [2432]
	$16 = (int_64)0
	
.LOOP $label$30:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$31 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$5 = ($5 + [165])
	goto $label$32 
	
.LABEL $label$33
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$31
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$11 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$30 }
	$9 = *(($0 + [40]))
	$15 = *(($0 + [44]))
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$34 }
	$10 = ($15 + [-24])
	$8 = ([0] - $9)
	
.LOOP $label$35:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$34 }
	$15 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	if ( ((int_32)$15 == (int_32)$9) ){ goto $label$38 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	if ( $10 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$36 }
	$10 = CALL $62($6, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	
.LABEL $label$37
	$16 = *($10 + [8])
	
.LABEL $label$36
	$10 = ((int_64)$1 == (int_64)$16)
	
.LABEL $label$23
	CALL eosio_assert($10, [8368])
	$12 = *($3 + [8])
	if ( ((int_64)$12 == (int_64)1397703940) ){ goto $label$39 }
	$7 = ((int_64)$12 == (int_64)1128748036)
	
.LABEL $label$39
	CALL eosio_assert($7, [1360])
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [8288]
	$13 = (int_64)0
	
.LOOP $label$40:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$41 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$5 = ($5 + [165])
	goto $label$42 
	
.LABEL $label$43
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$41
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$40 }
	$7 = *(($0 + [40]))
	$15 = *(($0 + [44]))
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$44 }
	$10 = ($15 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$45:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$44 }
	$15 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$45 }
	
.LABEL $label$44
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$49 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	if ( $10 ){ goto $label$48 }
	$16 = (int_64)0
	goto $label$46 
	
.LABEL $label$49
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$47 }
	$10 = CALL $62($6, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [784])
	
.LABEL $label$48
	$16 = *($10 + [8])
	goto $label$46 
	
.LABEL $label$47
	$16 = (int_64)0
	
.LABEL $label$46
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [8400]
	$13 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$55 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$5 = ($5 + [165])
	goto $label$53 
	
.LABEL $label$55
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$51
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$50 }
	CALL eosio_assert(((int_64)$16 != (int_64)$13), [8416])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [8448]
	$13 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$61 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$5 = ($5 + [165])
	goto $label$59 
	
.LABEL $label$61
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$57
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$56 }
	$10 = ((int_64)$16 != (int_64)$13)
	
.LABEL $label$1
	return $10
}

void .FUNC $195 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	*($14 + [16]) = $2
	$7 = [1]
	if ( CALL has_auth(*($0 + [8])) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [752]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)9) ){ goto $label$7 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$2 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [768]
	$13 = (int_64)0
	
.LOOP $label$8:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$8 }
	$5 = *(($0 + [40]))
	$12 = *(($0 + [44]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$12 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$13:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$12 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$4 = ($0 + [16])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$16 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [784])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$7 = CALL $62($4, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [784])
	
.LABEL $label$15
	$13 = *($7 + [8])
	
.LABEL $label$14
	$7 = CALL has_auth($13)
	
.LABEL $label$1
	CALL eosio_assert($7, [848])
	if ( ((int_64)$1 > (int_64)4941026402438742015) ){ goto $label$31 }
	if ( ((int_64)$1 <= (int_64)4941019022087946239) ){ goto $label$30 }
	if ( ((int_64)$1 == (int_64)4941019022087946240) ){ goto $label$27 }
	if ( ((int_64)$1 == (int_64)4941024698851917824) ){ goto $label$24 }
	if ( ((int_64)$1 != (int_64)4941024699286028288) ){ goto $label$26 }
	$5 = *(($0 + [40]))
	$12 = *(($0 + [44]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$32 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$33:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$32 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$33 }
	
.LABEL $label$32
	$7 = ($0 + [16])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$21 }
	$4 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [784])
	if ( $4 ){ goto $label$20 }
	goto $label$17 
	
.LABEL $label$31
	if ( ((int_64)$1 <= (int_64)5075293028667621375) ){ goto $label$29 }
	if ( ((int_64)$1 == (int_64)5075293028667621376) ){ goto $label$28 }
	if ( ((int_64)$1 == (int_64)5075293337764020224) ){ goto $label$28 }
	if ( ((int_64)$1 == (int_64)5075293269245935616) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$30
	if ( ((int_64)$1 == (int_64)4941015199291015168) ){ goto $label$23 }
	if ( ((int_64)$1 != (int_64)4941016443771367424) ){ goto $label$26 }
	$7 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)4982871467403247616, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$12 = ($0 + [16])
	$4 = CALL $62($12, $7)
	
.LOOP $label$34:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$7 = [0]
	$0 = CALL db_next_i64(*($4 + [28]), ($14 + [24]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$35 }
	$7 = CALL $62($12, $0)
	
.LABEL $label$35
	CALL $196($12, $4)
	$4 = $7
	if ( $7 ){ goto $label$34 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((int_64)$1 == (int_64)4941026402438742016) ){ goto $label$22 }
	if ( ((int_64)$1 != (int_64)5075293005476577280) ){ goto $label$26 }
	
.LABEL $label$28
	CALL require_auth(*(($0 + [8])))
	goto $label$25 
	
.LABEL $label$27
	$3 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	
.LABEL $label$26
	if ( (int_64)($3 == 0) ){ goto $label$25 }
	*($14 + [16]) = $3
	$2 = $3
	
.LABEL $label$25
	CALL $99($0, $1, $2)
	goto $label$17 
	
.LABEL $label$24
	$5 = *(($0 + [80]))
	$12 = *(($0 + [84]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$36 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$37:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$36 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	$7 = ($0 + [56])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$19 }
	$4 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$7), [784])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$23
	$9 = *(($0 + [8]))
	*($14 + [8]) = ($14 + [16])
	CALL $197(($14 + [24]), ($0 + [56]), $9, ($14 + [8]))
	goto $label$17 
	
.LABEL $label$22
	CALL void $0((int_32 *(*($0))))
	goto $label$17 
	
.LABEL $label$21
	$4 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $62($7, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [784])
	
.LABEL $label$20
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$12 = CALL db_next_i64(*($4 + [28]), ($14 + [24]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$38 }
	CALL $62($7, $12)
	
.LABEL $label$38
	CALL $196($7, $4)
	goto $label$17 
	
.LABEL $label$19
	$4 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$4 = CALL $155($7, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$7), [784])
	
.LABEL $label$18
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$12 = CALL db_next_i64(*($4 + [12]), ($14 + [24]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$39 }
	CALL $155($7, $12)
	
.LABEL $label$39
	CALL $198($7, $4)
	
.LABEL $label$17
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $205(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $222($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $207($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $207($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $223(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $223(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $207(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $207(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1904])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $205([64])) + [48]) = $0
	CALL $191(($8 + [32]), $6)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $192(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $207($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [720])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [720])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}