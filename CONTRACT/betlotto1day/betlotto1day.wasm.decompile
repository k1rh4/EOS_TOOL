(data (i32.const 8192) "0123456789abcdef\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8218) "read_transaction failed\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "unable to find balance by symbol\00")
(data (i32.const 8366) "unable to find key\00")
(data (i32.const 8385) "EOS\00")
(data (i32.const 8389) "eosio.ram\00")
(data (i32.const 8399) "eosio.token\00")
(data (i32.const 8411) "betlottocomp\00")
(data (i32.const 8424) "bithumbshiny\00")
(data (i32.const 8437) "bitfinexcw55\00")
(data (i32.const 8450) "okexoffiline\00")
(data (i32.const 8463) "chintailease\00")
(data (i32.const 8476) "eosio.ramfee\00")
(data (i32.const 8489) "quantity invalid\00")
(data (i32.const 8506) "transfer quantity must be positive\00")
(data (i32.const 8541) "unable to find the symbol config\00")
(data (i32.const 8574) "unable to find the global config\00")
(data (i32.const 8607) "receiver is invalid\00")
(data (i32.const 8627) "invalid contract code\00")
(data (i32.const 8649) "to account should be contract account\00")
(data (i32.const 8687) "invalid normal number\00")
(data (i32.const 8709) "special number should in [1, 15]\00")
(data (i32.const 8742) "normal number should in [1, 75]\00")
(data (i32.const 8774) "normal number should not include duplicates\00")
(data (i32.const 8818) "period is not inited, exit!!!\00: no conversion\00")
(data (i32.const 8864) "period status is invalid\00: out of range\00")
(data (i32.const 8904) "previous period is not finished\00")
(data (i32.const 8936) "round is used\00")
(data (i32.const 8950) "eosio\00")
(data (i32.const 8956) "no running period, exit!!!\00")
(data (i32.const 8983) "invalid memo for oneday lottery\00")
(data (i32.const 9015) "R\00")
(data (i32.const 9017) "amount should be equal to bet count\00")
(data (i32.const 9053) "F\00")
(data (i32.const 9055) "invalid mode\00")
(data (i32.const 9068) "invalid bet info for self choosing mode\00")
(data (i32.const 9108) "too much bets for one time\00")
(data (i32.const 9135) "amount should be equal for user bets count and repayment\00")
(data (i32.const 9192) "active\00")
(data (i32.const 9199) "enjoyprovide\00")
(data (i32.const 9212) "reward\00")
(data (i32.const 9219) "oneday\00")
(data (i32.const 9226) "onerror\00")
(data (i32.const 9234) "onerror action\'s are only valid from the eosio system account\00")
(data (i32.const 9296) "transfer\00")
(data (i32.const 9305) "string is too long to be a valid symbol_code\00")
(data (i32.const 9350) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9403) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9452) "invalid symbol name\00")
(data (i32.const 9472) "attempt to add asset with different symbol\00")
(data (i32.const 9515) "addition underflow\00")
(data (i32.const 9534) "addition overflow\00")
(data (i32.const 9552) "string is too long to be a valid name\00")
(data (i32.const 9590) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9657) "character is not in allowed character set for names\00")
(data (i32.const 9709) "write\00")
(data (i32.const 9715) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9766) "error reading iterator\00")
(data (i32.const 9789) "read\00")
(data (i32.const 9794) "get\00")
(data (i32.const 9798) "cannot create objects in table of another contract\00")
(data (i32.const 9849) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9901) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9955) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10003) "cannot pass end iterator to modify\00")
(data (i32.const 10038) "object passed to modify is not in multi_index\00")
(data (i32.const 10084) "cannot modify objects in table of another contract\00")
(data (i32.const 10135) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10194) "cannot pass end iterator to erase\00")
(data (i32.const 10228) "cannot increment end iterator\00")
(data (i32.const 10258) "object passed to erase is not in multi_index\00")
(data (i32.const 10303) "cannot erase objects in table of another contract\00")
(data (i32.const 10353) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10406) "unable to find the global config, run init firstly\00")
(data (i32.const 10457) "cannot find tablename, should not reach here\00")
(data (i32.const 10504) "\0c)\00\00")
(data (i32.const 10508) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18960) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$5 (result i32)))
(import "env" "tapos_block_num" (func $fimport$6 (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "sha512" (func $fimport$8 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$14 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$25 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$29 (param i32)))
(import "env" "publication_time" (func $fimport$30 (result i64)))
(import "env" "db_idx64_next" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$32))
(import "env" "memset" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$34 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$43 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$44 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$45 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$46 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$49 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$51 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$52 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$53 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $54))
(export "_ZdlPv" (func $108))
(export "_Znwj" (func $106))
(export "_Znaj" (func $107))
(export "_ZdaPv" (func $109))
(export "_ZnwjSt11align_val_t" (func $110))
(export "_ZnajSt11align_val_t" (func $111))
(export "_ZdlPvSt11align_val_t" (func $112))
(export "_ZdaPvSt11align_val_t" (func $113))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $40 $32 $17 $35 $12 $46 $52)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19217))
(global $global$2 i32 (i32.const 19217))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $94(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $85(*($1), *($0 + [20]))
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($1 + [4]), ($0 + [24]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [80])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [60])))
	$4 = *($1 + [36])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = *($1 + [36])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($1 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $87(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $65(*($1), *($0 + [20]))
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $97 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = CALL current_time()
	*(($5 + [40])) = [0]
	*($5 + [16]) = (int_64)6138663577826885632
	*($5 + [8]) = (int_64)6138663577826885632
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$7 = CALL $4(($5 + [8]), (int_64)4995142087184830980, [8366])
	$8 = *($7 + [40])
	$9 = *($7 + [16])
	$10 = *($5 + [32])
	if ( ($10 == 0) ){ goto $label$5 }
	$11 = ($5 + [36])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($7 + [-24])
	$12 = *($7)
	*($7) = [0]
	if ( ($12 == 0) ){ goto $label$7 }
	CALL _ZdlPv($12)
	
.LABEL $label$7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$6 }
	$7 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$5
	if ( (([0] - [0]) <= $2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $10
	
.LABEL $label$3
	*($11) = $10
	CALL _ZdlPv($7)
	if ( ((uint_32)(*(($0 + [4])) - *($0)) >= (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = (CASTING uint_32)(uint_64 $6)
	$13 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$9 + (int_64)$1) + (int_64)$8))
	if ( ($3 == 0) ){ goto $label$8 }
	$14 = ($0 + [4])
	$15 = ($0 + [8])
	
.LOOP $label$9:
	$7 = ($11 + $13)
	if ( ($11 & [1]) ){ goto $label$15 }
	$16 = CALL $6($7)
	$10 = (((int_32)$16 % (int_32)$3) + [1])
	*($5 + [8]) = $10
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$16 = CALL $8($7)
	$10 = (((int_32)$16 % (int_32)$3) + [1])
	*($5 + [8]) = $10
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$12 = *($14)
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$17 }
	
.LOOP $label$18:
	if ( ((int_32)*($7) == (int_32)($10 & [255])) ){ goto $label$17 }
	$7 = ($7 + [1])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$10 }
	
.LABEL $label$16
	if ( ((int_32)$12 == (int_32)*($15)) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$12 = *($14)
	if ( ((int_32)$12 == (int_32)*($15)) ){ goto $label$11 }
	
.LABEL $label$12
	*($12) = $10
	$12 = (*($14) + [1])
	*($14) = $12
	goto $label$10 
	
.LABEL $label$11
	CALL $90($0, ($5 + [8]))
	$12 = *($14)
	
.LABEL $label$10
	$11 = ($16 + $11)
	if ( (($12 - *($0)) <= $2) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$8
	$14 = ($0 + [4])
	$16 = ($0 + [8])
	
.LOOP $label$19:
	$7 = ($11 + $13)
	if ( ($11 & [1]) ){ goto $label$25 }
	$10 = CALL $6($7)
	*($5 + [8]) = $10
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$10 = CALL $8($7)
	*($5 + [8]) = $10
	if ( ($4 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$12 = *($14)
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$27 }
	
.LOOP $label$28:
	if ( ((int_32)*($7) == (int_32)($10 & [255])) ){ goto $label$27 }
	$7 = ($7 + [1])
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$20 }
	
.LABEL $label$26
	if ( ((int_32)$12 == (int_32)*($16)) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$12 = *($14)
	if ( ((int_32)$12 == (int_32)*($16)) ){ goto $label$21 }
	
.LABEL $label$22
	*($12) = $10
	$12 = (*($14) + [1])
	*($14) = $12
	goto $label$20 
	
.LABEL $label$21
	CALL $90($0, ($5 + [8]))
	$12 = *($14)
	
.LABEL $label$20
	$11 = ($10 + $11)
	if ( (($12 - *($0)) <= $2) ){ goto $label$19 }
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [16])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	$1 = (( $1 ? ($6 + $1) : ((int_32)$3 == (int_32)$4) ) + [2])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$5
	$1 = ($1 + [8])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$7 }
	*($2) = ($0 + $1)
	
.LABEL $label$7
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $85(*($1), *($0 + [12]))
	CALL $94(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $85(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $85(*($1), *($0 + [36]))
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10038])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10084])
	$6 = *($1)
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = *(*($3))
	if ( ((int_32)$8 == (int_32)[20]) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[10]) ){ goto $label$2 }
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [24])
	*($1 + [24]) = ((int_64)*($3 + [24]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$3
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [32])
	*($1 + [32]) = ((int_64)*($3 + [32]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10457])
	$3 = *($1)
	
.LABEL $label$1
	$9 = ((int_64)$7 & (int_64)255)
	CALL eosio_assert(((int_32)($6 & [255]) == (int_32)($3 & [255])), [10135])
	$3 = *($1 + [4])
	$6 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [23])
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ($1 + [4])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$6 = CALL $145($3)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [17])
	*($5 + [40]) = ($1 + [18])
	*($5 + [44]) = ($1 + [19])
	*($5 + [48]) = ($1 + [20])
	*($5 + [52]) = ($1 + [21])
	*($5 + [56]) = ($1 + [24])
	*($5 + [60]) = ($1 + [32])
	CALL $86(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [44])), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$9) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $148($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$9) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ((int_64)$9 + (int_64)1)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

int_64 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $137($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $131()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $137($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18961]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $136($0, (int_64)0)
	*(CALL $131()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $137($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $137($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $137($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $137($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18961])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $137($0)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $137($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8209]))
	$8 = (int_64)0
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $137($0)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $137($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18961]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $136($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18961]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18961]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $137($0) + [18961]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $131()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $131()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $131()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $141(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $140(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $130 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $131 ()
{
	return [10548]
}

void .FUNC $132 (int_32 $0)
{
}

int_64 .FUNC $133 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $136 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $137 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $135($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [64])
	$global$0 = $6
	CALL $9(($6 + [48]), $2, [44])
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$2 = (*($6 + [52]) - *($6 + [48]))
	$7 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = CALL _Znwj($2)
	*(($6 + [24])) = ($8 + ((int_32)$7 * (int_32)[12]))
	*($6 + [16]) = $8
	*($6 + [20]) = $8
	$7 = *($6 + [52])
	$2 = *($6 + [48])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	CALL $115($8, $2)
	$8 = (*($6 + [20]) + [12])
	*($6 + [20]) = $8
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$9 = *($6 + [16])
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$2 = $9
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$8 = [0]
	$9 = [0]
	$2 = [0]
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = $8
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$2 = $8
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = ($6 + [40])
	
.LOOP $label$9:
	$8 = CALL $124($2, [0], [10])
	*($6 + [63]) = $8
	$7 = *($6 + [36])
	if ( ((uint_32)$7 >= (uint_32)*($9)) ){ goto $label$10 }
	*($7) = $8
	*($6 + [36]) = (*($6 + [36]) + [1])
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)*($6 + [20])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $39(($6 + [32]), ($6 + [63]))
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)*($6 + [20])) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = $2
	$9 = *($6 + [16])
	$2 = $9
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = $9
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$14
	$8 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$13 }
	$7 = *($6 + [16])
	
.LABEL $label$12
	*($6 + [20]) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$2 = (*($6 + [36]) + [-1])
	$7 = *($2)
	*($6 + [36]) = $2
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$2 = ($2 - *($6 + [32]))
	if ( ($2 == 0) ){ goto $label$15 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL _Znwj($2)
	*(($6 + [8])) = ($8 + $2)
	*($6) = $8
	*($6 + [4]) = $8
	$9 = *($6 + [32])
	$2 = (*($6 + [36]) - $9)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($8, $9, $2)
	*($6 + [4]) = (*($6 + [4]) + $2)
	
.LABEL $label$15
	CALL $26($0, $1, $3, $6, ($7 & [255]), $4, $5)
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$16 }
	*($6 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$17 }
	*($6 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	$7 = *($6 + [48])
	if ( ($7 == 0) ){ goto $label$18 }
	$8 = *($6 + [52])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($8 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$22
	$8 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *($6 + [48])
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($6 + [52]) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	$global$0 = ($6 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $130(($6 + [16]))
	
.LABEL $label$1
	CALL $130($6)
	(unreachable)
}

void .FUNC $126 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $127($1, $0, [8848])
	CALL $129()
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10228])
	$3 = *($0 + [4])
	$4 = *($3 + [92])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229865212519383040, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [92]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [84]) == (int_32)$7), [9715])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($2 + [84]) == (int_32)$7), [9715])
	
.LABEL $label$3
	*($2 + [92]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$7), [9715])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$7), [9715])
	
.LABEL $label$2
	*($4 + [92]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $127($1, $0, [8889])
	CALL $128()
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $69(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $99(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = CALL current_time()
	*(($3 + [132])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*(($3 + [156])) = (int_64)0
	*($3 + [116]) = [0]
	*($3 + [120]) = [0]
	*($3 + [124 align=4]) = (int_64)0
	*($3 + [140 align=4]) = (int_64)0
	*($3 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($3 + [88]) = [9192]
	*($3 + [92]) = CALL $142([9192])
	*($3 + [24]) = *($3 + [88])
	*($3 + [96]) = *(CALL $7(($3 + [32]), ($3 + [24])))
	*($3 + [88]) = $4
	*($3 + [168]) = [9199]
	*($3 + [172]) = CALL $142([9199])
	*($3 + [16]) = *($3 + [168])
	*($3 + [80]) = *(CALL $7(($3 + [32]), ($3 + [16])))
	*($3 + [168]) = [9212]
	*($3 + [172]) = CALL $142([9212])
	*($3 + [8]) = *($3 + [168])
	*($3 + [72]) = *(CALL $7(($3 + [32]), ($3 + [8])))
	*($3 + [168]) = [9219]
	*($3 + [172]) = CALL $142([9219])
	*($3) = *($3 + [168])
	$4 = *(CALL $7(($3 + [32]), $3))
	*($3 + [40]) = $2
	*($3 + [48]) = $4
	*($3 + [32]) = *($1)
	*($3 + [56]) = *($0)
	CALL $43(($3 + [140]), ($3 + [88]), ($3 + [80]), ($3 + [72]), ($3 + [32]))
	*($3 + [124]) = [1]
	$2 = CALL current_time()
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = $2
	$2 = *($0)
	CALL $44(($3 + [88]), ($3 + [104]))
	$0 = *($3 + [88])
	CALL send_deferred(($3 + [32]), $2, $0, (*($3 + [92]) - $0), [1])
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [92]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $45(($3 + [104]))
	$global$0 = ($3 + [176])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $130($0)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$5 = ($global$0 - [400])
	$global$0 = $5
	*($5 + [112]) = [8950]
	*($5 + [116]) = CALL $142([8950])
	*($5 + [24]) = *($5 + [112])
	$6 = CALL $7(($5 + [232]), ($5 + [24]))
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)*($6)) ){ goto $label$4 }
	if ( ((int_64)$7 == (int_64)*($0)) ){ goto $label$3 }
	CALL $25($0, $6, $2, $3)
	*($5 + [384]) = [8411]
	*($5 + [388]) = CALL $142([8411])
	*($5 + [16]) = *($5 + [384])
	$6 = CALL $7(($5 + [232]), ($5 + [16]))
	if ( ((int_64)*($1) == (int_64)*($6)) ){ goto $label$2 }
	$6 = CALL $23($0)
	*($5 + [344]) = *($6)
	$8 = CALL $115((($5 + [344]) | [4]), ($6 + [4]))
	*((($5 + [344]) + [32])) = *(($6 + [32]))
	*((($5 + [344]) + [24])) = *(($6 + [24]))
	*($5 + [360]) = *($6 + [16])
	$9 = ($3 + [8])
	$6 = CALL $22($0, $9)
	*($5 + [232]) = *($6)
	$10 = CALL $115((($5 + [232]) | [4]), ($6 + [4]))
	$11 = CALL $115((($5 + [232]) + [16]), ($6 + [16]))
	CALL memcpy((($5 + [232]) + [28]), ($6 + [28]), [77])
	$6 = [0]
	*((($5 + [192]) + [32])) = [0]
	*($5 + [208]) = (int_64)-1
	*($5 + [216]) = (int_64)0
	*($5 + [228]) = [0]
	$7 = *($0)
	*($5 + [192]) = $7
	*($5 + [200]) = $7
	*((($5 + [112]) + [28])) = [0]
	*((($5 + [112]) + [44])) = [0]
	*($5 + [132 align=4]) = (int_64)0
	*($5 + [148 align=4]) = (int_64)0
	$2 = CALL db_lowerbound_i64($7, $7, (int_64)-6147718988089524224, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $33(($5 + [192]), $2)
	$13 = ($12 + [36])
	$6 = *($12 + [36])
	if ( ($6 & [1]) ){ goto $label$6 }
	$14 = [9]
	goto $label$1 
	
.LABEL $label$6
	$14 = [7]
	goto $label$1 
	
.LABEL $label$5
	$14 = [11]
	goto $label$1 
	
.LABEL $label$4
	$14 = [53]
	goto $label$1 
	
.LABEL $label$3
	$14 = [53]
	goto $label$1 
	
.LABEL $label$2
	$14 = [53]
	
.LABEL $label$1
	
.LOOP $label$7:
	goto $label$149 
	
.LABEL $label$151
	$12 = CALL $33(($5 + [192]), $6)
	$13 = ($12 + [36])
	$6 = *($12 + [36])
	if ( ($6 & [1]) ){ goto $label$65 }
	$14 = [9]
	goto $label$7 
	
.LABEL $label$150
	$15 = ($13 + [1])
	$6 = uint_32($6 >> [1])
	if ( ((uint_32)$6 >= (uint_32)[8]) ){ goto $label$61 }
	$14 = [0]
	goto $label$7 
	
.LABEL $label$149
	if ( $6 ){ goto $label$62 }
	$14 = [85]
	goto $label$7 
	
.LABEL $label$148
	$7 = (int_64)0
	goto $label$63 
	
.LABEL $label$147
	$15 = *(($12 + [44]))
	$6 = *(($12 + [40]))
	if ( ($6 <= [8]) ){ goto $label$64 }
	$14 = [8]
	goto $label$7 
	
.LABEL $label$146
	CALL eosio_assert([0], [9305])
	$14 = [1]
	goto $label$7 
	
.LABEL $label$145
	$7 = (int_64)0
	$14 = [2]
	goto $label$7 
	
.LABEL $label$144
	$16 = (($15 + $6) + [-1])
	$2 = *($16)
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	$14 = [84]
	goto $label$7 
	
.LABEL $label$143
	CALL eosio_assert([0], [9350])
	$2 = *($16)
	$14 = [3]
	goto $label$7 
	
.LABEL $label$142
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$60 }
	$14 = [4]
	goto $label$7 
	
.LABEL $label$141
	if ( ((int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)*($12 + [48])) != (int_64)*($9)) ){ goto $label$58 }
	$14 = [80]
	goto $label$7 
	
.LABEL $label$140
	if ( ((int_32)*($12 + [16]) == (int_32)[10]) ){ goto $label$57 }
	$14 = [5]
	goto $label$7 
	
.LABEL $label$139
	CALL eosio_assert([1], [10228])
	$6 = CALL db_next_i64(*($12 + [84]), ($5 + [96]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$56 }
	$14 = [10]
	goto $label$7 
	
.LABEL $label$138
	$6 = [0]
	goto $label$55 
	
.LABEL $label$137
	*((($5 + [112]) + [16])) = *(($12 + [16]))
	*((($5 + [112]) + [8])) = *(($12 + [8]))
	*($5 + [112]) = *($12)
	$6 = ($12 + [48])
	if ( ((int_32)($5 + [112]) == (int_32)$12) ){ goto $label$8 }
	$14 = [82]
	goto $label$7 
	
.LABEL $label$136
	CALL $41(($5 + [132]), *($12 + [20]), *(($12 + [24])))
	$14 = [83]
	goto $label$7 
	
.LABEL $label$135
	*($5 + [144]) = *($12 + [32])
	CALL $117(($5 + [148]), $13)
	*(($5 + [184])) = *(($6 + [24]))
	*(($5 + [176])) = *(($6 + [16]))
	*(($5 + [168])) = *(($6 + [8]))
	*($5 + [160]) = *($6)
	$6 = [1]
	$14 = [11]
	goto $label$7 
	
.LABEL $label$134
	CALL eosio_assert($6, [8956])
	CALL $9(($5 + [96]), $4, [35])
	CALL eosio_assert(((int_32)(*($5 + [100]) - *($5 + [96])) == (int_32)[24]), [8983])
	$15 = CALL $115(($5 + [80]), *($5 + [96]))
	$12 = CALL $115(($5 + [64]), (*($5 + [100]) + [-12]))
	CALL $1(($5 + [48]))
	$6 = *($5 + [80])
	$2 = CALL $142([9015])
	if ( ((int_32)$2 != (int_32)( *($15 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$54 }
	$14 = [66]
	goto $label$7 
	
.LABEL $label$133
	if ( (CALL $123($15, [0], [-1], [9015], $2) == 0) ){ goto $label$53 }
	$14 = [12]
	goto $label$7 
	
.LABEL $label$132
	$6 = [0]
	$2 = *($5 + [80])
	$16 = CALL $142([9053])
	if ( ((int_32)$16 != (int_32)( *(($15 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$52 }
	$14 = [65]
	goto $label$7 
	
.LABEL $label$131
	$6 = (CALL $123($15, [0], [-1], [9053], $16) == 0)
	$14 = [13]
	goto $label$7 
	
.LABEL $label$130
	CALL eosio_assert($6, [9055])
	CALL $9(($5 + [32]), $12, [88])
	CALL eosio_assert(((int_32)(*($5 + [36]) - *($5 + [32])) == (int_32)[24]), [9068])
	$6 = (CALL $124((*($5 + [36]) + [-12]), [0], [10]) & [255])
	CALL eosio_assert(($6 <= [201]), [9108])
	CALL eosio_assert(((int_64)*($3) == (int_64)(CASTING uint_64)(uint_32 ((int_32)*($5 + [264]) * (int_32)$6))), [9135])
	CALL $38($0, ($5 + [112]), *($5 + [32]), *($1), ($5 + [48]), $6)
	$16 = *($5 + [32])
	if ( ($16 == 0) ){ goto $label$51 }
	$14 = [14]
	goto $label$7 
	
.LABEL $label$129
	$2 = *($5 + [36])
	if ( ((int_32)$2 == (int_32)$16) ){ goto $label$50 }
	$14 = [15]
	goto $label$7 
	
.LABEL $label$128
	$14 = [16]
	goto $label$7 
	
.LABEL $label$127
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$48 }
	$14 = [17]
	goto $label$7 
	
.LABEL $label$126
	CALL _ZdlPv(*(($2 + [-4])))
	$14 = [18]
	goto $label$7 
	
.LABEL $label$125
	$2 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$49 }
	$14 = [19]
	goto $label$7 
	
.LABEL $label$124
	$6 = *($5 + [32])
	goto $label$47 
	
.LABEL $label$123
	CALL $9(($5 + [32]), $12, [124])
	CALL eosio_assert(((int_64)*($3) == (int_64)(CASTING uint_64)(uint_32 ((int_32)((int_32)(*($5 + [36]) - *($5 + [32])) / (int_32)[12]) * (int_32)*($5 + [264])))), [9017])
	$2 = *($5 + [36])
	$6 = *($5 + [32])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$14 }
	$14 = [68]
	goto $label$7 
	
.LABEL $label$122
	$14 = [69]
	goto $label$7 
	
.LABEL $label$121
	CALL $38($0, ($5 + [112]), $6, *($1), ($5 + [48]), [1])
	$6 = ($6 + [12])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$13 }
	$14 = [70]
	goto $label$7 
	
.LABEL $label$120
	$6 = *($5 + [32])
	$14 = [71]
	goto $label$7 
	
.LABEL $label$119
	if ( ($6 == 0) ){ goto $label$46 }
	$14 = [72]
	goto $label$7 
	
.LABEL $label$118
	$16 = *($5 + [36])
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$12 }
	$14 = [73]
	goto $label$7 
	
.LABEL $label$117
	$14 = [74]
	goto $label$7 
	
.LABEL $label$116
	$2 = ($16 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$10 }
	$14 = [75]
	goto $label$7 
	
.LABEL $label$115
	CALL _ZdlPv(*(($16 + [-4])))
	$14 = [76]
	goto $label$7 
	
.LABEL $label$114
	$16 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$11 }
	$14 = [77]
	goto $label$7 
	
.LABEL $label$113
	$2 = *($5 + [32])
	goto $label$9 
	
.LABEL $label$112
	$6 = $16
	$14 = [20]
	goto $label$7 
	
.LABEL $label$111
	*($5 + [36]) = $16
	CALL _ZdlPv($6)
	$14 = [21]
	goto $label$7 
	
.LABEL $label$110
	$7 = *($0 + [8])
	*($5 + [392]) = [8399]
	*($5 + [396]) = CALL $142([8399])
	*($5 + [8]) = *($5 + [392])
	if ( ((int_64)$7 != (int_64)*(CALL $7(($5 + [32]), ($5 + [8])))) ){ goto $label$44 }
	$14 = [61]
	goto $label$7 
	
.LABEL $label$109
	$6 = *($11)
	$2 = CALL $142([8385])
	if ( ((int_32)$2 != (int_32)( *(($5 + [252])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$43 }
	$14 = [62]
	goto $label$7 
	
.LABEL $label$108
	if ( CALL $123($11, [0], [-1], [8385], $2) ){ goto $label$42 }
	$14 = [63]
	goto $label$7 
	
.LABEL $label$107
	CALL $42($0, $1, *($3))
	$14 = [22]
	goto $label$7 
	
.LABEL $label$106
	if ( (*($5 + [48]) & [1]) ){ goto $label$41 }
	$14 = [60]
	goto $label$7 
	
.LABEL $label$105
	if ( (*($5 + [64]) & [1]) ){ goto $label$40 }
	$14 = [59]
	goto $label$7 
	
.LABEL $label$104
	if ( (*($5 + [80]) & [1]) ){ goto $label$38 }
	$14 = [58]
	goto $label$7 
	
.LABEL $label$103
	$16 = *($5 + [96])
	if ( ($16 == 0) ){ goto $label$36 }
	$14 = [26]
	goto $label$7 
	
.LABEL $label$102
	$2 = *($5 + [100])
	if ( ((int_32)$2 == (int_32)$16) ){ goto $label$33 }
	$14 = [27]
	goto $label$7 
	
.LABEL $label$101
	$14 = [28]
	goto $label$7 
	
.LABEL $label$100
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$31 }
	$14 = [29]
	goto $label$7 
	
.LABEL $label$99
	CALL _ZdlPv(*(($2 + [-4])))
	$14 = [30]
	goto $label$7 
	
.LABEL $label$98
	$2 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$32 }
	$14 = [31]
	goto $label$7 
	
.LABEL $label$97
	$6 = *($5 + [96])
	goto $label$30 
	
.LABEL $label$96
	CALL _ZdlPv(*($5 + [56]))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$39 }
	$14 = [24]
	goto $label$7 
	
.LABEL $label$95
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$37 }
	$14 = [25]
	goto $label$7 
	
.LABEL $label$94
	CALL _ZdlPv(*($15 + [8]))
	$16 = *($5 + [96])
	if ( $16 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$93
	$6 = $16
	$14 = [32]
	goto $label$7 
	
.LABEL $label$92
	*($5 + [100]) = $16
	CALL _ZdlPv($6)
	$14 = [33]
	goto $label$7 
	
.LABEL $label$91
	if ( ((*($5 + [148]) & [1]) == 0) ){ goto $label$29 }
	$14 = [34]
	goto $label$7 
	
.LABEL $label$90
	CALL _ZdlPv(*(($5 + [156])))
	$14 = [35]
	goto $label$7 
	
.LABEL $label$89
	$6 = *(($5 + [132]))
	if ( ($6 == 0) ){ goto $label$28 }
	$14 = [36]
	goto $label$7 
	
.LABEL $label$88
	*(($5 + [136])) = $6
	CALL _ZdlPv($6)
	$14 = [37]
	goto $label$7 
	
.LABEL $label$87
	$15 = *($5 + [216])
	if ( ($15 == 0) ){ goto $label$27 }
	$14 = [38]
	goto $label$7 
	
.LABEL $label$86
	$12 = ($5 + [220])
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$26 }
	$14 = [39]
	goto $label$7 
	
.LABEL $label$85
	$14 = [40]
	goto $label$7 
	
.LABEL $label$84
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	$14 = [41]
	goto $label$7 
	
.LABEL $label$83
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$23 }
	$14 = [42]
	goto $label$7 
	
.LABEL $label$82
	CALL _ZdlPv(*(($6 + [44])))
	$14 = [43]
	goto $label$7 
	
.LABEL $label$81
	$16 = *($6 + [20])
	if ( ($16 == 0) ){ goto $label$22 }
	$14 = [44]
	goto $label$7 
	
.LABEL $label$80
	*(($6 + [24])) = $16
	CALL _ZdlPv($16)
	$14 = [45]
	goto $label$7 
	
.LABEL $label$79
	CALL _ZdlPv($6)
	$14 = [46]
	goto $label$7 
	
.LABEL $label$78
	if ( ((int_32)$15 != (int_32)$2) ){ goto $label$25 }
	$14 = [47]
	goto $label$7 
	
.LABEL $label$77
	$6 = *(($5 + [216]))
	goto $label$21 
	
.LABEL $label$76
	$6 = $15
	$14 = [48]
	goto $label$7 
	
.LABEL $label$75
	*($12) = $15
	CALL _ZdlPv($6)
	$14 = [49]
	goto $label$7 
	
.LABEL $label$74
	if ( (*($11) & [1]) ){ goto $label$20 }
	$14 = [55]
	goto $label$7 
	
.LABEL $label$73
	if ( (*($10) & [1]) ){ goto $label$19 }
	$14 = [54]
	goto $label$7 
	
.LABEL $label$72
	if ( ((*($8) & [1]) == 0) ){ goto $label$17 }
	$14 = [52]
	goto $label$7 
	
.LABEL $label$71
	CALL _ZdlPv(*(($5 + [356])))
	$14 = [53]
	goto $label$7 
	
.LABEL $label$70
	$global$0 = ($5 + [400])
	return 
	
.LABEL $label$69
	CALL _ZdlPv(*(($5 + [256])))
	if ( ((*($10) & [1]) == 0) ){ goto $label$18 }
	$14 = [51]
	goto $label$7 
	
.LABEL $label$68
	CALL _ZdlPv(*(($5 + [244])))
	if ( (*($8) & [1]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$67
	$2 = $6
	$14 = [78]
	goto $label$7 
	
.LABEL $label$66
	*($5 + [36]) = $6
	CALL _ZdlPv($2)
	goto $label$45 
	
.LABEL $label$65
	$14 = [7]
	goto $label$7 
	
.LABEL $label$64
	$14 = [0]
	goto $label$7 
	
.LABEL $label$63
	$14 = [4]
	goto $label$7 
	
.LABEL $label$62
	$14 = [1]
	goto $label$7 
	
.LABEL $label$61
	$14 = [8]
	goto $label$7 
	
.LABEL $label$60
	$14 = [2]
	goto $label$7 
	
.LABEL $label$59
	$14 = [3]
	goto $label$7 
	
.LABEL $label$58
	$14 = [5]
	goto $label$7 
	
.LABEL $label$57
	$14 = [81]
	goto $label$7 
	
.LABEL $label$56
	$14 = [6]
	goto $label$7 
	
.LABEL $label$55
	$14 = [11]
	goto $label$7 
	
.LABEL $label$54
	$14 = [12]
	goto $label$7 
	
.LABEL $label$53
	$14 = [67]
	goto $label$7 
	
.LABEL $label$52
	$14 = [13]
	goto $label$7 
	
.LABEL $label$51
	$14 = [21]
	goto $label$7 
	
.LABEL $label$50
	$14 = [64]
	goto $label$7 
	
.LABEL $label$49
	$14 = [16]
	goto $label$7 
	
.LABEL $label$48
	$14 = [18]
	goto $label$7 
	
.LABEL $label$47
	$14 = [20]
	goto $label$7 
	
.LABEL $label$46
	$14 = [21]
	goto $label$7 
	
.LABEL $label$45
	$14 = [21]
	goto $label$7 
	
.LABEL $label$44
	$14 = [22]
	goto $label$7 
	
.LABEL $label$43
	$14 = [22]
	goto $label$7 
	
.LABEL $label$42
	$14 = [22]
	goto $label$7 
	
.LABEL $label$41
	$14 = [23]
	goto $label$7 
	
.LABEL $label$40
	$14 = [24]
	goto $label$7 
	
.LABEL $label$39
	$14 = [59]
	goto $label$7 
	
.LABEL $label$38
	$14 = [25]
	goto $label$7 
	
.LABEL $label$37
	$14 = [58]
	goto $label$7 
	
.LABEL $label$36
	$14 = [33]
	goto $label$7 
	
.LABEL $label$35
	$14 = [33]
	goto $label$7 
	
.LABEL $label$34
	$14 = [26]
	goto $label$7 
	
.LABEL $label$33
	$14 = [57]
	goto $label$7 
	
.LABEL $label$32
	$14 = [28]
	goto $label$7 
	
.LABEL $label$31
	$14 = [30]
	goto $label$7 
	
.LABEL $label$30
	$14 = [32]
	goto $label$7 
	
.LABEL $label$29
	$14 = [35]
	goto $label$7 
	
.LABEL $label$28
	$14 = [37]
	goto $label$7 
	
.LABEL $label$27
	$14 = [49]
	goto $label$7 
	
.LABEL $label$26
	$14 = [56]
	goto $label$7 
	
.LABEL $label$25
	$14 = [40]
	goto $label$7 
	
.LABEL $label$24
	$14 = [46]
	goto $label$7 
	
.LABEL $label$23
	$14 = [43]
	goto $label$7 
	
.LABEL $label$22
	$14 = [45]
	goto $label$7 
	
.LABEL $label$21
	$14 = [48]
	goto $label$7 
	
.LABEL $label$20
	$14 = [50]
	goto $label$7 
	
.LABEL $label$19
	$14 = [51]
	goto $label$7 
	
.LABEL $label$18
	$14 = [54]
	goto $label$7 
	
.LABEL $label$17
	$14 = [53]
	goto $label$7 
	
.LABEL $label$16
	$14 = [53]
	goto $label$7 
	
.LABEL $label$15
	$14 = [52]
	goto $label$7 
	
.LABEL $label$14
	$14 = [71]
	goto $label$7 
	
.LABEL $label$13
	$14 = [69]
	goto $label$7 
	
.LABEL $label$12
	$14 = [79]
	goto $label$7 
	
.LABEL $label$11
	$14 = [74]
	goto $label$7 
	
.LABEL $label$10
	$14 = [76]
	goto $label$7 
	
.LABEL $label$9
	$14 = [78]
	goto $label$7 
	
.LABEL $label$8
	$14 = [83]
	goto $label$7 
	$14
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$7), [9715])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [84]) == (int_32)$7), [9715])
	
.LABEL $label$2
	*($4 + [92]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [96]) = $1
	CALL require_auth(*($0))
	*((($3 + [56]) + [32])) = [0]
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [92]) = [0]
	$4 = *($0)
	*($3 + [56]) = $4
	*($3 + [64]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-6147718988089524224, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $33(($3 + [56]), $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($3 + [56])), [9715])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)[20]), [8864])
	
.LABEL $label$1
	*((($3 + [16]) + [32])) = [0]
	*(($3 + [54])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	*($3 + [8]) = ($3 + [16])
	CALL $47($3, ($3 + [8]), ($3 + [96]))
	if ( ($2 == 0) ){ goto $label$2 }
	$0 = [0]
	
.LOOP $label$3:
	CALL $48(($3 + [104]), ($3 + [8]), ($3 + [96]))
	if ( ((int_32)*($3 + [4]) == (int_32)*($3 + [108])) ){ goto $label$2 }
	$4 = *($3)
	*($3 + [104]) = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [10194])
	CALL $49(($3 + [104]))
	CALL $50(*($3 + [8]), $5)
	*($3) = *($3 + [104])
	$0 = ($0 + [1])
	if ( ($0 <= $2) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $30(($3 + [40]))
	$6 = *($3 + [80])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [84])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [44])))
	
.LABEL $label$9
	$2 = *($0 + [20])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($0 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$7 }
	$0 = *(($3 + [80]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($3 + [112])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $68($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $69($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $70($2, $1)
	CALL $72(CALL $71(CALL $71($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $142([8242])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8242], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $131())
	*(CALL $131()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $139($4, ($3 + [12]), $2)
	$5 = CALL $131()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $125($3)
	
.LABEL $label$1
	CALL $126($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $128 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$1 = ($global$0 - [160])
	$global$0 = $1
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9305])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9403])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9452])
	*($1 + [152]) = [8389]
	*($1 + [156]) = CALL $142([8389])
	*($1 + [72]) = *($1 + [152])
	$3 = *(CALL $7(($1 + [80]), ($1 + [72])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9305])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)0
	
.LABEL $label$12
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $142([8399])
	*($1 + [64]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [64])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $3
	*($1 + [80]) = $8
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$3 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$18 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [104]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [152]) = [8463]
	*($1 + [156]) = CALL $142([8463])
	*($1 + [56]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [56])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9305])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$5 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$28
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$24
	$5 = (int_64)0
	
.LABEL $label$23
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $142([8399])
	*($1 + [48]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [48])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($1 + [104]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [152]) = [8476]
	*($1 + [156]) = CALL $142([8476])
	*($1 + [40]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [40])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9305])
	goto $label$36 
	
.LABEL $label$37
	if ( ($2 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$5 = (int_64)0
	
.LOOP $label$38:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$39
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$38 }
	goto $label$34 
	
.LABEL $label$35
	$5 = (int_64)0
	
.LABEL $label$34
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $142([8399])
	*($1 + [32]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [32])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$40 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [104]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $7
	
.LABEL $label$41
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [152]) = [8424]
	*($1 + [156]) = CALL $142([8424])
	*($1 + [24]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [24])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [9305])
	goto $label$47 
	
.LABEL $label$48
	if ( ($2 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$5 = (int_64)0
	
.LOOP $label$49:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$50
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$49 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$45 
	
.LABEL $label$46
	$5 = (int_64)0
	
.LABEL $label$45
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $142([8399])
	*($1 + [16]) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), ($1 + [16])))
	*(($1 + [112])) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$51 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$53 }
	
.LOOP $label$54:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$54 }
	$2 = *(($1 + [104]))
	goto $label$52 
	
.LABEL $label$53
	$2 = $7
	
.LABEL $label$52
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$51
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [152]) = [8450]
	*($1 + [156]) = CALL $142([8450])
	*($1 + [8]) = *($1 + [152])
	$8 = *(CALL $7(($1 + [80]), ($1 + [8])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [9305])
	goto $label$58 
	
.LABEL $label$59
	if ( ($2 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$5 = (int_64)0
	
.LOOP $label$60:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$61
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$60 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$56 
	
.LABEL $label$57
	$5 = (int_64)0
	
.LABEL $label$56
	*($1 + [152]) = [8399]
	*($1 + [156]) = CALL $142([8399])
	*($1) = *($1 + [152])
	$10 = *(CALL $7(($1 + [80]), $1))
	*(($9 = ($1 + [112]))) = [0]
	*($1 + [88]) = $8
	*($1 + [80]) = $10
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = CALL $2(($1 + [80]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$62 }
	$11 = ($1 + [108])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$66 }
	CALL _ZdlPv($4)
	
.LABEL $label$66
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$65 }
	$2 = *(($1 + [104]))
	goto $label$63 
	
.LABEL $label$64
	$2 = $7
	
.LABEL $label$63
	*($11) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$62
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$5 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9534])
	$2 = CALL tapos_block_prefix()
	$4 = CALL tapos_block_num()
	$3 = CALL current_time()
	*($9) = [0]
	*($1 + [88]) = (int_64)6138663577826885632
	*($1 + [80]) = (int_64)6138663577826885632
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$6 = (CASTING int_64)(int_32 ($4 + $2))
	$2 = CALL $4(($1 + [80]), (int_64)4995142087184830980, [8366])
	$8 = *($2 + [40])
	$10 = *($2 + [16])
	$7 = *($1 + [104])
	if ( ($7 == 0) ){ goto $label$67 }
	$9 = ($1 + [108])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$69 }
	
.LOOP $label$70:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$71 }
	CALL _ZdlPv($4)
	
.LABEL $label$71
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$70 }
	$2 = *(($1 + [104]))
	goto $label$68 
	
.LABEL $label$69
	$2 = $7
	
.LABEL $label$68
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$67
	*($1 + [152]) = ((int_64)((int_64)((int_64)((int_64)((int_64)$5 + (int_64)(CASTING int_64)(int_32 $0)) + (int_64)$3) + (int_64)$6) + (int_64)$10) + (int_64)$8)
	CALL sha512(($1 + [152]), [4], ($1 + [80]))
	$5 = CALL $133(*((($1 + [80]) + (CASTING uint_32)(uint_64 ((int_64)CALL $133(*((($1 + [80]) + ((int_32)(((int_32)CALL $fimport$5() * (int_32)CALL $fimport$6()) + $0) % (int_32)[64])))) % (int_64)64)))))
	$global$0 = ($1 + [160])
	return (CASTING uint_32)(uint_64 $5)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $122($1, $2, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	$4 = CALL $116($3, $1, $4, ($5 - $4), $1)
	$8 = *($7)
	if ( ((int_32)$8 != (int_32)*($6)) ){ goto $label$6 }
	CALL $10($0, $4)
	$4 = ($5 + [1])
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $115($8, $4)
	*($7) = (*($7) + [12])
	$4 = ($5 + [1])
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$4
	$5 = CALL $122($1, $2, $4)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	$4 = CALL $116($3, $1, $4, ((int_32)$4 ^ (int_32)[-1]), $1)
	$1 = ($0 + [4])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($1) = (*($1) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	CALL $11($0, $4)
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$1 = ($global$0 - [176])
	$global$0 = $1
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9305])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9403])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9452])
	*($1 + [168]) = [8389]
	*($1 + [172]) = CALL $142([8389])
	*($1 + [88]) = *($1 + [168])
	$3 = *(CALL $7(($1 + [96]), ($1 + [88])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9305])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)0
	
.LABEL $label$12
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1 + [80]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [80])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $3
	*($1 + [96]) = $8
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$3 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$18 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [168]) = [8411]
	*($1 + [172]) = CALL $142([8411])
	*($1 + [72]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [72])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9305])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$5 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$28
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	goto $label$23 
	
.LABEL $label$24
	$5 = (int_64)0
	
.LABEL $label$23
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1 + [64]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [64])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$29 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$32:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$33 }
	CALL _ZdlPv($4)
	
.LABEL $label$33
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$32 }
	$2 = *(($1 + [120]))
	goto $label$30 
	
.LABEL $label$31
	$2 = $7
	
.LABEL $label$30
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$29
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [168]) = [8424]
	*($1 + [172]) = CALL $142([8424])
	*($1 + [56]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [56])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9305])
	goto $label$36 
	
.LABEL $label$37
	if ( ($2 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$5 = (int_64)0
	
.LOOP $label$38:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$39
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$38 }
	goto $label$34 
	
.LABEL $label$35
	$5 = (int_64)0
	
.LABEL $label$34
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1 + [48]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [48])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$40 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$44 }
	CALL _ZdlPv($4)
	
.LABEL $label$44
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$43 }
	$2 = *(($1 + [120]))
	goto $label$41 
	
.LABEL $label$42
	$2 = $7
	
.LABEL $label$41
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$40
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [168]) = [8437]
	*($1 + [172]) = CALL $142([8437])
	*($1 + [40]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [40])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [9305])
	goto $label$47 
	
.LABEL $label$48
	if ( ($2 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$5 = (int_64)0
	
.LOOP $label$49:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$50
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$49 }
	goto $label$45 
	
.LABEL $label$46
	$5 = (int_64)0
	
.LABEL $label$45
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1 + [32]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [32])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), ((int_64)$5 & (int_64)72057594037927935), [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$51 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$53 }
	
.LOOP $label$54:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$54 }
	$2 = *(($1 + [120]))
	goto $label$52 
	
.LABEL $label$53
	$2 = $7
	
.LABEL $label$52
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$51
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [168]) = [8450]
	*($1 + [172]) = CALL $142([8450])
	*($1 + [24]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [24])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [9305])
	goto $label$58 
	
.LABEL $label$59
	if ( ($2 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$5 = (int_64)0
	
.LOOP $label$60:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$61
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$60 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$56 
	
.LABEL $label$57
	$5 = (int_64)0
	
.LABEL $label$56
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1 + [16]) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), ($1 + [16])))
	*(($1 + [128])) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$62 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$66 }
	CALL _ZdlPv($4)
	
.LABEL $label$66
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$65 }
	$2 = *(($1 + [120]))
	goto $label$63 
	
.LABEL $label$64
	$2 = $7
	
.LABEL $label$63
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$62
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$3 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9534])
	*($1 + [168]) = [8463]
	*($1 + [172]) = CALL $142([8463])
	*($1 + [8]) = *($1 + [168])
	$8 = *(CALL $7(($1 + [96]), ($1 + [8])))
	$2 = CALL $142([8385])
	if ( ($2 <= [8]) ){ goto $label$70 }
	CALL eosio_assert([0], [9305])
	goto $label$69 
	
.LABEL $label$70
	if ( ($2 == 0) ){ goto $label$68 }
	
.LABEL $label$69
	$5 = (int_64)0
	
.LOOP $label$71:
	$4 = *(($2 + [8384]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$72 }
	CALL eosio_assert([0], [9350])
	
.LABEL $label$72
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$71 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$67 
	
.LABEL $label$68
	$5 = (int_64)0
	
.LABEL $label$67
	*($1 + [168]) = [8399]
	*($1 + [172]) = CALL $142([8399])
	*($1) = *($1 + [168])
	$10 = *(CALL $7(($1 + [96]), $1))
	*(($9 = ($1 + [128]))) = [0]
	*($1 + [104]) = $8
	*($1 + [96]) = $10
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$2 = CALL $2(($1 + [96]), $5, [8333])
	$5 = *($2 + [8])
	$8 = *($2)
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$73 }
	$11 = ($1 + [124])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$75 }
	
.LOOP $label$76:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$77 }
	CALL _ZdlPv($4)
	
.LABEL $label$77
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$76 }
	$2 = *(($1 + [120]))
	goto $label$74 
	
.LABEL $label$75
	$2 = $7
	
.LABEL $label$74
	*($11) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$73
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9472])
	$5 = ((int_64)$8 + (int_64)$3)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9515])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9534])
	$2 = CALL tapos_block_prefix()
	$4 = CALL tapos_block_num()
	$3 = CALL current_time()
	*($9) = [0]
	*($1 + [104]) = (int_64)6138663577826885632
	*($1 + [96]) = (int_64)6138663577826885632
	*($1 + [112]) = (int_64)-1
	*($1 + [120]) = (int_64)0
	$6 = (CASTING int_64)(int_32 ((int_32)$4 * (int_32)$2))
	$2 = CALL $4(($1 + [96]), (int_64)4995142087184830980, [8366])
	$8 = *($2 + [40])
	$10 = *($2 + [16])
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$78 }
	$9 = ($1 + [124])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$80 }
	
.LOOP $label$81:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$82 }
	CALL _ZdlPv($4)
	
.LABEL $label$82
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$81 }
	$2 = *(($1 + [120]))
	goto $label$79 
	
.LABEL $label$80
	$2 = $7
	
.LABEL $label$79
	*($9) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$78
	*($1 + [168]) = ((int_64)((int_64)((int_64))(((int_64)$5 + (int_64)(CASTING int_64)(int_32 $0)) - $3) + (int_64)$6) + (int_64)$10) + (int_64)$8)
	CALL sha512(($1 + [168]), [4], ($1 + [96]))
	$5 = CALL $133(*((($1 + [96]) + (CASTING uint_32)(uint_64 ((int_64)CALL $133(*((($1 + [96]) + ((int_32)(((int_32)CALL $fimport$5() * (int_32)CALL $fimport$6()) + $0) % (int_32)[64])))) % (int_64)64)))))
	$global$0 = ($1 + [176])
	return (CASTING uint_32)(uint_64 $5)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9552])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9657])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9590])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9657])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [9715])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5069606918720847872, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $5($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [9715])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $76(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$7 = *($5 + [68])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9715])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $3($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9715])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9789])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9789])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = $1
	$3 = CALL transaction_size()
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [8218])
	$6 = $1
	CALL sha256($4, $5, $6)
	$1 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($6 + $1))
	CALL $121($0, *((uint_32($3 >> [4]) + [8192])))
	CALL $121($0, *((($3 & [15]) + [8192])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$1 }
	$2
	$global$0 = ($6 + [32])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_64 $30
	$4 = ($global$0 - [128])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [10038])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10084])
	$6 = ($1 + [16])
	$7 = *($1 + [16])
	if ( ($7 & [1]) ){ goto $label$5 }
	$8 = ($6 + [1])
	$7 = uint_32($7 >> [1])
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = *(($1 + [24]))
	$7 = *(($1 + [20]))
	if ( ($7 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [9305])
	goto $label$2 
	
.LABEL $label$3
	if ( $7 ){ goto $label$2 }
	$9 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (($8 + $7) + [-1])
	$11 = *($10)
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9350])
	$11 = *($10)
	
.LABEL $label$7
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$9 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$1
	*($5 + [16]) = ((int_64)$9 | (int_64)*($1 + [28]))
	$11 = *($1)
	$10 = ($1 + [4])
	CALL $117($10, *($3))
	CALL $117($6, *($3 + [4]))
	$7 = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	*($1 + [28]) = $7
	*($1 + [36]) = *(*($3 + [16]))
	$7 = *($3 + [20])
	*($1 + [40]) = *($7)
	*($1 + [44]) = *(*($3 + [24]))
	*($1 + [48]) = *($7)
	*($1 + [52]) = *(*($3 + [28]))
	*($1 + [56]) = *(*($3 + [32]))
	*($1 + [60]) = *(*($3 + [36]))
	*($1 + [64]) = *(*($3 + [40]))
	*($1 + [68]) = *(*($3 + [44]))
	*($1 + [72]) = *(*($3 + [48]))
	*($1 + [76]) = *(*($3 + [52]))
	*($1 + [80]) = *(*($3 + [56]))
	*($1 + [84]) = *(*($3 + [60]))
	*($1 + [88]) = *(*($3 + [64]))
	*($1 + [92]) = *(*($3 + [68]))
	*($1 + [96]) = *(*($3 + [72]))
	*($1 + [100]) = *(*($3 + [76]))
	*($1 + [104]) = *(*($3 + [80]))
	CALL eosio_assert(((int_32)$11 == (int_32)*($1)), [10135])
	$7 = *($1 + [4])
	$8 = ( *(($1 + [8])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [52])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [104])
	$12 = ($1 + [100])
	$13 = ($1 + [96])
	$14 = ($1 + [92])
	$15 = ($1 + [88])
	$16 = ($1 + [84])
	$17 = ($1 + [80])
	$18 = ($1 + [76])
	$19 = ($1 + [72])
	$20 = ($1 + [68])
	$21 = ($1 + [64])
	$22 = ($1 + [60])
	$23 = ($1 + [56])
	$24 = ($1 + [52])
	$25 = ($1 + [48])
	$26 = ($1 + [44])
	$27 = ($1 + [40])
	$28 = ($1 + [36])
	$29 = ($1 + [32])
	$3 = ($1 + [28])
	$30 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$8:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$8 }
	$11 = *(($1 + [16]))
	$11 = ( *(($1 + [20])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$7 = ($11 + $7)
	$9 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$9 }
	if ( ($7 <= [513]) ){ goto $label$11 }
	$11 = CALL $145($7)
	goto $label$10 
	
.LABEL $label$11
	$11 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$10
	*($5 + [4]) = $11
	*($5) = $11
	*($5 + [8]) = ($11 + $7)
	*($5 + [24]) = $5
	*($5 + [36]) = $10
	*($5 + [40]) = $6
	*($5 + [44]) = $3
	*($5 + [48]) = $29
	*($5 + [52]) = $28
	*($5 + [56]) = $27
	*($5 + [60]) = $26
	*($5 + [64]) = $25
	*($5 + [68]) = $24
	*($5 + [72]) = $23
	*($5 + [76]) = $22
	*($5 + [80]) = $21
	*($5 + [84]) = $20
	*($5 + [88]) = $19
	*($5 + [92]) = $18
	*($5 + [96]) = $17
	*($5 + [100]) = $16
	*($5 + [104]) = $15
	*($5 + [32]) = $1
	*($5 + [112]) = $13
	*($5 + [108]) = $14
	*($5 + [116]) = $12
	*($5 + [120]) = $8
	CALL $84(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*(($1 + [112])), $2, $11, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$20 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$30) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $148($11)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$30) ){ goto $label$18 }
	
.LABEL $label$19
	*(($0 + [16])) = ((int_64)$30 + (int_64)1)
	$7 = [1]
	$11 = *($6)
	if ( (($11 & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = [1]
	$11 = *($6)
	if ( ($11 & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	$8 = ($6 + $7)
	$7 = uint_32($11 >> $7)
	if ( ((uint_32)$7 >= (uint_32)[8]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$8 = *(($1 + [24]))
	$7 = *(($1 + [20]))
	if ( ($7 <= [8]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL eosio_assert([0], [9305])
	goto $label$13 
	
.LABEL $label$14
	if ( $7 ){ goto $label$13 }
	$9 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)0
	
.LOOP $label$21:
	$10 = (($8 + $7) + [-1])
	$11 = *($10)
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9350])
	$11 = *($10)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$21 }
	$9 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$12
	*($5 + [32]) = ((int_64)$9 | (int_64)*($3))
	if ( (CALL $141(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$23 }
	$11 = ($1 + [116])
	$7 = *($11)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$24 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060986526864314368, ($5 + [24]), $30)
	*($11) = $7
	
.LABEL $label$24
	CALL db_idx64_update($7, $2, ($5 + [32]))
	
.LABEL $label$23
	$global$0 = ($5 + [128])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_64 $30
	int_64 $31
	int_64 $32
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4060986526864314368, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = ((int_64)*(*(CALL $83(($3 + [32])) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9849])
	*($1) = *(($6 + [16]))
	$9 = ($1 + [4])
	CALL $117($9, *($5 + [4]))
	$8 = ($1 + [16])
	CALL $117($8, *($5 + [8]))
	$6 = *(*($5 + [12]))
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [28]) = $6
	*($1 + [36]) = *(*($5 + [20]))
	$6 = *($5 + [24])
	*($1 + [40]) = *($6)
	*($1 + [44]) = *(*($5 + [28]))
	*($1 + [48]) = *($6)
	*($1 + [52]) = *(*($5 + [32]))
	*($1 + [56]) = *(*($5 + [36]))
	*($1 + [60]) = *(*($5 + [40]))
	*($1 + [64]) = *(*($5 + [44]))
	*($1 + [68]) = *(*($5 + [48]))
	*($1 + [72]) = *(*($5 + [52]))
	*($1 + [76]) = *(*($5 + [56]))
	*($1 + [80]) = *(*($5 + [60]))
	*($1 + [84]) = *(*($5 + [64]))
	*($1 + [88]) = *(*($5 + [68]))
	*($1 + [92]) = *(*($5 + [72]))
	*($1 + [96]) = *(*($5 + [76]))
	*($1 + [100]) = *(*($5 + [80]))
	*($1 + [104]) = *(*($5 + [84]))
	$5 = *($1 + [4])
	$6 = ( *(($1 + [8])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [52])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [104])
	$11 = ($1 + [100])
	$12 = ($1 + [96])
	$13 = ($1 + [92])
	$14 = ($1 + [88])
	$15 = ($1 + [84])
	$16 = ($1 + [80])
	$17 = ($1 + [76])
	$18 = ($1 + [72])
	$19 = ($1 + [68])
	$20 = ($1 + [64])
	$21 = ($1 + [60])
	$22 = ($1 + [56])
	$23 = ($1 + [52])
	$24 = ($1 + [48])
	$25 = ($1 + [44])
	$26 = ($1 + [40])
	$27 = ($1 + [36])
	$28 = ($1 + [32])
	$29 = ($1 + [28])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [16]))
	$6 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $145($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $8
	*($3 + [44]) = $29
	*($3 + [48]) = $28
	*($3 + [52]) = $27
	*($3 + [56]) = $26
	*($3 + [60]) = $25
	*($3 + [64]) = $24
	*($3 + [68]) = $23
	*($3 + [72]) = $22
	*($3 + [76]) = $21
	*($3 + [80]) = $20
	*($3 + [84]) = $19
	*($3 + [88]) = $18
	*($3 + [92]) = $17
	*($3 + [96]) = $16
	*($3 + [100]) = $15
	*($3 + [104]) = $14
	*($3 + [112]) = $12
	*($3 + [108]) = $13
	*($3 + [116]) = $11
	*($3 + [120]) = $10
	CALL $84(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($4 + [8]), (int_64)-4060986526864314368, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $148($6)
	
.LABEL $label$7
	if ( ((uint_64)*($4 + [16]) > (uint_64)$7) ){ goto $label$8 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$8
	$30 = *(($4 + [8]))
	$31 = *(*(($0 + [8])))
	$32 = *($1)
	$6 = *(($1 + [24]))
	$0 = ($5 & [1])
	$5 = *(($1 + [16]))
	$5 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : $0 )
	if ( ($5 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9305])
	goto $label$11 
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = ( $6 ? ($8 + [1]) : $0 )
	$7 = (int_64)0
	
.LOOP $label$13:
	$0 = (($4 + $5) + [-1])
	$6 = *($0)
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9350])
	$6 = *($0)
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$7 = (int_64)0
	
.LABEL $label$9
	*($3 + [32]) = ((int_64)$7 | (int_64)*(($1 + [28])))
	*($1 + [116]) = CALL db_idx64_store($30, (int_64)-4060986526864314368, $31, $32, ($3 + [32]))
	$global$0 = ($3 + [128])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_64 $8, int_64 $9)
{
	int_32 $10
	$10 = ($global$0 - [144])
	$global$0 = $10
	*($10 + [106]) = $3
	*($10 + [107]) = $2
	*($10 + [105]) = $4
	*($10 + [104]) = $5
	*($10 + [103]) = $6
	*($10 + [102]) = $7
	*($10 + [88]) = $8
	*($10 + [80]) = $9
	CALL require_auth(*($0))
	*(($6 = ($10 + [72]))) = [0]
	*($10 + [56]) = (int_64)-1
	$9 = *($0)
	*($10 + [40]) = $9
	*($10 + [48]) = $9
	*($10 + [64]) = (int_64)0
	$7 = CALL db_lowerbound_i64($9, $9, (int_64)7235159541906337808, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $18(($10 + [40]), $7)
	$6 = *(($10 + [68]))
	$4 = *(($10 + [64]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_32)*($5) == (int_32)[1]) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$8 = *($0)
	*($10) = $1
	*($10 + [4]) = ($10 + [107])
	*($10 + [8]) = ($10 + [106])
	*($10 + [12]) = ($10 + [105])
	*($10 + [16]) = ($10 + [104])
	*($10 + [20]) = ($10 + [103])
	*($10 + [24]) = ($10 + [102])
	*($10 + [28]) = ($10 + [88])
	*($10 + [32]) = ($10 + [80])
	*($10 + [136]) = $8
	CALL eosio_assert(((int_64)$9 == (int_64)CALL $fimport$10()), [9798])
	*($10 + [116]) = $10
	*($10 + [112]) = ($10 + [40])
	*($10 + [120]) = ($10 + [136])
	*(($7 = CALL _Znwj([56])) + [12]) = [0]
	*($7 + [4 align=4]) = (int_64)0
	*($7 + [40]) = ($10 + [40])
	CALL $19(($10 + [112]), $7)
	*($10 + [128]) = $7
	$9 = *($7)
	*($10 + [112]) = $9
	$4 = *($7 + [44])
	*($10 + [108]) = $4
	$0 = ($10 + [68])
	$5 = *($0)
	if ( ((uint_32)$5 >= (uint_32)*($6)) ){ goto $label$5 }
	*($5 + [8]) = $9
	*($5 + [16]) = $4
	*($10 + [128]) = [0]
	*($5) = $7
	*($0) = ($5 + [24])
	$7 = *($10 + [128])
	*($10 + [128]) = [0]
	if ( ($7 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($10 + [40])), [9715])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$7 = CALL db_find_i64(*($10 + [40]), *(($10 + [48])), (int_64)7235159541906337808, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $18(($10 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)($10 + [40])), [9715])
	
.LABEL $label$6
	$9 = *($0)
	*($10) = $1
	*($10 + [4]) = ($10 + [107])
	*($10 + [8]) = ($10 + [106])
	*($10 + [12]) = ($10 + [105])
	*($10 + [16]) = ($10 + [104])
	*($10 + [20]) = ($10 + [103])
	*($10 + [24]) = ($10 + [102])
	*($10 + [28]) = ($10 + [88])
	*($10 + [32]) = ($10 + [80])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10003])
	CALL $20(($10 + [40]), $5, $9, $10)
	goto $label$4 
	
.LABEL $label$5
	CALL $21(($10 + [64]), ($10 + [128]), ($10 + [112]), ($10 + [108]))
	$7 = *($10 + [128])
	*($10 + [128]) = [0]
	if ( $7 ){ goto $label$3 }
	
.LABEL $label$4
	$5 = *($10 + [64])
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($7 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($7 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($7)
	$5 = *($10 + [64])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($10 + [68])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	if ( ((*($6 + [4]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($6 + [12])))
	
.LABEL $label$16
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($10 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $5
	
.LABEL $label$12
	*($4) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($10 + [144])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $115(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17, int_32 $18, int_32 $19, int_32 $20, int_32 $21, int_32 $22)
{
	int_32 $23
	int_64 $24
	$23 = ($global$0 - [256])
	$global$0 = $23
	*($23 + [212]) = $4
	*($23 + [219]) = $3
	*($23 + [208]) = $5
	*($23 + [207]) = $6
	*($23 + [200]) = $7
	*($23 + [196]) = $9
	*($23 + [195]) = $10
	*($23 + [188]) = $11
	*($23 + [187]) = $12
	*($23 + [180]) = $13
	*($23 + [179]) = $14
	*($23 + [172]) = $15
	*($23 + [171]) = $16
	*($23 + [164]) = $17
	*($23 + [163]) = $18
	*($23 + [156]) = $19
	*($23 + [155]) = $20
	*($23 + [148]) = $21
	*($23 + [147]) = $22
	CALL require_auth(*($0))
	*(($23 + [136])) = [0]
	*($23 + [120]) = (int_64)-1
	*($23 + [128]) = (int_64)0
	*($23 + [140]) = [0]
	$24 = *($0)
	*($23 + [104]) = $24
	*($23 + [112]) = $24
	*($23 + [96]) = ($23 + [104])
	$22 = *($2)
	if ( ($22 & [1]) ){ goto $label$5 }
	$20 = ($2 + [1])
	$22 = uint_32($22 >> [1])
	if ( ((uint_32)$22 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$20 = *($2 + [8])
	$22 = *($2 + [4])
	if ( ($22 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [9305])
	goto $label$2 
	
.LABEL $label$3
	if ( $22 ){ goto $label$2 }
	$24 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$24 = (int_64)0
	
.LOOP $label$6:
	$21 = (($20 + $22) + [-1])
	$3 = *($21)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9350])
	$3 = *($21)
	
.LABEL $label$7
	$24 = ((int_64)((int_64)$24 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$22 = ($22 + [-1])
	if ( $22 ){ goto $label$6 }
	$24 = ((int_64)$24 << (int_64)8)
	$3 = *($23 + [219])
	
.LABEL $label$1
	*($23) = ((int_64)$24 | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)255))
	CALL $13(($23 + [88]), ($23 + [96]), $23)
	$24 = *($0)
	$22 = *($23 + [92])
	if ( ($22 == 0) ){ goto $label$10 }
	*($23 + [4]) = $2
	*($23) = $1
	*($23 + [8]) = ($23 + [219])
	*($23 + [12]) = ($23 + [212])
	*($23 + [16]) = ($23 + [208])
	*($23 + [20]) = ($23 + [207])
	*($23 + [24]) = ($23 + [200])
	*($23 + [28]) = ($23 + [196])
	*($23 + [32]) = ($23 + [195])
	*($23 + [36]) = ($23 + [188])
	*($23 + [40]) = ($23 + [187])
	*($23 + [44]) = ($23 + [180])
	*($23 + [48]) = ($23 + [179])
	*($23 + [52]) = ($23 + [172])
	*($23 + [56]) = ($23 + [171])
	*($23 + [60]) = ($23 + [164])
	*($23 + [64]) = ($23 + [163])
	*($23 + [68]) = ($23 + [156])
	*($23 + [72]) = ($23 + [155])
	*($23 + [80]) = ($23 + [147])
	*($23 + [76]) = ($23 + [148])
	CALL eosio_assert([1], [10003])
	CALL $14(*($23 + [96]), $22, $24, $23)
	$21 = *($23 + [128])
	if ( $21 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($23 + [4]) = $1
	*($23 + [8]) = $2
	*($23) = ($23 + [104])
	*($23 + [12]) = ($23 + [219])
	*($23 + [16]) = ($23 + [212])
	*($23 + [20]) = ($23 + [208])
	*($23 + [24]) = ($23 + [207])
	*($23 + [28]) = ($23 + [200])
	*($23 + [32]) = ($23 + [196])
	*($23 + [36]) = ($23 + [195])
	*($23 + [40]) = ($23 + [188])
	*($23 + [44]) = ($23 + [187])
	*($23 + [48]) = ($23 + [180])
	*($23 + [52]) = ($23 + [179])
	*($23 + [56]) = ($23 + [172])
	*($23 + [60]) = ($23 + [171])
	*($23 + [64]) = ($23 + [164])
	*($23 + [68]) = ($23 + [163])
	*($23 + [72]) = ($23 + [156])
	*($23 + [80]) = ($23 + [148])
	*($23 + [76]) = ($23 + [155])
	*($23 + [84]) = ($23 + [147])
	*($23 + [248]) = $24
	CALL eosio_assert(((int_64)*($23 + [104]) == (int_64)CALL $fimport$10()), [9798])
	*($23 + [228]) = $23
	*($23 + [224]) = ($23 + [104])
	*($23 + [232]) = ($23 + [248])
	*(($22 = CALL _Znwj([120])) + [4 align=4]) = (int_64)0
	*($22 + [12 align=4]) = (int_64)0
	*($22 + [20 align=4]) = (int_64)0
	*($22 + [108]) = ($23 + [104])
	CALL $15(($23 + [224]), $22)
	*($23 + [240]) = $22
	$24 = *($22)
	*($23 + [224]) = $24
	$21 = *($22 + [112])
	*($23 + [220]) = $21
	$20 = ($23 + [132])
	$3 = *($20)
	if ( ((uint_32)$3 >= (uint_32)*(($23 + [136]))) ){ goto $label$13 }
	*($3 + [8]) = $24
	*($3 + [16]) = $21
	*($23 + [240]) = [0]
	*($3) = $22
	*($20) = ($3 + [24])
	$22 = *($23 + [240])
	*($23 + [240]) = [0]
	if ( ($22 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $16(($23 + [128]), ($23 + [240]), ($23 + [224]), ($23 + [220]))
	$22 = *($23 + [240])
	*($23 + [240]) = [0]
	if ( $22 ){ goto $label$11 }
	
.LABEL $label$12
	$21 = *($23 + [128])
	if ( ($21 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($22 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($22 + [24])))
	
.LABEL $label$14
	if ( ((*($22 + [4]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($22 + [12])))
	
.LABEL $label$15
	CALL _ZdlPv($22)
	$21 = *($23 + [128])
	if ( ($21 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$20 = ($23 + [132])
	$3 = *($20)
	if ( ((int_32)$3 == (int_32)$21) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$22 = *($3)
	*($3) = [0]
	if ( ($22 == 0) ){ goto $label$19 }
	if ( ((*($22 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($22 + [24])))
	
.LABEL $label$20
	if ( ((*($22 + [4]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($22 + [12])))
	
.LABEL $label$21
	CALL _ZdlPv($22)
	
.LABEL $label$19
	if ( ((int_32)$21 != (int_32)$3) ){ goto $label$18 }
	$22 = *(($23 + [128]))
	goto $label$16 
	
.LABEL $label$17
	$22 = $21
	
.LABEL $label$16
	*($20) = $21
	CALL _ZdlPv($22)
	
.LABEL $label$8
	$global$0 = ($23 + [256])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $80(($3 + [8]), $1, $2)
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = *($2)
	$2 = *($4 + [16])
	if ( ($2 & [1]) ){ goto $label$6 }
	$6 = (($4 + [16]) + [1])
	$2 = uint_32($2 >> [1])
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$6 = *(($4 + [24]))
	$2 = *(($4 + [20]))
	if ( ($2 <= [8]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [9305])
	goto $label$3 
	
.LABEL $label$4
	if ( $2 ){ goto $label$3 }
	if ( ((int_64)$5 == (int_64)((int_64)0 | (int_64)*($4 + [28]))) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$8:
	$8 = (($6 + $2) + [-1])
	$9 = *($8)
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9350])
	$9 = *($8)
	
.LABEL $label$9
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	if ( ((int_64)$5 != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)*($4 + [28]))) ){ goto $label$1 }
	
.LABEL $label$2
	*($0) = *($3 + [8])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [12]) = [0]
	*($5 + [4 align=4]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [4])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [17])
	*($3 + [56]) = ($5 + [18])
	*($3 + [60]) = ($5 + [19])
	*($3 + [64]) = ($5 + [20])
	*($3 + [68]) = ($5 + [21])
	*($3 + [72]) = ($5 + [24])
	*($3 + [76]) = ($5 + [32])
	CALL $78(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = [1]
	$4 = *($0)
	$6 = *($0 + [4])
	$5 = ($1 + [4])
	CALL $117($5, *($6))
	*($1 + [16]) = *(*($6 + [4]))
	*($1 + [17]) = *(*($6 + [8]))
	*($1 + [18]) = *(*($6 + [12]))
	*($1 + [19]) = *(*($6 + [16]))
	*($1 + [20]) = *(*($6 + [20]))
	*($1 + [21]) = *(*($6 + [24]))
	*($1 + [24]) = *(*($6 + [28]))
	*($1 + [32]) = *(*($6 + [32]))
	$6 = *($1 + [4])
	$7 = ( *($1 + [8]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [23])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($6)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [17])
	*($3 + [40]) = ($1 + [18])
	*($3 + [44]) = ($1 + [19])
	*($3 + [48]) = ($1 + [20])
	*($3 + [52]) = ($1 + [21])
	*($3 + [56]) = ($1 + [24])
	*($3 + [60]) = ($1 + [32])
	CALL $86(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159541906337808, *(*($0 + [8])), $8, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)$8) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $148($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)$8) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9789])
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9789])
	CALL memcpy(($4 + [8]), ($2 + [8]), [8])
	$8 = *($4 + [8])
	*($4 + [48]) = $8
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$0 = *($4 + [40])
	*($4 + [56]) = $8
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = [0]
	*($4 + [92 align=4]) = (int_64)0
	*($4 + [100]) = [0]
	*($4 + [104]) = [0]
	*($4 + [108]) = [0]
	*($4 + [112]) = [0]
	*($4 + [116]) = [0]
	*($4 + [120]) = [0]
	*($4 + [124]) = [0]
	*($4 + [128]) = [0]
	*($4 + [132]) = [0]
	*($4 + [136]) = [0]
	*($4 + [140]) = [0]
	*($4 + [144]) = [0]
	*($4 + [148]) = [0]
	*($4 + [156]) = [0]
	*($4 + [152]) = [0]
	*($4 + [160]) = [0]
	*($4 + [164]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [192]) = ($4 + [48])
	CALL $65(($4 + [48]), ($4 + [64]))
	CALL $65(($4 + [48]), ($4 + [76]))
	CALL eosio_assert(((int_32)*($4 + [56]) != (int_32)*($4 + [52])), [9789])
	CALL memcpy((($4 + [64]) + [24]), *($4 + [52]), [1])
	$3 = (*($4 + [52]) + [1])
	*($4 + [52]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [56]) - $3) > (uint_32)[3]), [9789])
	CALL memcpy(($4 + [92]), *($4 + [52]), [4])
	*($4 + [52]) = (*($4 + [52]) + [4])
	*($4 + [16]) = ($4 + [64])
	CALL $66(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [176]) + [8]))) = *($3)
	*($4 + [176]) = *($4)
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [176])
	*($4 + [32]) = $0
	*($4 + [192]) = $0
	*($4 + [196]) = ($4 + [168])
	*($4 + [192]) = ($4 + [16])
	CALL $67(($4 + [192]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( (*($4 + [76]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $148($2)
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [84])))
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$global$0 = ($4 + [208])
	return $2
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [208])
	return $2
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10258])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10303])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10353])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [80])))
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [60])))
	$9 = *($4 + [36])
	if ( $9 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = *($4 + [36])
	if ( ($9 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($4 + [40])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($6 + [80])))
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($6 + [60])))
	$9 = *($6 + [36])
	if ( $9 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = *($6 + [36])
	if ( ($9 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	*(($6 + [40])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$23
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $101(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [49])
	*($3 + [68]) = ($5 + [52])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $100(($3 + [40]), ($3 + [32]))
	*($5 + [88]) = $1
	*($5 + [92 align=4]) = (int_64)-1
	*($5 + [100]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [72]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [52]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [80])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [60])))
	$4 = *($1 + [36])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = *($1 + [36])
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	*(($1 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = (int_64)-1
	if ( ((int_64)$1 == (int_64)-1) ){ goto $label$3 }
	$0 = CALL db_find_i64($4, $4, (int_64)-6147718988089524224, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $33($2, $0)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [9715])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)[20]), [8864])
	$0 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($0, [10194])
	CALL eosio_assert($0, [10228])
	$0 = CALL db_next_i64(*($3 + [84]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	CALL $33($2, $0)
	
.LABEL $label$5
	CALL $53($2, $3)
	$5 = *($2 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)-6147718988089524224, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $33($2, $3)
	
.LOOP $label$7:
	CALL eosio_assert([1], [10194])
	CALL eosio_assert([1], [10228])
	$3 = [0]
	$6 = CALL db_next_i64(*($0 + [84]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $33($2, $6)
	
.LABEL $label$8
	CALL $53($2, $0)
	$0 = $3
	if ( $3 ){ goto $label$7 }
	
.LABEL $label$6
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$13
	$6 = *($3 + [20])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($3 + [24])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$11 }
	$3 = *(($2 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [10258])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10303])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10353])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$10
	$9 = *($4 + [20])
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [24])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [44])))
	
.LABEL $label$14
	$9 = *($6 + [20])
	if ( ($9 == 0) ){ goto $label$15 }
	*(($6 + [24])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
	$6 = *(($1 + [88]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988089524224, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [92]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988089524223, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	*($3 + [160]) = [9226]
	*($3 + [164]) = CALL $142([9226])
	*($3 + [96]) = *($3 + [160])
	if ( ((int_64)*(CALL $7(($3 + [168]), ($3 + [96]))) != (int_64)$2) ){ goto $label$1 }
	*($3 + [160]) = [8950]
	*($3 + [164]) = CALL $142([8950])
	*($3 + [88]) = *($3 + [160])
	CALL eosio_assert(((int_64)*(CALL $7(($3 + [168]), ($3 + [88]))) == (int_64)$1), [9234])
	
.LABEL $label$1
	*($3 + [160]) = [9296]
	*($3 + [164]) = CALL $142([9296])
	*($3 + [80]) = *($3 + [160])
	if ( ((int_64)*(CALL $7(($3 + [168]), ($3 + [80]))) != (int_64)$2) ){ goto $label$3 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [8]) = *($3 + [152])
	CALL $55($0, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$5 }
	*($3 + [160]) = [9296]
	*($3 + [164]) = CALL $142([9296])
	*($3 + [72]) = *($3 + [160])
	if ( ((int_64)*(CALL $7(($3 + [168]), ($3 + [72]))) != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [160]) = [9226]
	*($3 + [164]) = CALL $142([9226])
	*($3 + [64]) = *($3 + [160])
	if ( ((int_64)*(CALL $7(($3 + [168]), ($3 + [64]))) != (int_64)$2) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ((int_64)$2 > (int_64)4923678616182587391) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-7297707859695370240) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4417029266017353728) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4417018962198396928) ){ goto $label$2 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [16]) = *($3 + [144])
	CALL $56($0, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)4923678616182587392) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678856662291328) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [48]) = *($3 + [112])
	CALL $57($0, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [24]) = *($3 + [136])
	CALL $58($0, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [56]) = *($3 + [104])
	CALL $59($0, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [40]) = *($3 + [120])
	CALL $60($0, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [32]) = *($3 + [128])
	CALL $61($0, $1, ($3 + [32]))
	
.LABEL $label$2
	CALL $132([0])
	$global$0 = ($3 + [176])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [10038])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10084])
	$6 = ($1 + [37])
	$7 = *(($1 + [44]))
	$8 = ($1 + [8])
	$9 = *($8)
	$11 = ($10 & [1])
	$10 = *($1 + [36])
	$10 = ( *(($1 + [40])) ? uint_32($10 >> [1]) : $11 )
	if ( ($10 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9305])
	goto $label$3 
	
.LABEL $label$4
	if ( ($10 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = ( $7 ? $6 : $11 )
	$13 = (int_64)0
	
.LOOP $label$5:
	$11 = (($12 + $10) + [-1])
	$7 = *($11)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9350])
	$7 = *($11)
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$5 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$13 = (int_64)0
	
.LABEL $label$1
	*($5 + [16]) = $9
	*($5 + [24]) = ((int_64)$13 | (int_64)*($1 + [48]))
	$9 = *($1)
	$10 = *($3)
	CALL $97(($5 + [32]), CALL $fimport$30(), *($10 + [18]), *($10 + [16]), [1])
	$10 = *($1 + [20])
	if ( ($10 == 0) ){ goto $label$8 }
	*(($1 + [24])) = $10
	CALL _ZdlPv($10)
	*(($10 = ($1 + [28]))) = [0]
	*($1 + [20 align=4]) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$10 = ($1 + [28])
	
.LABEL $label$7
	$11 = ($1 + [36])
	$12 = ($1 + [20])
	$14 = ($1 + [48])
	$15 = ($5 + [24])
	*($10) = *($5 + [40])
	*(($10 = ($1 + [20]))) = *($5 + [32])
	$7 = CALL $6((CASTING uint_32)(uint_64 CALL $fimport$30()))
	*($1 + [16]) = [20]
	*($1 + [32]) = (((int_32)$7 % (int_32)*(*($3) + [17])) + [1])
	*($1 + [72]) = CALL current_time()
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [10135])
	$3 = *($10)
	$7 = *(($1 + [24]))
	$16 = ($7 - $3)
	$13 = (CASTING uint_64)(uint_32 $16)
	$17 = ($1 + [72])
	$18 = ($1 + [16])
	$19 = ($1 + [32])
	$10 = [17]
	
.LOOP $label$9:
	$10 = ($10 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$9 }
	$20 = *(($1 + [36]))
	$20 = ( *(($1 + [40])) ? uint_32($20 >> [1]) : ($20 & [1]) )
	$10 = (($20 + ( $10 ? ($16 + $10) : ((int_32)$3 == (int_32)$7) )) + [26])
	$13 = (CASTING uint_64)(uint_32 $20)
	
.LOOP $label$10:
	$10 = ($10 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$10 }
	if ( ($10 <= [513]) ){ goto $label$12 }
	$7 = CALL $145($10)
	goto $label$11 
	
.LABEL $label$12
	$7 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$11
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $10)
	*($5 + [72]) = $5
	*($5 + [36]) = $8
	*($5 + [40]) = $18
	*($5 + [44]) = $12
	*($5 + [48]) = $19
	*($5 + [52]) = $11
	*($5 + [56]) = $14
	*($5 + [68]) = $17
	*($5 + [32]) = $1
	*($5 + [60]) = ($1 + [56])
	*($5 + [64]) = ($1 + [64])
	CALL $98(($5 + [32]), ($5 + [72]))
	CALL db_update_i64(*($1 + [84]), $2, $7, $10)
	if ( ($10 <= [513]) ){ goto $label$13 }
	CALL $148($7)
	
.LABEL $label$13
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($5 + [32]) = *($8)
	if ( (CALL $141(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$15 }
	$7 = ($1 + [88])
	$10 = *($7)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$16 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988089524224, ($5 + [72]), $9)
	*($7) = $10
	
.LABEL $label$16
	CALL db_idx64_update($10, $2, ($5 + [32]))
	
.LABEL $label$15
	$7 = *(($1 + [44]))
	$11 = ($10 & [1])
	$10 = *(($1 + [36]))
	$10 = ( *(($1 + [40])) ? uint_32($10 >> [1]) : $11 )
	if ( ($10 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9305])
	goto $label$19 
	
.LABEL $label$20
	if ( ($10 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$12 = ( $7 ? $6 : $11 )
	$13 = (int_64)0
	
.LOOP $label$21:
	$11 = (($12 + $10) + [-1])
	$7 = *($11)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [9350])
	$7 = *($11)
	
.LABEL $label$22
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$21 }
	$13 = ((int_64)$13 << (int_64)8)
	goto $label$17 
	
.LABEL $label$18
	$13 = (int_64)0
	
.LABEL $label$17
	*($5 + [32]) = ((int_64)$13 | (int_64)*($14))
	if ( (CALL $141($15, ($5 + [32]), [8]) == 0) ){ goto $label$23 }
	$7 = ($1 + [92])
	$10 = *($7)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$24 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988089524223, ($5 + [72]), $9)
	*($7) = $10
	
.LABEL $label$24
	CALL db_idx64_update($10, $2, ($5 + [32]))
	
.LABEL $label$23
	$global$0 = ($5 + [80])
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9789])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $63(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $64(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $148($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $118($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $114 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($3 + [176]) = $1
	CALL require_auth(*($0))
	*(($4 = ($3 + [168]))) = [0]
	*($3 + [152]) = (int_64)-1
	*($3 + [172]) = [0]
	$1 = *($0)
	*($3 + [136]) = $1
	*($3 + [144]) = $1
	*($3 + [160]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-6147718988089524224, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $33(($3 + [136]), $5)
	$5 = *($6 + [36])
	if ( ($5 & [1]) ){ goto $label$3 }
	$7 = [9]
	goto $label$1 
	
.LABEL $label$3
	$7 = [7]
	goto $label$1 
	
.LABEL $label$2
	$7 = [10]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$68 
	
.LABEL $label$70
	$6 = CALL $33(($3 + [136]), $5)
	$5 = *($6 + [36])
	if ( ($5 & [1]) ){ goto $label$31 }
	$7 = [9]
	goto $label$4 
	
.LABEL $label$69
	$8 = (($6 + [36]) + [1])
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)[8]) ){ goto $label$27 }
	$7 = [0]
	goto $label$4 
	
.LABEL $label$68
	if ( $5 ){ goto $label$28 }
	$7 = [38]
	goto $label$4 
	
.LABEL $label$67
	$1 = (int_64)0
	goto $label$29 
	
.LABEL $label$66
	$8 = *(($6 + [44]))
	$5 = *(($6 + [40]))
	if ( ($5 <= [8]) ){ goto $label$30 }
	$7 = [8]
	goto $label$4 
	
.LABEL $label$65
	CALL eosio_assert([0], [9305])
	$7 = [1]
	goto $label$4 
	
.LABEL $label$64
	$1 = (int_64)0
	$7 = [2]
	goto $label$4 
	
.LABEL $label$63
	$9 = (($8 + $5) + [-1])
	$10 = *($9)
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	$7 = [37]
	goto $label$4 
	
.LABEL $label$62
	CALL eosio_assert([0], [9350])
	$10 = *($9)
	$7 = [3]
	goto $label$4 
	
.LABEL $label$61
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$26 }
	$7 = [4]
	goto $label$4 
	
.LABEL $label$60
	if ( ((int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)*($6 + [48])) != (int_64)*($2)) ){ goto $label$24 }
	$7 = [36]
	goto $label$4 
	
.LABEL $label$59
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)[20]), [8904])
	CALL eosio_assert((uint_64)(*($6 + [8]) <= *($3 + [176])), [8936])
	$7 = [5]
	goto $label$4 
	
.LABEL $label$58
	CALL eosio_assert([1], [10228])
	$5 = CALL db_next_i64(*($6 + [84]), ($3 + [24]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$23 }
	$7 = [10]
	goto $label$4 
	
.LABEL $label$57
	$5 = CALL $22($0, $2)
	*($3 + [24]) = *($5)
	$9 = CALL $115((($3 + [24]) | [4]), ($5 + [4]))
	$8 = CALL $115((($3 + [24]) + [16]), ($5 + [16]))
	CALL memcpy((($3 + [24]) + [28]), ($5 + [28]), [77])
	$1 = *($0)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [176])
	*($3 + [16]) = ($3 + [24])
	*($3 + [216]) = $1
	CALL eosio_assert(((int_64)*($3 + [136]) == (int_64)CALL $fimport$10()), [9798])
	*($3 + [196]) = ($3 + [8])
	*($3 + [192]) = ($3 + [136])
	*($3 + [200]) = ($3 + [216])
	*(($5 = CALL _Znwj([96])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [80]) = ($3 + [136])
	CALL $36(($3 + [192]), $5)
	*($3 + [208]) = $5
	$1 = *($5)
	*($3 + [192]) = $1
	$6 = *($5 + [84])
	*($3 + [188]) = $6
	$2 = (($3 + [136]) + [28])
	$10 = *($2)
	if ( ((uint_32)$10 >= (uint_32)*($4)) ){ goto $label$22 }
	$7 = [35]
	goto $label$4 
	
.LABEL $label$56
	*($10 + [8]) = $1
	*($10 + [16]) = $6
	*($3 + [208]) = [0]
	*($10) = $5
	*($2) = ($10 + [24])
	$5 = *($3 + [208])
	*($3 + [208]) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	$7 = [12]
	goto $label$4 
	
.LABEL $label$55
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$19 }
	$7 = [13]
	goto $label$4 
	
.LABEL $label$54
	CALL _ZdlPv(*(($5 + [44])))
	$7 = [14]
	goto $label$4 
	
.LABEL $label$53
	$10 = *($5 + [20])
	if ( ($10 == 0) ){ goto $label$18 }
	$7 = [15]
	goto $label$4 
	
.LABEL $label$52
	*(($5 + [24])) = $10
	CALL _ZdlPv($10)
	$7 = [16]
	goto $label$4 
	
.LABEL $label$51
	CALL _ZdlPv($5)
	$5 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$50
	CALL $37(($3 + [160]), ($3 + [208]), ($3 + [192]), ($3 + [188]))
	$5 = *($3 + [208])
	*($3 + [208]) = [0]
	if ( $5 ){ goto $label$21 }
	$7 = [34]
	goto $label$4 
	
.LABEL $label$49
	$5 = [1]
	if ( (*($8) & [1]) ){ goto $label$17 }
	$7 = [33]
	goto $label$4 
	
.LABEL $label$48
	if ( (*($9) & $5) ){ goto $label$14 }
	$7 = [32]
	goto $label$4 
	
.LABEL $label$47
	$8 = *($3 + [160])
	if ( $8 ){ goto $label$12 }
	$7 = [31]
	goto $label$4 
	
.LABEL $label$46
	$global$0 = ($3 + [224])
	return 
	
.LABEL $label$45
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($9) & $5) == 0) ){ goto $label$13 }
	$7 = [18]
	goto $label$4 
	
.LABEL $label$44
	CALL _ZdlPv(*(($3 + [36])))
	$8 = *($3 + [160])
	if ( ($8 == 0) ){ goto $label$11 }
	$7 = [19]
	goto $label$4 
	
.LABEL $label$43
	$6 = ($3 + [164])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$10 }
	$7 = [20]
	goto $label$4 
	
.LABEL $label$42
	$7 = [21]
	goto $label$4 
	
.LABEL $label$41
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	$7 = [22]
	goto $label$4 
	
.LABEL $label$40
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$7 }
	$7 = [23]
	goto $label$4 
	
.LABEL $label$39
	CALL _ZdlPv(*(($5 + [44])))
	$7 = [24]
	goto $label$4 
	
.LABEL $label$38
	$9 = *($5 + [20])
	if ( ($9 == 0) ){ goto $label$6 }
	$7 = [25]
	goto $label$4 
	
.LABEL $label$37
	*(($5 + [24])) = $9
	CALL _ZdlPv($9)
	$7 = [26]
	goto $label$4 
	
.LABEL $label$36
	CALL _ZdlPv($5)
	$7 = [27]
	goto $label$4 
	
.LABEL $label$35
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$9 }
	$7 = [28]
	goto $label$4 
	
.LABEL $label$34
	$5 = *(($3 + [160]))
	goto $label$5 
	
.LABEL $label$33
	$5 = $8
	$7 = [29]
	goto $label$4 
	
.LABEL $label$32
	*($6) = $8
	CALL _ZdlPv($5)
	$global$0 = ($3 + [224])
	return 
	
.LABEL $label$31
	$7 = [7]
	goto $label$4 
	
.LABEL $label$30
	$7 = [0]
	goto $label$4 
	
.LABEL $label$29
	$7 = [4]
	goto $label$4 
	
.LABEL $label$28
	$7 = [1]
	goto $label$4 
	
.LABEL $label$27
	$7 = [8]
	goto $label$4 
	
.LABEL $label$26
	$7 = [2]
	goto $label$4 
	
.LABEL $label$25
	$7 = [3]
	goto $label$4 
	
.LABEL $label$24
	$7 = [5]
	goto $label$4 
	
.LABEL $label$23
	$7 = [6]
	goto $label$4 
	
.LABEL $label$22
	$7 = [11]
	goto $label$4 
	
.LABEL $label$21
	$7 = [12]
	goto $label$4 
	
.LABEL $label$20
	$7 = [34]
	goto $label$4 
	
.LABEL $label$19
	$7 = [14]
	goto $label$4 
	
.LABEL $label$18
	$7 = [16]
	goto $label$4 
	
.LABEL $label$17
	$7 = [17]
	goto $label$4 
	
.LABEL $label$16
	$7 = [33]
	goto $label$4 
	
.LABEL $label$15
	$7 = [17]
	goto $label$4 
	
.LABEL $label$14
	$7 = [18]
	goto $label$4 
	
.LABEL $label$13
	$7 = [32]
	goto $label$4 
	
.LABEL $label$12
	$7 = [19]
	goto $label$4 
	
.LABEL $label$11
	$7 = [31]
	goto $label$4 
	
.LABEL $label$10
	$7 = [30]
	goto $label$4 
	
.LABEL $label$9
	$7 = [21]
	goto $label$4 
	
.LABEL $label$8
	$7 = [27]
	goto $label$4 
	
.LABEL $label$7
	$7 = [24]
	goto $label$4 
	
.LABEL $label$6
	$7 = [26]
	goto $label$4 
	
.LABEL $label$5
	$7 = [29]
	goto $label$4 
	$7
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $148($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $143(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10544])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $143(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $136($3, (int_64)0)
	$4 = CALL $138($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $95(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL $89(*($5), [10])
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*($1 + [16]) = *($6 + [8])
	$7 = *(*($5 + [8]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [10504])
	
.LOOP $label$6:
	*((($3 + [32]) + ($6 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($8 << [1])
	$9 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = (($3 + [16]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $9
	*($3 + [20]) = $8
	
.LABEL $label$2
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($9 + $6)) = *((($3 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$7 }
	$6 = ($9 + $8)
	
.LABEL $label$1
	*($6) = [0]
	$11 = ($1 + [24])
	if ( (*($1 + [24]) & [1]) ){ goto $label$9 }
	*($11) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [32]))) = [0]
	*(($1 + [28])) = [0]
	
.LABEL $label$8
	$12 = ($1 + [16])
	$13 = ($1 + [8])
	CALL $119($11, [0])
	*(($11 + [8])) = *((($3 + [16]) + [8]))
	*($11) = *($3 + [16])
	$10 = *($8 + [4])
	$8 = *($5 + [12])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$11 }
	$14 = ($1 + [36])
	$15 = ($1 + [44])
	$8 = ($1 + [40])
	
.LOOP $label$12:
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*($15)) ){ goto $label$13 }
	*($9) = *($6)
	*($8) = (*($8) + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	CALL $90($14, $6)
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$14 = ($1 + [36])
	
.LABEL $label$10
	*($1 + [48]) = *(*($5 + [16]))
	*($1 + [49]) = *(*($5 + [20]))
	$9 = ($1 + [52])
	CALL $117($9, (*(($5 + [4])) + [36]))
	*($1 + [64]) = CALL current_time()
	$10 = ($1 + [72])
	CALL $117($10, *($5 + [24]))
	*($3 + [72]) = [0]
	*($3 + [16]) = ($3 + [72])
	*($3 + [36]) = $13
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = $14
	$15 = ($1 + [48])
	*($3 + [52]) = $15
	$5 = ($1 + [49])
	*($3 + [56]) = $5
	*($3 + [60]) = $9
	$16 = ($1 + [64])
	*($3 + [64]) = $16
	*($3 + [68]) = $10
	CALL $91(($3 + [32]), ($3 + [16]))
	$8 = *($3 + [72])
	if ( ($8 <= [513]) ){ goto $label$15 }
	$6 = CALL $145($8)
	goto $label$14 
	
.LABEL $label$15
	$6 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$14
	*($3 + [20]) = $6
	*($3 + [16]) = $6
	*($3 + [24]) = ($6 + $8)
	*($3 + [72]) = ($3 + [16])
	*($3 + [36]) = $13
	*($3 + [32]) = $1
	*($3 + [40]) = $12
	*($3 + [44]) = $11
	*($3 + [48]) = $14
	*($3 + [52]) = $15
	*($3 + [56]) = $5
	*($3 + [60]) = $9
	*($3 + [64]) = $16
	*($3 + [68]) = $10
	CALL $92(($3 + [32]), ($3 + [72]))
	$7 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $7, $6, $8)
	if ( ($8 <= [513]) ){ goto $label$16 }
	CALL $148($6)
	
.LABEL $label$16
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$17 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$6 = ($4 + [8])
	$7 = *($6)
	$8 = *(($0 + [8]))
	$17 = *($8)
	$18 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [92]) = CALL db_idx64_store($7, (int_64)4229865212519383040, $17, $18, ($3 + [32]))
	$7 = *($8)
	$17 = *($6)
	$18 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*(($1 + [96])) = CALL db_idx64_store($17, (int_64)4229865212519383041, $7, $18, ($3 + [32]))
	$7 = *($8)
	$17 = *($6)
	$18 = *($1)
	$6 = *(($1 + [24]))
	$8 = ($6 & [1])
	*($3 + [72]) = ( *(($1 + [32])) ? ($11 + [1]) : $8 )
	*($3 + [76]) = ( *(($1 + [28])) ? uint_32($6 >> [1]) : $8 )
	*($3 + [8]) = *($3 + [72])
	*($3 + [32]) = *(CALL $7(($3 + [32]), ($3 + [8])))
	*(($1 + [100])) = CALL db_idx64_store($17, (int_64)4229865212519383042, $7, $18, ($3 + [32]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $62(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $115(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $148($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $145($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10544])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $145($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10038])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [10084])
	$6 = *($1)
	$7 = ($1 + [4])
	CALL $117($7, *($3))
	*($1 + [16]) = *(*($3 + [4]))
	*($1 + [17]) = *(*($3 + [8]))
	*($1 + [18]) = *(*($3 + [12]))
	*($1 + [19]) = *(*($3 + [16]))
	*($1 + [20]) = *(*($3 + [20]))
	*($1 + [21]) = *(*($3 + [24]))
	*($1 + [24]) = *(*($3 + [28]))
	*($1 + [32]) = *(*($3 + [32]))
	CALL eosio_assert(((int_32)$6 == (int_32)*($1)), [10135])
	$3 = *($1 + [4])
	$8 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [23])
	$9 = (CASTING uint_64)(uint_32 $8)
	$10 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL $145($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [17])
	*($5 + [40]) = ($1 + [18])
	*($5 + [44]) = ($1 + [19])
	*($5 + [48]) = ($1 + [20])
	*($5 + [52]) = ($1 + [21])
	*($5 + [56]) = ($1 + [24])
	*($5 + [60]) = ($1 + [32])
	CALL $86(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [44])), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$10) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $148($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$10) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ((int_64)$10 + (int_64)1)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL $24(($1 + [8]), (int_64)1, [8574])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((*($6 + [4]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($6 + [12])))
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($1 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $3
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [8]) = ($2 + [16])
	*($2) = *($1)
	CALL $13(($2 + [56]), ($2 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [60]) != (int_32)[0]), [8541])
	$4 = *($2 + [60])
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$1 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
	return $4
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $23($0)
	*($4 + [152]) = *($5)
	$6 = CALL $115((($4 + [152]) | [4]), ($5 + [4]))
	*((($4 + [152]) + [32])) = *(($5 + [32]))
	*((($4 + [152]) + [24])) = *(($5 + [24]))
	*($4 + [168]) = *($5 + [16])
	$5 = CALL $22($0, ($3 + [8]))
	*($4 + [40]) = *($5)
	$7 = CALL $115((($4 + [40]) | [4]), ($5 + [4]))
	$8 = CALL $115((($4 + [40]) + [16]), ($5 + [16]))
	CALL memcpy((($4 + [40]) + [28]), ($5 + [28]), [77])
	$9 = CALL current_receiver()
	$5 = *($6)
	$10 = ($5 & [1])
	*($4 + [24]) = ( *((($4 + [152]) + [12])) ? ($6 + [1]) : $10 )
	*($4 + [28]) = ( *((($4 + [152]) + [8])) ? uint_32($5 >> [1]) : $10 )
	*($4 + [8]) = *($4 + [24])
	CALL eosio_assert(((int_64)$9 == (int_64)*(CALL $7(($4 + [32]), ($4 + [8])))), [8607])
	$9 = *($0 + [8])
	$5 = *($7)
	$10 = ($5 & [1])
	*($4 + [16]) = ( *((($4 + [40]) + [12])) ? ($7 + [1]) : $10 )
	*($4 + [20]) = ( *((($4 + [40]) + [8])) ? uint_32($5 >> [1]) : $10 )
	*($4) = *($4 + [16])
	CALL eosio_assert(((int_64)$9 == (int_64)*(CALL $7(($4 + [32]), $4))), [8627])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($0)), [8649])
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$5 = [1]
	$2 = $0
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8489])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8506])
	if ( (*($8) & [1]) ){ goto $label$10 }
	$0 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [64])))
	$0 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [52])))
	if ( ((*($6) & $0) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($6) & $0) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [164])))
	$global$0 = ($4 + [192])
}

int_32 .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9715])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159541906337808, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $18($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9715])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$7 = ($global$0 - [192])
	$global$0 = $7
	*($7 + [144]) = $2
	*($7 + [142]) = $6
	*($7 + [143]) = $4
	CALL require_auth($2)
	$6 = CALL $23($0)
	*($7 + [96]) = *($6)
	$8 = CALL $115((($7 + [96]) | [4]), ($6 + [4]))
	*((($7 + [96]) + [32])) = *(($6 + [32]))
	*((($7 + [96]) + [24])) = *(($6 + [24]))
	*($7 + [112]) = *($6 + [16])
	CALL eosio_assert(((int_32)(*($3 + [4]) - *($3)) == (int_32)*($7 + [114])), [8687])
	$9 = [0]
	CALL eosio_assert((((int_32)$4 != (int_32)[0]) & ((uint_32)*($7 + [113]) >= (uint_32)$4)), [8709])
	$4 = *($3 + [4])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$2 }
	$11 = ($7 + [112])
	
.LOOP $label$3:
	$6 = *($10)
	CALL eosio_assert((((int_32)$6 != (int_32)[0]) & ((uint_32)$6 <= (uint_32)*($11))), [8742])
	$10 = ($10 + [1])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$3 }
	$10 = *($3)
	$4 = *(($3 + [4]))
	$12 = $4
	goto $label$1 
	
.LABEL $label$2
	$12 = $10
	
.LABEL $label$1
	*($7 + [84 align=4]) = (int_64)0
	$13 = (($7 + [80]) | [4])
	*($7 + [80]) = $13
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$5 }
	$9 = [0]
	$14 = ($7 + [88])
	$15 = [0]
	if ( ((int_32)$13 != (int_32)$13) ){ goto $label$6 }
	$16 = [38]
	goto $label$4 
	
.LABEL $label$6
	$16 = [5]
	goto $label$4 
	
.LABEL $label$5
	$16 = [15]
	
.LABEL $label$4
	
.LOOP $label$7:
	goto $label$64 
	
.LABEL $label$82
	$15 = *($7 + [84])
	if ( ((int_32)*($7 + [80]) == (int_32)$13) ){ goto $label$43 }
	$16 = [5]
	goto $label$7 
	
.LABEL $label$81
	$4 = $15
	$11 = $13
	if ( ($15 == 0) ){ goto $label$26 }
	$16 = [6]
	goto $label$7 
	
.LABEL $label$80
	$6 = $4
	$4 = *($6 + [4])
	if ( $4 ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$79
	$6 = *($11 + [8])
	$4 = ((int_32)*($6) == (int_32)$11)
	$11 = $6
	if ( $4 ){ goto $label$25 }
	$16 = [7]
	goto $label$7 
	
.LABEL $label$78
	$11 = *($10)
	if ( (*($6 + [13]) <= $11) ){ goto $label$42 }
	$16 = [8]
	goto $label$7 
	
.LABEL $label$77
	if ( ($15 == 0) ){ goto $label$24 }
	$16 = [9]
	goto $label$7 
	
.LABEL $label$76
	$17 = $13
	$16 = [10]
	goto $label$7 
	
.LABEL $label$75
	$4 = $15
	$6 = *($4 + [13])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$22 }
	$16 = [32]
	goto $label$7 
	
.LABEL $label$74
	$17 = $4
	$15 = *($4)
	if ( $15 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$73
	if ( ((uint_32)$6 >= (uint_32)$11) ){ goto $label$21 }
	$16 = [30]
	goto $label$7 
	
.LABEL $label$72
	$17 = ($4 + [4])
	$15 = *($4 + [4])
	if ( $15 ){ goto $label$23 }
	$16 = [31]
	goto $label$7 
	
.LABEL $label$71
	$6 = $4
	$4 = $17
	goto $label$37 
	
.LABEL $label$70
	$6 = $13
	$16 = [34]
	goto $label$7 
	
.LABEL $label$69
	if ( ($15 == 0) ){ goto $label$8 }
	$16 = [35]
	goto $label$7 
	
.LABEL $label$68
	$4 = ($6 + [4])
	if ( (*($4) == 0) ){ goto $label$31 }
	$16 = [13]
	goto $label$7 
	
.LABEL $label$67
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$66
	$6 = $13
	$4 = $13
	if ( *($4) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$65
	$4 = $13
	$6 = $13
	goto $label$41 
	
.LABEL $label$64
	$6 = $4
	goto $label$36 
	
.LABEL $label$63
	$6 = $4
	$4 = $17
	if ( *($4) ){ goto $label$40 }
	$16 = [1]
	goto $label$7 
	
.LABEL $label$62
	*(($11 = CALL _Znwj([16])) + [13]) = *($10)
	*($11) = (int_64)0
	*($11 + [8]) = $6
	*($4) = $11
	$6 = *(*($7 + [80]))
	if ( ($6 == 0) ){ goto $label$30 }
	$16 = [2]
	goto $label$7 
	
.LABEL $label$61
	*($7 + [80]) = $6
	$11 = *($4)
	$16 = [3]
	goto $label$7 
	
.LABEL $label$60
	CALL $27(*($7 + [84]), $11)
	$9 = (*($14) + [1])
	*($14) = $9
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$29 }
	$16 = [14]
	goto $label$7 
	
.LABEL $label$59
	$4 = *(($3 + [4]))
	$10 = *($3)
	$16 = [15]
	goto $label$7 
	
.LABEL $label$58
	CALL eosio_assert(((int_32)$9 == (int_32)($4 - $10)), [8774])
	*(($11 = ($7 + [72]))) = [0]
	*(($7 + [78])) = [0]
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	*($7 + [76]) = [0]
	$2 = *($0)
	*($7 + [40]) = $2
	*($7 + [48]) = $2
	*($7 + [12]) = $1
	*($7 + [8]) = $0
	*($7 + [20]) = $3
	*($7 + [32]) = $5
	*($7 + [16]) = ($7 + [144])
	*($7 + [24]) = ($7 + [143])
	*($7 + [28]) = ($7 + [142])
	*($7 + [184]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$10()), [9798])
	*($7 + [164]) = ($7 + [8])
	*($7 + [160]) = ($7 + [40])
	*($7 + [168]) = ($7 + [184])
	*(($6 = CALL _Znwj([104])) + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [52 align=4]) = (int_64)0
	*($6 + [60]) = [0]
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80]) = [0]
	*($6 + [84]) = ($7 + [40])
	CALL $28(($7 + [160]), $6)
	*($7 + [176]) = $6
	$2 = *($6)
	*($7 + [160]) = $2
	$15 = *($6 + [88])
	*($7 + [156]) = $15
	$10 = ($7 + [68])
	$4 = *($10)
	if ( ((uint_32)$4 >= (uint_32)*($11)) ){ goto $label$20 }
	$16 = [29]
	goto $label$7 
	
.LABEL $label$57
	*($4 + [8]) = $2
	*($4 + [16]) = $15
	*($7 + [176]) = [0]
	*($4) = $6
	*($10) = ($4 + [24])
	$6 = *($7 + [176])
	*($7 + [176]) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	$16 = [17]
	goto $label$7 
	
.LABEL $label$56
	if ( (*($6 + [72]) & [1]) ){ goto $label$17 }
	$16 = [28]
	goto $label$7 
	
.LABEL $label$55
	if ( (*($6 + [52]) & [1]) ){ goto $label$16 }
	$16 = [27]
	goto $label$7 
	
.LABEL $label$54
	$4 = *($6 + [36])
	if ( ($4 == 0) ){ goto $label$14 }
	$16 = [20]
	goto $label$7 
	
.LABEL $label$53
	*(($6 + [40])) = $4
	CALL _ZdlPv($4)
	$16 = [21]
	goto $label$7 
	
.LABEL $label$52
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$11 }
	$16 = [22]
	goto $label$7 
	
.LABEL $label$51
	CALL _ZdlPv(*(($6 + [32])))
	$16 = [23]
	goto $label$7 
	
.LABEL $label$50
	CALL _ZdlPv($6)
	goto $label$10 
	
.LABEL $label$49
	CALL $29(($7 + [64]), ($7 + [176]), ($7 + [160]), ($7 + [156]))
	$6 = *($7 + [176])
	*($7 + [176]) = [0]
	if ( $6 ){ goto $label$19 }
	$16 = [24]
	goto $label$7 
	
.LABEL $label$48
	CALL $30(($7 + [64]))
	CALL $31(($7 + [80]), *($7 + [84]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$9 }
	$16 = [25]
	goto $label$7 
	
.LABEL $label$47
	CALL _ZdlPv(*(($7 + [108])))
	$16 = [26]
	goto $label$7 
	
.LABEL $label$46
	$global$0 = ($7 + [192])
	return 
	
.LABEL $label$45
	CALL _ZdlPv(*(($6 + [80])))
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$15 }
	$16 = [19]
	goto $label$7 
	
.LABEL $label$44
	CALL _ZdlPv(*(($6 + [60])))
	$4 = *($6 + [36])
	if ( $4 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$43
	$16 = [38]
	goto $label$7 
	
.LABEL $label$42
	$16 = [34]
	goto $label$7 
	
.LABEL $label$41
	$16 = [1]
	goto $label$7 
	
.LABEL $label$40
	$16 = [13]
	goto $label$7 
	
.LABEL $label$39
	$16 = [14]
	goto $label$7 
	
.LABEL $label$38
	$16 = [4]
	goto $label$7 
	
.LABEL $label$37
	$16 = [1]
	goto $label$7 
	
.LABEL $label$36
	$16 = [1]
	goto $label$7 
	
.LABEL $label$35
	$16 = [0]
	goto $label$7 
	
.LABEL $label$34
	$16 = [10]
	goto $label$7 
	
.LABEL $label$33
	$16 = [1]
	goto $label$7 
	
.LABEL $label$32
	$16 = [13]
	goto $label$7 
	
.LABEL $label$31
	$16 = [1]
	goto $label$7 
	
.LABEL $label$30
	$16 = [3]
	goto $label$7 
	
.LABEL $label$29
	$16 = [4]
	goto $label$7 
	
.LABEL $label$28
	$16 = [7]
	goto $label$7 
	
.LABEL $label$27
	$16 = [6]
	goto $label$7 
	
.LABEL $label$26
	$16 = [37]
	goto $label$7 
	
.LABEL $label$25
	$16 = [37]
	goto $label$7 
	
.LABEL $label$24
	$16 = [33]
	goto $label$7 
	
.LABEL $label$23
	$16 = [10]
	goto $label$7 
	
.LABEL $label$22
	$16 = [11]
	goto $label$7 
	
.LABEL $label$21
	$16 = [12]
	goto $label$7 
	
.LABEL $label$20
	$16 = [16]
	goto $label$7 
	
.LABEL $label$19
	$16 = [17]
	goto $label$7 
	
.LABEL $label$18
	$16 = [24]
	goto $label$7 
	
.LABEL $label$17
	$16 = [18]
	goto $label$7 
	
.LABEL $label$16
	$16 = [19]
	goto $label$7 
	
.LABEL $label$15
	$16 = [27]
	goto $label$7 
	
.LABEL $label$14
	$16 = [21]
	goto $label$7 
	
.LABEL $label$13
	$16 = [21]
	goto $label$7 
	
.LABEL $label$12
	$16 = [20]
	goto $label$7 
	
.LABEL $label$11
	$16 = [23]
	goto $label$7 
	
.LABEL $label$10
	$16 = [24]
	goto $label$7 
	
.LABEL $label$9
	$16 = [26]
	goto $label$7 
	
.LABEL $label$8
	$16 = [36]
	goto $label$7 
	$16
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $134($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $148($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $79($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $114($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $115($2, $1)
	$4 = *($1 + [32])
	$5 = *($1 + [24])
	$6 = *($1 + [17])
	$7 = *($1 + [16])
	$8 = *($1 + [15])
	$9 = *($1 + [14])
	$10 = *($1 + [13])
	$11 = *($1 + [12])
	$1 = *($0 + [4])
	$12 = *($1 + [4])
	$0 = (*($0) + int_32($12 >> [1]))
	$1 = *($1)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$12 = CALL $115(($2 + [16]), $3)
	CALL void $0((int_32 $12), (int_32 ($11 & [255])), (int_32 ($10 & [255])), (int_32 ($9 & [255])), (int_32 ($8 & [255])), (int_32 ($7 & [255])), (int_32 ($6 & [255])), (int_32 $5), (int_64 $4), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $115(($2 + [16]), $1)
	$4 = CALL $115($2, ($1 + [12]))
	$5 = *($1 + [100])
	$6 = *($1 + [96])
	$7 = *($1 + [92])
	$8 = *($1 + [88])
	$9 = *($1 + [84])
	$10 = *($1 + [80])
	$11 = *($1 + [76])
	$12 = *($1 + [72])
	$13 = *($1 + [68])
	$14 = *($1 + [64])
	$15 = *($1 + [60])
	$16 = *($1 + [56])
	$17 = *($1 + [52])
	$18 = *($1 + [48])
	$19 = *($1 + [44])
	$20 = *($1 + [40])
	$21 = *($1 + [36])
	$22 = *($1 + [32])
	$23 = *($1 + [28])
	$24 = *($1 + [24])
	$1 = *($0 + [4])
	$25 = *($1 + [4])
	$0 = (*($0) + int_32($25 >> [1]))
	$1 = *($1)
	if ( (($25 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$26 = CALL $115(($2 + [32]), $4)
	$25 = CALL $115(($2 + [48]), $3)
	CALL void $0((int_32 $25), (int_32 $26), (int_32 ($24 & [255])), (int_32 $23), (int_32 $22), (int_32 ($21 & [255])), (int_32 $20), (int_32 ($19 & [255])), (int_32 $18), (int_32 ($17 & [255])), (int_32 $16), (int_32 ($15 & [255])), (int_32 $14), (int_32 ($13 & [255])), (int_32 $12), (int_32 ($11 & [255])), (int_32 $10), (int_32 ($9 & [255])), (int_32 $8), (int_32 ($7 & [255])), (int_32 $6), (int_32 ($5 & [255])), (int_32 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($26 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($25 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($3 + [32]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [36]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($4 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [44]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $103(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9789])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $148($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $145($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9789])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-2]) != (int_32)[8]), [9789])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [2])
	*(($4 + [20])) = ($2 + [10])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $148($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $65(*($1), *($0))
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy(($0 + [12]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy(($0 + [13]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy(($0 + [14]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($2 + [8]) = $0
	CALL $102(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9789])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $65(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [92])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229865212519383040, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [96]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4229865212519383041, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [100]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383042, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $65(*($1), *($0 + [12]))
	CALL $87(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $65(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $65(*($1), *($0 + [36]))
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($3 + [48]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [52]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($4 + [56]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [60]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $104(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy(($2 + [15]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($3 + [16]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($3 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($2 + [80]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($3 + [84]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($3 + [88]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($3 + [92]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($3 + [96]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9789])
	CALL memcpy(($3 + [100]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($3 + [64]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [68]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy(($4 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy(($4 + [76]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $105(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_64 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [76]) = $1
	$1 = [0]
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)7235159541906337808, (int_64)1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL $18(($2 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($2 + [32])), [9715])
	*($2 + [28]) = $1
	*($2 + [24]) = ($2 + [32])
	$1 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($2 + [28]) = [0]
	*($2 + [24]) = ($2 + [32])
	
.LABEL $label$1
	CALL eosio_assert($1, [10406])
	$1 = *($2 + [28])
	$3 = *($0)
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [76])
	*($2 + [8]) = ($2 + [24])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [10003])
	CALL $93(($2 + [32]), $1, $3, $2)
	$3 = *($2 + [16])
	$4 = *($2 + [56])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($2 + [60])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [80])
	return $3
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9794])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $88($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [9789])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $85(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9709])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9709])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9709])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [9709])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $85(*($1), *($0 + [4]))
	CALL $85(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9709])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [112]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9955])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4060986526864314368)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9901])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9901])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $81(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [9789])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $65(*($1), *($0 + [4]))
	CALL $65(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9789])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [88])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9789])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [128])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [4 align=4]) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [108]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [4])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [36])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [44])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [52])
	*($3 + [72]) = ($5 + [56])
	*($3 + [76]) = ($5 + [60])
	*($3 + [80]) = ($5 + [64])
	*($3 + [84]) = ($5 + [68])
	*($3 + [88]) = ($5 + [72])
	*($3 + [92]) = ($5 + [76])
	*($3 + [96]) = ($5 + [80])
	*($3 + [100]) = ($5 + [84])
	*($3 + [104]) = ($5 + [88])
	*($3 + [112]) = ($5 + [96])
	*($3 + [108]) = ($5 + [92])
	*($3 + [116]) = ($5 + [100])
	*($3 + [120]) = ($5 + [104])
	CALL $82(($3 + [32]), ($3 + [24]))
	*($5 + [116]) = [-1]
	*($5 + [112]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [128])
	return $5
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4060986526864314368, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)$6 == (int_64)*($4)) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [9715])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $81($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-4060986526864314368, $6))
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [9715])
	
.LABEL $label$2
	*($4 + [116]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18948])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18756]
	$3 = (((int_32)$1 * (int_32)[12]) + [18756])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $145 (int_32 $0)
{
	return CALL $146([10564], $0)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $145($1)
	
.LABEL $label$2
	*(CALL $131()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $145(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $148($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10556]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10560])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10556]) = [1]
	$2 = ($2 << [16])
	*([0] + [10560]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10560])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10560]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10556]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10556]) = [1]
	$3 = ($3 << [16])
	*([0] + [10560]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10560])
	
.LABEL $label$10
	*([0] + [10560]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $147($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $131())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $144($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9709])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $73($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9709])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9709])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9709])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9709])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9709])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9709])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9709])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9709])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9709])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $73(CALL $74($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($1, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy(($1 + [16]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($1 + [32]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($1 + [40]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9789])
	CALL memcpy(($1 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9709])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9709])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9709])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL $89(*($5), [20])
	*($1 + [8]) = *(*($5 + [4]))
	$6 = ($1 + [36])
	CALL $117($6, (*($5 + [8]) + [16]))
	*($1 + [16]) = [10]
	*($1 + [48]) = *(*($5 + [8]) + [28])
	*($1 + [64]) = CALL current_time()
	$7 = ($1 + [20])
	$8 = ($1 + [64])
	$9 = ($1 + [16])
	$10 = ($1 + [48])
	$11 = ($1 + [8])
	$13 = *($1 + [20])
	$12 = *(($1 + [24]))
	$14 = ($12 - $13)
	$15 = (CASTING uint_64)(uint_32 $14)
	$5 = [17]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	$16 = *(($1 + [36]))
	$16 = ( *(($1 + [40])) ? uint_32($16 >> [1]) : ($16 & [1]) )
	$5 = (($16 + ( $5 ? ($14 + $5) : ((int_32)$13 == (int_32)$12) )) + [26])
	$15 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $145($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [36]) = $7
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $6
	*($3 + [48]) = $10
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = $8
	*($3 + [60]) = ($1 + [72])
	CALL $98(($3 + [24]), ($3 + [16]))
	$15 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($4 + [8]), (int_64)-6147718988089524224, *(*($0 + [8])), $15, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $148($2)
	
.LABEL $label$5
	if ( (uint_64)($15 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = ($4 + [8])
	$15 = *($5)
	$2 = *(($0 + [8]))
	$17 = *($2)
	$18 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [88]) = CALL db_idx64_store($15, (int_64)-6147718988089524224, $17, $18, ($3 + [24]))
	$17 = *($2)
	$18 = *($5)
	$19 = *($1)
	$2 = *(($1 + [44]))
	$0 = ($5 & [1])
	$5 = *(($1 + [36]))
	$5 = ( *(($1 + [40])) ? uint_32($5 >> [1]) : $0 )
	if ( ($5 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9305])
	goto $label$9 
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$4 = ( $2 ? ($6 + [1]) : $0 )
	$15 = (int_64)0
	
.LOOP $label$11:
	$0 = (($4 + $5) + [-1])
	$2 = *($0)
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9350])
	$2 = *($0)
	
.LABEL $label$12
	$15 = ((int_64)((int_64)$15 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$11 }
	$15 = ((int_64)$15 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$15 = (int_64)0
	
.LABEL $label$7
	*($3 + [24]) = ((int_64)$15 | (int_64)*(($1 + [48])))
	*(($1 + [92])) = CALL db_idx64_store($18, (int_64)-6147718988089524223, $17, $19, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$11
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [24])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $65(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9789])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9789])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9794])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $69($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9789])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [92]) = [0]
	$4 = *($0)
	*($2 + [56]) = $4
	*($2 + [64]) = $4
	*($2 + [80]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)-6147718988089524224, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL $33(($2 + [56]), $5)
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8818])
	$5 = *(($2 + [84]))
	$6 = *(($2 + [80]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$3 = ($5 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)($2 + [56])), [9715])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$3 = CALL db_find_i64(*($2 + [56]), *(($2 + [64])), (int_64)-6147718988089524224, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $33(($2 + [56]), $3)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)($2 + [56])), [9715])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)[10]), [8864])
	$3 = CALL $23($0)
	*($2 + [16]) = *($3)
	$5 = CALL $115((($2 + [16]) | [4]), ($3 + [4]))
	*((($2 + [16]) + [32])) = *(($3 + [32]))
	*((($2 + [16]) + [24])) = *(($3 + [24]))
	*($2 + [32]) = *($3 + [16])
	$1 = *($0)
	*($2 + [8]) = ($2 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10003])
	CALL $34(($2 + [56]), $7, $1, ($2 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$6
	$6 = *($2 + [80])
	if ( ($6 == 0) ){ goto $label$7 }
	$0 = ($2 + [84])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$12
	$7 = *($3 + [20])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($3 + [24])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	$3 = *(($2 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($2 + [96])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9766])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $145($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [20])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [36])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $96(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($5 + [88 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $148($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$10
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [80])))
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	$4 = *($3 + [36])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($3 + [36])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*(($3 + [40])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $31($0, *($1))
	CALL $31($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $129 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $142($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $118($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}