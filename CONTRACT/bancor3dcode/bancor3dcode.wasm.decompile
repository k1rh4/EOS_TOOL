(data (i32.const 4) "0l\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "sell\00")
(data (i32.const 160) "lock\00")
(data (i32.const 176) "texasinit\00")
(data (i32.const 192) "texasconvert\00")
(data (i32.const 208) "texasdivs\00")
(data (i32.const 224) "mugglediv\00")
(data (i32.const 240) "leaderboard\00")
(data (i32.const 256) "dividends\00")
(data (i32.const 272) "divweight\00")
(data (i32.const 288) "convert\00")
(data (i32.const 304) "withdraw\00")
(data (i32.const 320) "init\00")
(data (i32.const 336) "dinnerwinner\00")
(data (i32.const 352) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 416) "Award should be greater than 0.\00")
(data (i32.const 448) "Award should be less than 10 EOS.\00")
(data (i32.const 496) "Unknown account from Hayek\' dictionary.\00")
(data (i32.const 544) "cannot pass end iterator to modify\00")
(data (i32.const 592) "object passed to modify is not in multi_index\00")
(data (i32.const 640) "cannot modify objects in table of another contract\00")
(data (i32.const 704) "updater cannot change primary key when modifying an object\00")
(data (i32.const 768) "write\00")
(data (i32.const 784) "error reading iterator\00")
(data (i32.const 816) "read\00")
(data (i32.const 832) "Award should be less than 20000 texas.\00")
(data (i32.const 880) "cannot create objects in table of another contract\00")
(data (i32.const 944) "cannot increment end iterator\00")
(data (i32.const 976) "Games not started yet.\00")
(data (i32.const 1008) "Unknown account from.\00")
(data (i32.const 1040) "You don\'t have stakes yet.\00")
(data (i32.const 1072) "You have already converted.\00")
(data (i32.const 1104) "Are you sure? The game does not exist.\00")
(data (i32.const 1152) "Games already created\00")
(data (i32.const 1184) "mugglesspell\00")
(data (i32.const 1200) "Hayek does not like small change less than 0.0001 EOS.\00")
(data (i32.const 1264) "invalid symbol name\00")
(data (i32.const 1296) "active\00")
(data (i32.const 1312) "Rewards claimed. http://casinolord.muggles.io\00")
(data (i32.const 1360) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1424) "Insufficient jackpot dividends - minimum 0.1 EOS.\00")
(data (i32.const 1488) "Bonus is calculating. Skip.\00")
(data (i32.const 1520) "Calculate bonus first.\00")
(data (i32.const 1552) "Div weight is not calculated yet.\00")
(data (i32.const 1600) "No one deserves the jackpot dividends.\00")
(data (i32.const 1648) "Invalid STAKE quantity.\00")
(data (i32.const 1680) "Invalid STAKE amount - at least 1 STAKE.\00")
(data (i32.const 1728) "Invalid STAKE amount - at most 1M STAKE.\00")
(data (i32.const 1776) "You don\'t have enough STAKE .\00")
(data (i32.const 1808) "Game doesn\'t have enough STAKE.\00")
(data (i32.const 1840) "Unknown account.\00")
(data (i32.const 1872) "Invalid Key Amount, sell within 10,000 keys\00")
(data (i32.const 1920) "Insufficient STAKE for the game.\00")
(data (i32.const 1968) "Oops... Try again with a smaller quantity.\00")
(data (i32.const 2016) "get\00")
(data (i32.const 2032) "Game not starts\00")
(data (i32.const 2048) "Minimum ticket to Hayek experiment is 0.1 EOS.\00")
(data (i32.const 2096) "More than 10,000 EOS will make the designer run away.\00")
(data (i32.const 2160) "Say something. Memo length should be less than 100 and greater than 1.\00")
(data (i32.const 2240) "casinolordio\00")
(data (i32.const 2256) "mgtexaspoker\00")
(data (i32.const 2272) "Invalid Purchase STAKE Amount\00")
(data (i32.const 2304) "Invalid Key Amount\00")
(data (i32.const 2336) "Ooops... STAKE overflows. Are you a hacker?\00")
(data (i32.const 2384) "Sorry someone just got the deal. Refresh the page, get the latest price.\00")
(data (i32.const 10864) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10960) "stoi\00")
(data (i32.const 10976) ": no conversion\00")
(data (i32.const 10992) ": out of range\00")
(data (i32.const 11024) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11296) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__divtf3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$3 (param i32 f64)))
(import "env" "__fixunstfdi" (func $fimport$4 (param i64 i64) (result i64)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunditf" (func $fimport$6 (param i32 i64)))
(import "env" "__getf2" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "__gttf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__lttf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$12 (param i64 i64) (result f64)))
(import "env" "abort" (func $fimport$13))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$23 (param i32 i32)))
(import "env" "memcpy" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$26 (param i64)))
(import "env" "require_auth2" (func $fimport$27 (param i64 i64)))
(import "env" "send_inline" (func $fimport$28 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $85))
(export "free" (func $88))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $93))
(export "__errno_location" (func $101))
(export "ceill" (func $102))
(export "floor" (func $103))
(export "floorl" (func $104))
(export "sqrtl" (func $105))
(export "sqrt" (func $106))
(export "strtol" (func $107))
(export "__shlim" (func $108))
(export "__intscan" (func $109))
(export "__shgetc" (func $110))
(export "__uflow" (func $111))
(export "__toread" (func $112))
(export "memcmp" (func $113))
(export "strlen" (func $114))
(table $0 14 14 anyfunc)
(elem (i32.const 0) $115 $12 $22 $15 $24 $17 $18 $19 $11 $21 $7 $9 $23 $14)



void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $89($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $90($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $99 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $94 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $96($1, $0, [10992])
	CALL abort()
	(unreachable)
}

void .FUNC $95 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $96($1, $0, [10976])
	CALL abort()
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $89($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $97($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $98($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $90 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $89(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $90($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([10960])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $89($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [10960], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $90(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $94($6)
	
.LABEL $label$1
	CALL $95($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $115 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $89([112])) + [96]) = $1
	CALL $50(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $90($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $89([112])) + [96]) = $1
	CALL $51(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $90($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	$5 = *(*($3) + [40])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)((int_64)$5 * (int_64)*(*($3 + [4]))))
	$4 = *($1)
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)((int_64)$5 * (int_64)*(*($3 + [4]))))
	CALL eosio_assert([1], [704])
	*($6 + [120]) = ($6 + [104])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $34(($6 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $6, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	$5 = *(*($3) + [40])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)((int_64)$5 * (int_64)*(*($3 + [4]))))
	$4 = *($1)
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)((int_64)$5 * (int_64)*(*($3 + [4]))))
	CALL eosio_assert([1], [704])
	*($6 + [104]) = ($6 + [96])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $28(($6 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $6, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $89([112])
	CALL $44($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $90($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [40]) = *(*($3))
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)279390000)
	$4 = *($1)
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)279390000)
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)279390000)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*(($4 = CALL $89([120])) + [104]) = $1
	*($4 + [16]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($9 + [136]) = (($9 + [16]) + [104])
	*($9 + [132]) = ($9 + [16])
	*($9 + [128]) = ($9 + [16])
	CALL $34(($9 + [128]), $4)
	$5 = *($4)
	*($4 + [108]) = CALL db_store_i64(*($1 + [8]), (int_64)7035937633859534848, $2, $5, ($9 + [16]), [104])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [128]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [108])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [128]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $36(($1 + [24]), ($9 + [128]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [128])
	*($9 + [128]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $90($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [144])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	$4 = *(*($3))
	*($1 + [88]) = $4
	*($1 + [88]) = ( (int_64)1 ? $4 : (int_64)(*(*($3)) == 0) )
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*($0 + [96]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$3 = *($2)
	$4 = *(*($1 + [4]) + [40])
	*($0 + [56]) = ((int_64)$4 * (int_64)*(*($1 + [8])))
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$5 = *(*($1 + [8]))
	*($0 + [72]) = (int_64)0
	*($0 + [48]) = ((int_64)$5 * (int_64)$4)
	$5 = *(*($1 + [12]))
	*($0 + [80]) = (int_64)0
	*($0 + [64]) = $5
	*($0 + [88]) = ((int_64)$4 * (int_64)*(*($1 + [8])))
	*($6 + [104]) = ($6 + [96])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $28(($6 + [96]), $0)
	$4 = *($0)
	*($0 + [100]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020371635640205312, *(*($2 + [8])), $4, $6, [96])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [1360])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [1264])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $75(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $76(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $90(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [448])
	*([0] + [4]) = $19
	CALL require_auth($1)
	$7 = [0]
	$13 = *($2)
	if ( ((uint_64)((int_64)$13 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$14 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [1648])
	CALL eosio_assert(((uint_64)$13 >= (uint_64)*($0 + [40])), [1680])
	CALL eosio_assert(((uint_64)$13 <= (uint_64)((int_64)*($0 + [40]) * (int_64)1000000)), [1728])
	$11 = *(($0 + [136]))
	$10 = *(($0 + [140]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$6 }
	$12 = ($10 + [-24])
	$4 = ([0] - $11)
	
.LOOP $label$7:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$6 }
	$10 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$3 = ($0 + [112])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$9 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$3), [352])
	goto $label$8 
	
.LABEL $label$9
	$11 = [0]
	$12 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $26($3, $12)
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)$3), [352])
	
.LABEL $label$8
	$12 = [0]
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [1840])
	$14 = *($2)
	CALL eosio_assert(((uint_64)*($11 + [24]) >= (uint_64)((int_64)*($11 + [40]) + (int_64)$14)), [1776])
	$4 = ($0 + [72])
	$10 = [0]
	$7 = ($0 + [80])
	$9 = CALL db_lowerbound_i64(*($0 + [72]), *($7), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $32($4, $9)
	$14 = *($2)
	
.LABEL $label$10
	CALL current_time()
	CALL __floatunditf(($19 + [224]), $14)
	CALL eosio_assert(((uint_64)*($10 + [32]) >= (uint_64)((int_64)*($10 + [48]) + (int_64)$14)), [1808])
	$1 = *($10 + [64])
	$9 = ($0 + [40])
	$13 = *($9)
	CALL eosio_assert((((uint_64)$13 <= (uint_64)$14) & ((uint_64)((int_64)$13 * (int_64)10000) > (uint_64)$14)), [1872])
	CALL __floatunditf(($19 + [240]), $1)
	CALL __floatunditf(($19 + [208]), *($9))
	$1 = *((($19 + [208]) + [8]))
	$14 = *($19 + [208])
	CALL __divtf3(($19 + [192]), *($19 + [240]), *((($19 + [240]) + [8])), $14, $1)
	CALL __divtf3(($19 + [128]), *($19 + [224]), *((($19 + [224]) + [8])), $14, $1)
	CALL __addtf3(($19 + [176]), *($19 + [192]), *((($19 + [192]) + [8])), (int_64)0, (int_64)4611404543450677248)
	$15 = *((($19 + [128]) + [8]))
	$13 = *($19 + [128])
	$1 = *((($19 + [176]) + [8]))
	$14 = *($19 + [176])
	CALL __subtf3(($19 + [112]), $14, $1, $13, $15)
	CALL __multf3(($19 + [160]), $14, $1, $14, $1)
	CALL __multf3(($19 + [144]), $14, $1, *($19 + [160]), *((($19 + [160]) + [8])))
	$17 = *((($19 + [112]) + [8]))
	$16 = *($19 + [112])
	CALL __multf3(($19 + [96]), $16, $17, $16, $17)
	CALL __multf3(($19 + [80]), $16, $17, *($19 + [96]), *((($19 + [96]) + [8])))
	CALL eosio_assert(((int_32)(CALL $fimport$7($14, $1, $13, $15) | (CALL $fimport$7($13, $15, (int_64)0, (int_64)0) | CALL $fimport$7($14, $1, (int_64)0, (int_64)0))) > (int_32)[-1]), [1920])
	CALL sqrtl(($19 + [288]), *($19 + [144]), *((($19 + [144]) + [8])))
	$14 = *($19 + [296])
	$1 = *($19 + [288])
	CALL sqrtl(($19 + [272]), *($19 + [80]), *((($19 + [80]) + [8])))
	$17 = *($19 + [280])
	$16 = *($19 + [272])
	CALL __subtf3(($19 + [48]), $1, $14, $16, $17)
	CALL __multf3(($19 + [64]), $13, $15, (int_64)0, (int_64)4613924624101539840)
	$15 = *((($19 + [48]) + [8]))
	$13 = *($19 + [48])
	CALL __addtf3(($19 + [32]), $13, $15, $13, $15)
	CALL __divtf3(($19 + [16]), *($19 + [32]), *((($19 + [32]) + [8])), (int_64)0, (int_64)4611826755915743232)
	CALL __addtf3($19, *($19 + [64]), *((($19 + [64]) + [8])), *($19 + [16]), *((($19 + [16]) + [8])))
	CALL eosio_assert(((int_32)(CALL $fimport$7($1, $14, $16, $17) | (CALL $fimport$7($1, $14, (int_64)0, (int_64)0) | CALL $fimport$7($16, $17, (int_64)0, (int_64)0))) > (int_32)[-1]), [1968])
	CALL floorl(($19 + [256]), *($19), *(($19 + [8])))
	$14 = CALL __fixunstfdi(*($19 + [256]), *($19 + [264]))
	$1 = ((uint_64)((int_64)$14 << (int_64)3) / (uint_64)(int_64)10)
	*($19 + [408]) = $1
	$14 = (int_64)
	$1 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $14($14 - $1))) * (float_64)(float_64)0.6)
	*($19 + [320]) = $1)
	$7 = CALL db_lowerbound_i64(*($4), *($7), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $32($4, $7)
	
.LABEL $label$11
	$7 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($7, [976])
	*($19 + [368]) = ($19 + [320])
	CALL eosio_assert($7, [544])
	CALL $72($4, $12, (int_64)0, ($19 + [368]))
	$8 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$8($14 - $1)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1360])
	$14 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	
.LABEL $label$12
	CALL eosio_assert($7, [1264])
	$6 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1296]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$22 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$7 = ($7 + [165])
	goto $label$20 
	
.LABEL $label$22
	$1 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$18
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$1 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$17 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [112]
	$16 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$28 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$7 = ($7 + [165])
	goto $label$26 
	
.LABEL $label$28
	$1 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$24
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$23 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [128]
	$17 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$34 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$7 = ($7 + [165])
	goto $label$32 
	
.LABEL $label$34
	$1 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$30
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$1 | (int_64)$17)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$29 }
	$14 = (int_64)0
	$1 = (int_64)59
	$12 = [336]
	$18 = (int_64)0
	
.LOOP $label$35:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$36 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$7 = ($7 + [165])
	goto $label$37 
	
.LABEL $label$38
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$36
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$13 | (int_64)$18)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$35 }
	*(($19 + [312])) = [0]
	*($19 + [304]) = (int_64)0
	$12 = CALL strlen([144])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$42 }
	*($19 + [304]) = ($12 << [1])
	$7 = (($19 + [304]) | [1])
	if ( $12 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$9 = (($12 + [16]) & [-16])
	$7 = CALL $89($9)
	*($19 + [304]) = ($9 | [1])
	*($19 + [312]) = $7
	*($19 + [308]) = $12
	
.LABEL $label$41
	CALL memcpy($7, [144], $12)
	
.LABEL $label$40
	*(($7 + $12)) = [0]
	*((($19 + [320]) + [24])) = (int_64)1397703940
	*(($7 = (($19 + [320]) + [36]))) = *($19 + [308])
	*($19 + [328]) = $18
	$12 = ($19 + [312])
	*(($19 + [360])) = *($12)
	*($19 + [320]) = *($0)
	*($19 + [336]) = $8
	*($19 + [352]) = *($19 + [304])
	*($19 + [304]) = [0]
	*($19 + [308]) = [0]
	*($12) = [0]
	*($19 + [368]) = $16
	*($19 + [376]) = $17
	*(($12 = CALL $89([16]))) = $6
	*($12 + [8]) = $15
	*((($19 + [368]) + [32])) = [0]
	$0 = ($12 + [16])
	*((($19 + [368]) + [24])) = $0
	*(($19 + [388])) = $0
	*($19 + [384]) = $12
	*($19 + [396]) = [0]
	*((($19 + [368]) + [36])) = [0]
	$12 = *($19 + [352])
	$7 = ( *($7) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($7 + [32])
	$14 = (CASTING uint_64)(uint_32 $7)
	$7 = ($19 + [396])
	
.LOOP $label$43:
	$12 = ($12 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$43 }
	if ( ($12 == 0) ){ goto $label$45 }
	CALL $53($7, $12)
	$7 = *(($19 + [400]))
	$12 = *(($19 + [396]))
	goto $label$44 
	
.LABEL $label$45
	$7 = [0]
	$12 = [0]
	
.LABEL $label$44
	*($19 + [436]) = $12
	*($19 + [432]) = $12
	*($19 + [440]) = $7
	*($19 + [416]) = ($19 + [432])
	*($19 + [424]) = ($19 + [320])
	CALL $54(($19 + [424]), ($19 + [416]))
	CALL $55(($19 + [432]), ($19 + [368]))
	$12 = *($19 + [432])
	CALL send_inline($12, (*($19 + [436]) - $12))
	$12 = *($19 + [432])
	if ( ($12 == 0) ){ goto $label$46 }
	*($19 + [436]) = $12
	CALL $90($12)
	
.LABEL $label$46
	$12 = *($19 + [396])
	if ( ($12 == 0) ){ goto $label$47 }
	*(($19 + [400])) = $12
	CALL $90($12)
	
.LABEL $label$47
	$12 = *($19 + [384])
	if ( ($12 == 0) ){ goto $label$48 }
	*(($19 + [388])) = $12
	CALL $90($12)
	
.LABEL $label$48
	if ( ((*(($19 + [352])) & [1]) == 0) ){ goto $label$49 }
	CALL $90(*(($19 + [360])))
	
.LABEL $label$49
	if ( ((*($19 + [304]) & [1]) == 0) ){ goto $label$50 }
	CALL $90(*(($19 + [312])))
	
.LABEL $label$50
	*($19 + [320]) = $2
	*($19 + [324]) = ($19 + [408])
	CALL eosio_assert($5, [544])
	CALL $73($3, $11, (int_64)0, ($19 + [320]))
	*($19 + [320]) = $2
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [544])
	CALL $74($4, $10, (int_64)0, ($19 + [320]))
	*([0] + [4]) = ($19 + [448])
	return (unreachable)
	
.LABEL $label$39
	CALL $91(($19 + [304]))
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = (int_64)1543059000
	*($0) = $1
	*($0 + [16]) = [0]
	*(($0 + [20])) = (int_64)0
	$4 = ($0 + [16])
	$2 = CALL strlen([336])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $89($3)
	*(($0 + [16])) = ($3 | [1])
	*(($0 + [24])) = $4
	*(($0 + [20])) = $2
	
.LABEL $label$3
	CALL memcpy($4, [336], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	*($0 + [40]) = (int_64)10000
	*($0 + [32]) = (int_64)200
	*($0 + [48]) = (int_64)10000
	*($0 + [56]) = (int_64)302400
	*($0 + [64]) = (int_64)50
	$1 = *($0)
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = [0]
	*(($0 + [140])) = [0]
	*(($0 + [144])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = [0]
	*(($0 + [180])) = [0]
	*(($0 + [184])) = [0]
	return $0
	
.LABEL $label$1
	CALL $91($4)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [480])
	*([0] + [4]) = $19
	*($19 + [472]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($0 + [8])), [2032])
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$6 = *($3 + [8])
	$16 = (uint_64)$6 >> (uint_64)(int_64)8)
	$17 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$4 }
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$3 }
	$16 = *($0)
	if ( ((int_64)$16 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$16 != (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)$5 < (int_64)10) ){ goto $label$3 }
	CALL eosio_assert(((int_64)$5 > (int_64)999), [2048])
	CALL eosio_assert(((int_64)*($3) < (int_64)100000001), [2096])
	$7 = *($4)
	$9 = ($7 & [1])
	if ( $9 ){ goto $label$2 }
	$12 = uint_32($7 >> [1])
	goto $label$1 
	
.LABEL $label$3
	*([0] + [4]) = ($19 + [480])
	return 
	
.LABEL $label$2
	$12 = *($4 + [4])
	
.LABEL $label$1
	$18 = [0]
	$17 = [0]
	if ( ((uint_32)$12 > (uint_32)[100]) ){ goto $label$7 }
	if ( $9 ){ goto $label$9 }
	$17 = uint_32($7 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$17 = *($4 + [4])
	
.LABEL $label$8
	$17 = ((int_32)$17 != (int_32)[0])
	
.LABEL $label$7
	CALL eosio_assert($17, [2160])
	*($19 + [464]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = ($0 + [72])
	$17 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$10 }
	$18 = CALL $32($7, $17)
	
.LABEL $label$10
	$8 = ((int_32)$18 != (int_32)[0])
	CALL eosio_assert($8, [976])
	CALL $100(($19 + [448]), $4)
	*(($19 + [440])) = [0]
	*($19 + [432]) = (int_64)0
	$17 = CALL strlen([256])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$14 }
	*($19 + [432]) = ($17 << [1])
	$12 = (($19 + [432]) | [1])
	if ( $17 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($17 + [16]) & [-16])
	$12 = CALL $89($9)
	*($19 + [432]) = ($9 | [1])
	*($19 + [440]) = $12
	*($19 + [436]) = $17
	
.LABEL $label$13
	CALL memcpy($12, [256], $17)
	
.LABEL $label$12
	*(($12 + $17)) = [0]
	$9 = *($4)
	$10 = ($9 & [1])
	if ( $10 ){ goto $label$16 }
	$17 = uint_32($9 >> [1])
	goto $label$15 
	
.LABEL $label$16
	$17 = *($4 + [4])
	
.LABEL $label$15
	$11 = ($12 & [1])
	$12 = *($19 + [432])
	if ( ((int_32)$17 != (int_32)( *($19 + [436]) ? uint_32($12 >> [1]) : $11 )) ){ goto $label$18 }
	$12 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	$9 = ( $12 ? $17 : ($12 <= $17) )
	if ( ($9 == 0) ){ goto $label$19 }
	if ( CALL memcmp(( *($19 + [440]) ? (($19 + [432]) | [1]) : $11 ), ( *($4 + [8]) ? ($4 + [1]) : $10 ), $9) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ($17 <= $12) ){ goto $label$18 }
	if ( ($12 <= $17) ){ goto $label$18 }
	$16 = (int_64)0
	$1 = (int_64)59
	$17 = [2240]
	$6 = *($19 + [472])
	$2 = (int_64)0
	
.LOOP $label$20:
	$5 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$21 }
	$4 = *($17)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [165])
	goto $label$22 
	
.LABEL $label$23
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$21
	$17 = ($17 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$6 == (int_64)$2) ){ goto $label$24 }
	$16 = (int_64)0
	$1 = (int_64)59
	$17 = [2256]
	$2 = (int_64)0
	
.LOOP $label$25:
	$5 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$26 }
	$4 = *($17)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$4 = ($4 + [165])
	goto $label$27 
	
.LABEL $label$28
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$26
	$17 = ($17 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$25 }
	if ( ((int_64)$6 == (int_64)$2) ){ goto $label$24 }
	$16 = (int_64)0
	$1 = (int_64)59
	$17 = [336]
	$2 = (int_64)0
	
.LOOP $label$29:
	$5 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$30 }
	$4 = *($17)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$4 = ($4 + [165])
	goto $label$31 
	
.LABEL $label$32
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$30
	$17 = ($17 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$18 }
	
.LABEL $label$24
	*($19 + [384]) = *($3)
	$17 = [0]
	$3 = CALL db_lowerbound_i64(*(($0 + [72])), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$33 }
	$17 = CALL $32($7, $3)
	
.LABEL $label$33
	$3 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($3, [976])
	*($19 + [424]) = ($19 + [384])
	CALL eosio_assert($3, [544])
	CALL $72($7, $17, (int_64)0, ($19 + [424]))
	goto $label$17 
	
.LABEL $label$18
	$17 = *($19 + [448])
	CALL eosio_assert(((( *($19 + [452]) ? uint_32($17 >> [1]) : ($17 & [1]) ) + [-1]) <= [6]), [2272])
	$16 = ((int_64)(CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($19 + [448]), [0], [10])) * (int_64)*($0 + [40]))
	*($19 + [424]) = $16
	$1 = *($18 + [64])
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)-1) <= (int_64)10000000000), [2304])
	CALL __floatunditf(($19 + [240]), $1)
	CALL __floatunditf(($19 + [288]), *($0 + [40]))
	$5 = *((($19 + [288]) + [8]))
	$1 = *($19 + [288])
	CALL __divtf3(($19 + [224]), *($19 + [240]), *((($19 + [240]) + [8])), $1, $5)
	CALL __addtf3(($19 + [208]), *($19 + [224]), *((($19 + [224]) + [8])), (int_64)0, (int_64)4611404543450677248)
	CALL __floatunditf(($19 + [304]), $16)
	CALL __divtf3(($19 + [272]), *($19 + [304]), *((($19 + [304]) + [8])), $1, $5)
	$1 = *((($19 + [208]) + [8]))
	$16 = *($19 + [208])
	CALL __multf3(($19 + [144]), $16, $1, (int_64)0, (int_64)4613251722985340928)
	$2 = *((($19 + [272]) + [8]))
	$5 = *($19 + [272])
	CALL __addtf3(($19 + [192]), $5, $2, $16, $1)
	CALL __multf3(($19 + [128]), *($19 + [144]), *((($19 + [144]) + [8])), (int_64)0, (int_64)4613251722985340928)
	$13 = *((($19 + [192]) + [8]))
	$6 = *($19 + [192])
	CALL eosio_assert(((int_32)((CALL $fimport$7($5, $2, (int_64)0, (int_64)0) | CALL $fimport$7($16, $1, (int_64)0, (int_64)0)) | CALL $fimport$7($6, $13, (int_64)0, (int_64)0)) > (int_32)[-1]), [2336])
	CALL sqrtl(($19 + [352]), *($19 + [128]), *((($19 + [128]) + [8])))
	$14 = *($19 + [360])
	$15 = *($19 + [352])
	CALL __multf3(($19 + [112]), $15, $14, $16, $1)
	CALL __multf3(($19 + [80]), $15, $14, $6, $13)
	CALL __divtf3(($19 + [96]), *($19 + [112]), *((($19 + [112]) + [8])), (int_64)0, (int_64)4613251722985340928)
	CALL __divtf3(($19 + [64]), *($19 + [80]), *((($19 + [80]) + [8])), (int_64)0, (int_64)4613251722985340928)
	$14 = *((($19 + [96]) + [8]))
	$15 = *($19 + [96])
	$1 = *((($19 + [64]) + [8]))
	$16 = *($19 + [64])
	CALL __subtf3(($19 + [48]), $16, $1, $15, $14)
	CALL __multf3(($19 + [176]), $6, $13, (int_64)0, (int_64)4613251722985340928)
	CALL __multf3(($19 + [256]), $5, $2, (int_64)0, (int_64)4613924624101539840)
	$2 = *((($19 + [48]) + [8]))
	$5 = *($19 + [48])
	CALL __addtf3(($19 + [32]), $5, $2, $5, $2)
	CALL __divtf3(($19 + [16]), *($19 + [32]), *((($19 + [32]) + [8])), (int_64)0, (int_64)4611826755915743232)
	CALL __multf3(($19 + [160]), *($19 + [176]), *((($19 + [176]) + [8])), (int_64)0, (int_64)4613251722985340928)
	CALL __addtf3($19, *($19 + [256]), *((($19 + [256]) + [8])), *($19 + [16]), *((($19 + [16]) + [8])))
	CALL sqrtl(($19 + [336]), *($19 + [160]), *((($19 + [160]) + [8])))
	CALL eosio_assert(((int_32)(CALL $fimport$7($16, $1, $15, $14) | (CALL $fimport$7($16, $1, (int_64)0, (int_64)0) | CALL $fimport$7($15, $14, (int_64)0, (int_64)0))) > (int_32)[-1]), [1968])
	CALL ceill(($19 + [320]), *($19), *(($19 + [8])))
	$16 = CALL __fixunstfdi(*($19 + [320]), *($19 + [328]))
	*($19 + [416]) = $16
	CALL eosio_assert((((int_64)$16 != (int_64)0) & ((uint_64)*($3) >= (uint_64)$16)), [2384])
	*($19 + [384]) = $3
	*($19 + [388]) = ($19 + [416])
	*($19 + [392]) = ($19 + [424])
	*($19 + [396]) = ($19 + [464])
	CALL eosio_assert($8, [544])
	CALL $79($7, $18, (int_64)0, ($19 + [384]))
	$16 = *($19 + [472])
	$7 = *(($0 + [136]))
	$18 = *(($0 + [140]))
	if ( ((int_32)$18 == (int_32)$7) ){ goto $label$34 }
	$17 = ($18 + [-24])
	$12 = ([0] - $7)
	
.LOOP $label$35:
	if ( ((int_64)*(*($17)) == (int_64)$16) ){ goto $label$34 }
	$18 = $17
	$4 = ($17 + [-24])
	$17 = $4
	if ( ((int_32)($4 + $12) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	$12 = ($0 + [112])
	if ( ((int_32)$18 == (int_32)$7) ){ goto $label$39 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	if ( $17 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$17 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $16)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$37 }
	$17 = CALL $26($12, $17)
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	
.LABEL $label$38
	*($19 + [384]) = $3
	*($19 + [388]) = ($19 + [416])
	*($19 + [392]) = ($19 + [424])
	*($19 + [396]) = ($19 + [464])
	CALL eosio_assert([1], [544])
	CALL $81($12, $17, (int_64)0, ($19 + [384]))
	goto $label$36 
	
.LABEL $label$37
	$16 = *($0)
	*($19 + [388]) = $3
	*($19 + [384]) = ($19 + [472])
	*($19 + [392]) = ($19 + [416])
	*($19 + [396]) = ($19 + [424])
	*($19 + [400]) = ($19 + [464])
	CALL $80(($19 + [408]), $12, $16, ($19 + [384]))
	
.LABEL $label$36
	*($19 + [384]) = (uint_64)*($19 + [424]) >> (uint_64)(int_64)3)
	$16 = (int_64)0
	$1 = (int_64)59
	$17 = [336]
	$2 = (int_64)0
	
.LOOP $label$40:
	$5 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$41 }
	$3 = *($17)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$3 = ($3 + [165])
	goto $label$42 
	
.LABEL $label$43
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$41
	$17 = ($17 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$40 }
	$7 = *(($0 + [136]))
	$4 = *(($0 + [140]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$44 }
	$17 = ($4 + [-24])
	$18 = ([0] - $7)
	
.LOOP $label$45:
	if ( ((int_64)*(*($17)) == (int_64)$2) ){ goto $label$44 }
	$4 = $17
	$3 = ($17 + [-24])
	$17 = $3
	if ( ((int_32)($3 + $18) != (int_32)[-24]) ){ goto $label$45 }
	
.LABEL $label$44
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$47 }
	$17 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	goto $label$46 
	
.LABEL $label$47
	$17 = [0]
	$3 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$46 }
	$17 = CALL $26($12, $3)
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	
.LABEL $label$46
	$3 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($3, [1840])
	*($19 + [408]) = ($19 + [384])
	CALL eosio_assert($3, [544])
	$16 = (int_64)0
	CALL $82($12, $17, (int_64)0, ($19 + [408]))
	*($19 + [408]) = (uint_64)*($19 + [424]) >> (uint_64)(int_64)3)
	$1 = (int_64)59
	$17 = [1184]
	$2 = (int_64)0
	
.LOOP $label$48:
	$5 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$49 }
	$3 = *($17)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$3 = ($3 + [165])
	goto $label$50 
	
.LABEL $label$51
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$49
	$17 = ($17 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$2 = ((int_64)$5 | (int_64)$2)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$48 }
	$7 = *(($0 + [136]))
	$4 = *(($0 + [140]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$52 }
	$17 = ($4 + [-24])
	$18 = ([0] - $7)
	
.LOOP $label$53:
	if ( ((int_64)*(*($17)) == (int_64)$2) ){ goto $label$52 }
	$4 = $17
	$3 = ($17 + [-24])
	$17 = $3
	if ( ((int_32)($3 + $18) != (int_32)[-24]) ){ goto $label$53 }
	
.LABEL $label$52
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$55 }
	$17 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	goto $label$54 
	
.LABEL $label$55
	$17 = [0]
	$3 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$54 }
	$17 = CALL $26($12, $3)
	CALL eosio_assert(((int_32)*($17 + [96]) == (int_32)$12), [352])
	
.LABEL $label$54
	$3 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($3, [1840])
	*($19 + [376]) = ($19 + [408])
	CALL eosio_assert($3, [544])
	CALL $83($12, $17, (int_64)0, ($19 + [376]))
	
.LABEL $label$17
	if ( ((*($19 + [432]) & [1]) == 0) ){ goto $label$56 }
	CALL $90(*($19 + [440]))
	
.LABEL $label$56
	if ( ((*($19 + [448]) & [1]) == 0) ){ goto $label$57 }
	CALL $90(*($19 + [456]))
	
.LABEL $label$57
	*([0] + [4]) = ($19 + [480])
	return (unreachable)
	
.LABEL $label$11
	CALL $91(($19 + [432]))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [400])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$46 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$3 = ($3 + [165])
	goto $label$44 
	
.LABEL $label$46
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$42
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$41 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$47:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$48 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$3 = ($3 + [165])
	goto $label$49 
	
.LABEL $label$50
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$48
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [208]
	$7 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$56 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$3 = ($3 + [165])
	goto $label$54 
	
.LABEL $label$56
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$52
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$51 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [224]
	$7 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$62 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$3 = ($3 + [165])
	goto $label$60 
	
.LABEL $label$62
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$58
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$57 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [240]
	$7 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$68 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$3 = ($3 + [165])
	goto $label$66 
	
.LABEL $label$68
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$64
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$63 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [256]
	$7 = (int_64)0
	
.LOOP $label$69:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$74 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$3 = ($3 + [165])
	goto $label$72 
	
.LABEL $label$74
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$70
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$69 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [272]
	$7 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$80 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$3 = ($3 + [165])
	goto $label$78 
	
.LABEL $label$80
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$76
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$75 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [288]
	$7 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$86 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$3 = ($3 + [165])
	goto $label$84 
	
.LABEL $label$86
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$82
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$81 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [304]
	$7 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$92 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$3 = ($3 + [165])
	goto $label$90 
	
.LABEL $label$92
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$88
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$87 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [320]
	$7 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$98 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$3 = ($3 + [165])
	goto $label$96 
	
.LABEL $label$98
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$94
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$93 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$99:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$104 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$3 = ($3 + [165])
	goto $label$102 
	
.LABEL $label$104
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$103
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$101
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$100
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$99 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL $6(($9 + [208]), $0)
	if ( ((int_64)$2 <= (int_64)-3838636734157422593) ){ goto $label$117 }
	if ( ((int_64)$2 <= (int_64)4983150932872134655) ){ goto $label$116 }
	if ( ((int_64)$2 > (int_64)5456046324565147647) ){ goto $label$114 }
	if ( ((int_64)$2 == (int_64)4983150932872134656) ){ goto $label$113 }
	if ( ((int_64)$2 != (int_64)5455799419175698432) ){ goto $label$105 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [1]
	*($9 + [24 align=4]) = *($9 + [176])
	CALL $13($4, ($9 + [24]))
	goto $label$105 
	
.LABEL $label$117
	if ( ((int_64)$2 > (int_64)-4421672816961650689) ){ goto $label$115 }
	if ( ((int_64)$2 == (int_64)-8463225373269306880) ){ goto $label$112 }
	if ( ((int_64)$2 == (int_64)-8281838239757631488) ){ goto $label$111 }
	if ( ((int_64)$2 != (int_64)-7595100142599405568) ){ goto $label$105 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [2]
	*($9 + [80 align=4]) = *($9 + [120])
	CALL $20($4, ($9 + [80]))
	goto $label$105 
	
.LABEL $label$116
	if ( ((int_64)$2 == (int_64)-3838636734157422592) ){ goto $label$110 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$109 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$105 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [3]
	*($9 + [40 align=4]) = *($9 + [160])
	CALL $16($4, ($9 + [40]))
	goto $label$105 
	
.LABEL $label$115
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$108 }
	if ( ((int_64)$2 == (int_64)-3838636836614656112) ){ goto $label$107 }
	if ( ((int_64)$2 != (int_64)-3838636822523543552) ){ goto $label$105 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [96 align=4]) = *($9 + [104])
	CALL $20($4, ($9 + [96]))
	goto $label$105 
	
.LABEL $label$114
	if ( ((int_64)$2 == (int_64)5456046324565147648) ){ goto $label$106 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$105 }
	*($9 + [156]) = [0]
	*($9 + [152]) = [5]
	*($9 + [48 align=4]) = *($9 + [152])
	CALL $13($4, ($9 + [48]))
	goto $label$105 
	
.LABEL $label$113
	*($9 + [148]) = [0]
	*($9 + [144]) = [6]
	*($9 + [56 align=4]) = *($9 + [144])
	CALL $16($4, ($9 + [56]))
	goto $label$105 
	
.LABEL $label$112
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [64 align=4]) = *($9 + [136])
	CALL $20($4, ($9 + [64]))
	goto $label$105 
	
.LABEL $label$111
	*($9 + [188]) = [0]
	*($9 + [184]) = [8]
	*($9 + [16 align=4]) = *($9 + [184])
	CALL $10($4, ($9 + [16]))
	goto $label$105 
	
.LABEL $label$110
	*($9 + [132]) = [0]
	*($9 + [128]) = [9]
	*($9 + [72 align=4]) = *($9 + [128])
	CALL $13($4, ($9 + [72]))
	goto $label$105 
	
.LABEL $label$109
	*($9 + [204]) = [0]
	*($9 + [200]) = [10]
	*($9) = *($9 + [200])
	CALL $8($4, $9)
	goto $label$105 
	
.LABEL $label$108
	*($9 + [196]) = [0]
	*($9 + [192]) = [11]
	*($9 + [8 align=4]) = *($9 + [192])
	CALL $10($4, ($9 + [8]))
	goto $label$105 
	
.LABEL $label$107
	*($9 + [116]) = [0]
	*($9 + [112]) = [12]
	*($9 + [88 align=4]) = *($9 + [112])
	CALL $20($4, ($9 + [88]))
	goto $label$105 
	
.LABEL $label$106
	*($9 + [172]) = [0]
	*($9 + [168]) = [13]
	*($9 + [32 align=4]) = *($9 + [168])
	CALL $13($4, ($9 + [32]))
	
.LABEL $label$105
	CALL $25($4)
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [400])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [336]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$4 = [0]
	$1 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $32(($0 + [72]), $1)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1104])
	CALL eosio_assert(((uint_64)*($4 + [8]) > (uint_64)(int_64)999), [1424])
	$2 = ($0 + [152])
	$4 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-3020380627242143744, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $59($2, $4)
	goto $label$6 
	
.LABEL $label$7
	CALL $60(($10 + [24]), $2, *($0), ($10 + [16]))
	$9 = *($10 + [28])
	
.LABEL $label$6
	CALL eosio_assert((uint_64)(*($9 + [8]) <= (int_64)2), [1488])
	$1 = ($0 + [112])
	*($10 + [16]) = (int_64)0
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $26($1, $3)
	
.LABEL $label$8
	*($10 + [12]) = $4
	*($10 + [8]) = $1
	$6 = *($9 + [24])
	if ( (int_64)($6 == 0) ){ goto $label$9 }
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $6)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$4 = CALL $26($1, $3)
	
.LABEL $label$10
	*($10 + [8]) = $1
	*($10 + [12]) = $4
	*($10 + [16]) = (CASTING float_64)(uint_64 *($9 + [16]))
	
.LABEL $label$9
	if ( ($4 == 0) ){ goto $label$11 }
	$6 = (int_64)-1
	$0 = ($0 + [32])
	
.LOOP $label$12:
	$5 = *($4 + [88])
	if ( (int_64)($5 == 0) ){ goto $label$13 }
	*($10 + [16]) = ((float_64)(CASTING float_64)(uint_64 $5) + (float_64)*($10 + [16]))
	
.LABEL $label$13
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((uint_64)$6 > (uint_64)*($0)) ){ goto $label$14 }
	CALL eosio_assert([1], [944])
	$4 = [0]
	$1 = CALL db_next_i64(*(*($10 + [12]) + [100]), ($10 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $26(*($10 + [8]), $1)
	
.LABEL $label$15
	*($10 + [12]) = $4
	if ( $4 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	*($10 + [28]) = ($10 + [16])
	*($10 + [24]) = ($10 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [544])
	CALL $61($2, $9, (int_64)0, ($10 + [24]))
	$4 = *($10 + [12])
	
.LABEL $label$11
	if ( $4 ){ goto $label$16 }
	*($10 + [24]) = ($10 + [16])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [544])
	CALL $62($2, $9, (int_64)0, ($10 + [24]))
	
.LABEL $label$16
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	CALL require_auth($1)
	$2 = *(($0 + [136]))
	$8 = *(($0 + [140]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [112])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$9 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $26($3, $9)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	
.LABEL $label$3
	$9 = [0]
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [496])
	CALL eosio_assert(((int_64)*($6 + [72]) != (int_64)0), [1200])
	$8 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $32(($0 + [72]), $4)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1104])
	$7 = *(($6 + [72]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [1360])
	$11 = (int_64)5459781
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [1264])
	CALL eosio_assert($2, [544])
	$11 = (int_64)0
	CALL $52($3, $6, (int_64)0, ($16 + [24]))
	$5 = *($0)
	$10 = (int_64)59
	$9 = [1296]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [165])
	goto $label$14 
	
.LABEL $label$16
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [112]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$22 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$17 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [128]
	$15 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$28 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$6 = ($6 + [165])
	goto $label$26 
	
.LABEL $label$28
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	*(($16 + [16])) = [0]
	*($16 + [8]) = (int_64)0
	$9 = CALL strlen([1312])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$32 }
	*($16 + [8]) = ($9 << [1])
	$6 = (($16 + [8]) | [1])
	if ( $9 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$8 = (($9 + [16]) & [-16])
	$6 = CALL $89($8)
	*($16 + [8]) = ($8 | [1])
	*($16 + [16]) = $6
	*($16 + [12]) = $9
	
.LABEL $label$31
	CALL memcpy($6, [1312], $9)
	
.LABEL $label$30
	*(($6 + $9)) = [0]
	*((($16 + [24]) + [24])) = (int_64)1397703940
	*(($6 = (($16 + [24]) + [36]))) = *($16 + [12])
	*($16 + [32]) = $1
	$9 = ($16 + [16])
	*(($16 + [64])) = *($9)
	*($16 + [24]) = *($0)
	*($16 + [40]) = $7
	*($16 + [56]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($9) = [0]
	*($16 + [72]) = $14
	*($16 + [80]) = $15
	*(($9 = CALL $89([16]))) = $5
	*($9 + [8]) = $12
	*((($16 + [72]) + [32])) = [0]
	$8 = ($9 + [16])
	*((($16 + [72]) + [24])) = $8
	*(($16 + [92])) = $8
	*($16 + [88]) = $9
	*($16 + [100]) = [0]
	*((($16 + [72]) + [36])) = [0]
	$9 = *($16 + [56])
	$6 = ( *($6) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$11 = (CASTING uint_64)(uint_32 $6)
	$6 = ($16 + [100])
	
.LOOP $label$33:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$33 }
	if ( ($9 == 0) ){ goto $label$35 }
	CALL $53($6, $9)
	$6 = *(($16 + [104]))
	$9 = *(($16 + [100]))
	goto $label$34 
	
.LABEL $label$35
	$6 = [0]
	$9 = [0]
	
.LABEL $label$34
	*($16 + [116]) = $9
	*($16 + [112]) = $9
	*($16 + [120]) = $6
	*($16 + [128]) = ($16 + [112])
	*($16 + [136]) = ($16 + [24])
	CALL $54(($16 + [136]), ($16 + [128]))
	CALL $55(($16 + [112]), ($16 + [72]))
	$9 = *($16 + [112])
	CALL send_inline($9, (*($16 + [116]) - $9))
	$9 = *($16 + [112])
	if ( ($9 == 0) ){ goto $label$36 }
	*($16 + [116]) = $9
	CALL $90($9)
	
.LABEL $label$36
	$9 = *($16 + [100])
	if ( ($9 == 0) ){ goto $label$37 }
	*(($16 + [104])) = $9
	CALL $90($9)
	
.LABEL $label$37
	$9 = *($16 + [88])
	if ( ($9 == 0) ){ goto $label$38 }
	*(($16 + [92])) = $9
	CALL $90($9)
	
.LABEL $label$38
	if ( ((*(($16 + [56])) & [1]) == 0) ){ goto $label$39 }
	CALL $90(*(($16 + [64])))
	
.LABEL $label$39
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL $90(*(($16 + [16])))
	
.LABEL $label$40
	*([0] + [4]) = ($16 + [144])
	return (unreachable)
	
.LABEL $label$29
	CALL $91(($16 + [8]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [816])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [336]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($5)
	$2 = ($0 + [72])
	$1 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $32($2, $1)
	$1 = [0]
	goto $label$5 
	
.LABEL $label$6
	$1 = [1]
	
.LABEL $label$5
	CALL eosio_assert($1, [1152])
	CALL current_time()
	CALL $47(($7 + [8]), $2, *($0), $7)
	$2 = ($0 + [112])
	$1 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	CALL $26($2, $1)
	
.LABEL $label$7
	CALL $48(($7 + [8]), $2, *($0), $7)
	CALL $49(($7 + [8]), $2, *($0), $7)
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [1360])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [1264])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [816])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [816])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [816])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$6 = [0]
	$3 = *($2)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1648])
	CALL eosio_assert(((uint_64)$3 >= (uint_64)*($0 + [40])), [1680])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)((int_64)*($0 + [40]) * (int_64)1000000)), [1728])
	$4 = *(($0 + [136]))
	$9 = *(($0 + [140]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$6 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$6 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [112])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$9 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [352])
	goto $label$8 
	
.LABEL $label$9
	$8 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$10 }
	$8 = CALL $26($6, $8)
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [352])
	goto $label$8 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$8
	*($10 + [12]) = $8
	*($10 + [8]) = $6
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1008])
	$7 = *($2)
	CALL eosio_assert(((uint_64)*($8 + [24]) >= (uint_64)((int_64)*($8 + [40]) + (int_64)$7)), [1776])
	$5 = ($0 + [72])
	$8 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $32($5, $9)
	$7 = *($2)
	
.LABEL $label$11
	CALL current_time()
	CALL eosio_assert(((uint_64)*($8 + [32]) >= (uint_64)$7), [1808])
	$9 = *($10 + [12])
	*($10) = $2
	*($10 + [4]) = ($10 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [544])
	CALL $70($6, $9, (int_64)0, $10)
	*($10) = $2
	*($10 + [4]) = ($10 + [8])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [544])
	CALL $71($5, $8, (int_64)0, $10)
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [32])
	*([0] + [4]) = $16
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [336]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($9)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$2 = ($0 + [72])
	$15 = [0]
	$14 = [0]
	$9 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$14 = CALL $32($2, $9)
	
.LABEL $label$5
	$3 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($3, [1104])
	CALL eosio_assert(((int_64)*($14 + [8]) != (int_64)0), [1424])
	$4 = ($0 + [152])
	$9 = CALL db_lowerbound_i64(*($0 + [152]), *(($0 + [160])), (int_64)-3020380627242143744, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$15 = CALL $59($4, $9)
	
.LABEL $label$6
	$9 = [0]
	$5 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($5, [1520])
	CALL eosio_assert(((int_64)*($15 + [8]) == (int_64)2), [1552])
	$11 = *($15 + [16])
	CALL eosio_assert(((int_64)$11 != (int_64)0), [1600])
	$8 = ($0 + [112])
	$10 = *(($14 + [8]))
	$1 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $26($8, $1)
	
.LABEL $label$7
	*($16 + [20]) = $9
	*($16 + [16]) = $8
	$13 = *($15 + [24])
	if ( (int_64)($13 == 0) ){ goto $label$8 }
	$9 = [0]
	$1 = CALL db_lowerbound_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $13)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $26($8, $1)
	
.LABEL $label$9
	*($16 + [20]) = $9
	*($16 + [16]) = $8
	
.LABEL $label$8
	if ( ($9 == 0) ){ goto $label$10 }
	$7 = (CASTING float_64)(uint_64 $10)
	$6 = (CASTING float_64)(uint_64 $11)
	$11 = (int_64)-1
	$0 = ($0 + [32])
	
.LOOP $label$11:
	$10 = *($9 + [88])
	if ( (int_64)($10 == 0) ){ goto $label$12 }
	*($16 + [24]) = (CASTING float_64)(uint_64 (Rounds 0)(CALL floor(((float_64)$7 * (float_64)((float_64)(CASTING float_64)(uint_64 $10) / (float_64)$6)))))
	$9 = *($16 + [20])
	*($16 + [8]) = ($16 + [24])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [544])
	CALL $66($8, $9, (int_64)0, ($16 + [8]))
	
.LABEL $label$12
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((uint_64)$11 > (uint_64)*($0)) ){ goto $label$13 }
	$9 = [0]
	CALL eosio_assert(((int_32)*($16 + [20]) != (int_32)[0]), [944])
	$1 = CALL db_next_i64(*(*($16 + [20]) + [100]), ($16 + [24]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $26(*($16 + [16]), $1)
	
.LABEL $label$14
	*($16 + [20]) = $9
	if ( $9 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	*($16 + [24]) = ($16 + [16])
	CALL eosio_assert($5, [544])
	CALL $67($4, $15, (int_64)0, ($16 + [24]))
	$9 = *($16 + [20])
	
.LABEL $label$10
	if ( $9 ){ goto $label$15 }
	CALL eosio_assert($3, [544])
	CALL $68($2, $14, (int_64)0, ($16 + [24]))
	CALL eosio_assert($5, [544])
	CALL $69($4, $15, (int_64)0, ($16 + [24]))
	
.LABEL $label$15
	*([0] + [4]) = ($16 + [32])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [816])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [816])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [816])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$2 = *(($0 + [136]))
	$6 = *(($0 + [140]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [112])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)$4), [352])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $26($4, $6)
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)$4), [352])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1008])
	CALL eosio_assert(((uint_64)((int_64)*($5 + [24]) + (int_64)*($5 + [48])) > (uint_64)*($5 + [40])), [1040])
	CALL eosio_assert((int_64)(*($5 + [88]) == 0), [1072])
	*($7 + [8]) = *($5 + [48])
	*($7) = ($7 + [8])
	CALL eosio_assert($6, [544])
	CALL $45($4, $5, (int_64)0, $7)
	$4 = ($0 + [72])
	$5 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $32($4, $6)
	
.LABEL $label$5
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1104])
	*($7) = ($7 + [8])
	CALL eosio_assert($6, [544])
	CALL $46($4, $5, (int_64)0, $7)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	*($12 + [40]) = $1
	*($12 + [32]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [336]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [136]))
	$11 = *(($0 + [140]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [112])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$6), [352])
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	$11 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $26($6, $11)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$6), [352])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$2 != (int_64)0), [416])
	CALL eosio_assert((uint_64)($2 <= (int_64)20000), [416])
	*($12 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	if ( ($3 == 0) ){ goto $label$10 }
	*($12) = $0
	*($12 + [4]) = ($12 + [32])
	CALL eosio_assert([1], [544])
	CALL $42($6, $3, (int_64)0, $12)
	goto $label$9 
	
.LABEL $label$10
	$8 = *($0)
	*($12 + [4]) = $0
	*($12) = ($12 + [40])
	*($12 + [8]) = ($12 + [32])
	*($12 + [12]) = ($12 + [24])
	CALL $41(($12 + [16]), $6, $8, $12)
	
.LABEL $label$9
	$3 = ($0 + [72])
	$6 = [0]
	$11 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $32($3, $11)
	
.LABEL $label$11
	*($12) = $0
	*($12 + [4]) = ($12 + [32])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [544])
	CALL $43($3, $6, (int_64)0, $12)
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [784])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $89([48])) + [32]) = $0
	CALL $65(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $64(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $90($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1184]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($1 + [8]) = (int_64)0
	*($1) = $7
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = (int_64)0
	$3 = $10
	$4 = ($3 + [-96])
	*([0] + [4]) = $4
	*($9 + [4]) = $4
	*($9) = $4
	*($9 + [8]) = $3
	CALL $28($9, $1)
	$6 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $6, $4, [96])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [336]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($1 + [8]) = (int_64)0
	*($1) = $7
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = (int_64)0
	$3 = $10
	$4 = ($3 + [-96])
	*([0] + [4]) = $4
	*($9 + [4]) = $4
	*($9) = $4
	*($9 + [8]) = $3
	CALL $28($9, $1)
	$6 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $6, $4, [96])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [72]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $89($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $99($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $90($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [768])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [816])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [816])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $53($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [768])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [768])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $57(CALL $56($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

void .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$3 = (int_64)0
	$2 = (int_64)59
	$6 = [336]
	$4 = (int_64)0
	
.LOOP $label$1:
	$5 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$4 = ((int_64)$5 | (int_64)$4)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($4)
	$6 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = ($0 + [112])
	$6 = CALL $26($1, $6)
	*($7 + [16]) = (int_64)0
	
.LOOP $label$7:
	$3 = *($6 + [72])
	if ( (int_64)(((int_64)*($6 + [32]) | (int_64)$3) == 0) ){ goto $label$8 }
	*($7 + [24]) = ( (int_64)0 ? $3 : (int_64)(*($6 + [88]) == 0) )
	*($7 + [8]) = ($7 + [24])
	CALL eosio_assert([1], [544])
	CALL $39($1, $6, (int_64)0, ($7 + [8]))
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)*($7 + [24]))
	
.LABEL $label$8
	CALL eosio_assert([1], [944])
	$6 = CALL db_next_i64(*($6 + [100]), ($7 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $26($1, $6)
	goto $label$7 
	
.LABEL $label$6
	*($7 + [16]) = (int_64)0
	
.LABEL $label$5
	$1 = ($0 + [72])
	$6 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $32($1, $0)
	
.LABEL $label$9
	$0 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($0, [976])
	*($7 + [24]) = ($7 + [16])
	CALL eosio_assert($0, [544])
	CALL $40($1, $6, (int_64)0, ($7 + [24]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [816])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [816])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12 + [8]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [336]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [136]))
	$11 = *(($0 + [140]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [112])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $26($3, $11)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$2 != (int_64)0), [416])
	CALL eosio_assert((uint_64)($2 <= (int_64)20000), [832])
	CALL current_time()
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [496])
	*($12 + [4]) = ($12 + [8])
	*($12) = $0
	CALL eosio_assert($11, [544])
	CALL $31($3, $6, (int_64)0, $12)
	$3 = ($0 + [72])
	$6 = [0]
	$11 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $32($3, $11)
	
.LABEL $label$9
	*($12) = $0
	*($12 + [4]) = ($12 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [544])
	CALL $33($3, $6, (int_64)0, $12)
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	*($12 + [40]) = $1
	*($12 + [32]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [336]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [136]))
	$11 = *(($0 + [140]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [112])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$6), [352])
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	$11 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $26($6, $11)
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)$6), [352])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$2 != (int_64)0), [416])
	*($12 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	if ( ($3 == 0) ){ goto $label$10 }
	*($12) = ($12 + [32])
	CALL eosio_assert([1], [544])
	CALL $38($6, $3, (int_64)0, $12)
	goto $label$9 
	
.LABEL $label$10
	$8 = *($0)
	*($12 + [4]) = ($12 + [32])
	*($12) = ($12 + [40])
	*($12 + [8]) = ($12 + [24])
	CALL $37(($12 + [16]), $6, $8, $12)
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [180])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $90($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [140])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $90($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [100])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $90($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $90($4)
	
.LABEL $label$11
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $90(*(($0 + [24])))
	
.LABEL $label$16
	return $0
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12 + [8]) = $2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [336]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [136]))
	$11 = *(($0 + [140]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [112])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-3020371635640205312, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $26($3, $11)
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$3), [352])
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$2 != (int_64)0), [416])
	CALL eosio_assert((uint_64)($2 <= (int_64)100000), [448])
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [496])
	*($12) = ($12 + [8])
	CALL eosio_assert($11, [544])
	CALL $27($3, $6, (int_64)0, $12)
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3)))
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [784])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $89([112])) + [96]) = $0
	CALL $29(($8 + [32]), $6)
	*($6 + [100]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [100])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $90($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [11025])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [11025])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [11025]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [11025]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [11296]))
	$10 = *(($13 + [11025]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [11025]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [11025]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [11025]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [11025])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [11025])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [768])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [816])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [816])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $89(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $90($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $90($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = *(*(*($3) + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [768])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [72]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [72]))))
	$4 = *($1)
	*($1 + [80]) = (Rounds 0)(((float_64)*(*($3)) + (float_64)(CASTING float_64)(uint_64 *($1 + [80]))))
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = *(*(*($3) + [4]))
	*($1 + [16]) = (Rounds 0)(*(*($3 + [4])))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [768])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $89([48])) + [32]) = $1
	CALL $63(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $90($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($1 + [24]) = (int_64)0
	*($1) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)1
	$2 = *($0)
	CALL eosio_assert([1], [768])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020380627242143744, *(*($0 + [8])), $3, $4, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = (int_64)0
	$4 = *($1)
	*($1) = (int_64)0
	$3 = *($3)
	*($1 + [8]) = (int_64)2
	*($1 + [16]) = (Rounds 0)(*($3))
	CALL eosio_assert((int_64)($4 == 0), [704])
	CALL eosio_assert([1], [768])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [768])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC __errno_location ()
{
	return [11008]
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $89($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC floor (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$1 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 <= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

void .FUNC ceill (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)) & [32767]
	if ( ((uint_32)$3) > (uint_32)[16494]) ){ goto $label$3 }
	$7 = (int_64)0
	$6 = ((int_64)$2 < (int_64)0)
	CALL __addtf3(($8 + [64]), (int_64)0, ( (int_64)-4580442296012505088 ? (int_64)4642929740842270720 : $6 ), $1, $2)
	CALL __addtf3(($8 + [48]), (int_64)0, ( (int_64)4642929740842270720 ? (int_64)-4580442296012505088 : $6 ), *($8 + [64]), *((($8 + [64]) + [8])))
	CALL __subtf3(($8 + [32]), *($8 + [48]), *((($8 + [48]) + [8])), $1, $2)
	$5 = *((($8 + [32]) + [8]))
	$4 = *($8 + [32])
	if ( ((uint_32)$3 > (uint_32)[16382]) ){ goto $label$2 }
	*($8 + [80]) = $4
	*($8 + [88]) = $5
	$2 = ( (int_64)-9223372036854775808 ? (int_64)4611404543450677248 : $6 )
	goto $label$1 
	
.LABEL $label$3
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	CALL __addtf3(($8 + [16]), $4, $5, $1, $2)
	$3 = CALL __lttf2($4, $5, (int_64)0, (int_64)0)
	$2 = *((($8 + [16]) + [8]))
	$7 = *($8 + [16])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$1 }
	CALL __addtf3($8, $7, $2, (int_64)0, (int_64)4611404543450677248)
	$2 = *(($8 + [8]))
	$7 = *($8)
	
.LABEL $label$1
	*($0) = $7
	*(($0 + [8])) = $2
	*([0] + [4]) = ($8 + [96])
}

void .FUNC sqrtl (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL __extenddftf2($3, CALL $106(CALL $fimport$12($1, $2)))
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC floorl (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$1 }
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)) & [32767]
	if ( ((uint_32)$3) > (uint_32)[16494]) ){ goto $label$1 }
	$6 = ((int_64)$2 < (int_64)0)
	CALL __addtf3(($7 + [80]), (int_64)0, ( (int_64)-4580442296012505088 ? (int_64)4642929740842270720 : $6 ), $1, $2)
	CALL __addtf3(($7 + [64]), (int_64)0, ( (int_64)4642929740842270720 ? (int_64)-4580442296012505088 : $6 ), *($7 + [80]), *((($7 + [80]) + [8])))
	CALL __subtf3(($7 + [48]), *($7 + [64]), *((($7 + [64]) + [8])), $1, $2)
	$5 = *((($7 + [48]) + [8]))
	$4 = *($7 + [48])
	if ( ((uint_32)$3 > (uint_32)[16382]) ){ goto $label$2 }
	*($7 + [96]) = $4
	*($7 + [104]) = $5
	CALL __floatsitf($7, (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	$2 = *(($7 + [8]))
	$1 = *($7)
	goto $label$1 
	
.LABEL $label$2
	CALL __addtf3(($7 + [32]), $4, $5, $1, $2)
	$3 = CALL __gttf2($4, $5, (int_64)0, (int_64)0)
	$2 = *((($7 + [32]) + [8]))
	$1 = *($7 + [32])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$1 }
	CALL __addtf3(($7 + [16]), $1, $2, (int_64)0, (int_64)-4611967493404098560)
	$2 = *(($7 + [24]))
	$1 = *($7 + [16])
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10956])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10844])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10652]
	$1 = (((int_32)$2 * (int_32)[12]) + [10652])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10950]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10952])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10950]) = [1]
	$7 = ($7 << [16])
	*([0] + [10952]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10952])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10952]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10950]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10950]) = [1]
	$3 = ($3 << [16])
	*([0] + [10952]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10952])
	
.LABEL $label$8
	*([0] + [10952]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10864])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $86([2460], $0)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*($0 + [96]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$3 = *($2)
	*($0 + [16]) = *(*($1 + [8]))
	*($0 + [24]) = *(*($1 + [12]))
	$4 = *(*($1 + [12]))
	*($0 + [32]) = (int_64)0
	*($0 + [56]) = $4
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [72]) = (int_64)0
	$4 = *(*($1 + [16]))
	*($0 + [80]) = (int_64)0
	*($0 + [64]) = $4
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $0)
	$4 = *($0)
	*($0 + [100]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020371635640205312, *(*($2 + [8])), $4, $5, [96])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [8])))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3 + [8])))
	*($1 + [64]) = *(*($3 + [12]))
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $89([112])
	CALL $84($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [100])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $90($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	*($1 + [56]) = (int_64))(*($1 + [56]) - *(*($3)))
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*($3)))
	$4 = *($1)
	$5 = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	*($1 + [48]) = $5
	if ( (int_64)(*(*(*($3 + [4]) + [4]) + [88]) == 0) ){ goto $label$2 }
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3)))
	goto $label$1 
	
.LABEL $label$2
	*($1 + [88]) = $5
	
.LABEL $label$1
	CALL eosio_assert([1], [704])
	$7 = $7
	$3 = ($7 + [-96])
	*([0] + [4]) = $3
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = $7
	CALL $28($6, $1)
	CALL db_update_i64(*($1 + [100]), $2, $3, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [32]) = (int_64))(*($1 + [32]) - *(*($3)))
	$4 = *($1)
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	if ( (int_64)(*(*(*($3 + [4]) + [4]) + [88]) == 0) ){ goto $label$1 }
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)*(*($3)))
	
.LABEL $label$1
	CALL eosio_assert([1], [704])
	$6 = $6
	$3 = ($6 + [-112])
	*([0] + [4]) = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($6 + [-8])
	CALL $34($5, $1)
	CALL db_update_i64(*($1 + [108]), $2, $3, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $100(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $100(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $90(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $90(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $78($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $92($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $89($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $92($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $90($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $91($7)
	return (unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [64]) = (int_64))(*($1 + [64]) - *(*($3)))
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $89(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $90($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $90($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [880])
	*(($4 = CALL $89([112])) + [96]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [72]) = *(*($3 + [4]))
	*($4 + [64]) = *(*($3 + [8]))
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($8 + [120]) = (($8 + [16]) + [96])
	*($8 + [116]) = ($8 + [16])
	*($8 + [112]) = ($8 + [16])
	CALL $28(($8 + [112]), $4)
	$5 = *($4)
	*($4 + [100]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020371635640205312, $2, $5, ($8 + [16]), [96])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [112]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [100])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [112]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $30(($1 + [24]), ($8 + [112]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $90($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [128])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2016])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $53($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [816])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	$4 = *($1)
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [8])))
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)*(*($3 + [8])))
	*($1 + [96]) = *(*($3 + [12]))
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)1)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [784])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $89([120])) + [104]) = $0
	CALL $35(($8 + [32]), $6)
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [108])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $90($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)((int_64)*(*($3) + [40]) * (int_64)*(*($3 + [4]))))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $34(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $89(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $99($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $90($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $90($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [640])
	*($1 + [88]) = ((int_64)*($1 + [88]) + (int_64)((int_64)*(*($3) + [40]) * (int_64)*(*($3 + [4]))))
	$4 = *($1)
	CALL eosio_assert([1], [704])
	*($5 + [104]) = ($5 + [96])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $28(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $5, [96])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}