(data (i32.const 4) "`e\00\00")
(data (i32.const 16) "cannot create objects in table of another contract\00")
(data (i32.const 80) "write\00")
(data (i32.const 96) "error reading iterator\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 272) "invalid symbol name\00")
(data (i32.const 304) "cannot pass end iterator to modify\00")
(data (i32.const 352) "The game not finished yet.\00")
(data (i32.const 384) "active\00")
(data (i32.const 400) "initreceipt\00")
(data (i32.const 416) "object passed to modify is not in multi_index\00")
(data (i32.const 464) "cannot modify objects in table of another contract\00")
(data (i32.const 528) "updater cannot change primary key when modifying an object\00")
(data (i32.const 592) "get\00")
(data (i32.const 608) "Invalid token transfer\00")
(data (i32.const 640) "Quantity must be positive\00")
(data (i32.const 672) "Invalid seed code\00")
(data (i32.const 704) "Invalid contract!\00")
(data (i32.const 736) "hex needed\00")
(data (i32.const 752) "The game does not exist.\00")
(data (i32.const 784) "The game is closed.\00")
(data (i32.const 816) "The game time is expired\00")
(data (i32.const 848) "at least buy one share\00")
(data (i32.const 880) "Overflow the total share.TERROR1\00")
(data (i32.const 928) "buyreceipt\00")
(data (i32.const 944) "Welcome to EOS! \00")
(data (i32.const 976) "openreceipt\00")
(data (i32.const 992) "cannot increment end iterator\00")
(data (i32.const 1024) "transfer\00")
(data (i32.const 1040) "Congratulation to get final reward!\00")
(data (i32.const 9472) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "assert_sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN8treasure10initglobalERK11checksum256" (func $5))
(export "_ZN8treasure8initgameEyN5eosio5assetEyRK11checksum256" (func $8))
(export "_ZN8treasure15handle_transferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $23))
(export "_ZN8treasure9_buyshareEyN5eosio14extended_assetERK11checksum256" (func $24))
(export "_ZN8treasure8validateERK11checksum256S2_" (func $29))
(export "_ZN8treasure4openERK11checksum256S2_" (func $30))
(export "_ZN8treasure5_openERKNS_4GameE11checksum256" (func $31))
(export "_ZN8treasure11openreceiptEyN5eosio5assetEy11checksum256yy" (func $45))
(export "_ZN8treasure10buyreceiptEyyyyN5eosio5assetEyyy" (func $46))
(export "_ZN8treasure11initreceiptEyN5eosio5assetEyy" (func $47))
(export "apply" (func $48))
(export "malloc" (func $65))
(export "free" (func $68))
(export "memcmp" (func $75))
(export "strlen" (func $76))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $77 $8 $29 $47 $46 $30 $5 $45)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $20($0, ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $77 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $67($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9472])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $66([1076], $0)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $70($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $70($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $73 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9558]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9560])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9558]) = [1]
	$7 = ($7 << [16])
	*([0] + [9560]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9560])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9560]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9558]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9558]) = [1]
	$3 = ($3 << [16])
	*([0] + [9560]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9560])
	
.LABEL $label$8
	*([0] + [9560]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC _ZN8treasure8validateERK11checksum256S2_ (int_32 $0, int_32 $1, int_32 $2)
{
	CALL assert_sha256($1, [32], $2)
	CALL prints([944])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [5])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($2 >> [4])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $69(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [32])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $73($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [5]))
	$5 = ($2 + ($3 << [5]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $70($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [592])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $4) >> [5])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $21($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ($7 << [5]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $22($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC _ZN8treasure15handle_transferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$1 }
	CALL require_auth($1)
	$11 = [0]
	$7 = *($3)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$11 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$11 = [0]
	
.LABEL $label$2
	CALL eosio_assert($11, [608])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [640])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$8 }
	$10 = uint_32($10 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$10 = *($4 + [4])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$10 == (int_32)[64]), [672])
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$5 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$9 }
	$10 = ($6 + [-24])
	$12 = ([0] - $5)
	
.LOOP $label$10:
	if ( ((int_64)(uint_64)*(*($10) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$9 }
	$6 = $10
	$11 = ($10 + [-24])
	$10 = $11
	if ( ((int_32)($11 + $12) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$10 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$12 }
	$11 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [108]) == (int_32)$10), [144])
	goto $label$11 
	
.LABEL $label$12
	$11 = CALL $9($10, CALL $fimport$5(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $2))
	CALL eosio_assert(((int_32)*($11 + [108]) == (int_32)$10), [144])
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($11 + [88]) == (int_64)*($3 + [16])), [704])
	$5 = ($4 + [1])
	$11 = ($14 + [48])
	$10 = [0]
	$8 = ($4 + [8])
	
.LOOP $label$13:
	$6 = $5
	$12 = *($4)
	if ( (($12 & [1]) == 0) ){ goto $label$14 }
	$6 = *($8)
	
.LABEL $label$14
	$6 = *(($6 + $10))
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$16 }
	$13 = ($6 + [208])
	goto $label$15 
	
.LABEL $label$16
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$17 }
	$13 = ($6 + [169])
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_32)(($6 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$18 }
	$13 = ($6 + [201])
	goto $label$15 
	
.LABEL $label$18
	$13 = [0]
	CALL eosio_assert([0], [736])
	$12 = *($4)
	
.LABEL $label$15
	$6 = $5
	if ( (($12 & [1]) == 0) ){ goto $label$19 }
	$6 = *($8)
	
.LABEL $label$19
	$12 = ($13 << [4])
	$6 = *((($6 + $10) + [1]))
	if ( ((uint_32)(($6 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$21 }
	$6 = ($6 + [208])
	goto $label$20 
	
.LABEL $label$21
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$22 }
	$6 = ($6 + [169])
	goto $label$20 
	
.LABEL $label$22
	if ( ((uint_32)(($6 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$23 }
	$6 = ($6 + [201])
	goto $label$20 
	
.LABEL $label$23
	$6 = [0]
	CALL eosio_assert([0], [736])
	
.LABEL $label$20
	*($11) = ($6 + $12)
	$11 = ($11 + [1])
	$10 = ($10 + [2])
	if ( ((int_32)$10 != (int_32)[64]) ){ goto $label$13 }
	$7 = *(($3 + [16]))
	*((($14 + [24]) + [16])) = $7
	$9 = *(($3 + [8]))
	*((($14 + [24]) + [8])) = $9
	$2 = *($3)
	*(($14 + [16])) = $7
	*(($14 + [8])) = $9
	*($14 + [24]) = $2
	*($14) = $2
	CALL _ZN8treasure9_buyshareEyN5eosio14extended_assetERK11checksum256($0, $1, $14, ($14 + [48]))
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [80])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $28(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN8treasure9_buyshareEyN5eosio14extended_assetERK11checksum256 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	*($16 + [152]) = $1
	CALL require_auth($1)
	$12 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$4 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$10 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($10) + [8]) >> (uint_64)(int_64)8) == (int_64)$12) ){ goto $label$1 }
	$9 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [108]) == (int_32)$5), [144])
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $9($5, $10)
	CALL eosio_assert(((int_32)*($9 + [108]) == (int_32)$5), [144])
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$3
	*($16 + [148]) = $9
	*($16 + [144]) = $5
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [752])
	CALL eosio_assert((uint_64)(*($9 + [72]) <= (int_64)2), [784])
	$12 = CALL current_time()
	*($16 + [136]) = $12
	CALL eosio_assert(((uint_64)((int_64)*($9 + [64]) + (int_64)43200000000) >= (uint_64)$12), [816])
	$6 = ((int_64)*($2) / (int_64)*($9))
	*($16 + [128]) = $6
	$12 = (int_64)0
	CALL eosio_assert(((int_64)$6 != (int_64)0), [848])
	CALL eosio_assert(((uint_64)((int_64)$6 + (int_64)*($9 + [56])) <= (uint_64)*($9 + [48])), [880])
	*($16 + [127]) = [0]
	*($16 + [127]) = ((int_64)((int_64)$6 + (int_64)*($9 + [56])) == (int_64)*($9 + [48]))
	$7 = *($0)
	$11 = (int_64)59
	$10 = [384]
	$13 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$11 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$8 = ($8 + [165])
	goto $label$9 
	
.LABEL $label$11
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [928]
	$15 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$12 > (uint_64)(int_64)9) ){ goto $label$17 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [165])
	goto $label$15 
	
.LABEL $label$17
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$12 }
	$12 = *($9 + [56])
	$14 = CALL current_time()
	*($16 + [32]) = *($9 + [48])
	*($16 + [16]) = *($9 + [56])
	*($16 + [8]) = $6
	*($16 + [24]) = ((int_64)$6 + (int_64)$12)
	*(($16 + [52])) = *(($9 + [12]))
	*(($16 + [48])) = *(($9 + [8]))
	*($16 + [40]) = *($9)
	*($16 + [56]) = $1
	*($16 + [64]) = $14
	*($16 + [72]) = *($9 + [80])
	*($16 + [80]) = $7
	*($16 + [88]) = $15
	*(($10 = CALL $69([16]))) = $7
	*($10 + [8]) = $13
	*(($8 = ($16 + [112]))) = [0]
	$9 = ($10 + [16])
	*(($16 + [104])) = $9
	*(($16 + [100])) = $9
	*($16 + [96]) = $10
	*($16 + [108]) = [0]
	*(($16 + [116])) = [0]
	CALL $13(($16 + [108]), [72])
	$10 = *($8)
	$8 = *($16 + [108])
	*($16 + [164]) = $8
	*($16 + [160]) = $8
	*($16 + [168]) = $10
	*($16 + [176]) = ($16 + [160])
	*($16 + [184]) = ($16 + [8])
	CALL $25(($16 + [184]), ($16 + [176]))
	CALL $15(($16 + [160]), ($16 + [80]))
	$10 = *($16 + [160])
	CALL send_inline($10, (*($16 + [164]) - $10))
	$10 = *($16 + [160])
	if ( ($10 == 0) ){ goto $label$18 }
	*($16 + [164]) = $10
	CALL $70($10)
	
.LABEL $label$18
	$10 = *($16 + [108])
	if ( ($10 == 0) ){ goto $label$19 }
	*(($16 + [112])) = $10
	CALL $70($10)
	
.LABEL $label$19
	$10 = *($16 + [96])
	if ( ($10 == 0) ){ goto $label$20 }
	*(($16 + [100])) = $10
	CALL $70($10)
	
.LABEL $label$20
	$10 = *($16 + [148])
	*($16 + [24]) = $0
	*($16 + [28]) = $3
	*($16 + [12]) = ($16 + [128])
	*($16 + [8]) = ($16 + [144])
	*($16 + [16]) = ($16 + [152])
	*($16 + [20]) = ($16 + [136])
	*($16 + [32]) = ($16 + [127])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [304])
	CALL $26($5, $10, ($16 + [8]))
	*([0] + [4]) = ($16 + [192])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $69(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $73($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $70($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [464])
	$7 = *($1 + [8])
	$3 = *(*(*($2) + [4]) + [56])
	*(($8 = $9)) = $3
	*($8 + [8]) = ((int_64)$3 + (int_64)*(*($2 + [4])))
	*($8 + [16]) = *(*($2 + [8]))
	*($8 + [24]) = *(*($2 + [12]))
	$5 = ($1 + [100])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [104]))) ){ goto $label$2 }
	*($6) = *($8)
	*(($6 + [24])) = *(($8 + [24]))
	*(($6 + [16])) = *(($8 + [16]))
	*(($6 + [8])) = *(($8 + [8]))
	*($5) = (*($5) + [32])
	goto $label$1 
	
.LABEL $label$2
	CALL $27(($1 + [96]), $8)
	
.LABEL $label$1
	$3 = (uint_64)$7 >> (uint_64)(int_64)8)
	*($1 + [56]) = ((int_64)*(*(($2 + [4]))) + (int_64)*(*(*($2) + [4]) + [56]))
	*($1 + [64]) = *(*(($2 + [12])))
	$4 = *($2 + [20])
	$7 = (int_64)0
	$5 = [0]
	$6 = [0]
	
.LOOP $label$3:
	$7 = ((int_64)(CASTING int_64)(int_32 ((((int_32)*(($4 + $6)) ^ (int_32)*((($1 + $6) + [16]))) & [255]) << ($5 & [56]))) ^ (int_64)$7)
	$5 = ($5 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$3 }
	*($8) = $7
	CALL sha256($8, [8], ($1 + [16]))
	*($1 + [72]) = ( (int_64)2 ? (int_64)1 : ((int_32)*(*($2 + [24])) == (int_32)[1]) )
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [528])
	$4 = *($1 + [96])
	$5 = *(($1 + [100]))
	$2 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($2 >> [5]))
	$6 = [96]
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	$6 = (($2 & [-32]) + $6)
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$7 }
	$5 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$6
	*($8 + [4]) = $5
	*($8) = $5
	*($8 + [8]) = ($5 + $6)
	CALL $10($8, $1)
	CALL db_update_i64(*($1 + [112]), (int_64)0, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $69($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [192])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [32])) = (int_64)1397703940
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$7 = (int_64)5459781
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [272])
	*(($10 + [72])) = (int_64)0
	*(($10 + [64])) = (int_64)0
	*(($10 + [56])) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [148]) = $6
	*($10 + [144]) = $6
	*($10 + [152]) = ($6 + $3)
	*($10 + [176]) = ($10 + [144])
	*($10 + [80]) = ($10 + [16])
	CALL $64(($10 + [80]), ($10 + [176]))
	$1 = ($10 + [48])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($8 = (($10 + [112]) + [8]))) = *((($10 + [16]) + [16]))
	$7 = *($10 + [16])
	*($10 + [112]) = *($10 + [24])
	$4 = *((($10 + [16]) + [24]))
	*(($6 = (($10 + [80]) + [24]))) = *(($1 + [24]))
	*(($3 = (($10 + [80]) + [16]))) = *(($1 + [16]))
	*($10 + [80]) = *($1)
	*($10 + [88]) = *(($1 + [8]))
	*((($10 + [144]) + [24])) = *($6)
	*((($10 + [144]) + [16])) = *($3)
	*($10 + [152]) = *($10 + [88])
	*($10 + [144]) = *($10 + [80])
	*((($10 + [128]) + [8])) = *($8)
	*($10 + [128]) = *($10 + [112])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [128]) + [8]))
	*((($10 + [176]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [128])
	*($10 + [176]) = $5
	*($10) = $5
	CALL void $1((int_32 $7), (int_64 $10), (int_32 $4), (int_64 ($10 + [144])), (int_32 $9))
	*([0] + [4]) = ($10 + [192])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [352])
	*([0] + [4]) = $11
	*(($11 + [264])) = $0
	*(($11 + [272])) = (int_64)-1
	$8 = (int_64)0
	*(($11 + [280])) = (int_64)0
	*(($11 + [288])) = [0]
	*($11 + [256]) = $0
	*($11 + [248]) = $0
	*($11 + [296]) = $0
	*(($11 + [304])) = $0
	*(($11 + [312])) = (int_64)-1
	*(($11 + [320])) = [0]
	*(($11 + [324])) = [0]
	*(($11 + [328])) = [0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$8 }
	if ( ((int_64)$2 <= (int_64)4520898386864259071) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)8421052107912921087) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4520898386864259072) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8421051917907525632) ){ goto $label$1 }
	*($11 + [244]) = [0]
	*($11 + [240]) = [1]
	*($11 + [8 align=4]) = *($11 + [240])
	CALL $49(($11 + [248]), ($11 + [8]))
	goto $label$1 
	
.LABEL $label$8
	$7 = (int_64)59
	$10 = [1024]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$14 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [165])
	goto $label$12 
	
.LABEL $label$14
	$0 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$0 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$0 = ((int_64)((int_64)$0 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$10 = ($10 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$0 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$1 }
	CALL $55(($11 + [144]))
	$8 = *($11 + [152])
	*(($11 + [116])) = *(($11 + [172]))
	*(($10 = (($11 + [104]) + [8]))) = *(($11 + [168]))
	*($11 + [108]) = *(($11 + [164]))
	$0 = *($11 + [144])
	*($11 + [104]) = *($11 + [160])
	$7 = *($10)
	*((($11 + [336]) + [8])) = $7
	*(($10 = (($11 + [120]) + [8]))) = $7
	$7 = *($11 + [104])
	*($11 + [336]) = $7
	*($11 + [120]) = $7
	*($11 + [136]) = $1
	$4 = ($11 + [176])
	CALL $74(($11 + [88]), $4)
	*(($11 + [80])) = *($11 + [136])
	*((($11 + [64]) + [8])) = *($10)
	*($11 + [64]) = *($11 + [120])
	CALL _ZN8treasure15handle_transferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(($11 + [248]), $0, $8, ($11 + [64]), ($11 + [88]))
	if ( ((*($11 + [88]) & [1]) == 0) ){ goto $label$15 }
	CALL $70(*($11 + [96]))
	
.LABEL $label$15
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $70(*(($11 + [184])))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-6533250087220055552) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-2764395866176356352) ){ goto $label$1 }
	*($11 + [196]) = [0]
	*($11 + [192]) = [2]
	*($11 + [56 align=4]) = *($11 + [192])
	CALL $54(($11 + [248]), ($11 + [56]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)8421052107912921088) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421058028579942912) ){ goto $label$1 }
	*($11 + [212]) = [0]
	*($11 + [208]) = [3]
	*($11 + [40 align=4]) = *($11 + [208])
	CALL $53(($11 + [248]), ($11 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($11 + [220]) = [0]
	*($11 + [216]) = [4]
	*($11 + [32 align=4]) = *($11 + [216])
	CALL $52(($11 + [248]), ($11 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($11 + [204]) = [0]
	*($11 + [200]) = [5]
	*($11 + [48 align=4]) = *($11 + [200])
	CALL $54(($11 + [248]), ($11 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($11 + [236]) = [0]
	*($11 + [232]) = [6]
	*($11 + [16 align=4]) = *($11 + [232])
	CALL $50(($11 + [248]), ($11 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($11 + [228]) = [0]
	*($11 + [224]) = [7]
	*($11 + [24 align=4]) = *($11 + [224])
	CALL $51(($11 + [248]), ($11 + [24]))
	
.LABEL $label$1
	$3 = *(($11 + [320]))
	if ( ($3 == 0) ){ goto $label$16 }
	$6 = ($11 + [324])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	$5 = *($4 + [96])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($4 + [100])) = $5
	CALL $70($5)
	
.LABEL $label$21
	CALL $70($4)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$19 }
	$10 = *(($11 + [320]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $3
	
.LABEL $label$17
	*($6) = $3
	CALL $70($10)
	
.LABEL $label$16
	$5 = *(($11 + [280]))
	if ( ($5 == 0) ){ goto $label$22 }
	$3 = ($11 + [284])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$24 }
	
.LOOP $label$25:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$26 }
	CALL $70($4)
	
.LABEL $label$26
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$25 }
	$10 = *(($11 + [280]))
	goto $label$23 
	
.LABEL $label$24
	$10 = $5
	
.LABEL $label$23
	*($3) = $5
	CALL $70($10)
	
.LABEL $label$22
	*([0] + [4]) = ($11 + [352])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9564])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9460])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9268]
	$1 = (((int_32)$2 * (int_32)[12]) + [9268])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [80])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [80])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $17($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [80])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [80])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [80])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $17(CALL $16($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [80])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [80])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [80])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC _ZN8treasure11initreceiptEyN5eosio5assetEyy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN8treasure10buyreceiptEyyyyN5eosio5assetEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_64 $6, int_64 $7, int_64 $8)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN8treasure11openreceiptEyN5eosio5assetEy11checksum256yy (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [80])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [80])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $69(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $70($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [272])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [64])) = (int_64)1397703940
	*($11 + [56]) = (int_64)0
	*($11 + [48]) = (int_64)0
	CALL eosio_assert([1], [208])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [272])
	*(($11 + [104])) = (int_64)0
	*(($11 + [96])) = (int_64)0
	*(($11 + [88])) = (int_64)0
	*($11 + [80]) = (int_64)0
	*($11 + [72]) = (int_64)0
	*($11 + [112]) = (int_64)0
	*($11 + [120]) = (int_64)0
	*($11 + [228]) = $7
	*($11 + [224]) = $7
	*($11 + [232]) = ($7 + $3)
	*($11 + [128]) = ($11 + [224])
	*($11 + [192]) = ($11 + [48])
	CALL $63(($11 + [192]), ($11 + [128]))
	$1 = ($11 + [80])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($9 = (($11 + [160]) + [8]))) = *((($11 + [48]) + [16]))
	$8 = *($11 + [48])
	*($11 + [160]) = *($11 + [56])
	$4 = *((($11 + [48]) + [24]))
	*(($7 = (($11 + [128]) + [24]))) = *(($1 + [24]))
	*(($3 = (($11 + [128]) + [16]))) = *(($1 + [16]))
	*($11 + [128]) = *($1)
	*($11 + [136]) = *(($1 + [8]))
	$6 = *(($11 + [120]))
	$5 = *(($11 + [112]))
	*((($11 + [192]) + [24])) = *($7)
	*((($11 + [192]) + [16])) = *($3)
	*($11 + [200]) = *($11 + [136])
	*($11 + [192]) = *($11 + [128])
	*((($11 + [176]) + [8])) = *($9)
	*($11 + [176]) = *($11 + [160])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	*(($9 = (($11 + [256]) + [8]))) = *((($11 + [176]) + [8]))
	*(($7 = (($11 + [224]) + [24]))) = *((($11 + [192]) + [24]))
	*(($3 = (($11 + [224]) + [16]))) = *((($11 + [192]) + [16]))
	*($11 + [256]) = *($11 + [176])
	*($11 + [232]) = *($11 + [200])
	*($11 + [224]) = *($11 + [192])
	*((($11 + [32]) + [8])) = *($9)
	*($11 + [32]) = *($11 + [256])
	*(($11 + [24])) = *($7)
	*(($11 + [16])) = *($3)
	*($11 + [8]) = *($11 + [232])
	*($11) = *($11 + [224])
	CALL void $1((int_32 $8), (int_64 ($11 + [32])), (int_32 $4), (int_64 $11), (int_32 $5), (int_64 $6), (int_64 $10))
	*([0] + [4]) = ($11 + [272])
	return [1]
}

void .FUNC $70 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN8treasure8initgameEyN5eosio5assetEyRK11checksum256 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [208])
	*([0] + [4]) = $15
	*($15 + [56]) = $1
	*($15 + [48]) = $3
	CALL require_auth(*($0))
	$12 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$11 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($11) + [8]) >> (uint_64)(int_64)8) == (int_64)$12) ){ goto $label$1 }
	$10 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$10 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [108]) == (int_32)$5), [144])
	if ( $11 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $9($5, $11)
	CALL eosio_assert(((int_32)*($11 + [108]) == (int_32)$5), [144])
	
.LABEL $label$9
	$12 = CALL current_time()
	if ( ((int_64)*($11 + [72]) != (int_64)3) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	$13 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [16])
	*(($9 = CALL $69([128])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [208])
	$12 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [272])
	*($9 + [104]) = [0]
	*($9 + [96 align=4]) = (int_64)0
	*($9 + [108]) = $5
	*(($9 + [40])) = *(($4 + [24]))
	*(($9 + [32])) = *(($4 + [16]))
	*(($9 + [24])) = *(($4 + [8]))
	*($9 + [16]) = *($4)
	*(($11 = ($9 + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	*($9 + [56]) = (int_64)0
	$12 = CALL current_time()
	*($9 + [80]) = (int_64)0
	*($9 + [64]) = $12
	*($9 + [72]) = (int_64)0
	*($9 + [88]) = $1
	*($9 + [48]) = $3
	*($9 + [100]) = [0]
	*($15 + [16]) = (($15 + [64]) + [97])
	*($15 + [12]) = ($15 + [64])
	*($15 + [8]) = ($15 + [64])
	CALL $10(($15 + [8]), $9)
	$12 = (uint_64)*($11) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*(($0 + [56])), (int_64)7035924439720001536, $13, $12), ($15 + [64]), [97]
	*($9 + [112]) = $10)
	$7 = ($0 + [64])
	if ( (uint_64)($12 <= *($7)) ){ goto $label$16 }
	*($7) = ((int_64)$12 + (int_64)1)
	
.LABEL $label$16
	*($15 + [8]) = $9
	$12 = (uint_64)*($11) >> (uint_64)(int_64)8
	*($15 + [64]) = $12)
	*($15 + [192]) = $10
	$7 = ($0 + [76])
	$11 = *($7)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [80]))) ){ goto $label$6 }
	*($11 + [8]) = $12
	*($11 + [16]) = $10
	*($15 + [8]) = [0]
	*($11) = $9
	*($7) = ($11 + [24])
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_64)((int_64)*($11 + [64]) + (int_64)43200000000) >= (uint_64)$12) ){ goto $label$17 }
	if ( ((int_64)*($11 + [56]) == (int_64)0) ){ goto $label$4 }
	
.LABEL $label$17
	CALL eosio_assert([0], [352])
	goto $label$3 
	
.LABEL $label$6
	CALL $11(($0 + [72]), ($15 + [8]), ($15 + [64]), ($15 + [192]))
	
.LABEL $label$5
	$11 = *($15 + [8])
	*($15 + [8]) = [0]
	if ( ($11 == 0) ){ goto $label$3 }
	$9 = *($11 + [96])
	if ( ($9 == 0) ){ goto $label$18 }
	*(($11 + [100])) = $9
	CALL $70($9)
	
.LABEL $label$18
	CALL $70($11)
	goto $label$3 
	
.LABEL $label$4
	*($15 + [68]) = $2
	*($15 + [64]) = $4
	*($15 + [72]) = ($15 + [56])
	*($15 + [76]) = ($15 + [48])
	CALL eosio_assert([1], [304])
	CALL $12($5, $11, ($15 + [64]))
	
.LABEL $label$3
	$12 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$4 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$19 }
	$11 = ($10 + [-24])
	$7 = ([0] - $4)
	
.LOOP $label$20:
	if ( ((int_64)(uint_64)*(*($11) + [8]) >> (uint_64)(int_64)8) == (int_64)$12) ){ goto $label$19 }
	$10 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$22 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [108]) == (int_32)$5), [144])
	goto $label$21 
	
.LABEL $label$22
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$21 }
	$10 = CALL $9($5, $11)
	CALL eosio_assert(((int_32)*($10 + [108]) == (int_32)$5), [144])
	
.LABEL $label$21
	$8 = *($0)
	$12 = (int_64)0
	$1 = (int_64)59
	$11 = [384]
	$13 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$28 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$9 = ($9 + [165])
	goto $label$26 
	
.LABEL $label$28
	$3 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$24
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$3 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$23 }
	$12 = (int_64)0
	$1 = (int_64)59
	$11 = [400]
	$14 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$34 }
	$9 = *($11)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$9 = ($9 + [165])
	goto $label$32 
	
.LABEL $label$34
	$3 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$30
	$11 = ($11 + [1])
	$1 = ((int_64)$1 + (int_64)-5)
	$14 = ((int_64)$3 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$29 }
	*((($15 + [8]) + [20])) = *(($2 + [12]))
	*((($15 + [8]) + [16])) = *(($2 + [8]))
	*((($15 + [8]) + [12])) = *(($2 + [4]))
	*($15 + [16]) = *($2)
	*($15 + [8]) = *($15 + [56])
	*($15 + [32]) = *($15 + [48])
	*($15 + [64]) = $8
	*($15 + [40]) = *($10 + [80])
	*($15 + [72]) = $14
	*(($11 = CALL $69([16]))) = $8
	*($11 + [8]) = $13
	*(($9 = ($15 + [96]))) = [0]
	$10 = ($11 + [16])
	*(($15 + [88])) = $10
	*((($15 + [64]) + [20])) = $10
	*($15 + [80]) = $11
	*($15 + [92]) = [0]
	*(($15 + [100])) = [0]
	CALL $13(($15 + [92]), [40])
	$11 = *($9)
	$9 = *($15 + [92])
	*($15 + [196]) = $9
	*($15 + [192]) = $9
	*($15 + [200]) = $11
	*($15 + [176]) = ($15 + [192])
	*($15 + [184]) = ($15 + [8])
	CALL $14(($15 + [184]), ($15 + [176]))
	CALL $15(($15 + [192]), ($15 + [64]))
	$11 = *($15 + [192])
	CALL send_inline($11, (*($15 + [196]) - $11))
	$11 = *($15 + [192])
	if ( ($11 == 0) ){ goto $label$35 }
	*($15 + [196]) = $11
	CALL $70($11)
	
.LABEL $label$35
	$11 = *($15 + [92])
	if ( ($11 == 0) ){ goto $label$36 }
	*(($15 + [96])) = $11
	CALL $70($11)
	
.LABEL $label$36
	$11 = *($15 + [80])
	if ( ($11 == 0) ){ goto $label$37 }
	*(($15 + [84])) = $11
	CALL $70($11)
	
.LABEL $label$37
	*([0] + [4]) = ($15 + [208])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [96])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $69([128])) + [8]) = (int_64)1397703940
	*($4) = (int_64)0
	CALL eosio_assert([1], [208])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [272])
	*($4 + [104]) = [0]
	*($4 + [96 align=4]) = (int_64)0
	*($4 + [108]) = $0
	CALL $19(($8 + [32]), $4)
	*($4 + [112]) = $1
	*($8 + [24]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($8 + [16]) = $7)
	$6 = *($4 + [112])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $11($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [96])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [100])) = $6
	CALL $70($6)
	
.LABEL $label$15
	CALL $70($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [96])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $69([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[31]), [128])
	CALL memcpy($6, $7, [32])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[32]), [128])
	CALL memcpy(($6 + [32]), ($7 + [32]), [8])
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6 + [32])
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $70($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $73($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $70($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $70($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN8treasure10initglobalERK11checksum256 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$5 = ($0 + [16])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *($5), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($2, $3)
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$3()), [16])
	*(($3 = CALL $69([64])) + [48]) = $2
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	*($3) = *($1)
	*($3 + [32]) = (int_64)0
	CALL eosio_assert([1], [80])
	CALL memcpy(($7 + [16]), $3, [32])
	CALL eosio_assert([1], [80])
	$1 = ($3 + [32])
	CALL memcpy((($7 + [16]) + [32]), $1, [8])
	$4 = *($3 + [32])
	$2 = CALL db_store_i64(*($5), (int_64)7235159537265672192, $6, $4, ($7 + [16]), [40])
	*($3 + [52]) = $2
	$5 = ($0 + [24])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($7 + [8]) = $3
	$4 = *($1)
	*($7 + [16]) = $4
	*($7 + [4]) = $2
	$5 = ($0 + [36])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [40]))) ){ goto $label$5 }
	*($1 + [8]) = $4
	*($1 + [16]) = $2
	*($7 + [8]) = [0]
	*($1) = $3
	*($5) = ($1 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $7(($0 + [32]), ($7 + [8]), ($7 + [16]), ($7 + [4]))
	
.LABEL $label$4
	$0 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $70($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $13($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [80])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [80])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $17(CALL $16($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [80])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [80])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [80])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [80])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [80])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[31]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [32])
	$4 = (*($0 + [4]) + [32])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [100])) - *($1 + [96])) >> [5]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [80])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [100]))
	$4 = *(($1 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $18($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $73($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [96])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [100])) = $6
	CALL $70($6)
	
.LABEL $label$11
	CALL $70($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $70($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [464])
	$6 = *($2)
	*($1 + [16]) = *($6)
	*(($1 + [44])) = *(($6 + [28]))
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [36])) = *(($6 + [20]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [28])) = *(($6 + [12]))
	*(($1 + [24])) = *(($6 + [8]))
	*(($1 + [20])) = *(($6 + [4]))
	$7 = *($1 + [8])
	$6 = *($2 + [4])
	*($1) = *($6)
	$3 = *(($6 + [8]))
	*($1 + [56]) = (int_64)0
	*($1 + [8]) = $3
	*($1 + [64]) = CALL current_time()
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)1)
	*($1 + [88]) = *(*($2 + [8]))
	*($1 + [48]) = *(*($2 + [12]))
	*(($6 = ($1 + [100]))) = *($1 + [96])
	$3 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [528])
	$4 = *($1 + [96])
	$2 = *($6)
	$5 = ($2 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = [96]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = (($5 & [-32]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$3
	*($8 + [4]) = $2
	*($8) = $2
	*($8 + [8]) = ($2 + $6)
	CALL $10($8, $1)
	CALL db_update_i64(*($1 + [112]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $69($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $73($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $70($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $40($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $13($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $41($4, $1)
	CALL $43(CALL $42(CALL $42($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [72]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), ($0 + [32]))
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $73($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $69([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $13($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $34(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $70($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $70($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $70($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [64]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [72]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [464])
	*($1 + [72]) = (int_64)3
	$7 = *($1 + [8])
	CALL eosio_assert([1], [528])
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = *($1 + [96])
	$3 = *(($1 + [100]))
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = [96]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$6 = (($5 & [-32]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $10($9, $1)
	CALL db_update_i64(*($1 + [112]), (int_64)0, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN8treasure4openERK11checksum256S2_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [224])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	$7 = [0]
	$8 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $6($3, $8)
	
.LABEL $label$1
	CALL assert_sha256($1, [32], $7)
	$7 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = ($0 + [48])
	$7 = CALL $9($4, $7)
	$10 = CALL current_time()
	if ( ((int_64)*($7 + [72]) == (int_64)2) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( (uint_64)(((int_64)*($7 + [64]) + (int_64)43200000000) <= $10) ){ goto $label$3 }
	CALL eosio_assert([1], [992])
	$7 = CALL db_next_i64(*($7 + [112]), ($14 + [32]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $9($4, $7)
	$10 = CALL current_time()
	if ( ((int_64)*($7 + [72]) != (int_64)2) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (int_64)(*($7 + [56]) == 0) ){ goto $label$6 }
	*(($8 = (($14 + [160]) + [24]))) = *(($1 + [24]))
	*(($6 = (($14 + [160]) + [16]))) = *(($1 + [16]))
	*($14 + [160]) = *($1)
	*($14 + [168]) = *(($1 + [8]))
	*(($14 + [24])) = *($8)
	*(($14 + [16])) = *($6)
	*($14) = *($14 + [160])
	*($14 + [8]) = *($14 + [168])
	CALL _ZN8treasure5_openERKNS_4GameE11checksum256($0, $7, $14)
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [384]
	$11 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$12 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$6 = ($6 + [165])
	goto $label$10 
	
.LABEL $label$12
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [976]
	$13 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$18 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$13 }
	$12 = *($7 + [8])
	CALL eosio_assert([1], [208])
	$10 = (uint_64)$12 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	
.LABEL $label$19
	CALL eosio_assert($6, [272])
	$10 = CALL current_time()
	*((($14 + [32]) + [16])) = $12
	*(($14 + [92])) = *(($1 + [28]))
	*(($14 + [88])) = *(($1 + [24]))
	*(($14 + [84])) = *(($1 + [20]))
	*(($14 + [80])) = *(($1 + [16]))
	*(($14 + [76])) = *(($1 + [12]))
	*(($14 + [72])) = *(($1 + [8]))
	*((($14 + [32]) + [36])) = *(($1 + [4]))
	*($14 + [40]) = (int_64)0
	*($14 + [56]) = [-1]
	*($14 + [32]) = *($0)
	*($14 + [64]) = *($1)
	*($14 + [96]) = $10
	*($14 + [120]) = $5
	*($14 + [128]) = $13
	*($14 + [104]) = *($7 + [80])
	*(($8 = CALL $69([16]))) = $5
	*($8 + [8]) = $11
	*(($6 = ($14 + [152]))) = [0]
	$1 = ($8 + [16])
	*((($14 + [120]) + [24])) = $1
	*((($14 + [120]) + [20])) = $1
	*($14 + [136]) = $8
	*($14 + [148]) = [0]
	*((($14 + [120]) + [36])) = [0]
	CALL $13((($14 + [120]) + [28]), [76])
	$8 = *($6)
	$6 = *($14 + [148])
	*($14 + [212]) = $6
	*($14 + [208]) = $6
	*($14 + [216]) = $8
	*($14 + [192]) = ($14 + [208])
	*($14 + [200]) = ($14 + [32])
	CALL $32(($14 + [200]), ($14 + [192]))
	CALL $15(($14 + [208]), ($14 + [120]))
	$8 = *($14 + [208])
	CALL send_inline($8, (*($14 + [212]) - $8))
	$8 = *($14 + [208])
	if ( ($8 == 0) ){ goto $label$24 }
	*($14 + [212]) = $8
	CALL $70($8)
	
.LABEL $label$24
	$8 = *($14 + [148])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($14 + [152])) = $8
	CALL $70($8)
	
.LABEL $label$25
	$8 = *($14 + [136])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($14 + [140])) = $8
	CALL $70($8)
	
.LABEL $label$26
	CALL eosio_assert([1], [304])
	CALL $33($4, $7)
	
.LABEL $label$5
	$7 = [0]
	$8 = ($0 + [8])
	$6 = CALL db_lowerbound_i64(*($8), *(($0 + [16])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$27 }
	$7 = CALL $6($3, $6)
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [304])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [416])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$3()), [464])
	*(($7 + [28])) = *(($2 + [28]))
	*(($7 + [24])) = *(($2 + [24]))
	*(($7 + [20])) = *(($2 + [20]))
	*(($7 + [16])) = *(($2 + [16]))
	*(($7 + [12])) = *(($2 + [12]))
	*(($7 + [8])) = *(($2 + [8]))
	*(($7 + [4])) = *(($2 + [4]))
	*($7) = *($2)
	$10 = *($7 + [32])
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [80])
	CALL memcpy(($14 + [32]), $7, [32])
	CALL eosio_assert([1], [80])
	CALL memcpy((($14 + [32]) + [32]), ($7 + [32]), [8])
	CALL db_update_i64(*(($7 + [52])), (int_64)0, ($14 + [32]), [40])
	$7 = ($0 + [24])
	if ( (uint_64)($10 <= *($7)) ){ goto $label$2 }
	*($7) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [224])
}

void .FUNC _ZN8treasure5_openERKNS_4GameE11checksum256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [240])
	*([0] + [4]) = $18
	CALL require_auth(*($0))
	$12 = ($1 + [16])
	$14 = (int_64)0
	$11 = [0]
	$10 = $2
	
.LOOP $label$1:
	$14 = ((int_64)(CASTING int_64)(int_32 ((((int_32)*($10) ^ (int_32)*($12)) & [255]) << ($11 & [56]))) ^ (int_64)$14)
	$10 = ($10 + [1])
	$12 = ($12 + [1])
	$11 = ($11 + [8])
	if ( ((int_32)$11 != (int_32)[256]) ){ goto $label$1 }
	$15 = *($1 + [56])
	$3 = ((uint_64)$14 % (uint_64)$15)
	$10 = *($1 + [96])
	$14 = (CASTING uint_64)(uint_32 (int_32((*(($1 + [100])) - $10) >> [5]) + [-1]))
	$16 = (int_64)0
	
.LOOP $label$3:
	$13 = (uint_64)((int_64)$16 + (int_64)$14) >> (uint_64)(int_64)1
	$4 = (CASTING uint_32)(uint_64 $13)
	$11 = ($10 + ($4) << [5])
	$12 = ($11) + [8])
	if ( ((uint_64)*($11) > (uint_64)$3) ){ goto $label$4 }
	if ( (uint_64)($3 <= *($12)) ){ goto $label$2 }
	
.LABEL $label$4
	if ( ((uint_64)*($12) > (uint_64)$3) ){ goto $label$5 }
	$16 = ((int_64)$13 + (int_64)1)
	if ( ((uint_64)$16 <= (uint_64)$14) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$14 = ((int_64)$13 + (int_64)-1)
	if ( ((uint_64)$16 <= (uint_64)$14) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *(($10 + ($4 << [5])) + [16])
	$16 = *($1)
	$7 = *($1 + [8])
	CALL eosio_assert([1], [208])
	$14 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((uint_64)((int_64)((int_64)$16 * (int_64)$15) * (int_64)98) / (uint_64)(int_64)100)
	$12 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$11 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [272])
	$14 = CALL current_time()
	*(($18 + [172])) = [0]
	*(($18 + [176])) = [0]
	*($18 + [156]) = [0]
	*($18 + [160]) = [0]
	*($18 + [164]) = [0]
	*($18 + [168]) = [0]
	*($18 + [144]) = ((CASTING uint_32)(uint_64 ((uint_64)$14 / (uint_64)(int_64)1000000)) + [60])
	*($18 + [180]) = [0]
	*(($18 + [184])) = [0]
	*(($18 + [188])) = [0]
	*($18 + [192]) = [0]
	*(($18 + [196])) = [0]
	*(($18 + [200])) = [0]
	$4 = ($18 + [180])
	$17 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [384]
	$15 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$16 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$11 = ($11 + [165])
	goto $label$14 
	
.LABEL $label$16
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	*($18 + [88]) = $15
	*($18 + [80]) = $17
	$10 = ($1 + [88])
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1024]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$22 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$11 = ($11 + [165])
	goto $label$20 
	
.LABEL $label$22
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$18
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$17 }
	*($18 + [136]) = $15
	*(($18 + [128])) = [0]
	*($18 + [120]) = (int_64)0
	$12 = CALL strlen([1040])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$26 }
	*($18 + [120]) = ($12 << [1])
	$11 = (($18 + [120]) | [1])
	if ( $12 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$9 = (($12 + [16]) & [-16])
	$11 = CALL $69($9)
	*($18 + [120]) = ($9 | [1])
	*($18 + [128]) = $11
	*($18 + [124]) = $12
	
.LABEL $label$25
	CALL memcpy($11, [1040], $12)
	
.LABEL $label$24
	*(($11 + $12)) = [0]
	*(($18 + [24])) = $7
	*(($9 = ($18 + [36]))) = *($18 + [124])
	*($18 + [8]) = $5
	$12 = (($18 + [120]) + [8])
	*(($18 + [40])) = *($12)
	*($18) = *($0)
	*($18 + [16]) = $6
	*($18 + [32]) = *($18 + [120])
	*($18 + [120]) = [0]
	*($18 + [124]) = [0]
	*($12) = [0]
	$11 = *((($18 + [144]) + [40]))
	if ( ((uint_32)$11 >= (uint_32)*(($18 + [188]))) ){ goto $label$30 }
	*($11 + [16 align=4]) = (int_64)0
	$14 = *($10)
	*($11 + [8]) = *($18 + [136])
	*($11) = $14
	*(($10 = ($11 + [24]))) = [0]
	$12 = CALL $69([16])
	*($11 + [16]) = $12
	$4 = ($12 + [16])
	*($10) = $4
	*(($12 + [8])) = *((($18 + [80]) + [8]))
	*($12) = *($18 + [80])
	*(($11 + [20])) = $4
	*($11 + [28]) = [0]
	*(($11 + [32])) = [0]
	*(($11 + [36])) = [0]
	$12 = *($18 + [32])
	$10 = ( *($9) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($10 + [32])
	$14 = (CASTING uint_64)(uint_32 $10)
	$10 = ($11 + [28])
	
.LOOP $label$31:
	$12 = ($12 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$31 }
	if ( ($12 == 0) ){ goto $label$29 }
	CALL $13($10, $12)
	$10 = *(($11 + [32]))
	$12 = *(($11 + [28]))
	goto $label$28 
	
.LABEL $label$30
	CALL $35($4, ($18 + [80]), $10, ($18 + [136]), $18)
	goto $label$27 
	
.LABEL $label$29
	$10 = [0]
	$12 = [0]
	
.LABEL $label$28
	*($18 + [228]) = $12
	*($18 + [224]) = $12
	*($18 + [232]) = $10
	*($18 + [208]) = ($18 + [224])
	*($18 + [216]) = $18
	CALL $34(($18 + [216]), ($18 + [208]))
	*(($12 = (($18 + [144]) + [40]))) = (*($12) + [40])
	
.LABEL $label$27
	if ( ((*(($18 + [32])) & [1]) == 0) ){ goto $label$32 }
	CALL $70(*(($18 + [40])))
	
.LABEL $label$32
	if ( ((*($18 + [120]) & [1]) == 0) ){ goto $label$33 }
	CALL $70(*(($18 + [128])))
	
.LABEL $label$33
	*(($18 + [164])) = [1]
	$14 = (int_64)0
	*($18 + [8]) = (int_64)0
	*($18) = $5
	$16 = *($0)
	CALL $36(($18 + [80]), ($18 + [144]))
	$12 = *($18 + [80])
	CALL send_deferred($18, $16, $12, (*($18 + [84]) - $12), [0])
	$12 = *($18 + [80])
	if ( ($12 == 0) ){ goto $label$34 }
	*($18 + [84]) = $12
	CALL $70($12)
	
.LABEL $label$34
	$8 = *($0)
	$13 = (int_64)59
	$12 = [384]
	$15 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$40 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$11 = ($11 + [165])
	goto $label$38 
	
.LABEL $label$40
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$36
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$35 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [976]
	$17 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$46 }
	$11 = *($12)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$11 = ($11 + [165])
	goto $label$44 
	
.LABEL $label$46
	$16 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$42
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$17 = ((int_64)$16 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$41 }
	$14 = CALL current_time()
	*(($18 + [16])) = $7
	*(($18 + [60])) = *(($2 + [28]))
	*(($18 + [56])) = *(($2 + [24]))
	*(($18 + [52])) = *(($2 + [20]))
	*(($18 + [48])) = *(($2 + [16]))
	*(($18 + [44])) = *(($2 + [12]))
	*(($18 + [40])) = *(($2 + [8]))
	*(($18 + [36])) = *(($2 + [4]))
	*($18 + [8]) = $6
	*($18) = $5
	*($18 + [24]) = $3
	*($18 + [32]) = *($2)
	*($18 + [64]) = $14
	*($18 + [80]) = $8
	*($18 + [88]) = $17
	*($18 + [72]) = *($1 + [80])
	*(($12 = CALL $69([16]))) = $8
	*($12 + [8]) = $15
	*(($11 = ($18 + [112]))) = [0]
	$10 = ($12 + [16])
	*((($18 + [80]) + [24])) = $10
	*((($18 + [80]) + [20])) = $10
	*($18 + [96]) = $12
	*($18 + [108]) = [0]
	*((($18 + [80]) + [36])) = [0]
	CALL $13((($18 + [80]) + [28]), [80])
	$12 = *($11)
	$11 = *($18 + [108])
	*($18 + [228]) = $11
	*($18 + [224]) = $11
	*($18 + [232]) = $12
	*($18 + [136]) = ($18 + [224])
	*($18 + [120]) = $18
	CALL $37(($18 + [120]), ($18 + [136]))
	CALL $15(($18 + [224]), ($18 + [80]))
	$12 = *($18 + [224])
	CALL send_inline($12, (*($18 + [228]) - $12))
	$12 = *($18 + [224])
	if ( ($12 == 0) ){ goto $label$47 }
	*($18 + [228]) = $12
	CALL $70($12)
	
.LABEL $label$47
	$12 = *($18 + [108])
	if ( ($12 == 0) ){ goto $label$48 }
	*(($18 + [112])) = $12
	CALL $70($12)
	
.LABEL $label$48
	$12 = *($18 + [96])
	if ( ($12 == 0) ){ goto $label$49 }
	*(($18 + [100])) = $12
	CALL $70($12)
	
.LABEL $label$49
	$14 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$1 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$50 }
	$12 = ($10 + [-24])
	$4 = ([0] - $1)
	
.LOOP $label$51:
	if ( ((int_64)(uint_64)*(*($12) + [8]) >> (uint_64)(int_64)8) == (int_64)$14) ){ goto $label$50 }
	$10 = $12
	$11 = ($12 + [-24])
	$12 = $11
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$51 }
	
.LABEL $label$50
	$11 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$53 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [108]) == (int_32)$11), [144])
	goto $label$52 
	
.LABEL $label$53
	$12 = [0]
	$10 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, $14)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$52 }
	$12 = CALL $9($11, $10)
	CALL eosio_assert(((int_32)*($12 + [108]) == (int_32)$11), [144])
	
.LABEL $label$52
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [304])
	CALL $38($11, $12)
	CALL $39(($18 + [144]))
	*([0] + [4]) = ($18 + [240])
	return (unreachable)
	
.LABEL $label$23
	CALL $71(($18 + [120]))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $59($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $72($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $69($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $72($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $70($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $71($7)
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [592])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $13($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [128])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $62(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($0 + [32]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($0 + [32]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [96])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = ($7 + [24]))) = (int_64)0
	*(($4 = ($7 + [16]))) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [128])
	CALL memcpy($7, $5, [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [32]) + [24]))) = *($3)
	*(($5 = (($7 + [32]) + [16]))) = *($4)
	*($7 + [40]) = *($7 + [8])
	*($7 + [32]) = *($7)
	*((($7 + [64]) + [24])) = *($1)
	*((($7 + [64]) + [16])) = *($5)
	*($7 + [72]) = *($7 + [40])
	*($7 + [64]) = *($7 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [64])), (int_32 $6))
	*([0] + [4]) = ($7 + [96])
	return [1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [464])
	*($1 + [72]) = (int_64)3
	$7 = *($1 + [8])
	CALL eosio_assert([1], [528])
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = *($1 + [96])
	$3 = *(($1 + [100]))
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = [96]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$6 = (($5 & [-32]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $10($9, $1)
	CALL db_update_i64(*($1 + [112]), (int_64)0, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$13 = (*([0] + [4]) - [144])
	$15 = $13
	*([0] + [4]) = $13
	$2 = *($1 + [4])
	$14 = *($1)
	$1 = [0]
	$11 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$11 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$11 = ($13 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$2
	CALL read_action_data($11, $3)
	
.LABEL $label$1
	*(($15 + [64])) = (int_64)1397703940
	*($15 + [32]) = (int_64)0
	*($15 + [24]) = (int_64)0
	*($15 + [40]) = (int_64)0
	*($15 + [48]) = (int_64)0
	*($15 + [56]) = (int_64)0
	CALL eosio_assert([1], [208])
	$12 = (int_64)5459781
	
.LOOP $label$5:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$13 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($13, [272])
	*($15 + [80]) = (int_64)0
	*($15 + [72]) = (int_64)0
	*($15 + [88]) = (int_64)0
	*($15 + [132]) = $11
	*($15 + [128]) = $11
	*($15 + [136]) = ($11 + $3)
	*($15 + [96]) = ($15 + [128])
	*($15 + [112]) = ($15 + [24])
	CALL $61(($15 + [112]), ($15 + [96]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($11)
	
.LABEL $label$8
	$12 = *((($15 + [24]) + [8]))
	*(($15 + [108])) = *(($15 + [68]))
	*(($1 = (($15 + [96]) + [8]))) = *(($15 + [64]))
	$4 = *($15 + [24])
	*($15 + [96]) = *($15 + [56])
	*($15 + [100]) = *(($15 + [60]))
	$6 = *(($15 + [48]))
	$5 = *(($15 + [40]))
	$9 = *(($15 + [88]))
	$8 = *(($15 + [80]))
	$7 = *(($15 + [72]))
	*((($15 + [112]) + [8])) = *($1)
	*($15 + [112]) = *($15 + [96])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$14 = *((*($1) + $14))
	
.LABEL $label$9
	$10 = *((($15 + [112]) + [8]))
	*((($15 + [128]) + [8])) = $10
	*((($15 + [8]) + [8])) = $10
	$10 = *($15 + [112])
	*($15 + [128]) = $10
	*($15 + [8]) = $10
	CALL void $1((int_32 $4), (int_64 $12), (int_64 $5), (int_64 $6), (int_64 ($15 + [8])), (int_32 $7), (int_64 $8), (int_64 $9), (int_64 $14))
	*([0] + [4]) = ($15 + [144])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [40])) = (int_64)1397703940
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	CALL eosio_assert([1], [208])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [272])
	*($11 + [56]) = (int_64)0
	*($11 + [48]) = (int_64)0
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $60(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [40]))
	$8 = *($11 + [24])
	*($11 + [64]) = *($11 + [32])
	$5 = *(($11 + [56]))
	$4 = *(($11 + [48]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $8), (int_64 ($11 + [8])), (int_32 $4), (int_64 $5), (int_64 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = (*([0] + [4]) - [192])
	$8 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($4 = ($8 + [24]))) = (int_64)0
	*(($5 = ($8 + [16]))) = (int_64)0
	*(($8 + [56])) = (int_64)0
	*(($8 + [48])) = (int_64)0
	*(($8 + [40])) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [128])
	CALL memcpy($8, $6, [32])
	CALL eosio_assert(((int_32)($1 & [-32]) != (int_32)[32]), [128])
	$3 = ($8 + [32])
	CALL memcpy($3, ($6 + [32]), [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*(($1 = (($8 + [96]) + [24]))) = *($4)
	*(($6 = (($8 + [96]) + [16]))) = *($5)
	*($8 + [104]) = *($8 + [8])
	*($8 + [96]) = *($8)
	*(($4 = (($8 + [64]) + [24]))) = *(($3 + [24]))
	*(($5 = (($8 + [64]) + [16]))) = *(($3 + [16]))
	*($8 + [72]) = *(($3 + [8]))
	*($8 + [64]) = *($3)
	*((($8 + [160]) + [24])) = *($4)
	*((($8 + [160]) + [16])) = *($5)
	*($8 + [168]) = *($8 + [72])
	*($8 + [160]) = *($8 + [64])
	*((($8 + [128]) + [24])) = *($1)
	*((($8 + [128]) + [16])) = *($6)
	*($8 + [136]) = *($8 + [104])
	*($8 + [128]) = *($8 + [96])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 ($8 + [128])), (int_32 ($8 + [160])), (int_32 $7))
	*([0] + [4]) = ($8 + [192])
	return [1]
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $56($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $57(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $58(*($1), *($0 + [12]))
}