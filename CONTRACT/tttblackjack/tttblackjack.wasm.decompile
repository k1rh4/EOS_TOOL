(data (i32.const 4) "\f0|\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 208) "invalid symbol name\00")
(data (i32.const 240) "read\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "cannot pass end iterator to modify\00")
(data (i32.const 368) "object passed to modify is not in multi_index\00")
(data (i32.const 416) "cannot modify objects in table of another contract\00")
(data (i32.const 480) "updater cannot change primary key when modifying an object\00")
(data (i32.const 544) "write\00")
(data (i32.const 560) "error reading iterator\00")
(data (i32.const 592) "active\00")
(data (i32.const 608) "egtdividends\00")
(data (i32.const 624) "signin\00")
(data (i32.const 640) "blackjackrev\00")
(data (i32.const 656) "banker 0.1 init error\00")
(data (i32.const 688) "banker 1 init error\00")
(data (i32.const 720) "banker 5 init error\00")
(data (i32.const 752) "0.1\00")
(data (i32.const 768) "1\00")
(data (i32.const 784) "5\00")
(data (i32.const 800) "get\00")
(data (i32.const 816) "\n symbol: \00")
(data (i32.const 832) "\n amount: \00")
(data (i32.const 848) "only core token allowed\00")
(data (i32.const 880) "Invalid token transfer\00")
(data (i32.const 912) "Quantity must be positive\00")
(data (i32.const 944) "\e5\a4\87\e6\b3\a8\e4\bf\a1\e6\81\af\e4\b8\8d\e8\83\bd\e8\b6\85\e8\bf\87256\e4\bd\8d\00")
(data (i32.const 976) "\n memo:\00")
(data (i32.const 1008) "withdraw\00")
(data (i32.const 1024) "\n -----withdraw:\00")
(data (i32.const 1056) "|||||\00")
(data (i32.const 1072) "start   \00")
(data (i32.const 1088) "\n -----action:\00")
(data (i32.const 1104) "|\00")
(data (i32.const 1120) "\n start memoVct.size():\00")
(data (i32.const 1152) "start memo error\00")
(data (i32.const 1184) "2\00")
(data (i32.const 1200) "result  \00")
(data (i32.const 1216) "\n -----result:\00")
(data (i32.const 1232) "award   \00")
(data (i32.const 1248) "\n -----award:\00")
(data (i32.const 1264) "refund  \00")
(data (i32.const 1280) "\n -----refund:\00")
(data (i32.const 1296) "\n ----->=8 else:\00")
(data (i32.const 1328) "\n -----<8 else:\00")
(data (i32.const 1344) "\n deposit--------\00")
(data (i32.const 1376) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1440) "new player deposit must more than 1 EOS\00")
(data (i32.const 1488) "cannot create objects in table of another contract\00")
(data (i32.const 1552) "attempt to add asset with different symbol\00")
(data (i32.const 1600) "addition underflow\00")
(data (i32.const 1632) "addition overflow\00")
(data (i32.const 1664) "\n refund--------\00")
(data (i32.const 1696) "error refund msg\00")
(data (i32.const 1728) "0.5\00")
(data (i32.const 1744) "10\00")
(data (i32.const 1760) "20\00")
(data (i32.const 1776) "50\00")
(data (i32.const 1792) "error refund type\00")
(data (i32.const 1824) "10000\00")
(data (i32.const 1840) "error refund betAmount\00")
(data (i32.const 1872) "5000\00")
(data (i32.const 1888) "1000\00")
(data (i32.const 1904) "50000\00")
(data (i32.const 1920) "100000\00")
(data (i32.const 1936) "200000\00")
(data (i32.const 1952) "500000\00")
(data (i32.const 1968) "not found account\00")
(data (i32.const 2000) "attempt to subtract asset with different symbol\00")
(data (i32.const 2048) "subtraction underflow\00")
(data (i32.const 2080) "subtraction overflow\00")
(data (i32.const 2112) "refundto|Game Refund \00")
(data (i32.const 2144) " EOS | playerId:\00")
(data (i32.const 2176) "\n ******** refund transfer memo:\00")
(data (i32.const 2224) "\n award--------\00")
(data (i32.const 2240) "error award msg\00")
(data (i32.const 2256) "error award type\00")
(data (i32.const 2288) ",\00")
(data (i32.const 2304) "\n -------total_lottery_bonus_amount:\00")
(data (i32.const 2352) "\n -------lotteryBonusAmount:\00")
(data (i32.const 2384) "\n -------lotteryDivFeeAmount:\00")
(data (i32.const 2416) "\n -------accountLotteryBonus:\00")
(data (i32.const 2448) "awardto |\00")
(data (i32.const 2464) "|Congratulations You Win The BlackJack Lottery! Bonus:\00")
(data (i32.const 2528) " EOS\00")
(data (i32.const 2544) "\n ******** award transfer memo:\00")
(data (i32.const 2576) "\n result--------\00")
(data (i32.const 2608) "\n resultVct.size():\00")
(data (i32.const 2640) "error result msg\00")
(data (i32.const 2672) "\n===============wv.size():\00")
(data (i32.const 2704) "\n===============wv[0]:\00")
(data (i32.const 2736) "resultto|\00")
(data (i32.const 2752) "|Sorry You Lose Game!Winners:\00")
(data (i32.const 2784) ",Losers:\00")
(data (i32.const 2800) "\n loser str :\00")
(data (i32.const 2816) "|---------------length:\00")
(data (i32.const 2848) "error result msg winner\00")
(data (i32.const 2880) "(\00")
(data (i32.const 2896) "error result msg loser pos\00")
(data (i32.const 2928) "\n------loser surrenderFlag:\00")
(data (i32.const 2960) "\n------loser account:\00")
(data (i32.const 2992) "\n------loser card:\00")
(data (i32.const 3024) "|You Surrender Game!Winners:\00")
(data (i32.const 3056) "addDivPool\00")
(data (i32.const 3072) "\n winner str :\00")
(data (i32.const 3088) "error result msg winner pos\00")
(data (i32.const 3120) "\n-----------winner card:\00")
(data (i32.const 3152) "\n winner account:\00")
(data (i32.const 3184) "\n winner account acc:\00")
(data (i32.const 3216) "\n from:\00")
(data (i32.const 3232) "\n to:\00")
(data (i32.const 3248) "\n to acc:\00")
(data (i32.const 3264) "|Congratulations You Win Game! Winner Num:\00")
(data (i32.const 3312) ",Winners:\00")
(data (i32.const 3328) "\e5\8f\aa\e6\94\af\e6\8c\810.1\e3\80\811\e5\92\8c5\e7\9a\84\e7\ad\b9\e7\a0\81\00")
(data (i32.const 3360) "isbanker must 1 or 2\00")
(data (i32.const 3392) "type must be 1\00")
(data (i32.const 3408) "type must be 0.1\00")
(data (i32.const 3440) "type must be 0.5\00")
(data (i32.const 3472) "type must be 5\00")
(data (i32.const 3488) "type must be 10\00")
(data (i32.const 3504) "type must be 20\00")
(data (i32.const 3520) "type must be 50\00")
(data (i32.const 3536) "\n --------pt_itr->time:\00")
(data (i32.const 3568) "\n --------current_time():\00")
(data (i32.const 3600) "\n ---------+++++\00")
(data (i32.const 3632) "\n --------assert:\00")
(data (i32.const 3664) "true\00")
(data (i32.const 3680) "false\00")
(data (i32.const 3696) "\e9\87\8d\e5\a4\8d\e6\8f\90\e4\ba\a4\e4\ba\a4\e6\98\93\00")
(data (i32.const 3728) "\n acc_itr.balance : \00")
(data (i32.const 3760) "\e5\bd\93\e5\89\8d\e6\b2\a1\e6\9c\89\e4\ba\ba\e5\9d\90\e5\ba\84\ef\bc\8c\e5\bf\ab\e5\8e\bb\e5\9d\90\e5\ba\84\e5\90\a7\00")
(data (i32.const 3808) "\n \e5\85\85\e5\80\bc\e6\a8\a1\e5\bc\8f----balance:\00")
(data (i32.const 3840) "account must be create\00")
(data (i32.const 3872) "balance is not enough\00")
(data (i32.const 3904) "\n start \e9\9d\9e\e5\85\85\e5\80\bc\e6\a8\a1\e5\bc\8f---\e6\b2\a1\e6\9c\89\e8\b4\a6\e5\8f\b7-\e5\88\9b\e5\bb\ba\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 3968) "\n start \e9\9d\9e\e5\85\85\e5\80\bc\e6\a8\a1\e5\bc\8f--\e5\88\9b\e5\bb\ba\e8\b4\a6\e5\8f\b7\e6\88\90\e5\8a\9f----total_cost:\00")
(data (i32.const 4032) "\n start \e9\9d\9e\e5\85\85\e5\80\bc\e6\a8\a1\e5\bc\8f---\e5\b7\b2\e7\bb\8f\e6\9c\89\e8\b4\a6\e6\88\b7-\e7\b4\af\e5\8a\a0\e6\b8\b8\e6\88\8f\e9\87\91\e9\a2\9d total_cost:\00")
(data (i32.const 4112) ".\00")
(data (i32.const 4128) " \00")
(data (i32.const 4144) "\n quantity.symbol : \00")
(data (i32.const 4176) "\n quantity.amount : \00")
(data (i32.const 4208) "only EOS token allowed\00")
(data (i32.const 4240) "blackjack withdraw\00")
(data (i32.const 4272) "cannot pass end iterator to erase\00")
(data (i32.const 4320) "cannot increment end iterator\00")
(data (i32.const 4352) "object passed to erase is not in multi_index\00")
(data (i32.const 4400) "cannot erase objects in table of another contract\00")
(data (i32.const 4464) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12928) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 13024) "%u\00")
(data (i32.const 13040) "%lld\00")
(data (i32.const 13056) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13520) "0123456789ABCDEF")
(data (i32.const 13536) "-+   0X0x\00")
(data (i32.const 13552) "(null)\00")
(data (i32.const 13568) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13600) "inf\00")
(data (i32.const 13616) "INF\00")
(data (i32.const 13632) "nan\00")
(data (i32.const 13648) "NAN\00")
(data (i32.const 13664) ".\00")
(data (i32.const 13680) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13776) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "db_find_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$25 (param i64)))
(import "env" "prints" (func $fimport$26 (param i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "printui" (func $fimport$28 (param i64)))
(import "env" "read_action_data" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$30 (param i64)))
(import "env" "require_auth2" (func $fimport$31 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$32 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_" (func $5))
(export "apply" (func $7))
(export "_ZN12egtblackjack8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $9))
(export "_ZN12egtblackjack11bankerstandEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $11))
(export "_ZN12egtblackjack9bankersubEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $13))
(export "_ZN12egtblackjack11upbankernumEyyy" (func $14))
(export "_ZN12egtblackjack6signupEy" (func $16))
(export "_ZN12egtblackjack5claimEy" (func $18))
(export "_ZN12egtblackjack6signinEy" (func $19))
(export "_ZN12egtblackjack5initgEN5eosio5assetE" (func $20))
(export "_ZN12egtblackjack8withdrawEyRKN5eosio5assetE" (func $42))
(export "_ZN12egtblackjack5startEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_" (func $43))
(export "_ZN12egtblackjack6resultENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $44))
(export "_ZN12egtblackjack5awardENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $45))
(export "_ZN12egtblackjack6refundENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $46))
(export "_ZN12egtblackjack7depositEyRKN5eosio5assetE" (func $47))
(export "_ZN12egtblackjack13processWinnerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_N5eosio5assetES6_S6_S6_S6_S8_" (func $67))
(export "_ZN12egtblackjack2dgEv" (func $78))
(export "malloc" (func $80))
(export "free" (func $83))
(export "_ZNSt3__19to_stringEj" (func $94))
(export "_ZNSt3__19to_stringEx" (func $97))
(export "snprintf" (func $101))
(export "vsnprintf" (func $102))
(export "__errno_location" (func $104))
(export "vfprintf" (func $105))
(export "__lockfile" (func $107))
(export "__unlockfile" (func $108))
(export "__fwritex" (func $109))
(export "strerror" (func $111))
(export "strnlen" (func $112))
(export "wctomb" (func $113))
(export "__signbitl" (func $114))
(export "__fpclassifyl" (func $115))
(export "frexpl" (func $116))
(export "wcrtomb" (func $117))
(export "memchr" (func $118))
(export "__lctrans" (func $119))
(export "__lctrans_impl" (func $120))
(export "__mo_lookup" (func $121))
(export "strcmp" (func $122))
(export "__towrite" (func $123))
(export "atoll" (func $124))
(export "memcmp" (func $125))
(export "strlen" (func $126))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $127 $16 $13 $14 $20 $19 $11 $9 $18 $103)



void .FUNC $98 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $84($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZNSt3__19to_stringEj (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13024], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $95(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $95(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $96($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $84($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $85($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZNSt3__19to_stringEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13040], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $95(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $95(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $88($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	return CALL $90($0, $1, CALL $126($1))
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $84($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $90($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [800])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $28($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [240])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $49 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [208])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $84([64])
	$4 = CALL $49($6)
	*($6 + [48]) = $0
	CALL $53(($8 + [32]), $4)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $51(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN12egtblackjack5startEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	CALL require_auth($1)
	$14 = [1]
	$6 = *($3)
	$15 = CALL strlen([768])
	if ( ((int_32)$15 != (int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	if ( (CALL $92($3, [0], [-1], [768], $15) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$14 = *($3)
	$6 = ($3 + [4])
	$15 = CALL strlen([752])
	if ( ((int_32)$15 != (int_32)( *($6) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$4 }
	if ( (CALL $92($3, [0], [-1], [752], $15) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$14 = [0]
	$6 = *($3)
	$15 = CALL strlen([784])
	if ( ((int_32)$15 != (int_32)( *($6) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$1 }
	$14 = (CALL $92($3, [0], [-1], [784], $15) == 0)
	goto $label$1 
	
.LABEL $label$3
	$14 = [1]
	
.LABEL $label$1
	CALL eosio_assert($14, [3328])
	$14 = [1]
	$6 = *($5)
	$15 = CALL strlen([768])
	if ( ((int_32)$15 != (int_32)( *($5 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$6 }
	if ( (CALL $92($5, [0], [-1], [768], $15) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$14 = *($5)
	$6 = ($14 & [1])
	$15 = uint_32($14 >> [1])
	$14 = [0]
	$8 = CALL strlen([1184])
	if ( ((int_32)$8 != (int_32)( *(($5 + [4])) ? $15 : $6 )) ){ goto $label$5 }
	$14 = (CALL $92($5, [0], [-1], [1184], $8) == 0)
	
.LABEL $label$5
	CALL eosio_assert($14, [3360])
	$16 = *($0 + [8])
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$16 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [208])
	$11 = *($2 + [8])
	CALL eosio_assert(((int_64)$11 == (int_64)$16), [1376])
	$16 = *($2)
	if ( ((int_64)$16 != (int_64)10000) ){ goto $label$13 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([768])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	$14 = (CALL $92($3, [0], [-1], [768], $2) == 0)
	
.LABEL $label$14
	CALL eosio_assert($14, [3392])
	goto $label$12 
	
.LABEL $label$13
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	if ( ((int_64)$16 != (int_64)1000) ){ goto $label$20 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([752])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$21 }
	$14 = (CALL $92($3, [0], [-1], [752], $2) == 0)
	
.LABEL $label$21
	CALL eosio_assert($14, [3408])
	goto $label$12 
	
.LABEL $label$20
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$6 = [0]
	
.LABEL $label$22
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	if ( ((int_64)$16 != (int_64)5000) ){ goto $label$27 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([1728])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$28 }
	$14 = (CALL $92($3, [0], [-1], [1728], $2) == 0)
	
.LABEL $label$28
	CALL eosio_assert($14, [3440])
	goto $label$12 
	
.LABEL $label$27
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	
.LABEL $label$29
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	if ( ((int_64)$16 != (int_64)50000) ){ goto $label$34 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([784])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$35 }
	$14 = (CALL $92($3, [0], [-1], [784], $2) == 0)
	
.LABEL $label$35
	CALL eosio_assert($14, [3472])
	goto $label$12 
	
.LABEL $label$34
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	
.LABEL $label$36
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	if ( ((int_64)$16 != (int_64)100000) ){ goto $label$41 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([1744])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$42 }
	$14 = (CALL $92($3, [0], [-1], [1744], $2) == 0)
	
.LABEL $label$42
	CALL eosio_assert($14, [3488])
	goto $label$12 
	
.LABEL $label$41
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$45:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	
.LOOP $label$47:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$47 }
	
.LABEL $label$46
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$6 = [0]
	
.LABEL $label$43
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	if ( ((int_64)$16 != (int_64)200000) ){ goto $label$48 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([1760])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$49 }
	$14 = (CALL $92($3, [0], [-1], [1760], $2) == 0)
	
.LABEL $label$49
	CALL eosio_assert($14, [3504])
	goto $label$12 
	
.LABEL $label$48
	$10 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	
.LOOP $label$54:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$54 }
	
.LABEL $label$53
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$6 = [0]
	
.LABEL $label$50
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)$11 == (int_64)$10), [1376])
	$15 = [1]
	if ( ((int_64)$16 != (int_64)500000) ){ goto $label$12 }
	$15 = [0]
	$14 = [0]
	$6 = *($3)
	$2 = CALL strlen([1776])
	if ( ((int_32)$2 != (int_32)( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$55 }
	$14 = (CALL $92($3, [0], [-1], [1776], $2) == 0)
	
.LABEL $label$55
	CALL eosio_assert($14, [3520])
	
.LABEL $label$12
	$14 = *($3)
	$6 = ($3 + [4])
	$2 = CALL strlen([752])
	if ( ((int_32)$2 != (int_32)( *($6) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$58 }
	if ( (CALL $92($3, [0], [-1], [752], $2) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$13 = (int_64)1
	$14 = *($3)
	$2 = CALL strlen([784])
	if ( ((int_32)$2 != (int_32)( *($6) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$56 }
	$13 = ( (int_64)1 ? (int_64)5 : CALL $92($3, [0], [-1], [784], $2) )
	goto $label$56 
	
.LABEL $label$57
	$13 = (int_64)0
	
.LABEL $label$56
	*((($17 + [72]) + [32])) = [0]
	*($17 + [88]) = (int_64)-1
	*($17 + [96]) = (int_64)0
	$16 = *($0)
	*($17 + [72]) = $16
	*($17 + [80]) = $1
	$14 = CALL db_find_i64($16, $1, (int_64)-6030904041117057024, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$60 }
	$14 = CALL $69(($17 + [72]), $14)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)($17 + [72])), [256])
	if ( ((int_64)*($14) != (int_64)$13) ){ goto $label$60 }
	CALL prints([3536])
	CALL printui(*($14 + [8]))
	$13 = CALL current_time()
	CALL prints([3568])
	CALL printui($13)
	$13 = *($14 + [8])
	CALL prints([3600])
	CALL printui(((int_64)$13 + (int_64)10000000))
	$13 = *($14 + [8])
	$16 = CALL current_time()
	CALL prints([3632])
	CALL prints(( [3664] ? [3680] : ((uint_64)((int_64)$13 + (int_64)10000000) > (uint_64)$16) ))
	CALL eosio_assert((uint_64)(((int_64)*($14 + [8]) + (int_64)10000000) <= CALL $fimport$14()), [3696])
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)($17 + [72])), [368])
	CALL eosio_assert(((int_64)*($17 + [72]) == (int_64)CALL $fimport$13()), [416])
	$13 = *($14)
	*($14 + [8]) = CALL current_time()
	CALL eosio_assert(((int_64)$13 == (int_64)*($14)), [480])
	CALL eosio_assert([1], [544])
	CALL memcpy(($17 + [128]), $14, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($17 + [128]) | [8]), ($14 + [8]), [8])
	CALL db_update_i64(*($14 + [20]), (int_64)0, ($17 + [128]), [16])
	$14 = (($17 + [72]) + [16])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$59 }
	*($14) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	goto $label$59 
	
.LABEL $label$60
	$16 = *($0)
	CALL eosio_assert(((int_64)*($17 + [72]) == (int_64)CALL $fimport$13()), [1488])
	*(($14 = CALL $84([32])) + [16]) = ($17 + [72])
	*($14) = $13
	*($14 + [8]) = CALL current_time()
	CALL eosio_assert([1], [544])
	CALL memcpy(($17 + [128]), $14, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($17 + [128]) | [8]), ($14 + [8]), [8])
	$13 = *($14)
	$2 = CALL db_store_i64(*((($17 + [72]) + [8])), (int_64)-6030904041117057024, $16, $13, ($17 + [128]), [16])
	*($14 + [20]) = $2
	$6 = (($17 + [72]) + [16])
	if ( (uint_64)($13 <= *($6)) ){ goto $label$61 }
	*($6) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$61
	*($17 + [32]) = $14
	$13 = *($14)
	*($17 + [128]) = $13
	*($17 + [16]) = $2
	$8 = ($17 + [100])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($17 + [104]))) ){ goto $label$63 }
	*($6 + [8]) = $13
	*($6 + [16]) = $2
	*($17 + [32]) = [0]
	*($6) = $14
	*($8) = ($6 + [24])
	goto $label$62 
	
.LABEL $label$63
	CALL $70(($17 + [96]), ($17 + [32]), ($17 + [128]), ($17 + [16]))
	
.LABEL $label$62
	$14 = *($17 + [32])
	*($17 + [32]) = [0]
	if ( ($14 == 0) ){ goto $label$59 }
	CALL $85($14)
	
.LABEL $label$59
	$6 = [0]
	*(($17 + [64])) = [0]
	*($17 + [48]) = (int_64)-1
	*($17 + [56]) = (int_64)0
	$13 = *($0)
	*($17 + [32]) = $13
	*($17 + [40]) = $1
	$14 = CALL db_find_i64($13, $1, (int_64)3607749779137757184, (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$14) < (int_32)[0]) ){ goto $label$64 }
	$6 = CALL $48(($17 + [32]), $14)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($17 + [32])), [256])
	
.LABEL $label$64
	CALL prints([3728])
	CALL $71($6)
	$14 = *($3)
	$2 = ($3 + [4])
	$8 = CALL strlen([752])
	if ( ((int_32)$8 != (int_32)( *($2) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$78 }
	if ( (CALL $92($3, [0], [-1], [752], $8) == 0) ){ goto $label$77 }
	
.LABEL $label$78
	$14 = *($3)
	$8 = CALL strlen([768])
	if ( ((int_32)$8 != (int_32)( *($2) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$79 }
	if ( (CALL $92($3, [0], [-1], [768], $8) == 0) ){ goto $label$76 }
	
.LABEL $label$79
	$14 = *($3)
	$2 = ($3 + [4])
	$8 = CALL strlen([784])
	if ( ((int_32)$8 != (int_32)( *($2) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$80 }
	if ( (CALL $92($3, [0], [-1], [784], $8) == 0) ){ goto $label$75 }
	
.LABEL $label$80
	$14 = *($3)
	$5 = CALL strlen([1728])
	if ( ((int_32)$5 != (int_32)( *($2) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$81 }
	if ( (CALL $92($3, [0], [-1], [1728], $5) == 0) ){ goto $label$74 }
	
.LABEL $label$81
	$14 = *($3)
	$5 = ($3 + [4])
	$2 = CALL strlen([1744])
	if ( ((int_32)$2 != (int_32)( *($5) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$82 }
	if ( (CALL $92($3, [0], [-1], [1744], $2) == 0) ){ goto $label$73 }
	
.LABEL $label$82
	$14 = *($3)
	$2 = CALL strlen([1760])
	if ( ((int_32)$2 != (int_32)( *($5) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$83 }
	if ( (CALL $92($3, [0], [-1], [1760], $2) == 0) ){ goto $label$70 }
	
.LABEL $label$83
	$16 = (int_64)10000
	$14 = *($3)
	$5 = CALL strlen([1776])
	if ( ((int_32)$5 != (int_32)( *(($3 + [4])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$65 }
	$16 = ( (int_64)10000 ? (int_64)500000 : CALL $92($3, [0], [-1], [1776], $5) )
	goto $label$65 
	
.LABEL $label$77
	$7 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$84 }
	$14 = ($2 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$85:
	if ( (int_64)(*(*($14)) == 0) ){ goto $label$84 }
	$2 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $8) != (int_32)[-24]) ){ goto $label$85 }
	
.LABEL $label$84
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$72 }
	$14 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	goto $label$71 
	
.LABEL $label$76
	$7 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$86 }
	$14 = ($2 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$87:
	if ( ((int_64)*(*($14)) == (int_64)1) ){ goto $label$86 }
	$2 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $8) != (int_32)[-24]) ){ goto $label$87 }
	
.LABEL $label$86
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$69 }
	$14 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	goto $label$68 
	
.LABEL $label$75
	$7 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$88 }
	$14 = ($2 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$89:
	if ( ((int_64)*(*($14)) == (int_64)5) ){ goto $label$88 }
	$2 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $8) != (int_32)[-24]) ){ goto $label$89 }
	
.LABEL $label$88
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$67 }
	$14 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	goto $label$66 
	
.LABEL $label$74
	$16 = (int_64)5000
	goto $label$65 
	
.LABEL $label$73
	$16 = (int_64)100000
	goto $label$65 
	
.LABEL $label$72
	$14 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$71 }
	$14 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	
.LABEL $label$71
	$7 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($7, [656])
	$16 = (int_64)1000
	$2 = *($5)
	$8 = CALL strlen([1184])
	if ( ((int_32)$8 != (int_32)( *(($5 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$65 }
	if ( CALL $92($5, [0], [-1], [1184], $8) ){ goto $label$65 }
	CALL eosio_assert(((int_64)*($14 + [8]) != (int_64)0), [3760])
	CALL eosio_assert($7, [320])
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($14 + [8]) = ((int_64)*($14 + [8]) + (int_64)-1)
	$13 = *($14)
	CALL eosio_assert([1], [480])
	*($17 + [24]) = (($17 + [128]) + [64])
	*($17 + [20]) = ($17 + [128])
	*($17 + [16]) = ($17 + [128])
	CALL $33(($17 + [16]), $14)
	CALL db_update_i64(*($14 + [68]), (int_64)0, ($17 + [128]), [64])
	$14 = ($0 + [72])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$65 }
	*($14) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	goto $label$65 
	
.LABEL $label$70
	$16 = (int_64)200000
	goto $label$65 
	
.LABEL $label$69
	$14 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$68 }
	$14 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	
.LABEL $label$68
	$7 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($7, [688])
	$16 = (int_64)10000
	$2 = *($5)
	$8 = CALL strlen([1184])
	if ( ((int_32)$8 != (int_32)( *(($5 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$65 }
	if ( CALL $92($5, [0], [-1], [1184], $8) ){ goto $label$65 }
	CALL eosio_assert(((int_64)*($14 + [8]) != (int_64)0), [3760])
	CALL eosio_assert($7, [320])
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($14 + [8]) = ((int_64)*($14 + [8]) + (int_64)-1)
	$13 = *($14)
	CALL eosio_assert([1], [480])
	*($17 + [24]) = (($17 + [128]) + [64])
	*($17 + [20]) = ($17 + [128])
	*($17 + [16]) = ($17 + [128])
	CALL $33(($17 + [16]), $14)
	CALL db_update_i64(*($14 + [68]), (int_64)0, ($17 + [128]), [64])
	$14 = ($0 + [72])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$65 }
	*($14) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	goto $label$65 
	
.LABEL $label$67
	$14 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$66 }
	$14 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [256])
	
.LABEL $label$66
	$7 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($7, [720])
	$16 = (int_64)50000
	$2 = *($5)
	$8 = CALL strlen([1184])
	if ( ((int_32)$8 != (int_32)( *(($5 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$65 }
	if ( CALL $92($5, [0], [-1], [1184], $8) ){ goto $label$65 }
	CALL eosio_assert(((int_64)*($14 + [8]) != (int_64)0), [3760])
	CALL eosio_assert($7, [320])
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($14 + [8]) = ((int_64)*($14 + [8]) + (int_64)-1)
	$13 = *($14)
	CALL eosio_assert([1], [480])
	*($17 + [24]) = (($17 + [128]) + [64])
	*($17 + [20]) = ($17 + [128])
	*($17 + [16]) = ($17 + [128])
	CALL $33(($17 + [16]), $14)
	CALL db_update_i64(*($14 + [68]), (int_64)0, ($17 + [128]), [64])
	$14 = ($0 + [72])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$65 }
	*($14) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$65
	*($17 + [16]) = $16
	*($17 + [24]) = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$13 = (uint_64)*($17 + [24]) >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$92:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$91 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$93 }
	
.LOOP $label$94:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$91 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$94 }
	
.LABEL $label$93
	$3 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$92 }
	goto $label$90 
	
.LABEL $label$91
	$3 = [0]
	
.LABEL $label$90
	CALL eosio_assert($3, [208])
	$1 = *(($0 + [8]))
	$9 = (CASTING float_64)(int_64 $16)
	$16 = (Rounds 0)(((float_64)$9 * (float_64)(float_64)0.01))
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$98 }
	
.LOOP $label$99:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$96 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$99 }
	
.LABEL $label$98
	$3 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$3 = [0]
	
.LABEL $label$95
	CALL eosio_assert($3, [208])
	$11 = *(($0 + [8]))
	$10 = (Rounds 0)(((float_64)$9 * (float_64)(float_64)0.02))
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$103 }
	
.LOOP $label$104:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$101 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$104 }
	
.LABEL $label$103
	$3 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	$3 = [0]
	
.LABEL $label$100
	CALL eosio_assert($3, [208])
	if ( ($15 == 0) ){ goto $label$106 }
	CALL prints([3808])
	CALL $71($6)
	$3 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($3, [3840])
	$14 = ($17 + [24])
	CALL eosio_assert(((int_64)*($14) == (int_64)*($6 + [8])), [1376])
	CALL eosio_assert(((int_64)*($17 + [16]) <= (int_64)*($6)), [3872])
	CALL eosio_assert($3, [320])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($17 + [32])), [368])
	CALL eosio_assert(((int_64)*($17 + [32]) == (int_64)CALL $fimport$13()), [416])
	$13 = *($6 + [8])
	CALL eosio_assert(((int_64)*($14) == (int_64)$13), [2000])
	$12 = (int_64)
	*($6) = $12(*($6) - *($17 + [16])))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [2080])
	CALL eosio_assert(((int_64)*($14) == (int_64)*(($6 + [24]))), [1552])
	$12 = ((int_64)*($6 + [16]) + (int_64)*($17 + [16]))
	*($6 + [16]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($6 + [16]) < (int_64)4611686018427387904), [1632])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$13) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [480])
	*($17 + [248]) = (($17 + [128]) + [48])
	*($17 + [244]) = ($17 + [128])
	*($17 + [240]) = ($17 + [128])
	CALL $52(($17 + [240]), $6)
	CALL db_update_i64(*($6 + [52]), (int_64)0, ($17 + [128]), [48])
	$14 = ($17 + [48])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$105 }
	*($14) = ((int_64)$13 + (int_64)1)
	goto $label$105 
	
.LABEL $label$106
	if ( ($6 == 0) ){ goto $label$107 }
	CALL prints([4032])
	CALL $71(($6 + [16]))
	CALL eosio_assert([1], [320])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($17 + [32])), [368])
	CALL eosio_assert(((int_64)*($17 + [32]) == (int_64)CALL $fimport$13()), [416])
	$13 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($17 + [24])) == (int_64)*(($6 + [24]))), [1552])
	$12 = ((int_64)*($6 + [16]) + (int_64)*($17 + [16]))
	*($6 + [16]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($6 + [16]) < (int_64)4611686018427387904), [1632])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$13) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [480])
	*($17 + [248]) = (($17 + [128]) + [48])
	*($17 + [244]) = ($17 + [128])
	*($17 + [240]) = ($17 + [128])
	CALL $52(($17 + [240]), $6)
	CALL db_update_i64(*($6 + [52]), (int_64)0, ($17 + [128]), [48])
	$14 = (($17 + [32]) + [16])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$105 }
	*($14) = ((int_64)$13 + (int_64)1)
	goto $label$105 
	
.LABEL $label$107
	CALL prints([3904])
	$13 = *($0)
	*($17 + [8]) = $0
	*($17 + [12]) = ($17 + [16])
	*($17 + [240]) = $13
	CALL eosio_assert(((int_64)*($17 + [32]) == (int_64)CALL $fimport$13()), [1488])
	*($17 + [132]) = ($17 + [8])
	*($17 + [128]) = ($17 + [32])
	*($17 + [136]) = ($17 + [240])
	$14 = CALL $84([64])
	CALL $49($14)
	*($14 + [48]) = ($17 + [32])
	CALL $72(($17 + [128]), $14)
	*($17 + [120]) = $14
	$13 = (uint_64)*($14 + [8]) >> (uint_64)(int_64)8
	*($17 + [128]) = $13)
	$6 = *($14 + [52])
	*($17 + [116]) = $6
	$5 = ($17 + [60])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($17 + [64]))) ){ goto $label$109 }
	*($3 + [8]) = $13
	*($3 + [16]) = $6
	*($17 + [120]) = [0]
	*($3) = $14
	*($5) = ($3 + [24])
	goto $label$108 
	
.LABEL $label$109
	CALL $51(($17 + [56]), ($17 + [120]), ($17 + [128]), ($17 + [116]))
	
.LABEL $label$108
	$3 = *($17 + [120])
	*($17 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$110 }
	CALL $85($3)
	
.LABEL $label$110
	CALL prints([3968])
	CALL $71(($14 + [16]))
	
.LABEL $label$105
	$13 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$111 }
	$14 = ($6 + [-24])
	$5 = ([0] - $2)
	
.LOOP $label$112:
	if ( ((int_64)(uint_64)*(*($14) + [8]) >> (uint_64)(int_64)8) == (int_64)$13) ){ goto $label$111 }
	$6 = $14
	$3 = ($14 + [-24])
	$14 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$112 }
	
.LABEL $label$111
	$3 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$114 }
	$14 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [104]) == (int_32)$3), [256])
	goto $label$113 
	
.LABEL $label$114
	$14 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $13)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$113 }
	$14 = CALL $23($3, $6)
	CALL eosio_assert(((int_32)*($14 + [104]) == (int_32)$3), [256])
	
.LABEL $label$113
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($14 + [104]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	$13 = *($14 + [8])
	CALL eosio_assert(((int_64)*(($17 + [24])) == (int_64)*(($14 + [56]))), [1552])
	$12 = ((int_64)*($14 + [48]) + (int_64)*($17 + [16]))
	*($14 + [48]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($14 + [48]) < (int_64)4611686018427387904), [1632])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($14 + [80]))), [1552])
	$12 = ((int_64)*($14 + [72]) + (int_64)$16)
	*($14 + [72]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($14 + [72]) < (int_64)4611686018427387904), [1632])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($14 + [96]))), [1552])
	$1 = ((int_64)*($14 + [88]) + (int_64)$16)
	*($14 + [88]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($14 + [88]) < (int_64)4611686018427387904), [1632])
	CALL eosio_assert(((int_64)$11 == (int_64)*($14 + [8])), [1552])
	$1 = ((int_64)*($14) + (int_64)$10)
	*($14) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($14) < (int_64)4611686018427387904), [1632])
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$13) == (int_64)(uint_64)*($14 + [8]) >> (uint_64)(int_64)8)), [480])
	*($17 + [248]) = (($17 + [128]) + [104])
	*($17 + [244]) = ($17 + [128])
	*($17 + [240]) = ($17 + [128])
	CALL $24(($17 + [240]), $14)
	CALL db_update_i64(*($14 + [108]), (int_64)0, ($17 + [128]), [104])
	$14 = ($0 + [32])
	if ( (uint_64)($13 <= *($14)) ){ goto $label$115 }
	*($14) = ((int_64)$13 + (int_64)1)
	
.LABEL $label$115
	$0 = *($17 + [56])
	if ( ($0 == 0) ){ goto $label$116 }
	$6 = ($17 + [60])
	$14 = *($6)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$118 }
	
.LOOP $label$119:
	$14 = ($14 + [-24])
	$3 = *($14)
	*($14) = [0]
	if ( ($3 == 0) ){ goto $label$120 }
	CALL $85($3)
	
.LABEL $label$120
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$119 }
	$14 = *(($17 + [56]))
	goto $label$117 
	
.LABEL $label$118
	$14 = $0
	
.LABEL $label$117
	*($6) = $0
	CALL $85($14)
	
.LABEL $label$116
	$0 = *($17 + [96])
	if ( ($0 == 0) ){ goto $label$121 }
	$6 = ($17 + [100])
	$14 = *($6)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$123 }
	
.LOOP $label$124:
	$14 = ($14 + [-24])
	$3 = *($14)
	*($14) = [0]
	if ( ($3 == 0) ){ goto $label$125 }
	CALL $85($3)
	
.LABEL $label$125
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$124 }
	$14 = *(($17 + [96]))
	goto $label$122 
	
.LABEL $label$123
	$14 = $0
	
.LABEL $label$122
	*($6) = $0
	CALL $85($14)
	
.LABEL $label$121
	*([0] + [4]) = ($17 + [256])
}

void .FUNC _ZN12egtblackjack8withdrawEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [240])
	*([0] + [4]) = $13
	CALL prints([4144])
	CALL $41(($2 + [8]), [1])
	CALL prints([4176])
	CALL printi(*($2))
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($0 + [8])), [4208])
	$6 = [0]
	$3 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [880])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [912])
	*(($13 + [104])) = [0]
	*($13 + [88]) = (int_64)-1
	*($13 + [96]) = (int_64)0
	$11 = *($0)
	*($13 + [72]) = $11
	*($13 + [80]) = $1
	$7 = CALL db_find_i64($11, $1, (int_64)3607749779137757184, (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $48(($13 + [72]), $7)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($13 + [72])), [256])
	
.LABEL $label$6
	CALL prints([3728])
	CALL $71($6)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($6 + [8])), [1376])
	CALL eosio_assert(((int_64)*($2) <= (int_64)*($6)), [3872])
	$12 = *($0)
	$8 = (int_64)59
	$7 = [592]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*($13 + [24]) = $10
	*($13 + [16]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$18 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$3 = ($3 + [165])
	goto $label$16 
	
.LABEL $label$18
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$13 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$12 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$24 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$24
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$20
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$19 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$7 = CALL strlen([4240])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$28 }
	*($13) = ($7 << [1])
	$3 = ($13 | [1])
	if ( $7 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$5 = (($7 + [16]) & [-16])
	$3 = CALL $84($5)
	*($13) = ($5 | [1])
	*($13 + [8]) = $3
	*($13 + [4]) = $7
	
.LABEL $label$27
	CALL memcpy($3, [4240], $7)
	
.LABEL $label$26
	*(($3 + $7)) = [0]
	*(($13 + [140])) = *(($2 + [12]))
	*(($13 + [136])) = *(($2 + [8]))
	*(($13 + [132])) = *(($2 + [4]))
	*($13 + [120]) = $1
	*($13 + [112]) = *($0)
	*($13 + [128]) = *($2)
	$7 = ($13 + [8])
	*(($13 + [152])) = *($7)
	*($13 + [144]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($7) = [0]
	$7 = CALL $54(($13 + [32]), ($13 + [16]), $10, $12, ($13 + [112]))
	CALL $29(($13 + [224]), $7)
	$3 = *($13 + [224])
	CALL send_inline($3, (*($13 + [228]) - $3))
	$3 = *($13 + [224])
	if ( ($3 == 0) ){ goto $label$29 }
	*($13 + [228]) = $3
	CALL $85($3)
	
.LABEL $label$29
	$3 = *($7 + [28])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($7 + [32])) = $3
	CALL $85($3)
	
.LABEL $label$30
	$3 = *($7 + [16])
	if ( ($3 == 0) ){ goto $label$31 }
	*(($7 + [20])) = $3
	CALL $85($3)
	
.LABEL $label$31
	if ( ((*(($13 + [144])) & [1]) == 0) ){ goto $label$32 }
	CALL $85(*(($13 + [152])))
	
.LABEL $label$32
	if ( ((*($13) & [1]) == 0) ){ goto $label$33 }
	CALL $85(*(($13 + [8])))
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($13 + [72])), [368])
	CALL eosio_assert(((int_64)*($13 + [72]) == (int_64)CALL $fimport$13()), [416])
	$9 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$9), [2000])
	$11 = (int_64)
	*($6) = $11(*($6) - *($2)))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [2080])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [480])
	*($13 + [40]) = (($13 + [112]) + [48])
	*($13 + [36]) = ($13 + [112])
	*($13 + [32]) = ($13 + [112])
	CALL $52(($13 + [32]), $6)
	CALL db_update_i64(*($6 + [52]), (int_64)0, ($13 + [112]), [48])
	$7 = (($13 + [72]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$34 }
	*($7) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$34
	$9 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$4 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$35 }
	$7 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$36:
	if ( ((int_64)(uint_64)*(*($7) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$35 }
	$6 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$36 }
	
.LABEL $label$35
	$3 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$38 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [256])
	goto $label$37 
	
.LABEL $label$38
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$37 }
	$7 = CALL $23($3, $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [256])
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	$9 = *($7 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($7 + [40]))), [1552])
	$11 = ((int_64)*($7 + [32]) + (int_64)*($2))
	*($7 + [32]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($7 + [32]) < (int_64)4611686018427387904), [1632])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [480])
	*($13 + [40]) = (($13 + [112]) + [104])
	*($13 + [36]) = ($13 + [112])
	*($13 + [32]) = ($13 + [112])
	CALL $24(($13 + [32]), $7)
	CALL db_update_i64(*($7 + [108]), (int_64)0, ($13 + [112]), [104])
	$7 = ($0 + [32])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$39 }
	*($7) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$39
	$2 = *($13 + [96])
	if ( ($2 == 0) ){ goto $label$40 }
	$6 = ($13 + [100])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$44 }
	CALL $85($3)
	
.LABEL $label$44
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($13 + [96]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $2
	
.LABEL $label$41
	*($6) = $2
	CALL $85($7)
	
.LABEL $label$40
	*([0] + [4]) = ($13 + [240])
	return (unreachable)
	
.LABEL $label$25
	CALL $86($13)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2288])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $99(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $99(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $85(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $85(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC _ZN12egtblackjack7depositEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	CALL require_auth($1)
	CALL prints([1344])
	$8 = [0]
	*(($9 + [40])) = [0]
	*($9 + [16]) = $1
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$7 = *($0)
	*($9 + [8]) = $7
	$6 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $48(($9 + [8]), $6)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($9 + [8])), [256])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert($6, [208])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$7), [1376])
	CALL eosio_assert(((int_64)*($2) > (int_64)9999), [1440])
	$1 = *($0)
	*($9) = $0
	*($9 + [176]) = $1
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$13()), [1488])
	*($9 + [68]) = $9
	*($9 + [64]) = ($9 + [8])
	*($9 + [72]) = ($9 + [176])
	$8 = CALL $84([64])
	CALL $49($8)
	*($8 + [48]) = ($9 + [8])
	CALL $50(($9 + [64]), $8)
	*($9 + [56]) = $8
	$1 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8
	*($9 + [64]) = $1)
	$5 = *($8 + [52])
	*($9 + [52]) = $5
	$4 = ($9 + [36])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($9 + [40]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($9 + [56]) = [0]
	*($6) = $8
	*($4) = ($6 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $51(($9 + [32]), ($9 + [56]), ($9 + [64]), ($9 + [52]))
	
.LABEL $label$7
	$6 = *($9 + [56])
	*($9 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $85($6)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($9 + [8])), [368])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$13()), [416])
	$1 = *($8 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$1), [1552])
	$7 = ((int_64)*($8) + (int_64)*($2))
	*($8) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [1632])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [480])
	*($9 + [184]) = (($9 + [64]) + [48])
	*($9 + [180]) = ($9 + [64])
	*($9 + [176]) = ($9 + [64])
	CALL $52(($9 + [176]), $8)
	CALL db_update_i64(*($8 + [52]), (int_64)0, ($9 + [64]), [48])
	$8 = (($9 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$3 = *(($0 + [40]))
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*(*($8) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$10 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [16])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$13 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$6), [256])
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $23($6, $5)
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$6), [256])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$6), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	$1 = *($8 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($8 + [24]))), [1552])
	$7 = ((int_64)*($8 + [16]) + (int_64)*($2))
	*($8 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [1632])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [480])
	*($9 + [184]) = (($9 + [64]) + [104])
	*($9 + [180]) = ($9 + [64])
	*($9 + [176]) = ($9 + [64])
	CALL $24(($9 + [176]), $8)
	CALL db_update_i64(*($8 + [108]), (int_64)0, ($9 + [64]), [104])
	$8 = ($0 + [32])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$14 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$14
	$5 = *($9 + [32])
	if ( ($5 == 0) ){ goto $label$15 }
	$0 = ($9 + [36])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	CALL $85($6)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$18 }
	$8 = *(($9 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$8 = $5
	
.LABEL $label$16
	*($0) = $5
	CALL $85($8)
	
.LABEL $label$15
	*([0] + [4]) = ($9 + [192])
}

void .FUNC _ZN12egtblackjack6refundENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [352])
	*([0] + [4]) = $15
	$9 = (int_64)0
	$13 = (int_64)59
	$8 = [640]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	CALL prints([1664])
	$8 = *($1)
	$7 = ($8 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $7 ), ( *($1 + [4]) ? uint_32($8 >> [1]) : $7 ))
	*($15 + [216]) = [0]
	*($15 + [208]) = (int_64)0
	*(($15 + [248])) = [0]
	*($15 + [240]) = (int_64)0
	$8 = CALL strlen([1104])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($15 + [240]) = ($8 << [1])
	$7 = (($15 + [240]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $84($4)
	*($15 + [240]) = ($4 | [1])
	*($15 + [248]) = $7
	*($15 + [244]) = $8
	
.LABEL $label$9
	CALL memcpy($7, [1104], $8)
	
.LABEL $label$8
	*(($7 + $8)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($1, ($15 + [208]), ($15 + [240]))
	if ( ((*($15 + [240]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*($15 + [248]))
	
.LABEL $label$11
	CALL eosio_assert(((int_32)(*($15 + [212]) - *($15 + [208])) == (int_32)[72]), [1696])
	CALL $99(($15 + [192]), *($15 + [208]))
	$8 = *($15 + [192])
	$7 = CALL strlen([768])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$14 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [768], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$8 = [1]
	$7 = *($15 + [192])
	$1 = CALL strlen([752])
	if ( ((int_32)$1 != (int_32)( *($15 + [196]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$15 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [752], $1) == 0) ){ goto $label$12 }
	
.LABEL $label$15
	$8 = *($15 + [192])
	$7 = CALL strlen([1728])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$16 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [1728], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$16
	$8 = [1]
	$7 = *($15 + [192])
	$1 = CALL strlen([784])
	if ( ((int_32)$1 != (int_32)( *($15 + [196]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$17 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [784], $1) == 0) ){ goto $label$12 }
	
.LABEL $label$17
	$8 = *($15 + [192])
	$7 = CALL strlen([1744])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$18 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [1744], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$18
	$8 = [1]
	$7 = *($15 + [192])
	$1 = CALL strlen([1760])
	if ( ((int_32)$1 != (int_32)( *($15 + [196]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$19 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [1760], $1) == 0) ){ goto $label$12 }
	
.LABEL $label$19
	$8 = *($15 + [192])
	$7 = ($8 & [1])
	$1 = uint_32($8 >> [1])
	$8 = [0]
	$4 = CALL strlen([1776])
	if ( ((int_32)$4 != (int_32)( *($15 + [196]) ? $1 : $7 )) ){ goto $label$12 }
	$8 = (CALL $92(($15 + [192]), [0], [-1], [1776], $4) == 0)
	goto $label$12 
	
.LABEL $label$13
	$8 = [1]
	
.LABEL $label$12
	CALL eosio_assert($8, [1792])
	CALL $99(($15 + [176]), (*($15 + [208]) + [12]))
	CALL $99(($15 + [160]), (*($15 + [208]) + [24]))
	CALL $99(($15 + [144]), (*($15 + [208]) + [36]))
	CALL $99(($15 + [128]), (*($15 + [208]) + [48]))
	*(($15 + [120])) = [0]
	*($15 + [112]) = (int_64)0
	$8 = CALL strlen([1184])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$22 }
	*($15 + [112]) = ($8 << [1])
	$7 = (($15 + [112]) | [1])
	if ( $8 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$1 = (($8 + [16]) & [-16])
	$7 = CALL $84($1)
	*($15 + [112]) = ($1 | [1])
	*($15 + [120]) = $7
	*($15 + [116]) = $8
	
.LABEL $label$21
	CALL memcpy($7, [1184], $8)
	
.LABEL $label$20
	*(($7 + $8)) = [0]
	$8 = *($15 + [208])
	if ( (((int_32)(*($15 + [212]) - $8) / (int_32)[12]) <= [6]) ){ goto $label$23 }
	CALL $87(($15 + [112]), ($8 + [60]))
	
.LABEL $label$23
	$8 = *($15 + [192])
	$7 = CALL strlen([768])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$31 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [768], $7) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$8 = *($15 + [192])
	$7 = CALL strlen([1728])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$32 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [1728], $7) == 0) ){ goto $label$29 }
	
.LABEL $label$32
	$8 = *($15 + [192])
	$7 = CALL strlen([752])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$33 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [752], $7) == 0) ){ goto $label$28 }
	
.LABEL $label$33
	$8 = *($15 + [192])
	$7 = CALL strlen([784])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$34 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [784], $7) == 0) ){ goto $label$27 }
	
.LABEL $label$34
	$8 = *($15 + [192])
	$7 = CALL strlen([1744])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$35 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [1744], $7) == 0) ){ goto $label$26 }
	
.LABEL $label$35
	$8 = *($15 + [192])
	$7 = CALL strlen([1760])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$36 }
	$8 = [0]
	if ( (CALL $92(($15 + [192]), [0], [-1], [1760], $7) == 0) ){ goto $label$25 }
	
.LABEL $label$36
	$8 = *($15 + [192])
	$7 = CALL strlen([1776])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$24 }
	$8 = [0]
	if ( CALL $92(($15 + [192]), [0], [-1], [1776], $7) ){ goto $label$24 }
	$7 = *($15 + [160])
	$1 = CALL strlen([1952])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$37 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1952], $1) == 0)
	
.LABEL $label$37
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$30
	$7 = *($15 + [160])
	$1 = CALL strlen([1824])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$38 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1824], $1) == 0)
	
.LABEL $label$38
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$29
	$7 = *($15 + [160])
	$1 = CALL strlen([1872])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$39 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1872], $1) == 0)
	
.LABEL $label$39
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$28
	$7 = *($15 + [160])
	$1 = CALL strlen([1888])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$40 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1888], $1) == 0)
	
.LABEL $label$40
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$27
	$7 = *($15 + [160])
	$1 = CALL strlen([1904])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$41 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1904], $1) == 0)
	
.LABEL $label$41
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$26
	$7 = *($15 + [160])
	$1 = CALL strlen([1920])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$42 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1920], $1) == 0)
	
.LABEL $label$42
	CALL eosio_assert($8, [1840])
	goto $label$24 
	
.LABEL $label$25
	$7 = *($15 + [160])
	$1 = CALL strlen([1936])
	if ( ((int_32)$1 != (int_32)( *($15 + [164]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$43 }
	$8 = (CALL $92(($15 + [160]), [0], [-1], [1936], $1) == 0)
	
.LABEL $label$43
	CALL eosio_assert($8, [1840])
	
.LABEL $label$24
	$3 = *($0 + [8])
	$2 = CALL atoll(( *($15 + [168]) ? (($15 + [160]) | [1]) : (*($15 + [160]) & [1]) ))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	
.LOOP $label$48:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$48 }
	
.LABEL $label$47
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$7 = [0]
	
.LABEL $label$44
	CALL eosio_assert($7, [208])
	$8 = ( *($15 + [184]) ? (($15 + [176]) | [1]) : (*($15 + [176]) & [1]) )
	$7 = [-1]
	
.LOOP $label$49:
	$1 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($1 + [1])) ){ goto $label$49 }
	$12 = (CASTING uint_64)(uint_32 $4)
	$9 = (int_64)0
	$13 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$50:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$12) ){ goto $label$51 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$7 = ($7 + [165])
	goto $label$52 
	
.LABEL $label$53
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$55 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$54 
	
.LABEL $label$55
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$54
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$50 }
	*(($15 + [104])) = [0]
	*($15 + [88]) = (int_64)-1
	*($15 + [96]) = (int_64)0
	$9 = *($0)
	*($15 + [72]) = $9
	*($15 + [80]) = $10
	$8 = [0]
	$7 = CALL db_find_i64($9, $10, (int_64)3607749779137757184, (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$56 }
	$8 = CALL $48(($15 + [72]), $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($15 + [72])), [256])
	
.LABEL $label$56
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [1968])
	CALL eosio_assert($7, [320])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($15 + [72])), [368])
	CALL eosio_assert(((int_64)*($15 + [72]) == (int_64)CALL $fimport$13()), [416])
	$9 = *($8 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($8 + [40]))), [2000])
	$13 = (int_64)
	*($8 + [32]) = $13(*($8 + [32]) - $2))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($8 + [32]) < (int_64)4611686018427387904), [2080])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [480])
	*($15 + [24]) = (($15 + [240]) + [48])
	*($15 + [20]) = ($15 + [240])
	*($15 + [16]) = ($15 + [240])
	CALL $52(($15 + [16]), $8)
	CALL db_update_i64(*($8 + [52]), (int_64)0, ($15 + [240]), [48])
	$8 = ($15 + [88])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$57 }
	*($8) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$57
	$8 = *($15 + [112])
	$7 = CALL strlen([1184])
	if ( ((int_32)$7 != (int_32)( *($15 + [116]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$5 }
	if ( CALL $92(($15 + [112]), [0], [-1], [1184], $7) ){ goto $label$5 }
	$8 = *($15 + [192])
	$7 = CALL strlen([752])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$66 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [752], $7) == 0) ){ goto $label$65 }
	
.LABEL $label$66
	$8 = *($15 + [192])
	$7 = CALL strlen([768])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$67 }
	if ( (CALL $92(($15 + [192]), [0], [-1], [768], $7) == 0) ){ goto $label$64 }
	
.LABEL $label$67
	$8 = *($15 + [192])
	$7 = CALL strlen([784])
	if ( ((int_32)$7 != (int_32)( *($15 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$5 }
	if ( CALL $92(($15 + [192]), [0], [-1], [784], $7) ){ goto $label$5 }
	$6 = *(($0 + [80]))
	$1 = *(($0 + [84]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$68 }
	$8 = ($1 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$69:
	if ( ((int_64)*(*($8)) == (int_64)5) ){ goto $label$68 }
	$1 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$69 }
	
.LABEL $label$68
	$7 = ($0 + [56])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$59 }
	$8 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	goto $label$58 
	
.LABEL $label$65
	$6 = *(($0 + [80]))
	$1 = *(($0 + [84]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$70 }
	$8 = ($1 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$71:
	if ( (int_64)(*(*($8)) == 0) ){ goto $label$70 }
	$1 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$71 }
	
.LABEL $label$70
	$7 = ($0 + [56])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$63 }
	$8 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	goto $label$62 
	
.LABEL $label$64
	$6 = *(($0 + [80]))
	$1 = *(($0 + [84]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$72 }
	$8 = ($1 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$73:
	if ( ((int_64)*(*($8)) == (int_64)1) ){ goto $label$72 }
	$1 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$73 }
	
.LABEL $label$72
	$7 = ($0 + [56])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$61 }
	$8 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	goto $label$60 
	
.LABEL $label$63
	$8 = [0]
	$1 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$62 }
	$8 = CALL $32($7, $1)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	
.LABEL $label$62
	$1 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($1, [656])
	CALL eosio_assert($1, [320])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($8 + [8]) = ((int_64)*($8 + [8]) + (int_64)1)
	$9 = *($8)
	CALL eosio_assert([1], [480])
	*($15 + [24]) = (($15 + [240]) + [64])
	*($15 + [20]) = ($15 + [240])
	*($15 + [16]) = ($15 + [240])
	CALL $33(($15 + [16]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, ($15 + [240]), [64])
	$8 = ($0 + [72])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$61
	$8 = [0]
	$1 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$60 }
	$8 = CALL $32($7, $1)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	
.LABEL $label$60
	$1 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($1, [688])
	CALL eosio_assert($1, [320])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($8 + [8]) = ((int_64)*($8 + [8]) + (int_64)1)
	$9 = *($8)
	CALL eosio_assert([1], [480])
	*($15 + [24]) = (($15 + [240]) + [64])
	*($15 + [20]) = ($15 + [240])
	*($15 + [16]) = ($15 + [240])
	CALL $33(($15 + [16]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, ($15 + [240]), [64])
	$8 = ($0 + [72])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$59
	$8 = [0]
	$1 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$58 }
	$8 = CALL $32($7, $1)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [256])
	
.LABEL $label$58
	$1 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($1, [720])
	CALL eosio_assert($1, [320])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$7), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($8 + [8]) = ((int_64)*($8 + [8]) + (int_64)1)
	$9 = *($8)
	CALL eosio_assert([1], [480])
	*($15 + [24]) = (($15 + [240]) + [64])
	*($15 + [20]) = ($15 + [240])
	*($15 + [16]) = ($15 + [240])
	CALL $33(($15 + [16]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, ($15 + [240]), [64])
	$8 = ($0 + [72])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$7
	CALL $86(($15 + [240]))
	
.LABEL $label$6
	CALL $86(($15 + [112]))
	
.LABEL $label$5
	CALL $93(($15 + [16]), [2112], ($15 + [192]))
	$8 = CALL $91(($15 + [16]), [2144])
	$7 = ($8 + [8])
	*((($15 + [240]) + [8])) = *($7)
	*($15 + [240]) = *($8)
	*($8) = [0]
	*(($8 + [4])) = [0]
	*($7) = [0]
	$8 = *($15 + [144])
	$7 = ($8 & [1])
	$8 = CALL $90(($15 + [240]), ( *($15 + [152]) ? (($15 + [144]) | [1]) : $7 ), ( *($15 + [148]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($15 + [56]) + [8])) = *($7)
	*($15 + [56]) = *($8)
	*($8) = [0]
	*(($8 + [4])) = [0]
	*($7) = [0]
	if ( ((*($15 + [240]) & [1]) == 0) ){ goto $label$74 }
	CALL $85(*($15 + [248]))
	
.LABEL $label$74
	if ( ((*($15 + [16]) & [1]) == 0) ){ goto $label$75 }
	CALL $85(*($15 + [24]))
	
.LABEL $label$75
	CALL prints([2176])
	$8 = *($15 + [56])
	$7 = ($8 & [1])
	CALL prints_l(( *($15 + [64]) ? (($15 + [56]) | [1]) : $7 ), ( *($15 + [60]) ? uint_32($8 >> [1]) : $7 ))
	$5 = *($0)
	$9 = (int_64)0
	$11 = (int_64)59
	$8 = [592]
	$12 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$81 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$7 = ($7 + [165])
	goto $label$79 
	
.LABEL $label$81
	$13 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$77
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$76 }
	*($15 + [8]) = $12
	*($15) = $5
	$9 = (int_64)0
	$11 = (int_64)59
	$8 = [128]
	$12 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$87 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$7 = ($7 + [165])
	goto $label$85 
	
.LABEL $label$87
	$13 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$83
	$8 = ($8 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$82 }
	$9 = (int_64)0
	$11 = (int_64)59
	$8 = [112]
	$14 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$93 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$7 = ($7 + [165])
	goto $label$91 
	
.LABEL $label$93
	$13 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$89
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$88 }
	*(($15 + [264])) = $3
	*($15 + [248]) = $10
	*($15 + [240]) = $5
	*($15 + [256]) = $2
	CALL $99(($15 + [272]), ($15 + [56]))
	$8 = CALL $54(($15 + [16]), $15, $12, $14, ($15 + [240]))
	CALL $29(($15 + [224]), $8)
	$7 = *($15 + [224])
	CALL send_inline($7, (*($15 + [228]) - $7))
	$7 = *($15 + [224])
	if ( ($7 == 0) ){ goto $label$94 }
	*($15 + [228]) = $7
	CALL $85($7)
	
.LABEL $label$94
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$95 }
	*(($8 + [32])) = $7
	CALL $85($7)
	
.LABEL $label$95
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$96 }
	*(($8 + [20])) = $7
	CALL $85($7)
	
.LABEL $label$96
	if ( ((*($15 + [272]) & [1]) == 0) ){ goto $label$97 }
	CALL $85(*(($15 + [280])))
	
.LABEL $label$97
	$9 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$6 = *(($0 + [40]))
	$1 = *(($0 + [44]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$98 }
	$8 = ($1 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$99:
	if ( ((int_64)(uint_64)*(*($8) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$98 }
	$1 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$99 }
	
.LABEL $label$98
	$4 = ($0 + [16])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$101 }
	$7 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$4), [256])
	goto $label$100 
	
.LABEL $label$101
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$100 }
	$7 = CALL $23($4, $8)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$4), [256])
	
.LABEL $label$100
	$13 = *(($0 + [8]))
	$11 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)0.01))
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$9 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$104:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$103 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$105 }
	
.LOOP $label$106:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$103 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$106 }
	
.LABEL $label$105
	$1 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$103
	$1 = [0]
	
.LABEL $label$102
	CALL eosio_assert($1, [208])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$4), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	$9 = *($7 + [8])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($7 + [80]))), [2000])
	$10 = (int_64)
	*($7 + [72]) = $10(*($7 + [72]) - $11))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($7 + [72]) < (int_64)4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($7 + [96]))), [2000])
	$13 = (int_64)
	*($7 + [88]) = $13(*($7 + [88]) - $11))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($7 + [88]) < (int_64)4611686018427387904), [2080])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [480])
	*($15 + [24]) = (($15 + [240]) + [104])
	*($15 + [20]) = ($15 + [240])
	*($15 + [16]) = ($15 + [240])
	CALL $24(($15 + [16]), $7)
	CALL db_update_i64(*($7 + [108]), (int_64)0, ($15 + [240]), [104])
	$8 = ($0 + [32])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$107 }
	*($8) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$107
	if ( ((*($15 + [56]) & [1]) == 0) ){ goto $label$108 }
	CALL $85(*(($15 + [64])))
	
.LABEL $label$108
	$1 = *($15 + [96])
	if ( ($1 == 0) ){ goto $label$109 }
	$4 = ($15 + [100])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$111 }
	
.LOOP $label$112:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$113 }
	CALL $85($7)
	
.LABEL $label$113
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$112 }
	$8 = *(($15 + [96]))
	goto $label$110 
	
.LABEL $label$111
	$8 = $1
	
.LABEL $label$110
	*($4) = $1
	CALL $85($8)
	
.LABEL $label$109
	if ( ((*($15 + [112]) & [1]) == 0) ){ goto $label$114 }
	CALL $85(*($15 + [120]))
	
.LABEL $label$114
	if ( ((*($15 + [128]) & [1]) == 0) ){ goto $label$115 }
	CALL $85(*($15 + [136]))
	
.LABEL $label$115
	if ( ((*($15 + [144]) & [1]) == 0) ){ goto $label$116 }
	CALL $85(*(($15 + [152])))
	
.LABEL $label$116
	if ( ((*($15 + [160]) & [1]) == 0) ){ goto $label$117 }
	CALL $85(*(($15 + [168])))
	
.LABEL $label$117
	if ( ((*($15 + [176]) & [1]) == 0) ){ goto $label$118 }
	CALL $85(*(($15 + [184])))
	
.LABEL $label$118
	if ( ((*($15 + [192]) & [1]) == 0) ){ goto $label$119 }
	CALL $85(*($15 + [200]))
	
.LABEL $label$119
	$1 = *($15 + [208])
	if ( ($1 == 0) ){ goto $label$120 }
	$8 = *($15 + [212])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$122 }
	$7 = ([0] - $1)
	$8 = ($8 + [-12])
	
.LOOP $label$123:
	if ( ((*($8) & [1]) == 0) ){ goto $label$124 }
	CALL $85(*(($8 + [8])))
	
.LABEL $label$124
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $7) != (int_32)[-12]) ){ goto $label$123 }
	$8 = *($15 + [208])
	goto $label$121 
	
.LABEL $label$122
	$8 = $1
	
.LABEL $label$121
	*($15 + [212]) = $1
	CALL $85($8)
	
.LABEL $label$120
	*([0] + [4]) = ($15 + [352])
	(unreachable)
	(unreachable)
}

void .FUNC _ZN12egtblackjack5awardENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	$36 = (*([0] + [4]) - [352])
	*([0] + [4]) = $36
	$31 = (int_64)0
	$35 = (int_64)59
	$30 = [640]
	$32 = (int_64)0
	
.LOOP $label$1:
	$33 = (int_64)0
	if ( ((uint_64)$31 > (uint_64)(int_64)11) ){ goto $label$2 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$29 = ($29 + [165])
	goto $label$3 
	
.LABEL $label$4
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$33 = ((int_64)(CASTING uint_64)(uint_32 ($29 & [31])) << (int_64)((int_64)$35 & (int_64)4294967295))
	
.LABEL $label$2
	$30 = ($30 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($32)
	CALL prints([2224])
	$30 = *($1)
	$29 = ($30 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $29 ), ( *($1 + [4]) ? uint_32($30 >> [1]) : $29 ))
	*($36 + [232]) = [0]
	*($36 + [224]) = (int_64)0
	*(($36 + [248])) = [0]
	*($36 + [240]) = (int_64)0
	$30 = CALL strlen([1104])
	if ( ((uint_32)$30 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$30 >= (uint_32)[11]) ){ goto $label$9 }
	*($36 + [240]) = ($30 << [1])
	$29 = (($36 + [240]) | [1])
	if ( $30 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$15 = (($30 + [16]) & [-16])
	$29 = CALL $84($15)
	*($36 + [240]) = ($15 | [1])
	*($36 + [248]) = $29
	*($36 + [244]) = $30
	
.LABEL $label$8
	CALL memcpy($29, [1104], $30)
	
.LABEL $label$7
	*(($29 + $30)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($1, ($36 + [224]), ($36 + [240]))
	if ( ((*($36 + [240]) & [1]) == 0) ){ goto $label$10 }
	CALL $85(*($36 + [248]))
	
.LABEL $label$10
	CALL eosio_assert(((uint_32)((int_32)(*($36 + [228]) - *($36 + [224])) / (int_32)[12]) > (uint_32)[2]), [2240])
	CALL $99(($36 + [208]), *($36 + [224]))
	$30 = *($36 + [208])
	$29 = CALL strlen([768])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$13 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [768], $29) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$30 = [1]
	$29 = *($36 + [208])
	$1 = CALL strlen([752])
	if ( ((int_32)$1 != (int_32)( *($36 + [212]) ? uint_32($29 >> [1]) : ($29 & [1]) )) ){ goto $label$14 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [752], $1) == 0) ){ goto $label$11 }
	
.LABEL $label$14
	$30 = *($36 + [208])
	$29 = CALL strlen([1728])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$15 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1728], $29) == 0) ){ goto $label$12 }
	
.LABEL $label$15
	$30 = [1]
	$29 = *($36 + [208])
	$1 = CALL strlen([784])
	if ( ((int_32)$1 != (int_32)( *($36 + [212]) ? uint_32($29 >> [1]) : ($29 & [1]) )) ){ goto $label$16 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [784], $1) == 0) ){ goto $label$11 }
	
.LABEL $label$16
	$30 = *($36 + [208])
	$29 = CALL strlen([1744])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$17 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1744], $29) == 0) ){ goto $label$12 }
	
.LABEL $label$17
	$30 = [1]
	$29 = *($36 + [208])
	$1 = CALL strlen([1760])
	if ( ((int_32)$1 != (int_32)( *($36 + [212]) ? uint_32($29 >> [1]) : ($29 & [1]) )) ){ goto $label$18 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1760], $1) == 0) ){ goto $label$11 }
	
.LABEL $label$18
	$30 = *($36 + [208])
	$29 = ($30 & [1])
	$1 = uint_32($30 >> [1])
	$30 = [0]
	$15 = CALL strlen([1776])
	if ( ((int_32)$15 != (int_32)( *($36 + [212]) ? $1 : $29 )) ){ goto $label$11 }
	$30 = (CALL $92(($36 + [208]), [0], [-1], [1776], $15) == 0)
	goto $label$11 
	
.LABEL $label$12
	$30 = [1]
	
.LABEL $label$11
	CALL eosio_assert($30, [2256])
	CALL $99(($36 + [192]), (*($36 + [224]) + [12]))
	CALL $99(($36 + [176]), (*($36 + [224]) + [24]))
	*($36 + [168]) = [0]
	*($36 + [160]) = (int_64)0
	*(($36 + [248])) = [0]
	*($36 + [240]) = (int_64)0
	$30 = CALL strlen([2288])
	if ( ((uint_32)$30 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$30 >= (uint_32)[11]) ){ goto $label$21 }
	*($36 + [240]) = ($30 << [1])
	$29 = (($36 + [240]) | [1])
	if ( $30 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$1 = (($30 + [16]) & [-16])
	$29 = CALL $84($1)
	*($36 + [240]) = ($1 | [1])
	*($36 + [248]) = $29
	*($36 + [244]) = $30
	
.LABEL $label$20
	CALL memcpy($29, [2288], $30)
	
.LABEL $label$19
	*(($29 + $30)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_(($36 + [176]), ($36 + [160]), ($36 + [240]))
	if ( ((*($36 + [240]) & [1]) == 0) ){ goto $label$22 }
	CALL $85(*($36 + [248]))
	
.LABEL $label$22
	CALL eosio_assert(((int_32)*($36 + [164]) != (int_32)*($36 + [160])), [2240])
	$31 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$28 = *(($0 + [40]))
	$1 = *(($0 + [44]))
	if ( ((int_32)$1 == (int_32)$28) ){ goto $label$23 }
	$30 = ($1 + [-24])
	$15 = ([0] - $28)
	
.LOOP $label$24:
	if ( ((int_64)(uint_64)*(*($30) + [8]) >> (uint_64)(int_64)8) == (int_64)$31) ){ goto $label$23 }
	$1 = $30
	$29 = ($30 + [-24])
	$30 = $29
	if ( ((int_32)($29 + $15) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$2 = ($0 + [16])
	if ( ((int_32)$1 == (int_32)$28) ){ goto $label$26 }
	$26 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($26 + [104]) == (int_32)$2), [256])
	goto $label$25 
	
.LABEL $label$26
	$26 = [0]
	$30 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $31)
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$25 }
	$26 = CALL $23($2, $30)
	CALL eosio_assert(((int_32)*($26 + [104]) == (int_32)$2), [256])
	
.LABEL $label$25
	$27 = ((int_64)*($26) / (int_64)2)
	$30 = *($36 + [208])
	$29 = CALL strlen([752])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$31 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [752], $29) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$30 = *($36 + [208])
	$29 = CALL strlen([1728])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$32 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1728], $29) == 0) ){ goto $label$29 }
	
.LABEL $label$32
	$30 = *($36 + [208])
	$29 = CALL strlen([768])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$33 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [768], $29) == 0) ){ goto $label$28 }
	
.LABEL $label$33
	$30 = *($36 + [208])
	$29 = CALL strlen([784])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$34 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [784], $29) == 0) ){ goto $label$27 }
	
.LABEL $label$34
	$30 = *($36 + [208])
	$29 = CALL strlen([1744])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$35 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1744], $29) == 0) ){ goto $label$27 }
	
.LABEL $label$35
	$30 = *($36 + [208])
	$29 = CALL strlen([1760])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$36 }
	if ( (CALL $92(($36 + [208]), [0], [-1], [1760], $29) == 0) ){ goto $label$27 }
	
.LABEL $label$36
	$30 = *($36 + [208])
	$29 = CALL strlen([1776])
	if ( ((int_32)$29 != (int_32)( *($36 + [212]) ? uint_32($30 >> [1]) : ($30 & [1]) )) ){ goto $label$27 }
	CALL $92(($36 + [208]), [0], [-1], [1776], $29)
	goto $label$27 
	
.LABEL $label$30
	$27 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $27) * (float_64)(float_64)0.06))
	goto $label$27 
	
.LABEL $label$29
	$27 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $27) * (float_64)(float_64)0.3))
	goto $label$27 
	
.LABEL $label$28
	$27 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $27) * (float_64)(float_64)0.6))
	
.LABEL $label$27
	$3 = *(($0 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$27 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$31 = (uint_64)$3 >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$29 = [0]
	
.LABEL $label$37
	CALL eosio_assert($29, [208])
	CALL prints([2304])
	CALL printi($27)
	$31 = *(($0 + [8]))
	$4 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $27) * (float_64)(float_64)0.2))
	$5 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$5($27 - $4)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$31 = (uint_64)$31 >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	
.LOOP $label$46:
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$29 = [0]
	
.LABEL $label$42
	CALL eosio_assert($29, [208])
	$6 = *(($0 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$31 = (uint_64)$6 >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	
.LOOP $label$51:
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$51 }
	
.LABEL $label$50
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$29 = [0]
	
.LABEL $label$47
	CALL eosio_assert($29, [208])
	CALL prints([2352])
	CALL printi($5)
	CALL prints([2384])
	CALL printi($4)
	$8 = *(($0 + [8]))
	$7 = ((int_64)$5 / (int_64)(CASTING uint_64)(uint_32 ((int_32)(*($36 + [164]) - *($36 + [160])) / (int_32)[12])))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$31 = (uint_64)$8 >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$29 = [0]
	
.LABEL $label$52
	CALL eosio_assert($29, [208])
	CALL prints([2416])
	CALL printi($7)
	$30 = *($36 + [160])
	if ( ((int_32)*($36 + [164]) == (int_32)$30) ){ goto $label$57 }
	$11 = ((int_64)$7 / (int_64)10000)
	$14 = (($36 + [240]) + [32])
	$13 = (($36 + [104]) | [1])
	$12 = (($36 + [24]) | [1])
	$10 = (($36 + [40]) | [1])
	$9 = (($36 + [240]) + [48])
	$17 = (($36 + [120]) + [16])
	$18 = (($36 + [120]) + [24])
	$25 = ($36 + [148])
	$28 = [0]
	
.LOOP $label$58:
	$30 = ($30 + ((int_32)$28 * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$60 }
	$30 = ($30 + [1])
	goto $label$59 
	
.LABEL $label$60
	$30 = *($30 + [8])
	
.LABEL $label$59
	$29 = [-1]
	
.LOOP $label$61:
	$1 = ($30 + $29)
	$15 = ($29 + [1])
	$29 = $15
	if ( *(($1 + [1])) ){ goto $label$61 }
	$34 = (CASTING uint_64)(uint_32 $15)
	$31 = (int_64)0
	$35 = (int_64)59
	$32 = (int_64)0
	
.LOOP $label$62:
	$33 = (int_64)0
	if ( ((uint_64)$31 >= (uint_64)$34) ){ goto $label$63 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$29 = ($29 + [165])
	goto $label$64 
	
.LABEL $label$65
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$33 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	if ( ((uint_64)$31 > (uint_64)(int_64)11) ){ goto $label$67 }
	$33 = ((int_64)((int_64)$33 & (int_64)31) << (int_64)((int_64)$35 & (int_64)4294967295))
	goto $label$66 
	
.LABEL $label$67
	$33 = ((int_64)$33 & (int_64)15)
	
.LABEL $label$66
	$30 = ($30 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$35 = ((int_64)$35 + (int_64)-5)
	if ( ((int_64)$35 != (int_64)-6) ){ goto $label$62 }
	*((($36 + [120]) + [8])) = $32
	*($17) = (int_64)-1
	*($18) = (int_64)0
	$30 = [0]
	*((($36 + [120]) + [32])) = [0]
	$31 = *($0)
	*($36 + [120]) = $31
	$19 = ($0 + [8])
	$29 = CALL db_find_i64($31, $32, (int_64)3607749779137757184, (uint_64)*($19) >> (uint_64)(int_64)8)
	if ( ((int_32)$29) < (int_32)[0]) ){ goto $label$68 }
	$30 = CALL $48(($36 + [120]), $29)
	CALL eosio_assert(((int_32)*($30 + [48]) == (int_32)($36 + [120])), [256])
	
.LABEL $label$68
	$29 = ((int_32)$30 != (int_32)[0])
	CALL eosio_assert($29, [1968])
	CALL eosio_assert($29, [320])
	CALL eosio_assert(((int_32)*($30 + [48]) == (int_32)($36 + [120])), [368])
	CALL eosio_assert(((int_64)*($36 + [120]) == (int_64)CALL $fimport$13()), [416])
	$31 = *($30 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)$31), [1552])
	$35 = ((int_64)*($30) + (int_64)$7)
	*($30) = $35
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($30) < (int_64)4611686018427387904), [1632])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($30 + [40]))), [1552])
	$35 = ((int_64)*($30 + [32]) + (int_64)$7)
	*($30 + [32]) = $35
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($30 + [32]) < (int_64)4611686018427387904), [1632])
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$31) == (int_64)(uint_64)*($30 + [8]) >> (uint_64)(int_64)8)), [480])
	*(($1 = (($36 + [8]) + [8]))) = $9
	*($36 + [12]) = ($36 + [240])
	*($36 + [8]) = ($36 + [240])
	CALL $52(($36 + [8]), $30)
	CALL db_update_i64(*($30 + [52]), (int_64)0, ($36 + [240]), [48])
	if ( (uint_64)($31 <= *($17)) ){ goto $label$69 }
	*($17) = ((int_64)$31 + (int_64)1)
	
.LABEL $label$69
	CALL $93(($36 + [56]), [2448], ($36 + [192]))
	$30 = CALL $91(($36 + [56]), [1104])
	$29 = ($30 + [8])
	*(($20 = (($36 + [72]) + [8]))) = *($29)
	*($36 + [72]) = *($30)
	*($30) = [0]
	*(($30 + [4])) = [0]
	*($29) = [0]
	CALL _ZNSt3__19to_stringEx(($36 + [40]), $5)
	$30 = *($36 + [40])
	$29 = ($30 & [1])
	$21 = (($36 + [40]) + [8])
	$30 = CALL $90(($36 + [72]), ( *($21) ? $10 : $29 ), ( *($36 + [44]) ? uint_32($30 >> [1]) : $29 ))
	$29 = ($30 + [8])
	*(($22 = (($36 + [88]) + [8]))) = *($29)
	*($36 + [88]) = *($30)
	*($30) = [0]
	*(($30 + [4])) = [0]
	*($29) = [0]
	$30 = CALL $91(($36 + [88]), [2464])
	$29 = ($30 + [8])
	*($1) = *($29)
	*($36 + [8]) = *($30)
	*($30) = [0]
	*(($30 + [4])) = [0]
	*($29) = [0]
	CALL _ZNSt3__19to_stringEx(($36 + [24]), $11)
	$30 = *($36 + [24])
	$29 = ($30 & [1])
	$23 = (($36 + [24]) + [8])
	$30 = CALL $90(($36 + [8]), ( *($23) ? $12 : $29 ), ( *($36 + [28]) ? uint_32($30 >> [1]) : $29 ))
	$29 = ($30 + [8])
	*(($15 = (($36 + [240]) + [8]))) = *($29)
	*($36 + [240]) = *($30)
	*($30) = [0]
	*(($30 + [4])) = [0]
	*($29) = [0]
	$30 = CALL $91(($36 + [240]), [2528])
	$29 = ($30 + [8])
	*(($24 = (($36 + [104]) + [8]))) = *($29)
	*($36 + [104]) = *($30)
	*($30) = [0]
	*(($30 + [4])) = [0]
	*($29) = [0]
	if ( ((*($36 + [240]) & [1]) == 0) ){ goto $label$70 }
	CALL $85(*($15))
	
.LABEL $label$70
	if ( ((*($36 + [24]) & [1]) == 0) ){ goto $label$71 }
	CALL $85(*($23))
	
.LABEL $label$71
	if ( ((*($36 + [8]) & [1]) == 0) ){ goto $label$72 }
	CALL $85(*($1))
	
.LABEL $label$72
	if ( ((*($36 + [88]) & [1]) == 0) ){ goto $label$73 }
	CALL $85(*($22))
	
.LABEL $label$73
	if ( ((*($36 + [40]) & [1]) == 0) ){ goto $label$74 }
	CALL $85(*($21))
	
.LABEL $label$74
	if ( ((*($36 + [72]) & [1]) == 0) ){ goto $label$75 }
	CALL $85(*($20))
	
.LABEL $label$75
	if ( ((*($36 + [56]) & [1]) == 0) ){ goto $label$76 }
	CALL $85(*((($36 + [56]) + [8])))
	
.LABEL $label$76
	CALL prints([2544])
	$30 = *($36 + [104])
	$29 = ($30 & [1])
	CALL prints_l(( *($24) ? $13 : $29 ), ( *($36 + [108]) ? uint_32($30 >> [1]) : $29 ))
	$16 = *($0)
	$31 = (int_64)0
	$33 = (int_64)59
	$30 = [592]
	$34 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$31 > (uint_64)(int_64)5) ){ goto $label$82 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$29 = ($29 + [165])
	goto $label$80 
	
.LABEL $label$82
	$35 = (int_64)0
	if ( ((uint_64)$31 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$35 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$35 = ((int_64)((int_64)$35 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$78
	$30 = ($30 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$34 = ((int_64)$35 | (int_64)$34)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$77 }
	*($1) = $34
	*($36 + [8]) = $16
	$31 = (int_64)0
	$33 = (int_64)59
	$30 = [128]
	$34 = (int_64)0
	
.LOOP $label$83:
	if ( ((uint_64)$31 > (uint_64)(int_64)10) ){ goto $label$88 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$29 = ($29 + [165])
	goto $label$86 
	
.LABEL $label$88
	$35 = (int_64)0
	if ( ((int_64)$31 == (int_64)11) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$87
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$35 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$85
	$35 = ((int_64)((int_64)$35 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$84
	$30 = ($30 + [1])
	$33 = ((int_64)$33 + (int_64)-5)
	$34 = ((int_64)$35 | (int_64)$34)
	$31 = ((int_64)$31 + (int_64)1)
	if ( ((int_64)$31 != (int_64)13) ){ goto $label$83 }
	*($36 + [88]) = $34
	$31 = (int_64)0
	$33 = (int_64)59
	$30 = [112]
	$34 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$31 > (uint_64)(int_64)7) ){ goto $label$94 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$29 = ($29 + [165])
	goto $label$92 
	
.LABEL $label$94
	$35 = (int_64)0
	if ( ((uint_64)$31 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$35 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$35 = ((int_64)((int_64)$35 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$90
	$30 = ($30 + [1])
	$31 = ((int_64)$31 + (int_64)1)
	$34 = ((int_64)$35 | (int_64)$34)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$89 }
	*($36 + [72]) = $34
	$35 = *($19)
	CALL eosio_assert([1], [144])
	$31 = (uint_64)$35 >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $31) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$98 }
	
.LOOP $label$99:
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$31) & (int_64)255) != (int_64)0) ){ goto $label$96 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$99 }
	
.LABEL $label$98
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$29 = [0]
	
.LABEL $label$95
	CALL eosio_assert($29, [208])
	*($15) = $32
	*((($36 + [240]) + [16])) = (int_64)1
	*((($36 + [240]) + [24])) = $35
	*($36 + [240]) = *($0)
	CALL $99($14, ($36 + [104]))
	CALL $57($0, ($36 + [8]), ($36 + [88]), ($36 + [72]), ($36 + [240]))
	if ( ((*($14) & [1]) == 0) ){ goto $label$100 }
	CALL $85(*((($36 + [240]) + [40])))
	
.LABEL $label$100
	if ( ((*($36 + [104]) & [1]) == 0) ){ goto $label$101 }
	CALL $85(*($24))
	
.LABEL $label$101
	$1 = *($18)
	if ( ($1 == 0) ){ goto $label$102 }
	$30 = *($25)
	if ( ((int_32)$30 == (int_32)$1) ){ goto $label$104 }
	
.LOOP $label$105:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$106 }
	CALL $85($29)
	
.LABEL $label$106
	if ( ((int_32)$1 != (int_32)$30) ){ goto $label$105 }
	$30 = *($18)
	goto $label$103 
	
.LABEL $label$104
	$30 = $1
	
.LABEL $label$103
	*($25) = $1
	CALL $85($30)
	
.LABEL $label$102
	$30 = *($36 + [160])
	$28 = ($28 + [1])
	if ( ((int_32)$28 != (int_32)((int_32)(*($36 + [164]) - $30) / (int_32)[12])) ){ goto $label$58 }
	
.LABEL $label$57
	CALL eosio_assert(((int_32)$26 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($26 + [104]) == (int_32)$2), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	$31 = *($26 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)$31), [2000])
	$35 = (int_64)
	*($26) = $35(*($26) - $27))
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [2048])
	CALL eosio_assert(((int_64)*($26) < (int_64)4611686018427387904), [2080])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($26 + [80]))), [1552])
	$35 = ((int_64)*($26 + [72]) + (int_64)$4)
	*($26 + [72]) = $35
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($26 + [72]) < (int_64)4611686018427387904), [1632])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($26 + [96]))), [1552])
	$35 = ((int_64)*($26 + [88]) + (int_64)$4)
	*($26 + [88]) = $35
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($26 + [88]) < (int_64)4611686018427387904), [1632])
	$31 = (uint_64)$31 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$31) == (int_64)(uint_64)*($26 + [8]) >> (uint_64)(int_64)8)), [480])
	*($36 + [128]) = (($36 + [240]) + [104])
	*($36 + [124]) = ($36 + [240])
	*($36 + [120]) = ($36 + [240])
	CALL $24(($36 + [120]), $26)
	CALL db_update_i64(*($26 + [108]), (int_64)0, ($36 + [240]), [104])
	$30 = ($0 + [32])
	if ( (uint_64)($31 <= *($30)) ){ goto $label$107 }
	*($30) = ((int_64)$31 + (int_64)1)
	
.LABEL $label$107
	$1 = *($36 + [160])
	if ( ($1 == 0) ){ goto $label$108 }
	$30 = *($36 + [164])
	if ( ((int_32)$30 == (int_32)$1) ){ goto $label$110 }
	$29 = ([0] - $1)
	$30 = ($30 + [-12])
	
.LOOP $label$111:
	if ( ((*($30) & [1]) == 0) ){ goto $label$112 }
	CALL $85(*(($30 + [8])))
	
.LABEL $label$112
	$30 = ($30 + [-12])
	if ( ((int_32)($30 + $29) != (int_32)[-12]) ){ goto $label$111 }
	$30 = *($36 + [160])
	goto $label$109 
	
.LABEL $label$110
	$30 = $1
	
.LABEL $label$109
	*($36 + [164]) = $1
	CALL $85($30)
	
.LABEL $label$108
	if ( ((*($36 + [176]) & [1]) == 0) ){ goto $label$113 }
	CALL $85(*($36 + [184]))
	
.LABEL $label$113
	if ( ((*($36 + [192]) & [1]) == 0) ){ goto $label$114 }
	CALL $85(*($36 + [200]))
	
.LABEL $label$114
	if ( ((*($36 + [208]) & [1]) == 0) ){ goto $label$115 }
	CALL $85(*($36 + [216]))
	
.LABEL $label$115
	$1 = *($36 + [224])
	if ( ($1 == 0) ){ goto $label$116 }
	$30 = *($36 + [228])
	if ( ((int_32)$30 == (int_32)$1) ){ goto $label$118 }
	$29 = ([0] - $1)
	$30 = ($30 + [-12])
	
.LOOP $label$119:
	if ( ((*($30) & [1]) == 0) ){ goto $label$120 }
	CALL $85(*(($30 + [8])))
	
.LABEL $label$120
	$30 = ($30 + [-12])
	if ( ((int_32)($30 + $29) != (int_32)[-12]) ){ goto $label$119 }
	$30 = *($36 + [224])
	goto $label$117 
	
.LABEL $label$118
	$30 = $1
	
.LABEL $label$117
	*($36 + [228]) = $1
	CALL $85($30)
	
.LABEL $label$116
	*([0] + [4]) = ($36 + [352])
	return (unreachable)
	
.LABEL $label$6
	CALL $86(($36 + [240]))
	
.LABEL $label$5
	CALL $86(($36 + [240]))
	(unreachable)
}

void .FUNC _ZN12egtblackjack6resultENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_64 $36
	int_64 $37
	int_32 $38
	$38 = (*([0] + [4]) - [576])
	*([0] + [4]) = $38
	$32 = (int_64)0
	$36 = (int_64)59
	$31 = [640]
	$33 = (int_64)0
	
.LOOP $label$1:
	$34 = (int_64)0
	if ( ((uint_64)$32 > (uint_64)(int_64)11) ){ goto $label$2 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$30 = ($30 + [165])
	goto $label$3 
	
.LABEL $label$4
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$34 = ((int_64)(CASTING uint_64)(uint_32 ($30 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$2
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$33 = ((int_64)$34 | (int_64)$33)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($33)
	CALL prints([2576])
	$31 = *($1)
	$30 = ($31 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $30 ), ( *($1 + [4]) ? uint_32($31 >> [1]) : $30 ))
	*($38 + [552]) = [0]
	*($38 + [544]) = (int_64)0
	*(($38 + [48])) = [0]
	*($38 + [40]) = (int_64)0
	$31 = CALL strlen([1104])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$12 }
	*($38 + [40]) = ($31 << [1])
	$30 = (($38 + [40]) | [1])
	if ( $31 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$13 = (($31 + [16]) & [-16])
	$30 = CALL $84($13)
	*($38 + [40]) = ($13 | [1])
	*($38 + [48]) = $30
	*($38 + [44]) = $31
	
.LABEL $label$11
	CALL memcpy($30, [1104], $31)
	
.LABEL $label$10
	*(($30 + $31)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($1, ($38 + [544]), ($38 + [40]))
	if ( ((*($38 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $85(*($38 + [48]))
	
.LABEL $label$13
	$31 = *($38 + [544])
	$30 = *($38 + [548])
	CALL prints([2608])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($30 - $31) / (int_32)[12])))
	CALL eosio_assert(((uint_32)((int_32)(*($38 + [548]) - *($38 + [544])) / (int_32)[12]) > (uint_32)[4]), [2640])
	CALL $99(($38 + [528]), *($38 + [544]))
	CALL $99(($38 + [512]), (*($38 + [544]) + [12]))
	CALL $99(($38 + [496]), (*($38 + [544]) + [24]))
	CALL $99(($38 + [480]), (*($38 + [544]) + [36]))
	CALL $99(($38 + [464]), (*($38 + [544]) + [48]))
	CALL $99(($38 + [448]), (*($38 + [544]) + [60]))
	CALL $99(($38 + [432]), (*($38 + [544]) + [72]))
	*(($38 + [424])) = [0]
	*($38 + [416]) = (int_64)0
	$31 = CALL strlen([992])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$16 }
	*($38 + [416]) = ($31 << [1])
	$1 = (($38 + [416]) | [1])
	if ( $31 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$30 = (($31 + [16]) & [-16])
	$1 = CALL $84($30)
	*($38 + [416]) = ($30 | [1])
	*($38 + [424]) = $1
	*($38 + [420]) = $31
	
.LABEL $label$15
	CALL memcpy($1, [992], $31)
	
.LABEL $label$14
	$30 = [0]
	*(($1 + $31)) = [0]
	$31 = *($38 + [544])
	if ( (((int_32)(*($38 + [548]) - $31) / (int_32)[12]) <= [8]) ){ goto $label$17 }
	CALL $87(($38 + [416]), ($31 + [84]))
	
.LABEL $label$17
	$36 = *($0 + [8])
	$33 = CALL atoll(( *($38 + [456]) ? (($38 + [448]) | [1]) : (*($38 + [448]) & [1]) ))
	CALL eosio_assert((uint_64)(((int_64)$33 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$32 = (uint_64)$36 >> (uint_64)(int_64)8)
	
.LOOP $label$20:
	$31 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $32) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$1 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$1 = [0]
	
.LABEL $label$18
	CALL eosio_assert($1, [208])
	$3 = *(($0 + [8]))
	$2 = CALL atoll(( *($38 + [440]) ? (($38 + [432]) | [1]) : (*($38 + [432]) & [1]) ))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$32 = (uint_64)$3 >> (uint_64)(int_64)8)
	
.LOOP $label$25:
	$30 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $32) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$1 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$1 = [0]
	
.LABEL $label$23
	CALL eosio_assert($1, [208])
	$34 = *(($0 + [8]))
	$35 = CALL atoll(( *($38 + [488]) ? (($38 + [480]) | [1]) : (*($38 + [480]) & [1]) ))
	CALL eosio_assert((uint_64)(((int_64)$35 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$32 = (uint_64)$34 >> (uint_64)(int_64)8)
	
.LOOP $label$29:
	$31 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $32) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$31 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	CALL eosio_assert($31, [208])
	$31 = *($38 + [496])
	if ( (( *($38 + [500]) ? uint_32($31 >> [1]) : ($31 & [1]) ) == 0) ){ goto $label$32 }
	*($38 + [48]) = [0]
	*($38 + [40]) = (int_64)0
	*(($38 + [112])) = [0]
	*($38 + [104]) = (int_64)0
	$31 = CALL strlen([2288])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$35 }
	*($38 + [104]) = ($31 << [1])
	$30 = (($38 + [104]) | [1])
	if ( $31 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$1 = (($31 + [16]) & [-16])
	$30 = CALL $84($1)
	*($38 + [104]) = ($1 | [1])
	*($38 + [112]) = $30
	*($38 + [108]) = $31
	
.LABEL $label$34
	CALL memcpy($30, [2288], $31)
	
.LABEL $label$33
	*(($30 + $31)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_(($38 + [496]), ($38 + [40]), ($38 + [104]))
	if ( ((*($38 + [104]) & [1]) == 0) ){ goto $label$36 }
	CALL $85(*($38 + [112]))
	
.LABEL $label$36
	$31 = *($38 + [40])
	$30 = *($38 + [44])
	CALL prints([2672])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($30 - $31) / (int_32)[12])))
	$31 = *($38 + [40])
	CALL prints([2704])
	$30 = *($31)
	$1 = ($30 & [1])
	CALL prints_l(( *($31 + [8]) ? ($31 + [1]) : $1 ), ( *($31 + [4]) ? uint_32($30 >> [1]) : $1 ))
	$1 = *($38 + [40])
	$31 = *($38 + [44])
	if ( ((int_32)$31 == (int_32)$1) ){ goto $label$37 }
	CALL _ZNSt3__19to_stringEj(($38 + [104]), ((int_32)($31 - $1) / (int_32)[12]))
	$1 = *($38 + [40])
	if ( ((int_32)*($38 + [44]) == (int_32)$1) ){ goto $label$38 }
	$31 = [0]
	$30 = [0]
	
.LOOP $label$39:
	CALL $99(($38 + [400]), ($38 + [528]))
	CALL $99(($38 + [384]), ($38 + [512]))
	CALL $99(($38 + [368]), (*($38 + [40]) + $31))
	*(($1 = (($38 + [352]) + [8]))) = $34
	*($38 + [352]) = $35
	CALL $99(($38 + [336]), ($38 + [464]))
	CALL $99(($38 + [320]), ($38 + [104]))
	CALL $99(($38 + [304]), ($38 + [496]))
	CALL $99(($38 + [288]), ($38 + [416]))
	*(($13 = (($38 + [272]) + [8]))) = $36
	*((($38 + [24]) + [8])) = *($1)
	*((($38 + [8]) + [8])) = *($13)
	*($38 + [272]) = $33
	*($38 + [24]) = *($38 + [352])
	*($38 + [8]) = *($38 + [272])
	CALL _ZN12egtblackjack13processWinnerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_N5eosio5assetES6_S6_S6_S6_S8_($0, ($38 + [400]), ($38 + [384]), ($38 + [368]), ($38 + [24]), $31, ($38 + [320]), ($38 + [304]), ($38 + [288]), ($38 + [8]))
	if ( ((*($38 + [288]) & [1]) == 0) ){ goto $label$40 }
	CALL $85(*((($38 + [288]) + [8])))
	
.LABEL $label$40
	if ( ((*($38 + [304]) & [1]) == 0) ){ goto $label$41 }
	CALL $85(*((($38 + [304]) + [8])))
	
.LABEL $label$41
	if ( ((*($38 + [320]) & [1]) == 0) ){ goto $label$42 }
	CALL $85(*((($38 + [320]) + [8])))
	
.LABEL $label$42
	if ( ((*($38 + [336]) & [1]) == 0) ){ goto $label$43 }
	CALL $85(*((($38 + [336]) + [8])))
	
.LABEL $label$43
	if ( ((*($38 + [368]) & [1]) == 0) ){ goto $label$44 }
	CALL $85(*((($38 + [368]) + [8])))
	
.LABEL $label$44
	if ( ((*($38 + [384]) & [1]) == 0) ){ goto $label$45 }
	CALL $85(*((($38 + [384]) + [8])))
	
.LABEL $label$45
	if ( ((*($38 + [400]) & [1]) == 0) ){ goto $label$46 }
	CALL $85(*((($38 + [400]) + [8])))
	
.LABEL $label$46
	$31 = ($31 + [12])
	$1 = *($38 + [40])
	$30 = ($30 + [1])
	if ( ((int_32)$30 != (int_32)((int_32)(*($38 + [44]) - $1) / (int_32)[12])) ){ goto $label$39 }
	
.LABEL $label$38
	if ( ((*($38 + [104]) & [1]) == 0) ){ goto $label$37 }
	CALL $85(*($38 + [112]))
	$1 = *($38 + [40])
	
.LABEL $label$37
	if ( ($1 == 0) ){ goto $label$32 }
	$31 = *($38 + [44])
	if ( ((int_32)$31 == (int_32)$1) ){ goto $label$48 }
	$30 = ([0] - $1)
	$31 = ($31 + [-12])
	
.LOOP $label$49:
	if ( ((*($31) & [1]) == 0) ){ goto $label$50 }
	CALL $85(*(($31 + [8])))
	
.LABEL $label$50
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $30) != (int_32)[-12]) ){ goto $label$49 }
	$31 = *($38 + [40])
	goto $label$47 
	
.LABEL $label$48
	$31 = $1
	
.LABEL $label$47
	*($38 + [44]) = $1
	CALL $85($31)
	
.LABEL $label$32
	if ( (((int_32)(*($38 + [548]) - *($38 + [544])) / (int_32)[12]) <= [8]) ){ goto $label$51 }
	CALL $93(($38 + [224]), [2736], ($38 + [528]))
	$31 = CALL $91(($38 + [224]), [1104])
	$30 = ($31 + [8])
	*((($38 + [240]) + [8])) = *($30)
	*($38 + [240]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [512])
	$30 = ($31 & [1])
	$4 = (($38 + [512]) | [1])
	$31 = CALL $90(($38 + [240]), ( *($38 + [520]) ? $4 : $30 ), ( *($38 + [516]) ? uint_32($31 >> [1]) : $30 ))
	$30 = ($31 + [8])
	*((($38 + [560]) + [8])) = *($30)
	*($38 + [560]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = CALL $91(($38 + [560]), [2752])
	$30 = ($31 + [8])
	*((($38 + [88]) + [8])) = *($30)
	*($38 + [88]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [496])
	$30 = ($31 & [1])
	$5 = (($38 + [496]) | [1])
	$31 = CALL $90(($38 + [88]), ( *($38 + [504]) ? $5 : $30 ), ( *($38 + [500]) ? uint_32($31 >> [1]) : $30 ))
	$30 = ($31 + [8])
	*((($38 + [104]) + [8])) = *($30)
	*($38 + [104]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = CALL $91(($38 + [104]), [2784])
	$30 = ($31 + [8])
	*((($38 + [40]) + [8])) = *($30)
	*($38 + [40]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [416])
	$30 = ($31 & [1])
	$6 = (($38 + [416]) | [1])
	$31 = CALL $90(($38 + [40]), ( *($38 + [424]) ? $6 : $30 ), ( *($38 + [420]) ? uint_32($31 >> [1]) : $30 ))
	$30 = ($31 + [8])
	*((($38 + [256]) + [8])) = *($30)
	*($38 + [256]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	if ( ((*($38 + [40]) & [1]) == 0) ){ goto $label$52 }
	CALL $85(*($38 + [48]))
	
.LABEL $label$52
	if ( ((*($38 + [104]) & [1]) == 0) ){ goto $label$53 }
	CALL $85(*($38 + [112]))
	
.LABEL $label$53
	if ( ((*($38 + [88]) & [1]) == 0) ){ goto $label$54 }
	CALL $85(*($38 + [96]))
	
.LABEL $label$54
	if ( ((*($38 + [560]) & [1]) == 0) ){ goto $label$55 }
	CALL $85(*($38 + [568]))
	
.LABEL $label$55
	if ( ((*($38 + [240]) & [1]) == 0) ){ goto $label$56 }
	CALL $85(*($38 + [248]))
	
.LABEL $label$56
	if ( ((*($38 + [224]) & [1]) == 0) ){ goto $label$57 }
	CALL $85(*($38 + [232]))
	
.LABEL $label$57
	*($38 + [248]) = [0]
	*($38 + [240]) = (int_64)0
	*(($38 + [48])) = [0]
	*($38 + [40]) = (int_64)0
	$31 = CALL strlen([2288])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$60 }
	*($38 + [40]) = ($31 << [1])
	$30 = (($38 + [40]) | [1])
	if ( $31 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$1 = (($31 + [16]) & [-16])
	$30 = CALL $84($1)
	*($38 + [40]) = ($1 | [1])
	*($38 + [48]) = $30
	*($38 + [44]) = $31
	
.LABEL $label$59
	CALL memcpy($30, [2288], $31)
	
.LABEL $label$58
	*(($30 + $31)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_(($38 + [416]), ($38 + [240]), ($38 + [40]))
	if ( ((*($38 + [40]) & [1]) == 0) ){ goto $label$61 }
	CALL $85(*($38 + [48]))
	
.LABEL $label$61
	$30 = *($38 + [240])
	$31 = *($38 + [244])
	if ( ((int_32)$31 == (int_32)$30) ){ goto $label$62 }
	$11 = (($38 + [40]) + [32])
	$10 = (($38 + [176]) | [1])
	$9 = (($38 + [192]) | [1])
	$8 = (($38 + [208]) | [1])
	$7 = (($38 + [224]) | [1])
	$15 = (($38 + [224]) + [8])
	$23 = (($38 + [40]) + [16])
	$24 = ($38 + [132])
	$26 = (($38 + [40]) + [40])
	$25 = ($38 + [124])
	$27 = [0]
	
.LOOP $label$63:
	CALL $99(($38 + [224]), ($30 + ((int_32)$27 * (int_32)[12])))
	$30 = *($38 + [228])
	$31 = *($38 + [224])
	CALL prints([2800])
	$1 = *($38 + [224])
	$13 = ($1 & [1])
	CALL prints_l(( *($15) ? $7 : $13 ), ( *($38 + [228]) ? uint_32($1 >> [1]) : $13 ))
	CALL prints([2816])
	CALL printui((CASTING uint_64)(uint_32 ( $30 ? uint_32($31 >> [1]) : ($31 & [1]) )))
	$31 = *($38 + [224])
	CALL eosio_assert(((uint_32)( *($38 + [228]) ? uint_32($31 >> [1]) : ($31 & [1]) ) > (uint_32)[9]), [2848])
	$1 = *($38 + [224])
	$13 = *($15)
	$16 = *($38 + [228])
	$31 = [0]
	$30 = CALL strlen([2880])
	if ( ($30 == 0) ){ goto $label$64 }
	$1 = ( $16 ? uint_32($1 >> [1]) : $31 )
	$31 = ($1 & [1])
	$12 = ( $13 ? $7 : $31 )
	$13 = ($12 + $1)
	$31 = $13
	if ( ((int_32)$1 < (int_32)$30) ){ goto $label$65 }
	$31 = $12
	
.LOOP $label$67:
	$1 = (($1 - $30) + [1])
	if ( ($1 == 0) ){ goto $label$66 }
	$31 = CALL memchr($31, [40], $1)
	if ( ($31 == 0) ){ goto $label$66 }
	if ( (CALL memcmp($31, [2880], $30) == 0) ){ goto $label$65 }
	$31 = ($31 + [1])
	$1 = ($13 - $31)
	if ( ((int_32)$1 >= (int_32)$30) ){ goto $label$67 }
	
.LABEL $label$66
	$31 = $13
	
.LABEL $label$65
	$31 = ( [-1] ? ($31 - $12) : ((int_32)$31 == (int_32)$13) )
	
.LABEL $label$64
	CALL eosio_assert(((int_32)$31 != (int_32)[-1]), [2896])
	CALL $100(($38 + [208]), ($38 + [224]), [0], [1], ($38 + [224]))
	CALL prints([2928])
	$30 = *($38 + [208])
	$1 = ($30 & [1])
	$12 = (($38 + [208]) + [8])
	CALL prints_l(( *($12) ? $8 : $1 ), ( *($38 + [212]) ? uint_32($30 >> [1]) : $1 ))
	CALL $100(($38 + [192]), ($38 + [224]), [2], ($31 + [-2]), ($38 + [224]))
	CALL prints([2960])
	$30 = *($38 + [192])
	$1 = ($30 & [1])
	$16 = (($38 + [192]) + [8])
	CALL prints_l(( *($16) ? $9 : $1 ), ( *($38 + [196]) ? uint_32($30 >> [1]) : $1 ))
	$30 = *($38 + [224])
	CALL $100(($38 + [176]), ($38 + [224]), ($31 + [1]), (( *($38 + [228]) ? uint_32($30 >> [1]) : ($30 & [1]) ) - $31), ($38 + [224]))
	CALL prints([2992])
	$31 = *($38 + [176])
	$30 = ($31 & [1])
	$17 = (($38 + [176]) + [8])
	CALL prints_l(( *($17) ? $10 : $30 ), ( *($38 + [180]) ? uint_32($31 >> [1]) : $30 ))
	$29 = *(($0 + [8]))
	CALL eosio_assert([1], [144])
	$32 = (uint_64)$29 >> (uint_64)(int_64)8)
	$31 = [0]
	
.LOOP $label$70:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $32) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$69 }
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	
.LOOP $label$72:
	$32 = (uint_64)$32 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$32) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$72 }
	
.LABEL $label$71
	$30 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	$30 = [0]
	
.LABEL $label$68
	CALL eosio_assert($30, [208])
	$28 = (int_64)1
	$31 = *($38 + [208])
	$30 = CALL strlen([768])
	if ( ((int_32)$30 != (int_32)( *($38 + [212]) ? uint_32($31 >> [1]) : ($31 & [1]) )) ){ goto $label$73 }
	if ( CALL $92(($38 + [208]), [0], [-1], [768], $30) ){ goto $label$73 }
	CALL $93(($38 + [144]), [2736], ($38 + [528]))
	$31 = CALL $91(($38 + [144]), [1104])
	$30 = ($31 + [8])
	*(($18 = (($38 + [160]) + [8]))) = *($30)
	*($38 + [160]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [512])
	$30 = ($31 & [1])
	$31 = CALL $90(($38 + [160]), ( *((($38 + [512]) + [8])) ? $4 : $30 ), ( *($38 + [516]) ? uint_32($31 >> [1]) : $30 ))
	$30 = ($31 + [8])
	*(($19 = (($38 + [560]) + [8]))) = *($30)
	*($38 + [560]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = CALL $91(($38 + [560]), [3024])
	$30 = ($31 + [8])
	*(($20 = (($38 + [88]) + [8]))) = *($30)
	*($38 + [88]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [496])
	$30 = ($31 & [1])
	$31 = CALL $90(($38 + [88]), ( *((($38 + [496]) + [8])) ? $5 : $30 ), ( *($38 + [500]) ? uint_32($31 >> [1]) : $30 ))
	$30 = ($31 + [8])
	*(($21 = (($38 + [104]) + [8]))) = *($30)
	*($38 + [104]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = CALL $91(($38 + [104]), [2784])
	$30 = ($31 + [8])
	*(($22 = (($38 + [40]) + [8]))) = *($30)
	*($38 + [40]) = *($31)
	*($31) = [0]
	*(($31 + [4])) = [0]
	*($30) = [0]
	$31 = *($38 + [416])
	$30 = ($31 & [1])
	$31 = CALL $90(($38 + [40]), ( *((($38 + [416]) + [8])) ? $6 : $30 ), ( *($38 + [420]) ? uint_32($31 >> [1]) : $30 ))
	$30 = *($31)
	*($31) = [0]
	$1 = *($31 + [4])
	*($31 + [4]) = [0]
	$13 = *($31 + [8])
	*($31 + [8]) = [0]
	if ( (*($38 + [256]) & [1]) ){ goto $label$75 }
	*($38 + [256]) = [0]
	goto $label$74 
	
.LABEL $label$75
	*(*((($38 + [256]) + [8]))) = [0]
	*($38 + [260]) = [0]
	
.LABEL $label$74
	CALL $89(($38 + [256]), [0])
	*((($38 + [256]) + [8])) = $13
	*($38 + [256]) = $30
	*($38 + [260]) = $1
	if ( ((*($38 + [40]) & [1]) == 0) ){ goto $label$76 }
	CALL $85(*($22))
	
.LABEL $label$76
	if ( ((*($38 + [104]) & [1]) == 0) ){ goto $label$77 }
	CALL $85(*($21))
	
.LABEL $label$77
	if ( ((*($38 + [88]) & [1]) == 0) ){ goto $label$78 }
	CALL $85(*($20))
	
.LABEL $label$78
	if ( ((*($38 + [560]) & [1]) == 0) ){ goto $label$79 }
	CALL $85(*($19))
	
.LABEL $label$79
	if ( ((*($38 + [160]) & [1]) == 0) ){ goto $label$80 }
	CALL $85(*($18))
	
.LABEL $label$80
	if ( ((*($38 + [144]) & [1]) == 0) ){ goto $label$81 }
	CALL $85(*((($38 + [144]) + [8])))
	
.LABEL $label$81
	$28 = $2
	$29 = $3
	
.LABEL $label$73
	$31 = ( *($16) ? $9 : (*($38 + [192]) & [1]) )
	$30 = [-1]
	
.LOOP $label$82:
	$1 = ($31 + $30)
	$13 = ($30 + [1])
	$30 = $13
	if ( *(($1 + [1])) ){ goto $label$82 }
	$35 = (CASTING uint_64)(uint_32 $13)
	$32 = (int_64)0
	$36 = (int_64)59
	$33 = (int_64)0
	
.LOOP $label$83:
	$34 = (int_64)0
	if ( ((uint_64)$32 >= (uint_64)$35) ){ goto $label$84 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$30 = ($30 + [165])
	goto $label$85 
	
.LABEL $label$86
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$34 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	if ( ((uint_64)$32 > (uint_64)(int_64)11) ){ goto $label$88 }
	$34 = ((int_64)((int_64)$34 & (int_64)31) << (int_64)((int_64)$36 & (int_64)4294967295))
	goto $label$87 
	
.LABEL $label$88
	$34 = ((int_64)$34 & (int_64)15)
	
.LABEL $label$87
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$33 = ((int_64)$34 | (int_64)$33)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$83 }
	$14 = *($0)
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [592]
	$35 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$32 > (uint_64)(int_64)5) ){ goto $label$94 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$30 = ($30 + [165])
	goto $label$92 
	
.LABEL $label$94
	$36 = (int_64)0
	if ( ((uint_64)$32 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$90
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$35 = ((int_64)$36 | (int_64)$35)
	$34 = ((int_64)$34 + (int_64)-5)
	if ( ((int_64)$34 != (int_64)-6) ){ goto $label$89 }
	*((($38 + [88]) + [8])) = $35
	*($38 + [88]) = $14
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [128]
	$35 = (int_64)0
	
.LOOP $label$95:
	if ( ((uint_64)$32 > (uint_64)(int_64)10) ){ goto $label$100 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$30 = ($30 + [165])
	goto $label$98 
	
.LABEL $label$100
	$36 = (int_64)0
	if ( ((int_64)$32 == (int_64)11) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$99
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$97
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$96
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)-5)
	$35 = ((int_64)$36 | (int_64)$35)
	$32 = ((int_64)$32 + (int_64)1)
	if ( ((int_64)$32 != (int_64)13) ){ goto $label$95 }
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [112]
	$37 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$32 > (uint_64)(int_64)7) ){ goto $label$106 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$30 = ($30 + [165])
	goto $label$104 
	
.LABEL $label$106
	$36 = (int_64)0
	if ( ((uint_64)$32 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$102
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$37 = ((int_64)$36 | (int_64)$37)
	$34 = ((int_64)$34 + (int_64)-5)
	if ( ((int_64)$34 != (int_64)-6) ){ goto $label$101 }
	*((($38 + [40]) + [8])) = $33
	*($23) = $28
	*((($38 + [40]) + [24])) = $29
	*($38 + [40]) = $14
	CALL $99($11, ($38 + [256]))
	CALL $29(($38 + [560]), CALL $54(($38 + [104]), ($38 + [88]), $35, $37, ($38 + [40])))
	$31 = *($38 + [560])
	CALL send_inline($31, (*($38 + [564]) - $31))
	$31 = *($38 + [560])
	if ( ($31 == 0) ){ goto $label$107 }
	*($38 + [564]) = $31
	CALL $85($31)
	
.LABEL $label$107
	$31 = *($24)
	if ( ($31 == 0) ){ goto $label$108 }
	*((($38 + [104]) + [32])) = $31
	CALL $85($31)
	
.LABEL $label$108
	$31 = *((($38 + [104]) + [16]))
	if ( ($31 == 0) ){ goto $label$109 }
	*($25) = $31
	CALL $85($31)
	
.LABEL $label$109
	if ( ((*($11) & [1]) == 0) ){ goto $label$110 }
	CALL $85(*($26))
	
.LABEL $label$110
	if ( ((*($38 + [176]) & [1]) == 0) ){ goto $label$111 }
	CALL $85(*($17))
	
.LABEL $label$111
	if ( ((*($38 + [192]) & [1]) == 0) ){ goto $label$112 }
	CALL $85(*($16))
	
.LABEL $label$112
	if ( ((*($38 + [208]) & [1]) == 0) ){ goto $label$113 }
	CALL $85(*($12))
	
.LABEL $label$113
	if ( ((*($38 + [224]) & [1]) == 0) ){ goto $label$114 }
	CALL $85(*($15))
	
.LABEL $label$114
	$30 = *($38 + [240])
	$31 = *($38 + [244])
	$27 = ($27 + [1])
	if ( ((int_32)$27 != (int_32)((int_32)($31 - $30) / (int_32)[12])) ){ goto $label$63 }
	
.LABEL $label$62
	if ( ($30 == 0) ){ goto $label$115 }
	if ( ((int_32)$31 == (int_32)$30) ){ goto $label$117 }
	$1 = ([0] - $30)
	$31 = ($31 + [-12])
	
.LOOP $label$118:
	if ( ((*($31) & [1]) == 0) ){ goto $label$119 }
	CALL $85(*(($31 + [8])))
	
.LABEL $label$119
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $1) != (int_32)[-12]) ){ goto $label$118 }
	$31 = *($38 + [240])
	goto $label$116 
	
.LABEL $label$117
	$31 = $30
	
.LABEL $label$116
	*($38 + [244]) = $30
	CALL $85($31)
	
.LABEL $label$115
	if ( ((*($38 + [256]) & [1]) == 0) ){ goto $label$51 }
	CALL $85(*($38 + [264]))
	
.LABEL $label$51
	$32 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$27 = *(($0 + [40]))
	$1 = *(($0 + [44]))
	if ( ((int_32)$1 == (int_32)$27) ){ goto $label$120 }
	$31 = ($1 + [-24])
	$13 = ([0] - $27)
	
.LOOP $label$121:
	if ( ((int_64)(uint_64)*(*($31) + [8]) >> (uint_64)(int_64)8) == (int_64)$32) ){ goto $label$120 }
	$1 = $31
	$30 = ($31 + [-24])
	$31 = $30
	if ( ((int_32)($30 + $13) != (int_32)[-24]) ){ goto $label$121 }
	
.LABEL $label$120
	$13 = ($0 + [16])
	if ( ((int_32)$1 == (int_32)$27) ){ goto $label$123 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$13), [256])
	goto $label$122 
	
.LABEL $label$123
	$1 = [0]
	$31 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $32)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$122 }
	$1 = CALL $23($13, $31)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$13), [256])
	
.LABEL $label$122
	if ( ((int_64)*($1 + [88]) < (int_64)1001) ){ goto $label$124 }
	$35 = *($0)
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [592]
	$33 = (int_64)0
	
.LOOP $label$125:
	if ( ((uint_64)$32 > (uint_64)(int_64)5) ){ goto $label$130 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$30 = ($30 + [165])
	goto $label$128 
	
.LABEL $label$130
	$36 = (int_64)0
	if ( ((uint_64)$32 <= (uint_64)(int_64)11) ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$129
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$127
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$126
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$33 = ((int_64)$36 | (int_64)$33)
	$34 = ((int_64)$34 + (int_64)-5)
	if ( ((int_64)$34 != (int_64)-6) ){ goto $label$125 }
	*($38 + [96]) = $33
	*($38 + [88]) = $35
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [128]
	$33 = (int_64)0
	
.LOOP $label$131:
	if ( ((uint_64)$32 > (uint_64)(int_64)10) ){ goto $label$136 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$135 }
	$30 = ($30 + [165])
	goto $label$134 
	
.LABEL $label$136
	$36 = (int_64)0
	if ( ((int_64)$32 == (int_64)11) ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$135
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$134
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$133
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$132
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)-5)
	$33 = ((int_64)$36 | (int_64)$33)
	$32 = ((int_64)$32 + (int_64)1)
	if ( ((int_64)$32 != (int_64)13) ){ goto $label$131 }
	$32 = (int_64)0
	$34 = (int_64)59
	$31 = [112]
	$35 = (int_64)0
	
.LOOP $label$137:
	if ( ((uint_64)$32 > (uint_64)(int_64)7) ){ goto $label$142 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$141 }
	$30 = ($30 + [165])
	goto $label$140 
	
.LABEL $label$142
	$36 = (int_64)0
	if ( ((uint_64)$32 <= (uint_64)(int_64)11) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$140
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56)
	
.LABEL $label$139
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$34 & (int_64)4294967295))
	
.LABEL $label$138
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$35 = ((int_64)$36 | (int_64)$35)
	$34 = ((int_64)$34 + (int_64)-5)
	if ( ((int_64)$34 != (int_64)-6) ){ goto $label$137 }
	$32 = (int_64)0
	$36 = (int_64)59
	$31 = [608]
	$37 = (int_64)0
	
.LOOP $label$143:
	$34 = (int_64)0
	if ( ((uint_64)$32 > (uint_64)(int_64)11) ){ goto $label$144 }
	$30 = *($31)
	if ( ((uint_32)(($30 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$146 }
	$30 = ($30 + [165])
	goto $label$145 
	
.LABEL $label$146
	$30 = ( ($30 + [208]) ? [0] : ((($30 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$145
	$34 = ((int_64)(CASTING uint_64)(uint_32 ($30 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$144
	$31 = ($31 + [1])
	$32 = ((int_64)$32 + (int_64)1)
	$37 = ((int_64)$34 | (int_64)$37)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$143 }
	*(($38 + [264])) = [0]
	*($38 + [256]) = (int_64)0
	$31 = CALL strlen([3056])
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$5 }
	$30 = ($1 + [88])
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$149 }
	*($38 + [256]) = ($31 << [1])
	$27 = (($38 + [256]) | [1])
	if ( $31 ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$149
	$15 = (($31 + [16]) & [-16])
	$27 = CALL $84($15)
	*($38 + [256]) = ($15 | [1])
	*($38 + [264]) = $27
	*($38 + [260]) = $31
	
.LABEL $label$148
	CALL memcpy($27, [3056], $31)
	
.LABEL $label$147
	*(($27 + $31)) = [0]
	*(($38 + [68])) = *(($30 + [12]))
	*(($38 + [64])) = *(($30 + [8]))
	*(($38 + [60])) = *(($30 + [4]))
	*($38 + [48]) = $37
	*($38 + [40]) = *($0)
	*($38 + [56]) = *($30)
	$31 = (($38 + [256]) + [8])
	*(($38 + [80])) = *($31)
	*($38 + [72]) = *($38 + [256])
	*($38 + [256]) = [0]
	*($38 + [260]) = [0]
	*($31) = [0]
	$31 = CALL $54(($38 + [104]), ($38 + [88]), $33, $35, ($38 + [40]))
	CALL $29(($38 + [560]), $31)
	$30 = *($38 + [560])
	CALL send_inline($30, (*($38 + [564]) - $30))
	$30 = *($38 + [560])
	if ( ($30 == 0) ){ goto $label$150 }
	*($38 + [564]) = $30
	CALL $85($30)
	
.LABEL $label$150
	$30 = *($31 + [28])
	if ( ($30 == 0) ){ goto $label$151 }
	*(($31 + [32])) = $30
	CALL $85($30)
	
.LABEL $label$151
	$30 = *($31 + [16])
	if ( ($30 == 0) ){ goto $label$152 }
	*(($31 + [20])) = $30
	CALL $85($30)
	
.LABEL $label$152
	if ( ((*(($38 + [72])) & [1]) == 0) ){ goto $label$153 }
	CALL $85(*(($38 + [80])))
	
.LABEL $label$153
	if ( ((*($38 + [256]) & [1]) == 0) ){ goto $label$154 }
	CALL $85(*(($38 + [264])))
	
.LABEL $label$154
	*($38 + [40]) = $0
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [320])
	CALL $68($13, $1, ($38 + [40]))
	
.LABEL $label$124
	if ( ((*($38 + [416]) & [1]) == 0) ){ goto $label$155 }
	CALL $85(*($38 + [424]))
	
.LABEL $label$155
	if ( ((*($38 + [432]) & [1]) == 0) ){ goto $label$156 }
	CALL $85(*(($38 + [440])))
	
.LABEL $label$156
	if ( ((*($38 + [448]) & [1]) == 0) ){ goto $label$157 }
	CALL $85(*(($38 + [456])))
	
.LABEL $label$157
	if ( ((*($38 + [464]) & [1]) == 0) ){ goto $label$158 }
	CALL $85(*($38 + [472]))
	
.LABEL $label$158
	if ( ((*($38 + [480]) & [1]) == 0) ){ goto $label$159 }
	CALL $85(*(($38 + [488])))
	
.LABEL $label$159
	if ( ((*($38 + [496]) & [1]) == 0) ){ goto $label$160 }
	CALL $85(*($38 + [504]))
	
.LABEL $label$160
	if ( ((*($38 + [512]) & [1]) == 0) ){ goto $label$161 }
	CALL $85(*($38 + [520]))
	
.LABEL $label$161
	if ( ((*($38 + [528]) & [1]) == 0) ){ goto $label$162 }
	CALL $85(*($38 + [536]))
	
.LABEL $label$162
	$1 = *($38 + [544])
	if ( ($1 == 0) ){ goto $label$163 }
	$31 = *($38 + [548])
	if ( ((int_32)$31 == (int_32)$1) ){ goto $label$165 }
	$30 = ([0] - $1)
	$31 = ($31 + [-12])
	
.LOOP $label$166:
	if ( ((*($31) & [1]) == 0) ){ goto $label$167 }
	CALL $85(*(($31 + [8])))
	
.LABEL $label$167
	$31 = ($31 + [-12])
	if ( ((int_32)($31 + $30) != (int_32)[-12]) ){ goto $label$166 }
	$31 = *($38 + [544])
	goto $label$164 
	
.LABEL $label$165
	$31 = $1
	
.LABEL $label$164
	*($38 + [548]) = $1
	CALL $85($31)
	
.LABEL $label$163
	*([0] + [4]) = ($38 + [576])
	return (unreachable)
	
.LABEL $label$9
	CALL $86(($38 + [40]))
	
.LABEL $label$8
	CALL $86(($38 + [416]))
	
.LABEL $label$7
	CALL $86(($38 + [104]))
	
.LABEL $label$6
	CALL $86(($38 + [40]))
	
.LABEL $label$5
	CALL $86(($38 + [256]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

int_32 .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = (int_64)1397703940
	*($0) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	$6 = ($0 + [16])
	$5 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (int_64)5459781)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $23($6, $5) + [104]) == (int_32)$6), [256])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($8 + [8]), $6, *($0), $8)
	
.LABEL $label$1
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$4:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$3 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$2), [256])
	if ( $6 ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $32($2, $6) + [64]) == (int_32)$2), [256])
	goto $label$5 
	
.LABEL $label$6
	CALL $74(($8 + [8]), $2, *($0), $8)
	
.LABEL $label$5
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$9:
	if ( ((int_64)*(*($6)) == (int_64)1) ){ goto $label$8 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$12 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$2), [256])
	if ( $6 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $32($2, $6) + [64]) == (int_32)$2), [256])
	goto $label$10 
	
.LABEL $label$11
	CALL $75(($8 + [8]), $2, *($0), $8)
	
.LABEL $label$10
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$13 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$14:
	if ( ((int_64)*(*($6)) == (int_64)5) ){ goto $label$13 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$17 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$2), [256])
	if ( $6 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $32($2, $6) + [64]) == (int_32)$2), [256])
	goto $label$15 
	
.LABEL $label$16
	CALL $76(($8 + [8]), $2, *($0), $8)
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN12egtblackjack8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [208])
	*([0] + [4]) = $10
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	CALL prints([816])
	CALL $41(($3 + [8]), [1])
	CALL prints([832])
	CALL printi(*($3))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($0 + [8])), [848])
	$9 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$4
	CALL eosio_assert($9, [880])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [912])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$10 }
	$5 = ($4 + [4])
	$8 = uint_32($8 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$5 = ($4 + [4])
	$8 = *($4 + [4])
	
.LABEL $label$9
	CALL eosio_assert(($8 <= [257]), [944])
	CALL prints([976])
	$7 = ($4 + [4])
	$8 = *($4)
	$9 = ($8 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $9 ), ( *($7) ? uint_32($8 >> [1]) : $9 ))
	$8 = *($4)
	$9 = CALL strlen([992])
	if ( ((int_32)$9 != (int_32)( *($7) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$31 }
	if ( (CALL $92($4, [0], [-1], [992], $9) == 0) ){ goto $label$30 }
	$8 = *($4)
	
.LABEL $label$31
	if ( ($8 & [1]) ){ goto $label$33 }
	$8 = uint_32(($8 & [254]) >> [1])
	goto $label$32 
	
.LABEL $label$33
	$8 = *($5)
	
.LABEL $label$32
	if ( ($8 <= [8]) ){ goto $label$30 }
	CALL $100(($10 + [192]), $4, [0], [8], $4)
	$8 = *($10 + [192])
	$9 = CALL strlen([1008])
	if ( ((int_32)$9 != (int_32)( *($10 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$34 }
	if ( (CALL $92(($10 + [192]), [0], [-1], [1008], $9) == 0) ){ goto $label$29 }
	
.LABEL $label$34
	$8 = *($10 + [192])
	$9 = CALL strlen([1072])
	if ( ((int_32)$9 != (int_32)( *($10 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$35 }
	if ( (CALL $92(($10 + [192]), [0], [-1], [1072], $9) == 0) ){ goto $label$28 }
	
.LABEL $label$35
	$8 = *($10 + [192])
	$3 = CALL strlen([1200])
	if ( ((int_32)$3 != (int_32)( *($10 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$36 }
	if ( (CALL $92(($10 + [192]), [0], [-1], [1200], $3) == 0) ){ goto $label$27 }
	
.LABEL $label$36
	$8 = *($10 + [192])
	$3 = CALL strlen([1232])
	if ( ((int_32)$3 != (int_32)( *($10 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$37 }
	if ( (CALL $92(($10 + [192]), [0], [-1], [1232], $3) == 0) ){ goto $label$26 }
	
.LABEL $label$37
	$8 = *($10 + [192])
	$3 = CALL strlen([1264])
	if ( ((int_32)$3 != (int_32)( *($10 + [196]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$38 }
	if ( (CALL $92(($10 + [192]), [0], [-1], [1264], $3) == 0) ){ goto $label$23 }
	
.LABEL $label$38
	CALL prints([1296])
	$8 = *($10 + [192])
	$4 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $4 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $4 ))
	CALL prints([1056])
	goto $label$11 
	
.LABEL $label$30
	CALL prints([1328])
	CALL _ZN12egtblackjack7depositEyRKN5eosio5assetE($0, $1, $3)
	goto $label$3 
	
.LABEL $label$29
	CALL prints([1024])
	$8 = *($10 + [192])
	$3 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $3 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $3 ))
	CALL prints([1056])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$25 }
	$8 = uint_32($8 >> [1])
	goto $label$24 
	
.LABEL $label$28
	CALL prints([1088])
	$8 = *($10 + [192])
	$9 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $9 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $9 ))
	CALL prints([1056])
	*($10 + [168]) = [0]
	*($10 + [160]) = (int_64)0
	*(($10 + [184])) = [0]
	*($10 + [176]) = (int_64)0
	$8 = CALL strlen([1104])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$22 }
	*($10 + [176]) = ($8 << [1])
	$9 = (($10 + [176]) | [1])
	if ( $8 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$27
	CALL prints([1216])
	$8 = *($10 + [192])
	$3 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $3 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $3 ))
	CALL prints([1056])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$19 }
	$8 = uint_32($8 >> [1])
	goto $label$18 
	
.LABEL $label$26
	CALL prints([1248])
	$8 = *($10 + [192])
	$3 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $3 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $3 ))
	CALL prints([1056])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$17 }
	$8 = uint_32($8 >> [1])
	goto $label$16 
	
.LABEL $label$25
	$8 = *($5)
	
.LABEL $label$24
	CALL $100(($10 + [176]), $4, [9], ($8 + [-9]), $4)
	$2 = CALL atoll(( *($10 + [184]) ? (($10 + [176]) | [1]) : (*($10 + [176]) & [1]) ))
	*($10 + [160]) = $2
	$6 = *(($0 + [8]))
	*($10 + [168]) = $6
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	
.LOOP $label$43:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$43 }
	
.LABEL $label$42
	$4 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$4 = [0]
	
.LABEL $label$39
	CALL eosio_assert($4, [208])
	CALL _ZN12egtblackjack8withdrawEyRKN5eosio5assetE($0, $1, ($10 + [160]))
	if ( ((*($10 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*(($10 + [184])))
	goto $label$11 
	
.LABEL $label$23
	CALL prints([1280])
	$8 = *($10 + [192])
	$3 = ($8 & [1])
	CALL prints_l(( *($10 + [200]) ? (($10 + [192]) | [1]) : $3 ), ( *($10 + [196]) ? uint_32($8 >> [1]) : $3 ))
	CALL prints([1056])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$15 }
	$8 = uint_32($8 >> [1])
	goto $label$14 
	
.LABEL $label$22
	$7 = (($8 + [16]) & [-16])
	$9 = CALL $84($7)
	*($10 + [176]) = ($7 | [1])
	*($10 + [184]) = $9
	*($10 + [180]) = $8
	
.LABEL $label$21
	CALL memcpy($9, [1104], $8)
	
.LABEL $label$20
	*(($9 + $8)) = [0]
	CALL _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_($4, ($10 + [160]), ($10 + [176]))
	if ( ((*($10 + [176]) & [1]) == 0) ){ goto $label$44 }
	CALL $85(*($10 + [184]))
	
.LABEL $label$44
	$8 = *($10 + [160])
	$4 = *($10 + [164])
	CALL prints([1120])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($4 - $8) / (int_32)[12])))
	CALL eosio_assert(((uint_32)((int_32)(*($10 + [164]) - *($10 + [160])) / (int_32)[12]) > (uint_32)[1]), [1152])
	CALL $99(($10 + [176]), (*($10 + [160]) + [12]))
	CALL $99(($10 + [144]), (*($10 + [160]) + [24]))
	*(($10 + [136])) = [0]
	*($10 + [128]) = (int_64)0
	$8 = CALL strlen([1184])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$47 }
	*($10 + [128]) = ($8 << [1])
	$4 = (($10 + [128]) | [1])
	if ( $8 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$9 = (($8 + [16]) & [-16])
	$4 = CALL $84($9)
	*($10 + [128]) = ($9 | [1])
	*($10 + [136]) = $4
	*($10 + [132]) = $8
	
.LABEL $label$46
	CALL memcpy($4, [1184], $8)
	
.LABEL $label$45
	*(($4 + $8)) = [0]
	$8 = *($10 + [160])
	if ( (((int_32)(*($10 + [164]) - $8) / (int_32)[12]) <= [4]) ){ goto $label$48 }
	CALL $87(($10 + [128]), ($8 + [36]))
	
.LABEL $label$48
	*(($8 = (($10 + [112]) + [8]))) = *(($3 + [8]))
	*($10 + [112]) = *($3)
	CALL $99(($10 + [96]), ($10 + [176]))
	CALL $99(($10 + [80]), ($10 + [144]))
	CALL $99(($10 + [64]), ($10 + [128]))
	*(($10 + [8])) = *($8)
	*($10) = *($10 + [112])
	CALL _ZN12egtblackjack5startEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_S8_($0, $1, $10, ($10 + [96]), $8, ($10 + [64]))
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$49 }
	CALL $85(*($10 + [72]))
	
.LABEL $label$49
	if ( ((*($10 + [80]) & [1]) == 0) ){ goto $label$50 }
	CALL $85(*($10 + [88]))
	
.LABEL $label$50
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$51 }
	CALL $85(*($10 + [104]))
	
.LABEL $label$51
	if ( ((*($10 + [128]) & [1]) == 0) ){ goto $label$52 }
	CALL $85(*($10 + [136]))
	
.LABEL $label$52
	if ( ((*($10 + [144]) & [1]) == 0) ){ goto $label$53 }
	CALL $85(*($10 + [152]))
	
.LABEL $label$53
	if ( ((*($10 + [176]) & [1]) == 0) ){ goto $label$54 }
	CALL $85(*($10 + [184]))
	
.LABEL $label$54
	$3 = *($10 + [160])
	if ( ($3 == 0) ){ goto $label$11 }
	$8 = *($10 + [164])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$13 }
	$4 = ([0] - $3)
	$8 = ($8 + [-12])
	
.LOOP $label$55:
	if ( ((*($8) & [1]) == 0) ){ goto $label$56 }
	CALL $85(*(($8 + [8])))
	
.LABEL $label$56
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $4) != (int_32)[-12]) ){ goto $label$55 }
	$8 = *($10 + [160])
	goto $label$12 
	
.LABEL $label$19
	$8 = *($5)
	
.LABEL $label$18
	CALL $100(($10 + [160]), $4, [9], ($8 + [-9]), $4)
	CALL $99(($10 + [48]), ($10 + [160]))
	CALL _ZN12egtblackjack6resultENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, ($10 + [48]))
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$57 }
	CALL $85(*($10 + [56]))
	
.LABEL $label$57
	if ( ((*($10 + [160]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*($10 + [168]))
	goto $label$11 
	
.LABEL $label$17
	$8 = *($5)
	
.LABEL $label$16
	CALL $100(($10 + [160]), $4, [9], ($8 + [-9]), $4)
	CALL $99(($10 + [32]), ($10 + [160]))
	CALL _ZN12egtblackjack5awardENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, ($10 + [32]))
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$58 }
	CALL $85(*($10 + [40]))
	
.LABEL $label$58
	if ( ((*($10 + [160]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*($10 + [168]))
	goto $label$11 
	
.LABEL $label$15
	$8 = *($5)
	
.LABEL $label$14
	CALL $100(($10 + [160]), $4, [9], ($8 + [-9]), $4)
	CALL $99(($10 + [16]), ($10 + [160]))
	CALL _ZN12egtblackjack6refundENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, ($10 + [16]))
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$59 }
	CALL $85(*($10 + [24]))
	
.LABEL $label$59
	if ( ((*($10 + [160]) & [1]) == 0) ){ goto $label$11 }
	CALL $85(*($10 + [168]))
	goto $label$11 
	
.LABEL $label$13
	$8 = $3
	
.LABEL $label$12
	*($10 + [164]) = $3
	CALL $85($8)
	
.LABEL $label$11
	if ( ((*($10 + [192]) & [1]) == 0) ){ goto $label$3 }
	CALL $85(*($10 + [200]))
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $86(($10 + [176]))
	
.LABEL $label$1
	CALL $86(($10 + [128]))
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $85(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $85($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [224])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$14 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $8(($12 + [128]), $0)
	if ( ((int_64)$2 > (int_64)4154295087275495935) ){ goto $label$42 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)-4352386765319831552) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)-4352380133890326528) ){ goto $label$35 }
	*($12 + [92]) = [0]
	*($12 + [88]) = [1]
	*($12 + [32 align=4]) = *($12 + [88])
	CALL $17($4, ($12 + [32]))
	goto $label$35 
	
.LABEL $label$42
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)4154295087275495936) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)4154295087292481536) ){ goto $label$35 }
	*($12 + [108]) = [0]
	*($12 + [104]) = [2]
	*($12 + [16 align=4]) = *($12 + [104])
	CALL $12($4, ($12 + [16]))
	goto $label$35 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)-3076405216327851008) ){ goto $label$35 }
	*($12 + [100]) = [0]
	*($12 + [96]) = [3]
	*($12 + [24 align=4]) = *($12 + [96])
	CALL $15($4, ($12 + [24]))
	goto $label$35 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)8421051804996861952) ){ goto $label$35 }
	*($12 + [68]) = [0]
	*($12 + [64]) = [4]
	*($12 + [56 align=4]) = *($12 + [64])
	CALL $21($4, ($12 + [56]))
	goto $label$35 
	
.LABEL $label$39
	*($12 + [76]) = [0]
	*($12 + [72]) = [5]
	*($12 + [48 align=4]) = *($12 + [72])
	CALL $17($4, ($12 + [48]))
	goto $label$35 
	
.LABEL $label$38
	*($12 + [116]) = [0]
	*($12 + [112]) = [6]
	*($12 + [8 align=4]) = *($12 + [112])
	CALL $12($4, ($12 + [8]))
	goto $label$35 
	
.LABEL $label$37
	*($12 + [124]) = [0]
	*($12 + [120]) = [7]
	*($12) = *($12 + [120])
	CALL $10($4, $12)
	goto $label$35 
	
.LABEL $label$36
	*($12 + [84]) = [0]
	*($12 + [80]) = [8]
	*($12 + [40 align=4]) = *($12 + [80])
	CALL $17($4, ($12 + [40]))
	
.LABEL $label$35
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$43 }
	$6 = ($4 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$45 }
	
.LOOP $label$46:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$47 }
	CALL $85($3)
	
.LABEL $label$47
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$46 }
	$7 = *(($4 + [80]))
	goto $label$44 
	
.LABEL $label$45
	$7 = $5
	
.LABEL $label$44
	*($6) = $5
	CALL $85($7)
	
.LABEL $label$43
	$5 = *(($4 + [40]))
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [44])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$49 }
	
.LOOP $label$50:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$51 }
	CALL $85($3)
	
.LABEL $label$51
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$50 }
	$7 = *(($4 + [40]))
	goto $label$48 
	
.LABEL $label$49
	$7 = $5
	
.LABEL $label$48
	*($6) = $5
	CALL $85($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [224])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	$4 = ($2 + [1])
	$3 = ($0 + [1])
	$13 = *($2 + [4])
	$7 = *($2)
	$11 = ($0 + [4])
	$12 = [0]
	
.LOOP $label$2:
	$9 = ($10 & [1])
	$10 = *($0)
	$8 = ( *($11) ? uint_32($10 >> [1]) : $9 )
	if ( ($8 <= $12) ){ goto $label$1 }
	$10 = $12
	$6 = ($7 & [1])
	$7 = ( $13 ? uint_32(($7 & [254]) >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$3 }
	$13 = ($5 + $12)
	$5 = ( *(($0 + [8])) ? $3 : $9 )
	$8 = ($5 + $8)
	$10 = ($8 - $13)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$6 = ( *(($2 + [8])) ? $4 : $6 )
	$9 = *($6)
	
.LOOP $label$4:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($10, $6, $7) == 0) ){ goto $label$5 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$10 = ($10 - $5)
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	CALL $100($14, $0, $12, ($10 - $12), $0)
	$7 = ($1 + [4])
	$13 = *($7)
	if ( ((uint_32)$13 >= (uint_32)*(($1 + [8]))) ){ goto $label$7 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = (*($7) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $6($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $85(*(($14 + [8])))
	
.LABEL $label$6
	$7 = *($2)
	$13 = *(($2 + [4]))
	$12 = (( $13 ? uint_32($7 >> [1]) : ($7 & [1]) ) + $10)
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	if ( ((int_32)$12 == (int_32)( *(($0 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$8 }
	CALL $100($14, $0, $12, [-1], $0)
	$7 = *(($1 + [4]))
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [8]))) ){ goto $label$9 }
	*($7) = *($14)
	$7 = ($14 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*(($7 = ($1 + [4]))) = (*($7) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $6($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $85(*($14 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN12egtblackjack11upbankernumEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [640]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($9)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$7 = *(($0 + [80]))
	$14 = *(($0 + [84]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$5 }
	$9 = ($14 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$6:
	if ( (int_64)(*(*($9)) == 0) ){ goto $label$5 }
	$14 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [56])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$8 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$4 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $32($5, $4)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	
.LABEL $label$7
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [656])
	CALL eosio_assert($4, [320])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($9 + [8]) = $1
	$11 = *($9)
	CALL eosio_assert([1], [480])
	$7 = ($15 + [64])
	*($15 + [72]) = $7
	*($15 + [68]) = $15
	*($15 + [64]) = $15
	CALL $33(($15 + [64]), $9)
	CALL db_update_i64(*($9 + [68]), (int_64)0, $15, [64])
	$9 = ($0 + [72])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$9 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$8 = *(($0 + [80]))
	$14 = *(($0 + [84]))
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$10 }
	$9 = ($14 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$11:
	if ( ((int_64)*(*($9)) == (int_64)1) ){ goto $label$10 }
	$14 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$13 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	$4 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$9 = CALL $32($5, $4)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	
.LABEL $label$12
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [688])
	CALL eosio_assert($4, [320])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($9 + [8]) = $2
	$11 = *($9)
	CALL eosio_assert([1], [480])
	*($15 + [72]) = $7
	*($15 + [68]) = $15
	*($15 + [64]) = $15
	CALL $33(($15 + [64]), $9)
	CALL db_update_i64(*($9 + [68]), (int_64)0, $15, [64])
	$9 = ($0 + [72])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$14 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$8 = *(($0 + [80]))
	$14 = *(($0 + [84]))
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$15 }
	$9 = ($14 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$16:
	if ( ((int_64)*(*($9)) == (int_64)5) ){ goto $label$15 }
	$14 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$18 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	$4 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$17 }
	$9 = CALL $32($5, $4)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [256])
	
.LABEL $label$17
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [720])
	CALL eosio_assert($4, [320])
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$5), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($9 + [8]) = $3
	$11 = *($9)
	CALL eosio_assert([1], [480])
	*($15 + [72]) = $7
	*($15 + [68]) = $15
	*($15 + [64]) = $15
	CALL $33(($15 + [64]), $9)
	CALL db_update_i64(*($9 + [68]), (int_64)0, $15, [64])
	$9 = ($0 + [72])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$19 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*([0] + [4]) = ($15 + [80])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [240])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [240])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN12egtblackjack6signupEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [240])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [208])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $39(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $40(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $85(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12egtblackjack11bankerstandEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [640]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$6 = *($2)
	$3 = CALL strlen([752])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( (CALL $92($2, [0], [-1], [752], $3) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($2)
	$3 = ($2 + [4])
	$5 = CALL strlen([768])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( (CALL $92($2, [0], [-1], [768], $5) == 0) ){ goto $label$12 }
	
.LABEL $label$15
	$6 = *($2)
	$5 = CALL strlen([784])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	if ( CALL $92($2, [0], [-1], [784], $5) ){ goto $label$5 }
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$16 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$17:
	if ( ((int_64)*(*($6)) == (int_64)5) ){ goto $label$16 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$6 
	
.LABEL $label$13
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$18 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$19:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$18 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$10 
	
.LABEL $label$12
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$20 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$21:
	if ( ((int_64)*(*($6)) == (int_64)1) ){ goto $label$20 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$21 }
	
.LABEL $label$20
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$9 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$8 
	
.LABEL $label$11
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$10
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [656])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$9
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$8
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [688])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$7
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$6
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [720])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [80])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [240])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $36(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $37(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $85(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC _ZN12egtblackjack9bankersubEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [640]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$6 = *($2)
	$3 = CALL strlen([752])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( (CALL $92($2, [0], [-1], [752], $3) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($2)
	$3 = ($2 + [4])
	$5 = CALL strlen([768])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( (CALL $92($2, [0], [-1], [768], $5) == 0) ){ goto $label$12 }
	
.LABEL $label$15
	$6 = *($2)
	$5 = CALL strlen([784])
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	if ( CALL $92($2, [0], [-1], [784], $5) ){ goto $label$5 }
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$16 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$17:
	if ( ((int_64)*(*($6)) == (int_64)5) ){ goto $label$16 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$6 
	
.LABEL $label$13
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$18 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$19:
	if ( (int_64)(*(*($6)) == 0) ){ goto $label$18 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$10 
	
.LABEL $label$12
	$4 = *(($0 + [80]))
	$2 = *(($0 + [84]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$20 }
	$6 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$21:
	if ( ((int_64)*(*($6)) == (int_64)1) ){ goto $label$20 }
	$2 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$21 }
	
.LABEL $label$20
	$3 = ($0 + [56])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$9 }
	$6 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	goto $label$8 
	
.LABEL $label$11
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$10
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [656])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)-1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$9
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$8
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [688])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)-1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$7
	$6 = [0]
	$2 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4154295073967702016, (int_64)5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $32($3, $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [256])
	
.LABEL $label$6
	$2 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($2, [720])
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$3), [368])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$13()), [416])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)-1)
	$8 = *($6)
	CALL eosio_assert([1], [480])
	*($11 + [72]) = ($11 + [64])
	*($11 + [68]) = $11
	*($11 + [64]) = $11
	CALL $33(($11 + [64]), $6)
	CALL db_update_i64(*($6 + [68]), (int_64)0, $11, [64])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [80])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [1488])
	*(($4 = CALL $84([80])) + [64]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)1
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($9 + [88]) = (($9 + [16]) + [64])
	*($9 + [84]) = ($9 + [16])
	*($9 + [80]) = ($9 + [16])
	CALL $33(($9 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)4154295073967702016, $2, $5, ($9 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [80]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [68])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [80]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($9 + [80]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $85($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [96])
}

void .FUNC _ZN12egtblackjack5claimEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

void .FUNC _ZN12egtblackjack6signinEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [592]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [608]
	$9 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [624]
	$10 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$16 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	*($11) = $1
	*($11 + [16]) = $10
	*($11 + [8]) = $9
	*(($0 = CALL $84([16]))) = $2
	*($0 + [8]) = $7
	*(($3 = ($11 + [40]))) = [0]
	$4 = ($0 + [16])
	*(($11 + [32])) = $4
	*(($11 + [28])) = $4
	*($11 + [24]) = $0
	*($11 + [36]) = [0]
	*(($11 + [44])) = [0]
	CALL $28(($11 + [36]), [8])
	$0 = *($11 + [36])
	CALL eosio_assert(((int_32)(*($3) - $0) > (int_32)[7]), [544])
	CALL memcpy($0, $11, [8])
	CALL $29(($11 + [48]), ($11 + [8]))
	$0 = *($11 + [48])
	CALL send_inline($0, (*($11 + [52]) - $0))
	$0 = *($11 + [48])
	if ( ($0 == 0) ){ goto $label$17 }
	*($11 + [52]) = $0
	CALL $85($0)
	
.LABEL $label$17
	$0 = *($11 + [36])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($11 + [40])) = $0
	CALL $85($0)
	
.LABEL $label$18
	$0 = *($11 + [24])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($11 + [28])) = $0
	CALL $85($0)
	
.LABEL $label$19
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $84(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $54($9, $1, *($2), *($3), $4)
	$6 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($7 + [-12]))
	*(($8 + [-40])) = *(($7 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($2 = ($8 + [-16]))) = [0]
	$3 = ($7 + [-4])
	*($1) = *($3)
	*(($8 + [-20])) = *($7)
	$1 = ($7 + [4])
	*($2) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($3) = (int_64)0
	*(($2 = ($8 + [-4]))) = [0]
	$3 = ($7 + [8])
	*($1) = *($3)
	*(($8 + [-8])) = *(($7 + [12]))
	$8 = ($7 + [16])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $85($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $85($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $85($1)
	
.LABEL $label$12
	(unreachable)
}

int_64 .FUNC $59 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $23($4, $6)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$4), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [320])
	CALL $66($4, $5, (int_64)0, ($7 + [8]))
	$1 = *($5 + [64])
	*([0] + [4]) = ($7 + [16])
	return $1
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *(*($0 + [4]))
	$4 = *($3 + [8])
	CALL eosio_assert([1], [144])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [208])
	*($1 + [8]) = $4
	*($1) = (int_64)0
	$4 = *(($3 + [8]))
	CALL eosio_assert([1], [144])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [208])
	*(($1 + [24])) = $4
	*($1 + [16]) = (int_64)0
	$4 = *(($3 + [8]))
	CALL eosio_assert([1], [144])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [208])
	*(($1 + [40])) = $4
	*($1 + [32]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-48])
	*([0] + [4]) = $6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = $7
	CALL $52($8, $1)
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $5), $6, [48])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$16 }
	*(($2 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$16
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $84([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $28($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $55(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $58(($6 + [52]), $1, $2, $3, $4)
	$5 = CALL $59($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $60(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $85($0)
	
.LABEL $label$1
	CALL $61(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13680])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13776]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13776]
	return .LABEL $label$1
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [544])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [544])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $31(CALL $30($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $84($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $98($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $85($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [13056]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $110(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13536]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13568]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13574] ? [13569] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13538] ? [13536] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13571]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $104()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13536]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13536]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13520])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13536])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13552] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13536]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13632] ? [13648] : $30 ) ? ( [13600] ? [13616] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13536]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13537]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13536] ? [13541] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13520])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13520])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13520])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13664], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13664], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13664], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $110(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $110(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $110(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $110(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $110(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $110(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $110(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $110(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $110(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $22(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC _ZN12egtblackjack5initgEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$2 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$5), [256])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $23($5, $7)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$5), [256])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [320])
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$5), [368])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$13()), [416])
	*(($6 + [100])) = *(($1 + [12]))
	*(($6 + [96])) = *(($1 + [8]))
	*(($6 + [92])) = *(($1 + [4]))
	*($6 + [88]) = *($1)
	$2 = *($6 + [8])
	CALL eosio_assert([1], [480])
	*($8 + [120]) = ($8 + [104])
	*($8 + [116]) = $8
	*($8 + [112]) = $8
	CALL $24(($8 + [112]), $6)
	CALL db_update_i64(*($6 + [108]), (int_64)0, $8, [104])
	$6 = ($0 + [32])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($6)) ){ goto $label$5 }
	*($6) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [128])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $84([120])
	$4 = CALL $25($6)
	*($6 + [104]) = $0
	CALL $26(($8 + [32]), $4)
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [108])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [240])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [240])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [208])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [560])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $84([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [240])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [240])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [368])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [416])
	$4 = *((*($2) + [8]))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [144])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [208])
	*(($1 + [96])) = $4
	*($1 + [88]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [480])
	$6 = $8
	$2 = ($6 + [-112])
	*([0] + [4]) = $2
	*($7 + [4]) = $2
	*($7) = $2
	*($7 + [8]) = ($6 + [-8])
	CALL $24($7, $1)
	CALL db_update_i64(*($1 + [108]), (int_64)0, $2, [104])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $31($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $31(CALL $30($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN12egtblackjack13processWinnerENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_N5eosio5assetES6_S6_S6_S6_S8_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [320])
	*([0] + [4]) = $24
	$17 = *($3)
	if ( ($17 & [1]) ){ goto $label$2 }
	$15 = ($3 + [4])
	$17 = uint_32($17 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$15 = ($3 + [4])
	$17 = *($3 + [4])
	
.LABEL $label$1
	CALL prints([3072])
	$14 = *($3)
	$11 = ($14 & [1])
	$16 = ($3 + [1])
	CALL prints_l(( *($3 + [8]) ? $16 : $11 ), ( *(($3 + [4])) ? uint_32($14 >> [1]) : $11 ))
	CALL prints([2816])
	CALL printui((CASTING uint_64)(uint_32 $17))
	$17 = *($3)
	if ( ($17 & [1]) ){ goto $label$4 }
	$17 = uint_32($17 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$17 = *($15)
	
.LABEL $label$3
	CALL eosio_assert(((uint_32)$17 > (uint_32)[7]), [2848])
	$17 = *($3)
	if ( ($17 & [1]) ){ goto $label$6 }
	$11 = uint_32($17 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$11 = *(($3 + [4]))
	$16 = *(($3 + [8]))
	
.LABEL $label$5
	$17 = [0]
	$14 = CALL strlen([2880])
	if ( ($14 == 0) ){ goto $label$7 }
	$10 = ($16 + $11)
	$17 = $10
	if ( ((int_32)$11 < (int_32)$14) ){ goto $label$8 }
	$17 = $16
	
.LOOP $label$10:
	$11 = (($11 - $14) + [1])
	if ( ($11 == 0) ){ goto $label$9 }
	$17 = CALL memchr($17, [40], $11)
	if ( ($17 == 0) ){ goto $label$9 }
	if ( (CALL memcmp($17, [2880], $14) == 0) ){ goto $label$8 }
	$17 = ($17 + [1])
	$11 = ($10 - $17)
	if ( ((int_32)$11 >= (int_32)$14) ){ goto $label$10 }
	
.LABEL $label$9
	$17 = $10
	
.LABEL $label$8
	$17 = ( [-1] ? ($17 - $16) : ((int_32)$17 == (int_32)$10) )
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$17 != (int_32)[-1]), [3088])
	CALL $100(($24 + [240]), $3, [0], $17, $3)
	$14 = ($17 + [1])
	$11 = *($3)
	if ( ($11 & [1]) ){ goto $label$12 }
	$11 = uint_32($11 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$11 = *($15)
	
.LABEL $label$11
	CALL $100(($24 + [224]), $3, $14, ($11 - $17), $3)
	CALL prints([3120])
	$3 = *($24 + [224])
	$17 = ($3 & [1])
	CALL prints_l(( *($24 + [232]) ? (($24 + [224]) | [1]) : $17 ), ( *($24 + [228]) ? uint_32($3 >> [1]) : $17 ))
	CALL prints([3152])
	$3 = *($24 + [240])
	$17 = ($3 & [1])
	$10 = (($24 + [240]) | [1])
	CALL prints_l(( *($24 + [248]) ? $10 : $17 ), ( *($24 + [244]) ? uint_32($3 >> [1]) : $17 ))
	$3 = ( *($24 + [248]) ? $10 : (*($24 + [240]) & [1]) )
	$17 = [-1]
	
.LOOP $label$13:
	$14 = ($3 + $17)
	$11 = ($17 + [1])
	$17 = $11
	if ( *(($14 + [1])) ){ goto $label$13 }
	$21 = (CASTING uint_64)(uint_32 $11)
	$18 = (int_64)0
	$22 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$14:
	$20 = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$21) ){ goto $label$15 }
	$17 = *($3)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$17 = ($17 + [165])
	goto $label$16 
	
.LABEL $label$17
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$19 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$18
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$14 }
	if ( (*($6) & [1]) ){ goto $label$21 }
	$3 = ($6 + [1])
	goto $label$20 
	
.LABEL $label$21
	$3 = *($6 + [8])
	
.LABEL $label$20
	$13 = *($0 + [8])
	$12 = ((int_64)*($4) / (int_64)CALL atoll($3))
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [144])
	$18 = (uint_64)$13 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$17 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$17 = [0]
	
.LABEL $label$22
	CALL eosio_assert($17, [208])
	CALL prints([3184])
	CALL printui($19)
	*(($24 + [216])) = [0]
	*($24 + [192]) = $19
	*($24 + [200]) = (int_64)-1
	*($24 + [208]) = (int_64)0
	$18 = *($0)
	*($24 + [184]) = $18
	$3 = [0]
	$17 = CALL db_find_i64($18, $19, (int_64)3607749779137757184, (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	if ( ((int_32)$17) < (int_32)[0]) ){ goto $label$27 }
	$3 = CALL $48(($24 + [184]), $17)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($24 + [184])), [256])
	
.LABEL $label$27
	$17 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($17, [1968])
	CALL eosio_assert($17, [320])
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($24 + [184])), [368])
	CALL eosio_assert(((int_64)*($24 + [184]) == (int_64)CALL $fimport$13()), [416])
	$18 = *($3 + [8])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($3 + [40]))), [1552])
	$22 = ((int_64)*($3 + [32]) + (int_64)$12)
	*($3 + [32]) = $22
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [1600])
	CALL eosio_assert(((int_64)*($3 + [32]) < (int_64)4611686018427387904), [1632])
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$18) == (int_64)(uint_64)*($3 + [8]) >> (uint_64)(int_64)8)), [480])
	*($24 + [152]) = (($24 + [256]) + [48])
	*($24 + [148]) = ($24 + [256])
	*($24 + [144]) = ($24 + [256])
	CALL $52(($24 + [144]), $3)
	CALL db_update_i64(*($3 + [52]), (int_64)0, ($24 + [256]), [48])
	$3 = ($24 + [200])
	if ( (uint_64)($18 <= *($3)) ){ goto $label$28 }
	*($3) = ((int_64)$18 + (int_64)1)
	
.LABEL $label$28
	CALL prints([3216])
	CALL printui(*($0))
	CALL prints([3232])
	$3 = *($24 + [240])
	$17 = ($3 & [1])
	CALL prints_l(( *(($24 + [248])) ? $10 : $17 ), ( *($24 + [244]) ? uint_32($3 >> [1]) : $17 ))
	CALL prints([3248])
	CALL printui($19)
	$23 = *($0)
	$18 = (int_64)0
	$20 = (int_64)59
	$3 = [592]
	$21 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$34 }
	$17 = *($3)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$17 = ($17 + [165])
	goto $label$32 
	
.LABEL $label$34
	$22 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$30
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$29 }
	*($24 + [136]) = $21
	*($24 + [128]) = $23
	$18 = (int_64)0
	$20 = (int_64)59
	$3 = [128]
	$21 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$18 > (uint_64)(int_64)10) ){ goto $label$40 }
	$17 = *($3)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$17 = ($17 + [165])
	goto $label$38 
	
.LABEL $label$40
	$22 = (int_64)0
	if ( ((int_64)$18 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$20 = ((int_64)$20 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$35 }
	$18 = (int_64)0
	$20 = (int_64)59
	$3 = [112]
	$23 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$46 }
	$17 = *($3)
	if ( ((uint_32)(($17 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$17 = ($17 + [165])
	goto $label$44 
	
.LABEL $label$46
	$22 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$17 = ( ($17 + [208]) ? [0] : ((($17 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$42
	$3 = ($3 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$41 }
	CALL $93($24, [2736], $1)
	$3 = CALL $91($24, [1104])
	$17 = ($3 + [8])
	*((($24 + [16]) + [8])) = *($17)
	*($24 + [16]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = *($2)
	$17 = ($3 & [1])
	$3 = CALL $90(($24 + [16]), ( *($2 + [8]) ? ($2 + [1]) : $17 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $17 ))
	$17 = ($3 + [8])
	*((($24 + [32]) + [8])) = *($17)
	*($24 + [32]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = CALL $91(($24 + [32]), [3264])
	$17 = ($3 + [8])
	*((($24 + [48]) + [8])) = *($17)
	*($24 + [48]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = *($6)
	$17 = ($3 & [1])
	$3 = CALL $90(($24 + [48]), ( *($6 + [8]) ? ($6 + [1]) : $17 ), ( *($6 + [4]) ? uint_32($3 >> [1]) : $17 ))
	$17 = ($3 + [8])
	*((($24 + [64]) + [8])) = *($17)
	*($24 + [64]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = CALL $91(($24 + [64]), [3312])
	$17 = ($3 + [8])
	*((($24 + [80]) + [8])) = *($17)
	*($24 + [80]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = *($7)
	$17 = ($3 & [1])
	$3 = CALL $90(($24 + [80]), ( *($7 + [8]) ? ($7 + [1]) : $17 ), ( *($7 + [4]) ? uint_32($3 >> [1]) : $17 ))
	$17 = ($3 + [8])
	*((($24 + [96]) + [8])) = *($17)
	*($24 + [96]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = CALL $91(($24 + [96]), [2784])
	$17 = ($3 + [8])
	*((($24 + [112]) + [8])) = *($17)
	*($24 + [112]) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($17) = [0]
	$3 = *($8)
	$17 = ($3 & [1])
	$3 = CALL $90(($24 + [112]), ( *($8 + [8]) ? ($8 + [1]) : $17 ), ( *($8 + [4]) ? uint_32($3 >> [1]) : $17 ))
	$18 = *($3)
	*($3) = (int_64)0
	$17 = *($3 + [8])
	*($3 + [8]) = [0]
	*(($24 + [280])) = $13
	*($24 + [264]) = $19
	*($24 + [272]) = $12
	*($24 + [288]) = $18
	*($24 + [256]) = *($0)
	*(($24 + [296])) = $17
	$3 = CALL $54(($24 + [144]), ($24 + [128]), $21, $23, ($24 + [256]))
	CALL $29(($24 + [304]), $3)
	$17 = *($24 + [304])
	CALL send_inline($17, (*($24 + [308]) - $17))
	$17 = *($24 + [304])
	if ( ($17 == 0) ){ goto $label$47 }
	*($24 + [308]) = $17
	CALL $85($17)
	
.LABEL $label$47
	$17 = *($3 + [28])
	if ( ($17 == 0) ){ goto $label$48 }
	*(($3 + [32])) = $17
	CALL $85($17)
	
.LABEL $label$48
	$17 = *($3 + [16])
	if ( ($17 == 0) ){ goto $label$49 }
	*(($3 + [20])) = $17
	CALL $85($17)
	
.LABEL $label$49
	if ( ((*($24 + [288]) & [1]) == 0) ){ goto $label$50 }
	CALL $85(*(($24 + [296])))
	
.LABEL $label$50
	if ( ((*($24 + [112]) & [1]) == 0) ){ goto $label$51 }
	CALL $85(*($24 + [120]))
	
.LABEL $label$51
	if ( ((*($24 + [96]) & [1]) == 0) ){ goto $label$52 }
	CALL $85(*($24 + [104]))
	
.LABEL $label$52
	if ( ((*($24 + [80]) & [1]) == 0) ){ goto $label$53 }
	CALL $85(*($24 + [88]))
	
.LABEL $label$53
	if ( ((*($24 + [64]) & [1]) == 0) ){ goto $label$54 }
	CALL $85(*($24 + [72]))
	
.LABEL $label$54
	if ( ((*($24 + [48]) & [1]) == 0) ){ goto $label$55 }
	CALL $85(*($24 + [56]))
	
.LABEL $label$55
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$56 }
	CALL $85(*($24 + [40]))
	
.LABEL $label$56
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$57 }
	CALL $85(*($24 + [24]))
	
.LABEL $label$57
	if ( ((*($24) & [1]) == 0) ){ goto $label$58 }
	CALL $85(*($24 + [8]))
	
.LABEL $label$58
	$14 = *($24 + [208])
	if ( ($14 == 0) ){ goto $label$59 }
	$11 = ($24 + [212])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$61 }
	
.LOOP $label$62:
	$3 = ($3 + [-24])
	$17 = *($3)
	*($3) = [0]
	if ( ($17 == 0) ){ goto $label$63 }
	CALL $85($17)
	
.LABEL $label$63
	if ( ((int_32)$14 != (int_32)$3) ){ goto $label$62 }
	$3 = *(($24 + [208]))
	goto $label$60 
	
.LABEL $label$61
	$3 = $14
	
.LABEL $label$60
	*($11) = $14
	CALL $85($3)
	
.LABEL $label$59
	if ( ((*($24 + [224]) & [1]) == 0) ){ goto $label$64 }
	CALL $85(*(($24 + [232])))
	
.LABEL $label$64
	if ( ((*($24 + [240]) & [1]) == 0) ){ goto $label$65 }
	CALL $85(*(($24 + [248])))
	
.LABEL $label$65
	*([0] + [4]) = ($24 + [320])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [368])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [416])
	*($1 + [64]) = ((int_64)*($1 + [64]) + (int_64)1)
	$4 = *($1 + [8])
	CALL eosio_assert([1], [480])
	*($5 + [120]) = ($5 + [104])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $24(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $5, [104])
	$2 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $85($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $85($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $85($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $85($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $85($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $85($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $85($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $85($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $62($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $28($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $63($4, $1)
	CALL $65(CALL $64(CALL $64($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [544])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [544])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $84($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [9]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $106([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $106($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $106($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [15580]
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $84(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $85($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $84($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $85($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $88($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $86 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $85 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13020])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12904])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12712]
	$1 = (((int_32)$2 * (int_32)[12]) + [12712])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13014]) == 0) ){ goto $label$2 }
	$7 = *([0] + [13016])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [13014]) = [1]
	$7 = ($7 << [16])
	*([0] + [13016]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13016])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [13016]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [13014]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [13014]) = [1]
	$3 = ($3 << [16])
	*([0] + [13016]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13016])
	
.LABEL $label$8
	*([0] + [13016]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $82($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12928])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $81([4520], $0)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$5 = *($4 + [8])
	CALL eosio_assert([1], [144])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [208])
	*($1 + [8]) = $5
	*($1) = (int_64)0
	$7 = *($3 + [4])
	*($1 + [16]) = *($7)
	*(($1 + [24])) = *(($7 + [8]))
	$5 = *(($4 + [8]))
	CALL eosio_assert([1], [144])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [208])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
	$8 = $10
	$7 = ($8 + [-48])
	*([0] + [4]) = $7
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = $8
	CALL $52($9, $1)
	$6 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6), $7, [48])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [1488])
	$4 = CALL $84([120])
	$6 = CALL $25($4)
	*($4 + [104]) = $1
	CALL $77($3, $6)
	*($8 + [136]) = (($8 + [16]) + [104])
	*($8 + [132]) = ($8 + [16])
	*($8 + [128]) = ($8 + [16])
	CALL $24(($8 + [128]), $6)
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($4 + [108]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $5), ($8 + [16]), [104])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	*($8 + [128]) = $4
	$5 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$3 = *($4 + [108])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [128]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $27(($1 + [24]), ($8 + [128]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $85($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [144])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $84(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $98($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $85($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $85($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([4112])
	CALL prints_l($2, $3)
	CALL prints([4128])
	CALL $41($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [1488])
	*(($4 = CALL $84([80])) + [64]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)5
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($9 + [88]) = (($9 + [16]) + [64])
	*($9 + [84]) = ($9 + [16])
	*($9 + [80]) = ($9 + [16])
	CALL $33(($9 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)4154295073967702016, $2, $5, ($9 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [80]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [68])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [80]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($9 + [80]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $85($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	CALL eosio_assert([1], [144])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [208])
	*($1 + [8]) = (int_64)1397703940
	*($1) = (int_64)0
	CALL eosio_assert([1], [144])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [208])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [144])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [208])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [144])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [208])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = (int_64)1
	CALL eosio_assert([1], [144])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [208])
	*(($1 + [80])) = (int_64)1397703940
	*($1 + [72]) = (int_64)0
	CALL eosio_assert([1], [144])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [208])
	*(($1 + [96])) = (int_64)1397703940
	*($1 + [88]) = (int_64)0
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [1488])
	*(($4 = CALL $84([80])) + [64]) = $1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($9 + [88]) = (($9 + [16]) + [64])
	*($9 + [84]) = ($9 + [16])
	*($9 + [80]) = ($9 + [16])
	CALL $33(($9 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)4154295073967702016, $2, $5, ($9 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [80]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [68])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [80]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($9 + [80]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [80])
	*($9 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $85($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [240])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $38($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $89($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $84($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $89($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $85($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $86($7)
	return (unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $99($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $99(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $85(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $85(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC _ZN12egtblackjack2dgEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$4), [256])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $23($4, $6)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$4), [256])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [4272])
	CALL eosio_assert($6, [4320])
	$6 = CALL db_next_i64(*($5 + [108]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $23($4, $6)
	
.LABEL $label$5
	CALL $79($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [4352])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [4400])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [4464])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $85($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $85($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [108]))
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $84([80])) + [64]) = $0
	CALL $34(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $85($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [544])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [544])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [544])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $127 ()
{
	(unreachable)
}