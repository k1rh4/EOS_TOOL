(data (i32.const 4) "\00j\00\00")
(data (i32.const 16) "invalid first pos\00")
(data (i32.const 48) "parse memo error\00")
(data (i32.const 80) "transfer\00")
(data (i32.const 96) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 160) "invalid symbol name\00")
(data (i32.const 192) "read\00")
(data (i32.const 208) "invalid quantity\00")
(data (i32.const 240) "must issue positive quantity\00")
(data (i32.const 272) "attempt to subtract asset with different symbol\00")
(data (i32.const 320) "subtraction underflow\00")
(data (i32.const 352) "subtraction overflow\00")
(data (i32.const 384) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 448) "\e5\8f\91\e9\80\81\e7\9a\84\e9\92\b1\e8\b6\85\e8\bf\87\e4\ba\86\e4\bd\a0\e7\9a\84\e4\bd\99\e9\a2\9d\00")
(data (i32.const 496) "attempt to add asset with different symbol\00")
(data (i32.const 544) "addition underflow\00")
(data (i32.const 576) "addition overflow\00")
(data (i32.const 608) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 672) "cannot pass end iterator to modify\00")
(data (i32.const 720) "cannot create objects in table of another contract\00")
(data (i32.const 784) "write\00")
(data (i32.const 800) "object passed to modify is not in multi_index\00")
(data (i32.const 848) "cannot modify objects in table of another contract\00")
(data (i32.const 912) "updater cannot change primary key when modifying an object\00")
(data (i32.const 976) "error reading iterator\00")
(data (i32.const 1008) "redpacketccc\00")
(data (i32.const 1024) "dev withdraw\00")
(data (i32.const 1040) "active\00")
(data (i32.const 1056) "eosio.token\00")
(data (i32.const 1072) "\e6\b2\a1\e6\9c\89\e6\89\be\e5\88\b0\e8\af\a5\e6\88\bf\e9\97\b4\00")
(data (i32.const 1104) "\e8\af\b7\e7\ad\89\e5\be\85\e5\bc\80\e5\a5\96\00")
(data (i32.const 1120) "\e4\bd\a0\e4\b8\8d\e5\9c\a8\e6\88\bf\e9\97\b4\00")
(data (i32.const 1136) "cannot pass end iterator to erase\00")
(data (i32.const 1184) "cannot increment end iterator\00")
(data (i32.const 1216) "bug???\00")
(data (i32.const 1232) "object passed to erase is not in multi_index\00")
(data (i32.const 1280) "cannot erase objects in table of another contract\00")
(data (i32.const 1344) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1408) "get\00")
(data (i32.const 1424) "\e6\b2\a1\e6\9c\89\e6\89\be\e5\88\b0\e8\bf\99\e4\b8\aa\e6\88\bf\e9\97\b4\00")
(data (i32.const 1456) "\e6\8a\bc\e9\87\91\e4\b8\8d\e5\a4\9f,\e6\97\a0\e6\b3\95\e5\8a\a0\e5\85\a5\e6\88\bf\e9\97\b4\00")
(data (i32.const 1488) "\e8\bf\99\e4\b8\aa\e6\88\bf\e9\97\b4\e6\bb\a1\e4\ba\86\00")
(data (i32.const 1520) "\e4\bd\a0\e5\b7\b2\e7\bb\8f\e5\8a\a0\e5\85\a5\e4\ba\86\e8\af\a5\e6\88\bf\e9\97\b4\00")
(data (i32.const 1552) "\e6\9c\80\e5\b0\913\e4\b8\aa\e4\ba\ba\00")
(data (i32.const 1568) "\e6\9c\80\e5\a4\9a10\e4\b8\aa\e4\ba\ba\00")
(data (i32.const 1584) "\e6\9c\80\e5\b0\911EOS\00")
(data (i32.const 1600) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1664) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1728) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1776) "withdraw\00")
(data (i32.const 1792) "\e6\8f\90\e5\8f\96\e7\9a\84token\e9\9c\80\e8\a6\81\e5\a4\a7\e4\ba\8e0\00")
(data (i32.const 1824) "\e6\8c\96\e7\9f\bf\00")
(data (i32.const 1840) "redpacketbbb\00")
(data (i32.const 1856) "issue\00")
(data (i32.const 1872) "reveal\00")
(data (i32.const 1888) "\e5\a4\a7\e5\90\89\e5\a4\a7\e5\88\a9,\e4\bb\8a\e6\99\9a\e5\90\83\e9\b8\a1!\00")
(data (i32.const 1920) "redpacketaaa\00")
(data (i32.const 1936) "not game_id\00")
(data (i32.const 1952) "\e4\ba\ba\e8\bf\98\e6\b2\a1\e6\9c\89\e6\bb\a1\00")
(data (i32.const 1968) "multiplication overflow\00")
(data (i32.const 2000) "multiplication underflow\00")
(data (i32.const 2032) "divide by zero\00")
(data (i32.const 2048) "signed division overflow\00")
(data (i32.const 2096) ":\00")
(data (i32.const 2112) "|\00")
(data (i32.const 2128) "redpacketeee\00")
(data (i32.const 2144) "result\00")
(data (i32.const 2152) "p\08\00\00")
(data (i32.const 2160) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2208) "redpacketddd\00")
(data (i32.const 2224) "save\00")
(data (i32.const 2240) "firewall.x\00")
(data (i32.const 10656) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$14 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$15 (param i32)))
(import "env" "memcpy" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$23 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "sha256" (func $fimport$25 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$26 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$27 (result i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $7))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc" (func $8))
(export "_Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $10))
(export "_ZN12redredredred5applyEyy" (func $11))
(export "_ZN12redredredred10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $13))
(export "_ZN12redredredred6revealERKy" (func $14))
(export "_ZN12redredredred4initEv" (func $16))
(export "_ZN12redredredred7reveal1ERKy" (func $18))
(export "_ZN12redredredred5claimEy" (func $19))
(export "_ZN12redredredred8withdrawEy" (func $21))
(export "_ZN12redredredred10createroomEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $22))
(export "_ZN12redredredred4openEyyb" (func $24))
(export "_ZN12redredredred5closeEyy" (func $26))
(export "_ZN12redredredred11devwithdrawEv" (func $28))
(export "_ZN12redredredred11transfereosEyyN5eosio5assetE" (func $29))
(export "apply" (func $136))
(export "malloc" (func $137))
(export "free" (func $140))
(export "memchr" (func $157))
(export "memcmp" (func $158))
(export "strlen" (func $159))
(table $0 11 11 anyfunc)
(elem (i32.const 0) $160 $21 $16 $14 $26 $18 $29 $22 $28 $24 $19)



void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = *([0] + [4])
	$9 = $10
	*($1) = *(*(*($0 + [4])))
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1008]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($1 + [8]) = $7
	$3 = $10
	$4 = ($3 + [-16])
	*([0] + [4]) = $4
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($3 + [-8]), ($1 + [8]), [8])
	$6 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-5069082855582203904, *(*($0 + [8])), $6, $4, [16])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = $9
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$6 = *(*($0 + [4]))
	$7 = ($6 + [104])
	$5 = *($7)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = ($6 + [88])
	$3 = CALL db_lowerbound_i64(*($4), *(($6 + [96])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $74($4, $3)
	*($8 + [36]) = [0]
	*($8 + [32]) = $4
	$5 = *(*(CALL $75(($8 + [32])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [104])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1600])
	*($1) = *($7)
	*($1 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [96])
	$4 = ($1 + [8])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [160])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	$7 = $9
	$6 = ($7 + [-32])
	*([0] + [4]) = $6
	*($8 + [12]) = $6
	*($8 + [8]) = $6
	*($8 + [16]) = ($7 + [-4])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $4
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [16])
	CALL $105(($8 + [32]), ($8 + [24]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $5, $6, [28])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [160])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [160])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [976])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$5 = CALL $141([80])
	CALL $95($5)
	*($5 + [64]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [16])
	*($7 + [52]) = ($5 + [24])
	*($7 + [56]) = ($5 + [40])
	*($7 + [60]) = ($5 + [56])
	CALL $104(($7 + [40]), ($7 + [32]))
	*($5 + [68]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)3932090329724878848
	$6 = *($5 + [68])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)3932090329724878848
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $103(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [608])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $96($0, $3)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)$0), [608])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [672])
	CALL $100($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $101($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $54(CALL $53($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $54($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *(*($0 + [4]))
	$8 = ($6 + [144])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($6 + [128])
	$4 = CALL db_lowerbound_i64(*($5), *(($6 + [136])), (int_64)-5002514023590133760, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $58($5, $4)
	*($9 + [28]) = [0]
	*($9 + [24]) = $5
	$7 = *(*(CALL $73(($9 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1600])
	$7 = *($8)
	*($1 + [8]) = (int_64)3
	*($1) = $7
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$5 = ($1 + [16])
	$4 = ($1 + [8])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	
.LABEL $label$3
	CALL eosio_assert($8, [160])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)10000
	$3 = ($1 + [40])
	CALL $147($3, [1888])
	$6 = *($1 + [40])
	$8 = ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [40])
	$7 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ($6 <= [513]) ){ goto $label$10 }
	$8 = CALL malloc($6)
	goto $label$9 
	
.LABEL $label$10
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$9
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	*($9 + [16]) = $9
	*($9 + [28]) = $4
	*($9 + [24]) = $1
	*($9 + [32]) = $5
	*($9 + [36]) = ($1 + [24])
	*($9 + [40]) = $3
	CALL $62(($9 + [24]), ($9 + [16]))
	$7 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002514023590133760, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$11 }
	CALL free($8)
	
.LABEL $label$11
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$12 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $139($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10656])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $141([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [160])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [56]) = $1
	CALL $126(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [60])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $127(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*(($3 + [40])) & [1]) == 0) ){ goto $label$9 }
	CALL $142(*(($3 + [48])))
	
.LABEL $label$9
	CALL $142($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$3 = ($0 + [88])
	$11 = ($0 + [104])
	$4 = *($11)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($3), *(($0 + [96])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $74($3, $8)
	*($12 + [28]) = [0]
	*($12 + [24]) = $3
	$4 = *(*(CALL $75(($12 + [24])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [104])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1600])
	$4 = ((int_64)*($11) + (int_64)-1)
	$5 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$11 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$4:
	if ( ((int_64)*(*($11)) == (int_64)$4) ){ goto $label$3 }
	$7 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$6 }
	$11 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$3), [608])
	goto $label$5 
	
.LABEL $label$6
	$11 = CALL $74($3, CALL $fimport$6(*(($0 + [88])), *(($0 + [96])), (int_64)-3665743729458675712, $4))
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$3), [608])
	
.LABEL $label$5
	*($12 + [72]) = $3
	*($12 + [76]) = $11
	if ( ((uint_32)(*($11 + [8]) + [86400]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$8 }
	$11 = *($12 + [76])
	*($12 + [24]) = $2
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [672])
	CALL $116($3, $11, (int_64)0, ($12 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$4 = *($0)
	*($12 + [24]) = $0
	*($12 + [32]) = $2
	*($12 + [28]) = ($12 + [72])
	CALL $117(($12 + [64]), $3, $4, ($12 + [24]))
	
.LABEL $label$7
	$11 = ($0 + [104])
	$4 = *($11)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$9 }
	$4 = (int_64)0
	$8 = CALL db_lowerbound_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	CALL $74($3, $8)
	*($12 + [28]) = [0]
	*($12 + [24]) = $3
	$4 = *(*(CALL $75(($12 + [24])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*(($0 + [104])) = $4
	
.LABEL $label$9
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [1600])
	$4 = ((int_64)*($11) + (int_64)-1)
	*($12 + [64]) = $4
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = [0]
	$9 = *($0)
	*($12 + [24]) = $9
	$10 = *($1)
	*($12 + [32]) = $10
	*(($12 + [52])) = [0]
	*(($12 + [56])) = [0]
	$11 = CALL db_find_i64($9, $10, (int_64)3607749779137757184, $4)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$11 = CALL $76(($12 + [24]), $11)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($12 + [24])), [608])
	*($12 + [16]) = $2
	CALL eosio_assert([1], [672])
	CALL $118(($12 + [24]), $11, (int_64)0, ($12 + [16]))
	$7 = *($12 + [48])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = *($0)
	*($12 + [20]) = $2
	*($12 + [16]) = ($12 + [64])
	CALL $119(($12 + [8]), ($12 + [24]), $4, ($12 + [16]))
	$7 = *($12 + [48])
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$0 = ($12 + [52])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $142($8)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$16 }
	$11 = *(($12 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$11 = $7
	
.LABEL $label$14
	*($0) = $7
	CALL $142($11)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [80])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $141([72])
	$6 = CALL $128($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [60])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $127(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*(($4 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $142(*(($4 + [48])))
	
.LABEL $label$10
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $7 ? $10 : ($10 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $141(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($10 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $141([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	*(($6 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [36])
	$9 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [32])
	$5 = ($7 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $52($1, $2)
	$8 = *($6)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	*($11 + [16]) = $11
	*($11 + [36]) = $3
	*($11 + [24]) = $4
	*($11 + [28]) = ($4 + [8])
	*($11 + [32]) = ($4 + [16])
	*($11 + [40]) = ($4 + [44])
	$3 = ($10 + [40])
	CALL $125(($11 + [24]), ($11 + [16]))
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$10:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($4 = ($10 + [-24]))) = (int_64)0
	*(($1 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($4) = *($8)
	*(($10 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($1) = *($4)
	*($4) = [0]
	*(($4 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($1 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($4) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($1) = *($4)
	*($4) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $10
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	$4 = ([0] - $1)
	$10 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($10 + [16])) = $2
	CALL $142($2)
	
.LABEL $label$13
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [4])) = $2
	CALL $142($2)
	
.LABEL $label$14
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $142($1)
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [48])
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2240]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2240]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$11 = [0]
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	*($12 + [16]) = $10
	*($12 + [8]) = $8
	$5 = CALL db_find_i64($8, $10, (int_64)4983122594569794048, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $132(($12 + [8]), $5) + [8]) == (int_32)($12 + [8])), [608])
	$11 = [1]
	$3 = *($12 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	$4 = ($12 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $142($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($12 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($4) = $3
	CALL $142($5)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [48])
	return $11
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [976])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $141([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $133(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $135(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [104])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [88])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [96])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $74($5, $6)
	*($10 + [36]) = [0]
	*($10 + [32]) = $5
	$7 = *(*(CALL $75(($10 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [104])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1600])
	*($1) = *($8)
	*($1 + [8]) = (*(*(*($3 + [4]) + [4]) + [8]) + [86400])
	$3 = *($3 + [8])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$3 = $9
	$9 = ($3 + [-32])
	*([0] + [4]) = $9
	*($10 + [12]) = $9
	*($10 + [8]) = $9
	*($10 + [16]) = ($3 + [-4])
	*($10 + [24]) = ($10 + [8])
	*($10 + [36]) = ($1 + [8])
	*($10 + [32]) = $1
	*($10 + [40]) = ($1 + [16])
	CALL $105(($10 + [32]), ($10 + [24]))
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $7, $9, [28])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [416])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	*($3 + [96]) = $0
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = [0]
	*(($3 + [124])) = [0]
	*(($3 + [128])) = [0]
	*($3 + [136]) = $0
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = [0]
	*(($3 + [164])) = [0]
	*(($3 + [168])) = [0]
	*($3 + [176]) = $0
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = [0]
	*(($3 + [204])) = [0]
	*(($3 + [208])) = [0]
	*($3 + [216]) = $0
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = [0]
	*(($3 + [244])) = [0]
	*(($3 + [248])) = [0]
	*($3 + [256]) = $0
	*(($3 + [264])) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [280])) = [0]
	*(($3 + [284])) = [0]
	*(($3 + [288])) = [0]
	*($3 + [296]) = $0
	*(($3 + [304])) = $0
	*(($3 + [312])) = (int_64)-1
	*(($3 + [320])) = [0]
	*(($3 + [324])) = [0]
	*(($3 + [328])) = [0]
	*($3 + [336]) = $0
	*(($3 + [344])) = $0
	*(($3 + [352])) = (int_64)-1
	*(($3 + [360])) = [0]
	*(($3 + [364])) = [0]
	*(($3 + [368])) = [0]
	$0 = *($3 + [8])
	*($3 + [376]) = $0
	*(($3 + [384])) = $0
	*(($3 + [392])) = (int_64)-1
	*(($3 + [400])) = [0]
	*(($3 + [404])) = [0]
	*(($3 + [408])) = [0]
	CALL _ZN12redredredred5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $138([2252], $0)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	CALL eosio_assert([1], [784])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 + [16]), $5, [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $3, $6, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [48])
	$9 = $8
	*([0] + [4]) = $8
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6)
	*($1 + [8]) = *($6)
	*(($1 + [32])) = *(($6 + [24]))
	*(($1 + [24])) = *(($6 + [16]))
	*(($1 + [16])) = *(($6 + [8]))
	$3 = ($1 + [40])
	CALL $144($3, ($6 + [32]))
	*(($4 = ($1 + [52]))) = *($6 + [44])
	$6 = *($3)
	$5 = ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [44])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [8])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [784])
	CALL memcpy(*($9 + [4]), $1, [8])
	*($9 + [4]) = (*($9 + [4]) + [8])
	*($9 + [16]) = $9
	*($9 + [28]) = ($1 + [16])
	*($9 + [24]) = $5
	*($9 + [32]) = ($1 + [24])
	*($9 + [36]) = $3
	*($9 + [40]) = $4
	CALL $125(($9 + [24]), ($9 + [16]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4994024814571159552, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $56(*($1), *($0 + [12]))
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [976])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$5 = CALL $141([96])
	CALL $42($5)
	*($5 + [80]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [24])
	*($7 + [44]) = ($5 + [40])
	*($7 + [48]) = ($5 + [56])
	*($7 + [52]) = ($5 + [64])
	*($7 + [56]) = ($5 + [72])
	CALL $57(($7 + [32]), ($7 + [24]))
	*($5 + [84]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)7235159537265672192
	$6 = *($5 + [84])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

int_32 .FUNC $42 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [160])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [160])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [160])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	$4 = CALL $141([48])
	CALL $37($4)
	*($4 + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [28])) = *(($3 + [28]))
	*(($4 + [24])) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($5 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($4 + [8])) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	*($6 + [48]) = ($6 + [32])
	*($6 + [60]) = $5
	*($6 + [56]) = $4
	CALL $38(($6 + [56]), ($6 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)3794750970638893056, $2, (int_64)3794750970638893056, $6, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3794750970638893056) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3794750970638893057
	
.LABEL $label$1
	*($6 + [32]) = $4
	*($6) = (int_64)3794750970638893056
	$5 = *($4 + [36])
	*($6 + [56]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3794750970638893056
	*($3 + [16]) = $5
	*($6 + [32]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($6 + [32]), $6, ($6 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $142($4)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	$4 = CALL $141([96])
	CALL $42($4)
	*($4 + [80]) = $1
	CALL memcpy($4, *($3), [80])
	*($7 + [96]) = ($7 + [76])
	*($7 + [92]) = $7
	*($7 + [88]) = $7
	*($7 + [104]) = ($7 + [88])
	*($7 + [116]) = ($4 + [8])
	*($7 + [112]) = $4
	*($7 + [120]) = ($4 + [24])
	*($7 + [124]) = ($4 + [40])
	*($7 + [128]) = ($4 + [56])
	*($7 + [132]) = ($4 + [64])
	*($7 + [136]) = ($4 + [72])
	CALL $48(($7 + [112]), ($7 + [104]))
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $7, [76])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($7 + [112]) = $4
	*($7) = (int_64)7235159537265672192
	$5 = *($4 + [84])
	*($7 + [88]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $5
	*($7 + [112]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $49(($1 + [24]), ($7 + [112]), $7, ($7 + [88]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [112])
	*($7 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $142($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [144])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [912])
	*($4 + [96]) = ($4 + [76])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($1 + [8])
	*($4 + [112]) = $1
	*($4 + [120]) = ($1 + [24])
	*($4 + [124]) = ($1 + [40])
	*($4 + [128]) = ($1 + [56])
	*($4 + [132]) = ($1 + [64])
	*($4 + [136]) = ($1 + [72])
	CALL $48(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [76])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$0), [608])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $43($0, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$0), [608])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [672])
	CALL $46($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $47($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$4 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1040]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($11 + [64]) = $8
	*($11 + [56]) = $4
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [1056]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	$7 = (int_64)0
	$6 = (int_64)59
	$0 = [80]
	$10 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$18 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$14
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$13 }
	*(($11 + [36])) = *(($2 + [12]))
	*(($11 + [32])) = *(($2 + [8]))
	*(($11 + [28])) = *(($2 + [4]))
	*($11 + [16]) = $1
	*($11 + [8]) = $4
	*($11 + [24]) = *($2)
	CALL $155(($11 + [40]), $3)
	$0 = CALL $50(($11 + [72]), ($11 + [56]), $8, $10, ($11 + [8]))
	CALL $51(($11 + [112]), $0)
	$5 = *($11 + [112])
	CALL send_inline($5, (*($11 + [116]) - $5))
	$5 = *($11 + [112])
	if ( ($5 == 0) ){ goto $label$19 }
	*($11 + [116]) = $5
	CALL $142($5)
	
.LABEL $label$19
	$5 = *($0 + [28])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($0 + [32])) = $5
	CALL $142($5)
	
.LABEL $label$20
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($0 + [20])) = $5
	CALL $142($5)
	
.LABEL $label$21
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$22 }
	CALL $142(*(($11 + [48])))
	
.LABEL $label$22
	*([0] + [4]) = ($11 + [128])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($1 + [36])) = *(($3 + [28]))
	*(($1 + [32])) = *(($3 + [24]))
	*(($1 + [28])) = *(($3 + [20]))
	*(($1 + [24])) = *(($3 + [16]))
	*(($1 + [20])) = *(($3 + [12]))
	*(($1 + [16])) = *(($3 + [8]))
	*(($1 + [12])) = *(($3 + [4]))
	$4 = *($1)
	$5 = ($1 + [40])
	CALL $144($5, ($3 + [32]))
	*(($6 = ($1 + [52]))) = *($3 + [44])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	$3 = *($5)
	$7 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [44])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [784])
	CALL memcpy(*($10 + [4]), $1, [8])
	*($10 + [4]) = (*($10 + [4]) + [8])
	*($10 + [16]) = $10
	*($10 + [28]) = ($1 + [16])
	*($10 + [24]) = $7
	*($10 + [32]) = ($1 + [24])
	*($10 + [36]) = $5
	*($10 + [40]) = $6
	CALL $125(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	*(($0 + [24])) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*(($0 + [48])) = [0]
	*(($5 = ($0 + [40]))) = (int_64)0
	*($0 + [56]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($6) = $4
	*($6 + [12]) = ($0 + [16])
	*($6 + [8]) = ($0 + [8])
	*($6 + [16]) = ($0 + [24])
	*($6 + [20]) = $5
	*($6 + [24]) = ($0 + [52])
	CALL $129(($6 + [8]), $6)
	*($0 + [60]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0) = (int_64)0
	$3 = [0]
	*($0 + [8]) = [0]
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $5 )
	if ( ($6 == 0) ){ goto $label$2 }
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)*($2)) ){ goto $label$7 }
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$6 }
	CALL $155($3, $7)
	*($5) = (*($5) + [12])
	goto $label$5 
	
.LABEL $label$7
	CALL $150($7, int_32(($3 << [24]) >> [24]))
	goto $label$4 
	
.LABEL $label$6
	CALL $9($0, $7)
	
.LABEL $label$5
	if ( (*($7) & [1]) ){ goto $label$8 }
	*($7) = [0]
	goto $label$4 
	
.LABEL $label$8
	*(*(($7 + [8]))) = [0]
	*($7 + [4]) = [0]
	
.LABEL $label$4
	$1 = ($1 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$3 }
	$3 = *($7 + [4])
	$1 = *($7)
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	
.LABEL $label$1
	if ( (( $3 ? uint_32(($1 & [254]) >> [1]) : ($1 & [1]) ) == 0) ){ goto $label$9 }
	$1 = ($0 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$10 }
	CALL $155($6, $7)
	*($1) = (*($1) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $9($0, $7)
	
.LABEL $label$9
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $142(*(($7 + [8])))
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $141(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $155($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $142(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $142($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $141($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $148($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $143($0)
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [16])
	$2 = CALL $152($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $156($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [48])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $146($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $146($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN12redredredred6revealERKy (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$8 = (int_64)0
	$10 = (int_64)59
	$5 = [1920]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$5 = [1872]
	$9 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$10 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$10
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	CALL require_auth2($6, $9)
	$8 = *($1)
	$3 = *(($0 + [152]))
	$11 = *(($0 + [156]))
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$11 }
	$5 = ($11 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$12:
	if ( ((int_64)*(*($5)) == (int_64)$8) ){ goto $label$11 }
	$11 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$2 = ($0 + [128])
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$14 }
	$5 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)$2), [608])
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	$11 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-5002514023590133760, $8)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $58($2, $11)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)$2), [608])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1936])
	CALL $106($0, *($1))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [192])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12redredredred4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [256])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	$10 = *($0)
	*($13 + [240]) = $0
	*($13 + [72]) = $10
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$3()), [720])
	$8 = ($0 + [128])
	*($13 + [152]) = $8
	*($13 + [156]) = ($13 + [240])
	*($13 + [160]) = ($13 + [72])
	*(($1 = CALL $141([64])) + [32]) = (int_64)1398362884
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*($1 + [48]) = [0]
	*($1 + [40 align=4]) = (int_64)0
	*($1 + [52]) = $8
	CALL $93(($13 + [152]), $1)
	*($13 + [8]) = $1
	$10 = *($1)
	*($13 + [152]) = $10
	$5 = *($1 + [56])
	*($13 + [248]) = $5
	$8 = ($0 + [156])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [160]))) ){ goto $label$7 }
	*($3 + [8]) = $10
	*($3 + [16]) = $5
	*($13 + [8]) = [0]
	*($3) = $1
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $65(($0 + [152]), ($13 + [8]), ($13 + [152]), ($13 + [248]))
	
.LABEL $label$6
	$1 = *($13 + [8])
	$3 = [0]
	*($13 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $142(*(($1 + [48])))
	
.LABEL $label$9
	CALL $142($1)
	
.LABEL $label$8
	$10 = *($0)
	*($13 + [240]) = $0
	*($13 + [72]) = $10
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$3()), [720])
	$8 = ($0 + [88])
	*($13 + [152]) = $8
	*($13 + [156]) = ($13 + [240])
	*($13 + [160]) = ($13 + [72])
	*(($5 = CALL $141([48])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5462355
	
.LOOP $label$11:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($1, [160])
	*($5 + [32]) = $8
	CALL $94(($13 + [152]), $5)
	*($13 + [8]) = $5
	$10 = *($5)
	*($13 + [152]) = $10
	$1 = *($5 + [36])
	*($13 + [248]) = $1
	$8 = ($0 + [116])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [120]))) ){ goto $label$15 }
	*($3 + [8]) = $10
	*($3 + [16]) = $1
	*($13 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $83(($0 + [112]), ($13 + [8]), ($13 + [152]), ($13 + [248]))
	
.LABEL $label$14
	$3 = *($13 + [8])
	*($13 + [8]) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	CALL $142($3)
	
.LABEL $label$16
	CALL memset(($13 + [72]), [0], [80])
	$3 = CALL $42(($13 + [72]))
	$5 = ($0 + [8])
	$1 = *(($0 + [36]))
	if ( ((int_32)$1 == (int_32)*(($0 + [32]))) ){ goto $label$19 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$5), [608])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$17 }
	$1 = CALL $43($5, $1)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$5), [608])
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	CALL memcpy(($13 + [152]), $3, [80])
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$1 = [0]
	
.LABEL $label$20
	CALL eosio_assert($1, [160])
	*(($13 + [184])) = (int_64)1397703940
	*($13 + [176]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$1 = [0]
	
.LABEL $label$25
	CALL eosio_assert($1, [160])
	*(($13 + [168])) = (int_64)1397703940
	*($13 + [160]) = (int_64)0
	*($13 + [152]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$1 = [0]
	
.LABEL $label$30
	CALL eosio_assert($1, [160])
	*(($13 + [200])) = (int_64)1397703940
	$10 = (int_64)0
	*($13 + [192]) = (int_64)0
	*($13 + [208]) = (int_64)0
	*($13 + [216]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [7200])
	$9 = (int_64)59
	$3 = [1008]
	$11 = (int_64)0
	
.LOOP $label$35:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$36 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$1 = ($1 + [165])
	goto $label$37 
	
.LABEL $label$38
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$35 }
	*($13 + [224]) = $11
	CALL $45($5, ($13 + [152]), *($0))
	CALL memset(($13 + [8]), [0], [64])
	$3 = CALL $95(($13 + [8]))
	$5 = ($0 + [288])
	$1 = *(($0 + [316]))
	if ( ((int_32)$1 == (int_32)*(($0 + [312]))) ){ goto $label$41 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$5), [608])
	if ( $1 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$1 = CALL db_find_i64(*($5), *(($0 + [296])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$39 }
	$1 = CALL $96($5, $1)
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$5), [608])
	
.LABEL $label$40
	$3 = $1
	
.LABEL $label$39
	CALL memcpy(($13 + [72]), $3, [64])
	$10 = (int_64)0
	*($13 + [72]) = (int_64)0
	$9 = (int_64)59
	$3 = [1008]
	$11 = (int_64)0
	
.LOOP $label$42:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$43 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$1 = ($1 + [165])
	goto $label$44 
	
.LABEL $label$45
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$43
	$3 = ($3 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$42 }
	*($13 + [80]) = $11
	*($13 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [604800])
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$1 = [0]
	
.LABEL $label$46
	CALL eosio_assert($1, [160])
	*(($13 + [104])) = (int_64)1397703940
	*($13 + [96]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)22308276080103240
	$3 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$1 = [0]
	
.LABEL $label$51
	CALL eosio_assert($1, [160])
	*(($13 + [120])) = (int_64)5710918676506429444
	*($13 + [112]) = (int_64)0
	*($13 + [128]) = [0]
	CALL $97($5, ($13 + [72]), *($0))
	*($13 + [4]) = [0]
	$2 = ($0 + [272])
	$1 = ($0 + [248])
	$6 = ($13 + [16])
	$7 = ($0 + [280])
	$8 = ($0 + [276])
	
.LOOP $label$56:
	$10 = *($0)
	*($13) = ($13 + [4])
	*($13 + [248]) = $10
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	*($13 + [8]) = $1
	*($6) = ($13 + [248])
	*($13 + [12]) = $13
	*(($3 = CALL $141([32])) + [16]) = $1
	CALL $98(($13 + [8]), $3)
	*($13 + [240]) = $3
	$10 = *($3)
	*($13 + [8]) = $10
	$4 = *($3 + [20])
	*($13 + [236]) = $4
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*($7)) ){ goto $label$58 }
	*($5 + [8]) = $10
	*($5 + [16]) = $4
	*($13 + [240]) = [0]
	*($5) = $3
	*($8) = ($5 + [24])
	goto $label$57 
	
.LABEL $label$58
	CALL $99($2, ($13 + [240]), ($13 + [8]), ($13 + [236]))
	
.LABEL $label$57
	$3 = *($13 + [240])
	*($13 + [240]) = [0]
	if ( ($3 == 0) ){ goto $label$59 }
	CALL $142($3)
	
.LABEL $label$59
	$3 = (*($13 + [4]) + [1])
	*($13 + [4]) = $3
	if ( ((int_32)$3 < (int_32)[11]) ){ goto $label$56 }
	*([0] + [4]) = ($13 + [256])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_64 .FUNC _Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$4 = (int_64)0
	
.LOOP $label$5:
	$2 = *($0)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = *($1)
	$4 = (int_64)0
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($2 + $0)) < (int_32)[48]) ){ goto $label$8 }
	if ( ((int_32)*((*($1) + $0)) > (int_32)[57]) ){ goto $label$8 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*((*($1) + $0))) + (int_64)-48)
	
.LABEL $label$8
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$7 }
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZN12redredredred5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [304])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $12(($9 + [240]))
	$6 = *($9 + [248])
	*(($9 + [212])) = *(($9 + [268]))
	*(($4 = (($9 + [200]) + [8]))) = *(($9 + [264]))
	*($9 + [204]) = *(($9 + [260]))
	$8 = *($9 + [240])
	*($9 + [200]) = *($9 + [256])
	$5 = *($4)
	*((($9 + [288]) + [8])) = $5
	*(($4 = (($9 + [216]) + [8]))) = $5
	$5 = *($9 + [200])
	*($9 + [288]) = $5
	*($9 + [216]) = $5
	*($9 + [232]) = $1
	$3 = ($9 + [272])
	CALL $155(($9 + [184]), $3)
	*(($9 + [16])) = *($9 + [232])
	*(($9 + [8])) = *($4)
	*($9) = *($9 + [216])
	CALL _ZN12redredredred10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $8, $6, $9, ($9 + [184]))
	if ( ((*($9 + [184]) & [1]) == 0) ){ goto $label$9 }
	CALL $142(*($9 + [192]))
	
.LABEL $label$9
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $142(*(($9 + [280])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)-4992623623903641601) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-4992623623903641600) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-3617168760272244736) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [1]
	*($9 + [56 align=4]) = *($9 + [144])
	CALL $20($0, ($9 + [56]))
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)5031766165184348159) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)5031766165184348160) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)5383991118997862400) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [2]
	*($9 + [32 align=4]) = *($9 + [168])
	CALL $17($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$7 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [3]
	*($9 + [24 align=4]) = *($9 + [176])
	CALL $15($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$7 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [4]
	*($9 + [80 align=4]) = *($9 + [120])
	CALL $27($0, ($9 + [80]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [164]) = [0]
	*($9 + [160]) = [5]
	*($9 + [40 align=4]) = *($9 + [160])
	CALL $15($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$14
	*($9 + [108]) = [0]
	*($9 + [104]) = [6]
	*($9 + [96 align=4]) = *($9 + [104])
	CALL $30($0, ($9 + [96]))
	goto $label$7 
	
.LABEL $label$13
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [64 align=4]) = *($9 + [136])
	CALL $23($0, ($9 + [64]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [116]) = [0]
	*($9 + [112]) = [8]
	*($9 + [88 align=4]) = *($9 + [112])
	CALL $17($0, ($9 + [88]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [132]) = [0]
	*($9 + [128]) = [9]
	*($9 + [72 align=4]) = *($9 + [128])
	CALL $25($0, ($9 + [72]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [156]) = [0]
	*($9 + [152]) = [10]
	*($9 + [48 align=4]) = *($9 + [152])
	CALL $20($0, ($9 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [304])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $134($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC _ZN12redredredred10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$10 = *($0)
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$1 }
	if ( (CALL $131($0, $1) == 0) ){ goto $label$7 }
	$1 = *($0)
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [1040]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$13 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	*($11 + [16]) = $9
	*($11 + [8]) = $1
	$6 = *($3 + [16])
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [80]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$19 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$5 = ($5 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$14 }
	$2 = (int_64)0
	$10 = (int_64)59
	$7 = [2208]
	$1 = (int_64)0
	
.LOOP $label$20:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$21 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$21
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$8 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$20 }
	$10 = *($3 + [8])
	$8 = *($3)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$24 }
	goto $label$5 
	
.LABEL $label$7
	$6 = *($0)
	$2 = (int_64)0
	$10 = (int_64)59
	$7 = [1920]
	$9 = (int_64)0
	
.LOOP $label$27:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$28 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$5 = ($5 + [165])
	goto $label$29 
	
.LABEL $label$30
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$6 != (int_64)$9) ){ goto $label$4 }
	$7 = *($4)
	$5 = CALL strlen([2224])
	if ( ((int_32)$5 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$1 }
	if ( CALL $153($4, [0], [-1], [2224], $5) ){ goto $label$1 }
	$6 = *($3 + [16])
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [1056]
	$9 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$36 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$5 = ($5 + [165])
	goto $label$34 
	
.LABEL $label$36
	$10 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$32
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$31 }
	if ( ((int_64)$6 != (int_64)$9) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	*(($11 + [72])) = [0]
	*($11 + [48]) = $1
	*($11 + [56]) = (int_64)-1
	*($11 + [64]) = (int_64)0
	$10 = *($0)
	*($11 + [40]) = $10
	*($11 + [16]) = (int_64)1397703940
	*($11 + [8]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	
.LOOP $label$39:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$39 }
	
.LABEL $label$38
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$37 }
	goto $label$2 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [160])
	*(($11 + [64])) = $10
	*($11 + [48]) = $1
	*($11 + [56]) = $8
	*($11 + [40]) = *($0)
	CALL $155(($11 + [72]), $4)
	$7 = CALL $50(($11 + [88]), ($11 + [8]), $6, $9, ($11 + [40]))
	CALL $51(($11 + [128]), $7)
	$5 = *($11 + [128])
	CALL send_inline($5, (*($11 + [132]) - $5))
	$5 = *($11 + [128])
	if ( ($5 == 0) ){ goto $label$40 }
	*($11 + [132]) = $5
	CALL $142($5)
	
.LABEL $label$40
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$41 }
	*(($7 + [32])) = $5
	CALL $142($5)
	
.LABEL $label$41
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$42 }
	*(($7 + [20])) = $5
	CALL $142($5)
	
.LABEL $label$42
	if ( ((*($11 + [72]) & [1]) == 0) ){ goto $label$1 }
	CALL $142(*(($11 + [80])))
	goto $label$1 
	
.LABEL $label$4
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [1040]
	$9 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$48 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$5 = ($5 + [165])
	goto $label$46 
	
.LABEL $label$48
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$44
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$43 }
	*($11 + [16]) = $9
	*($11 + [8]) = $6
	$6 = *($3 + [16])
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [80]
	$9 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$54 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$5 = ($5 + [165])
	goto $label$52 
	
.LABEL $label$54
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$50
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$49 }
	$2 = (int_64)0
	$10 = (int_64)59
	$7 = [2208]
	$1 = (int_64)0
	
.LOOP $label$55:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$56 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$5 = ($5 + [165])
	goto $label$57 
	
.LABEL $label$58
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$56
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$8 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$55 }
	$10 = *($3 + [8])
	$8 = *($3)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	
.LOOP $label$63:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$63 }
	
.LABEL $label$62
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$5 = [0]
	
.LABEL $label$59
	CALL eosio_assert($5, [160])
	*(($11 + [64])) = $10
	*($11 + [48]) = $1
	*($11 + [56]) = $8
	*($11 + [40]) = *($0)
	CALL $155(($11 + [72]), $4)
	$7 = CALL $50(($11 + [88]), ($11 + [8]), $6, $9, ($11 + [40]))
	CALL $51(($11 + [128]), $7)
	$5 = *($11 + [128])
	CALL send_inline($5, (*($11 + [132]) - $5))
	$5 = *($11 + [128])
	if ( ($5 == 0) ){ goto $label$64 }
	*($11 + [132]) = $5
	CALL $142($5)
	
.LABEL $label$64
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$65 }
	*(($7 + [32])) = $5
	CALL $142($5)
	
.LABEL $label$65
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$66 }
	*(($7 + [20])) = $5
	CALL $142($5)
	
.LABEL $label$66
	if ( ((*($11 + [72]) & [1]) == 0) ){ goto $label$1 }
	CALL $142(*(($11 + [80])))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [160])
	*((($11 + [8]) + [24])) = (int_64)1397703940
	*($11 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$5 = [0]
	
.LABEL $label$67
	CALL eosio_assert($5, [160])
	CALL $32(($11 + [88]), ($11 + [40]), $10, ($11 + [8]))
	CALL eosio_assert(((int_64)*(($11 + [112])) == (int_64)1397703940), [496])
	$2 = ((int_64)*($11 + [104]) + (int_64)*($3))
	*($11 + [104]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($11 + [104]) < (int_64)4611686018427387904), [576])
	CALL $33(($11 + [40]), ($11 + [88]), *($0))
	$0 = *($11 + [64])
	if ( ($0 == 0) ){ goto $label$1 }
	$3 = ($11 + [68])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$73 }
	
.LOOP $label$74:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$75 }
	CALL $142($5)
	
.LABEL $label$75
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$74 }
	$7 = *(($11 + [64]))
	goto $label$72 
	
.LABEL $label$73
	$7 = $0
	
.LABEL $label$72
	*($3) = $0
	CALL $142($7)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [144])
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1728])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1664])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1664])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $74(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN12redredredred7reveal1ERKy (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$2 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1040]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($9 + [24]) = $7
	*($9 + [16]) = $2
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1872]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*($9 + [8]) = $7
	CALL $84($0, ($9 + [16]), $0, ($9 + [8]), $1)
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN12redredredred5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [96])
	*([0] + [4]) = $19
	CALL require_auth($1)
	$18 = [0]
	*(($19 + [80])) = [0]
	*($19 + [56]) = $1
	*($19 + [72]) = (int_64)0
	*($19 + [48]) = *($0)
	$2 = ($0 + [88])
	*($19 + [64]) = (int_64)-1
	$9 = ($0 + [104])
	$17 = *($9)
	if ( ((int_64)$17 != (int_64)-1) ){ goto $label$1 }
	$17 = (int_64)0
	$16 = CALL db_lowerbound_i64(*($2), *(($0 + [96])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$2 }
	CALL $74($2, $16)
	*($19 + [92]) = [0]
	*($19 + [88]) = $2
	$17 = *(*(CALL $75(($19 + [88])) + [4]))
	$17 = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [104])) = $17
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($17 <= (int_64)-2), [1600])
	$17 = *($9)
	CALL eosio_assert([1], [96])
	$10 = ((int_64)$17 + (int_64)-1)
	$17 = (int_64)22308276080103240
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	
.LABEL $label$3
	CALL eosio_assert($9, [160])
	$4 = (int_64)0
	$11 = (($19 + [48]) + [8])
	$18 = CALL db_lowerbound_i64(*($19 + [48]), *($11), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$8 }
	$3 = ((int_64)5710918676506429444 == (int_64)5710918676506429444)
	$12 = ($0 + [112])
	$13 = ($0 + [116])
	$14 = ($0 + [96])
	$15 = ($0 + [88])
	$4 = (int_64)0
	
.LOOP $label$9:
	$5 = CALL $76(($19 + [48]), $18)
	$17 = *($5)
	if ( ((int_64)$17 == (int_64)$10) ){ goto $label$8 }
	$6 = *($5 + [8])
	$7 = *($12)
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$10 }
	$18 = ($16 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)*(*($18)) == (int_64)$17) ){ goto $label$10 }
	$16 = $18
	$9 = ($18 + [-24])
	$18 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$13 }
	$18 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [32]) == (int_32)$2), [608])
	goto $label$12 
	
.LABEL $label$13
	$18 = CALL $74($2, CALL $fimport$6(*($15), *($14), (int_64)-3665743729458675712, $17))
	CALL eosio_assert(((int_32)*($18 + [32]) == (int_32)$2), [608])
	
.LABEL $label$12
	$6 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $6) * (float_64)(float_64)21e7) / (float_64)(CASTING float_64)(int_64 *($18 + [16]))))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$17 = (int_64)22308276080103240
	$18 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $17) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$17) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$9 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [160])
	CALL eosio_assert($3, [496])
	$4 = ((int_64)$6 + (int_64)$4)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [576])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1184])
	$18 = CALL db_next_i64(*($5 + [28]), ($19 + [88]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$19 }
	CALL $76(($19 + [48]), $18)
	
.LABEL $label$19
	CALL $77(($19 + [48]), $5)
	$18 = CALL db_lowerbound_i64(*($19 + [48]), *($11), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$4 > (int_64)0), [1792])
	*($19 + [40]) = (int_64)5710918676506429444
	*((($19 + [16]) + [8])) = [0]
	*($19 + [32]) = $4
	*($19 + [16]) = (int_64)0
	$18 = CALL strlen([1824])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$23 }
	*($19 + [16]) = ($18 << [1])
	$9 = (($19 + [16]) | [1])
	if ( $18 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$16 = (($18 + [16]) & [-16])
	$9 = CALL $141($16)
	*($19 + [16]) = ($16 | [1])
	*($19 + [24]) = $9
	*($19 + [20]) = $18
	
.LABEL $label$22
	CALL memcpy($9, [1824], $18)
	
.LABEL $label$21
	*(($9 + $18)) = [0]
	*(($19 + [8])) = *((($19 + [32]) + [8]))
	*($19) = *($19 + [32])
	CALL $78($0, $1, $19, ($19 + [16]))
	if ( ((*($19 + [16]) & [1]) == 0) ){ goto $label$24 }
	CALL $142(*($19 + [24]))
	
.LABEL $label$24
	$16 = *($19 + [72])
	if ( ($16 == 0) ){ goto $label$25 }
	$8 = ($19 + [76])
	$18 = *($8)
	if ( ((int_32)$18 == (int_32)$16) ){ goto $label$27 }
	
.LOOP $label$28:
	$18 = ($18 + [-24])
	$9 = *($18)
	*($18) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	CALL $142($9)
	
.LABEL $label$29
	if ( ((int_32)$16 != (int_32)$18) ){ goto $label$28 }
	$18 = *(($19 + [72]))
	goto $label$26 
	
.LABEL $label$27
	$18 = $16
	
.LABEL $label$26
	*($8) = $16
	CALL $142($18)
	
.LABEL $label$25
	*([0] + [4]) = ($19 + [96])
	return (unreachable)
	
.LABEL $label$20
	CALL $143(($19 + [16]))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $141([64])
	$6 = CALL $64($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [56])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $65(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $142(*(($4 + [48])))
	
.LABEL $label$10
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [976])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $141([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [192])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $141([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $52($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $55(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $52($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [784])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [784])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $54(CALL $53($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $141($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $142($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [784])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [976])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$5 = CALL $141([48])
	CALL $37($5)
	*($5 + [32]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [16])
	*($7 + [40]) = $5
	CALL $40(($7 + [40]), ($7 + [32]))
	*($5 + [36]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)3794750970638893056
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)3794750970638893056
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [192])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [496])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [576])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*($6 + [48]) = ($6 + [28])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	*($6 + [56]) = ($6 + [40])
	*($6 + [68]) = ($1 + [8])
	*($6 + [64]) = $1
	*($6 + [72]) = ($1 + [16])
	CALL $105(($6 + [64]), ($6 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $6, [28])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $141([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [160])
	*($4 + [32]) = $1
	CALL $121(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $83(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $142($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)-1)
	$4 = *($1)
	CALL eosio_assert([1], [912])
	$7 = *($1 + [40])
	$6 = ( *(($1 + [44])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [40])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [40])
	$5 = ($1 + [16])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	*($10 + [16]) = $10
	*($10 + [32]) = $5
	*($10 + [40]) = $6
	*($10 + [24]) = $1
	*($10 + [28]) = ($1 + [8])
	*($10 + [36]) = ($1 + [24])
	CALL $62(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [56]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [24])) = *(($3 + [24]))
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [912])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	*($5 + [48]) = ($5 + [32])
	*($5 + [60]) = $4
	*($5 + [56]) = $1
	CALL $38(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3794750970638893056) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3794750970638893057
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $130(($6 + [52]), $1, $2, $3, $4)
	*($6 + [36]) = [1]
	$5 = CALL $86($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $87(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $142($0)
	
.LABEL $label$1
	CALL $88(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = *($1)
	$3 = *(($0 + [352]))
	$7 = *(($0 + [356]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [328])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$6), [608])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)-4994024814571159552, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $122($6, $5)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$6), [608])
	
.LABEL $label$5
	*($8) = $1
	CALL eosio_assert([1], [672])
	CALL $124($6, $5, (int_64)0, $8)
	goto $label$3 
	
.LABEL $label$4
	$2 = *($0)
	*($8 + [8]) = $1
	CALL $123($8, $6, $2, ($8 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)-1)
	$4 = *($1)
	CALL eosio_assert([1], [912])
	$7 = *($1 + [40])
	$6 = ( *(($1 + [44])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [40])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [40])
	$5 = ($1 + [16])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	*($10 + [16]) = $10
	*($10 + [32]) = $5
	*($10 + [40]) = $6
	*($10 + [24]) = $1
	*($10 + [28]) = ($1 + [8])
	*($10 + [36]) = ($1 + [24])
	CALL $62(($10 + [24]), ($10 + [16]))
	CALL db_update_i64(*($1 + [56]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL free($9)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $141([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2152]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $156($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $146($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10742]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10744])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10742]) = [1]
	$7 = ($7 << [16])
	*([0] + [10744]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10744])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10744]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10742]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10742]) = [1]
	$3 = ($3 << [16])
	*([0] + [10744]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10744])
	
.LABEL $label$8
	*([0] + [10744]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$4 = *($1)
	$5 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5)), [496])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [576])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	CALL eosio_assert([1], [784])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($7 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL db_update_i64(*($1 + [28]), $2, $7, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $141([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [160])
	*($4 + [24]) = $1
	CALL $120(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $81(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $142($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $151($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $141($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $142($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $141($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $141($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $160 ()
{
	(unreachable)
}

void .FUNC _ZN12redredredred11transfereosEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	$9 = [0]
	$5 = [0]
	$4 = *($3)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [240])
	CALL require_auth($1)
	*(($10 + [168])) = [0]
	*($10 + [144]) = $1
	*($10 + [152]) = (int_64)-1
	*($10 + [160]) = (int_64)0
	$1 = *($0)
	*($10 + [136]) = $1
	*($10 + [72]) = (int_64)1397703940
	*($10 + [64]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	
.LOOP $label$8:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [160])
	*((($10 + [64]) + [24])) = (int_64)1397703940
	*($10 + [80]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	
.LOOP $label$13:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [160])
	CALL $32(($10 + [104]), ($10 + [136]), $1, ($10 + [64]))
	$7 = *($10 + [120])
	$8 = (($10 + [104]) + [24])
	$6 = *($8)
	CALL eosio_assert(((int_64)*($10 + [112]) == (int_64)$6), [272])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($10 + [104]))) > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [352])
	$1 = *($3 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [384])
	CALL eosio_assert(((int_64)$7 >= (int_64)$4), [448])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [272])
	$7 = (int_64)
	*($10 + [120]) = $7(*($10 + [120]) - $4))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($10 + [120]) < (int_64)4611686018427387904), [352])
	CALL $33(($10 + [136]), ($10 + [104]), *($0))
	*(($10 + [96])) = [0]
	*($10 + [72]) = $2
	*($10 + [80]) = (int_64)-1
	*($10 + [88]) = (int_64)0
	$2 = *($0)
	*($10 + [64]) = $2
	*($10 + [8]) = (int_64)1397703940
	*($10) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	
.LOOP $label$18:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [160])
	*(($10 + [24])) = (int_64)1397703940
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	
.LOOP $label$22:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	CALL eosio_assert($9, [160])
	CALL $32(($10 + [32]), ($10 + [64]), $2, $10)
	CALL eosio_assert(((int_64)$1 == (int_64)*(($10 + [56]))), [496])
	$7 = ((int_64)*($10 + [48]) + (int_64)$4)
	*($10 + [48]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($10 + [48]) < (int_64)4611686018427387904), [576])
	CALL $33(($10 + [64]), ($10 + [32]), *($0))
	$5 = *($10 + [88])
	if ( ($5 == 0) ){ goto $label$25 }
	$0 = ($10 + [92])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$27 }
	
.LOOP $label$28:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	CALL $142($9)
	
.LABEL $label$29
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$28 }
	$8 = *(($10 + [88]))
	goto $label$26 
	
.LABEL $label$27
	$8 = $5
	
.LABEL $label$26
	*($0) = $5
	CALL $142($8)
	
.LABEL $label$25
	$5 = *($10 + [160])
	if ( ($5 == 0) ){ goto $label$30 }
	$0 = ($10 + [164])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$33:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$34 }
	CALL $142($9)
	
.LABEL $label$34
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$33 }
	$8 = *(($10 + [160]))
	goto $label$31 
	
.LABEL $label$32
	$8 = $5
	
.LABEL $label$31
	*($0) = $5
	CALL $142($8)
	
.LABEL $label$30
	*([0] + [4]) = ($10 + [176])
}

void .FUNC _ZN12redredredred11devwithdrawEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [208])
	*([0] + [4]) = $9
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1008]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	CALL memset(($9 + [48]), [0], [80])
	$3 = CALL $42(($9 + [48]))
	$2 = ($0 + [8])
	$1 = *(($0 + [36]))
	if ( ((int_32)$1 == (int_32)*(($0 + [32]))) ){ goto $label$7 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$2), [608])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $43($2, $1)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$2), [608])
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	CALL memcpy(($9 + [128]), $3, [80])
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1008]
	$6 = (int_64)0
	
.LOOP $label$8:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$9 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$1 = ($1 + [165])
	goto $label$10 
	
.LABEL $label$11
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$8 }
	*((($9 + [32]) + [8])) = *(($9 + [160]))
	*((($9 + [16]) + [8])) = [0]
	*($9 + [32]) = *($9 + [152])
	*($9 + [16]) = (int_64)0
	$1 = CALL strlen([1024])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$15 }
	*($9 + [16]) = ($1 << [1])
	$8 = (($9 + [16]) | [1])
	if ( $1 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$3 = (($1 + [16]) & [-16])
	$8 = CALL $141($3)
	*($9 + [16]) = ($3 | [1])
	*($9 + [24]) = $8
	*($9 + [20]) = $1
	
.LABEL $label$14
	CALL memcpy($8, [1024], $1)
	
.LABEL $label$13
	$3 = [0]
	*(($8 + $1)) = [0]
	*(($9 + [8])) = *((($9 + [32]) + [8]))
	*($9) = *($9 + [32])
	CALL $44($0, $6, $9, ($9 + [16]))
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $142(*($9 + [24]))
	
.LABEL $label$16
	CALL eosio_assert([1], [96])
	$5 = (int_64)5459781
	
.LOOP $label$18:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$1 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert($1, [160])
	*(($9 + [160])) = (int_64)1397703940
	*($9 + [152]) = (int_64)0
	CALL $45($2, ($9 + [128]), *($0))
	*([0] + [4]) = ($9 + [208])
	return (unreachable)
	
.LABEL $label$12
	CALL $143(($9 + [16]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	CALL memset(($9 + [112]), [0], [80])
	$8 = CALL $42(($9 + [112]))
	$2 = ($0 + [8])
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [608])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $43($2, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$2), [608])
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	CALL memcpy(($9 + [192]), $8, [80])
	$5 = (int_64)$3 >> (int_64)63
	$3 = *($1)
	CALL __multi3($9, $3, $5), (int_64)20, (int_64)0)
	CALL __multi3(($9 + [16]), $3, $5, (int_64)60, (int_64)0)
	CALL __multi3(($9 + [32]), $3, $5, (int_64)10, (int_64)0)
	$3 = *($1 + [8])
	$5 = *(($9 + [8]))
	$6 = *($9)
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [1968])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [2000])
	CALL eosio_assert([1], [2032])
	CALL eosio_assert([1], [2048])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($9 + [224]))), [496])
	$5 = ((int_64)*($9 + [216]) + (int_64)((int_64)$6 / (int_64)100))
	*($9 + [216]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [576])
	$5 = *((($9 + [16]) + [8]))
	$6 = *($9 + [16])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [1968])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [2000])
	CALL eosio_assert([1], [2032])
	CALL eosio_assert([1], [2048])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($9 + [208]))), [496])
	$5 = ((int_64)*($9 + [200]) + (int_64)((int_64)$6 / (int_64)100))
	*($9 + [200]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [576])
	$5 = *((($9 + [32]) + [8]))
	$6 = *($9 + [32])
	$7 = ( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) )
	CALL eosio_assert($7, [1968])
	$4 = ( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) )
	CALL eosio_assert($4, [2000])
	CALL eosio_assert([1], [2032])
	CALL eosio_assert([1], [2048])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($9 + [240]))), [496])
	$6 = ((int_64)$6 / (int_64)100)
	$5 = ((int_64)*($9 + [232]) + (int_64)$6)
	*($9 + [232]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [576])
	CALL $45($2, ($9 + [192]), *($0))
	CALL memset(($9 + [48]), [0], [64])
	$1 = CALL $95(($9 + [48]))
	$2 = ($0 + [288])
	$8 = *(($0 + [316]))
	if ( ((int_32)$8 == (int_32)*(($0 + [312]))) ){ goto $label$6 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$2), [608])
	if ( $8 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($2), *(($0 + [296])), (int_64)3932090329724878848, (int_64)3932090329724878848)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $96($2, $8)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$2), [608])
	
.LABEL $label$5
	$1 = $8
	
.LABEL $label$4
	CALL memcpy(($9 + [112]), $1, [64])
	CALL eosio_assert($7, [1968])
	CALL eosio_assert($4, [2000])
	CALL eosio_assert([1], [2032])
	CALL eosio_assert([1], [2048])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($9 + [144]))), [496])
	$3 = ((int_64)*($9 + [136]) + (int_64)$6)
	*($9 + [136]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [576])
	CALL $97($2, ($9 + [112]), *($0))
	*([0] + [4]) = ($9 + [272])
}

void .FUNC $106 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$22 = (*([0] + [4]) - [320])
	*([0] + [4]) = $22
	$11 = *(($0 + [152]))
	$14 = *(($0 + [156]))
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$1 }
	$16 = ($14 + [-24])
	$8 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$14 = $16
	$15 = ($16 + [-24])
	$16 = $15
	if ( ((int_32)($15 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [128])
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$4 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)$2), [608])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$16 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-5002514023590133760, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $58($2, $16)
	CALL eosio_assert(((int_32)*($3 + [52]) == (int_32)$2), [608])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)*($3 + [8])), [1952])
	$21 = *(($3 + [32]))
	$7 = ((int_64)((int_64)$19 >> (int_64)63) << (int_64)1) | (int_64)(uint_64)$19 >> (uint_64)(int_64)63
	$19 = *($3 + [24])
	$9 = ((int_64)$19 << (int_64)1)
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$7)) < (int_64)0) : (int_64)($7 == 0) ), [1968])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [2000])
	*($22 + [312]) = $21
	CALL eosio_assert([1], [2032])
	CALL eosio_assert([1], [2048])
	*((($22 + [8]) + [8])) = *($22 + [312])
	$7 = ((int_64)$9 / (int_64)100)
	*($22 + [304]) = $7
	*($22 + [8]) = $7
	CALL $107($0, ($22 + [8]))
	$21 = *($3 + [8])
	*((($22 + [280]) + [8])) = [0]
	*($22 + [280]) = (int_64)0
	$17 = ((int_64)((int_64)$19 * (int_64)98) / (int_64)100)
	$16 = CALL strlen([2080])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$11 }
	*($22 + [280]) = ($16 << [1])
	$15 = (($22 + [280]) | [1])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$14 = (($16 + [16]) & [-16])
	$15 = CALL $141($14)
	*($22 + [280]) = ($14 | [1])
	*($22 + [288]) = $15
	*($22 + [284]) = $16
	
.LABEL $label$10
	CALL memcpy($15, [2080], $16)
	
.LABEL $label$9
	*(($15 + $16)) = [0]
	*($22 + [272]) = [0]
	*($22 + [264]) = (int_64)0
	*((($22 + [224]) + [32])) = [0]
	*($22 + [240]) = (int_64)-1
	*($22 + [248]) = (int_64)0
	$19 = *($0)
	*($22 + [224]) = $19
	*($22 + [232]) = $1
	$8 = [0]
	$16 = CALL db_lowerbound_i64($19, $1, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $59(($22 + [224]), $16)
	
.LABEL $label$12
	$4 = ((int_32)$3 != (int_32)[0])
	$6 = (($22 + [24]) | [1])
	$5 = (($22 + [192]) | [1])
	$18 = (int_64)10000000000
	$10 = (($22 + [144]) + [16])
	$11 = (($22 + [144]) + [24])
	$12 = ($22 + [172])
	$13 = (($22 + [144]) + [32])
	if ( ((int_64)$21 != (int_64)1) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $143(($22 + [280]))
	
.LABEL $label$7
	$23 = [124]
	goto $label$5 
	
.LABEL $label$6
	$23 = [31]
	
.LABEL $label$5
	
.LOOP $label$13:
	goto $label$253 
	
.LABEL $label$253
	$19 = ((uint_64)((int_64)((uint_64)((int_64)$17 << (int_64)1) / (uint_64)$21) * (int_64)CALL $108($0, *($8), $1)) / (uint_64)(int_64)100)
	$9 = ( $19 ? (int_64)1 : (CASTING uint_32)(uint_64 $19) )
	goto $label$109 
	
.LABEL $label$252
	$9 = $17
	$23 = [1]
	goto $label$13 
	
.LABEL $label$251
	*((($22 + [144]) + [8])) = *($8)
	*($10) = (int_64)-1
	*($11) = [0]
	$7 = *($0)
	*($22 + [144]) = $7
	*($12) = [0]
	*($13) = [0]
	*(($14 = (($22 + [192]) + [8]))) = (int_64)1397703940
	*($22 + [192]) = (int_64)0
	CALL eosio_assert([1], [96])
	$19 = (uint_64)*($14) >> (uint_64)(int_64)8)
	$16 = [0]
	$23 = [2]
	goto $label$13 
	
.LABEL $label$250
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$23 = [139]
	goto $label$13 
	
.LABEL $label$249
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$23 = [141]
	goto $label$13 
	
.LABEL $label$248
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$105 }
	$23 = [142]
	goto $label$13 
	
.LABEL $label$247
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$15 }
	$23 = [140]
	goto $label$13 
	
.LABEL $label$246
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$245
	$15 = [0]
	$23 = [4]
	goto $label$13 
	
.LABEL $label$244
	CALL eosio_assert($15, [160])
	*(($16 = (($22 + [192]) + [24]))) = (int_64)1397703940
	*((($22 + [192]) + [16])) = (int_64)0
	CALL eosio_assert([1], [96])
	$19 = (uint_64)*($16) >> (uint_64)(int_64)8)
	$16 = [0]
	$23 = [5]
	goto $label$13 
	
.LABEL $label$243
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$100 }
	$23 = [135]
	goto $label$13 
	
.LABEL $label$242
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$23 = [137]
	goto $label$13 
	
.LABEL $label$241
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$101 }
	$23 = [138]
	goto $label$13 
	
.LABEL $label$240
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$17 }
	$23 = [136]
	goto $label$13 
	
.LABEL $label$239
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$238
	$15 = [0]
	$23 = [7]
	goto $label$13 
	
.LABEL $label$237
	CALL eosio_assert($15, [160])
	CALL $32(($22 + [56]), ($22 + [144]), $7, ($22 + [192]))
	$9 = (int_64)((int_64)$9 << (int_64)32) >> (int_64)32
	CALL eosio_assert((uint_64)(((int_64)$9) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$19 = (int_64)5459781
	$16 = [0]
	$23 = [8]
	goto $label$13 
	
.LABEL $label$236
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$23 = [131]
	goto $label$13 
	
.LABEL $label$235
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$23 = [133]
	goto $label$13 
	
.LABEL $label$234
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$97 }
	$23 = [134]
	goto $label$13 
	
.LABEL $label$233
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$19 }
	$23 = [132]
	goto $label$13 
	
.LABEL $label$232
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$231
	$15 = [0]
	$23 = [10]
	goto $label$13 
	
.LABEL $label$230
	CALL eosio_assert($15, [160])
	CALL eosio_assert(((int_64)*((($22 + [56]) + [24])) == (int_64)1397703940), [496])
	$19 = ((int_64)*($16) + (int_64)$9)
	*(($16 = (($22 + [56]) + [16]))) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($16) < (int_64)4611686018427387904), [576])
	if ( ((uint_64)$9 > (uint_64)$18) ){ goto $label$95 }
	$23 = [11]
	goto $label$13 
	
.LABEL $label$229
	*($22 + [296]) = *($8)
	$18 = $9
	$23 = [12]
	goto $label$13 
	
.LABEL $label$228
	if ( *($8 + [8]) ){ goto $label$94 }
	$23 = [127]
	goto $label$13 
	
.LABEL $label$227
	$15 = ($3 + [32])
	$16 = (($22 + [56]) + [8])
	CALL eosio_assert(((int_64)*($16) == (int_64)*($15)), [384])
	$20 = ($3 + [24])
	CALL eosio_assert(((int_64)*($22 + [56]) >= (int_64)*($20)), [1216])
	CALL eosio_assert(((int_64)*($15) == (int_64)*($16)), [272])
	$19 = (int_64)
	*($22 + [56]) = $19(*($22 + [56]) - *($20)))
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($22 + [56]) < (int_64)4611686018427387904), [352])
	$16 = *($22 + [268])
	if ( ((int_32)$16 == (int_32)*((($22 + [264]) + [8]))) ){ goto $label$21 }
	$23 = [128]
	goto $label$13 
	
.LABEL $label$226
	*($16) = *($8)
	*($22 + [268]) = ($16 + [8])
	goto $label$20 
	
.LABEL $label$225
	CALL $109(($22 + [264]), $8)
	$23 = [129]
	goto $label$13 
	
.LABEL $label$224
	CALL eosio_assert($4, [672])
	CALL $110($2, $3, (int_64)0, ($22 + [192]))
	$23 = [13]
	goto $label$13 
	
.LABEL $label$223
	CALL $33(($22 + [144]), ($22 + [56]), *($0))
	*($22 + [24]) = *($8)
	CALL $111(($22 + [192]), ($22 + [24]))
	$16 = *($22 + [192])
	$15 = ($16 & [1])
	CALL $148(($22 + [280]), ( *($14) ? $5 : $15 ), ( *($22 + [196]) ? uint_32($16 >> [1]) : $15 ))
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$93 }
	$23 = [14]
	goto $label$13 
	
.LABEL $label$222
	CALL $142(*($14))
	$23 = [15]
	goto $label$13 
	
.LABEL $label$221
	CALL $149(($22 + [280]), [2096])
	*(($15 = (($22 + [24]) + [8]))) = [0]
	*($22 + [24]) = (int_64)0
	$19 = $9
	$23 = [16]
	goto $label$13 
	
.LABEL $label$220
	$16 = (CASTING uint_32)(uint_64 ((uint_64)$19 % (uint_64)(int_64)10))
	CALL $6(($22 + [192]), ( ($16 | [48]) ? ($16 + [55]) : ($16 <= [10]) ), ($22 + [24]))
	$7 = ((uint_64)$19 / (uint_64)(int_64)10)
	if ( (*($22 + [24]) & [1]) ){ goto $label$91 }
	$23 = [126]
	goto $label$13 
	
.LABEL $label$219
	*($22 + [24]) = [0]
	goto $label$90 
	
.LABEL $label$218
	*(*($15)) = [0]
	*($22 + [28]) = [0]
	$23 = [18]
	goto $label$13 
	
.LABEL $label$217
	CALL $146(($22 + [24]), [0])
	*($15) = *($14)
	*($22 + [24]) = *($22 + [192])
	$16 = ((uint_64)$19 > (uint_64)(int_64)9)
	$19 = $7
	if ( $16 ){ goto $label$92 }
	$23 = [19]
	goto $label$13 
	
.LABEL $label$216
	$16 = *($22 + [24])
	$14 = ($16 & [1])
	CALL $148(($22 + [280]), ( *($15) ? $6 : $14 ), ( *($22 + [28]) ? uint_32($16 >> [1]) : $14 ))
	if ( ((*($22 + [24]) & [1]) == 0) ){ goto $label$89 }
	$23 = [20]
	goto $label$13 
	
.LABEL $label$215
	CALL $142(*($15))
	$23 = [21]
	goto $label$13 
	
.LABEL $label$214
	CALL $149(($22 + [280]), [2112])
	$20 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1184])
	$16 = CALL db_next_i64(*($8 + [20]), ($22 + [192]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$88 }
	$23 = [22]
	goto $label$13 
	
.LABEL $label$213
	$20 = CALL $59(($22 + [224]), $16)
	$23 = [23]
	goto $label$13 
	
.LABEL $label$212
	$14 = *($11)
	if ( ($14 == 0) ){ goto $label$87 }
	$23 = [24]
	goto $label$13 
	
.LABEL $label$211
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$85 }
	$23 = [25]
	goto $label$13 
	
.LABEL $label$210
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$84 }
	$23 = [26]
	goto $label$13 
	
.LABEL $label$209
	CALL $142($15)
	$23 = [27]
	goto $label$13 
	
.LABEL $label$208
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$86 }
	$23 = [28]
	goto $label$13 
	
.LABEL $label$207
	$16 = *($11)
	goto $label$83 
	
.LABEL $label$206
	$16 = $14
	$23 = [29]
	goto $label$13 
	
.LABEL $label$205
	*($12) = $14
	CALL $142($16)
	$23 = [30]
	goto $label$13 
	
.LABEL $label$204
	$17 = (int_64))($17 - $9)
	$8 = $20
	$21 = ((int_64)$21 + (int_64)-1)
	if ( ((int_64)$21 == (int_64)1) ){ goto $label$110 }
	$23 = [31]
	goto $label$13 
	
.LABEL $label$203
	if ( ((int_64)($21 == 0) == 0) ){ goto $label$108 }
	$23 = [32]
	goto $label$13 
	
.LABEL $label$202
	$16 = *($22 + [280])
	$15 = ($16 & [1])
	CALL prints_l(( *($22 + [288]) ? (($22 + [280]) | [1]) : $15 ), ( *($22 + [284]) ? uint_32($16 >> [1]) : $15 ))
	*(($16 = (($22 + [144]) + [24]))) = (int_64)1397703940
	*($22 + [144]) = $1
	*($22 + [152]) = *($22 + [296])
	*($22 + [160]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$19 = (uint_64)*($16) >> (uint_64)(int_64)8)
	$16 = [0]
	$23 = [33]
	goto $label$13 
	
.LABEL $label$201
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$23 = [120]
	goto $label$13 
	
.LABEL $label$200
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$23 = [122]
	goto $label$13 
	
.LABEL $label$199
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$80 }
	$23 = [123]
	goto $label$13 
	
.LABEL $label$198
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$23 }
	$23 = [121]
	goto $label$13 
	
.LABEL $label$197
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$196
	$15 = [0]
	$23 = [35]
	goto $label$13 
	
.LABEL $label$195
	CALL eosio_assert($15, [160])
	$14 = ($22 + [176])
	CALL $155($14, ($22 + [280]))
	*($22 + [188]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$17 = *($0)
	$19 = (int_64)0
	$9 = (int_64)59
	$16 = [1040]
	$21 = (int_64)0
	$23 = [36]
	goto $label$13 
	
.LABEL $label$194
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$77 }
	$23 = [116]
	goto $label$13 
	
.LABEL $label$193
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$23 = [119]
	goto $label$13 
	
.LABEL $label$192
	$15 = ($15 + [165])
	goto $label$24 
	
.LABEL $label$191
	$7 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$190
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$23 = [118]
	goto $label$13 
	
.LABEL $label$189
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$23 = [115]
	goto $label$13 
	
.LABEL $label$188
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	$23 = [38]
	goto $label$13 
	
.LABEL $label$187
	$16 = ($16 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$21 = ((int_64)$7 | (int_64)$21)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$78 }
	$23 = [39]
	goto $label$13 
	
.LABEL $label$186
	*($22 + [64]) = $21
	*($22 + [56]) = $17
	$19 = (int_64)0
	$7 = (int_64)59
	$16 = [2128]
	$21 = (int_64)0
	$23 = [40]
	goto $label$13 
	
.LABEL $label$185
	$9 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$73 }
	$23 = [111]
	goto $label$13 
	
.LABEL $label$184
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$23 = [114]
	goto $label$13 
	
.LABEL $label$183
	$15 = ($15 + [165])
	goto $label$26 
	
.LABEL $label$182
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$23 = [113]
	goto $label$13 
	
.LABEL $label$181
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($15 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	$23 = [41]
	goto $label$13 
	
.LABEL $label$180
	$16 = ($16 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$21 = ((int_64)$9 | (int_64)$21)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$74 }
	$23 = [42]
	goto $label$13 
	
.LABEL $label$179
	*($22 + [192]) = $21
	$19 = (int_64)0
	$9 = (int_64)59
	$16 = [2144]
	$21 = (int_64)0
	$23 = [43]
	goto $label$13 
	
.LABEL $label$178
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$71 }
	$23 = [107]
	goto $label$13 
	
.LABEL $label$177
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$23 = [110]
	goto $label$13 
	
.LABEL $label$176
	$15 = ($15 + [165])
	goto $label$28 
	
.LABEL $label$175
	$7 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$174
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	$23 = [109]
	goto $label$13 
	
.LABEL $label$173
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	$23 = [106]
	goto $label$13 
	
.LABEL $label$172
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	$23 = [45]
	goto $label$13 
	
.LABEL $label$171
	$16 = ($16 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$21 = ((int_64)$7 | (int_64)$21)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$72 }
	$23 = [46]
	goto $label$13 
	
.LABEL $label$170
	*($22 + [24]) = $21
	CALL $112($0, ($22 + [56]), ($22 + [192]), ($22 + [24]), ($22 + [144]))
	*((($22 + [96]) + [24])) = *((($22 + [144]) + [24]))
	*((($22 + [96]) + [16])) = *((($22 + [144]) + [16]))
	*((($22 + [96]) + [8])) = *((($22 + [144]) + [8]))
	*($22 + [96]) = *($22 + [144])
	CALL $155((($22 + [96]) + [32]), $14)
	*($22 + [140]) = *(($22 + [188]))
	CALL $113($0, ($22 + [96]))
	if ( ((*($22 + [128]) & [1]) == 0) ){ goto $label$68 }
	$23 = [47]
	goto $label$13 
	
.LABEL $label$169
	CALL $142(*(($22 + [136])))
	$23 = [48]
	goto $label$13 
	
.LABEL $label$168
	*($22 + [72]) = (int_64)-1
	*($22 + [80]) = [0]
	$19 = *($22 + [296])
	$7 = *($0)
	*($22 + [56]) = $7
	*($22 + [64]) = $19
	*(($22 + [84])) = [0]
	*((($22 + [56]) + [32])) = [0]
	*($22 + [32]) = (int_64)1397703940
	*($22 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$19 = (uint_64)*($22 + [32]) >> (uint_64)(int_64)8)
	$16 = [0]
	$23 = [49]
	goto $label$13 
	
.LABEL $label$167
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$23 = [102]
	goto $label$13 
	
.LABEL $label$166
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$23 = [104]
	goto $label$13 
	
.LABEL $label$165
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$65 }
	$23 = [105]
	goto $label$13 
	
.LABEL $label$164
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$31 }
	$23 = [103]
	goto $label$13 
	
.LABEL $label$163
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$162
	$15 = [0]
	$23 = [51]
	goto $label$13 
	
.LABEL $label$161
	CALL eosio_assert($15, [160])
	*(($16 = (($22 + [24]) + [24]))) = (int_64)1397703940
	*($22 + [40]) = (int_64)0
	CALL eosio_assert([1], [96])
	$19 = (uint_64)*($16) >> (uint_64)(int_64)8)
	$16 = [0]
	$23 = [52]
	goto $label$13 
	
.LABEL $label$160
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$23 = [98]
	goto $label$13 
	
.LABEL $label$159
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$23 = [100]
	goto $label$13 
	
.LABEL $label$158
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$61 }
	$23 = [101]
	goto $label$13 
	
.LABEL $label$157
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$33 }
	$23 = [99]
	goto $label$13 
	
.LABEL $label$156
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$155
	$15 = [0]
	$23 = [54]
	goto $label$13 
	
.LABEL $label$154
	CALL eosio_assert($15, [160])
	CALL $32(($22 + [192]), ($22 + [56]), $7, ($22 + [24]))
	$15 = ($3 + [32])
	$14 = (($22 + [192]) + [24])
	CALL eosio_assert(((int_64)*($14) == (int_64)*($15)), [384])
	$16 = ($3 + [24])
	if ( ((int_64)*($22 + [208]) >= (int_64)*($3 + [24])) ){ goto $label$59 }
	$23 = [94]
	goto $label$13 
	
.LABEL $label$153
	CALL eosio_assert(((int_64)*($22 + [200]) == (int_64)*($15)), [384])
	CALL eosio_assert(((int_64)*($22 + [192]) >= (int_64)*($16)), [1216])
	CALL eosio_assert(((int_64)*($15) == (int_64)*($22 + [200])), [272])
	$19 = (int_64)
	*($22 + [192]) = $19(*($22 + [192]) - *($16)))
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($22 + [192]) < (int_64)4611686018427387904), [352])
	$15 = *($22 + [268])
	if ( ((int_32)$15 == (int_32)*((($22 + [264]) + [8]))) ){ goto $label$35 }
	$23 = [95]
	goto $label$13 
	
.LABEL $label$152
	*($15) = *($22 + [296])
	*($22 + [268]) = ($15 + [8])
	goto $label$34 
	
.LABEL $label$151
	CALL eosio_assert(((int_64)*($15) == (int_64)*($14)), [272])
	$19 = (int_64)
	*(($15 = ($22 + [208]))) = $19(*($15) - *($16)))
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($15) < (int_64)4611686018427387904), [352])
	goto $label$58 
	
.LABEL $label$150
	CALL $109(($22 + [264]), ($22 + [296]))
	$23 = [96]
	goto $label$13 
	
.LABEL $label$149
	CALL eosio_assert($4, [672])
	CALL $114($2, $3, (int_64)0, ($22 + [24]))
	$23 = [56]
	goto $label$13 
	
.LABEL $label$148
	CALL $33(($22 + [56]), ($22 + [192]), *($0))
	CALL $115($0, ($22 + [296]), $16)
	$12 = *($22 + [268])
	$0 = *($22 + [264])
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$57 }
	$23 = [57]
	goto $label$13 
	
.LABEL $label$147
	$20 = ($22 + [248])
	$10 = ($22 + [252])
	$13 = (($22 + [224]) + [8])
	$23 = [58]
	goto $label$13 
	
.LABEL $label$146
	$19 = *($0)
	$11 = *($20)
	$14 = *($10)
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$55 }
	$23 = [59]
	goto $label$13 
	
.LABEL $label$145
	$16 = ($14 + [-24])
	$8 = ([0] - $11)
	$23 = [60]
	goto $label$13 
	
.LABEL $label$144
	if ( ((int_64)*(*($16)) == (int_64)$19) ){ goto $label$53 }
	$23 = [61]
	goto $label$13 
	
.LABEL $label$143
	$14 = $16
	$15 = ($16 + [-24])
	$16 = $15
	if ( ((int_32)($15 + $8) != (int_32)[-24]) ){ goto $label$54 }
	$23 = [62]
	goto $label$13 
	
.LABEL $label$142
	if ( ((int_32)$14 == (int_32)$11) ){ goto $label$52 }
	$23 = [63]
	goto $label$13 
	
.LABEL $label$141
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)($22 + [224])), [608])
	goto $label$51 
	
.LABEL $label$140
	$16 = [0]
	$15 = CALL db_find_i64(*($22 + [224]), *($13), (int_64)7035937633859534848, $19)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$50 }
	$23 = [93]
	goto $label$13 
	
.LABEL $label$139
	$16 = CALL $59(($22 + [224]), $15)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)($22 + [224])), [608])
	$23 = [64]
	goto $label$13 
	
.LABEL $label$138
	$15 = ((int_32)$16 != (int_32)[0])
	CALL eosio_assert($15, [1136])
	CALL eosio_assert($15, [1184])
	$15 = CALL db_next_i64(*($16 + [20]), ($22 + [24]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$49 }
	$23 = [65]
	goto $label$13 
	
.LABEL $label$137
	CALL $59(($22 + [224]), $15)
	$23 = [66]
	goto $label$13 
	
.LABEL $label$136
	CALL $60(($22 + [224]), $16)
	$0 = ($0 + [8])
	if ( ((int_32)$0 != (int_32)$12) ){ goto $label$56 }
	$23 = [67]
	goto $label$13 
	
.LABEL $label$135
	$14 = *($22 + [80])
	if ( ($14 == 0) ){ goto $label$48 }
	$23 = [68]
	goto $label$13 
	
.LABEL $label$134
	$8 = ($22 + [84])
	$16 = *($8)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$47 }
	$23 = [69]
	goto $label$13 
	
.LABEL $label$133
	$23 = [70]
	goto $label$13 
	
.LABEL $label$132
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$45 }
	$23 = [71]
	goto $label$13 
	
.LABEL $label$131
	CALL $142($15)
	$23 = [72]
	goto $label$13 
	
.LABEL $label$130
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$46 }
	$23 = [73]
	goto $label$13 
	
.LABEL $label$129
	$16 = *(($22 + [80]))
	goto $label$44 
	
.LABEL $label$128
	$16 = $14
	$23 = [74]
	goto $label$13 
	
.LABEL $label$127
	*($8) = $14
	CALL $142($16)
	$23 = [75]
	goto $label$13 
	
.LABEL $label$126
	if ( ((*(($22 + [176])) & [1]) == 0) ){ goto $label$43 }
	$23 = [76]
	goto $label$13 
	
.LABEL $label$125
	CALL $142(*(($22 + [184])))
	$23 = [77]
	goto $label$13 
	
.LABEL $label$124
	$14 = *($22 + [248])
	if ( ($14 == 0) ){ goto $label$42 }
	$23 = [78]
	goto $label$13 
	
.LABEL $label$123
	$8 = ($22 + [252])
	$16 = *($8)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$41 }
	$23 = [79]
	goto $label$13 
	
.LABEL $label$122
	$23 = [80]
	goto $label$13 
	
.LABEL $label$121
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$39 }
	$23 = [81]
	goto $label$13 
	
.LABEL $label$120
	CALL $142($15)
	$23 = [82]
	goto $label$13 
	
.LABEL $label$119
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$40 }
	$23 = [83]
	goto $label$13 
	
.LABEL $label$118
	$16 = *(($22 + [248]))
	goto $label$38 
	
.LABEL $label$117
	$16 = $14
	$23 = [84]
	goto $label$13 
	
.LABEL $label$116
	*($8) = $14
	CALL $142($16)
	$23 = [85]
	goto $label$13 
	
.LABEL $label$115
	$16 = *($22 + [264])
	if ( ($16 == 0) ){ goto $label$37 }
	$23 = [86]
	goto $label$13 
	
.LABEL $label$114
	*($22 + [268]) = $16
	CALL $142($16)
	$23 = [87]
	goto $label$13 
	
.LABEL $label$113
	if ( ((*($22 + [280]) & [1]) == 0) ){ goto $label$36 }
	$23 = [88]
	goto $label$13 
	
.LABEL $label$112
	CALL $142(*(($22 + [288])))
	$23 = [89]
	goto $label$13 
	
.LABEL $label$111
	*([0] + [4]) = ($22 + [320])
	return 
	
.LABEL $label$110
	$23 = [124]
	goto $label$13 
	
.LABEL $label$109
	$23 = [1]
	goto $label$13 
	
.LABEL $label$108
	$23 = [0]
	goto $label$13 
	
.LABEL $label$107
	$23 = [2]
	goto $label$13 
	
.LABEL $label$106
	$23 = [4]
	goto $label$13 
	
.LABEL $label$105
	$23 = [3]
	goto $label$13 
	
.LABEL $label$104
	$23 = [3]
	goto $label$13 
	
.LABEL $label$103
	$23 = [5]
	goto $label$13 
	
.LABEL $label$102
	$23 = [7]
	goto $label$13 
	
.LABEL $label$101
	$23 = [6]
	goto $label$13 
	
.LABEL $label$100
	$23 = [6]
	goto $label$13 
	
.LABEL $label$99
	$23 = [8]
	goto $label$13 
	
.LABEL $label$98
	$23 = [10]
	goto $label$13 
	
.LABEL $label$97
	$23 = [9]
	goto $label$13 
	
.LABEL $label$96
	$23 = [9]
	goto $label$13 
	
.LABEL $label$95
	$23 = [12]
	goto $label$13 
	
.LABEL $label$94
	$23 = [13]
	goto $label$13 
	
.LABEL $label$93
	$23 = [15]
	goto $label$13 
	
.LABEL $label$92
	$23 = [16]
	goto $label$13 
	
.LABEL $label$91
	$23 = [17]
	goto $label$13 
	
.LABEL $label$90
	$23 = [18]
	goto $label$13 
	
.LABEL $label$89
	$23 = [21]
	goto $label$13 
	
.LABEL $label$88
	$23 = [23]
	goto $label$13 
	
.LABEL $label$87
	$23 = [30]
	goto $label$13 
	
.LABEL $label$86
	$23 = [25]
	goto $label$13 
	
.LABEL $label$85
	$23 = [125]
	goto $label$13 
	
.LABEL $label$84
	$23 = [27]
	goto $label$13 
	
.LABEL $label$83
	$23 = [29]
	goto $label$13 
	
.LABEL $label$82
	$23 = [33]
	goto $label$13 
	
.LABEL $label$81
	$23 = [35]
	goto $label$13 
	
.LABEL $label$80
	$23 = [34]
	goto $label$13 
	
.LABEL $label$79
	$23 = [34]
	goto $label$13 
	
.LABEL $label$78
	$23 = [36]
	goto $label$13 
	
.LABEL $label$77
	$23 = [37]
	goto $label$13 
	
.LABEL $label$76
	$23 = [115]
	goto $label$13 
	
.LABEL $label$75
	$23 = [38]
	goto $label$13 
	
.LABEL $label$74
	$23 = [40]
	goto $label$13 
	
.LABEL $label$73
	$23 = [41]
	goto $label$13 
	
.LABEL $label$72
	$23 = [43]
	goto $label$13 
	
.LABEL $label$71
	$23 = [44]
	goto $label$13 
	
.LABEL $label$70
	$23 = [106]
	goto $label$13 
	
.LABEL $label$69
	$23 = [45]
	goto $label$13 
	
.LABEL $label$68
	$23 = [48]
	goto $label$13 
	
.LABEL $label$67
	$23 = [49]
	goto $label$13 
	
.LABEL $label$66
	$23 = [51]
	goto $label$13 
	
.LABEL $label$65
	$23 = [50]
	goto $label$13 
	
.LABEL $label$64
	$23 = [50]
	goto $label$13 
	
.LABEL $label$63
	$23 = [52]
	goto $label$13 
	
.LABEL $label$62
	$23 = [54]
	goto $label$13 
	
.LABEL $label$61
	$23 = [53]
	goto $label$13 
	
.LABEL $label$60
	$23 = [53]
	goto $label$13 
	
.LABEL $label$59
	$23 = [55]
	goto $label$13 
	
.LABEL $label$58
	$23 = [56]
	goto $label$13 
	
.LABEL $label$57
	$23 = [67]
	goto $label$13 
	
.LABEL $label$56
	$23 = [58]
	goto $label$13 
	
.LABEL $label$55
	$23 = [62]
	goto $label$13 
	
.LABEL $label$54
	$23 = [60]
	goto $label$13 
	
.LABEL $label$53
	$23 = [62]
	goto $label$13 
	
.LABEL $label$52
	$23 = [92]
	goto $label$13 
	
.LABEL $label$51
	$23 = [64]
	goto $label$13 
	
.LABEL $label$50
	$23 = [64]
	goto $label$13 
	
.LABEL $label$49
	$23 = [66]
	goto $label$13 
	
.LABEL $label$48
	$23 = [75]
	goto $label$13 
	
.LABEL $label$47
	$23 = [91]
	goto $label$13 
	
.LABEL $label$46
	$23 = [70]
	goto $label$13 
	
.LABEL $label$45
	$23 = [72]
	goto $label$13 
	
.LABEL $label$44
	$23 = [74]
	goto $label$13 
	
.LABEL $label$43
	$23 = [77]
	goto $label$13 
	
.LABEL $label$42
	$23 = [85]
	goto $label$13 
	
.LABEL $label$41
	$23 = [90]
	goto $label$13 
	
.LABEL $label$40
	$23 = [80]
	goto $label$13 
	
.LABEL $label$39
	$23 = [82]
	goto $label$13 
	
.LABEL $label$38
	$23 = [84]
	goto $label$13 
	
.LABEL $label$37
	$23 = [87]
	goto $label$13 
	
.LABEL $label$36
	$23 = [89]
	goto $label$13 
	
.LABEL $label$35
	$23 = [97]
	goto $label$13 
	
.LABEL $label$34
	$23 = [96]
	goto $label$13 
	
.LABEL $label$33
	$23 = [100]
	goto $label$13 
	
.LABEL $label$32
	$23 = [99]
	goto $label$13 
	
.LABEL $label$31
	$23 = [104]
	goto $label$13 
	
.LABEL $label$30
	$23 = [103]
	goto $label$13 
	
.LABEL $label$29
	$23 = [108]
	goto $label$13 
	
.LABEL $label$28
	$23 = [109]
	goto $label$13 
	
.LABEL $label$27
	$23 = [112]
	goto $label$13 
	
.LABEL $label$26
	$23 = [113]
	goto $label$13 
	
.LABEL $label$25
	$23 = [117]
	goto $label$13 
	
.LABEL $label$24
	$23 = [118]
	goto $label$13 
	
.LABEL $label$23
	$23 = [122]
	goto $label$13 
	
.LABEL $label$22
	$23 = [121]
	goto $label$13 
	
.LABEL $label$21
	$23 = [130]
	goto $label$13 
	
.LABEL $label$20
	$23 = [129]
	goto $label$13 
	
.LABEL $label$19
	$23 = [133]
	goto $label$13 
	
.LABEL $label$18
	$23 = [132]
	goto $label$13 
	
.LABEL $label$17
	$23 = [137]
	goto $label$13 
	
.LABEL $label$16
	$23 = [136]
	goto $label$13 
	
.LABEL $label$15
	$23 = [141]
	goto $label$13 
	
.LABEL $label$14
	$23 = [140]
	goto $label$13 
	(unreachable)
	$23
}

void .FUNC _ZN12redredredred8withdrawEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [160])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$7 = [0]
	*(($8 + [152])) = [0]
	*($8 + [128]) = $1
	*($8 + [136]) = (int_64)-1
	*($8 + [144]) = (int_64)0
	$2 = *($0)
	*($8 + [120]) = $2
	*($8 + [64]) = (int_64)1397703940
	*($8 + [56]) = (int_64)0
	CALL eosio_assert([1], [96])
	$6 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [160])
	*((($8 + [56]) + [24])) = (int_64)1397703940
	*($8 + [72]) = (int_64)0
	CALL eosio_assert([1], [96])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [160])
	CALL $32(($8 + [88]), ($8 + [120]), $2, ($8 + [56]))
	$6 = *($8 + [104])
	$7 = ($8 + [112])
	$2 = *($7)
	CALL eosio_assert(((int_64)*($8 + [96]) == (int_64)$2), [272])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($8 + [88]))) > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [352])
	CALL eosio_assert(((int_64)$2 == (int_64)*($7)), [272])
	$4 = (int_64)
	*($8 + [104]) = $4(*($8 + [104]) - $6))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($8 + [104]) < (int_64)4611686018427387904), [352])
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$12 }
	*($8 + [48]) = $2
	*(($8 + [32])) = [0]
	*($8 + [40]) = $6
	*($8 + [24]) = (int_64)0
	$7 = CALL strlen([1776])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*($8 + [24]) = ($7 << [1])
	$3 = (($8 + [24]) | [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($7 + [16]) & [-16])
	$3 = CALL $141($5)
	*($8 + [24]) = ($5 | [1])
	*($8 + [32]) = $3
	*($8 + [28]) = $7
	
.LABEL $label$14
	CALL memcpy($3, [1776], $7)
	
.LABEL $label$13
	*(($3 + $7)) = [0]
	*((($8 + [8]) + [8])) = *((($8 + [40]) + [8]))
	*($8 + [8]) = *($8 + [40])
	CALL $44($0, $1, ($8 + [8]), ($8 + [24]))
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $142(*($8 + [32]))
	
.LABEL $label$12
	CALL $33(($8 + [120]), ($8 + [88]), *($0))
	$0 = *($8 + [144])
	if ( ($0 == 0) ){ goto $label$16 }
	$5 = ($8 + [148])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	CALL $142($3)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($8 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $0
	
.LABEL $label$17
	*($5) = $0
	CALL $142($7)
	
.LABEL $label$16
	*([0] + [4]) = ($8 + [160])
	return (unreachable)
	
.LABEL $label$11
	CALL $143(($8 + [24]))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [192])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [160])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $70(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $71(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $142(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12redredredred10createroomEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [16]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((uint_64)$2 > (uint_64)(int_64)2), [1552])
	CALL eosio_assert((uint_64)($2 <= (int_64)11), [1568])
	CALL eosio_assert(((int_64)*($3) > (int_64)9999), [1584])
	*($7) = $0
	*($7 + [8]) = $3
	*($7 + [12]) = $4
	*($7 + [4]) = ($7 + [16])
	*($7 + [56]) = $1
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$3()), [720])
	$5 = ($0 + [128])
	*($7 + [32]) = $5
	*($7 + [36]) = $7
	*($7 + [40]) = ($7 + [56])
	*(($4 = CALL $141([64])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [160])
	*($4 + [48]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [52]) = $5
	CALL $72(($7 + [32]), $4)
	*($7 + [48]) = $4
	$2 = *($4)
	*($7 + [32]) = $2
	$6 = *($4 + [56])
	*($7 + [28]) = $6
	$5 = ($0 + [156])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [160]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [48]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $65(($0 + [152]), ($7 + [48]), ($7 + [32]), ($7 + [28]))
	
.LABEL $label$6
	$3 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $142(*(($3 + [48])))
	
.LABEL $label$9
	CALL $142($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [32])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [192])
	CALL memcpy($9, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [192])
	$5 = ($9 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [192])
	CALL memcpy(($9 + [31]), ($6 + [16]), [1])
	$7 = ((int_32)*($9 + [31]) != (int_32)[0])
	*($9 + [16]) = $7
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	$7 = *(($9 + [16]))
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$8 = *((*($1) + $8))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 $8))
	*([0] + [4]) = ($9 + [32])
	return [1]
}

void .FUNC _ZN12redredredred4openEyyb (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$4 = *(($0 + [152]))
	$6 = *(($0 + [156]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$11 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$6 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [128])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$5), [608])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$11 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-5002514023590133760, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $58($5, $11)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$5), [608])
	
.LABEL $label$3
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [1424])
	*(($12 + [104])) = [0]
	*($12 + [80]) = $1
	*($12 + [88]) = (int_64)-1
	*($12 + [96]) = (int_64)0
	$8 = *($0)
	*($12 + [72]) = $8
	*($12 + [8]) = (int_64)1397703940
	*($12) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [160])
	*(($12 + [24])) = (int_64)1397703940
	*($12 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$10 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$6 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$6 = [0]
	
.LABEL $label$10
	CALL eosio_assert($6, [160])
	CALL $32(($12 + [40]), ($12 + [72]), $8, $12)
	$10 = *($12 + [56])
	$8 = *(($12 + [64]))
	CALL eosio_assert(((int_64)*($12 + [48]) == (int_64)$8), [272])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($10 - *($12 + [40]))) > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [352])
	$11 = ($7 + [32])
	CALL eosio_assert(((int_64)$8 == (int_64)*($11)), [384])
	CALL eosio_assert(((int_64)$10 >= (int_64)*($7 + [24])), [1456])
	CALL eosio_assert(((int_64)*($11) == (int_64)*($12 + [48])), [496])
	$10 = ((int_64)*($12 + [40]) + (int_64)*($7 + [24]))
	*($12 + [40]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [544])
	CALL eosio_assert(((int_64)*($12 + [40]) < (int_64)4611686018427387904), [576])
	CALL $33(($12 + [72]), ($12 + [40]), *($0))
	*(($12 + [32])) = [0]
	*($12 + [24]) = (int_64)0
	*($12 + [16]) = (int_64)-1
	$10 = *($0)
	*($12) = $10
	$8 = *($7 + [16])
	$9 = *($7 + [8])
	*($12 + [8]) = $2
	CALL eosio_assert(((uint_64)((int_64)$8 + (int_64)1) <= (uint_64)$9), [1488])
	CALL eosio_assert($4, [672])
	CALL $69($5, $7)
	$11 = [1]
	$7 = CALL db_find_i64($10, $2, (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*(CALL $59($12, $7) + [16]) == (int_32)$12), [608])
	$11 = [0]
	
.LABEL $label$15
	CALL eosio_assert($11, [1520])
	$2 = *($0)
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL $fimport$3()), [720])
	*(($11 = CALL $141([32])) + [16]) = $12
	*($11 + [8]) = $3
	*($11) = $1
	CALL eosio_assert([1], [784])
	CALL memcpy(($12 + [128]), $11, [8])
	*($12 + [120]) = *($11 + [8])
	CALL eosio_assert([1], [784])
	CALL memcpy((($12 + [128]) | [8]), ($12 + [120]), [1])
	$10 = *($11)
	$6 = CALL db_store_i64(*(($12 + [8])), (int_64)7035937633859534848, $2, $10, ($12 + [128]), [9])
	*($11 + [20]) = $6
	$7 = ($12 + [16])
	if ( (uint_64)($10 <= *($7)) ){ goto $label$16 }
	*($7) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($12 + [120]) = $11
	$10 = *($11)
	*($12 + [128]) = $10
	*($12 + [116]) = $6
	$5 = ($12 + [28])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($12 + [32]))) ){ goto $label$18 }
	*($7 + [8]) = $10
	*($7 + [16]) = $6
	*($12 + [120]) = [0]
	*($7) = $11
	*($5) = ($7 + [24])
	goto $label$17 
	
.LABEL $label$18
	CALL $63(($12 + [24]), ($12 + [120]), ($12 + [128]), ($12 + [116]))
	
.LABEL $label$17
	$11 = *($12 + [120])
	*($12 + [120]) = [0]
	if ( ($11 == 0) ){ goto $label$19 }
	CALL $142($11)
	
.LABEL $label$19
	$6 = *($12 + [24])
	if ( ($6 == 0) ){ goto $label$20 }
	$5 = ($12 + [28])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL $142($7)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$23 }
	$11 = *(($12 + [24]))
	goto $label$21 
	
.LABEL $label$22
	$11 = $6
	
.LABEL $label$21
	*($5) = $6
	CALL $142($11)
	
.LABEL $label$20
	$6 = *($12 + [96])
	if ( ($6 == 0) ){ goto $label$25 }
	$5 = ($12 + [100])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$27 }
	
.LOOP $label$28:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$29 }
	CALL $142($7)
	
.LABEL $label$29
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$28 }
	$11 = *(($12 + [96]))
	goto $label$26 
	
.LABEL $label$27
	$11 = $6
	
.LABEL $label$26
	*($5) = $6
	CALL $142($11)
	
.LABEL $label$25
	*([0] + [4]) = ($12 + [144])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [192])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [192])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN12redredredred5closeEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	CALL require_auth($1)
	$3 = *(($0 + [152]))
	$5 = *(($0 + [156]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [128])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$4), [608])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)-5002514023590133760, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $58($4, $8)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$4), [608])
	
.LABEL $label$3
	$3 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($3, [1072])
	CALL eosio_assert(((int_64)*($6 + [16]) != (int_64)*($6 + [8])), [1104])
	*(($9 + [136])) = [0]
	*($9 + [120]) = (int_64)-1
	*($9 + [128]) = (int_64)0
	$7 = *($0)
	*($9 + [104]) = $7
	*($9 + [112]) = $2
	$8 = [0]
	$5 = CALL db_find_i64($7, $2, (int_64)7035937633859534848, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $59(($9 + [104]), $5)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($9 + [104])), [608])
	
.LABEL $label$5
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [1120])
	CALL eosio_assert($5, [1136])
	CALL eosio_assert($5, [1184])
	$5 = CALL db_next_i64(*($8 + [20]), ($9 + [64]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $59(($9 + [104]), $5)
	
.LABEL $label$6
	CALL $60(($9 + [104]), $8)
	*(($9 + [96])) = [0]
	*($9 + [72]) = $1
	*($9 + [80]) = (int_64)-1
	*($9 + [88]) = (int_64)0
	$1 = *($0)
	*($9 + [64]) = $1
	*($9 + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [160])
	*(($9 + [24])) = (int_64)1397703940
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$2 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$5 = [0]
	
.LABEL $label$12
	CALL eosio_assert($5, [160])
	CALL $32(($9 + [32]), ($9 + [64]), $1, $9)
	$8 = ($6 + [32])
	CALL eosio_assert(((int_64)*($9 + [40]) == (int_64)*($8)), [384])
	CALL eosio_assert(((int_64)*($9 + [32]) >= (int_64)*($6 + [24])), [1216])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($9 + [40])), [272])
	$2 = (int_64)
	*($9 + [32]) = $2(*($9 + [32]) - *($6 + [24])))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [320])
	CALL eosio_assert(((int_64)*($9 + [32]) < (int_64)4611686018427387904), [352])
	CALL $33(($9 + [64]), ($9 + [32]), *($0))
	CALL eosio_assert(((int_64)*(($6 + [16])) != (int_64)0), [1216])
	CALL eosio_assert($3, [672])
	CALL $61($4, $6)
	$5 = *($9 + [88])
	if ( ($5 == 0) ){ goto $label$17 }
	$4 = ($9 + [92])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$19 }
	
.LOOP $label$20:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	CALL $142($6)
	
.LABEL $label$21
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$20 }
	$8 = *(($9 + [88]))
	goto $label$18 
	
.LABEL $label$19
	$8 = $5
	
.LABEL $label$18
	*($4) = $5
	CALL $142($8)
	
.LABEL $label$17
	$5 = *($9 + [128])
	if ( ($5 == 0) ){ goto $label$22 }
	$4 = ($9 + [132])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$24 }
	
.LOOP $label$25:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$26 }
	CALL $142($6)
	
.LABEL $label$26
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$25 }
	$8 = *(($9 + [128]))
	goto $label$23 
	
.LABEL $label$24
	$8 = $5
	
.LABEL $label$23
	*($4) = $5
	CALL $142($8)
	
.LABEL $label$22
	*([0] + [4]) = ($9 + [144])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $141(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $142($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $67(*($1), *($0 + [12]))
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$2 = *($1)
	CALL eosio_assert([1], [912])
	$5 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [40])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [40])
	$3 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	*($8 + [16]) = $8
	*($8 + [32]) = $3
	*($8 + [40]) = $4
	*($8 + [24]) = $1
	*($8 + [28]) = ($1 + [8])
	*($8 + [36]) = ($1 + [24])
	CALL $62(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1408])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $52($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [192])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_64 .FUNC $108 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$3 = (CASTING int_64)(int_32 ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$26()))
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1056]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	*($10 + [40]) = ((int_64)((int_64)((int_64)((int_64)$1 + (int_64)$2) + (int_64)$3) + (int_64)$8) + (int_64)10086)
	CALL sha256(($10 + [40]), [4], $10)
	$7 = *($10 + [1 align=1])
	$9 = *($10 + [2 align=2])
	$6 = *($10 + [16])
	$8 = *($10 + [24])
	*([0] + [4]) = ($10 + [48])
	return ((uint_64)((int_64)$8 + (int_64)((int_64)$6 + (int_64)((int_64)$9 + (int_64)$7))) % (uint_64)(int_64)100)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $142(*(($1 + [48])))
	
.LABEL $label$11
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $142($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [52]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [16])
	*($6 + [20]) = ($0 + [24])
	*($6 + [24]) = ($0 + [40])
	CALL $66(($6 + [8]), $6)
	*($0 + [56]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $68($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $146($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $141($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $146($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $142($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $143($7)
	return (unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $67(*($1), *($0 + [16]))
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)-1)
	$2 = *($1)
	CALL eosio_assert([1], [912])
	$5 = *($1 + [40])
	$4 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [40])
	$6 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [40])
	$3 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	*($8 + [16]) = $8
	*($8 + [32]) = $3
	*($8 + [40]) = $4
	*($8 + [24]) = $1
	*($8 + [28]) = ($1 + [8])
	*($8 + [36]) = ($1 + [24])
	CALL $62(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1232])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1280])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1344])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $142($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $142($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $56(*($1), *($0 + [16]))
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	$4 = CALL $141([80])
	CALL $95($4)
	*($4 + [64]) = $1
	CALL memcpy($4, *($3), [57])
	*($7 + [72]) = ($7 + [53])
	*($7 + [68]) = $7
	*($7 + [64]) = $7
	*($7 + [80]) = ($7 + [64])
	*($7 + [92]) = ($4 + [8])
	*($7 + [88]) = $4
	*($7 + [96]) = ($4 + [16])
	*($7 + [100]) = ($4 + [24])
	*($7 + [104]) = ($4 + [40])
	*($7 + [108]) = ($4 + [56])
	CALL $102(($7 + [88]), ($7 + [80]))
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)3932090329724878848, $2, (int_64)3932090329724878848, $7, [53])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090329724878848) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3932090329724878849
	
.LABEL $label$1
	*($7 + [88]) = $4
	*($7) = (int_64)3932090329724878848
	$5 = *($4 + [68])
	*($7 + [64]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3932090329724878848
	*($3 + [16]) = $5
	*($7 + [88]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $103(($1 + [24]), ($7 + [88]), $7, ($7 + [64]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [88])
	*($7 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $142($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	CALL memcpy($1, *($3), [57])
	CALL eosio_assert([1], [912])
	*($4 + [72]) = ($4 + [53])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [40])
	*($4 + [108]) = ($1 + [56])
	CALL $102(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [53])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3932090329724878848) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3932090329724878849
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [112])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [784])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [192])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [192])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($0) = ((int_32)*($5 + [15]) != (int_32)[0])
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $142($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $142($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $142($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $142($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $142($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $142($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $142($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $142($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $89($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $52($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $90($4, $1)
	CALL $92(CALL $91(CALL $91($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_64 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = (*([0] + [4]) - [160])
	*([0] + [4]) = $1
	$1 = CALL memset($1, [0], [80])
	$5 = CALL $42($1)
	$2 = ($0 + [8])
	$4 = *(($0 + [36]))
	if ( ((int_32)$4 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$2), [608])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $43($2, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$2), [608])
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	CALL memcpy(($1 + [80]), $5, [80])
	*($1 + [80]) = ((int_64)*($1 + [80]) + (int_64)1)
	CALL $45($2, ($1 + [80]), *($0))
	$3 = *($1 + [80])
	*([0] + [4]) = ($1 + [160])
	return $3
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $141(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $141([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $52(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [784])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $142($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $142($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $142($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$5 = CALL current_time()
	*(($6 + [44])) = [0]
	*(($6 + [48])) = [0]
	*($6 + [28]) = [0]
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [52]) = [0]
	*(($6 + [56])) = [0]
	*(($6 + [60])) = [0]
	*($6 + [64]) = [0]
	*(($6 + [68])) = [0]
	*(($6 + [72])) = [0]
	CALL $85(($6 + [52]), $1, $2, $3, $4)
	*($6 + [36]) = [1]
	$5 = CALL $86($0)
	*($6 + [8]) = (int_64)0
	*($6) = $5
	$5 = *($0)
	CALL $87(($6 + [80]), ($6 + [16]))
	$0 = *($6 + [80])
	CALL send_deferred($6, $5, $0, (*($6 + [84]) - $0), [0])
	$0 = *($6 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($6 + [84]) = $0
	CALL $142($0)
	
.LABEL $label$1
	CALL $88(($6 + [16]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [192])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	return CALL $148($0, $1, CALL $159($1))
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $145($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $141($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $142($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $145($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $145($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $141(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $142($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10748])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10636])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10444]
	$1 = (((int_32)$2 * (int_32)[12]) + [10444])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $143 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $142 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	$11 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$8 = *($0 + [4])
	$3 = *($8)
	$6 = ($3 + [144])
	$9 = *($6)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$5 = ($3 + [128])
	$4 = CALL db_lowerbound_i64(*($5), *(($3 + [136])), (int_64)-5002514023590133760, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $58($5, $4)
	*($11 + [28]) = [0]
	*($11 + [24]) = $5
	$9 = *(*(CALL $73(($11 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [144])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1600])
	*($1) = *($6)
	*($1 + [8]) = *(*($8 + [4]))
	$3 = *($8 + [8])
	$9 = *(($3 + [8]))
	$7 = *($3)
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = $7
	*(($1 + [32])) = $9
	$3 = ($1 + [40])
	CALL $144($3, *($8 + [12]))
	$8 = *($1 + [40])
	$6 = ( *(($1 + [44])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [40])
	$9 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [16])
	$5 = ($1 + [24])
	$4 = ($1 + [8])
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($8 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $8)
	*($11 + [16]) = $11
	*($11 + [28]) = $4
	*($11 + [24]) = $1
	*($11 + [32]) = $6
	*($11 + [36]) = $5
	*($11 + [40]) = $3
	CALL $62(($11 + [24]), ($11 + [16]))
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)-5002514023590133760, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1728])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5002514023590133760)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1664])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1664])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $58(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $155(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $155(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $142(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $142(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $141([40])
	$6 = CALL $80($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $81(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $142($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1232])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1280])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1344])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $142($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $142($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [976])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $141([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = ($4 + [16])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [160])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($4 + [8])
	*($8 + [32]) = $4
	*($8 + [40]) = $3
	CALL $82(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $83($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $142($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $142($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [720])
	$4 = CALL $141([48])
	CALL $37($4)
	*($4 + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [28])) = *(($3 + [28]))
	*(($4 + [24])) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($5 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($4 + [8])) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	*($6 + [48]) = ($6 + [32])
	*($6 + [60]) = $5
	*($6 + [56]) = $4
	CALL $38(($6 + [56]), ($6 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)3794750970638893056, $2, (int_64)3794750970638893056, $6, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3794750970638893056) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3794750970638893057
	
.LABEL $label$1
	*($6 + [32]) = $4
	*($6) = (int_64)3794750970638893056
	$5 = *($4 + [36])
	*($6 + [56]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3794750970638893056
	*($3 + [16]) = $5
	*($6 + [32]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $39(($1 + [24]), ($6 + [32]), $6, ($6 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $142($4)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [160])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [160])
	return $0
}

void .FUNC $78 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$9 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [1040]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($10 + [48]) = $7
	*($10 + [40]) = $9
	$6 = (int_64)0
	$8 = (int_64)59
	$0 = [1840]
	$7 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [1856]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$16 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	*(($10 + [20])) = *(($2 + [12]))
	*(($10 + [16])) = *(($2 + [8]))
	*(($10 + [12])) = *(($2 + [4]))
	*($10) = $1
	*($10 + [8]) = *($2)
	CALL $155(($10 + [24]), $3)
	$0 = CALL $79(($10 + [56]), ($10 + [40]), $7, $9, $10)
	CALL $51(($10 + [96]), $0)
	$4 = *($10 + [96])
	CALL send_inline($4, (*($10 + [100]) - $4))
	$4 = *($10 + [96])
	if ( ($4 == 0) ){ goto $label$17 }
	*($10 + [100]) = $4
	CALL $142($4)
	
.LABEL $label$17
	$4 = *($0 + [28])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($0 + [32])) = $4
	CALL $142($4)
	
.LABEL $label$18
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($0 + [20])) = $4
	CALL $142($4)
	
.LABEL $label$19
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL $142(*(($10 + [32])))
	
.LABEL $label$20
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $141([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $52($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [784])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [784])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [784])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $56($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [608])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3794750970638893056, (int_64)3794750970638893056)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $34($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [608])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [24])) = *(($4 + [24]))
	*(($0 + [16])) = *(($4 + [16]))
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $41($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [28])) = *(($1 + [28]))
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [20])) = *(($1 + [20]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [608])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3794750970638893056, (int_64)3794750970638893056)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $34($0, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [608])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [672])
	CALL $35($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $36($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [160])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $31(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $67(*($1), *($0 + [12]))
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [192])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $141(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*(($1 + [40])) & [1]) == 0) ){ goto $label$11 }
	CALL $142(*(($1 + [48])))
	
.LABEL $label$11
	CALL $142($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $142($6)
	
.LABEL $label$12
	(unreachable)
}